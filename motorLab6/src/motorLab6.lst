
motorLab6.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08006490 l    d  .rodata	00000000 .rodata
08012bf8 l    d  .ARM	00000000 .ARM
08012c00 l    d  .init_array	00000000 .init_array
08012c04 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000388 l    d  .bss	00000000 .bss
20000d58 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
08001364 l       .text	00000000 LoopCopyDataInit
0800135e l       .text	00000000 CopyDataInit
08001376 l       .text	00000000 LoopFillZerobss
08001372 l       .text	00000000 FillZerobss
080013a0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08006478 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
20000388 l       .bss	00000001 completed.1
08012c04 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
2000038c l       .bss	00000018 object.0
08012c00 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 my_main.c
00000000 l    df *ABS*	00000000 mytest.c
200003a4 l     O .bss	00000004 LedState.0
00000000 l    df *ABS*	00000000 stepper_example.c
00000000 l    df *ABS*	00000000 syscall.c
200003f0 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
200003f4 l     O .bss	00000004 cmdArgs
200003f8 l     O .bss	00000004 count.3
200003fc l     O .bss	00000004 crReceived
200004a0 l     O .bss	00000004 saved.1
2000019c l     O .data	00000004 buf.2
200001a0 l     O .data	00000004 printPrompt.4
08011a6f l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
200004a4 l     O .bss	00000004 address.1
200001a4 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 terminal.c
200004a8 l     O .bss	00000834 TerminalState
08011f00 l     O .rodata	00000010 TerminalInfo
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 tasking.c
20000cdc l     O .bss	00000004 AccumTicks
00000000 l    df *ABS*	00000000 default.c
080120e4 l     O .rodata	00000013 __FUNCTION__.0
00000000 l    df *ABS*	00000000 decoder.c
08001ef4 l     F .text	0000007c Uncompress
20000ce0 l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_msp.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_uart.c
08002dc4 l     F .text	000000bc UART_SetConfig
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim.c
00000000 l    df *ABS*	00000000 version.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003f50 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
08004278 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080050f0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012b00 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005f54 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 STM32F411.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
200001b8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012c04 l       .init_array	00000000 __init_array_end
08012c00 l       .init_array	00000000 __preinit_array_end
08012c00 l       .init_array	00000000 __init_array_start
08012c00 l       .init_array	00000000 __preinit_array_start
080013a0  w    F .text	00000006 RTC_Alarm_IRQHandler
08006468 g     F .text	00000010 _malloc_usable_size_r
0800ee08 g     O .rodata	00000008 RTC_BKP19R_fields
08010850 g     O .rodata	00000050 TIM2_SR_fields
080032ac g     F .text	000000c4 __cvt
080013a0  w    F .text	00000006 EXTI2_IRQHandler
08003bb0 g     F .text	0000002c putchar
0800d438 g     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800fb80 g     O .rodata	00000008 STK_VAL_fields
08012621 g     O .rodata	00000008 APBPrescTable
08000e7c g     F .text	0000002c .hidden __aeabi_dcmpun
080013e6 g     F .text	00000004 _isatty_r
20000450 g     O .bss	00000050 input_b
08000e40 g     F .text	00000012 .hidden __aeabi_dcmple
08011080 g     O .rodata	00000018 TIM5_CR2_fields
08010810 g     O .rodata	00000008 TIM2_PSC_fields
08003e88 g     F .text	00000010 strcpy
08001440 g     F .text	00000004 _getpid
0800cee8 g     O .rodata	00000260 OTG_FS_DEVICE_registers
08003bdc g     F .text	000000dc _puts_r
0800cd90 g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
08000d7c g     F .text	0000007a .hidden __cmpdf2
08001fc4 g     F .text	00000054 DecodeWriteRegister
0800d890 g     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
080013ea g     F .text	00000004 _lseek_r
08002610 g     F .text	00000002 DebugMon_Handler
08001db4 g     F .text	00000044 CmdTasks
08010cb0 g     O .rodata	00000008 TIM3_PSC_fields
0800e138 g     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
080030d4 g     F .text	0000005c HAL_TIM_Base_Start
080094a8 g     O .rodata	00000008 ADC1_JOFR3_fields
08010818 g     O .rodata	00000038 TIM2_SMCR_fields
0800cab0 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800ddc0 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800c4f0 g     O .rodata	00000020 NVIC_IPR1_fields
08012b38 g     O .rodata	0000000c CmdTestE
0800fb40 g     O .rodata	00000018 STK_CALIB_fields
0800f3d0 g     O .rodata	00000008 SCB_AFSR_fields
080013a0  w    F .text	00000006 SPI4_IRQHandler
08000d7c g     F .text	0000007a .hidden __eqdf2
0800189c g     F .text	00000068 CmdStats
080108a0 g     O .rodata	00000150 TIM2_registers
0800ad50 g     O .rodata	00000100 GPIOA_BSRR_fields
0800f5e8 g     O .rodata	00000018 SCB_SHPR1_fields
0800be50 g     O .rodata	00000030 I2C3_CR2_fields
080094f8 g     O .rodata	00000028 ADC1_SQR1_fields
080008ec g     F .text	0000005a .hidden __floatdidf
0800fd38 g     O .rodata	00000008 TIM10_CNT_fields
08001b80 g     F .text	00000028 TerminalWritePolled
08006440 g     F .text	00000024 _kill_r
08010128 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800eff8 g     O .rodata	00000010 RTC_SHIFTR_fields
0800d978 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
08003b80 g     F .text	00000030 printf
08010808 g     O .rodata	00000008 TIM2_OR_fields
0800bd28 g     O .rodata	000000a0 GPIOH_registers
0800c430 g     O .rodata	00000020 NVIC_IPR14_fields
0800dd60 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
08002c18 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
08002d1c g     F .text	00000064 HAL_NVIC_SetPriority
080013a0  w    F .text	00000006 TIM1_CC_IRQHandler
0800f808 g     O .rodata	00000068 SDIO_ICR_fields
08002c38 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
080095b0 g     O .rodata	00000140 ADC1_registers
0800ff08 g     O .rodata	00000008 TIM11_OR_fields
08010748 g     O .rodata	00000018 TIM2_CR2_fields
08000f5e g     F .text	00000012 my_main
080062f2 g     F .text	00000024 __sseek
0800b820 g     O .rodata	00000040 GPIOH_AFRH_fields
080051a0 g     F .text	00000070 __sinit
080013a0  w    F .text	00000006 DMA2_Stream5_IRQHandler
080040bc g     F .text	000000a4 __swbuf_r
08002606 g     F .text	00000002 HardFault_Handler
08010ba0 g     O .rodata	00000010 TIM3_CNT_fields
08009900 g     O .rodata	000000a0 DMA2_HIFCR_fields
08009e08 g     O .rodata	00000008 DMA2_S2NDTR_fields
080097d0 g     O .rodata	00000008 CRC_CR_fields
0800fce0 g     O .rodata	00000018 TIM10_CCER_fields
08005144 g     F .text	0000002c __sfmoreglue
080013a0  w    F .text	00000006 DMA1_Stream5_IRQHandler
0800c610 g     O .rodata	00000008 NVIC_ISER0_fields
08006388 g     F .text	0000000c __malloc_unlock
0800fd88 g     O .rodata	00000008 TIM10_PSC_fields
0800a268 g     O .rodata	00000008 DMA2_S7NDTR_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
080101b8 g     O .rodata	00000008 TIM1_CCR3_fields
080102f8 g     O .rodata	00000008 TIM1_DMAR_fields
0800feb8 g     O .rodata	00000008 TIM11_CNT_fields
080106f8 g     O .rodata	00000010 TIM2_CNT_fields
08002614 g     F .text	00000012 SysTick_Handler
0800f118 g     O .rodata	00000008 RTC_WPR_fields
0800f008 g     O .rodata	00000008 RTC_SSR_fields
08012b5c g     O .rodata	0000000c CmdLedE
0800306c g     F .text	0000000a HAL_GPIO_WritePin
08009f98 g     O .rodata	00000020 DMA2_S4FCR_fields
080013a0  w    F .text	00000006 PVD_IRQHandler
08001c38 g     F .text	000000e0 TerminalISR
080013a0  w    F .text	00000006 SDIO_IRQHandler
08010280 g     O .rodata	00000078 TIM1_DIER_fields
0800c378 g     O .rodata	00000008 NVIC_ICPR0_fields
08006346 g     F .text	00000034 memmove
080013a0  w    F .text	00000006 TAMP_STAMP_IRQHandler
0800c510 g     O .rodata	00000020 NVIC_IPR2_fields
08012c08 g       *ABS*	00000000 _sidata
08002612 g     F .text	00000002 PendSV_Handler
0800c380 g     O .rodata	00000008 NVIC_ICPR1_fields
0800fb78 g     O .rodata	00000008 STK_LOAD_fields
08002604 g     F .text	00000002 NMI_Handler
08002d80 g     F .text	0000001c HAL_NVIC_EnableIRQ
0800d4d0 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
08005428 g     F .text	00000080 _Balloc
0800d440 g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
08012c00 g       .ARM	00000000 __exidx_end
0800ce28 g     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
08003f00 g     F .text	00000050 __strtok_r
0800d8e8 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
08009d20 g     O .rodata	00000008 DMA2_S1M1AR_fields
080013a0  w    F .text	00000006 EXTI3_IRQHandler
0800f938 g     O .rodata	00000008 SDIO_RESP1_fields
08002a84  w    F .text	0000005c HAL_RCC_GetSysClockFreq
08009fd8 g     O .rodata	000000a0 DMA2_S5CR_fields
08010fa0 g     O .rodata	00000050 TIM5_CCMR2_Output_fields
08000d6c g     F .text	0000008a .hidden __gtdf2
08009ed8 g     O .rodata	00000008 DMA2_S3M0AR_fields
08012bf8 g       .rodata	00000000 _parsetable_end
08003248 g     F .text	0000000c __errno
0800ee38 g     O .rodata	00000008 RTC_BKP6R_fields
0800eb48 g     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800f510 g     O .rodata	00000048 SCB_ICSR_fields
08003076 g     F .text	00000050 HAL_IWDG_Init
08012be0 g     O .rodata	0000000c CmdWE
0800c620 g     O .rodata	00000008 NVIC_ISER2_fields
0800f960 g     O .rodata	000000c0 SDIO_STA_fields
08002628 g     F .text	0000003c HAL_MspInit
0800c278 g     O .rodata	00000048 MPU_MPU_RASR_fields
080013a0  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
0800ca28 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
080013dc g     F .text	0000000a _fstat_r
08009fd0 g     O .rodata	00000008 DMA2_S4PAR_fields
080113e8 g     O .rodata	00000030 TIM9_CR1_fields
20000d54 g     O .bss	00000004 errno
0800b278 g     O .rodata	00000040 GPIOB_AFRH_fields
0800ccb8 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
08006490 g       .text	00000000 _etext
0800cdd8 g     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
20000388 g       .bss	00000000 _sbss
0800f620 g     O .rodata	000000f0 SCB_registers
0800c2c0 g     O .rodata	00000018 MPU_MPU_RBAR_fields
08010770 g     O .rodata	00000060 TIM2_DIER_fields
08000e08 g     F .text	00000010 .hidden __aeabi_cdcmple
08010f70 g     O .rodata	00000030 TIM5_CCMR2_Input_fields
0800b2f8 g     O .rodata	00000100 GPIOB_BSRR_fields
0800f710 g     O .rodata	00000008 SDIO_ARG_fields
080013a0  w    F .text	00000006 I2C3_ER_IRQHandler
0800ee58 g     O .rodata	00000010 RTC_CALIBR_fields
0800a258 g     O .rodata	00000008 DMA2_S7M0AR_fields
0800d7f0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800c888 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
20000004 g     O .data	00000004 isStepperEnabled
0800a0a8 g     O .rodata	00000008 DMA2_S5NDTR_fields
0800de98 g     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800aa98 g     O .rodata	00000048 FLASH_CR_fields
08010b60 g     O .rodata	00000010 TIM3_CCR1_fields
08010e90 g     O .rodata	00000060 TIM5_CCER_fields
0800edd8 g     O .rodata	00000008 RTC_BKP13R_fields
0800e670 g     O .rodata	00000008 RCC_AHB2ENR_fields
0800dec0 g     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
08009520 g     O .rodata	00000030 ADC1_SQR2_fields
080117c8 g     O .rodata	00000008 WWDG_SR_fields
0800aa08 g     O .rodata	00000060 EXTI_registers
08002edc g     F .text	00000190 HAL_GPIO_Init
0800d170 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800d750 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
080030c6 g     F .text	0000000c HAL_IWDG_Refresh
0800ab30 g     O .rodata	00000038 FLASH_SR_fields
0800cb30 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800dd10 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
08009c18 g     O .rodata	00000020 DMA2_S0FCR_fields
0800a188 g     O .rodata	00000008 DMA2_S6NDTR_fields
08001798 g     F .text	000000b0 DumpBuffer
080116c0 g     O .rodata	00000008 USART1_DR_fields
0800ae50 g     O .rodata	00000080 GPIOA_IDR_fields
20000cf4 g     O .bss	0000000c hiwdg
080113d0 g     O .rodata	00000008 TIM9_CCR1_fields
0800540c g     F .text	0000001c memcpy
08009720 g     O .rodata	00000090 ADC_Common_CSR_fields
08000df8 g     F .text	00000020 .hidden __aeabi_cdrcmple
080101c8 g     O .rodata	00000008 TIM1_CNT_fields
08010bb0 g     O .rodata	00000040 TIM3_CR1_fields
08003cc8 g     F .text	0000018c setvbuf
08010388 g     O .rodata	00000060 TIM1_SR_fields
0800f800 g     O .rodata	00000008 SDIO_FIFO_fields
08012b80 g     O .rodata	0000000c enableDisableStepperE
0800c410 g     O .rodata	00000020 NVIC_IPR13_fields
08005138 g     F .text	0000000c _cleanup_r
0800acd0 g     O .rodata	00000040 GPIOA_AFRH_fields
08005d54 g     F .text	00000200 _svfprintf_r
08000874 g     F .text	00000022 .hidden __floatsidf
0800d6b0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
08000d74 g     F .text	00000082 .hidden __ltdf2
080013a0  w    F .text	00000006 EXTI0_IRQHandler
080013a0  w    F .text	00000006 I2C2_EV_IRQHandler
0800abc8 g     O .rodata	00000008 FPU_CPACR_CPACR_fields
080011a4 g     F .text	00000058 enableDisableStepper
0800fd90 g     O .rodata	00000018 TIM10_SR_fields
0800ca58 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
08000214 g     F .text	00000000 .hidden __aeabi_uldivmod
08009b80 g     O .rodata	00000098 DMA2_S0CR_fields
080117d0 g     O .rodata	00000030 WWDG_registers
08003cb8 g     F .text	00000010 puts
08009a40 g     O .rodata	000000a0 DMA2_LIFCR_fields
080013a0  w    F .text	00000006 DMA1_Stream2_IRQHandler
080013a0  w    F .text	00000006 FPU_IRQHandler
0800ddd8 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
200001a8 g     O .data	00000004 SystemCoreClock
08009fc0 g     O .rodata	00000008 DMA2_S4M1AR_fields
080001f4 g     F .text	00000012 my_Tick
08000f9c g     F .text	00000014 USR_LED_Toggle
0800ac30 g     O .rodata	00000070 FPU_FPSCR_fields
0800c000 g     O .rodata	00000070 I2S2ext_CR1_fields
080106b8 g     O .rodata	00000010 TIM2_CCR1_fields
0800deb0 g     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800beb8 g     O .rodata	00000070 I2C3_SR1_fields
0800d380 g     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
080053d8 g     F .text	00000010 malloc
0800c208 g     O .rodata	00000008 IWDG_RLR_fields
200001ac g     O .data	00000001 uwTickFreq
08003224 g     F .text	00000018 VersionPrint
08012b38 g       .rodata	00000000 _tasktable_end
0800f7f8 g     O .rodata	00000008 SDIO_FIFOCNT_fields
080063e0 g     F .text	00000050 _raise_r
0800423c g     F .text	0000003c __assert_func
08012a38 g     O .rodata	000000c8 __mprec_tens
0800e680 g     O .rodata	00000008 RCC_AHB2RSTR_fields
08009fc8 g     O .rodata	00000008 DMA2_S4NDTR_fields
0800c350 g     O .rodata	00000008 NVIC_IABR1_fields
0800260c g     F .text	00000002 UsageFault_Handler
0800fd40 g     O .rodata	00000028 TIM10_CR1_fields
080040a0 g     F .text	0000001c vsnprintf
0800fd30 g     O .rodata	00000008 TIM10_CCR1_fields
08010c78 g     O .rodata	00000008 TIM3_DMAR_fields
08001e24 g     F .text	00000010 TaskingTickHandler
20000400 g     O .bss	00000050 input
080013a0  w    F .text	00000006 DMA2_Stream2_IRQHandler
08006464 g     F .text	00000004 _getpid_r
20000388 g       .bss	00000000 __bss_start__
0800c0b8 g     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800c370 g     O .rodata	00000008 NVIC_ICER2_fields
08004034 g     F .text	00000014 strtoul
08000854 g     F .text	0000001e .hidden __aeabi_ui2d
08005300 g     F .text	00000008 _localeconv_r
08005618 g     F .text	0000002c __i2b
0800d9c0 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800a178 g     O .rodata	00000008 DMA2_S6M0AR_fields
20000000 g       .data	00000000 _sdata
080013a0  w    F .text	00000006 SPI1_IRQHandler
08001da8 g     F .text	0000000c WDTFeed
080098c0 g     O .rodata	00000040 DBG_registers
08000244 g     F .text	000002d0 .hidden __udivmoddi4
080005d0 g     F .text	00000000 .hidden __aeabi_drsub
080094f0 g     O .rodata	00000008 ADC1_SMPR2_fields
080013a8 g     F .text	00000030 _sbrk_r
0800c550 g     O .rodata	00000020 NVIC_IPR4_fields
080099a0 g     O .rodata	000000a0 DMA2_HISR_fields
0800f398 g     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
080111d8 g     O .rodata	00000150 TIM5_registers
0800a7e0 g     O .rodata	000000b8 EXTI_PR_fields
08012b98 g     O .rodata	0000000c timerEventE
0800c4b0 g     O .rodata	00000020 NVIC_IPR18_fields
0800d660 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800da98 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
080100d8 g     O .rodata	00000050 TIM1_CCMR1_Output_fields
0800cd20 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
080013ee g     F .text	0000000a _read_r
08009c40 g     O .rodata	00000008 DMA2_S0M1AR_fields
0800c8f0 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
08010350 g     O .rodata	00000038 TIM1_SMCR_fields
080013a0  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
0800d3d0 g     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
08000e2c g     F .text	00000012 .hidden __aeabi_dcmplt
20000d44 g     O .bss	00000004 uwTick
08002460 g     F .text	0000009c SystemClock_Config
08010548 g     O .rodata	00000010 TIM2_ARR_fields
0800c118 g     O .rodata	00000048 I2S2ext_SR_fields
0800cd38 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800fef8 g     O .rodata	00000010 TIM11_EGR_fields
08010a60 g     O .rodata	00000030 TIM3_CCMR1_Input_fields
0800a098 g     O .rodata	00000008 DMA2_S5M0AR_fields
080114b0 g     O .rodata	000000e0 TIM9_registers
0800ef30 g     O .rodata	00000038 RTC_DR_fields
0800ddf0 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
08010b80 g     O .rodata	00000010 TIM3_CCR3_fields
08011418 g     O .rodata	00000008 TIM9_CR2_fields
080101a8 g     O .rodata	00000008 TIM1_CCR1_fields
08009c38 g     O .rodata	00000008 DMA2_S0M0AR_fields
08002d9c g     F .text	00000028 HAL_SYSTICK_Config
08000898 g     F .text	00000042 .hidden __extendsfdf2
08000b9c g     F .text	000001d0 .hidden __aeabi_ddiv
08009478 g     O .rodata	00000008 ADC1_JDR1_fields
0800c1f8 g     O .rodata	00000008 IWDG_KR_fields
0800bf68 g     O .rodata	00000008 I2C3_TRISE_fields
080005dc g     F .text	00000276 .hidden __adddf3
0800c110 g     O .rodata	00000008 I2S2ext_RXCRCR_fields
080019e0 g     F .text	00000060 CmdReceive
080097e8 g     O .rodata	00000030 CRC_registers
080115a0 g     O .rodata	00000078 USART1_CR1_fields
0800f128 g     O .rodata	00000270 RTC_registers
08010c18 g     O .rodata	00000060 TIM3_DIER_fields
0800eb58 g     O .rodata	00000020 RCC_SSCGR_fields
08012bf8 g       .ARM	00000000 __exidx_start
08009fb8 g     O .rodata	00000008 DMA2_S4M0AR_fields
08000f48 g     F .text	00000016 my_init
0800bf70 g     O .rodata	00000090 I2C3_registers
08000948 g     F .text	00000254 .hidden __aeabi_dmul
080013a0  w    F .text	00000006 DMA2_Stream3_IRQHandler
08012bd4 g     O .rodata	0000000c CmdVersionE
0800e1b0 g     O .rodata	00000038 PWR_CSR_fields
0800ed28 g     O .rodata	00000010 RTC_ALRMASSR_fields
0800fc38 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08011000 g     O .rodata	00000010 TIM5_CCR2_fields
20000d4a g     O .bss	00000001 __lock___sinit_recursive_mutex
0800c348 g     O .rodata	00000008 NVIC_IABR0_fields
08012784 g     O .rodata	00000004 _global_impure_ptr
08010d40 g     O .rodata	00000140 TIM3_registers
08010b70 g     O .rodata	00000010 TIM3_CCR2_fields
08011148 g     O .rodata	00000008 TIM5_PSC_fields
08006394 g     F .text	0000004c _realloc_r
08003254 g     F .text	00000048 __libc_init_array
0800edd0 g     O .rodata	00000008 RTC_BKP12R_fields
080116c8 g     O .rodata	00000010 USART1_GTPR_fields
0800cc90 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800b700 g     O .rodata	00000080 GPIOB_PUPDR_fields
08001464 g     F .text	00000070 CmdR
0800cac8 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
08012a10 g     O .rodata	00000028 __mprec_bigtens
080101c0 g     O .rodata	00000008 TIM1_CCR4_fields
08006338 g     F .text	0000000e abort
08000854 g     F .text	0000001e .hidden __floatunsidf
08011188 g     O .rodata	00000050 TIM5_SR_fields
0800592c g     F .text	00000038 __mcmp
0800c5b0 g     O .rodata	00000020 NVIC_IPR7_fields
080094e0 g     O .rodata	00000008 ADC1_LTR_fields
20000384 g     O .data	00000004 TaskInputTaskState
080013a0  w    F .text	00000006 USART6_IRQHandler
0800edc0 g     O .rodata	00000008 RTC_BKP10R_fields
08009df8 g     O .rodata	00000008 DMA2_S2M0AR_fields
0800eb78 g     O .rodata	00000140 RCC_registers
08006478 g     F .text	00000000 _init
080094b0 g     O .rodata	00000008 ADC1_JOFR4_fields
0800e748 g     O .rodata	00000060 RCC_APB1RSTR_fields
0800edb8 g     O .rodata	00000008 RTC_BKP0R_fields
0800e6e8 g     O .rodata	00000060 RCC_APB1LPENR_fields
0800e628 g     O .rodata	00000048 RCC_AHB1RSTR_fields
08012b38 g       .rodata	00000000 _parsetable_start
0800a198 g     O .rodata	000000a0 DMA2_S7CR_fields
08012b20 g       .rodata	00000000 _tasktable_start
0800ee48 g     O .rodata	00000008 RTC_BKP8R_fields
08010638 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800c368 g     O .rodata	00000008 NVIC_ICER1_fields
08012b68 g     O .rodata	0000000c CmdRE
0800c9f8 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800ea48 g     O .rodata	00000050 RCC_CSR_fields
0800b0d8 g     O .rodata	00000080 GPIOA_OTYPER_fields
080103e8 g     O .rodata	00000160 TIM1_registers
0800f560 g     O .rodata	00000018 SCB_SCR_fields
08001b08 g     F .text	00000078 CmdSend
0800dc20 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
080094b8 g     O .rodata	00000028 ADC1_JSQR_fields
0800f930 g     O .rodata	00000008 SDIO_POWER_fields
20000d58 g       .bss	00000000 _ebss
08000f70 g     F .text	0000002c CmdTest
08009c50 g     O .rodata	00000008 DMA2_S0PAR_fields
0800cd78 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800ad10 g     O .rodata	00000040 GPIOA_AFRL_fields
08001350  w    F .text	00000038 Reset_Handler
080040a0 g     F .text	0000001c vsniprintf
08003130 g     F .text	0000009c TIM_Base_SetConfig
0800fda8 g     O .rodata	000000b0 TIM10_registers
0800c390 g     O .rodata	00000020 NVIC_IPR0_fields
0800afd8 g     O .rodata	00000080 GPIOA_ODR_fields
08005578 g     F .text	00000040 __hi0bits
0800c450 g     O .rodata	00000020 NVIC_IPR15_fields
080101b0 g     O .rodata	00000008 TIM1_CCR2_fields
08009818 g     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
08010b10 g     O .rodata	00000050 TIM3_CCMR2_Output_fields
080097d8 g     O .rodata	00000008 CRC_DR_fields
08000ea8 g     F .text	0000004e .hidden __fixdfsi
0800b600 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800bde0 g     O .rodata	00000070 I2C3_CR1_fields
0800cb98 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
20000d48 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800cc00 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
080020c8 g     F .text	00000054 DecodePeripheral
08011020 g     O .rodata	00000010 TIM5_CCR4_fields
08009580 g     O .rodata	00000030 ADC1_SR_fields
0800fbd8 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
080013a0  w    F .text	00000006 DMA2_Stream0_IRQHandler
08009ae0 g     O .rodata	000000a0 DMA2_LISR_fields
0800f0e0 g     O .rodata	00000038 RTC_TSTR_fields
200001b0 g     O .data	00000004 uwTickPrio
0800cd08 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
08010708 g     O .rodata	00000040 TIM2_CR1_fields
08002ca0 g     F .text	00000034 HAL_Init
0800dd78 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800ea98 g     O .rodata	000000b0 RCC_PLLCFGR_fields
0800d4e0 g     O .rodata	00000130 OTG_FS_GLOBAL_registers
08006208 g     F .text	00000090 _putc_r
0800a078 g     O .rodata	00000020 DMA2_S5FCR_fields
0800f618 g     O .rodata	00000008 SCB_VTOR_fields
0800e5d0 g     O .rodata	00000058 RCC_AHB1LPENR_fields
0800edf8 g     O .rodata	00000008 RTC_BKP17R_fields
08009398 g     O .rodata	00000070 ADC1_CR1_fields
0800529c g     F .text	00000024 fprintf
080013a0  w    F .text	00000006 TIM4_IRQHandler
080005dc g     F .text	00000276 .hidden __aeabi_dadd
0800f4f8 g     O .rodata	00000018 SCB_HFSR_fields
0800fcd8 g     O .rodata	00000008 TIM10_ARR_fields
08000d74 g     F .text	00000082 .hidden __ledf2
0800d840 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800b8a0 g     O .rodata	00000100 GPIOH_BSRR_fields
080105b8 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0800cd98 g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800a898 g     O .rodata	000000b8 EXTI_RTSR_fields
0800a0b8 g     O .rodata	000000a0 DMA2_S6CR_fields
0800f940 g     O .rodata	00000008 SDIO_RESP2_fields
0800ee40 g     O .rodata	00000008 RTC_BKP7R_fields
08005798 g     F .text	000000b4 __pow5mult
080008dc g     F .text	0000006a .hidden __aeabi_ul2d
0800a0b0 g     O .rodata	00000008 DMA2_S5PAR_fields
0800a950 g     O .rodata	000000b8 EXTI_SWIER_fields
0800a5b8 g     O .rodata	000000b8 EXTI_EMR_fields
0800ee00 g     O .rodata	00000008 RTC_BKP18R_fields
0800aae0 g     O .rodata	00000008 FLASH_KEYR_fields
080001e0 g     F .text	00000014 mytest
08012928 g     O .rodata	00000020 __sf_fake_stderr
08011360 g     O .rodata	00000030 TIM9_CCMR1_Input_fields
08010bf0 g     O .rodata	00000018 TIM3_CR2_fields
080106e8 g     O .rodata	00000010 TIM2_CCR4_fields
20000d58 g       ._user_heap_stack	00000000 end
080013a0  w    F .text	00000006 I2C1_EV_IRQHandler
0800c168 g     O .rodata	00000090 I2S2ext_registers
0800530c g     F .text	00000002 __retarget_lock_release_recursive
080013a0  w    F .text	00000006 DMA1_Stream6_IRQHandler
08002170 g     F .text	00000064 DecodePrintRegisters
08011728 g     O .rodata	00000070 USART1_registers
20000384 g       .data	00000000 _taskstate_start
0800e688 g     O .rodata	00000060 RCC_APB1ENR_fields
08005c9c g     F .text	000000b6 __ssputs_r
0800c360 g     O .rodata	00000008 NVIC_ICER0_fields
0800c618 g     O .rodata	00000008 NVIC_ISER1_fields
08010300 g     O .rodata	00000040 TIM1_EGR_fields
080105e8 g     O .rodata	00000050 TIM2_CCMR1_Output_fields
08012bc8 g     O .rodata	0000000c trapoStepperRunnerE
080106c8 g     O .rodata	00000010 TIM2_CCR2_fields
0800bf28 g     O .rodata	00000040 I2C3_SR2_fields
0800bb28 g     O .rodata	00000080 GPIOH_ODR_fields
0800feb0 g     O .rodata	00000008 TIM11_CCR1_fields
0800da08 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
080110a8 g     O .rodata	00000060 TIM5_DIER_fields
0800ee20 g     O .rodata	00000008 RTC_BKP3R_fields
08000e68 g     F .text	00000012 .hidden __aeabi_dcmpgt
080013a0  w    F .text	00000006 DMA1_Stream1_IRQHandler
08011480 g     O .rodata	00000030 TIM9_SR_fields
0800d198 g     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800dec8 g     O .rodata	00000270 OTG_FS_HOST_registers
08005f82 g     F .text	00000024 __sfputs_r
0800cd80 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800ee30 g     O .rodata	00000008 RTC_BKP5R_fields
08005170 g     F .text	0000000c __sfp_lock_acquire
08000530 g     F .text	00000000 memchr
080033ec  w    F .text	0000046c _printf_float
0800e588 g     O .rodata	00000048 RCC_AHB1ENR_fields
20000d58 g       .bss	00000000 __bss_end__
08005b50 g     F .text	00000098 _free_r
080013a0  w    F .text	00000006 TIM3_IRQHandler
080013a0  w    F .text	00000006 RCC_IRQHandler
0800ee68 g     O .rodata	00000020 RTC_CALR_fields
08009eb8 g     O .rodata	00000020 DMA2_S3FCR_fields
08000e54 g     F .text	00000012 .hidden __aeabi_dcmpge
08009ee8 g     O .rodata	00000008 DMA2_S3NDTR_fields
0800fe60 g     O .rodata	00000018 TIM11_CCER_fields
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800b680 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800e678 g     O .rodata	00000008 RCC_AHB2LPENR_fields
0800ee50 g     O .rodata	00000008 RTC_BKP9R_fields
0800be88 g     O .rodata	00000020 I2C3_OAR1_fields
0800bdc8 g     O .rodata	00000018 I2C3_CCR_fields
080005d8 g     F .text	0000027a .hidden __aeabi_dsub
080013a0 g       .text	00000006 Default_Handler
0800da50 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800aed0 g     O .rodata	00000088 GPIOA_LCKR_fields
0800f010 g     O .rodata	00000068 RTC_TAFCR_fields
08012611 g     O .rodata	00000010 AHBPrescTable
0800b1d8 g     O .rodata	000000a0 GPIOA_registers
0800c638 g     O .rodata	00000008 NVIC_ISPR2_fields
08001788 g     F .text	00000010 fetch_cmd_args
08010668 g     O .rodata	00000050 TIM2_CCMR2_Output_fields
08010a90 g     O .rodata	00000050 TIM3_CCMR1_Output_fields
0800b478 g     O .rodata	00000088 GPIOB_LCKR_fields
080010d0 g     F .text	000000d4 timerEvent
0800bea8 g     O .rodata	00000010 I2C3_OAR2_fields
080008dc g     F .text	0000006a .hidden __floatundidf
080113e0 g     O .rodata	00000008 TIM9_CNT_fields
0800fa20 g     O .rodata	00000120 SDIO_registers
0800c3b0 g     O .rodata	00000020 NVIC_IPR10_fields
0800584c g     F .text	000000e0 __lshift
0800a190 g     O .rodata	00000008 DMA2_S6PAR_fields
0800c160 g     O .rodata	00000008 I2S2ext_TXCRCR_fields
08011420 g     O .rodata	00000020 TIM9_DIER_fields
200003a8 g     O .bss	00000048 htim11
08010348 g     O .rodata	00000008 TIM1_RCR_fields
0800ca88 g     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800c570 g     O .rodata	00000020 NVIC_IPR5_fields
080013a0  w    F .text	00000006 EXTI15_10_IRQHandler
0800fc58 g     O .rodata	00000008 SYSCFG_MEMRM_fields
0800c0f8 g     O .rodata	00000018 I2S2ext_I2SPR_fields
0800f078 g     O .rodata	00000038 RTC_TR_fields
0800c490 g     O .rodata	00000020 NVIC_IPR17_fields
0800323c g     F .text	0000000c CmdVersion
08011110 g     O .rodata	00000030 TIM5_EGR_fields
080013a0  w    F .text	00000006 ADC_IRQHandler
0800c4d0 g     O .rodata	00000020 NVIC_IPR19_fields
0800fbf8 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800fd78 g     O .rodata	00000010 TIM10_EGR_fields
08005644 g     F .text	00000154 __multiply
08002ae0 g     F .text	00000138 HAL_RCC_ClockConfig
08002cf8 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
0800bca8 g     O .rodata	00000080 GPIOH_PUPDR_fields
080015e4 g     F .text	00000138 TaskInput
0800f0d8 g     O .rodata	00000008 RTC_TSSSR_fields
0800e9e8 g     O .rodata	00000060 RCC_CR_fields
08005a78 g     F .text	000000b8 __d2b
0800c0b0 g     O .rodata	00000008 I2S2ext_DR_fields
08011618 g     O .rodata	00000048 USART1_CR2_fields
0800a270 g     O .rodata	00000008 DMA2_S7PAR_fields
08003e54 g     F .text	00000034 strcasecmp
0800fff8 g     O .rodata	00000040 TIM1_BDTR_fields
0800fb58 g     O .rodata	00000020 STK_CTRL_fields
080094e8 g     O .rodata	00000008 ADC1_SMPR1_fields
08011010 g     O .rodata	00000010 TIM5_CCR3_fields
080013a0  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800dc70 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800020c g     F .text	00000004 my_Init
0800e800 g     O .rodata	00000058 RCC_APB2LPENR_fields
08000fb0 g     F .text	00000014 DelayNS
0800dda8 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
080013a0  w    F .text	00000006 SPI5_IRQHandler
0800f750 g     O .rodata	00000048 SDIO_CMD_fields
08000fc4 g     F .text	0000003c timerInit
08012b74 g     O .rodata	0000000c CmdReceiveE
0800d8a0 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800f3d8 g     O .rodata	00000030 SCB_AIRCR_fields
080097b0 g     O .rodata	00000020 ADC_Common_registers
0800ede0 g     O .rodata	00000008 RTC_BKP14R_fields
0800b860 g     O .rodata	00000040 GPIOH_AFRL_fields
080013d8 g     F .text	00000004 _close_r
08000874 g     F .text	00000022 .hidden __aeabi_i2d
080097e0 g     O .rodata	00000008 CRC_IDR_fields
08011460 g     O .rodata	00000008 TIM9_PSC_fields
080013a0  w    F .text	00000006 TIM5_IRQHandler
0800c220 g     O .rodata	00000040 IWDG_registers
08003e98 g     F .text	00000068 strtok
0800deb8 g     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
08012b20 g     O .rodata	00000018 TaskInputTask
0800dbd0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800b9a0 g     O .rodata	00000080 GPIOH_IDR_fields
0800cea8 g     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800c200 g     O .rodata	00000008 IWDG_PR_fields
08010ae0 g     O .rodata	00000030 TIM3_CCMR2_Input_fields
08001df8 g     F .text	0000002c TaskingInit
080013a0  w    F .text	00000006 DMA2_Stream7_IRQHandler
080031cc g     F .text	00000058 HAL_TIM_Base_Init
0800f950 g     O .rodata	00000008 SDIO_RESP4_fields
0800c3d0 g     O .rodata	00000020 NVIC_IPR11_fields
080013a0  w    F .text	00000006 I2C3_EV_IRQHandler
0800c958 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800fbc8 g     O .rodata	00000010 SYSCFG_CMPCR_fields
08001948 g     F .text	0000004c TerminalInit
08004160 g     F .text	000000dc __swsetup_r
08000514  w    F .text	00000002 .hidden __aeabi_ldiv0
080013a0  w    F .text	00000006 EXTI9_5_IRQHandler
08000b9c g     F .text	000001d0 .hidden __divdf3
08009468 g     O .rodata	00000008 ADC1_DR_fields
08005210 g     F .text	0000008c __sfp
0800d180 g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
080013a0  w    F .text	00000006 RTC_WKUP_IRQHandler
08011590 g     O .rodata	00000010 USART1_BRR_fields
08001ba8 g     F .text	0000002a PolledPrintf
0800a158 g     O .rodata	00000020 DMA2_S6FCR_fields
0800cd50 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
08005194 g     F .text	0000000c __sinit_lock_release
08004048 g     F .text	00000056 _vsnprintf_r
08000948 g     F .text	00000254 .hidden __muldf3
08001848 g     F .text	00000054 CmdDump
08001e34 g     F .text	00000068 TaskingRun
08006298 g     F .text	00000022 __sread
08011798 g     O .rodata	00000020 WWDG_CFR_fields
08009dd8 g     O .rodata	00000020 DMA2_S2FCR_fields
0800e208 g     O .rodata	00000380 Peripherals
0800f870 g     O .rodata	000000c0 SDIO_MASK_fields
0800b580 g     O .rodata	00000080 GPIOB_ODR_fields
08002cec  w    F .text	0000000c HAL_GetTick
0800fcf8 g     O .rodata	00000018 TIM10_CCMR1_Input_fields
0800637c g     F .text	0000000c __malloc_lock
0800c628 g     O .rodata	00000008 NVIC_ISPR0_fields
0800abe8 g     O .rodata	00000048 FPU_FPCCR_fields
08009ee0 g     O .rodata	00000008 DMA2_S3M1AR_fields
0800baa8 g     O .rodata	00000080 GPIOH_MODER_fields
0800c358 g     O .rodata	00000008 NVIC_IABR2_fields
08005078 g     F .text	00000078 _fflush_r
08005b30 g     F .text	0000001e _calloc_r
08009868 g     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800b158 g     O .rodata	00000080 GPIOA_PUPDR_fields
080013a0  w    F .text	00000006 SPI2_IRQHandler
0800cda8 g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800fee8 g     O .rodata	00000010 TIM11_DIER_fields
08012948 g     O .rodata	00000020 __sf_fake_stdin
0800f608 g     O .rodata	00000010 SCB_SHPR3_fields
0800c640 g     O .rodata	00000008 NVIC_STIR_STIR_fields
08011108 g     O .rodata	00000008 TIM5_DMAR_fields
0800530a g     F .text	00000002 __retarget_lock_acquire_recursive
08009ef0 g     O .rodata	00000008 DMA2_S3PAR_fields
0800a728 g     O .rodata	000000b8 EXTI_IMR_fields
0800d7a0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800f0b0 g     O .rodata	00000028 RTC_TSDR_fields
0800329c g     F .text	00000010 memset
08002608 g     F .text	00000002 MemManage_Handler
080024fc g     F .text	00000108 main
0800fc18 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
0800fe90 g     O .rodata	00000020 TIM11_CCMR1_Output_fields
080013a0  w    F .text	00000006 DMA1_Stream0_IRQHandler
0800a180 g     O .rodata	00000008 DMA2_S6M1AR_fields
08005308 g     F .text	00000002 __retarget_lock_init_recursive
08009488 g     O .rodata	00000008 ADC1_JDR3_fields
0800a238 g     O .rodata	00000020 DMA2_S7FCR_fields
0800fec0 g     O .rodata	00000028 TIM11_CR1_fields
0801267d g     O .rodata	00000006 VersionBuildUser
08011040 g     O .rodata	00000040 TIM5_CR1_fields
08009d28 g     O .rodata	00000008 DMA2_S1NDTR_fields
0800c5f0 g     O .rodata	00000020 NVIC_IPR9_fields
0800c470 g     O .rodata	00000020 NVIC_IPR16_fields
0800db30 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
0800260e g     F .text	00000002 SVC_Handler
08006316 g     F .text	00000008 __sclose
08009e10 g     O .rodata	00000008 DMA2_S2PAR_fields
08010b90 g     O .rodata	00000010 TIM3_CCR4_fields
08001bd4 g     F .text	00000064 TerminalInputBufferWrite
08004390 g     F .text	00000bdc _dtoa_r
08005be8 g     F .text	000000b4 _malloc_r
0800b2b8 g     O .rodata	00000040 GPIOB_AFRL_fields
0800631e g     F .text	0000001a __ascii_wctomb
0800d490 g     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
08009c48 g     O .rodata	00000008 DMA2_S0NDTR_fields
080008ec g     F .text	0000005a .hidden __aeabi_l2d
080100a8 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800a0a0 g     O .rodata	00000008 DMA2_S5M1AR_fields
0800c0a8 g     O .rodata	00000008 I2S2ext_CRCPR_fields
0800abd0 g     O .rodata	00000010 FPU_CPACR_registers
08010c80 g     O .rodata	00000030 TIM3_EGR_fields
08009d18 g     O .rodata	00000008 DMA2_S1M0AR_fields
0800f410 g     O .rodata	00000030 SCB_CCR_fields
080013a0  w    F .text	00000006 EXTI4_IRQHandler
0800ff10 g     O .rodata	00000008 TIM11_PSC_fields
0800ee28 g     O .rodata	00000008 RTC_BKP4R_fields
0800edf0 g     O .rodata	00000008 RTC_BKP16R_fields
08009cf8 g     O .rodata	00000020 DMA2_S1FCR_fields
080096f0 g     O .rodata	00000030 ADC_Common_CCR_fields
0800edc8 g     O .rodata	00000008 RTC_BKP11R_fields
08002710 g     F .text	00000014 SystemInit
0800f558 g     O .rodata	00000008 SCB_MMFAR_fields
08011030 g     O .rodata	00000010 TIM5_CNT_fields
08000d7c g     F .text	0000007a .hidden __nedf2
0800ed38 g     O .rodata	00000070 RTC_ALRMBR_fields
08010760 g     O .rodata	00000010 TIM2_DCR_fields
08006484 g     F .text	00000000 _fini
08001444 g     F .text	0000001e CmdW
0800d280 g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
08003b80 g     F .text	00000030 iprintf
08011468 g     O .rodata	00000018 TIM9_SMCR_fields
20000388 g       .data	00000000 _taskstate_end
0800ff30 g     O .rodata	000000c0 TIM11_registers
08002694 g     F .text	0000007c HAL_UART_MspInit
08003370 g     F .text	0000007c __exponent
0800ca98 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800f120 g     O .rodata	00000008 RTC_WUTR_fields
0800ef68 g     O .rodata	00000080 RTC_ISR_fields
08010270 g     O .rodata	00000010 TIM1_DCR_fields
0800e160 g     O .rodata	00000050 PWR_CR_fields
080107d8 g     O .rodata	00000030 TIM2_EGR_fields
0800aca0 g     O .rodata	00000030 FPU_registers
080013f8 g     F .text	00000040 _write_r
0800fc60 g     O .rodata	00000008 SYSCFG_PMC_fields
0800d400 g     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
080098b0 g     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
08009550 g     O .rodata	00000030 ADC1_SQR3_fields
08009408 g     O .rodata	00000060 ADC1_CR2_fields
0800f718 g     O .rodata	00000038 SDIO_CLKCR_fields
0800dae0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
08002c58  w    F .text	00000048 HAL_InitTick
0800ce78 g     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
08010e80 g     O .rodata	00000010 TIM5_ARR_fields
08003858 g     F .text	000000da _printf_common
0800c3f0 g     O .rodata	00000020 NVIC_IPR12_fields
200001b4 g     O .data	00000004 _impure_ptr
0800cec8 g     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
08009490 g     O .rodata	00000008 ADC1_JDR4_fields
08004f6c g     F .text	0000010c __sflush_r
08002cd4  w    F .text	00000018 HAL_IncTick
0800e8e0 g     O .rodata	00000068 RCC_CFGR_fields
0800ee88 g     O .rodata	000000a8 RTC_CR_fields
0800a670 g     O .rodata	000000b8 EXTI_FTSR_fields
08005d54 g     F .text	00000200 _svfiprintf_r
0800d348 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
080116d8 g     O .rodata	00000050 USART1_SR_fields
0800de20 g     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
080013a0  w    F .text	00000006 WWDG_IRQHandler
0800c070 g     O .rodata	00000038 I2S2ext_CR2_fields
08009470 g     O .rodata	00000008 ADC1_HTR_fields
0800c590 g     O .rodata	00000020 NVIC_IPR6_fields
08010ff0 g     O .rodata	00000010 TIM5_CCR1_fields
080106d8 g     O .rodata	00000010 TIM2_CCR3_fields
08001e9c g     F .text	00000058 Default_IRQHandler
080053e8 g     F .text	00000024 __ascii_mbtowc
0800af58 g     O .rodata	00000080 GPIOA_MODER_fields
08012bbc g     O .rodata	0000000c CmdTransparentE
08001904 g     F .text	00000044 CmdTransparent
08010210 g     O .rodata	00000060 TIM1_CR2_fields
0800efe8 g     O .rodata	00000010 RTC_PRER_fields
0800c648 g     O .rodata	00000010 NVIC_STIR_registers
080113d8 g     O .rodata	00000008 TIM9_CCR2_fields
0800db80 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800fd68 g     O .rodata	00000010 TIM10_DIER_fields
08010ef0 g     O .rodata	00000030 TIM5_CCMR1_Input_fields
08010c08 g     O .rodata	00000010 TIM3_DCR_fields
0800fb88 g     O .rodata	00000040 STK_registers
080013a0  w    F .text	00000006 TIM2_IRQHandler
0800bc28 g     O .rodata	00000080 GPIOH_OTYPER_fields
08000208 g     F .text	00000004 my_Loop
0800cd88 g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
08012b50 g     O .rodata	0000000c CmdDecodeE
08004048 g     F .text	00000056 _vsniprintf_r
0800f4d0 g     O .rodata	00000028 SCB_CPUID_fields
20000000 g       .data	00000000 myTickCount
0800f798 g     O .rodata	00000008 SDIO_DCOUNT_fields
0800a278 g     O .rodata	00000340 DMA2_registers
0800de30 g     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
080013a0  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
0800aa68 g     O .rodata	00000030 FLASH_ACR_fields
080013a0  w    F .text	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800ecb8 g     O .rodata	00000070 RTC_ALRMAR_fields
0800fff0 g     O .rodata	00000008 TIM1_ARR_fields
0800bba8 g     O .rodata	00000080 GPIOH_OSPEEDR_fields
08009d30 g     O .rodata	00000008 DMA2_S1PAR_fields
0800aae8 g     O .rodata	00000040 FLASH_OPTCR_fields
0800530e g     F .text	0000004a __swhatbuf_r
080014d4 g     F .text	00000110 parse
20020000 g       *ABS*	00000000 _estack
08012664 g     O .rodata	00000019 VersionBuildDateString
08009888 g     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800d468 g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800ee18 g     O .rodata	00000008 RTC_BKP2R_fields
080013a0  w    F .text	00000006 EXTI1_IRQHandler
08000e18 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800f7a0 g     O .rodata	00000048 SDIO_DCTRL_fields
0800fe78 g     O .rodata	00000018 TIM11_CCMR1_Input_fields
08009e18 g     O .rodata	000000a0 DMA2_S3CR_fields
0800f7f0 g     O .rodata	00000008 SDIO_DTIMER_fields
0800abe0 g     O .rodata	00000008 FPU_FPCAR_fields
20000388 g       .data	00000000 _edata
0800d358 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800f948 g     O .rodata	00000008 SDIO_RESP3_fields
20000d00 g     O .bss	00000044 huart2
0800f958 g     O .rodata	00000008 SDIO_RESPCMD_fields
080021d4 g     F .text	0000028c CmdDecode
08011390 g     O .rodata	00000040 TIM9_CCMR1_Output_fields
0800b3f8 g     O .rodata	00000080 GPIOB_IDR_fields
08002664 g     F .text	00000030 HAL_TIM_Base_MspInit
0800e150 g     O .rodata	00000010 OTG_FS_PWRCLK_registers
08011328 g     O .rodata	00000008 TIM9_ARR_fields
08009d38 g     O .rodata	000000a0 DMA2_S2CR_fields
0800e858 g     O .rodata	00000050 RCC_APB2RSTR_fields
0800d1b8 g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800171c g     F .text	0000003c fetch_uint32_arg
0800eda8 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08001d18 g     F .text	00000006 USART2_IRQHandler
0800c658 g     O .rodata	00000230 NVIC_registers
08001000 g     F .text	000000d0 stepperInit
0800c2d8 g     O .rodata	00000008 MPU_MPU_RNR_fields
080062ba g     F .text	00000038 __swrite
08002724  w    F .text	00000360 HAL_RCC_OscConfig
08011440 g     O .rodata	00000020 TIM9_EGR_fields
0800529c g     F .text	00000024 fiprintf
08005fa8 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800cd68 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
080052c0 g     F .text	0000003e _fwalk_reent
08005964 g     F .text	00000114 __mdiff
08000ea8 g     F .text	0000004e .hidden __aeabi_d2iz
0800ede8 g     O .rodata	00000008 RTC_BKP15R_fields
0800e1e8 g     O .rodata	00000020 PWR_registers
08009e00 g     O .rodata	00000008 DMA2_S2M1AR_fields
0800c260 g     O .rodata	00000018 MPU_MPU_CTRL_fields
08009480 g     O .rodata	00000008 ADC1_JDR2_fields
08009ef8 g     O .rodata	000000a0 DMA2_S4CR_fields
08001438 g     F .text	00000006 _kill
0800c2f8 g     O .rodata	00000050 MPU_registers
0800cae0 g     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
080013a0  w    F .text	00000006 I2C2_ER_IRQHandler
0800de08 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800b058 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800517c g     F .text	0000000c __sfp_lock_release
08010558 g     O .rodata	00000060 TIM2_CCER_fields
08001758 g     F .text	00000030 fetch_string_arg
08012968 g     O .rodata	00000020 __sf_fake_stdout
08012b44 g     O .rodata	0000000c CmdDumpE
0800b500 g     O .rodata	00000080 GPIOB_MODER_fields
08011660 g     O .rodata	00000060 USART1_CR3_fields
0800fe58 g     O .rodata	00000008 TIM11_ARR_fields
080013a0  w    F .text	00000006 DMA2_Stream1_IRQHandler
08002018 g     F .text	00000050 DecodeField
08010a00 g     O .rodata	00000060 TIM3_CCER_fields
0800211c g     F .text	00000054 DecodePrintPeripherals
08010340 g     O .rodata	00000008 TIM1_PSC_fields
08012683 g     O .rodata	00000101 _ctype_
0800d150 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
08000514  w    F .text	00000002 .hidden __aeabi_idiv0
0800f578 g     O .rodata	00000070 SCB_SHCRS_fields
08000e7c g     F .text	0000002c .hidden __unorddf2
0800f600 g     O .rodata	00000008 SCB_SHPR2_fields
0800cc68 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800e948 g     O .rodata	000000a0 RCC_CIR_fields
08012bb0 g     O .rodata	0000000c CmdStatsE
080013a0  w    F .text	00000006 FLASH_IRQHandler
08011150 g     O .rodata	00000038 TIM5_SMCR_fields
0800cdb8 g     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800143e g     F .text	00000002 _exit
0800c530 g     O .rodata	00000020 NVIC_IPR3_fields
08012ba4 g     O .rodata	0000000c CmdTasksE
0800a260 g     O .rodata	00000008 DMA2_S7M1AR_fields
08001a40 g     F .text	000000c8 TerminalOutputBufferWrite
080013a0  w    F .text	00000006 DMA2_Stream4_IRQHandler
0800260a g     F .text	00000002 BusFault_Handler
080013a0  w    F .text	00000006 USART1_IRQHandler
0800cd70 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800d160 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
08005358 g     F .text	00000080 __smakebuf_r
0800dcc0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
08001d20 g     F .text	00000088 WDTCheckReset
08000518 g     F .text	00000010 strlen
0800e7a8 g     O .rodata	00000058 RCC_APB2ENR_fields
080013a0  w    F .text	00000006 OTG_FS_IRQHandler
08003934 g     F .text	0000024c _printf_i
080013a0  w    F .text	00000006 SPI3_IRQHandler
0800f7e8 g     O .rodata	00000008 SDIO_DLEN_fields
0800ba20 g     O .rodata	00000088 GPIOH_LCKR_fields
08000e08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08011140 g     O .rodata	00000008 TIM5_OR_fields
08000d6c g     F .text	0000008a .hidden __gedf2
080013a0  w    F .text	00000006 DMA1_Stream4_IRQHandler
080101d0 g     O .rodata	00000040 TIM1_CR1_fields
20000d50 g     O .bss	00000004 __malloc_sbrk_start
0800c210 g     O .rodata	00000010 IWDG_SR_fields
08002e80 g     F .text	0000005c HAL_UART_Init
08010038 g     O .rodata	00000070 TIM1_CCER_fields
0800d368 g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800f408 g     O .rodata	00000008 SCB_BFAR_fields
20000008 g     O .data	00000194 InterruptNames
080013a0  w    F .text	00000006 I2C1_ER_IRQHandler
080094a0 g     O .rodata	00000008 ADC1_JOFR2_fields
08010158 g     O .rodata	00000050 TIM1_CCMR2_Output_fields
0800c2e0 g     O .rodata	00000018 MPU_MPU_TYPER_fields
08012b8c g     O .rodata	0000000c CmdSendE
0800c5d0 g     O .rodata	00000020 NVIC_IPR8_fields
08000898 g     F .text	00000042 .hidden __aeabi_f2d
0800d930 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
08000ef8 g     F .text	00000050 CmdLed
0800ab68 g     O .rodata	00000060 FLASH_registers
20000d4c g     O .bss	00000004 __malloc_free_list
08009498 g     O .rodata	00000008 ADC1_JOFR1_fields
0800f3c0 g     O .rodata	00000010 SCB_ACTRL_registers
080109f0 g     O .rodata	00000010 TIM3_ARR_fields
0800cce0 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
080005d8 g     F .text	0000027a .hidden __subdf3
08005fa8 g     F .text	00000260 _vfprintf_r
080055b8 g     F .text	0000005e __lo0bits
0800d148 g     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
08011098 g     O .rodata	00000010 TIM5_DCR_fields
0800dd90 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800ee10 g     O .rodata	00000008 RTC_BKP1R_fields
08002068 g     F .text	00000060 DecodeRegister
0800b780 g     O .rodata	000000a0 GPIOB_registers
08001f70 g     F .text	00000054 DecodeReadRegister
0800d610 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
080013a0  w    F .text	00000006 DMA2_Stream6_IRQHandler
08001994 g     F .text	0000004c TerminalRead
08010cf0 g     O .rodata	00000050 TIM3_SR_fields
080107d0 g     O .rodata	00000008 TIM2_DMAR_fields
20000218 g     O .data	0000016c __global_locale
0800fd10 g     O .rodata	00000020 TIM10_CCMR1_Output_fields
0800c9c0 g     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800be80 g     O .rodata	00000008 I2C3_DR_fields
0800ff18 g     O .rodata	00000018 TIM11_SR_fields
0800e8a8 g     O .rodata	00000038 RCC_BDCR_fields
0800d700 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
080013a0  w    F .text	00000006 DMA1_Stream3_IRQHandler
08010cb8 g     O .rodata	00000038 TIM3_SMCR_fields
0800c630 g     O .rodata	00000008 NVIC_ISPR1_fields
0800c388 g     O .rodata	00000008 NVIC_ICPR2_fields
20000d49 g     O .bss	00000001 __lock___sfp_recursive_mutex
08011330 g     O .rodata	00000030 TIM9_CCER_fields
08010f20 g     O .rodata	00000050 TIM5_CCMR1_Output_fields
080011fc g     F .text	00000154 trapoStepperRunner
0800fc68 g     O .rodata	00000070 SYSCFG_registers
08006430 g     F .text	00000010 raise
0800c9c8 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
08005188 g     F .text	0000000c __sinit_lock_acquire
08009c58 g     O .rodata	000000a0 DMA2_S1CR_fields
0800f440 g     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
080054ec g     F .text	0000008c __multadd
080054a8 g     F .text	00000044 _Bfree
0800ab28 g     O .rodata	00000008 FLASH_OPTKEYR_fields
080117b8 g     O .rodata	00000010 WWDG_CR_fields



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000388 	.word	0x20000388
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006478 	.word	0x08006478

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000038c 	.word	0x2000038c
 80001dc:	08006478 	.word	0x08006478

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f000 fed9 	bl	8000f9c <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <strlen>:
 8000518:	4603      	mov	r3, r0
 800051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800051e:	2a00      	cmp	r2, #0
 8000520:	d1fb      	bne.n	800051a <strlen+0x2>
 8000522:	1a18      	subs	r0, r3, r0
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
	...

08000530 <memchr>:
 8000530:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000534:	2a10      	cmp	r2, #16
 8000536:	db2b      	blt.n	8000590 <memchr+0x60>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	d008      	beq.n	8000550 <memchr+0x20>
 800053e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000542:	3a01      	subs	r2, #1
 8000544:	428b      	cmp	r3, r1
 8000546:	d02d      	beq.n	80005a4 <memchr+0x74>
 8000548:	f010 0f07 	tst.w	r0, #7
 800054c:	b342      	cbz	r2, 80005a0 <memchr+0x70>
 800054e:	d1f6      	bne.n	800053e <memchr+0xe>
 8000550:	b4f0      	push	{r4, r5, r6, r7}
 8000552:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000556:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800055a:	f022 0407 	bic.w	r4, r2, #7
 800055e:	f07f 0700 	mvns.w	r7, #0
 8000562:	2300      	movs	r3, #0
 8000564:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000568:	3c08      	subs	r4, #8
 800056a:	ea85 0501 	eor.w	r5, r5, r1
 800056e:	ea86 0601 	eor.w	r6, r6, r1
 8000572:	fa85 f547 	uadd8	r5, r5, r7
 8000576:	faa3 f587 	sel	r5, r3, r7
 800057a:	fa86 f647 	uadd8	r6, r6, r7
 800057e:	faa5 f687 	sel	r6, r5, r7
 8000582:	b98e      	cbnz	r6, 80005a8 <memchr+0x78>
 8000584:	d1ee      	bne.n	8000564 <memchr+0x34>
 8000586:	bcf0      	pop	{r4, r5, r6, r7}
 8000588:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800058c:	f002 0207 	and.w	r2, r2, #7
 8000590:	b132      	cbz	r2, 80005a0 <memchr+0x70>
 8000592:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000596:	3a01      	subs	r2, #1
 8000598:	ea83 0301 	eor.w	r3, r3, r1
 800059c:	b113      	cbz	r3, 80005a4 <memchr+0x74>
 800059e:	d1f8      	bne.n	8000592 <memchr+0x62>
 80005a0:	2000      	movs	r0, #0
 80005a2:	4770      	bx	lr
 80005a4:	3801      	subs	r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	bf06      	itte	eq
 80005ac:	4635      	moveq	r5, r6
 80005ae:	3803      	subeq	r0, #3
 80005b0:	3807      	subne	r0, #7
 80005b2:	f015 0f01 	tst.w	r5, #1
 80005b6:	d107      	bne.n	80005c8 <memchr+0x98>
 80005b8:	3001      	adds	r0, #1
 80005ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005be:	bf02      	ittt	eq
 80005c0:	3001      	addeq	r0, #1
 80005c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005c6:	3001      	addeq	r0, #1
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	3801      	subs	r0, #1
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__aeabi_drsub>:
 80005d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005d4:	e002      	b.n	80005dc <__adddf3>
 80005d6:	bf00      	nop

080005d8 <__aeabi_dsub>:
 80005d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005dc <__adddf3>:
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	bf1f      	itttt	ne
 80005f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000602:	f000 80e2 	beq.w	80007ca <__adddf3+0x1ee>
 8000606:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800060a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800060e:	bfb8      	it	lt
 8000610:	426d      	neglt	r5, r5
 8000612:	dd0c      	ble.n	800062e <__adddf3+0x52>
 8000614:	442c      	add	r4, r5
 8000616:	ea80 0202 	eor.w	r2, r0, r2
 800061a:	ea81 0303 	eor.w	r3, r1, r3
 800061e:	ea82 0000 	eor.w	r0, r2, r0
 8000622:	ea83 0101 	eor.w	r1, r3, r1
 8000626:	ea80 0202 	eor.w	r2, r0, r2
 800062a:	ea81 0303 	eor.w	r3, r1, r3
 800062e:	2d36      	cmp	r5, #54	; 0x36
 8000630:	bf88      	it	hi
 8000632:	bd30      	pophi	{r4, r5, pc}
 8000634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800063c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000644:	d002      	beq.n	800064c <__adddf3+0x70>
 8000646:	4240      	negs	r0, r0
 8000648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800064c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000658:	d002      	beq.n	8000660 <__adddf3+0x84>
 800065a:	4252      	negs	r2, r2
 800065c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000660:	ea94 0f05 	teq	r4, r5
 8000664:	f000 80a7 	beq.w	80007b6 <__adddf3+0x1da>
 8000668:	f1a4 0401 	sub.w	r4, r4, #1
 800066c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000670:	db0d      	blt.n	800068e <__adddf3+0xb2>
 8000672:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000676:	fa22 f205 	lsr.w	r2, r2, r5
 800067a:	1880      	adds	r0, r0, r2
 800067c:	f141 0100 	adc.w	r1, r1, #0
 8000680:	fa03 f20e 	lsl.w	r2, r3, lr
 8000684:	1880      	adds	r0, r0, r2
 8000686:	fa43 f305 	asr.w	r3, r3, r5
 800068a:	4159      	adcs	r1, r3
 800068c:	e00e      	b.n	80006ac <__adddf3+0xd0>
 800068e:	f1a5 0520 	sub.w	r5, r5, #32
 8000692:	f10e 0e20 	add.w	lr, lr, #32
 8000696:	2a01      	cmp	r2, #1
 8000698:	fa03 fc0e 	lsl.w	ip, r3, lr
 800069c:	bf28      	it	cs
 800069e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006a2:	fa43 f305 	asr.w	r3, r3, r5
 80006a6:	18c0      	adds	r0, r0, r3
 80006a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b0:	d507      	bpl.n	80006c2 <__adddf3+0xe6>
 80006b2:	f04f 0e00 	mov.w	lr, #0
 80006b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80006ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006be:	eb6e 0101 	sbc.w	r1, lr, r1
 80006c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006c6:	d31b      	bcc.n	8000700 <__adddf3+0x124>
 80006c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006cc:	d30c      	bcc.n	80006e8 <__adddf3+0x10c>
 80006ce:	0849      	lsrs	r1, r1, #1
 80006d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006d8:	f104 0401 	add.w	r4, r4, #1
 80006dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006e4:	f080 809a 	bcs.w	800081c <__adddf3+0x240>
 80006e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	ea41 0105 	orr.w	r1, r1, r5
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000704:	4140      	adcs	r0, r0
 8000706:	eb41 0101 	adc.w	r1, r1, r1
 800070a:	3c01      	subs	r4, #1
 800070c:	bf28      	it	cs
 800070e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000712:	d2e9      	bcs.n	80006e8 <__adddf3+0x10c>
 8000714:	f091 0f00 	teq	r1, #0
 8000718:	bf04      	itt	eq
 800071a:	4601      	moveq	r1, r0
 800071c:	2000      	moveq	r0, #0
 800071e:	fab1 f381 	clz	r3, r1
 8000722:	bf08      	it	eq
 8000724:	3320      	addeq	r3, #32
 8000726:	f1a3 030b 	sub.w	r3, r3, #11
 800072a:	f1b3 0220 	subs.w	r2, r3, #32
 800072e:	da0c      	bge.n	800074a <__adddf3+0x16e>
 8000730:	320c      	adds	r2, #12
 8000732:	dd08      	ble.n	8000746 <__adddf3+0x16a>
 8000734:	f102 0c14 	add.w	ip, r2, #20
 8000738:	f1c2 020c 	rsb	r2, r2, #12
 800073c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000740:	fa21 f102 	lsr.w	r1, r1, r2
 8000744:	e00c      	b.n	8000760 <__adddf3+0x184>
 8000746:	f102 0214 	add.w	r2, r2, #20
 800074a:	bfd8      	it	le
 800074c:	f1c2 0c20 	rsble	ip, r2, #32
 8000750:	fa01 f102 	lsl.w	r1, r1, r2
 8000754:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000758:	bfdc      	itt	le
 800075a:	ea41 010c 	orrle.w	r1, r1, ip
 800075e:	4090      	lslle	r0, r2
 8000760:	1ae4      	subs	r4, r4, r3
 8000762:	bfa2      	ittt	ge
 8000764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000768:	4329      	orrge	r1, r5
 800076a:	bd30      	popge	{r4, r5, pc}
 800076c:	ea6f 0404 	mvn.w	r4, r4
 8000770:	3c1f      	subs	r4, #31
 8000772:	da1c      	bge.n	80007ae <__adddf3+0x1d2>
 8000774:	340c      	adds	r4, #12
 8000776:	dc0e      	bgt.n	8000796 <__adddf3+0x1ba>
 8000778:	f104 0414 	add.w	r4, r4, #20
 800077c:	f1c4 0220 	rsb	r2, r4, #32
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f302 	lsl.w	r3, r1, r2
 8000788:	ea40 0003 	orr.w	r0, r0, r3
 800078c:	fa21 f304 	lsr.w	r3, r1, r4
 8000790:	ea45 0103 	orr.w	r1, r5, r3
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	f1c4 040c 	rsb	r4, r4, #12
 800079a:	f1c4 0220 	rsb	r2, r4, #32
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 f304 	lsl.w	r3, r1, r4
 80007a6:	ea40 0003 	orr.w	r0, r0, r3
 80007aa:	4629      	mov	r1, r5
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	fa21 f004 	lsr.w	r0, r1, r4
 80007b2:	4629      	mov	r1, r5
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	f094 0f00 	teq	r4, #0
 80007ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007be:	bf06      	itte	eq
 80007c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007c4:	3401      	addeq	r4, #1
 80007c6:	3d01      	subne	r5, #1
 80007c8:	e74e      	b.n	8000668 <__adddf3+0x8c>
 80007ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ce:	bf18      	it	ne
 80007d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007d4:	d029      	beq.n	800082a <__adddf3+0x24e>
 80007d6:	ea94 0f05 	teq	r4, r5
 80007da:	bf08      	it	eq
 80007dc:	ea90 0f02 	teqeq	r0, r2
 80007e0:	d005      	beq.n	80007ee <__adddf3+0x212>
 80007e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007e6:	bf04      	itt	eq
 80007e8:	4619      	moveq	r1, r3
 80007ea:	4610      	moveq	r0, r2
 80007ec:	bd30      	pop	{r4, r5, pc}
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf1e      	ittt	ne
 80007f4:	2100      	movne	r1, #0
 80007f6:	2000      	movne	r0, #0
 80007f8:	bd30      	popne	{r4, r5, pc}
 80007fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007fe:	d105      	bne.n	800080c <__adddf3+0x230>
 8000800:	0040      	lsls	r0, r0, #1
 8000802:	4149      	adcs	r1, r1
 8000804:	bf28      	it	cs
 8000806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800080a:	bd30      	pop	{r4, r5, pc}
 800080c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000810:	bf3c      	itt	cc
 8000812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000816:	bd30      	popcc	{r4, r5, pc}
 8000818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800081c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800082e:	bf1a      	itte	ne
 8000830:	4619      	movne	r1, r3
 8000832:	4610      	movne	r0, r2
 8000834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000838:	bf1c      	itt	ne
 800083a:	460b      	movne	r3, r1
 800083c:	4602      	movne	r2, r0
 800083e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000842:	bf06      	itte	eq
 8000844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000848:	ea91 0f03 	teqeq	r1, r3
 800084c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000850:	bd30      	pop	{r4, r5, pc}
 8000852:	bf00      	nop

08000854 <__aeabi_ui2d>:
 8000854:	f090 0f00 	teq	r0, #0
 8000858:	bf04      	itt	eq
 800085a:	2100      	moveq	r1, #0
 800085c:	4770      	bxeq	lr
 800085e:	b530      	push	{r4, r5, lr}
 8000860:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000864:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000868:	f04f 0500 	mov.w	r5, #0
 800086c:	f04f 0100 	mov.w	r1, #0
 8000870:	e750      	b.n	8000714 <__adddf3+0x138>
 8000872:	bf00      	nop

08000874 <__aeabi_i2d>:
 8000874:	f090 0f00 	teq	r0, #0
 8000878:	bf04      	itt	eq
 800087a:	2100      	moveq	r1, #0
 800087c:	4770      	bxeq	lr
 800087e:	b530      	push	{r4, r5, lr}
 8000880:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000884:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800088c:	bf48      	it	mi
 800088e:	4240      	negmi	r0, r0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	e73e      	b.n	8000714 <__adddf3+0x138>
 8000896:	bf00      	nop

08000898 <__aeabi_f2d>:
 8000898:	0042      	lsls	r2, r0, #1
 800089a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800089e:	ea4f 0131 	mov.w	r1, r1, rrx
 80008a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008a6:	bf1f      	itttt	ne
 80008a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008b4:	4770      	bxne	lr
 80008b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008ba:	bf08      	it	eq
 80008bc:	4770      	bxeq	lr
 80008be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008c2:	bf04      	itt	eq
 80008c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008c8:	4770      	bxeq	lr
 80008ca:	b530      	push	{r4, r5, lr}
 80008cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	e71c      	b.n	8000714 <__adddf3+0x138>
 80008da:	bf00      	nop

080008dc <__aeabi_ul2d>:
 80008dc:	ea50 0201 	orrs.w	r2, r0, r1
 80008e0:	bf08      	it	eq
 80008e2:	4770      	bxeq	lr
 80008e4:	b530      	push	{r4, r5, lr}
 80008e6:	f04f 0500 	mov.w	r5, #0
 80008ea:	e00a      	b.n	8000902 <__aeabi_l2d+0x16>

080008ec <__aeabi_l2d>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008fa:	d502      	bpl.n	8000902 <__aeabi_l2d+0x16>
 80008fc:	4240      	negs	r0, r0
 80008fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000902:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000906:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800090a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800090e:	f43f aed8 	beq.w	80006c2 <__adddf3+0xe6>
 8000912:	f04f 0203 	mov.w	r2, #3
 8000916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800091a:	bf18      	it	ne
 800091c:	3203      	addne	r2, #3
 800091e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000922:	bf18      	it	ne
 8000924:	3203      	addne	r2, #3
 8000926:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800092a:	f1c2 0320 	rsb	r3, r2, #32
 800092e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000932:	fa20 f002 	lsr.w	r0, r0, r2
 8000936:	fa01 fe03 	lsl.w	lr, r1, r3
 800093a:	ea40 000e 	orr.w	r0, r0, lr
 800093e:	fa21 f102 	lsr.w	r1, r1, r2
 8000942:	4414      	add	r4, r2
 8000944:	e6bd      	b.n	80006c2 <__adddf3+0xe6>
 8000946:	bf00      	nop

08000948 <__aeabi_dmul>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000956:	bf1d      	ittte	ne
 8000958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800095c:	ea94 0f0c 	teqne	r4, ip
 8000960:	ea95 0f0c 	teqne	r5, ip
 8000964:	f000 f8de 	bleq	8000b24 <__aeabi_dmul+0x1dc>
 8000968:	442c      	add	r4, r5
 800096a:	ea81 0603 	eor.w	r6, r1, r3
 800096e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000972:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000976:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800097a:	bf18      	it	ne
 800097c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000988:	d038      	beq.n	80009fc <__aeabi_dmul+0xb4>
 800098a:	fba0 ce02 	umull	ip, lr, r0, r2
 800098e:	f04f 0500 	mov.w	r5, #0
 8000992:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000996:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800099a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800099e:	f04f 0600 	mov.w	r6, #0
 80009a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009a6:	f09c 0f00 	teq	ip, #0
 80009aa:	bf18      	it	ne
 80009ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80009b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80009b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80009b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80009bc:	d204      	bcs.n	80009c8 <__aeabi_dmul+0x80>
 80009be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80009c2:	416d      	adcs	r5, r5
 80009c4:	eb46 0606 	adc.w	r6, r6, r6
 80009c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80009cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e0:	bf88      	it	hi
 80009e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e6:	d81e      	bhi.n	8000a26 <__aeabi_dmul+0xde>
 80009e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009f2:	f150 0000 	adcs.w	r0, r0, #0
 80009f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a00:	ea46 0101 	orr.w	r1, r6, r1
 8000a04:	ea40 0002 	orr.w	r0, r0, r2
 8000a08:	ea81 0103 	eor.w	r1, r1, r3
 8000a0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a10:	bfc2      	ittt	gt
 8000a12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a20:	f04f 0e00 	mov.w	lr, #0
 8000a24:	3c01      	subs	r4, #1
 8000a26:	f300 80ab 	bgt.w	8000b80 <__aeabi_dmul+0x238>
 8000a2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a2e:	bfde      	ittt	le
 8000a30:	2000      	movle	r0, #0
 8000a32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a36:	bd70      	pople	{r4, r5, r6, pc}
 8000a38:	f1c4 0400 	rsb	r4, r4, #0
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	da35      	bge.n	8000aac <__aeabi_dmul+0x164>
 8000a40:	340c      	adds	r4, #12
 8000a42:	dc1b      	bgt.n	8000a7c <__aeabi_dmul+0x134>
 8000a44:	f104 0414 	add.w	r4, r4, #20
 8000a48:	f1c4 0520 	rsb	r5, r4, #32
 8000a4c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a50:	fa20 f004 	lsr.w	r0, r0, r4
 8000a54:	fa01 f205 	lsl.w	r2, r1, r5
 8000a58:	ea40 0002 	orr.w	r0, r0, r2
 8000a5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a68:	fa21 f604 	lsr.w	r6, r1, r4
 8000a6c:	eb42 0106 	adc.w	r1, r2, r6
 8000a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a74:	bf08      	it	eq
 8000a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f1c4 040c 	rsb	r4, r4, #12
 8000a80:	f1c4 0520 	rsb	r5, r4, #32
 8000a84:	fa00 f304 	lsl.w	r3, r0, r4
 8000a88:	fa20 f005 	lsr.w	r0, r0, r5
 8000a8c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a90:	ea40 0002 	orr.w	r0, r0, r2
 8000a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a9c:	f141 0100 	adc.w	r1, r1, #0
 8000aa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aa4:	bf08      	it	eq
 8000aa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	f1c4 0520 	rsb	r5, r4, #32
 8000ab0:	fa00 f205 	lsl.w	r2, r0, r5
 8000ab4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ab8:	fa20 f304 	lsr.w	r3, r0, r4
 8000abc:	fa01 f205 	lsl.w	r2, r1, r5
 8000ac0:	ea43 0302 	orr.w	r3, r3, r2
 8000ac4:	fa21 f004 	lsr.w	r0, r1, r4
 8000ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000acc:	fa21 f204 	lsr.w	r2, r1, r4
 8000ad0:	ea20 0002 	bic.w	r0, r0, r2
 8000ad4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000adc:	bf08      	it	eq
 8000ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f094 0f00 	teq	r4, #0
 8000ae8:	d10f      	bne.n	8000b0a <__aeabi_dmul+0x1c2>
 8000aea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000aee:	0040      	lsls	r0, r0, #1
 8000af0:	eb41 0101 	adc.w	r1, r1, r1
 8000af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000af8:	bf08      	it	eq
 8000afa:	3c01      	subeq	r4, #1
 8000afc:	d0f7      	beq.n	8000aee <__aeabi_dmul+0x1a6>
 8000afe:	ea41 0106 	orr.w	r1, r1, r6
 8000b02:	f095 0f00 	teq	r5, #0
 8000b06:	bf18      	it	ne
 8000b08:	4770      	bxne	lr
 8000b0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	eb43 0303 	adc.w	r3, r3, r3
 8000b14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b18:	bf08      	it	eq
 8000b1a:	3d01      	subeq	r5, #1
 8000b1c:	d0f7      	beq.n	8000b0e <__aeabi_dmul+0x1c6>
 8000b1e:	ea43 0306 	orr.w	r3, r3, r6
 8000b22:	4770      	bx	lr
 8000b24:	ea94 0f0c 	teq	r4, ip
 8000b28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b2c:	bf18      	it	ne
 8000b2e:	ea95 0f0c 	teqne	r5, ip
 8000b32:	d00c      	beq.n	8000b4e <__aeabi_dmul+0x206>
 8000b34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3e:	d1d1      	bne.n	8000ae4 <__aeabi_dmul+0x19c>
 8000b40:	ea81 0103 	eor.w	r1, r1, r3
 8000b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b52:	bf06      	itte	eq
 8000b54:	4610      	moveq	r0, r2
 8000b56:	4619      	moveq	r1, r3
 8000b58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b5c:	d019      	beq.n	8000b92 <__aeabi_dmul+0x24a>
 8000b5e:	ea94 0f0c 	teq	r4, ip
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dmul+0x222>
 8000b64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b68:	d113      	bne.n	8000b92 <__aeabi_dmul+0x24a>
 8000b6a:	ea95 0f0c 	teq	r5, ip
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_dmul+0x234>
 8000b70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b74:	bf1c      	itt	ne
 8000b76:	4610      	movne	r0, r2
 8000b78:	4619      	movne	r1, r3
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dmul+0x24a>
 8000b7c:	ea81 0103 	eor.w	r1, r1, r3
 8000b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}

08000b9c <__aeabi_ddiv>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ba6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000baa:	bf1d      	ittte	ne
 8000bac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000bb0:	ea94 0f0c 	teqne	r4, ip
 8000bb4:	ea95 0f0c 	teqne	r5, ip
 8000bb8:	f000 f8a7 	bleq	8000d0a <__aeabi_ddiv+0x16e>
 8000bbc:	eba4 0405 	sub.w	r4, r4, r5
 8000bc0:	ea81 0e03 	eor.w	lr, r1, r3
 8000bc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000bcc:	f000 8088 	beq.w	8000ce0 <__aeabi_ddiv+0x144>
 8000bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000bd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000bd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000bdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000be0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000be4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000be8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bf4:	429d      	cmp	r5, r3
 8000bf6:	bf08      	it	eq
 8000bf8:	4296      	cmpeq	r6, r2
 8000bfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c02:	d202      	bcs.n	8000c0a <__aeabi_ddiv+0x6e>
 8000c04:	085b      	lsrs	r3, r3, #1
 8000c06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c0a:	1ab6      	subs	r6, r6, r2
 8000c0c:	eb65 0503 	sbc.w	r5, r5, r3
 8000c10:	085b      	lsrs	r3, r3, #1
 8000c12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c26:	bf22      	ittt	cs
 8000c28:	1ab6      	subcs	r6, r6, r2
 8000c2a:	4675      	movcs	r5, lr
 8000c2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c3e:	bf22      	ittt	cs
 8000c40:	1ab6      	subcs	r6, r6, r2
 8000c42:	4675      	movcs	r5, lr
 8000c44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c56:	bf22      	ittt	cs
 8000c58:	1ab6      	subcs	r6, r6, r2
 8000c5a:	4675      	movcs	r5, lr
 8000c5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c6e:	bf22      	ittt	cs
 8000c70:	1ab6      	subcs	r6, r6, r2
 8000c72:	4675      	movcs	r5, lr
 8000c74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c78:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_ddiv+0x114>
 8000c7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c9a:	d1c0      	bne.n	8000c1e <__aeabi_ddiv+0x82>
 8000c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ca0:	d10b      	bne.n	8000cba <__aeabi_ddiv+0x11e>
 8000ca2:	ea41 0100 	orr.w	r1, r1, r0
 8000ca6:	f04f 0000 	mov.w	r0, #0
 8000caa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cae:	e7b6      	b.n	8000c1e <__aeabi_ddiv+0x82>
 8000cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cb4:	bf04      	itt	eq
 8000cb6:	4301      	orreq	r1, r0
 8000cb8:	2000      	moveq	r0, #0
 8000cba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000cbe:	bf88      	it	hi
 8000cc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000cc4:	f63f aeaf 	bhi.w	8000a26 <__aeabi_dmul+0xde>
 8000cc8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ccc:	bf04      	itt	eq
 8000cce:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000cd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000cd6:	f150 0000 	adcs.w	r0, r0, #0
 8000cda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ce4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ce8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cec:	bfc2      	ittt	gt
 8000cee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cf6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cfc:	f04f 0e00 	mov.w	lr, #0
 8000d00:	3c01      	subs	r4, #1
 8000d02:	e690      	b.n	8000a26 <__aeabi_dmul+0xde>
 8000d04:	ea45 0e06 	orr.w	lr, r5, r6
 8000d08:	e68d      	b.n	8000a26 <__aeabi_dmul+0xde>
 8000d0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d0e:	ea94 0f0c 	teq	r4, ip
 8000d12:	bf08      	it	eq
 8000d14:	ea95 0f0c 	teqeq	r5, ip
 8000d18:	f43f af3b 	beq.w	8000b92 <__aeabi_dmul+0x24a>
 8000d1c:	ea94 0f0c 	teq	r4, ip
 8000d20:	d10a      	bne.n	8000d38 <__aeabi_ddiv+0x19c>
 8000d22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d26:	f47f af34 	bne.w	8000b92 <__aeabi_dmul+0x24a>
 8000d2a:	ea95 0f0c 	teq	r5, ip
 8000d2e:	f47f af25 	bne.w	8000b7c <__aeabi_dmul+0x234>
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	e72c      	b.n	8000b92 <__aeabi_dmul+0x24a>
 8000d38:	ea95 0f0c 	teq	r5, ip
 8000d3c:	d106      	bne.n	8000d4c <__aeabi_ddiv+0x1b0>
 8000d3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d42:	f43f aefd 	beq.w	8000b40 <__aeabi_dmul+0x1f8>
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	e722      	b.n	8000b92 <__aeabi_dmul+0x24a>
 8000d4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d50:	bf18      	it	ne
 8000d52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d56:	f47f aec5 	bne.w	8000ae4 <__aeabi_dmul+0x19c>
 8000d5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d5e:	f47f af0d 	bne.w	8000b7c <__aeabi_dmul+0x234>
 8000d62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d66:	f47f aeeb 	bne.w	8000b40 <__aeabi_dmul+0x1f8>
 8000d6a:	e712      	b.n	8000b92 <__aeabi_dmul+0x24a>

08000d6c <__gedf2>:
 8000d6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d70:	e006      	b.n	8000d80 <__cmpdf2+0x4>
 8000d72:	bf00      	nop

08000d74 <__ledf2>:
 8000d74:	f04f 0c01 	mov.w	ip, #1
 8000d78:	e002      	b.n	8000d80 <__cmpdf2+0x4>
 8000d7a:	bf00      	nop

08000d7c <__cmpdf2>:
 8000d7c:	f04f 0c01 	mov.w	ip, #1
 8000d80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d96:	d01b      	beq.n	8000dd0 <__cmpdf2+0x54>
 8000d98:	b001      	add	sp, #4
 8000d9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d9e:	bf0c      	ite	eq
 8000da0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000da4:	ea91 0f03 	teqne	r1, r3
 8000da8:	bf02      	ittt	eq
 8000daa:	ea90 0f02 	teqeq	r0, r2
 8000dae:	2000      	moveq	r0, #0
 8000db0:	4770      	bxeq	lr
 8000db2:	f110 0f00 	cmn.w	r0, #0
 8000db6:	ea91 0f03 	teq	r1, r3
 8000dba:	bf58      	it	pl
 8000dbc:	4299      	cmppl	r1, r3
 8000dbe:	bf08      	it	eq
 8000dc0:	4290      	cmpeq	r0, r2
 8000dc2:	bf2c      	ite	cs
 8000dc4:	17d8      	asrcs	r0, r3, #31
 8000dc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000dca:	f040 0001 	orr.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd8:	d102      	bne.n	8000de0 <__cmpdf2+0x64>
 8000dda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dde:	d107      	bne.n	8000df0 <__cmpdf2+0x74>
 8000de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de8:	d1d6      	bne.n	8000d98 <__cmpdf2+0x1c>
 8000dea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dee:	d0d3      	beq.n	8000d98 <__cmpdf2+0x1c>
 8000df0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <__aeabi_cdrcmple>:
 8000df8:	4684      	mov	ip, r0
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4662      	mov	r2, ip
 8000dfe:	468c      	mov	ip, r1
 8000e00:	4619      	mov	r1, r3
 8000e02:	4663      	mov	r3, ip
 8000e04:	e000      	b.n	8000e08 <__aeabi_cdcmpeq>
 8000e06:	bf00      	nop

08000e08 <__aeabi_cdcmpeq>:
 8000e08:	b501      	push	{r0, lr}
 8000e0a:	f7ff ffb7 	bl	8000d7c <__cmpdf2>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	bf48      	it	mi
 8000e12:	f110 0f00 	cmnmi.w	r0, #0
 8000e16:	bd01      	pop	{r0, pc}

08000e18 <__aeabi_dcmpeq>:
 8000e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e1c:	f7ff fff4 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e20:	bf0c      	ite	eq
 8000e22:	2001      	moveq	r0, #1
 8000e24:	2000      	movne	r0, #0
 8000e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2a:	bf00      	nop

08000e2c <__aeabi_dcmplt>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff ffea 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e34:	bf34      	ite	cc
 8000e36:	2001      	movcc	r0, #1
 8000e38:	2000      	movcs	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_dcmple>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffe0 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e48:	bf94      	ite	ls
 8000e4a:	2001      	movls	r0, #1
 8000e4c:	2000      	movhi	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_dcmpge>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffce 	bl	8000df8 <__aeabi_cdrcmple>
 8000e5c:	bf94      	ite	ls
 8000e5e:	2001      	movls	r0, #1
 8000e60:	2000      	movhi	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_dcmpgt>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffc4 	bl	8000df8 <__aeabi_cdrcmple>
 8000e70:	bf34      	ite	cc
 8000e72:	2001      	movcc	r0, #1
 8000e74:	2000      	movcs	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_dcmpun>:
 8000e7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e84:	d102      	bne.n	8000e8c <__aeabi_dcmpun+0x10>
 8000e86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e8a:	d10a      	bne.n	8000ea2 <__aeabi_dcmpun+0x26>
 8000e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e94:	d102      	bne.n	8000e9c <__aeabi_dcmpun+0x20>
 8000e96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e9a:	d102      	bne.n	8000ea2 <__aeabi_dcmpun+0x26>
 8000e9c:	f04f 0000 	mov.w	r0, #0
 8000ea0:	4770      	bx	lr
 8000ea2:	f04f 0001 	mov.w	r0, #1
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_d2iz>:
 8000ea8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000eac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb0:	d215      	bcs.n	8000ede <__aeabi_d2iz+0x36>
 8000eb2:	d511      	bpl.n	8000ed8 <__aeabi_d2iz+0x30>
 8000eb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ebc:	d912      	bls.n	8000ee4 <__aeabi_d2iz+0x3c>
 8000ebe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ece:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed2:	bf18      	it	ne
 8000ed4:	4240      	negne	r0, r0
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee2:	d105      	bne.n	8000ef0 <__aeabi_d2iz+0x48>
 8000ee4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ee8:	bf08      	it	eq
 8000eea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eee:	4770      	bx	lr
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8000ef8:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000efa:	b9d8      	cbnz	r0, 8000f34 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8000efc:	a801      	add	r0, sp, #4
 8000efe:	f000 fc0d 	bl	800171c <fetch_uint32_arg>
  if(rc) {
 8000f02:	b128      	cbz	r0, 8000f10 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <CmdLed+0x40>)
 8000f06:	f002 fed7 	bl	8003cb8 <puts>
    return CmdReturnBadParameter1;
 8000f0a:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8000f10:	9901      	ldr	r1, [sp, #4]
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <CmdLed+0x44>)
 8000f14:	f002 fe34 	bl	8003b80 <iprintf>
  val = val ? 1 : 0;
 8000f18:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <CmdLed+0x48>)
  val = val ? 1 : 0;
 8000f1c:	3b00      	subs	r3, #0
 8000f1e:	bf18      	it	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f24:	f002 fec8 	bl	8003cb8 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8000f28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <CmdLed+0x4c>)
 8000f2e:	2120      	movs	r1, #32
 8000f30:	f002 f89c 	bl	800306c <HAL_GPIO_WritePin>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000f34:	2000      	movs	r0, #0
 8000f36:	e7e9      	b.n	8000f0c <CmdLed+0x14>
 8000f38:	080068d0 	.word	0x080068d0
 8000f3c:	080068fe 	.word	0x080068fe
 8000f40:	0800691a 	.word	0x0800691a
 8000f44:	40020000 	.word	0x40020000

08000f48 <my_init>:
{
 8000f48:	b508      	push	{r3, lr}
  TerminalInit();
 8000f4a:	f000 fcfd 	bl	8001948 <TerminalInit>
  WDTCheckReset();
 8000f4e:	f000 fee7 	bl	8001d20 <WDTCheckReset>
  TaskingInit();
 8000f52:	f000 ff51 	bl	8001df8 <TaskingInit>
}
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  my_Init();
 8000f5a:	f7ff b957 	b.w	800020c <my_Init>

08000f5e <my_main>:
{
 8000f5e:	b508      	push	{r3, lr}
  TaskingRun();  /* Run all registered tasks */
 8000f60:	f000 ff68 	bl	8001e34 <TaskingRun>
  my_Loop();
 8000f64:	f7ff f950 	bl	8000208 <my_Loop>
}
 8000f68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WDTFeed();
 8000f6c:	f000 bf1c 	b.w	8001da8 <WDTFeed>

08000f70 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f70:	2801      	cmp	r0, #1
{
 8000f72:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f74:	d004      	beq.n	8000f80 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d104      	bne.n	8000f84 <CmdTest+0x14>
    printf("testasm\n\n"
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <CmdTest+0x24>)
 8000f7c:	f002 fe9c 	bl	8003cb8 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8000f80:	2000      	movs	r0, #0
 8000f82:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8000f84:	204d      	movs	r0, #77	; 0x4d
 8000f86:	f7ff f92b 	bl	80001e0 <mytest>
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CmdTest+0x28>)
 8000f8e:	f002 fdf7 	bl	8003b80 <iprintf>
  return CmdReturnOk;
 8000f92:	e7f5      	b.n	8000f80 <CmdTest+0x10>
 8000f94:	08006946 	.word	0x08006946
 8000f98:	0800697f 	.word	0x0800697f

08000f9c <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <USR_LED_Toggle+0x10>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200003a4 	.word	0x200003a4

08000fb0 <DelayNS>:
  * @param uint16_t time
  * @retval None
  */
void DelayNS (uint16_t us)
{
	TIM11->CNT = 0;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <DelayNS+0x10>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM11->CNT < us);
 8000fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb8:	4282      	cmp	r2, r0
 8000fba:	d3fc      	bcc.n	8000fb6 <DelayNS+0x6>
}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40014800 	.word	0x40014800

08000fc4 <timerInit>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
void timerInit() {
  htim11.Instance = TIM11;
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <timerInit+0x30>)
  htim11.Init.Prescaler = 80;
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <timerInit+0x34>)
void timerInit() {
 8000fc8:	b508      	push	{r3, lr}
  htim11.Init.Prescaler = 80;
 8000fca:	2350      	movs	r3, #80	; 0x50
 8000fcc:	e9c0 2300 	strd	r2, r3, [r0]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 65535;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fde:	f002 f8f5 	bl	80031cc <HAL_TIM_Base_Init>
 8000fe2:	b110      	cbz	r0, 8000fea <timerInit+0x26>
  {
    printf("could not initialize the timer.\n");
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <timerInit+0x38>)
 8000fe6:	f002 fe67 	bl	8003cb8 <puts>
  }

  HAL_TIM_Base_Start(&htim11);
}
 8000fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_Base_Start(&htim11);
 8000fee:	4801      	ldr	r0, [pc, #4]	; (8000ff4 <timerInit+0x30>)
 8000ff0:	f002 b870 	b.w	80030d4 <HAL_TIM_Base_Start>
 8000ff4:	200003a8 	.word	0x200003a8
 8000ff8:	40014800 	.word	0x40014800
 8000ffc:	080069a3 	.word	0x080069a3

08001000 <stepperInit>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void stepperInit() {
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	2214      	movs	r2, #20
void stepperInit() {
 8001004:	b08b      	sub	sp, #44	; 0x2c
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	eb0d 0002 	add.w	r0, sp, r2
 800100a:	2100      	movs	r1, #0
 800100c:	f002 f946 	bl	800329c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001010:	2400      	movs	r4, #0
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <stepperInit+0xc0>)
 8001014:	9401      	str	r4, [sp, #4]
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001018:	4f2a      	ldr	r7, [pc, #168]	; (80010c4 <stepperInit+0xc4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800101a:	4d2b      	ldr	r5, [pc, #172]	; (80010c8 <stepperInit+0xc8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	f002 0204 	and.w	r2, r2, #4
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102c:	9402      	str	r4, [sp, #8]
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
 8001036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001038:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800103c:	9202      	str	r2, [sp, #8]
 800103e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	9403      	str	r4, [sp, #12]
 8001042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
 800104a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104c:	f002 0201 	and.w	r2, r2, #1
 8001050:	9203      	str	r2, [sp, #12]
 8001052:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	9404      	str	r4, [sp, #16]
 8001056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001058:	f042 0202 	orr.w	r2, r2, #2
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001066:	4622      	mov	r2, r4
 8001068:	4638      	mov	r0, r7
 800106a:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800106e:	f001 fffd 	bl	800306c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001072:	4622      	mov	r2, r4
 8001074:	4628      	mov	r0, r5
 8001076:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800107a:	f001 fff7 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001082:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001086:	a905      	add	r1, sp, #20
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <stepperInit+0xcc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108c:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f001 ff23 	bl	8002edc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	a905      	add	r1, sp, #20
 800109a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f001 ff1a 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80010a8:	f44f 6382 	mov.w	r3, #1040	; 0x410
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	a905      	add	r1, sp, #20
 80010ae:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f001 ff10 	bl	8002edc <HAL_GPIO_Init>
} 
 80010bc:	b00b      	add	sp, #44	; 0x2c
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800

080010d0 <timerEvent>:
  * @param int mode of the event, does it require interaction?
  * @retval ParserReturnVal_t enum. 
  */

ParserReturnVal_t timerEvent(int mode)
{
 80010d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80010d2:	4605      	mov	r5, r0
  stepperInit();
 80010d4:	f7ff ff94 	bl	8001000 <stepperInit>
  timerInit();
 80010d8:	f7ff ff74 	bl	8000fc4 <timerInit>
  

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80010dc:	b92d      	cbnz	r5, 80010ea <timerEvent+0x1a>

if(isStepperEnabled == 0)
 80010de:	4e2a      	ldr	r6, [pc, #168]	; (8001188 <timerEvent+0xb8>)
 80010e0:	6834      	ldr	r4, [r6, #0]
 80010e2:	b924      	cbnz	r4, 80010ee <timerEvent+0x1e>
{
  printf("Please enable the stepper drive first. See help for more details.\n");
 80010e4:	4829      	ldr	r0, [pc, #164]	; (800118c <timerEvent+0xbc>)
 80010e6:	f002 fde7 	bl	8003cb8 <puts>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80010ea:	2000      	movs	r0, #0
 80010ec:	e009      	b.n	8001102 <timerEvent+0x32>
} 

 
uint32_t delay, rc, step = 0,rcTwo, isCW, rcisCW;
   
rc=fetch_uint32_arg(&delay);
 80010ee:	a801      	add	r0, sp, #4
uint32_t delay, rc, step = 0,rcTwo, isCW, rcisCW;
 80010f0:	9502      	str	r5, [sp, #8]
rc=fetch_uint32_arg(&delay);
 80010f2:	f000 fb13 	bl	800171c <fetch_uint32_arg>
if(rc)
 80010f6:	4604      	mov	r4, r0
 80010f8:	b128      	cbz	r0, 8001106 <timerEvent+0x36>
  {
    printf("Delay must be provided.\n");
 80010fa:	4825      	ldr	r0, [pc, #148]	; (8001190 <timerEvent+0xc0>)
 80010fc:	f002 fddc 	bl	8003cb8 <puts>
    return CmdReturnBadParameter1;
 8001100:	2004      	movs	r0, #4
      WDTFeed();
	  }

  //WDTFeed();
  return CmdReturnOk;
}
 8001102:	b004      	add	sp, #16
 8001104:	bd70      	pop	{r4, r5, r6, pc}
  rcTwo = fetch_uint32_arg(&step);
 8001106:	a802      	add	r0, sp, #8
 8001108:	f000 fb08 	bl	800171c <fetch_uint32_arg>
  if(rcTwo)
 800110c:	b128      	cbz	r0, 800111a <timerEvent+0x4a>
    step = 400;
 800110e:	f44f 73c8 	mov.w	r3, #400	; 0x190
    printf("User did not provided steps, default steps are 400.\n");
 8001112:	4820      	ldr	r0, [pc, #128]	; (8001194 <timerEvent+0xc4>)
    step = 400;
 8001114:	9302      	str	r3, [sp, #8]
    printf("User did not provided steps, default steps are 400.\n");
 8001116:	f002 fdcf 	bl	8003cb8 <puts>
  rcisCW = fetch_uint32_arg(&isCW);
 800111a:	a803      	add	r0, sp, #12
 800111c:	f000 fafe 	bl	800171c <fetch_uint32_arg>
  if(rcisCW)
 8001120:	b120      	cbz	r0, 800112c <timerEvent+0x5c>
    isCW = 1;
 8001122:	2301      	movs	r3, #1
    printf("User did not provide the direction, so running in CW.\n");
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <timerEvent+0xc8>)
    isCW = 1;
 8001126:	9303      	str	r3, [sp, #12]
    printf("User did not provide the direction, so running in CW.\n");
 8001128:	f002 fdc6 	bl	8003cb8 <puts>
  if(isCW == 1)
 800112c:	9a03      	ldr	r2, [sp, #12]
 800112e:	2a01      	cmp	r2, #1
 8001130:	d104      	bne.n	800113c <timerEvent+0x6c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <timerEvent+0xcc>)
 8001134:	2110      	movs	r1, #16
 8001136:	f001 ff99 	bl	800306c <HAL_GPIO_WritePin>
 800113a:	e001      	b.n	8001140 <timerEvent+0x70>
  } else if(isCW == 0)
 800113c:	2a00      	cmp	r2, #0
 800113e:	d0f8      	beq.n	8001132 <timerEvent+0x62>
if(isStepperEnabled == 1)
 8001140:	6832      	ldr	r2, [r6, #0]
 8001142:	2a01      	cmp	r2, #1
 8001144:	d103      	bne.n	800114e <timerEvent+0x7e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  
 8001146:	4816      	ldr	r0, [pc, #88]	; (80011a0 <timerEvent+0xd0>)
 8001148:	2110      	movs	r1, #16
 800114a:	f001 ff8f 	bl	800306c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800114e:	4d13      	ldr	r5, [pc, #76]	; (800119c <timerEvent+0xcc>)
	  for(int x = 0; x<step; x++)
 8001150:	9b02      	ldr	r3, [sp, #8]
 8001152:	42a3      	cmp	r3, r4
 8001154:	d9c9      	bls.n	80010ea <timerEvent+0x1a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115c:	4628      	mov	r0, r5
 800115e:	f001 ff85 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delay);
 8001162:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001166:	f7ff ff23 	bl	8000fb0 <DelayNS>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	2200      	movs	r2, #0
 8001170:	4628      	mov	r0, r5
 8001172:	f001 ff7b 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delay);
 8001176:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800117a:	f7ff ff19 	bl	8000fb0 <DelayNS>
	  for(int x = 0; x<step; x++)
 800117e:	3401      	adds	r4, #1
      WDTFeed();
 8001180:	f000 fe12 	bl	8001da8 <WDTFeed>
	  for(int x = 0; x<step; x++)
 8001184:	e7e4      	b.n	8001150 <timerEvent+0x80>
 8001186:	bf00      	nop
 8001188:	20000004 	.word	0x20000004
 800118c:	080069c3 	.word	0x080069c3
 8001190:	08006a05 	.word	0x08006a05
 8001194:	08006a1d 	.word	0x08006a1d
 8001198:	08006a51 	.word	0x08006a51
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020000 	.word	0x40020000

080011a4 <enableDisableStepper>:
}

ADD_CMD("step",timerEvent,"                step <delay> <step> <direction> 0=CW, 1=CCW");

ParserReturnVal_t  enableDisableStepper(int mode)
{
 80011a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80011a6:	b110      	cbz	r0, 80011ae <enableDisableStepper+0xa>
 80011a8:	2000      	movs	r0, #0
    isStepperEnabled = 0; 
    printf("stepper motor disabled.\n");
  }
      //enables or disables the stepper drive
return CmdReturnOk;
}
 80011aa:	b003      	add	sp, #12
 80011ac:	bd30      	pop	{r4, r5, pc}
  stepperInit();
 80011ae:	f7ff ff27 	bl	8001000 <stepperInit>
  timerInit();
 80011b2:	f7ff ff07 	bl	8000fc4 <timerInit>
  rc=fetch_uint32_arg(&stepperStatus);
 80011b6:	a801      	add	r0, sp, #4
 80011b8:	f000 fab0 	bl	800171c <fetch_uint32_arg>
  if(rc)
 80011bc:	b120      	cbz	r0, 80011c8 <enableDisableStepper+0x24>
    printf("Please enable or disable stepper controller.\n");
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <enableDisableStepper+0x48>)
 80011c0:	f002 fd7a 	bl	8003cb8 <puts>
    return CmdReturnBadParameter1;
 80011c4:	2004      	movs	r0, #4
 80011c6:	e7f0      	b.n	80011aa <enableDisableStepper+0x6>
  if(stepperStatus == 1)
 80011c8:	9c01      	ldr	r4, [sp, #4]
 80011ca:	2c01      	cmp	r4, #1
 80011cc:	d105      	bne.n	80011da <enableDisableStepper+0x36>
    isStepperEnabled = 1; 
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <enableDisableStepper+0x4c>)
    printf("stepper motor enabled.\n");
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <enableDisableStepper+0x50>)
    isStepperEnabled = 1; 
 80011d2:	601c      	str	r4, [r3, #0]
    printf("stepper motor enabled.\n");
 80011d4:	f002 fd70 	bl	8003cb8 <puts>
 80011d8:	e7e6      	b.n	80011a8 <enableDisableStepper+0x4>
  } else if (stepperStatus == 0)
 80011da:	2c00      	cmp	r4, #0
 80011dc:	d1e4      	bne.n	80011a8 <enableDisableStepper+0x4>
    isStepperEnabled = 0; 
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <enableDisableStepper+0x4c>)
    printf("stepper motor disabled.\n");
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <enableDisableStepper+0x54>)
    isStepperEnabled = 0; 
 80011e2:	601c      	str	r4, [r3, #0]
    printf("stepper motor disabled.\n");
 80011e4:	f002 fd68 	bl	8003cb8 <puts>
return CmdReturnOk;
 80011e8:	4620      	mov	r0, r4
 80011ea:	e7de      	b.n	80011aa <enableDisableStepper+0x6>
 80011ec:	08006a87 	.word	0x08006a87
 80011f0:	20000004 	.word	0x20000004
 80011f4:	08006ab4 	.word	0x08006ab4
 80011f8:	08006acb 	.word	0x08006acb

080011fc <trapoStepperRunner>:

ADD_CMD("se",enableDisableStepper,"                stepperenable <0|1>");

ParserReturnVal_t  trapoStepperRunner(int mode)
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	b086      	sub	sp, #24
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001200:	2800      	cmp	r0, #0
 8001202:	d13c      	bne.n	800127e <trapoStepperRunner+0x82>
  stepperInit();
 8001204:	f7ff fefc 	bl	8001000 <stepperInit>
  timerInit();
 8001208:	f7ff fedc 	bl	8000fc4 <timerInit>
  uint32_t stepTime, rc, directon, directionRc, rotationCount, rotationCountRc, delayOne, delayOneRc, delayTwo, delayTwoRc;
   
  rc=fetch_uint32_arg(&stepTime);
 800120c:	a801      	add	r0, sp, #4
 800120e:	f000 fa85 	bl	800171c <fetch_uint32_arg>
  if(rc)
 8001212:	b128      	cbz	r0, 8001220 <trapoStepperRunner+0x24>
  {
    printf("Please enable or disable stepper controller.\n");
 8001214:	4846      	ldr	r0, [pc, #280]	; (8001330 <trapoStepperRunner+0x134>)
  }

  rotationCountRc=fetch_uint32_arg(&rotationCount);
  if(rotationCountRc)
  {
    printf("Please provide rotation Count.\n");
 8001216:	f002 fd4f 	bl	8003cb8 <puts>
    return CmdReturnBadParameter1;
 800121a:	2004      	movs	r0, #4

} 


return CmdReturnOk;
}
 800121c:	b006      	add	sp, #24
 800121e:	bd70      	pop	{r4, r5, r6, pc}
  delayOneRc=fetch_uint32_arg(&delayOne);
 8001220:	a804      	add	r0, sp, #16
 8001222:	f000 fa7b 	bl	800171c <fetch_uint32_arg>
  if(delayOneRc)
 8001226:	b108      	cbz	r0, 800122c <trapoStepperRunner+0x30>
    printf("Please add delay One.\n");
 8001228:	4842      	ldr	r0, [pc, #264]	; (8001334 <trapoStepperRunner+0x138>)
 800122a:	e7f4      	b.n	8001216 <trapoStepperRunner+0x1a>
  delayTwoRc=fetch_uint32_arg(&delayTwo);
 800122c:	a805      	add	r0, sp, #20
 800122e:	f000 fa75 	bl	800171c <fetch_uint32_arg>
  if(delayTwoRc)
 8001232:	b108      	cbz	r0, 8001238 <trapoStepperRunner+0x3c>
    printf("Please add delay two.\n");
 8001234:	4840      	ldr	r0, [pc, #256]	; (8001338 <trapoStepperRunner+0x13c>)
 8001236:	e7ee      	b.n	8001216 <trapoStepperRunner+0x1a>
  directionRc=fetch_uint32_arg(&directon);
 8001238:	a802      	add	r0, sp, #8
 800123a:	f000 fa6f 	bl	800171c <fetch_uint32_arg>
  if(directionRc)
 800123e:	b108      	cbz	r0, 8001244 <trapoStepperRunner+0x48>
    printf("Please provide direction.\n");
 8001240:	483e      	ldr	r0, [pc, #248]	; (800133c <trapoStepperRunner+0x140>)
 8001242:	e7e8      	b.n	8001216 <trapoStepperRunner+0x1a>
  rotationCountRc=fetch_uint32_arg(&rotationCount);
 8001244:	a803      	add	r0, sp, #12
 8001246:	f000 fa69 	bl	800171c <fetch_uint32_arg>
  if(rotationCountRc)
 800124a:	b108      	cbz	r0, 8001250 <trapoStepperRunner+0x54>
    printf("Please provide rotation Count.\n");
 800124c:	483c      	ldr	r0, [pc, #240]	; (8001340 <trapoStepperRunner+0x144>)
 800124e:	e7e2      	b.n	8001216 <trapoStepperRunner+0x1a>
  if(directon == 1)
 8001250:	9a02      	ldr	r2, [sp, #8]
 8001252:	2a01      	cmp	r2, #1
 8001254:	d104      	bne.n	8001260 <trapoStepperRunner+0x64>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001256:	483b      	ldr	r0, [pc, #236]	; (8001344 <trapoStepperRunner+0x148>)
 8001258:	2110      	movs	r1, #16
 800125a:	f001 ff07 	bl	800306c <HAL_GPIO_WritePin>
 800125e:	e001      	b.n	8001264 <trapoStepperRunner+0x68>
  } else if(directon == 0)
 8001260:	2a00      	cmp	r2, #0
 8001262:	d0f8      	beq.n	8001256 <trapoStepperRunner+0x5a>
  if(isStepperEnabled == 1)
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <trapoStepperRunner+0x14c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2a01      	cmp	r2, #1
 800126a:	d103      	bne.n	8001274 <trapoStepperRunner+0x78>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  
 800126c:	4837      	ldr	r0, [pc, #220]	; (800134c <trapoStepperRunner+0x150>)
 800126e:	2110      	movs	r1, #16
 8001270:	f001 fefc 	bl	800306c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001274:	4c33      	ldr	r4, [pc, #204]	; (8001344 <trapoStepperRunner+0x148>)
    for(int x = 0; x<stepTime; x++)
 8001276:	2500      	movs	r5, #0
for(int i = 0; i < rotationCount; i++)
 8001278:	9b03      	ldr	r3, [sp, #12]
 800127a:	429d      	cmp	r5, r3
 800127c:	d325      	bcc.n	80012ca <trapoStepperRunner+0xce>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800127e:	2000      	movs	r0, #0
 8001280:	e7cc      	b.n	800121c <trapoStepperRunner+0x20>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001288:	4620      	mov	r0, r4
 800128a:	f001 feef 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delayOne);
 800128e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001292:	f7ff fe8d 	bl	8000fb0 <DelayNS>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	2200      	movs	r2, #0
 800129c:	4620      	mov	r0, r4
 800129e:	f001 fee5 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delayOne);
 80012a2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80012a6:	f7ff fe83 	bl	8000fb0 <DelayNS>
      WDTFeed();
 80012aa:	f000 fd7d 	bl	8001da8 <WDTFeed>
  	for(int x = 0; x<stepTime; x++)
 80012ae:	3601      	adds	r6, #1
 80012b0:	9b01      	ldr	r3, [sp, #4]
 80012b2:	42b3      	cmp	r3, r6
 80012b4:	d8e5      	bhi.n	8001282 <trapoStepperRunner+0x86>
    for(int x = 0; x<stepTime; x++)
 80012b6:	2600      	movs	r6, #0
 80012b8:	9b01      	ldr	r3, [sp, #4]
 80012ba:	42b3      	cmp	r3, r6
 80012bc:	d807      	bhi.n	80012ce <trapoStepperRunner+0xd2>
    for(int x = 0; x<stepTime; x++)
 80012be:	2600      	movs	r6, #0
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	42b3      	cmp	r3, r6
 80012c4:	d81b      	bhi.n	80012fe <trapoStepperRunner+0x102>
for(int i = 0; i < rotationCount; i++)
 80012c6:	3501      	adds	r5, #1
 80012c8:	e7d6      	b.n	8001278 <trapoStepperRunner+0x7c>
  	for(int x = 0; x<stepTime; x++)
 80012ca:	2600      	movs	r6, #0
 80012cc:	e7f0      	b.n	80012b0 <trapoStepperRunner+0xb4>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d4:	4620      	mov	r0, r4
 80012d6:	f001 fec9 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delayTwo);
 80012da:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80012de:	f7ff fe67 	bl	8000fb0 <DelayNS>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	2200      	movs	r2, #0
 80012e8:	4620      	mov	r0, r4
 80012ea:	f001 febf 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delayTwo);
 80012ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80012f2:	f7ff fe5d 	bl	8000fb0 <DelayNS>
    for(int x = 0; x<stepTime; x++)
 80012f6:	3601      	adds	r6, #1
      WDTFeed();
 80012f8:	f000 fd56 	bl	8001da8 <WDTFeed>
    for(int x = 0; x<stepTime; x++)
 80012fc:	e7dc      	b.n	80012b8 <trapoStepperRunner+0xbc>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	4620      	mov	r0, r4
 8001306:	f001 feb1 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delayOne);
 800130a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800130e:	f7ff fe4f 	bl	8000fb0 <DelayNS>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	2200      	movs	r2, #0
 8001318:	4620      	mov	r0, r4
 800131a:	f001 fea7 	bl	800306c <HAL_GPIO_WritePin>
		  DelayNS(delayOne);
 800131e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001322:	f7ff fe45 	bl	8000fb0 <DelayNS>
    for(int x = 0; x<stepTime; x++)
 8001326:	3601      	adds	r6, #1
      WDTFeed();
 8001328:	f000 fd3e 	bl	8001da8 <WDTFeed>
    for(int x = 0; x<stepTime; x++)
 800132c:	e7c8      	b.n	80012c0 <trapoStepperRunner+0xc4>
 800132e:	bf00      	nop
 8001330:	08006a87 	.word	0x08006a87
 8001334:	08006ae3 	.word	0x08006ae3
 8001338:	08006af9 	.word	0x08006af9
 800133c:	08006b0f 	.word	0x08006b0f
 8001340:	08006b29 	.word	0x08006b29
 8001344:	40020400 	.word	0x40020400
 8001348:	20000004 	.word	0x20000004
 800134c:	40020000 	.word	0x40020000

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopFillZerobss+0x26>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137a:	f001 f9c9 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f001 ff69 	bl	8003254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f001 f8bb 	bl	80024fc <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 8001394:	08012c08 	.word	0x08012c08
  ldr r2, =_sbss
 8001398:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 800139c:	20000d58 	.word	0x20000d58

080013a0 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 80013a0:	f000 fd7c 	bl	8001e9c <Default_IRQHandler>
  b  Infinite_Loop
 80013a4:	e7fc      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a8 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80013a8:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <_sbrk_r+0x28>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	b90a      	cbnz	r2, 80013b4 <_sbrk_r+0xc>
    heap_end = &end;
 80013b0:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <_sbrk_r+0x2c>)
 80013b2:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 80013b4:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 80013b6:	466a      	mov	r2, sp
 80013b8:	4401      	add	r1, r0
 80013ba:	4291      	cmp	r1, r2
 80013bc:	d906      	bls.n	80013cc <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 80013be:	f001 ff43 	bl	8003248 <__errno>
 80013c2:	230c      	movs	r3, #12
 80013c4:	6003      	str	r3, [r0, #0]
      return (caddr_t) -1;
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 80013ca:	bd08      	pop	{r3, pc}
  heap_end += incr;
 80013cc:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 80013ce:	e7fc      	b.n	80013ca <_sbrk_r+0x22>
 80013d0:	200003f0 	.word	0x200003f0
 80013d4:	20000d58 	.word	0x20000d58

080013d8 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 80013d8:	2000      	movs	r0, #0
 80013da:	4770      	bx	lr

080013dc <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 80013dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e0:	6053      	str	r3, [r2, #4]
   return 0;
}
 80013e2:	2000      	movs	r0, #0
 80013e4:	4770      	bx	lr

080013e6 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 80013e6:	2001      	movs	r0, #1
 80013e8:	4770      	bx	lr

080013ea <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 80013ea:	2000      	movs	r0, #0
 80013ec:	4770      	bx	lr

080013ee <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 80013ee:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 80013f0:	2000      	movs	r0, #0
 80013f2:	461a      	mov	r2, r3
 80013f4:	f000 bace 	b.w	8001994 <TerminalRead>

080013f8 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 80013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 80013fc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001434 <_write_r+0x3c>
{
 8001400:	461d      	mov	r5, r3
 8001402:	4614      	mov	r4, r2
 8001404:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8001406:	42bc      	cmp	r4, r7
 8001408:	4626      	mov	r6, r4
 800140a:	d102      	bne.n	8001412 <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 800140c:	4628      	mov	r0, r5
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8001412:	7833      	ldrb	r3, [r6, #0]
 8001414:	2b0a      	cmp	r3, #10
 8001416:	f104 0401 	add.w	r4, r4, #1
 800141a:	d104      	bne.n	8001426 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 800141c:	2201      	movs	r2, #1
 800141e:	4641      	mov	r1, r8
 8001420:	2000      	movs	r0, #0
 8001422:	f000 fb0d 	bl	8001a40 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8001426:	2201      	movs	r2, #1
 8001428:	4631      	mov	r1, r6
 800142a:	2000      	movs	r0, #0
 800142c:	f000 fb08 	bl	8001a40 <TerminalOutputBufferWrite>
    count--;
 8001430:	e7e9      	b.n	8001406 <_write_r+0xe>
 8001432:	bf00      	nop
 8001434:	0800757c 	.word	0x0800757c

08001438 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143c:	4770      	bx	lr

0800143e <_exit>:

void _exit(int status)
{
  while(1) {}
 800143e:	e7fe      	b.n	800143e <_exit>

08001440 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr

08001444 <CmdW>:
  return CmdReturnOk;
}


ParserReturnVal_t CmdW(int mode)
{
 8001444:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001446:	b940      	cbnz	r0, 800145a <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001448:	4668      	mov	r0, sp
 800144a:	f000 f967 	bl	800171c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800144e:	a801      	add	r0, sp, #4
 8001450:	f000 f964 	bl	800171c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8001454:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001458:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 800145a:	2000      	movs	r0, #0
 800145c:	b003      	add	sp, #12
 800145e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001464 <CmdR>:
{
 8001464:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001468:	4604      	mov	r4, r0
 800146a:	b9f0      	cbnz	r0, 80014aa <CmdR+0x46>
  fetch_uint32_arg(&addr);
 800146c:	a801      	add	r0, sp, #4
 800146e:	f000 f955 	bl	800171c <fetch_uint32_arg>
  data = *((uint32_t *)addr);
 8001472:	9901      	ldr	r1, [sp, #4]
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8001474:	4812      	ldr	r0, [pc, #72]	; (80014c0 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 8001476:	680d      	ldr	r5, [r1, #0]
    printf("%s%c",
 8001478:	4e12      	ldr	r6, [pc, #72]	; (80014c4 <CmdR+0x60>)
 800147a:	4f13      	ldr	r7, [pc, #76]	; (80014c8 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 800147c:	462a      	mov	r2, r5
 800147e:	f002 fb7f 	bl	8003b80 <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <CmdR+0x68>)
 8001484:	f002 fb7c 	bl	8003b80 <iprintf>
    printf("%s%c",
 8001488:	4911      	ldr	r1, [pc, #68]	; (80014d0 <CmdR+0x6c>)
 800148a:	4688      	mov	r8, r1
 800148c:	2d00      	cmp	r5, #0
 800148e:	bfb4      	ite	lt
 8001490:	2231      	movlt	r2, #49	; 0x31
 8001492:	2230      	movge	r2, #48	; 0x30
 8001494:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 8001496:	3401      	adds	r4, #1
    printf("%s%c",
 8001498:	f002 fb72 	bl	8003b80 <iprintf>
  for(i=0; i<32; i++) {
 800149c:	2c20      	cmp	r4, #32
    data <<= 1;
 800149e:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 80014a2:	d106      	bne.n	80014b2 <CmdR+0x4e>
  printf("\n");
 80014a4:	200a      	movs	r0, #10
 80014a6:	f002 fb83 	bl	8003bb0 <putchar>
}
 80014aa:	2000      	movs	r0, #0
 80014ac:	b002      	add	sp, #8
 80014ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 80014b2:	f014 0f03 	tst.w	r4, #3
 80014b6:	bf14      	ite	ne
 80014b8:	4639      	movne	r1, r7
 80014ba:	4641      	moveq	r1, r8
 80014bc:	e7e6      	b.n	800148c <CmdR+0x28>
 80014be:	bf00      	nop
 80014c0:	08011800 	.word	0x08011800
 80014c4:	080118ba 	.word	0x080118ba
 80014c8:	08008d8f 	.word	0x08008d8f
 80014cc:	08011812 	.word	0x08011812
 80014d0:	08009038 	.word	0x08009038

080014d4 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
{
 80014d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014d6:	4614      	mov	r4, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80014d8:	b928      	cbnz	r0, 80014e6 <parse+0x12>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80014da:	4936      	ldr	r1, [pc, #216]	; (80015b4 <parse+0xe0>)
 80014dc:	4836      	ldr	r0, [pc, #216]	; (80015b8 <parse+0xe4>)
    return CmdReturnParserFailure;
  }

  if(len==0) {
    printf("len == 0 in %s\n",__FUNCTION__);
 80014de:	f002 fb4f 	bl	8003b80 <iprintf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return CmdReturnParserFailure;
 80014e2:	2003      	movs	r0, #3
 80014e4:	e033      	b.n	800154e <parse+0x7a>
  if(len==0) {
 80014e6:	b911      	cbnz	r1, 80014ee <parse+0x1a>
    printf("len == 0 in %s\n",__FUNCTION__);
 80014e8:	4932      	ldr	r1, [pc, #200]	; (80015b4 <parse+0xe0>)
 80014ea:	4834      	ldr	r0, [pc, #208]	; (80015bc <parse+0xe8>)
 80014ec:	e7f7      	b.n	80014de <parse+0xa>
  if(table == NULL) {
 80014ee:	b182      	cbz	r2, 8001512 <parse+0x3e>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80014f0:	4d33      	ldr	r5, [pc, #204]	; (80015c0 <parse+0xec>)
 80014f2:	3901      	subs	r1, #1
 80014f4:	4603      	mov	r3, r0
 80014f6:	1c4e      	adds	r6, r1, #1
 80014f8:	4618      	mov	r0, r3
 80014fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014fe:	d00d      	beq.n	800151c <parse+0x48>
 8001500:	2a00      	cmp	r2, #0
 8001502:	d0ee      	beq.n	80014e2 <parse+0xe>
 8001504:	5d52      	ldrb	r2, [r2, r5]
 8001506:	0712      	lsls	r2, r2, #28
 8001508:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800150c:	d404      	bmi.n	8001518 <parse+0x44>
  if((i==0) || (*buf==0)) {
 800150e:	b939      	cbnz	r1, 8001520 <parse+0x4c>
 8001510:	e7e7      	b.n	80014e2 <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8001512:	4928      	ldr	r1, [pc, #160]	; (80015b4 <parse+0xe0>)
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <parse+0xf0>)
 8001516:	e7e2      	b.n	80014de <parse+0xa>
 8001518:	4631      	mov	r1, r6
 800151a:	e7ec      	b.n	80014f6 <parse+0x22>
  if((i==0) || (*buf==0)) {
 800151c:	2a00      	cmp	r2, #0
 800151e:	d0e0      	beq.n	80014e2 <parse+0xe>
  }
	
  p = strtok(buf,SEPS);
 8001520:	4929      	ldr	r1, [pc, #164]	; (80015c8 <parse+0xf4>)
 8001522:	f002 fcb9 	bl	8003e98 <strtok>
  if(p==NULL) {
 8001526:	4605      	mov	r5, r0
 8001528:	b910      	cbnz	r0, 8001530 <parse+0x5c>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 800152a:	4922      	ldr	r1, [pc, #136]	; (80015b4 <parse+0xe0>)
 800152c:	4827      	ldr	r0, [pc, #156]	; (80015cc <parse+0xf8>)
 800152e:	e7d6      	b.n	80014de <parse+0xa>
    return CmdReturnParserFailure;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8001530:	4927      	ldr	r1, [pc, #156]	; (80015d0 <parse+0xfc>)
 8001532:	f002 fc8f 	bl	8003e54 <strcasecmp>
 8001536:	b9c8      	cbnz	r0, 800156c <parse+0x98>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8001538:	4923      	ldr	r1, [pc, #140]	; (80015c8 <parse+0xf4>)
 800153a:	f002 fcad 	bl	8003e98 <strtok>
    if(p == NULL) {
 800153e:	4605      	mov	r5, r0
 8001540:	bb20      	cbnz	r0, 800158c <parse+0xb8>
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
	if(t->help != NULL) {
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001542:	4d24      	ldr	r5, [pc, #144]	; (80015d4 <parse+0x100>)
 8001544:	340c      	adds	r4, #12
      for(t=table; t->cmdname!=NULL; t++) {
 8001546:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 800154a:	b911      	cbnz	r1, 8001552 <parse+0x7e>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
	}
      }
      return 0;
 800154c:	4608      	mov	r0, r1
    }
  }

  printf("Command '%s' not found. Type 'help' for online help\n",p);
  return CmdReturnNotFound;
}
 800154e:	b002      	add	sp, #8
 8001550:	bd70      	pop	{r4, r5, r6, pc}
	if(t->help != NULL) {
 8001552:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8001556:	b122      	cbz	r2, 8001562 <parse+0x8e>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001558:	4628      	mov	r0, r5
 800155a:	f002 fb11 	bl	8003b80 <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 800155e:	340c      	adds	r4, #12
 8001560:	e7f1      	b.n	8001546 <parse+0x72>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8001562:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8001566:	2001      	movs	r0, #1
 8001568:	4798      	blx	r3
 800156a:	e7f8      	b.n	800155e <parse+0x8a>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 800156c:	2600      	movs	r6, #0
  cmdArgs = p + strlen(p) + 1;
 800156e:	4628      	mov	r0, r5
 8001570:	f7fe ffd2 	bl	8000518 <strlen>
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <parse+0x104>)
 8001576:	3001      	adds	r0, #1
 8001578:	4428      	add	r0, r5
 800157a:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 800157c:	6821      	ldr	r1, [r4, #0]
 800157e:	b939      	cbnz	r1, 8001590 <parse+0xbc>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001580:	4816      	ldr	r0, [pc, #88]	; (80015dc <parse+0x108>)
 8001582:	4629      	mov	r1, r5
 8001584:	f002 fafc 	bl	8003b80 <iprintf>
  return CmdReturnNotFound;
 8001588:	2001      	movs	r0, #1
 800158a:	e7e0      	b.n	800154e <parse+0x7a>
      arg = CMD_LONG_HELP;
 800158c:	2602      	movs	r6, #2
 800158e:	e7ee      	b.n	800156e <parse+0x9a>
    if(strcasecmp(p,t->cmdname) == 0) {
 8001590:	4628      	mov	r0, r5
 8001592:	9101      	str	r1, [sp, #4]
 8001594:	f002 fc5e 	bl	8003e54 <strcasecmp>
 8001598:	9901      	ldr	r1, [sp, #4]
 800159a:	b948      	cbnz	r0, 80015b0 <parse+0xdc>
      if(arg == CMD_LONG_HELP) {	
 800159c:	b116      	cbz	r6, 80015a4 <parse+0xd0>
	printf("%s:\n",t->cmdname);
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <parse+0x10c>)
 80015a0:	f002 faee 	bl	8003b80 <iprintf>
      return t->func(arg);
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	4630      	mov	r0, r6
}
 80015a8:	b002      	add	sp, #8
 80015aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return t->func(arg);
 80015ae:	4718      	bx	r3
  for(t=table; t->cmdname!=NULL; t++) {
 80015b0:	340c      	adds	r4, #12
 80015b2:	e7e3      	b.n	800157c <parse+0xa8>
 80015b4:	08011a6f 	.word	0x08011a6f
 80015b8:	080118fa 	.word	0x080118fa
 80015bc:	0801191b 	.word	0x0801191b
 80015c0:	08012684 	.word	0x08012684
 80015c4:	0801192b 	.word	0x0801192b
 80015c8:	0801194e 	.word	0x0801194e
 80015cc:	08011955 	.word	0x08011955
 80015d0:	08011985 	.word	0x08011985
 80015d4:	0801198a 	.word	0x0801198a
 80015d8:	200003f4 	.word	0x200003f4
 80015dc:	0801199b 	.word	0x0801199b
 80015e0:	08011996 	.word	0x08011996

080015e4 <TaskInput>:
{
 80015e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(printPrompt) {
 80015e6:	4d41      	ldr	r5, [pc, #260]	; (80016ec <TaskInput+0x108>)
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	b123      	cbz	r3, 80015f6 <TaskInput+0x12>
    printf("ARMON>");
 80015ec:	4840      	ldr	r0, [pc, #256]	; (80016f0 <TaskInput+0x10c>)
 80015ee:	f002 fac7 	bl	8003b80 <iprintf>
    printPrompt = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f10d 0107 	add.w	r1, sp, #7
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 f9c9 	bl	8001994 <TerminalRead>
  if(rc) goto ProcessCharacter;
 8001602:	2800      	cmp	r0, #0
 8001604:	d04f      	beq.n	80016a6 <TaskInput+0xc2>
  if(((c == 010) || (c == 0x7f)) && count) {
 8001606:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d001      	beq.n	8001612 <TaskInput+0x2e>
 800160e:	2b7f      	cmp	r3, #127	; 0x7f
 8001610:	d115      	bne.n	800163e <TaskInput+0x5a>
 8001612:	4c38      	ldr	r4, [pc, #224]	; (80016f4 <TaskInput+0x110>)
 8001614:	6822      	ldr	r2, [r4, #0]
 8001616:	b192      	cbz	r2, 800163e <TaskInput+0x5a>
    printf("\010 \010"); /* Obliterate character */
 8001618:	4837      	ldr	r0, [pc, #220]	; (80016f8 <TaskInput+0x114>)
 800161a:	f002 fab1 	bl	8003b80 <iprintf>
    buf--;     /* Then remove it from the buffer */
 800161e:	4a37      	ldr	r2, [pc, #220]	; (80016fc <TaskInput+0x118>)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	3b01      	subs	r3, #1
 800162a:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 800162c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001630:	f1a3 020d 	sub.w	r2, r3, #13
 8001634:	4253      	negs	r3, r2
 8001636:	4153      	adcs	r3, r2
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <TaskInput+0x11c>)
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e033      	b.n	80016a6 <TaskInput+0xc2>
  } else if(c == '!') { /* '!' repeats the last command */
 800163e:	2b21      	cmp	r3, #33	; 0x21
 8001640:	d125      	bne.n	800168e <TaskInput+0xaa>
    if(saved) {  /* But only if we have something saved */
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <TaskInput+0x120>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <TaskInput+0x48>
      strcpy(input,input_b);  /* Restore the command */
 800164a:	4c2f      	ldr	r4, [pc, #188]	; (8001708 <TaskInput+0x124>)
 800164c:	492f      	ldr	r1, [pc, #188]	; (800170c <TaskInput+0x128>)
 800164e:	4620      	mov	r0, r4
 8001650:	f002 fc1a 	bl	8003e88 <strcpy>
      printf("%s",input);
 8001654:	4621      	mov	r1, r4
 8001656:	482e      	ldr	r0, [pc, #184]	; (8001710 <TaskInput+0x12c>)
 8001658:	f002 fa92 	bl	8003b80 <iprintf>
      count = strlen(input);
 800165c:	4620      	mov	r0, r4
 800165e:	f7fe ff5b 	bl	8000518 <strlen>
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <TaskInput+0x110>)
 8001664:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <TaskInput+0x118>)
 8001668:	4404      	add	r4, r0
 800166a:	601c      	str	r4, [r3, #0]
    parse(input, sizeof(input), _parsetable_start);
 800166c:	4c26      	ldr	r4, [pc, #152]	; (8001708 <TaskInput+0x124>)
    printf("\n");
 800166e:	200a      	movs	r0, #10
 8001670:	f002 fa9e 	bl	8003bb0 <putchar>
    parse(input, sizeof(input), _parsetable_start);
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <TaskInput+0x130>)
 8001676:	2150      	movs	r1, #80	; 0x50
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff ff2b 	bl	80014d4 <parse>
    printPrompt = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	602b      	str	r3, [r5, #0]
    buf = input;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <TaskInput+0x118>)
 8001684:	601c      	str	r4, [r3, #0]
    count = 0;
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <TaskInput+0x110>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e7ce      	b.n	800162c <TaskInput+0x48>
  } else if(isprint((unsigned int)c)) {
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <TaskInput+0x134>)
 8001690:	5c9a      	ldrb	r2, [r3, r2]
 8001692:	f012 0f97 	tst.w	r2, #151	; 0x97
 8001696:	d014      	beq.n	80016c2 <TaskInput+0xde>
    if(count >= sizeof(input)) {
 8001698:	4916      	ldr	r1, [pc, #88]	; (80016f4 <TaskInput+0x110>)
 800169a:	680a      	ldr	r2, [r1, #0]
 800169c:	2a4f      	cmp	r2, #79	; 0x4f
 800169e:	d904      	bls.n	80016aa <TaskInput+0xc6>
      printf("\x07"); /* Beep */
 80016a0:	2007      	movs	r0, #7
 80016a2:	f002 fa85 	bl	8003bb0 <putchar>
}
 80016a6:	b003      	add	sp, #12
 80016a8:	bd30      	pop	{r4, r5, pc}
      *buf++ = c;
 80016aa:	4c14      	ldr	r4, [pc, #80]	; (80016fc <TaskInput+0x118>)
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	7003      	strb	r3, [r0, #0]
 80016b0:	1c45      	adds	r5, r0, #1
      count++;
 80016b2:	3201      	adds	r2, #1
      printf("%c",c);
 80016b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 80016b8:	6025      	str	r5, [r4, #0]
      count++;
 80016ba:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 80016bc:	f002 fa78 	bl	8003bb0 <putchar>
 80016c0:	e7b4      	b.n	800162c <TaskInput+0x48>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d005      	beq.n	80016d2 <TaskInput+0xee>
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d1b0      	bne.n	800162c <TaskInput+0x48>
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <TaskInput+0x11c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ac      	bne.n	800162c <TaskInput+0x48>
    *buf = '\0';
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <TaskInput+0x118>)
    strcpy(input_b,input);
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <TaskInput+0x124>)
    *buf = '\0';
 80016d6:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <TaskInput+0x128>)
    *buf = '\0';
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80016de:	f002 fbd3 	bl	8003e88 <strcpy>
    saved = 1;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <TaskInput+0x120>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e7c0      	b.n	800166c <TaskInput+0x88>
 80016ea:	bf00      	nop
 80016ec:	200001a0 	.word	0x200001a0
 80016f0:	080119d0 	.word	0x080119d0
 80016f4:	200003f8 	.word	0x200003f8
 80016f8:	080119d7 	.word	0x080119d7
 80016fc:	2000019c 	.word	0x2000019c
 8001700:	200003fc 	.word	0x200003fc
 8001704:	200004a0 	.word	0x200004a0
 8001708:	20000400 	.word	0x20000400
 800170c:	20000450 	.word	0x20000450
 8001710:	0801213c 	.word	0x0801213c
 8001714:	08012b38 	.word	0x08012b38
 8001718:	08012684 	.word	0x08012684

0800171c <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 800171c:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800171e:	490c      	ldr	r1, [pc, #48]	; (8001750 <fetch_uint32_arg+0x34>)
{
 8001720:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001722:	2000      	movs	r0, #0
 8001724:	f002 fbb8 	bl	8003e98 <strtok>
  if(p == NULL) {
 8001728:	4604      	mov	r4, r0
 800172a:	b168      	cbz	r0, 8001748 <fetch_uint32_arg+0x2c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 800172c:	2200      	movs	r2, #0
 800172e:	4611      	mov	r1, r2
 8001730:	f002 fc80 	bl	8004034 <strtoul>
 8001734:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 8001736:	4620      	mov	r0, r4
 8001738:	f7fe feee 	bl	8000518 <strlen>
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <fetch_uint32_arg+0x38>)
 800173e:	3001      	adds	r0, #1
 8001740:	4404      	add	r4, r0
 8001742:	601c      	str	r4, [r3, #0]
  return 0;
 8001744:	2000      	movs	r0, #0
}
 8001746:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800174c:	e7fb      	b.n	8001746 <fetch_uint32_arg+0x2a>
 800174e:	bf00      	nop
 8001750:	0801194e 	.word	0x0801194e
 8001754:	200003f4 	.word	0x200003f4

08001758 <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001758:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800175a:	4909      	ldr	r1, [pc, #36]	; (8001780 <fetch_string_arg+0x28>)
{
 800175c:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 800175e:	2000      	movs	r0, #0
 8001760:	f002 fb9a 	bl	8003e98 <strtok>
  if(p == NULL) {
 8001764:	4604      	mov	r4, r0
 8001766:	b140      	cbz	r0, 800177a <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8001768:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800176a:	f7fe fed5 	bl	8000518 <strlen>
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <fetch_string_arg+0x2c>)
 8001770:	3001      	adds	r0, #1
 8001772:	4404      	add	r4, r0
 8001774:	601c      	str	r4, [r3, #0]
  return 0;
 8001776:	2000      	movs	r0, #0
}
 8001778:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 800177a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177e:	e7fb      	b.n	8001778 <fetch_string_arg+0x20>
 8001780:	0801194e 	.word	0x0801194e
 8001784:	200003f4 	.word	0x200003f4

08001788 <fetch_cmd_args>:

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <fetch_cmd_args+0xc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6003      	str	r3, [r0, #0]
  return 0;
}
 800178e:	2000      	movs	r0, #0
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200003f4 	.word	0x200003f4

08001798 <DumpBuffer>:
#define BYTES_PER_LINE        16
#define BYTES_PER_BINARY_LINE  8

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8001798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800179c:	b089      	sub	sp, #36	; 0x24
 800179e:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80017a2:	460c      	mov	r4, r1
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d040      	beq.n	800182a <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 80017a8:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x: ",(unsigned int)address);
 80017aa:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001840 <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 80017ae:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001844 <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 80017b2:	2500      	movs	r5, #0
 80017b4:	463e      	mov	r6, r7
 80017b6:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 80017b8:	f015 0b0f 	ands.w	fp, r5, #15
 80017bc:	eb03 0105 	add.w	r1, r3, r5
 80017c0:	d136      	bne.n	8001830 <DumpBuffer+0x98>
      printf("%08x: ",(unsigned int)address);
 80017c2:	4648      	mov	r0, r9
 80017c4:	f002 f9dc 	bl	8003b80 <iprintf>
      bufp = buf;
 80017c8:	46b0      	mov	r8, r6
    c = *p++;
 80017ca:	9b00      	ldr	r3, [sp, #0]
 80017cc:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <DumpBuffer+0x9c>)
 80017d0:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 80017d4:	4647      	mov	r7, r8
      *bufp++ = '.';
 80017d6:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 80017da:	4601      	mov	r1, r0
      *bufp++ = '.';
 80017dc:	bf08      	it	eq
 80017de:	202e      	moveq	r0, #46	; 0x2e
 80017e0:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 80017e4:	4650      	mov	r0, sl
 80017e6:	f002 f9cb 	bl	8003b80 <iprintf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 80017ea:	f1bb 0f0f 	cmp.w	fp, #15
 80017ee:	d106      	bne.n	80017fe <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 80017f0:	2100      	movs	r1, #0
 80017f2:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  |%s|\n",buf);
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <DumpBuffer+0xa0>)
 80017f8:	4631      	mov	r1, r6
 80017fa:	f002 f9c1 	bl	8003b80 <iprintf>
  for(i=0; i<count; i++) {
 80017fe:	3501      	adds	r5, #1
 8001800:	42ac      	cmp	r4, r5
 8001802:	d1d8      	bne.n	80017b6 <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001804:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8001806:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 800180a:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 800180e:	d00c      	beq.n	800182a <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 8001810:	4f0a      	ldr	r7, [pc, #40]	; (800183c <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001812:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8001816:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001818:	3501      	adds	r5, #1
      printf("   ");
 800181a:	f002 f9b1 	bl	8003b80 <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800181e:	42a5      	cmp	r5, r4
 8001820:	d3f9      	bcc.n	8001816 <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  |%s|\n",buf);
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <DumpBuffer+0xa0>)
 8001824:	4631      	mov	r1, r6
 8001826:	f002 f9ab 	bl	8003b80 <iprintf>
  }
}
 800182a:	b009      	add	sp, #36	; 0x24
 800182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001830:	46b8      	mov	r8, r7
 8001832:	e7ca      	b.n	80017ca <DumpBuffer+0x32>
 8001834:	08012684 	.word	0x08012684
 8001838:	08011a82 	.word	0x08011a82
 800183c:	080118b6 	.word	0x080118b6
 8001840:	08011a75 	.word	0x08011a75
 8001844:	08011a7c 	.word	0x08011a7c

08001848 <CmdDump>:
ParserReturnVal_t CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001848:	2801      	cmp	r0, #1
{
 800184a:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800184c:	d00b      	beq.n	8001866 <CmdDump+0x1e>
  if(action==CMD_LONG_HELP) {
 800184e:	2802      	cmp	r0, #2
 8001850:	4d0e      	ldr	r5, [pc, #56]	; (800188c <CmdDump+0x44>)
 8001852:	4c0f      	ldr	r4, [pc, #60]	; (8001890 <CmdDump+0x48>)
 8001854:	d109      	bne.n	800186a <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8001856:	480f      	ldr	r0, [pc, #60]	; (8001894 <CmdDump+0x4c>)
 8001858:	f002 fa2e 	bl	8003cb8 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 800185c:	682a      	ldr	r2, [r5, #0]
 800185e:	6821      	ldr	r1, [r4, #0]
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <CmdDump+0x50>)
 8001862:	f002 f98d 	bl	8003b80 <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 8001866:	2000      	movs	r0, #0
 8001868:	bd38      	pop	{r3, r4, r5, pc}
  rc = fetch_uint32_arg(&address);
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff ff56 	bl	800171c <fetch_uint32_arg>
  if(rc == 0) {
 8001870:	b910      	cbnz	r0, 8001878 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 8001872:	4628      	mov	r0, r5
 8001874:	f7ff ff52 	bl	800171c <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	6829      	ldr	r1, [r5, #0]
 800187c:	4610      	mov	r0, r2
 800187e:	f7ff ff8b 	bl	8001798 <DumpBuffer>
  address = address+count;
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	682a      	ldr	r2, [r5, #0]
 8001886:	4413      	add	r3, r2
 8001888:	6023      	str	r3, [r4, #0]
  return CmdReturnOk;
 800188a:	e7ec      	b.n	8001866 <CmdDump+0x1e>
 800188c:	200001a4 	.word	0x200001a4
 8001890:	200004a4 	.word	0x200004a4
 8001894:	08011a8a 	.word	0x08011a8a
 8001898:	08011c22 	.word	0x08011c22

0800189c <CmdStats>:
  }
#include "terminal.inc"

/* Dump the terminal statistics */
ParserReturnVal_t CmdStats(int mode)
{
 800189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018a0:	4601      	mov	r1, r0
{
 80018a2:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018a4:	bb10      	cbnz	r0, 80018ec <CmdStats+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a6:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomically */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80018a8:	4812      	ldr	r0, [pc, #72]	; (80018f4 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80018aa:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 80018ac:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 80018b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80018b2:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 80018b6:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 80018c0:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 80018c2:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80018c6:	f001 fce9 	bl	800329c <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 80018ca:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%lu, %s: %s\n"
 80018cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <CmdStats+0x5c>)
 80018d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <CmdStats+0x60>)
 80018d4:	9400      	str	r4, [sp, #0]
 80018d6:	e9cd b307 	strd	fp, r3, [sp, #28]
 80018da:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 80018de:	e9cd 7803 	strd	r7, r8, [sp, #12]
 80018e2:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <CmdStats+0x64>)
 80018e8:	f002 f94a 	bl	8003b80 <iprintf>
	   s[i].framingError,
	   s[i].parityError);
  }

  return CmdReturnOk;
}
 80018ec:	2000      	movs	r0, #0
 80018ee:	b00d      	add	sp, #52	; 0x34
 80018f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f4:	200004a8 	.word	0x200004a8
 80018f8:	08011c78 	.word	0x08011c78
 80018fc:	08011c80 	.word	0x08011c80
 8001900:	08011c70 	.word	0x08011c70

08001904 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 8001904:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001906:	4604      	mov	r4, r0
 8001908:	b9b0      	cbnz	r0, 8001938 <CmdTransparent+0x34>

  index = 0;
 800190a:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 800190c:	a801      	add	r0, sp, #4
 800190e:	f7ff ff05 	bl	800171c <fetch_uint32_arg>
  if(rc) {
 8001912:	4602      	mov	r2, r0
 8001914:	b130      	cbz	r0, 8001924 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8001916:	4809      	ldr	r0, [pc, #36]	; (800193c <CmdTransparent+0x38>)
 8001918:	4621      	mov	r1, r4
 800191a:	f002 f931 	bl	8003b80 <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 800191e:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8001920:	b002      	add	sp, #8
 8001922:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001924:	9901      	ldr	r1, [sp, #4]
 8001926:	b119      	cbz	r1, 8001930 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <CmdTransparent+0x3c>)
 800192a:	f002 f929 	bl	8003b80 <iprintf>
    return CmdReturnBadParameter1;
 800192e:	e7f6      	b.n	800191e <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <CmdTransparent+0x40>)
 8001932:	f002 f9c1 	bl	8003cb8 <puts>
 8001936:	e7f2      	b.n	800191e <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001938:	2000      	movs	r0, #0
 800193a:	e7f1      	b.n	8001920 <CmdTransparent+0x1c>
 800193c:	08011d5d 	.word	0x08011d5d
 8001940:	08011d8b 	.word	0x08011d8b
 8001944:	08011dc1 	.word	0x08011dc1

08001948 <TerminalInit>:
{
 8001948:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 800194a:	4c10      	ldr	r4, [pc, #64]	; (800198c <TerminalInit+0x44>)
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	4619      	mov	r1, r3
 8001952:	2202      	movs	r2, #2
 8001954:	6840      	ldr	r0, [r0, #4]
 8001956:	f002 f9b7 	bl	8003cc8 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800195a:	6820      	ldr	r0, [r4, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	4619      	mov	r1, r3
 8001960:	2202      	movs	r2, #2
 8001962:	6880      	ldr	r0, [r0, #8]
 8001964:	f002 f9b0 	bl	8003cc8 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8001968:	6820      	ldr	r0, [r4, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	2202      	movs	r2, #2
 800196e:	4619      	mov	r1, r3
 8001970:	68c0      	ldr	r0, [r0, #12]
 8001972:	f002 f9a9 	bl	8003cc8 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <TerminalInit+0x48>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800197e:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	615a      	str	r2, [r3, #20]
}
 8001988:	bd10      	pop	{r4, pc}
 800198a:	bf00      	nop
 800198c:	200001b4 	.word	0x200001b4
 8001990:	40004400 	.word	0x40004400

08001994 <TerminalRead>:
{
 8001994:	b530      	push	{r4, r5, lr}
 8001996:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 800199a:	4c10      	ldr	r4, [pc, #64]	; (80019dc <TerminalRead+0x48>)
 800199c:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 80019a0:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 80019a2:	fb05 4303 	mla	r3, r5, r3, r4
 80019a6:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 80019aa:	b2a4      	uxth	r4, r4
 80019ac:	b10c      	cbz	r4, 80019b2 <TerminalRead+0x1e>
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d101      	bne.n	80019b6 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 80019b2:	b662      	cpsie	i
}
 80019b4:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 80019b6:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 80019ba:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 80019bc:	5d1d      	ldrb	r5, [r3, r4]
 80019be:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 80019c0:	3401      	adds	r4, #1
 80019c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80019c6:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 80019ca:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 80019ce:	3c01      	subs	r4, #1
 80019d0:	b2a4      	uxth	r4, r4
 80019d2:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 80019d6:	3001      	adds	r0, #1
 80019d8:	e7e5      	b.n	80019a6 <TerminalRead+0x12>
 80019da:	bf00      	nop
 80019dc:	200004a8 	.word	0x200004a8

080019e0 <CmdReceive>:
{
 80019e0:	b513      	push	{r0, r1, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80019e2:	4604      	mov	r4, r0
 80019e4:	bb18      	cbnz	r0, 8001a2e <CmdReceive+0x4e>
  index = 0;
 80019e6:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 80019e8:	a801      	add	r0, sp, #4
 80019ea:	f7ff fe97 	bl	800171c <fetch_uint32_arg>
  if(rc) {
 80019ee:	4602      	mov	r2, r0
 80019f0:	b130      	cbz	r0, 8001a00 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80019f2:	4810      	ldr	r0, [pc, #64]	; (8001a34 <CmdReceive+0x54>)
 80019f4:	4621      	mov	r1, r4
 80019f6:	f002 f8c3 	bl	8003b80 <iprintf>
    return CmdReturnBadParameter1;
 80019fa:	2004      	movs	r0, #4
}
 80019fc:	b002      	add	sp, #8
 80019fe:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001a00:	9901      	ldr	r1, [sp, #4]
 8001a02:	b119      	cbz	r1, 8001a0c <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <CmdReceive+0x58>)
 8001a06:	f002 f8bb 	bl	8003b80 <iprintf>
 8001a0a:	e7f6      	b.n	80019fa <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <CmdReceive+0x5c>)
 8001a0e:	f002 f8b7 	bl	8003b80 <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 8001a12:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f10d 0103 	add.w	r1, sp, #3
 8001a1c:	f7ff ffba 	bl	8001994 <TerminalRead>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d0eb      	beq.n	80019fc <CmdReceive+0x1c>
    printf("%c",c);
 8001a24:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001a28:	f002 f8c2 	bl	8003bb0 <putchar>
 8001a2c:	e7f1      	b.n	8001a12 <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e7e4      	b.n	80019fc <CmdReceive+0x1c>
 8001a32:	bf00      	nop
 8001a34:	08011d5d 	.word	0x08011d5d
 8001a38:	08011d8b 	.word	0x08011d8b
 8001a3c:	08011de6 	.word	0x08011de6

08001a40 <TerminalOutputBufferWrite>:
  if(len >= TERMINALBUFFERSIZE) {
 8001a40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	4c2e      	ldr	r4, [pc, #184]	; (8001b00 <TerminalOutputBufferWrite+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 8001a48:	d30a      	bcc.n	8001a60 <TerminalOutputBufferWrite+0x20>
    TerminalState[index].stats.writeTooBig++;
 8001a4a:	f640 0334 	movw	r3, #2100	; 0x834
 8001a4e:	fb03 4300 	mla	r3, r3, r0, r4
 8001a52:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8001a56:	3201      	adds	r2, #1
 8001a58:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001a60:	f640 0334 	movw	r3, #2100	; 0x834
 8001a64:	fb03 4300 	mla	r3, r3, r0, r4
 8001a68:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001a6c:	fa12 f585 	uxtah	r5, r2, r5
 8001a70:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001a74:	d221      	bcs.n	8001aba <TerminalOutputBufferWrite+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a76:	b672      	cpsid	i
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001a78:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001a7c:	2500      	movs	r5, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001a7e:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 8001a82:	42aa      	cmp	r2, r5
 8001a84:	d005      	beq.n	8001a92 <TerminalOutputBufferWrite+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001a86:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
 8001a8a:	b2b6      	uxth	r6, r6
 8001a8c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001a90:	d321      	bcc.n	8001ad6 <TerminalOutputBufferWrite+0x96>
  TerminalState[index].stats.written += sent;  /* gather statistics */
 8001a92:	f640 0334 	movw	r3, #2100	; 0x834
 8001a96:	fb03 4400 	mla	r4, r3, r0, r4
 8001a9a:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001a9e:	442b      	add	r3, r5
 8001aa0:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
  uart=TerminalInfo[index].instance;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <TerminalOutputBufferWrite+0xc4>)
 8001aa6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001aaa:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001aac:	68d3      	ldr	r3, [r2, #12]
 8001aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab2:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab4:	b662      	cpsie	i
}
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 8001aba:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001abe:	3501      	adds	r5, #1
 8001ac0:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001ac4:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001ac8:	fa12 f585 	uxtah	r5, r2, r5
 8001acc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001ad0:	d3d1      	bcc.n	8001a76 <TerminalOutputBufferWrite+0x36>
      asm volatile ("nop");
 8001ad2:	bf00      	nop
 8001ad4:	e7f6      	b.n	8001ac4 <TerminalOutputBufferWrite+0x84>
    head = TerminalState[index].outHead;
 8001ad6:	f8b3 6806 	ldrh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 8001ada:	f811 c005 	ldrb.w	ip, [r1, r5]
 8001ade:	fa13 f786 	uxtah	r7, r3, r6
    TerminalState[index].outHead = TERMINALINCR(head);
 8001ae2:	3601      	adds	r6, #1
 8001ae4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001ae8:	f8a3 6806 	strh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001aec:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001af0:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 8001af4:	3601      	adds	r6, #1
 8001af6:	b2b6      	uxth	r6, r6
 8001af8:	f8a3 680a 	strh.w	r6, [r3, #2058]	; 0x80a
    sent++;
 8001afc:	3501      	adds	r5, #1
 8001afe:	e7c0      	b.n	8001a82 <TerminalOutputBufferWrite+0x42>
 8001b00:	200004a8 	.word	0x200004a8
 8001b04:	08011f00 	.word	0x08011f00

08001b08 <CmdSend>:
{
 8001b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	bb70      	cbnz	r0, 8001b6c <CmdSend+0x64>
  index = 0;
 8001b0e:	9002      	str	r0, [sp, #8]
  rc = fetch_uint32_arg(&index);
 8001b10:	a802      	add	r0, sp, #8
 8001b12:	f7ff fe03 	bl	800171c <fetch_uint32_arg>
  if(rc) {
 8001b16:	4602      	mov	r2, r0
 8001b18:	b130      	cbz	r0, 8001b28 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8001b1a:	4815      	ldr	r0, [pc, #84]	; (8001b70 <CmdSend+0x68>)
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	f002 f82f 	bl	8003b80 <iprintf>
    return CmdReturnBadParameter1;
 8001b22:	2004      	movs	r0, #4
}
 8001b24:	b004      	add	sp, #16
 8001b26:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001b28:	9c02      	ldr	r4, [sp, #8]
 8001b2a:	b124      	cbz	r4, 8001b36 <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	4811      	ldr	r0, [pc, #68]	; (8001b74 <CmdSend+0x6c>)
 8001b30:	f002 f826 	bl	8003b80 <iprintf>
 8001b34:	e7f5      	b.n	8001b22 <CmdSend+0x1a>
  fetch_cmd_args(&s);
 8001b36:	a803      	add	r0, sp, #12
  s = NULL;
 8001b38:	9403      	str	r4, [sp, #12]
  fetch_cmd_args(&s);
 8001b3a:	f7ff fe25 	bl	8001788 <fetch_cmd_args>
  len = strlen(s);
 8001b3e:	9903      	ldr	r1, [sp, #12]
 8001b40:	9101      	str	r1, [sp, #4]
 8001b42:	4608      	mov	r0, r1
 8001b44:	f7fe fce8 	bl	8000518 <strlen>
  if(len==0) {
 8001b48:	9901      	ldr	r1, [sp, #4]
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	b920      	cbnz	r0, 8001b58 <CmdSend+0x50>
    printf("You need to specify what you want to send\n");
 8001b4e:	480a      	ldr	r0, [pc, #40]	; (8001b78 <CmdSend+0x70>)
 8001b50:	f002 f8b2 	bl	8003cb8 <puts>
    return CmdReturnBadParameter2;
 8001b54:	2005      	movs	r0, #5
 8001b56:	e7e5      	b.n	8001b24 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 8001b58:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001b5c:	f7ff ff70 	bl	8001a40 <TerminalOutputBufferWrite>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8001b60:	4906      	ldr	r1, [pc, #24]	; (8001b7c <CmdSend+0x74>)
 8001b62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f7ff ff6a 	bl	8001a40 <TerminalOutputBufferWrite>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	e7d9      	b.n	8001b24 <CmdSend+0x1c>
 8001b70:	08011d5d 	.word	0x08011d5d
 8001b74:	08011d8b 	.word	0x08011d8b
 8001b78:	08011e01 	.word	0x08011e01
 8001b7c:	08012037 	.word	0x08012037

08001b80 <TerminalWritePolled>:
  uart = TerminalInfo[index].instance;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <TerminalWritePolled+0x24>)
{
 8001b82:	b510      	push	{r4, lr}
  uart = TerminalInfo[index].instance;
 8001b84:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001b88:	6883      	ldr	r3, [r0, #8]
  while(len) {
 8001b8a:	1888      	adds	r0, r1, r2
 8001b8c:	4281      	cmp	r1, r0
 8001b8e:	d102      	bne.n	8001b96 <TerminalWritePolled+0x16>
}
 8001b90:	4610      	mov	r0, r2
 8001b92:	bd10      	pop	{r4, pc}
      asm volatile ("nop");
 8001b94:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 8001b96:	681c      	ldr	r4, [r3, #0]
 8001b98:	0624      	lsls	r4, r4, #24
 8001b9a:	d5fb      	bpl.n	8001b94 <TerminalWritePolled+0x14>
    uart->DR = *p;
 8001b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ba0:	605c      	str	r4, [r3, #4]
    sent++;
 8001ba2:	e7f3      	b.n	8001b8c <TerminalWritePolled+0xc>
 8001ba4:	08011f00 	.word	0x08011f00

08001ba8 <PolledPrintf>:
{
 8001ba8:	b40f      	push	{r0, r1, r2, r3}
 8001baa:	b500      	push	{lr}
 8001bac:	b097      	sub	sp, #92	; 0x5c
 8001bae:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001bb0:	2150      	movs	r1, #80	; 0x50
{
 8001bb2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8001bb6:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001bb8:	a802      	add	r0, sp, #8
 8001bba:	f002 fa71 	bl	80040a0 <vsniprintf>
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001bbe:	a902      	add	r1, sp, #8
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001bc0:	4602      	mov	r2, r0
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff ffdc 	bl	8001b80 <TerminalWritePolled>
}
 8001bc8:	b017      	add	sp, #92	; 0x5c
 8001bca:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bce:	b004      	add	sp, #16
 8001bd0:	4770      	bx	lr
	...

08001bd4 <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <TerminalInputBufferWrite+0x60>)
{
 8001bd6:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001bd8:	f640 0434 	movw	r4, #2100	; 0x834
 8001bdc:	fb04 3000 	mla	r0, r4, r0, r3
 8001be0:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001be4:	fa12 f383 	uxtah	r3, r2, r3
 8001be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bec:	d306      	bcc.n	8001bfc <TerminalInputBufferWrite+0x28>
    TerminalState[index].stats.receiveTooBig++;
 8001bee:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    return 1;
 8001bf8:	2001      	movs	r0, #1
}
 8001bfa:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8001bfc:	f8d0 3820 	ldr.w	r3, [r0, #2080]	; 0x820
 8001c00:	4413      	add	r3, r2
 8001c02:	f8c0 3820 	str.w	r3, [r0, #2080]	; 0x820
  while(len != 0) {
 8001c06:	440a      	add	r2, r1
 8001c08:	4291      	cmp	r1, r2
 8001c0a:	d101      	bne.n	8001c10 <TerminalInputBufferWrite+0x3c>
  return 0;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e7f4      	b.n	8001bfa <TerminalInputBufferWrite+0x26>
    head = TerminalState[index].inHead;
 8001c10:	f8b0 3400 	ldrh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inBuffer[head] = *p++;
 8001c14:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 8001c18:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8001c1a:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c22:	f8a0 3400 	strh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inCount++;
 8001c26:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    len--;
 8001c32:	e7e9      	b.n	8001c08 <TerminalInputBufferWrite+0x34>
 8001c34:	200004a8 	.word	0x200004a8

08001c38 <TerminalISR>:
  uart = TerminalInfo[index].instance;
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <TerminalISR+0xd8>)
 8001c3a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
{
 8001c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uart = TerminalInfo[index].instance;
 8001c40:	689e      	ldr	r6, [r3, #8]
  isr = uart->SR;
 8001c42:	6835      	ldr	r5, [r6, #0]
  if(isr & USART_SR_RXNE) { 
 8001c44:	06a9      	lsls	r1, r5, #26
{
 8001c46:	4604      	mov	r4, r0
  if(isr & USART_SR_RXNE) { 
 8001c48:	d507      	bpl.n	8001c5a <TerminalISR+0x22>
    c = uart->DR;
 8001c4a:	6873      	ldr	r3, [r6, #4]
 8001c4c:	f88d 3007 	strb.w	r3, [sp, #7]
    TerminalInputBufferWrite(index,&c,1);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f10d 0107 	add.w	r1, sp, #7
 8001c56:	f7ff ffbd 	bl	8001bd4 <TerminalInputBufferWrite>
  if(isr & USART_SR_TXE) {
 8001c5a:	062a      	lsls	r2, r5, #24
 8001c5c:	d50d      	bpl.n	8001c7a <TerminalISR+0x42>
    if(TerminalState[index].outCount == 0) {
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <TerminalISR+0xdc>)
 8001c60:	f640 0234 	movw	r2, #2100	; 0x834
 8001c64:	fb02 3304 	mla	r3, r2, r4, r3
 8001c68:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	2a00      	cmp	r2, #0
 8001c70:	d13b      	bne.n	8001cea <TerminalISR+0xb2>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8001c72:	68f3      	ldr	r3, [r6, #12]
 8001c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c78:	60f3      	str	r3, [r6, #12]
  if(isr & USART_SR_TC) {
 8001c7a:	066b      	lsls	r3, r5, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8001c7c:	bf42      	ittt	mi
 8001c7e:	68f3      	ldrmi	r3, [r6, #12]
 8001c80:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8001c84:	60f3      	strmi	r3, [r6, #12]
  if(isr & USART_SR_PE) {
 8001c86:	07e8      	lsls	r0, r5, #31
 8001c88:	d509      	bpl.n	8001c9e <TerminalISR+0x66>
    TerminalState[index].stats.parityError++;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <TerminalISR+0xdc>)
 8001c8c:	f640 0234 	movw	r2, #2100	; 0x834
 8001c90:	fb02 3304 	mla	r3, r2, r4, r3
 8001c94:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001c98:	3201      	adds	r2, #1
 8001c9a:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8001c9e:	07a9      	lsls	r1, r5, #30
 8001ca0:	d509      	bpl.n	8001cb6 <TerminalISR+0x7e>
    TerminalState[index].stats.framingError++;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <TerminalISR+0xdc>)
 8001ca4:	f640 0234 	movw	r2, #2100	; 0x834
 8001ca8:	fb02 3304 	mla	r3, r2, r4, r3
 8001cac:	f8d3 282c 	ldr.w	r2, [r3, #2092]	; 0x82c
 8001cb0:	3201      	adds	r2, #1
 8001cb2:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8001cb6:	076a      	lsls	r2, r5, #29
 8001cb8:	d509      	bpl.n	8001cce <TerminalISR+0x96>
    TerminalState[index].stats.noiseError++;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <TerminalISR+0xdc>)
 8001cbc:	f640 0234 	movw	r2, #2100	; 0x834
 8001cc0:	fb02 3304 	mla	r3, r2, r4, r3
 8001cc4:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 8001cc8:	3201      	adds	r2, #1
 8001cca:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8001cce:	072b      	lsls	r3, r5, #28
 8001cd0:	d509      	bpl.n	8001ce6 <TerminalISR+0xae>
    TerminalState[index].stats.overrunError++;
 8001cd2:	4810      	ldr	r0, [pc, #64]	; (8001d14 <TerminalISR+0xdc>)
 8001cd4:	f640 0334 	movw	r3, #2100	; 0x834
 8001cd8:	fb03 0404 	mla	r4, r3, r4, r0
 8001cdc:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
}
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
      tail = TerminalState[index].outTail;
 8001cea:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8001cee:	fa13 f182 	uxtah	r1, r3, r2
      tail = TERMINALINCR(tail);
 8001cf2:	3201      	adds	r2, #1
      uart->DR = c;
 8001cf4:	f891 1406 	ldrb.w	r1, [r1, #1030]	; 0x406
 8001cf8:	6071      	str	r1, [r6, #4]
      TerminalState[index].outCount--;
 8001cfa:	f8b3 180a 	ldrh.w	r1, [r3, #2058]	; 0x80a
 8001cfe:	3901      	subs	r1, #1
 8001d00:	b289      	uxth	r1, r1
      TerminalState[index].outTail = tail;
 8001d02:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8001d06:	f8a3 180a 	strh.w	r1, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8001d0a:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8001d0e:	e7b4      	b.n	8001c7a <TerminalISR+0x42>
 8001d10:	08011f00 	.word	0x08011f00
 8001d14:	200004a8 	.word	0x200004a8

08001d18 <USART2_IRQHandler>:
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff bf8d 	b.w	8001c38 <TerminalISR>
	...

08001d20 <WDTCheckReset>:
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <WDTCheckReset+0x64>)
{
 8001d22:	b510      	push	{r4, lr}
  csr = RCC->CSR;
 8001d24:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 8001d26:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8001d2a:	d025      	beq.n	8001d78 <WDTCheckReset+0x58>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8001d2c:	4816      	ldr	r0, [pc, #88]	; (8001d88 <WDTCheckReset+0x68>)
 8001d2e:	f001 ffc3 	bl	8003cb8 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 8001d32:	2c00      	cmp	r4, #0
 8001d34:	da02      	bge.n	8001d3c <WDTCheckReset+0x1c>
 8001d36:	4815      	ldr	r0, [pc, #84]	; (8001d8c <WDTCheckReset+0x6c>)
 8001d38:	f001 ffbe 	bl	8003cb8 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8001d3c:	0062      	lsls	r2, r4, #1
 8001d3e:	d502      	bpl.n	8001d46 <WDTCheckReset+0x26>
 8001d40:	4813      	ldr	r0, [pc, #76]	; (8001d90 <WDTCheckReset+0x70>)
 8001d42:	f001 ffb9 	bl	8003cb8 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 8001d46:	00a3      	lsls	r3, r4, #2
 8001d48:	d502      	bpl.n	8001d50 <WDTCheckReset+0x30>
 8001d4a:	4812      	ldr	r0, [pc, #72]	; (8001d94 <WDTCheckReset+0x74>)
 8001d4c:	f001 ffb4 	bl	8003cb8 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8001d50:	00e0      	lsls	r0, r4, #3
 8001d52:	d502      	bpl.n	8001d5a <WDTCheckReset+0x3a>
 8001d54:	4810      	ldr	r0, [pc, #64]	; (8001d98 <WDTCheckReset+0x78>)
 8001d56:	f001 ffaf 	bl	8003cb8 <puts>
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8001d5a:	01a1      	lsls	r1, r4, #6
 8001d5c:	d502      	bpl.n	8001d64 <WDTCheckReset+0x44>
 8001d5e:	480f      	ldr	r0, [pc, #60]	; (8001d9c <WDTCheckReset+0x7c>)
 8001d60:	f001 ffaa 	bl	8003cb8 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8001d64:	0162      	lsls	r2, r4, #5
 8001d66:	d502      	bpl.n	8001d6e <WDTCheckReset+0x4e>
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <WDTCheckReset+0x80>)
 8001d6a:	f001 ffa5 	bl	8003cb8 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8001d6e:	0123      	lsls	r3, r4, #4
 8001d70:	d502      	bpl.n	8001d78 <WDTCheckReset+0x58>
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <WDTCheckReset+0x84>)
 8001d74:	f001 ffa0 	bl	8003cb8 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <WDTCheckReset+0x64>)
 8001d7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d7e:	675a      	str	r2, [r3, #116]	; 0x74

}
 8001d80:	bd10      	pop	{r4, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	08011f10 	.word	0x08011f10
 8001d8c:	08011f48 	.word	0x08011f48
 8001d90:	08011f53 	.word	0x08011f53
 8001d94:	08011f66 	.word	0x08011f66
 8001d98:	08011f85 	.word	0x08011f85
 8001d9c:	08011f8f 	.word	0x08011f8f
 8001da0:	08011f99 	.word	0x08011f99
 8001da4:	08011fa3 	.word	0x08011fa3

08001da8 <WDTFeed>:

/* Feed the watchdog */
void WDTFeed(void)
{
#if defined(HAL_IWDG_MODULE_ENABLED)
  HAL_IWDG_Refresh(&hiwdg); /* Feed it */
 8001da8:	4801      	ldr	r0, [pc, #4]	; (8001db0 <WDTFeed+0x8>)
 8001daa:	f001 b98c 	b.w	80030c6 <HAL_IWDG_Refresh>
 8001dae:	bf00      	nop
 8001db0:	20000cf4 	.word	0x20000cf4

08001db4 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001db6:	4604      	mov	r4, r0
 8001db8:	b938      	cbnz	r0, 8001dca <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 8001dba:	480b      	ldr	r0, [pc, #44]	; (8001de8 <CmdTasks+0x34>)
  p = _tasktable_start;
 8001dbc:	4d0b      	ldr	r5, [pc, #44]	; (8001dec <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001dbe:	4e0c      	ldr	r6, [pc, #48]	; (8001df0 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001dc0:	4f0c      	ldr	r7, [pc, #48]	; (8001df4 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001dc2:	f001 ff79 	bl	8003cb8 <puts>
  while(p != _tasktable_end) {
 8001dc6:	42b5      	cmp	r5, r6
 8001dc8:	d102      	bne.n	8001dd0 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 8001dca:	2000      	movs	r0, #0
 8001dcc:	b003      	add	sp, #12
 8001dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001dd0:	696b      	ldr	r3, [r5, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	692b      	ldr	r3, [r5, #16]
 8001dd8:	f855 2b18 	ldr.w	r2, [r5], #24
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f001 fecf 	bl	8003b80 <iprintf>
    i++;
 8001de2:	3401      	adds	r4, #1
 8001de4:	e7ef      	b.n	8001dc6 <CmdTasks+0x12>
 8001de6:	bf00      	nop
 8001de8:	08011fad 	.word	0x08011fad
 8001dec:	08012b20 	.word	0x08012b20
 8001df0:	08012b38 	.word	0x08012b38
 8001df4:	08011fc6 	.word	0x08011fc6

08001df8 <TaskingInit>:
{
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	4d07      	ldr	r5, [pc, #28]	; (8001e18 <TaskingInit+0x20>)
  p = _tasktable_start;
 8001dfc:	4c07      	ldr	r4, [pc, #28]	; (8001e1c <TaskingInit+0x24>)
  while(p != _tasktable_end) {
 8001dfe:	4e08      	ldr	r6, [pc, #32]	; (8001e20 <TaskingInit+0x28>)
    s->interval = 0;    /* Expire all task intervals */
 8001e00:	2700      	movs	r7, #0
  while(p != _tasktable_end) {
 8001e02:	42b4      	cmp	r4, r6
 8001e04:	d100      	bne.n	8001e08 <TaskingInit+0x10>
}
 8001e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->initFunc != NULL) {
 8001e08:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8001e0a:	f845 7b04 	str.w	r7, [r5], #4
    if(p->initFunc != NULL) {
 8001e0e:	b10b      	cbz	r3, 8001e14 <TaskingInit+0x1c>
      p->initFunc(p->data);
 8001e10:	68e0      	ldr	r0, [r4, #12]
 8001e12:	4798      	blx	r3
    p++;
 8001e14:	3418      	adds	r4, #24
    s++;
 8001e16:	e7f4      	b.n	8001e02 <TaskingInit+0xa>
 8001e18:	20000384 	.word	0x20000384
 8001e1c:	08012b20 	.word	0x08012b20
 8001e20:	08012b38 	.word	0x08012b38

08001e24 <TaskingTickHandler>:
  AccumTicks++;
 8001e24:	4a02      	ldr	r2, [pc, #8]	; (8001e30 <TaskingTickHandler+0xc>)
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000cdc 	.word	0x20000cdc

08001e34 <TaskingRun>:
{
 8001e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
  ticks = AccumTicks;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <TaskingRun+0x58>)
  AccumTicks = 0;
 8001e3c:	2200      	movs	r2, #0
  ticks = AccumTicks;
 8001e3e:	681f      	ldr	r7, [r3, #0]
  AccumTicks = 0;
 8001e40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e42:	b662      	cpsie	i
  s = _taskstate_start;
 8001e44:	4d12      	ldr	r5, [pc, #72]	; (8001e90 <TaskingRun+0x5c>)
  p = _tasktable_start;
 8001e46:	4c13      	ldr	r4, [pc, #76]	; (8001e94 <TaskingRun+0x60>)
  while(p != _tasktable_end) {
 8001e48:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001e98 <TaskingRun+0x64>
 8001e4c:	4544      	cmp	r4, r8
 8001e4e:	d101      	bne.n	8001e54 <TaskingRun+0x20>
}
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p->func != NULL) {
 8001e54:	6863      	ldr	r3, [r4, #4]
 8001e56:	b11b      	cbz	r3, 8001e60 <TaskingRun+0x2c>
      if(p->interval == 0) {
 8001e58:	6922      	ldr	r2, [r4, #16]
 8001e5a:	b9a2      	cbnz	r2, 8001e86 <TaskingRun+0x52>
	p->func(p->data);
 8001e5c:	68e0      	ldr	r0, [r4, #12]
 8001e5e:	4798      	blx	r3
    p++;
 8001e60:	3418      	adds	r4, #24
    s++;
 8001e62:	3504      	adds	r5, #4
 8001e64:	e7f2      	b.n	8001e4c <TaskingRun+0x18>
	  if(s->interval) {
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	b943      	cbnz	r3, 8001e7c <TaskingRun+0x48>
	    p->func(p->data);
 8001e6a:	6863      	ldr	r3, [r4, #4]
 8001e6c:	68e0      	ldr	r0, [r4, #12]
 8001e6e:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8001e70:	6923      	ldr	r3, [r4, #16]
 8001e72:	602b      	str	r3, [r5, #0]
 8001e74:	3e01      	subs	r6, #1
	while(i--) { /* This could be better... if ticks > interval... */
 8001e76:	2e00      	cmp	r6, #0
 8001e78:	d1f5      	bne.n	8001e66 <TaskingRun+0x32>
 8001e7a:	e7f1      	b.n	8001e60 <TaskingRun+0x2c>
	    s->interval--;
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f7      	bne.n	8001e74 <TaskingRun+0x40>
 8001e84:	e7f1      	b.n	8001e6a <TaskingRun+0x36>
 8001e86:	463e      	mov	r6, r7
 8001e88:	e7f5      	b.n	8001e76 <TaskingRun+0x42>
 8001e8a:	bf00      	nop
 8001e8c:	20000cdc 	.word	0x20000cdc
 8001e90:	20000384 	.word	0x20000384
 8001e94:	08012b20 	.word	0x08012b20
 8001e98:	08012b38 	.word	0x08012b38

08001e9c <Default_IRQHandler>:
void Default_IRQHandler(void)
{
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <Default_IRQHandler+0x3c>)
 8001ea0:	480e      	ldr	r0, [pc, #56]	; (8001edc <Default_IRQHandler+0x40>)
{
 8001ea2:	b510      	push	{r4, lr}
  icsr = SCB->ICSR;
 8001ea4:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001ea6:	f7ff fe7f 	bl	8001ba8 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8001eaa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8001eae:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <Default_IRQHandler+0x44>)
 8001eb0:	f7ff fe7a 	bl	8001ba8 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <Default_IRQHandler+0x48>)
 8001eb6:	f1a4 0110 	sub.w	r1, r4, #16
 8001eba:	f7ff fe75 	bl	8001ba8 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <Default_IRQHandler+0x4c>)
 8001ec0:	480a      	ldr	r0, [pc, #40]	; (8001eec <Default_IRQHandler+0x50>)
 8001ec2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001ec6:	f7ff fe6f 	bl	8001ba8 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <Default_IRQHandler+0x54>)
 8001ecc:	f7ff fe6c 	bl	8001ba8 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8001ed0:	e7fe      	b.n	8001ed0 <Default_IRQHandler+0x34>
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	080120e4 	.word	0x080120e4
 8001edc:	08012003 	.word	0x08012003
 8001ee0:	0801203a 	.word	0x0801203a
 8001ee4:	08012076 	.word	0x08012076
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	0801209f 	.word	0x0801209f
 8001ef0:	080120ba 	.word	0x080120ba

08001ef4 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001ef4:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <Uncompress+0x74>)
{
 8001ef8:	b08a      	sub	sp, #40	; 0x28
 8001efa:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001efc:	466c      	mov	r4, sp
 8001efe:	f102 0620 	add.w	r6, r2, #32
 8001f02:	6810      	ldr	r0, [r2, #0]
 8001f04:	6851      	ldr	r1, [r2, #4]
 8001f06:	4625      	mov	r5, r4
 8001f08:	c503      	stmia	r5!, {r0, r1}
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	42b2      	cmp	r2, r6
 8001f0e:	462c      	mov	r4, r5
 8001f10:	d1f7      	bne.n	8001f02 <Uncompress+0xe>
 8001f12:	6810      	ldr	r0, [r2, #0]
 8001f14:	6028      	str	r0, [r5, #0]
 8001f16:	8892      	ldrh	r2, [r2, #4]
 8001f18:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4d13      	ldr	r5, [pc, #76]	; (8001f6c <Uncompress+0x78>)
 8001f1e:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8001f22:	2100      	movs	r1, #0
 8001f24:	ba5b      	rev16	r3, r3
 8001f26:	b29b      	uxth	r3, r3
  i = 0;
 8001f28:	460c      	mov	r4, r1
 8001f2a:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001f2c:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8001f30:	d103      	bne.n	8001f3a <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8001f32:	480e      	ldr	r0, [pc, #56]	; (8001f6c <Uncompress+0x78>)
  buf[i]='\0';
 8001f34:	5532      	strb	r2, [r6, r4]
}
 8001f36:	b00a      	add	sp, #40	; 0x28
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8001f3a:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8001f3c:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8001f40:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001f44:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8001f48:	4462      	add	r2, ip
    buf[i++] = c;
 8001f4a:	3401      	adds	r4, #1
 8001f4c:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001f50:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001f54:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8001f56:	2a07      	cmp	r2, #7
      bits -= 8;
 8001f58:	bf81      	itttt	hi
 8001f5a:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001f5c:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001f60:	4091      	lslhi	r1, r2
 8001f62:	430b      	orrhi	r3, r1
 8001f64:	4611      	mov	r1, r2
 8001f66:	e7e1      	b.n	8001f2c <Uncompress+0x38>
 8001f68:	080120f7 	.word	0x080120f7
 8001f6c:	20000ce0 	.word	0x20000ce0

08001f70 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001f70:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8001f72:	4604      	mov	r4, r0
 8001f74:	b1f0      	cbz	r0, 8001fb4 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8001f76:	b1f9      	cbz	r1, 8001fb8 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001f78:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001f7a:	888a      	ldrh	r2, [r1, #4]
 8001f7c:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001f7e:	2d10      	cmp	r5, #16
 8001f80:	d005      	beq.n	8001f8e <DecodeReadRegister+0x1e>
 8001f82:	2d20      	cmp	r5, #32
 8001f84:	d005      	beq.n	8001f92 <DecodeReadRegister+0x22>
 8001f86:	2d08      	cmp	r5, #8
 8001f88:	d105      	bne.n	8001f96 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8001f8a:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001f8c:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001f8e:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001f90:	e7fc      	b.n	8001f8c <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 8001f92:	58d0      	ldr	r0, [r2, r3]
    break;
 8001f94:	e7fa      	b.n	8001f8c <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001f96:	6808      	ldr	r0, [r1, #0]
 8001f98:	f7ff ffac 	bl	8001ef4 <Uncompress>
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <DecodeReadRegister+0x4c>)
 8001fa2:	f001 fded 	bl	8003b80 <iprintf>
    printf(" in periphral %s!\n",
 8001fa6:	6820      	ldr	r0, [r4, #0]
 8001fa8:	f7ff ffa4 	bl	8001ef4 <Uncompress>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <DecodeReadRegister+0x50>)
 8001fb0:	f001 fde6 	bl	8003b80 <iprintf>
    return 0;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7e9      	b.n	8001f8c <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 8001fb8:	4608      	mov	r0, r1
 8001fba:	e7e7      	b.n	8001f8c <DecodeReadRegister+0x1c>
 8001fbc:	0801211d 	.word	0x0801211d
 8001fc0:	0801213f 	.word	0x0801213f

08001fc4 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001fc4:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	b1f8      	cbz	r0, 800200a <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8001fca:	b1f1      	cbz	r1, 800200a <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001fcc:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001fce:	8888      	ldrh	r0, [r1, #4]
 8001fd0:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001fd2:	2d10      	cmp	r5, #16
 8001fd4:	d006      	beq.n	8001fe4 <DecodeWriteRegister+0x20>
 8001fd6:	2d20      	cmp	r5, #32
 8001fd8:	d006      	beq.n	8001fe8 <DecodeWriteRegister+0x24>
 8001fda:	2d08      	cmp	r5, #8
 8001fdc:	d106      	bne.n	8001fec <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8001fde:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8001fe0:	2000      	movs	r0, #0
}
 8001fe2:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001fe4:	52c2      	strh	r2, [r0, r3]
    break;  
 8001fe6:	e7fb      	b.n	8001fe0 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8001fe8:	50c2      	str	r2, [r0, r3]
 8001fea:	e7f9      	b.n	8001fe0 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001fec:	6808      	ldr	r0, [r1, #0]
 8001fee:	f7ff ff81 	bl	8001ef4 <Uncompress>
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <DecodeWriteRegister+0x4c>)
 8001ff8:	f001 fdc2 	bl	8003b80 <iprintf>
    printf(" in periphral %s!\n",
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	f7ff ff79 	bl	8001ef4 <Uncompress>
 8002002:	4601      	mov	r1, r0
 8002004:	4803      	ldr	r0, [pc, #12]	; (8002014 <DecodeWriteRegister+0x50>)
 8002006:	f001 fdbb 	bl	8003b80 <iprintf>
  if(p == NULL) return 1;
 800200a:	2001      	movs	r0, #1
 800200c:	e7e9      	b.n	8001fe2 <DecodeWriteRegister+0x1e>
 800200e:	bf00      	nop
 8002010:	0801211d 	.word	0x0801211d
 8002014:	0801213f 	.word	0x0801213f

08002018 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8002018:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 800201a:	4604      	mov	r4, r0
{
 800201c:	b087      	sub	sp, #28
  if(f == NULL) return;
 800201e:	b1d0      	cbz	r0, 8002056 <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8002020:	7942      	ldrb	r2, [r0, #5]
 8002022:	2301      	movs	r3, #1
 8002024:	4093      	lsls	r3, r2
 8002026:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002028:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800202a:	40d1      	lsrs	r1, r2
 800202c:	3b01      	subs	r3, #1
 800202e:	400b      	ands	r3, r1
 8002030:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002032:	f7ff ff5f 	bl	8001ef4 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8002036:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <DecodeField+0x44>)
 800203a:	9b05      	ldr	r3, [sp, #20]
 800203c:	4601      	mov	r1, r0
 800203e:	4808      	ldr	r0, [pc, #32]	; (8002060 <DecodeField+0x48>)
 8002040:	2d01      	cmp	r5, #1
 8002042:	bf98      	it	ls
 8002044:	4602      	movls	r2, r0
 8002046:	7920      	ldrb	r0, [r4, #4]
 8002048:	9500      	str	r5, [sp, #0]
 800204a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <DecodeField+0x4c>)
 8002050:	461a      	mov	r2, r3
 8002052:	f001 fd95 	bl	8003b80 <iprintf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8002056:	b007      	add	sp, #28
 8002058:	bd30      	pop	{r4, r5, pc}
 800205a:	bf00      	nop
 800205c:	08012152 	.word	0x08012152
 8002060:	08012158 	.word	0x08012158
 8002064:	0801215e 	.word	0x0801215e

08002068 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8002068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800206a:	460f      	mov	r7, r1
 800206c:	4615      	mov	r5, r2
 800206e:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8002070:	4604      	mov	r4, r0
 8002072:	b180      	cbz	r0, 8002096 <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002074:	6800      	ldr	r0, [r0, #0]
 8002076:	f7ff ff3d 	bl	8001ef4 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 800207a:	88a2      	ldrh	r2, [r4, #4]
 800207c:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	79a3      	ldrb	r3, [r4, #6]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4601      	mov	r1, r0
 8002086:	462b      	mov	r3, r5
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <DecodeRegister+0x5c>)
 800208a:	462a      	mov	r2, r5
 800208c:	f001 fd78 	bl	8003b80 <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8002090:	68a7      	ldr	r7, [r4, #8]
 8002092:	b19f      	cbz	r7, 80020bc <DecodeRegister+0x54>
 8002094:	b986      	cbnz	r6, 80020b8 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8002096:	b003      	add	sp, #12
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 800209a:	4629      	mov	r1, r5
 800209c:	f7ff ffbc 	bl	8002018 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 80020a0:	3601      	adds	r6, #1
 80020a2:	89a3      	ldrh	r3, [r4, #12]
 80020a4:	429e      	cmp	r6, r3
 80020a6:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 80020aa:	d3f6      	bcc.n	800209a <DecodeRegister+0x32>
    printf("\n");
 80020ac:	200a      	movs	r0, #10
}
 80020ae:	b003      	add	sp, #12
 80020b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 80020b4:	f001 bd7c 	b.w	8003bb0 <putchar>
    for(i=0; i<r->numFields; i++) {
 80020b8:	2600      	movs	r6, #0
 80020ba:	e7f2      	b.n	80020a2 <DecodeRegister+0x3a>
  if(decodeFields) {
 80020bc:	2e00      	cmp	r6, #0
 80020be:	d0ea      	beq.n	8002096 <DecodeRegister+0x2e>
 80020c0:	e7f4      	b.n	80020ac <DecodeRegister+0x44>
 80020c2:	bf00      	nop
 80020c4:	08012187 	.word	0x08012187

080020c8 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020cc:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 80020ce:	4604      	mov	r4, r0
 80020d0:	b160      	cbz	r0, 80020ec <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80020d2:	6800      	ldr	r0, [r0, #0]
 80020d4:	f7ff ff0e 	bl	8001ef4 <Uncompress>
 80020d8:	6862      	ldr	r2, [r4, #4]
 80020da:	4601      	mov	r1, r0
 80020dc:	480e      	ldr	r0, [pc, #56]	; (8002118 <DecodePeripheral+0x50>)
 80020de:	f001 fd4f 	bl	8003b80 <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 80020e2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80020e6:	f1b8 0f00 	cmp.w	r8, #0
 80020ea:	d112      	bne.n	8002112 <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 80020ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 80020f0:	4639      	mov	r1, r7
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff ff3c 	bl	8001f70 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 80020f8:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 80020fa:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 80020fc:	4633      	mov	r3, r6
 80020fe:	4638      	mov	r0, r7
 8002100:	f7ff ffb2 	bl	8002068 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8002104:	3501      	adds	r5, #1
 8002106:	89a3      	ldrh	r3, [r4, #12]
 8002108:	429d      	cmp	r5, r3
 800210a:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 800210e:	d3ef      	bcc.n	80020f0 <DecodePeripheral+0x28>
 8002110:	e7ec      	b.n	80020ec <DecodePeripheral+0x24>
 8002112:	2500      	movs	r5, #0
 8002114:	e7f7      	b.n	8002106 <DecodePeripheral+0x3e>
 8002116:	bf00      	nop
 8002118:	080121c2 	.word	0x080121c2

0800211c <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 800211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002120:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8002122:	2009      	movs	r0, #9
 8002124:	f001 fd44 	bl	8003bb0 <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8002128:	4e0e      	ldr	r6, [pc, #56]	; (8002164 <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 800212a:	4f0f      	ldr	r7, [pc, #60]	; (8002168 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 800212c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800216c <DecodePrintPeripherals+0x50>
  col = 8;
 8002130:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8002132:	6820      	ldr	r0, [r4, #0]
 8002134:	b908      	cbnz	r0, 800213a <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8002136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 800213a:	f7ff fedb 	bl	8001ef4 <Uncompress>
 800213e:	4601      	mov	r1, r0
 8002140:	4630      	mov	r0, r6
 8002142:	f001 fd1d 	bl	8003b80 <iprintf>
    if((p+1)->name != NULL) {
 8002146:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8002148:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 800214a:	b14b      	cbz	r3, 8002160 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 800214c:	4638      	mov	r0, r7
 800214e:	f001 fd17 	bl	8003b80 <iprintf>
 8002152:	4405      	add	r5, r0
      if(col > 70) {
 8002154:	2d46      	cmp	r5, #70	; 0x46
 8002156:	d903      	bls.n	8002160 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8002158:	4640      	mov	r0, r8
 800215a:	f001 fd11 	bl	8003b80 <iprintf>
	col = 8;
 800215e:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8002160:	3410      	adds	r4, #16
 8002162:	e7e6      	b.n	8002132 <DecodePrintPeripherals+0x16>
 8002164:	0801213c 	.word	0x0801213c
 8002168:	0801215b 	.word	0x0801215b
 800216c:	080121ea 	.word	0x080121ea

08002170 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002174:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8002176:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002178:	460d      	mov	r5, r1
  printf("\t");
 800217a:	f001 fd19 	bl	8003bb0 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 800217e:	4f12      	ldr	r7, [pc, #72]	; (80021c8 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8002180:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80021cc <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8002184:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80021d0 <DecodePrintRegisters+0x60>
 8002188:	3d01      	subs	r5, #1
 800218a:	3610      	adds	r6, #16
  col = 8;
 800218c:	2408      	movs	r4, #8
  while(count--) {
 800218e:	1c6b      	adds	r3, r5, #1
 8002190:	d101      	bne.n	8002196 <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 8002192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8002196:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800219a:	f7ff feab 	bl	8001ef4 <Uncompress>
 800219e:	4601      	mov	r1, r0
 80021a0:	4638      	mov	r0, r7
 80021a2:	f001 fced 	bl	8003b80 <iprintf>
 80021a6:	4420      	add	r0, r4
 80021a8:	b2c4      	uxtb	r4, r0
    if(count) {
 80021aa:	b155      	cbz	r5, 80021c2 <DecodePrintRegisters+0x52>
      col += printf(", ");
 80021ac:	4640      	mov	r0, r8
 80021ae:	f001 fce7 	bl	8003b80 <iprintf>
 80021b2:	4420      	add	r0, r4
 80021b4:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 80021b6:	2c46      	cmp	r4, #70	; 0x46
 80021b8:	d903      	bls.n	80021c2 <DecodePrintRegisters+0x52>
	printf("\n\t");
 80021ba:	4648      	mov	r0, r9
 80021bc:	f001 fce0 	bl	8003b80 <iprintf>
	col = 8;
 80021c0:	2408      	movs	r4, #8
    r++;
 80021c2:	3d01      	subs	r5, #1
 80021c4:	3610      	adds	r6, #16
 80021c6:	e7e2      	b.n	800218e <DecodePrintRegisters+0x1e>
 80021c8:	0801213c 	.word	0x0801213c
 80021cc:	0801215b 	.word	0x0801215b
 80021d0:	080121ea 	.word	0x080121ea

080021d4 <CmdDecode>:
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 80021d4:	2802      	cmp	r0, #2
{
 80021d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(mode == CMD_LONG_HELP) {
 80021da:	d135      	bne.n	8002248 <CmdDecode+0x74>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 80021dc:	a803      	add	r0, sp, #12
 80021de:	f7ff fabb 	bl	8001758 <fetch_string_arg>
    if(rc) {
 80021e2:	b168      	cbz	r0, 8002200 <CmdDecode+0x2c>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 80021e4:	488d      	ldr	r0, [pc, #564]	; (800241c <CmdDecode+0x248>)
 80021e6:	f001 fd67 	bl	8003cb8 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 80021ea:	488d      	ldr	r0, [pc, #564]	; (8002420 <CmdDecode+0x24c>)
 80021ec:	f7ff ff96 	bl	800211c <DecodePrintPeripherals>
      printf("\n\n"
 80021f0:	488c      	ldr	r0, [pc, #560]	; (8002424 <CmdDecode+0x250>)
 80021f2:	f001 fd61 	bl	8003cb8 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 80021f6:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 80021f8:	4620      	mov	r0, r4
 80021fa:	b004      	add	sp, #16
 80021fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8002200:	4d87      	ldr	r5, [pc, #540]	; (8002420 <CmdDecode+0x24c>)
 8002202:	e008      	b.n	8002216 <CmdDecode+0x42>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002204:	9c03      	ldr	r4, [sp, #12]
 8002206:	f7ff fe75 	bl	8001ef4 <Uncompress>
 800220a:	4601      	mov	r1, r0
 800220c:	4620      	mov	r0, r4
 800220e:	f001 fe21 	bl	8003e54 <strcasecmp>
 8002212:	b118      	cbz	r0, 800221c <CmdDecode+0x48>
	p++;
 8002214:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002216:	6828      	ldr	r0, [r5, #0]
 8002218:	2800      	cmp	r0, #0
 800221a:	d1f3      	bne.n	8002204 <CmdDecode+0x30>
      if(p->name == NULL) {
 800221c:	682c      	ldr	r4, [r5, #0]
 800221e:	b93c      	cbnz	r4, 8002230 <CmdDecode+0x5c>
	printf("%s is not a valid peripheral name\n"
 8002220:	9903      	ldr	r1, [sp, #12]
 8002222:	4881      	ldr	r0, [pc, #516]	; (8002428 <CmdDecode+0x254>)
 8002224:	f001 fcac 	bl	8003b80 <iprintf>
	DecodePrintPeripherals(Peripherals);
 8002228:	487d      	ldr	r0, [pc, #500]	; (8002420 <CmdDecode+0x24c>)
 800222a:	f7ff ff77 	bl	800211c <DecodePrintPeripherals>
	return CmdReturnOk;
 800222e:	e7e3      	b.n	80021f8 <CmdDecode+0x24>
      printf("Valid registers for peripheral %s:\n"
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff fe5f 	bl	8001ef4 <Uncompress>
 8002236:	4601      	mov	r1, r0
 8002238:	487c      	ldr	r0, [pc, #496]	; (800242c <CmdDecode+0x258>)
 800223a:	f001 fca1 	bl	8003b80 <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 800223e:	89a9      	ldrh	r1, [r5, #12]
 8002240:	68a8      	ldr	r0, [r5, #8]
 8002242:	f7ff ff95 	bl	8002170 <DecodePrintRegisters>
    printf("\n\n");
 8002246:	e009      	b.n	800225c <CmdDecode+0x88>
  rc = fetch_string_arg(&pname);
 8002248:	4668      	mov	r0, sp
 800224a:	f7ff fa85 	bl	8001758 <fetch_string_arg>
  if(rc) {
 800224e:	b180      	cbz	r0, 8002272 <CmdDecode+0x9e>
    printf("Missing peripheral name, please chose one of:\n\n");
 8002250:	4877      	ldr	r0, [pc, #476]	; (8002430 <CmdDecode+0x25c>)
 8002252:	f001 fd31 	bl	8003cb8 <puts>
    DecodePrintPeripherals(Peripherals);
 8002256:	4872      	ldr	r0, [pc, #456]	; (8002420 <CmdDecode+0x24c>)
 8002258:	f7ff ff60 	bl	800211c <DecodePrintPeripherals>
    printf("\n\n");
 800225c:	4875      	ldr	r0, [pc, #468]	; (8002434 <CmdDecode+0x260>)
 800225e:	e7c8      	b.n	80021f2 <CmdDecode+0x1e>
    p++;
 8002260:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002262:	6828      	ldr	r0, [r5, #0]
 8002264:	9c00      	ldr	r4, [sp, #0]
 8002266:	b930      	cbnz	r0, 8002276 <CmdDecode+0xa2>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8002268:	9900      	ldr	r1, [sp, #0]
 800226a:	4873      	ldr	r0, [pc, #460]	; (8002438 <CmdDecode+0x264>)
 800226c:	f001 fc88 	bl	8003b80 <iprintf>
    DecodePrintPeripherals(Peripherals);
 8002270:	e7f1      	b.n	8002256 <CmdDecode+0x82>
  p = Peripherals;
 8002272:	4d6b      	ldr	r5, [pc, #428]	; (8002420 <CmdDecode+0x24c>)
 8002274:	e7f5      	b.n	8002262 <CmdDecode+0x8e>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002276:	f7ff fe3d 	bl	8001ef4 <Uncompress>
 800227a:	4601      	mov	r1, r0
 800227c:	4620      	mov	r0, r4
 800227e:	f001 fde9 	bl	8003e54 <strcasecmp>
 8002282:	4604      	mov	r4, r0
 8002284:	2800      	cmp	r0, #0
 8002286:	d1eb      	bne.n	8002260 <CmdDecode+0x8c>
  if(p->name == NULL) {
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ec      	beq.n	8002268 <CmdDecode+0x94>
  rc = fetch_string_arg(&rname);
 800228e:	a801      	add	r0, sp, #4
 8002290:	f7ff fa62 	bl	8001758 <fetch_string_arg>
  if(rc) {
 8002294:	b120      	cbz	r0, 80022a0 <CmdDecode+0xcc>
    DecodePeripheral(p,0);
 8002296:	4621      	mov	r1, r4
 8002298:	4628      	mov	r0, r5
 800229a:	f7ff ff15 	bl	80020c8 <DecodePeripheral>
    return CmdReturnOk;
 800229e:	e7ab      	b.n	80021f8 <CmdDecode+0x24>
  r = p->registers;
 80022a0:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 80022a2:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 80022a4:	9c01      	ldr	r4, [sp, #4]
 80022a6:	2f00      	cmp	r7, #0
 80022a8:	f000 80a8 	beq.w	80023fc <CmdDecode+0x228>
 80022ac:	6830      	ldr	r0, [r6, #0]
 80022ae:	f7ff fe21 	bl	8001ef4 <Uncompress>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4620      	mov	r0, r4
 80022b6:	f001 fdcd 	bl	8003e54 <strcasecmp>
 80022ba:	3f01      	subs	r7, #1
 80022bc:	4604      	mov	r4, r0
 80022be:	b958      	cbnz	r0, 80022d8 <CmdDecode+0x104>
  rc = fetch_string_arg(&fname);
 80022c0:	a802      	add	r0, sp, #8
 80022c2:	f7ff fa49 	bl	8001758 <fetch_string_arg>
  if(rc == 0) {
 80022c6:	b170      	cbz	r0, 80022e6 <CmdDecode+0x112>
  val = DecodeReadRegister(p,r);
 80022c8:	4631      	mov	r1, r6
 80022ca:	4628      	mov	r0, r5
 80022cc:	f7ff fe50 	bl	8001f70 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80022d0:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80022d2:	4602      	mov	r2, r0
 80022d4:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 80022d6:	e017      	b.n	8002308 <CmdDecode+0x134>
    r++;
 80022d8:	3610      	adds	r6, #16
 80022da:	e7e3      	b.n	80022a4 <CmdDecode+0xd0>
      DecodePeripheral(p,1);
 80022dc:	2101      	movs	r1, #1
 80022de:	4628      	mov	r0, r5
 80022e0:	f7ff fef2 	bl	80020c8 <DecodePeripheral>
      return CmdReturnOk;
 80022e4:	e787      	b.n	80021f6 <CmdDecode+0x22>
    if(strcasecmp(fname,"val") == 0) {
 80022e6:	4955      	ldr	r1, [pc, #340]	; (800243c <CmdDecode+0x268>)
 80022e8:	9802      	ldr	r0, [sp, #8]
 80022ea:	f001 fdb3 	bl	8003e54 <strcasecmp>
 80022ee:	b980      	cbnz	r0, 8002312 <CmdDecode+0x13e>
      rc = fetch_uint32_arg(&val);
 80022f0:	a803      	add	r0, sp, #12
 80022f2:	f7ff fa13 	bl	800171c <fetch_uint32_arg>
      if(rc) {
 80022f6:	4604      	mov	r4, r0
 80022f8:	b120      	cbz	r0, 8002304 <CmdDecode+0x130>
	printf("Missing value to use in decode\n");
 80022fa:	4851      	ldr	r0, [pc, #324]	; (8002440 <CmdDecode+0x26c>)
 80022fc:	f001 fcdc 	bl	8003cb8 <puts>
	return CmdReturnBadParameter4;
 8002300:	2407      	movs	r4, #7
 8002302:	e779      	b.n	80021f8 <CmdDecode+0x24>
      DecodeRegister(r,p->base,val,1);
 8002304:	9a03      	ldr	r2, [sp, #12]
 8002306:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8002308:	6869      	ldr	r1, [r5, #4]
 800230a:	4630      	mov	r0, r6
 800230c:	f7ff feac 	bl	8002068 <DecodeRegister>
  return CmdReturnOk;
 8002310:	e772      	b.n	80021f8 <CmdDecode+0x24>
    f = r->fields;
 8002312:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8002314:	b15f      	cbz	r7, 800232e <CmdDecode+0x15a>
	  && (f->name != NULL)
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	b148      	cbz	r0, 800232e <CmdDecode+0x15a>
	  && strcasecmp(fname,Uncompress(f->name))) {
 800231a:	9c02      	ldr	r4, [sp, #8]
 800231c:	f7ff fdea 	bl	8001ef4 <Uncompress>
 8002320:	4601      	mov	r1, r0
 8002322:	4620      	mov	r0, r4
 8002324:	f001 fd96 	bl	8003e54 <strcasecmp>
 8002328:	b998      	cbnz	r0, 8002352 <CmdDecode+0x17e>
    if((f != NULL) && f->name != NULL) {
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b99b      	cbnz	r3, 8002356 <CmdDecode+0x182>
    errno = 0;
 800232e:	f000 ff8b 	bl	8003248 <__errno>
 8002332:	2700      	movs	r7, #0
 8002334:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002336:	463a      	mov	r2, r7
 8002338:	4639      	mov	r1, r7
 800233a:	9802      	ldr	r0, [sp, #8]
 800233c:	f001 fe7a 	bl	8004034 <strtoul>
 8002340:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8002342:	f000 ff81 	bl	8003248 <__errno>
 8002346:	6804      	ldr	r4, [r0, #0]
 8002348:	2c00      	cmp	r4, #0
 800234a:	d042      	beq.n	80023d2 <CmdDecode+0x1fe>
      printf("Invalid number '%s' entered.\n",
 800234c:	9902      	ldr	r1, [sp, #8]
 800234e:	483d      	ldr	r0, [pc, #244]	; (8002444 <CmdDecode+0x270>)
 8002350:	e00b      	b.n	800236a <CmdDecode+0x196>
      f++;
 8002352:	3708      	adds	r7, #8
 8002354:	e7de      	b.n	8002314 <CmdDecode+0x140>
      rc = fetch_uint32_arg(&val);
 8002356:	a803      	add	r0, sp, #12
 8002358:	f7ff f9e0 	bl	800171c <fetch_uint32_arg>
      if(rc) {
 800235c:	4604      	mov	r4, r0
 800235e:	b138      	cbz	r0, 8002370 <CmdDecode+0x19c>
	printf("Missing Value to program into register %s\n",
 8002360:	6830      	ldr	r0, [r6, #0]
 8002362:	f7ff fdc7 	bl	8001ef4 <Uncompress>
 8002366:	4601      	mov	r1, r0
 8002368:	4837      	ldr	r0, [pc, #220]	; (8002448 <CmdDecode+0x274>)
      printf("Invalid number '%s' entered.\n",
 800236a:	f001 fc09 	bl	8003b80 <iprintf>
      return CmdReturnOk;
 800236e:	e742      	b.n	80021f6 <CmdDecode+0x22>
      t = DecodeReadRegister(p,r);
 8002370:	4631      	mov	r1, r6
 8002372:	4628      	mov	r0, r5
 8002374:	f7ff fdfc 	bl	8001f70 <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002378:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 800237a:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 800237c:	2301      	movs	r3, #1
 800237e:	4093      	lsls	r3, r2
 8002380:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8002382:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 8002386:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 800238a:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 800238e:	9803      	ldr	r0, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8002390:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 8002394:	4003      	ands	r3, r0
 8002396:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002398:	431a      	orrs	r2, r3
 800239a:	4631      	mov	r1, r6
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff fe11 	bl	8001fc4 <DecodeWriteRegister>
      printf("%s.",
 80023a2:	6828      	ldr	r0, [r5, #0]
 80023a4:	f7ff fda6 	bl	8001ef4 <Uncompress>
 80023a8:	4601      	mov	r1, r0
 80023aa:	4828      	ldr	r0, [pc, #160]	; (800244c <CmdDecode+0x278>)
 80023ac:	f001 fbe8 	bl	8003b80 <iprintf>
      printf("%s.",
 80023b0:	6830      	ldr	r0, [r6, #0]
 80023b2:	f7ff fd9f 	bl	8001ef4 <Uncompress>
 80023b6:	4601      	mov	r1, r0
 80023b8:	4824      	ldr	r0, [pc, #144]	; (800244c <CmdDecode+0x278>)
 80023ba:	f001 fbe1 	bl	8003b80 <iprintf>
      printf("%s (%d) -> (%d)\n",
 80023be:	6838      	ldr	r0, [r7, #0]
 80023c0:	f7ff fd98 	bl	8001ef4 <Uncompress>
 80023c4:	9b03      	ldr	r3, [sp, #12]
 80023c6:	4601      	mov	r1, r0
 80023c8:	4642      	mov	r2, r8
 80023ca:	4821      	ldr	r0, [pc, #132]	; (8002450 <CmdDecode+0x27c>)
 80023cc:	f001 fbd8 	bl	8003b80 <iprintf>
      return CmdReturnOk;
 80023d0:	e712      	b.n	80021f8 <CmdDecode+0x24>
    DecodeWriteRegister(p,r,val);
 80023d2:	9a03      	ldr	r2, [sp, #12]
 80023d4:	4631      	mov	r1, r6
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7ff fdf4 	bl	8001fc4 <DecodeWriteRegister>
    printf("%s.",
 80023dc:	6828      	ldr	r0, [r5, #0]
 80023de:	f7ff fd89 	bl	8001ef4 <Uncompress>
 80023e2:	4601      	mov	r1, r0
 80023e4:	4819      	ldr	r0, [pc, #100]	; (800244c <CmdDecode+0x278>)
 80023e6:	f001 fbcb 	bl	8003b80 <iprintf>
    printf("%s = 0x%08x\n",
 80023ea:	6830      	ldr	r0, [r6, #0]
 80023ec:	f7ff fd82 	bl	8001ef4 <Uncompress>
 80023f0:	9a03      	ldr	r2, [sp, #12]
 80023f2:	4601      	mov	r1, r0
 80023f4:	4817      	ldr	r0, [pc, #92]	; (8002454 <CmdDecode+0x280>)
 80023f6:	f001 fbc3 	bl	8003b80 <iprintf>
    return CmdReturnOk;
 80023fa:	e6fd      	b.n	80021f8 <CmdDecode+0x24>
    if(strcasecmp(rname,"full") == 0) {
 80023fc:	4916      	ldr	r1, [pc, #88]	; (8002458 <CmdDecode+0x284>)
 80023fe:	4620      	mov	r0, r4
 8002400:	f001 fd28 	bl	8003e54 <strcasecmp>
 8002404:	2800      	cmp	r0, #0
 8002406:	f43f af69 	beq.w	80022dc <CmdDecode+0x108>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 800240a:	6828      	ldr	r0, [r5, #0]
 800240c:	f7ff fd72 	bl	8001ef4 <Uncompress>
 8002410:	4621      	mov	r1, r4
 8002412:	4602      	mov	r2, r0
 8002414:	4811      	ldr	r0, [pc, #68]	; (800245c <CmdDecode+0x288>)
 8002416:	f001 fbb3 	bl	8003b80 <iprintf>
 800241a:	e710      	b.n	800223e <CmdDecode+0x6a>
 800241c:	080121ed 	.word	0x080121ed
 8002420:	0800e208 	.word	0x0800e208
 8002424:	08012400 	.word	0x08012400
 8002428:	08012455 	.word	0x08012455
 800242c:	08012490 	.word	0x08012490
 8002430:	080124b5 	.word	0x080124b5
 8002434:	0801251e 	.word	0x0801251e
 8002438:	080124e4 	.word	0x080124e4
 800243c:	0801255d 	.word	0x0801255d
 8002440:	08012561 	.word	0x08012561
 8002444:	080125c0 	.word	0x080125c0
 8002448:	08012580 	.word	0x08012580
 800244c:	080125ab 	.word	0x080125ab
 8002450:	080125af 	.word	0x080125af
 8002454:	080125de 	.word	0x080125de
 8002458:	080125eb 	.word	0x080125eb
 800245c:	08012520 	.word	0x08012520

08002460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002460:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002462:	2400      	movs	r4, #0
{
 8002464:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002466:	4621      	mov	r1, r4
 8002468:	2214      	movs	r2, #20
 800246a:	a803      	add	r0, sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8002470:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002472:	f000 ff13 	bl	800329c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <SystemClock_Config+0x94>)
 8002478:	9401      	str	r4, [sp, #4]
 800247a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <SystemClock_Config+0x98>)
 800248e:	9402      	str	r4, [sp, #8]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800249e:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024a0:	2209      	movs	r2, #9
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ac:	2402      	movs	r4, #2
 80024ae:	2301      	movs	r3, #1
 80024b0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80024b8:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 80024ba:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024bc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024be:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c2:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c8:	f000 f92c 	bl	8002724 <HAL_RCC_OscConfig>
 80024cc:	b108      	cbz	r0, 80024d2 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 80024ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024dc:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e0:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024e2:	2103      	movs	r1, #3
 80024e4:	a803      	add	r0, sp, #12
 80024e6:	f000 fafb 	bl	8002ae0 <HAL_RCC_ClockConfig>
 80024ea:	b108      	cbz	r0, 80024f0 <SystemClock_Config+0x90>
 80024ec:	b672      	cpsid	i
  while (1)
 80024ee:	e7fe      	b.n	80024ee <SystemClock_Config+0x8e>
}
 80024f0:	b014      	add	sp, #80	; 0x50
 80024f2:	bd10      	pop	{r4, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000

080024fc <main>:
{
 80024fc:	b500      	push	{lr}
 80024fe:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002500:	f000 fbce 	bl	8002ca0 <HAL_Init>
  SystemClock_Config();
 8002504:	f7ff ffac 	bl	8002460 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	2214      	movs	r2, #20
 800250a:	2100      	movs	r1, #0
 800250c:	eb0d 0002 	add.w	r0, sp, r2
 8002510:	f000 fec4 	bl	800329c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	2400      	movs	r4, #0
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <main+0xec>)
 8002518:	9401      	str	r4, [sp, #4]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800251c:	4833      	ldr	r0, [pc, #204]	; (80025ec <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	f042 0204 	orr.w	r2, r2, #4
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
 8002524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002526:	f002 0204 	and.w	r2, r2, #4
 800252a:	9201      	str	r2, [sp, #4]
 800252c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252e:	9402      	str	r4, [sp, #8]
 8002530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
 8002538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800253e:	9202      	str	r2, [sp, #8]
 8002540:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	9403      	str	r4, [sp, #12]
 8002544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
 800254c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254e:	f002 0201 	and.w	r2, r2, #1
 8002552:	9203      	str	r2, [sp, #12]
 8002554:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	9404      	str	r4, [sp, #16]
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	f042 0202 	orr.w	r2, r2, #2
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002566:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002568:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800256a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800256e:	f000 fd7d 	bl	800306c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002572:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800257a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800257e:	481c      	ldr	r0, [pc, #112]	; (80025f0 <main+0xf4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002582:	a905      	add	r1, sp, #20
 8002584:	f000 fcaa 	bl	8002edc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	2020      	movs	r0, #32
 800258c:	e9cd 0305 	strd	r0, r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002590:	a905      	add	r1, sp, #20
 8002592:	4816      	ldr	r0, [pc, #88]	; (80025ec <main+0xf0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002598:	f000 fca0 	bl	8002edc <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800259c:	4815      	ldr	r0, [pc, #84]	; (80025f4 <main+0xf8>)
  huart2.Init.BaudRate = 115200;
 800259e:	f8df c060 	ldr.w	ip, [pc, #96]	; 8002600 <main+0x104>
  huart2.Init.Parity = UART_PARITY_NONE;
 80025a2:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80025a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80025a8:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025ac:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b2:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025b8:	f000 fc62 	bl	8002e80 <HAL_UART_Init>
 80025bc:	b108      	cbz	r0, 80025c2 <main+0xc6>
 80025be:	b672      	cpsid	i
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <main+0xc4>
  hiwdg.Instance = IWDG;
 80025c2:	480d      	ldr	r0, [pc, #52]	; (80025f8 <main+0xfc>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <main+0x100>)
 80025c6:	2304      	movs	r3, #4
 80025c8:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Reload = 4095;
 80025cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80025d0:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80025d2:	f000 fd50 	bl	8003076 <HAL_IWDG_Init>
 80025d6:	b108      	cbz	r0, 80025dc <main+0xe0>
 80025d8:	b672      	cpsid	i
  while (1)
 80025da:	e7fe      	b.n	80025da <main+0xde>
  my_init();
 80025dc:	f7fe fcb4 	bl	8000f48 <my_init>
    my_main();
 80025e0:	f7fe fcbd 	bl	8000f5e <my_main>
  while (1)
 80025e4:	e7fc      	b.n	80025e0 <main+0xe4>
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020800 	.word	0x40020800
 80025f4:	20000d00 	.word	0x20000d00
 80025f8:	20000cf4 	.word	0x20000cf4
 80025fc:	40003000 	.word	0x40003000
 8002600:	40004400 	.word	0x40004400

08002604 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler>

08002606 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <HardFault_Handler>

08002608 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <MemManage_Handler>

0800260a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <BusFault_Handler>

0800260c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <UsageFault_Handler>

0800260e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:
 8002610:	4770      	bx	lr

08002612 <PendSV_Handler>:
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002616:	f000 fb5d 	bl	8002cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 800261a:	f7fd fdeb 	bl	80001f4 <my_Tick>
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 800261e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TaskingTickHandler();
 8002622:	f7ff bbff 	b.w	8001e24 <TaskingTickHandler>
	...

08002628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_MspInit+0x38>)
 800262c:	2100      	movs	r1, #0
 800262e:	9100      	str	r1, [sp, #0]
 8002630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
 8002638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800263e:	9200      	str	r2, [sp, #0]
 8002640:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	9101      	str	r1, [sp, #4]
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002656:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002658:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800265a:	f000 bb4d 	b.w	8002cf8 <HAL_NVIC_SetPriorityGrouping>
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8002664:	6802      	ldr	r2, [r0, #0]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_TIM_Base_MspInit+0x28>)
 8002668:	429a      	cmp	r2, r3
{
 800266a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM11)
 800266c:	d10b      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_TIM_Base_MspInit+0x2c>)
 8002674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002676:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002686:	b002      	add	sp, #8
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40014800 	.word	0x40014800
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b510      	push	{r4, lr}
 8002696:	4604      	mov	r4, r0
 8002698:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269a:	2214      	movs	r2, #20
 800269c:	2100      	movs	r1, #0
 800269e:	a803      	add	r0, sp, #12
 80026a0:	f000 fdfc 	bl	800329c <memset>
  if(huart->Instance==USART2)
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_UART_MspInit+0x74>)
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d12a      	bne.n	8002702 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80026b0:	2400      	movs	r4, #0
 80026b2:	9401      	str	r4, [sp, #4]
 80026b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	4815      	ldr	r0, [pc, #84]	; (800270c <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
 80026be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80026c4:	9201      	str	r2, [sp, #4]
 80026c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	9402      	str	r4, [sp, #8]
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e4:	2103      	movs	r1, #3
 80026e6:	2307      	movs	r3, #7
 80026e8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	a903      	add	r1, sp, #12
 80026ee:	f000 fbf5 	bl	8002edc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026f2:	2026      	movs	r0, #38	; 0x26
 80026f4:	4622      	mov	r2, r4
 80026f6:	4621      	mov	r1, r4
 80026f8:	f000 fb10 	bl	8002d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026fc:	2026      	movs	r0, #38	; 0x26
 80026fe:	f000 fb3f 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002702:	b008      	add	sp, #32
 8002704:	bd10      	pop	{r4, pc}
 8002706:	bf00      	nop
 8002708:	40004400 	.word	0x40004400
 800270c:	40020000 	.word	0x40020000

08002710 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002710:	4a03      	ldr	r2, [pc, #12]	; (8002720 <SystemInit+0x10>)
 8002712:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	4604      	mov	r4, r0
 800272a:	b340      	cbz	r0, 800277e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272c:	6803      	ldr	r3, [r0, #0]
 800272e:	07dd      	lsls	r5, r3, #31
 8002730:	d410      	bmi.n	8002754 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	0798      	lsls	r0, r3, #30
 8002736:	d45e      	bmi.n	80027f6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	071a      	lsls	r2, r3, #28
 800273c:	f100 80a0 	bmi.w	8002880 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	075b      	lsls	r3, r3, #29
 8002744:	f100 80c0 	bmi.w	80028c8 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002748:	69a0      	ldr	r0, [r4, #24]
 800274a:	2800      	cmp	r0, #0
 800274c:	f040 8128 	bne.w	80029a0 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002750:	2000      	movs	r0, #0
 8002752:	e02b      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002754:	4b8f      	ldr	r3, [pc, #572]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	f002 020c 	and.w	r2, r2, #12
 800275c:	2a04      	cmp	r2, #4
 800275e:	d007      	beq.n	8002770 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	2a08      	cmp	r2, #8
 8002768:	d10b      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	0251      	lsls	r1, r2, #9
 800276e:	d508      	bpl.n	8002782 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	039a      	lsls	r2, r3, #14
 8002776:	d5dc      	bpl.n	8002732 <HAL_RCC_OscConfig+0xe>
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1d9      	bne.n	8002732 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800277e:	2001      	movs	r0, #1
 8002780:	e014      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002782:	6862      	ldr	r2, [r4, #4]
 8002784:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002788:	d113      	bne.n	80027b2 <HAL_RCC_OscConfig+0x8e>
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002790:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002792:	f000 faab 	bl	8002cec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4e7f      	ldr	r6, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002798:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	6833      	ldr	r3, [r6, #0]
 800279c:	039b      	lsls	r3, r3, #14
 800279e:	d4c8      	bmi.n	8002732 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f000 faa4 	bl	8002cec <HAL_GetTick>
 80027a4:	1b40      	subs	r0, r0, r5
 80027a6:	2864      	cmp	r0, #100	; 0x64
 80027a8:	d9f7      	bls.n	800279a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80027aa:	2003      	movs	r0, #3
}
 80027ac:	b002      	add	sp, #8
 80027ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b2:	4d78      	ldr	r5, [pc, #480]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 80027b4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0xa8>
 80027bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c0:	602b      	str	r3, [r5, #0]
 80027c2:	682b      	ldr	r3, [r5, #0]
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ca:	e7e2      	b.n	8002792 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	602b      	str	r3, [r5, #0]
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027da:	2a00      	cmp	r2, #0
 80027dc:	d1d9      	bne.n	8002792 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80027de:	f000 fa85 	bl	8002cec <HAL_GetTick>
 80027e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	039f      	lsls	r7, r3, #14
 80027e8:	d5a3      	bpl.n	8002732 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ea:	f000 fa7f 	bl	8002cec <HAL_GetTick>
 80027ee:	1b80      	subs	r0, r0, r6
 80027f0:	2864      	cmp	r0, #100	; 0x64
 80027f2:	d9f7      	bls.n	80027e4 <HAL_RCC_OscConfig+0xc0>
 80027f4:	e7d9      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	f012 0f0c 	tst.w	r2, #12
 80027fe:	d007      	beq.n	8002810 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	2a08      	cmp	r2, #8
 8002808:	d111      	bne.n	800282e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	025e      	lsls	r6, r3, #9
 800280e:	d40e      	bmi.n	800282e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002810:	4a60      	ldr	r2, [pc, #384]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	079d      	lsls	r5, r3, #30
 8002816:	d502      	bpl.n	800281e <HAL_RCC_OscConfig+0xfa>
 8002818:	68e3      	ldr	r3, [r4, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d1af      	bne.n	800277e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	6813      	ldr	r3, [r2, #0]
 8002820:	6921      	ldr	r1, [r4, #16]
 8002822:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002826:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800282a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282c:	e784      	b.n	8002738 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800282e:	68e2      	ldr	r2, [r4, #12]
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002832:	b1b2      	cbz	r2, 8002862 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002838:	f000 fa58 	bl	8002cec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	4d55      	ldr	r5, [pc, #340]	; (8002994 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800283e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	0798      	lsls	r0, r3, #30
 8002844:	d507      	bpl.n	8002856 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	6922      	ldr	r2, [r4, #16]
 800284a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800284e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002852:	602b      	str	r3, [r5, #0]
 8002854:	e770      	b.n	8002738 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002856:	f000 fa49 	bl	8002cec <HAL_GetTick>
 800285a:	1b80      	subs	r0, r0, r6
 800285c:	2802      	cmp	r0, #2
 800285e:	d9ef      	bls.n	8002840 <HAL_RCC_OscConfig+0x11c>
 8002860:	e7a3      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002862:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002864:	f000 fa42 	bl	8002cec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002868:	4e4a      	ldr	r6, [pc, #296]	; (8002994 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800286a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	0799      	lsls	r1, r3, #30
 8002870:	f57f af62 	bpl.w	8002738 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f000 fa3a 	bl	8002cec <HAL_GetTick>
 8002878:	1b40      	subs	r0, r0, r5
 800287a:	2802      	cmp	r0, #2
 800287c:	d9f6      	bls.n	800286c <HAL_RCC_OscConfig+0x148>
 800287e:	e794      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002880:	6962      	ldr	r2, [r4, #20]
 8002882:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002884:	b182      	cbz	r2, 80028a8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002886:	2201      	movs	r2, #1
 8002888:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800288c:	f000 fa2e 	bl	8002cec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002890:	4e40      	ldr	r6, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002892:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002894:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002896:	079f      	lsls	r7, r3, #30
 8002898:	f53f af52 	bmi.w	8002740 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289c:	f000 fa26 	bl	8002cec <HAL_GetTick>
 80028a0:	1b40      	subs	r0, r0, r5
 80028a2:	2802      	cmp	r0, #2
 80028a4:	d9f6      	bls.n	8002894 <HAL_RCC_OscConfig+0x170>
 80028a6:	e780      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80028a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80028ac:	f000 fa1e 	bl	8002cec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4e38      	ldr	r6, [pc, #224]	; (8002994 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80028b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80028b6:	0798      	lsls	r0, r3, #30
 80028b8:	f57f af42 	bpl.w	8002740 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f000 fa16 	bl	8002cec <HAL_GetTick>
 80028c0:	1b40      	subs	r0, r0, r5
 80028c2:	2802      	cmp	r0, #2
 80028c4:	d9f6      	bls.n	80028b4 <HAL_RCC_OscConfig+0x190>
 80028c6:	e770      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80028d0:	d128      	bne.n	8002924 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	9201      	str	r2, [sp, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028e6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4d2c      	ldr	r5, [pc, #176]	; (800299c <HAL_RCC_OscConfig+0x278>)
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	05d9      	lsls	r1, r3, #23
 80028ee:	d51b      	bpl.n	8002928 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	68a3      	ldr	r3, [r4, #8]
 80028f2:	4d28      	ldr	r5, [pc, #160]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d127      	bne.n	8002948 <HAL_RCC_OscConfig+0x224>
 80028f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002900:	f000 f9f4 	bl	8002cec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	4e23      	ldr	r6, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002906:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800290e:	079b      	lsls	r3, r3, #30
 8002910:	d539      	bpl.n	8002986 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002912:	2f00      	cmp	r7, #0
 8002914:	f43f af18 	beq.w	8002748 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 800291a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	e711      	b.n	8002748 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002924:	2700      	movs	r7, #0
 8002926:	e7df      	b.n	80028e8 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002930:	f000 f9dc 	bl	8002cec <HAL_GetTick>
 8002934:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	05da      	lsls	r2, r3, #23
 800293a:	d4d9      	bmi.n	80028f0 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f000 f9d6 	bl	8002cec <HAL_GetTick>
 8002940:	1b80      	subs	r0, r0, r6
 8002942:	2802      	cmp	r0, #2
 8002944:	d9f7      	bls.n	8002936 <HAL_RCC_OscConfig+0x212>
 8002946:	e730      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	2b05      	cmp	r3, #5
 800294a:	d104      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
 800294c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	672b      	str	r3, [r5, #112]	; 0x70
 8002954:	e7d0      	b.n	80028f8 <HAL_RCC_OscConfig+0x1d4>
 8002956:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	672a      	str	r2, [r5, #112]	; 0x70
 800295e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002960:	f022 0204 	bic.w	r2, r2, #4
 8002964:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ca      	bne.n	8002900 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800296a:	f000 f9bf 	bl	8002cec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002972:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002976:	0798      	lsls	r0, r3, #30
 8002978:	d5cb      	bpl.n	8002912 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f000 f9b7 	bl	8002cec <HAL_GetTick>
 800297e:	1b80      	subs	r0, r0, r6
 8002980:	4540      	cmp	r0, r8
 8002982:	d9f7      	bls.n	8002974 <HAL_RCC_OscConfig+0x250>
 8002984:	e711      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f000 f9b1 	bl	8002cec <HAL_GetTick>
 800298a:	1b40      	subs	r0, r0, r5
 800298c:	4540      	cmp	r0, r8
 800298e:	d9bd      	bls.n	800290c <HAL_RCC_OscConfig+0x1e8>
 8002990:	e70b      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	42470000 	.word	0x42470000
 800299c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a0:	4d36      	ldr	r5, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x358>)
 80029a2:	68ab      	ldr	r3, [r5, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d03d      	beq.n	8002a28 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x35c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80029b2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	d12b      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 80029b6:	f000 f999 	bl	8002cec <HAL_GetTick>
 80029ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	0199      	lsls	r1, r3, #6
 80029c0:	d41f      	bmi.n	8002a02 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029de:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4d26      	ldr	r5, [pc, #152]	; (8002a7c <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80029e4:	2201      	movs	r2, #1
 80029e6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80029e8:	f000 f980 	bl	8002cec <HAL_GetTick>
 80029ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	682b      	ldr	r3, [r5, #0]
 80029f0:	019a      	lsls	r2, r3, #6
 80029f2:	f53f aead 	bmi.w	8002750 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f000 f979 	bl	8002cec <HAL_GetTick>
 80029fa:	1b00      	subs	r0, r0, r4
 80029fc:	2802      	cmp	r0, #2
 80029fe:	d9f6      	bls.n	80029ee <HAL_RCC_OscConfig+0x2ca>
 8002a00:	e6d3      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f000 f973 	bl	8002cec <HAL_GetTick>
 8002a06:	1b80      	subs	r0, r0, r6
 8002a08:	2802      	cmp	r0, #2
 8002a0a:	d9d7      	bls.n	80029bc <HAL_RCC_OscConfig+0x298>
 8002a0c:	e6cd      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002a0e:	f000 f96d 	bl	8002cec <HAL_GetTick>
 8002a12:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	682b      	ldr	r3, [r5, #0]
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	f57f ae9a 	bpl.w	8002750 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f000 f966 	bl	8002cec <HAL_GetTick>
 8002a20:	1b00      	subs	r0, r0, r4
 8002a22:	2802      	cmp	r0, #2
 8002a24:	d9f6      	bls.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
 8002a26:	e6c0      	b.n	80027aa <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	2801      	cmp	r0, #1
 8002a2a:	f43f aebf 	beq.w	80027ac <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002a2e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a36:	4291      	cmp	r1, r2
 8002a38:	f47f aea1 	bne.w	800277e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	428a      	cmp	r2, r1
 8002a44:	f47f ae9b 	bne.w	800277e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a48:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002a4e:	401a      	ands	r2, r3
 8002a50:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002a54:	f47f ae93 	bne.w	800277e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a5a:	0852      	lsrs	r2, r2, #1
 8002a5c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002a60:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a62:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002a66:	f47f ae8a 	bne.w	800277e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a6c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002a74:	f43f ae6c 	beq.w	8002750 <HAL_RCC_OscConfig+0x2c>
 8002a78:	e681      	b.n	800277e <HAL_RCC_OscConfig+0x5a>
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470000 	.word	0x42470000

08002a84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a84:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002a86:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a88:	688b      	ldr	r3, [r1, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d01c      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x48>
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a96:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a98:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa0:	bf14      	ite	ne
 8002aa2:	480d      	ldrne	r0, [pc, #52]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa4:	480d      	ldreq	r0, [pc, #52]	; (8002adc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002aaa:	bf18      	it	ne
 8002aac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab2:	fba1 0100 	umull	r0, r1, r1, r0
 8002ab6:	f7fd fbad 	bl	8000214 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x50>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002ac6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002aca:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x54>)
 8002ace:	e7fc      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002ad2:	e7fa      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x46>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	007a1200 	.word	0x007a1200
 8002adc:	00f42400 	.word	0x00f42400

08002ae0 <HAL_RCC_ClockConfig>:
{
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	b910      	cbnz	r0, 8002af0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002aea:	2001      	movs	r0, #1
}
 8002aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <HAL_RCC_ClockConfig+0x124>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	f002 0207 	and.w	r2, r2, #7
 8002af8:	428a      	cmp	r2, r1
 8002afa:	d328      	bcc.n	8002b4e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	6822      	ldr	r2, [r4, #0]
 8002afe:	0797      	lsls	r7, r2, #30
 8002b00:	d42d      	bmi.n	8002b5e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b02:	07d0      	lsls	r0, r2, #31
 8002b04:	d441      	bmi.n	8002b8a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_ClockConfig+0x124>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f002 0207 	and.w	r2, r2, #7
 8002b0e:	42aa      	cmp	r2, r5
 8002b10:	d866      	bhi.n	8002be0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	0751      	lsls	r1, r2, #29
 8002b16:	d46c      	bmi.n	8002bf2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	0713      	lsls	r3, r2, #28
 8002b1a:	d507      	bpl.n	8002b2c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1c:	4a3a      	ldr	r2, [pc, #232]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002b1e:	6921      	ldr	r1, [r4, #16]
 8002b20:	6893      	ldr	r3, [r2, #8]
 8002b22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b2a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2c:	f7ff ffaa 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002b32:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <HAL_RCC_ClockConfig+0x12c>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	40d8      	lsrs	r0, r3
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_ClockConfig+0x130>)
 8002b40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_ClockConfig+0x134>)
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	f000 f887 	bl	8002c58 <HAL_InitTick>
  return HAL_OK;
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e7ce      	b.n	8002aec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	d1c6      	bne.n	8002aea <HAL_RCC_ClockConfig+0xa>
 8002b5c:	e7ce      	b.n	8002afc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002b60:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	bf1e      	ittt	ne
 8002b66:	6899      	ldrne	r1, [r3, #8]
 8002b68:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002b6c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b70:	bf42      	ittt	mi
 8002b72:	6899      	ldrmi	r1, [r3, #8]
 8002b74:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002b78:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7a:	4923      	ldr	r1, [pc, #140]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002b7c:	68a0      	ldr	r0, [r4, #8]
 8002b7e:	688b      	ldr	r3, [r1, #8]
 8002b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b84:	4303      	orrs	r3, r0
 8002b86:	608b      	str	r3, [r1, #8]
 8002b88:	e7bb      	b.n	8002b02 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	6862      	ldr	r2, [r4, #4]
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002b8e:	2a01      	cmp	r2, #1
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	d0a7      	beq.n	8002aea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4e1b      	ldr	r6, [pc, #108]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002b9c:	68b3      	ldr	r3, [r6, #8]
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ba6:	f000 f8a1 	bl	8002cec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002baa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002bae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb0:	68b3      	ldr	r3, [r6, #8]
 8002bb2:	6862      	ldr	r2, [r4, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bbc:	d0a3      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f000 f895 	bl	8002cec <HAL_GetTick>
 8002bc2:	1bc0      	subs	r0, r0, r7
 8002bc4:	4540      	cmp	r0, r8
 8002bc6:	d9f3      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002bc8:	2003      	movs	r0, #3
 8002bca:	e78f      	b.n	8002aec <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bcc:	1e91      	subs	r1, r2, #2
 8002bce:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	d802      	bhi.n	8002bda <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bd8:	e7de      	b.n	8002b98 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	f013 0f02 	tst.w	r3, #2
 8002bde:	e7db      	b.n	8002b98 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be0:	b2ea      	uxtb	r2, r5
 8002be2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	42ab      	cmp	r3, r5
 8002bec:	f47f af7d 	bne.w	8002aea <HAL_RCC_ClockConfig+0xa>
 8002bf0:	e78f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf2:	4905      	ldr	r1, [pc, #20]	; (8002c08 <HAL_RCC_ClockConfig+0x128>)
 8002bf4:	68e0      	ldr	r0, [r4, #12]
 8002bf6:	688b      	ldr	r3, [r1, #8]
 8002bf8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	608b      	str	r3, [r1, #8]
 8002c00:	e78a      	b.n	8002b18 <HAL_RCC_ClockConfig+0x38>
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08012611 	.word	0x08012611
 8002c10:	200001a8 	.word	0x200001a8
 8002c14:	200001b0 	.word	0x200001b0

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c1a:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c26:	6810      	ldr	r0, [r2, #0]
}
 8002c28:	40d8      	lsrs	r0, r3
 8002c2a:	4770      	bx	lr
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08012621 	.word	0x08012621
 8002c34:	200001a8 	.word	0x200001a8

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	4a03      	ldr	r2, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c46:	6810      	ldr	r0, [r2, #0]
}
 8002c48:	40d8      	lsrs	r0, r3
 8002c4a:	4770      	bx	lr
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	08012621 	.word	0x08012621
 8002c54:	200001a8 	.word	0x200001a8

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_InitTick+0x3c>)
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_InitTick+0x40>)
{
 8002c5e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c60:	7818      	ldrb	r0, [r3, #0]
 8002c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c66:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c6a:	6810      	ldr	r0, [r2, #0]
 8002c6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c70:	f000 f894 	bl	8002d9c <HAL_SYSTICK_Config>
 8002c74:	4604      	mov	r4, r0
 8002c76:	b958      	cbnz	r0, 8002c90 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c78:	2d0f      	cmp	r5, #15
 8002c7a:	d809      	bhi.n	8002c90 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4629      	mov	r1, r5
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c84:	f000 f84a 	bl	8002d1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_InitTick+0x44>)
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002c90:	2001      	movs	r0, #1
 8002c92:	e7fc      	b.n	8002c8e <HAL_InitTick+0x36>
 8002c94:	200001a8 	.word	0x200001a8
 8002c98:	200001ac 	.word	0x200001ac
 8002c9c:	200001b0 	.word	0x200001b0

08002ca0 <HAL_Init>:
{
 8002ca0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_Init+0x30>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002caa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f000 f81b 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7ff ffc8 	bl	8002c58 <HAL_InitTick>
  HAL_MspInit();
 8002cc8:	f7ff fcae 	bl	8002628 <HAL_MspInit>
}
 8002ccc:	2000      	movs	r0, #0
 8002cce:	bd08      	pop	{r3, pc}
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_IncTick+0x10>)
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_IncTick+0x14>)
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	440b      	add	r3, r1
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000d44 	.word	0x20000d44
 8002ce8:	200001ac 	.word	0x200001ac

08002cec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cec:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <HAL_GetTick+0x8>)
 8002cee:	6818      	ldr	r0, [r3, #0]
}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000d44 	.word	0x20000d44

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002cfa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d08:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1e:	b530      	push	{r4, r5, lr}
 8002d20:	68dc      	ldr	r4, [r3, #12]
 8002d22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d26:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	2d04      	cmp	r5, #4
 8002d2e:	bf28      	it	cs
 8002d30:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d38:	bf8c      	ite	hi
 8002d3a:	3c03      	subhi	r4, #3
 8002d3c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3e:	fa03 f505 	lsl.w	r5, r3, r5
 8002d42:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d46:	40a3      	lsls	r3, r4
 8002d48:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	bfac      	ite	ge
 8002d56:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	4a08      	ldrlt	r2, [pc, #32]	; (8002d7c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	bfb8      	it	lt
 8002d62:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	bfaa      	itet	ge
 8002d6a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d74:	bd30      	pop	{r4, r5, pc}
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00
 8002d7c:	e000ed14 	.word	0xe000ed14

08002d80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d80:	2800      	cmp	r0, #0
 8002d82:	db08      	blt.n	8002d96 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d84:	0942      	lsrs	r2, r0, #5
 8002d86:	2301      	movs	r3, #1
 8002d88:	f000 001f 	and.w	r0, r0, #31
 8002d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <HAL_NVIC_EnableIRQ+0x18>)
 8002d92:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	3801      	subs	r0, #1
 8002d9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002da2:	d20b      	bcs.n	8002dbc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002daa:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	21f0      	movs	r1, #240	; 0xf0
 8002dae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dbc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	68c1      	ldr	r1, [r0, #12]
 8002dc8:	6913      	ldr	r3, [r2, #16]
 8002dca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dce:	430b      	orrs	r3, r1
{
 8002dd0:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd2:	6113      	str	r3, [r2, #16]
{
 8002dd4:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd6:	6883      	ldr	r3, [r0, #8]
 8002dd8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002dda:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ddc:	4303      	orrs	r3, r0
 8002dde:	6968      	ldr	r0, [r5, #20]
 8002de0:	4303      	orrs	r3, r0
 8002de2:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002de4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002de8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dec:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002dee:	430b      	orrs	r3, r1
 8002df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df2:	6953      	ldr	r3, [r2, #20]
 8002df4:	69a9      	ldr	r1, [r5, #24]
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <UART_SetConfig+0xb8>)
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d003      	beq.n	8002e0c <UART_SetConfig+0x48>
 8002e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d123      	bne.n	8002e54 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e0c:	f7ff ff14 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e10:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e12:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e18:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002e1c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e20:	d11b      	bne.n	8002e5a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e22:	19b2      	adds	r2, r6, r6
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	f7fd f9f3 	bl	8000214 <__aeabi_uldivmod>
 8002e2e:	2164      	movs	r1, #100	; 0x64
 8002e30:	fbb0 f5f1 	udiv	r5, r0, r1
 8002e34:	fb01 0315 	mls	r3, r1, r5, r0
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e40:	f003 0207 	and.w	r2, r3, #7
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002e4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e4e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e50:	60a3      	str	r3, [r4, #8]
  }
}
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7ff fee0 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8002e58:	e7da      	b.n	8002e10 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e5a:	00b2      	lsls	r2, r6, #2
 8002e5c:	0fb3      	lsrs	r3, r6, #30
 8002e5e:	f7fd f9d9 	bl	8000214 <__aeabi_uldivmod>
 8002e62:	2264      	movs	r2, #100	; 0x64
 8002e64:	fbb0 f1f2 	udiv	r1, r0, r2
 8002e68:	fb02 0311 	mls	r3, r2, r1, r0
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	3332      	adds	r3, #50	; 0x32
 8002e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002e78:	e7ea      	b.n	8002e50 <UART_SetConfig+0x8c>
 8002e7a:	bf00      	nop
 8002e7c:	40011000 	.word	0x40011000

08002e80 <HAL_UART_Init>:
{
 8002e80:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e82:	4604      	mov	r4, r0
 8002e84:	b340      	cbz	r0, 8002ed8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e8e:	b91b      	cbnz	r3, 8002e98 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002e94:	f7ff fbfe 	bl	8002694 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002e98:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e9a:	2324      	movs	r3, #36	; 0x24
 8002e9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002ea0:	68d3      	ldr	r3, [r2, #12]
 8002ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ea6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff ff8b 	bl	8002dc4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ebe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002eca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ece:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002ed6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
 8002eda:	e7fc      	b.n	8002ed6 <HAL_UART_Init+0x56>

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8003068 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4a5e      	ldr	r2, [pc, #376]	; (8003060 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002eea:	2401      	movs	r4, #1
 8002eec:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eee:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002ef2:	43ac      	bics	r4, r5
 8002ef4:	f040 80a5 	bne.w	8003042 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef8:	684d      	ldr	r5, [r1, #4]
 8002efa:	f005 0403 	and.w	r4, r5, #3
 8002efe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f02:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f04:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f06:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f0c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f10:	d834      	bhi.n	8002f7c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002f12:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f14:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f18:	68cf      	ldr	r7, [r1, #12]
 8002f1a:	fa07 f708 	lsl.w	r7, r7, r8
 8002f1e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002f22:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f24:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f26:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002f2e:	409f      	lsls	r7, r3
 8002f30:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002f34:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002f36:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f38:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3c:	688f      	ldr	r7, [r1, #8]
 8002f3e:	fa07 f708 	lsl.w	r7, r7, r8
 8002f42:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f46:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002f48:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	d119      	bne.n	8002f80 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002f4c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002f50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f54:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002f58:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002f60:	f04f 0e0f 	mov.w	lr, #15
 8002f64:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002f68:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f6c:	690f      	ldr	r7, [r1, #16]
 8002f6e:	fa07 f70b 	lsl.w	r7, r7, fp
 8002f72:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002f76:	f8ca 7020 	str.w	r7, [sl, #32]
 8002f7a:	e001      	b.n	8002f80 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7c:	2c03      	cmp	r4, #3
 8002f7e:	d1da      	bne.n	8002f36 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002f80:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f82:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f86:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f8a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002f8e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f90:	d057      	beq.n	8003042 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	f04f 0a00 	mov.w	sl, #0
 8002f96:	f8cd a004 	str.w	sl, [sp, #4]
 8002f9a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9e:	4c31      	ldr	r4, [pc, #196]	; (8003064 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002fa4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002fa8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002fac:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002fb0:	9601      	str	r6, [sp, #4]
 8002fb2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb4:	f023 0603 	bic.w	r6, r3, #3
 8002fb8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002fbc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002fcc:	270f      	movs	r7, #15
 8002fce:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd8:	d03a      	beq.n	8003050 <HAL_GPIO_Init+0x174>
 8002fda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fde:	42a0      	cmp	r0, r4
 8002fe0:	d038      	beq.n	8003054 <HAL_GPIO_Init+0x178>
 8002fe2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fe6:	42a0      	cmp	r0, r4
 8002fe8:	d036      	beq.n	8003058 <HAL_GPIO_Init+0x17c>
 8002fea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fee:	42a0      	cmp	r0, r4
 8002ff0:	d034      	beq.n	800305c <HAL_GPIO_Init+0x180>
 8002ff2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ff6:	42a0      	cmp	r0, r4
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2404      	moveq	r4, #4
 8002ffc:	2407      	movne	r4, #7
 8002ffe:	fa04 f40e 	lsl.w	r4, r4, lr
 8003002:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003004:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8003006:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003008:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300c:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800300e:	bf54      	ite	pl
 8003010:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003012:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003016:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8003018:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301a:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800301c:	bf54      	ite	pl
 800301e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003020:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8003024:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003026:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003028:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800302a:	bf54      	ite	pl
 800302c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800302e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8003032:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003034:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003036:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003038:	bf54      	ite	pl
 800303a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800303c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8003040:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	3301      	adds	r3, #1
 8003044:	2b10      	cmp	r3, #16
 8003046:	f47f af4f 	bne.w	8002ee8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800304a:	b003      	add	sp, #12
 800304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003050:	4654      	mov	r4, sl
 8003052:	e7d4      	b.n	8002ffe <HAL_GPIO_Init+0x122>
 8003054:	2401      	movs	r4, #1
 8003056:	e7d2      	b.n	8002ffe <HAL_GPIO_Init+0x122>
 8003058:	2402      	movs	r4, #2
 800305a:	e7d0      	b.n	8002ffe <HAL_GPIO_Init+0x122>
 800305c:	2403      	movs	r4, #3
 800305e:	e7ce      	b.n	8002ffe <HAL_GPIO_Init+0x122>
 8003060:	40013c00 	.word	0x40013c00
 8003064:	40020000 	.word	0x40020000
 8003068:	40023800 	.word	0x40023800

0800306c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	b10a      	cbz	r2, 8003072 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	6181      	str	r1, [r0, #24]
  }
}
 8003070:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003072:	0409      	lsls	r1, r1, #16
 8003074:	e7fb      	b.n	800306e <HAL_GPIO_WritePin+0x2>

08003076 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003076:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003078:	4604      	mov	r4, r0
 800307a:	b310      	cbz	r0, 80030c2 <HAL_IWDG_Init+0x4c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003082:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003084:	f245 5255 	movw	r2, #21845	; 0x5555
 8003088:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800308a:	6842      	ldr	r2, [r0, #4]
 800308c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800308e:	6882      	ldr	r2, [r0, #8]
 8003090:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003092:	f7ff fe2b 	bl	8002cec <HAL_GetTick>
 8003096:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	68d3      	ldr	r3, [r2, #12]
 800309c:	f013 0303 	ands.w	r3, r3, #3
 80030a0:	d104      	bne.n	80030ac <HAL_IWDG_Init+0x36>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030a2:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 80030a6:	6011      	str	r1, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80030a8:	4618      	mov	r0, r3
}
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80030ac:	f7ff fe1e 	bl	8002cec <HAL_GetTick>
 80030b0:	1b40      	subs	r0, r0, r5
 80030b2:	2831      	cmp	r0, #49	; 0x31
 80030b4:	d9f0      	bls.n	8003098 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	079b      	lsls	r3, r3, #30
 80030bc:	d0ec      	beq.n	8003098 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 80030be:	2003      	movs	r0, #3
 80030c0:	e7f3      	b.n	80030aa <HAL_IWDG_Init+0x34>
    return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
 80030c4:	e7f1      	b.n	80030aa <HAL_IWDG_Init+0x34>

080030c6 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030c6:	6803      	ldr	r3, [r0, #0]
 80030c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80030cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80030ce:	2000      	movs	r0, #0
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d124      	bne.n	8003126 <HAL_TIM_Base_Start+0x52>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_TIM_Base_Start+0x58>)
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e4:	6803      	ldr	r3, [r0, #0]
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d012      	beq.n	8003110 <HAL_TIM_Base_Start+0x3c>
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d00f      	beq.n	8003110 <HAL_TIM_Base_Start+0x3c>
 80030f0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <HAL_TIM_Base_Start+0x3c>
 80030f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_Base_Start+0x3c>
 8003100:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <HAL_TIM_Base_Start+0x3c>
 8003108:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800310c:	4293      	cmp	r3, r2
 800310e:	d104      	bne.n	800311a <HAL_TIM_Base_Start+0x46>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	2a06      	cmp	r2, #6
 8003118:	d003      	beq.n	8003122 <HAL_TIM_Base_Start+0x4e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2000      	movs	r0, #0
}
 8003124:	4770      	bx	lr
    return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000

08003130 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8003132:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	4290      	cmp	r0, r2
 8003136:	d00e      	beq.n	8003156 <TIM_Base_SetConfig+0x26>
 8003138:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0x26>
 800313e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003142:	4290      	cmp	r0, r2
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0x26>
 8003146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800314a:	4290      	cmp	r0, r2
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x26>
 800314e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003152:	4290      	cmp	r0, r2
 8003154:	d115      	bne.n	8003182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003156:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800315c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <TIM_Base_SetConfig+0x94>)
 8003160:	4290      	cmp	r0, r2
 8003162:	d019      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 8003164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003168:	d016      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 800316a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800316e:	4290      	cmp	r0, r2
 8003170:	d012      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 8003172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003176:	4290      	cmp	r0, r2
 8003178:	d00e      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 800317a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800317e:	4290      	cmp	r0, r2
 8003180:	d00a      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 8003182:	4a11      	ldr	r2, [pc, #68]	; (80031c8 <TIM_Base_SetConfig+0x98>)
 8003184:	4290      	cmp	r0, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 8003188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800318c:	4290      	cmp	r0, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x68>
 8003190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003194:	4290      	cmp	r0, r2
 8003196:	d103      	bne.n	80031a0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003198:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	694a      	ldr	r2, [r1, #20]
 80031a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80031a8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031aa:	688b      	ldr	r3, [r1, #8]
 80031ac:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ae:	680b      	ldr	r3, [r1, #0]
 80031b0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <TIM_Base_SetConfig+0x94>)
 80031b4:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b6:	bf04      	itt	eq
 80031b8:	690b      	ldreq	r3, [r1, #16]
 80031ba:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	2301      	movs	r3, #1
 80031be:	6143      	str	r3, [r0, #20]
}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40014000 	.word	0x40014000

080031cc <HAL_TIM_Base_Init>:
{
 80031cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80031ce:	4604      	mov	r4, r0
 80031d0:	b330      	cbz	r0, 8003220 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031da:	b91b      	cbnz	r3, 80031e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80031dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80031e0:	f7ff fa40 	bl	8002664 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	1d21      	adds	r1, r4, #4
 80031ee:	f7ff ff9f 	bl	8003130 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80031f8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80031fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003202:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003206:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800320e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003212:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800321a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800321e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003220:	2001      	movs	r0, #1
 8003222:	e7fc      	b.n	800321e <HAL_TIM_Base_Init+0x52>

08003224 <VersionPrint>:
const char VersionBuildDateString[] = "Wed Oct 13 16:21:37 2021";
const char VersionBuildUser[] = "harsh";

void VersionPrint(void)
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 8003224:	4a02      	ldr	r2, [pc, #8]	; (8003230 <VersionPrint+0xc>)
 8003226:	4903      	ldr	r1, [pc, #12]	; (8003234 <VersionPrint+0x10>)
 8003228:	4803      	ldr	r0, [pc, #12]	; (8003238 <VersionPrint+0x14>)
 800322a:	f000 bca9 	b.w	8003b80 <iprintf>
 800322e:	bf00      	nop
 8003230:	0801267d 	.word	0x0801267d
 8003234:	08012664 	.word	0x08012664
 8003238:	08012629 	.word	0x08012629

0800323c <CmdVersion>:
}

ParserReturnVal_t CmdVersion(int mode)
{
 800323c:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800323e:	b908      	cbnz	r0, 8003244 <CmdVersion+0x8>

   VersionPrint();
 8003240:	f7ff fff0 	bl	8003224 <VersionPrint>
   return CmdReturnOk;
}
 8003244:	2000      	movs	r0, #0
 8003246:	bd08      	pop	{r3, pc}

08003248 <__errno>:
 8003248:	4b01      	ldr	r3, [pc, #4]	; (8003250 <__errno+0x8>)
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	200001b4 	.word	0x200001b4

08003254 <__libc_init_array>:
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	4d0d      	ldr	r5, [pc, #52]	; (800328c <__libc_init_array+0x38>)
 8003258:	4c0d      	ldr	r4, [pc, #52]	; (8003290 <__libc_init_array+0x3c>)
 800325a:	1b64      	subs	r4, r4, r5
 800325c:	10a4      	asrs	r4, r4, #2
 800325e:	2600      	movs	r6, #0
 8003260:	42a6      	cmp	r6, r4
 8003262:	d109      	bne.n	8003278 <__libc_init_array+0x24>
 8003264:	4d0b      	ldr	r5, [pc, #44]	; (8003294 <__libc_init_array+0x40>)
 8003266:	4c0c      	ldr	r4, [pc, #48]	; (8003298 <__libc_init_array+0x44>)
 8003268:	f003 f906 	bl	8006478 <_init>
 800326c:	1b64      	subs	r4, r4, r5
 800326e:	10a4      	asrs	r4, r4, #2
 8003270:	2600      	movs	r6, #0
 8003272:	42a6      	cmp	r6, r4
 8003274:	d105      	bne.n	8003282 <__libc_init_array+0x2e>
 8003276:	bd70      	pop	{r4, r5, r6, pc}
 8003278:	f855 3b04 	ldr.w	r3, [r5], #4
 800327c:	4798      	blx	r3
 800327e:	3601      	adds	r6, #1
 8003280:	e7ee      	b.n	8003260 <__libc_init_array+0xc>
 8003282:	f855 3b04 	ldr.w	r3, [r5], #4
 8003286:	4798      	blx	r3
 8003288:	3601      	adds	r6, #1
 800328a:	e7f2      	b.n	8003272 <__libc_init_array+0x1e>
 800328c:	08012c00 	.word	0x08012c00
 8003290:	08012c00 	.word	0x08012c00
 8003294:	08012c00 	.word	0x08012c00
 8003298:	08012c04 	.word	0x08012c04

0800329c <memset>:
 800329c:	4402      	add	r2, r0
 800329e:	4603      	mov	r3, r0
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d100      	bne.n	80032a6 <memset+0xa>
 80032a4:	4770      	bx	lr
 80032a6:	f803 1b01 	strb.w	r1, [r3], #1
 80032aa:	e7f9      	b.n	80032a0 <memset+0x4>

080032ac <__cvt>:
 80032ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	ec55 4b10 	vmov	r4, r5, d0
 80032b4:	2d00      	cmp	r5, #0
 80032b6:	460e      	mov	r6, r1
 80032b8:	4619      	mov	r1, r3
 80032ba:	462b      	mov	r3, r5
 80032bc:	bfbb      	ittet	lt
 80032be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80032c2:	461d      	movlt	r5, r3
 80032c4:	2300      	movge	r3, #0
 80032c6:	232d      	movlt	r3, #45	; 0x2d
 80032c8:	700b      	strb	r3, [r1, #0]
 80032ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80032d0:	4691      	mov	r9, r2
 80032d2:	f023 0820 	bic.w	r8, r3, #32
 80032d6:	bfbc      	itt	lt
 80032d8:	4622      	movlt	r2, r4
 80032da:	4614      	movlt	r4, r2
 80032dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032e0:	d005      	beq.n	80032ee <__cvt+0x42>
 80032e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032e6:	d100      	bne.n	80032ea <__cvt+0x3e>
 80032e8:	3601      	adds	r6, #1
 80032ea:	2102      	movs	r1, #2
 80032ec:	e000      	b.n	80032f0 <__cvt+0x44>
 80032ee:	2103      	movs	r1, #3
 80032f0:	ab03      	add	r3, sp, #12
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	ab02      	add	r3, sp, #8
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	ec45 4b10 	vmov	d0, r4, r5
 80032fc:	4653      	mov	r3, sl
 80032fe:	4632      	mov	r2, r6
 8003300:	f001 f846 	bl	8004390 <_dtoa_r>
 8003304:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003308:	4607      	mov	r7, r0
 800330a:	d102      	bne.n	8003312 <__cvt+0x66>
 800330c:	f019 0f01 	tst.w	r9, #1
 8003310:	d022      	beq.n	8003358 <__cvt+0xac>
 8003312:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003316:	eb07 0906 	add.w	r9, r7, r6
 800331a:	d110      	bne.n	800333e <__cvt+0x92>
 800331c:	783b      	ldrb	r3, [r7, #0]
 800331e:	2b30      	cmp	r3, #48	; 0x30
 8003320:	d10a      	bne.n	8003338 <__cvt+0x8c>
 8003322:	2200      	movs	r2, #0
 8003324:	2300      	movs	r3, #0
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fd fd75 	bl	8000e18 <__aeabi_dcmpeq>
 800332e:	b918      	cbnz	r0, 8003338 <__cvt+0x8c>
 8003330:	f1c6 0601 	rsb	r6, r6, #1
 8003334:	f8ca 6000 	str.w	r6, [sl]
 8003338:	f8da 3000 	ldr.w	r3, [sl]
 800333c:	4499      	add	r9, r3
 800333e:	2200      	movs	r2, #0
 8003340:	2300      	movs	r3, #0
 8003342:	4620      	mov	r0, r4
 8003344:	4629      	mov	r1, r5
 8003346:	f7fd fd67 	bl	8000e18 <__aeabi_dcmpeq>
 800334a:	b108      	cbz	r0, 8003350 <__cvt+0xa4>
 800334c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003350:	2230      	movs	r2, #48	; 0x30
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	454b      	cmp	r3, r9
 8003356:	d307      	bcc.n	8003368 <__cvt+0xbc>
 8003358:	9b03      	ldr	r3, [sp, #12]
 800335a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800335c:	1bdb      	subs	r3, r3, r7
 800335e:	4638      	mov	r0, r7
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	b004      	add	sp, #16
 8003364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003368:	1c59      	adds	r1, r3, #1
 800336a:	9103      	str	r1, [sp, #12]
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e7f0      	b.n	8003352 <__cvt+0xa6>

08003370 <__exponent>:
 8003370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003372:	4603      	mov	r3, r0
 8003374:	2900      	cmp	r1, #0
 8003376:	bfb8      	it	lt
 8003378:	4249      	neglt	r1, r1
 800337a:	f803 2b02 	strb.w	r2, [r3], #2
 800337e:	bfb4      	ite	lt
 8003380:	222d      	movlt	r2, #45	; 0x2d
 8003382:	222b      	movge	r2, #43	; 0x2b
 8003384:	2909      	cmp	r1, #9
 8003386:	7042      	strb	r2, [r0, #1]
 8003388:	dd2a      	ble.n	80033e0 <__exponent+0x70>
 800338a:	f10d 0407 	add.w	r4, sp, #7
 800338e:	46a4      	mov	ip, r4
 8003390:	270a      	movs	r7, #10
 8003392:	46a6      	mov	lr, r4
 8003394:	460a      	mov	r2, r1
 8003396:	fb91 f6f7 	sdiv	r6, r1, r7
 800339a:	fb07 1516 	mls	r5, r7, r6, r1
 800339e:	3530      	adds	r5, #48	; 0x30
 80033a0:	2a63      	cmp	r2, #99	; 0x63
 80033a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80033a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80033aa:	4631      	mov	r1, r6
 80033ac:	dcf1      	bgt.n	8003392 <__exponent+0x22>
 80033ae:	3130      	adds	r1, #48	; 0x30
 80033b0:	f1ae 0502 	sub.w	r5, lr, #2
 80033b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80033b8:	1c44      	adds	r4, r0, #1
 80033ba:	4629      	mov	r1, r5
 80033bc:	4561      	cmp	r1, ip
 80033be:	d30a      	bcc.n	80033d6 <__exponent+0x66>
 80033c0:	f10d 0209 	add.w	r2, sp, #9
 80033c4:	eba2 020e 	sub.w	r2, r2, lr
 80033c8:	4565      	cmp	r5, ip
 80033ca:	bf88      	it	hi
 80033cc:	2200      	movhi	r2, #0
 80033ce:	4413      	add	r3, r2
 80033d0:	1a18      	subs	r0, r3, r0
 80033d2:	b003      	add	sp, #12
 80033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033de:	e7ed      	b.n	80033bc <__exponent+0x4c>
 80033e0:	2330      	movs	r3, #48	; 0x30
 80033e2:	3130      	adds	r1, #48	; 0x30
 80033e4:	7083      	strb	r3, [r0, #2]
 80033e6:	70c1      	strb	r1, [r0, #3]
 80033e8:	1d03      	adds	r3, r0, #4
 80033ea:	e7f1      	b.n	80033d0 <__exponent+0x60>

080033ec <_printf_float>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	ed2d 8b02 	vpush	{d8}
 80033f4:	b08d      	sub	sp, #52	; 0x34
 80033f6:	460c      	mov	r4, r1
 80033f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80033fc:	4616      	mov	r6, r2
 80033fe:	461f      	mov	r7, r3
 8003400:	4605      	mov	r5, r0
 8003402:	f001 ff7d 	bl	8005300 <_localeconv_r>
 8003406:	f8d0 a000 	ldr.w	sl, [r0]
 800340a:	4650      	mov	r0, sl
 800340c:	f7fd f884 	bl	8000518 <strlen>
 8003410:	2300      	movs	r3, #0
 8003412:	930a      	str	r3, [sp, #40]	; 0x28
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	9305      	str	r3, [sp, #20]
 8003418:	f8d8 3000 	ldr.w	r3, [r8]
 800341c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003420:	3307      	adds	r3, #7
 8003422:	f023 0307 	bic.w	r3, r3, #7
 8003426:	f103 0208 	add.w	r2, r3, #8
 800342a:	f8c8 2000 	str.w	r2, [r8]
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003436:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800343a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800343e:	9307      	str	r3, [sp, #28]
 8003440:	f8cd 8018 	str.w	r8, [sp, #24]
 8003444:	ee08 0a10 	vmov	s16, r0
 8003448:	4b9f      	ldr	r3, [pc, #636]	; (80036c8 <_printf_float+0x2dc>)
 800344a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800344e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003452:	f7fd fd13 	bl	8000e7c <__aeabi_dcmpun>
 8003456:	bb88      	cbnz	r0, 80034bc <_printf_float+0xd0>
 8003458:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800345c:	4b9a      	ldr	r3, [pc, #616]	; (80036c8 <_printf_float+0x2dc>)
 800345e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003462:	f7fd fced 	bl	8000e40 <__aeabi_dcmple>
 8003466:	bb48      	cbnz	r0, 80034bc <_printf_float+0xd0>
 8003468:	2200      	movs	r2, #0
 800346a:	2300      	movs	r3, #0
 800346c:	4640      	mov	r0, r8
 800346e:	4649      	mov	r1, r9
 8003470:	f7fd fcdc 	bl	8000e2c <__aeabi_dcmplt>
 8003474:	b110      	cbz	r0, 800347c <_printf_float+0x90>
 8003476:	232d      	movs	r3, #45	; 0x2d
 8003478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800347c:	4b93      	ldr	r3, [pc, #588]	; (80036cc <_printf_float+0x2e0>)
 800347e:	4894      	ldr	r0, [pc, #592]	; (80036d0 <_printf_float+0x2e4>)
 8003480:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003484:	bf94      	ite	ls
 8003486:	4698      	movls	r8, r3
 8003488:	4680      	movhi	r8, r0
 800348a:	2303      	movs	r3, #3
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	9b05      	ldr	r3, [sp, #20]
 8003490:	f023 0204 	bic.w	r2, r3, #4
 8003494:	6022      	str	r2, [r4, #0]
 8003496:	f04f 0900 	mov.w	r9, #0
 800349a:	9700      	str	r7, [sp, #0]
 800349c:	4633      	mov	r3, r6
 800349e:	aa0b      	add	r2, sp, #44	; 0x2c
 80034a0:	4621      	mov	r1, r4
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 f9d8 	bl	8003858 <_printf_common>
 80034a8:	3001      	adds	r0, #1
 80034aa:	f040 8090 	bne.w	80035ce <_printf_float+0x1e2>
 80034ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b2:	b00d      	add	sp, #52	; 0x34
 80034b4:	ecbd 8b02 	vpop	{d8}
 80034b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	4640      	mov	r0, r8
 80034c2:	4649      	mov	r1, r9
 80034c4:	f7fd fcda 	bl	8000e7c <__aeabi_dcmpun>
 80034c8:	b140      	cbz	r0, 80034dc <_printf_float+0xf0>
 80034ca:	464b      	mov	r3, r9
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bfbc      	itt	lt
 80034d0:	232d      	movlt	r3, #45	; 0x2d
 80034d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034d6:	487f      	ldr	r0, [pc, #508]	; (80036d4 <_printf_float+0x2e8>)
 80034d8:	4b7f      	ldr	r3, [pc, #508]	; (80036d8 <_printf_float+0x2ec>)
 80034da:	e7d1      	b.n	8003480 <_printf_float+0x94>
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034e2:	9206      	str	r2, [sp, #24]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	d13f      	bne.n	8003568 <_printf_float+0x17c>
 80034e8:	2306      	movs	r3, #6
 80034ea:	6063      	str	r3, [r4, #4]
 80034ec:	9b05      	ldr	r3, [sp, #20]
 80034ee:	6861      	ldr	r1, [r4, #4]
 80034f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034f4:	2300      	movs	r3, #0
 80034f6:	9303      	str	r3, [sp, #12]
 80034f8:	ab0a      	add	r3, sp, #40	; 0x28
 80034fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80034fe:	ab09      	add	r3, sp, #36	; 0x24
 8003500:	ec49 8b10 	vmov	d0, r8, r9
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6022      	str	r2, [r4, #0]
 8003508:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800350c:	4628      	mov	r0, r5
 800350e:	f7ff fecd 	bl	80032ac <__cvt>
 8003512:	9b06      	ldr	r3, [sp, #24]
 8003514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003516:	2b47      	cmp	r3, #71	; 0x47
 8003518:	4680      	mov	r8, r0
 800351a:	d108      	bne.n	800352e <_printf_float+0x142>
 800351c:	1cc8      	adds	r0, r1, #3
 800351e:	db02      	blt.n	8003526 <_printf_float+0x13a>
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	4299      	cmp	r1, r3
 8003524:	dd41      	ble.n	80035aa <_printf_float+0x1be>
 8003526:	f1ab 0b02 	sub.w	fp, fp, #2
 800352a:	fa5f fb8b 	uxtb.w	fp, fp
 800352e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003532:	d820      	bhi.n	8003576 <_printf_float+0x18a>
 8003534:	3901      	subs	r1, #1
 8003536:	465a      	mov	r2, fp
 8003538:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800353c:	9109      	str	r1, [sp, #36]	; 0x24
 800353e:	f7ff ff17 	bl	8003370 <__exponent>
 8003542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003544:	1813      	adds	r3, r2, r0
 8003546:	2a01      	cmp	r2, #1
 8003548:	4681      	mov	r9, r0
 800354a:	6123      	str	r3, [r4, #16]
 800354c:	dc02      	bgt.n	8003554 <_printf_float+0x168>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	07d2      	lsls	r2, r2, #31
 8003552:	d501      	bpl.n	8003558 <_printf_float+0x16c>
 8003554:	3301      	adds	r3, #1
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800355c:	2b00      	cmp	r3, #0
 800355e:	d09c      	beq.n	800349a <_printf_float+0xae>
 8003560:	232d      	movs	r3, #45	; 0x2d
 8003562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003566:	e798      	b.n	800349a <_printf_float+0xae>
 8003568:	9a06      	ldr	r2, [sp, #24]
 800356a:	2a47      	cmp	r2, #71	; 0x47
 800356c:	d1be      	bne.n	80034ec <_printf_float+0x100>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1bc      	bne.n	80034ec <_printf_float+0x100>
 8003572:	2301      	movs	r3, #1
 8003574:	e7b9      	b.n	80034ea <_printf_float+0xfe>
 8003576:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800357a:	d118      	bne.n	80035ae <_printf_float+0x1c2>
 800357c:	2900      	cmp	r1, #0
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	dd0b      	ble.n	800359a <_printf_float+0x1ae>
 8003582:	6121      	str	r1, [r4, #16]
 8003584:	b913      	cbnz	r3, 800358c <_printf_float+0x1a0>
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	07d0      	lsls	r0, r2, #31
 800358a:	d502      	bpl.n	8003592 <_printf_float+0x1a6>
 800358c:	3301      	adds	r3, #1
 800358e:	440b      	add	r3, r1
 8003590:	6123      	str	r3, [r4, #16]
 8003592:	65a1      	str	r1, [r4, #88]	; 0x58
 8003594:	f04f 0900 	mov.w	r9, #0
 8003598:	e7de      	b.n	8003558 <_printf_float+0x16c>
 800359a:	b913      	cbnz	r3, 80035a2 <_printf_float+0x1b6>
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	07d2      	lsls	r2, r2, #31
 80035a0:	d501      	bpl.n	80035a6 <_printf_float+0x1ba>
 80035a2:	3302      	adds	r3, #2
 80035a4:	e7f4      	b.n	8003590 <_printf_float+0x1a4>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e7f2      	b.n	8003590 <_printf_float+0x1a4>
 80035aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80035ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035b0:	4299      	cmp	r1, r3
 80035b2:	db05      	blt.n	80035c0 <_printf_float+0x1d4>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	6121      	str	r1, [r4, #16]
 80035b8:	07d8      	lsls	r0, r3, #31
 80035ba:	d5ea      	bpl.n	8003592 <_printf_float+0x1a6>
 80035bc:	1c4b      	adds	r3, r1, #1
 80035be:	e7e7      	b.n	8003590 <_printf_float+0x1a4>
 80035c0:	2900      	cmp	r1, #0
 80035c2:	bfd4      	ite	le
 80035c4:	f1c1 0202 	rsble	r2, r1, #2
 80035c8:	2201      	movgt	r2, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	e7e0      	b.n	8003590 <_printf_float+0x1a4>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	055a      	lsls	r2, r3, #21
 80035d2:	d407      	bmi.n	80035e4 <_printf_float+0x1f8>
 80035d4:	6923      	ldr	r3, [r4, #16]
 80035d6:	4642      	mov	r2, r8
 80035d8:	4631      	mov	r1, r6
 80035da:	4628      	mov	r0, r5
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	d12c      	bne.n	800363c <_printf_float+0x250>
 80035e2:	e764      	b.n	80034ae <_printf_float+0xc2>
 80035e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035e8:	f240 80e0 	bls.w	80037ac <_printf_float+0x3c0>
 80035ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035f0:	2200      	movs	r2, #0
 80035f2:	2300      	movs	r3, #0
 80035f4:	f7fd fc10 	bl	8000e18 <__aeabi_dcmpeq>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d034      	beq.n	8003666 <_printf_float+0x27a>
 80035fc:	4a37      	ldr	r2, [pc, #220]	; (80036dc <_printf_float+0x2f0>)
 80035fe:	2301      	movs	r3, #1
 8003600:	4631      	mov	r1, r6
 8003602:	4628      	mov	r0, r5
 8003604:	47b8      	blx	r7
 8003606:	3001      	adds	r0, #1
 8003608:	f43f af51 	beq.w	80034ae <_printf_float+0xc2>
 800360c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003610:	429a      	cmp	r2, r3
 8003612:	db02      	blt.n	800361a <_printf_float+0x22e>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	07d8      	lsls	r0, r3, #31
 8003618:	d510      	bpl.n	800363c <_printf_float+0x250>
 800361a:	ee18 3a10 	vmov	r3, s16
 800361e:	4652      	mov	r2, sl
 8003620:	4631      	mov	r1, r6
 8003622:	4628      	mov	r0, r5
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	f43f af41 	beq.w	80034ae <_printf_float+0xc2>
 800362c:	f04f 0800 	mov.w	r8, #0
 8003630:	f104 091a 	add.w	r9, r4, #26
 8003634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	4543      	cmp	r3, r8
 800363a:	dc09      	bgt.n	8003650 <_printf_float+0x264>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	079b      	lsls	r3, r3, #30
 8003640:	f100 8105 	bmi.w	800384e <_printf_float+0x462>
 8003644:	68e0      	ldr	r0, [r4, #12]
 8003646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003648:	4298      	cmp	r0, r3
 800364a:	bfb8      	it	lt
 800364c:	4618      	movlt	r0, r3
 800364e:	e730      	b.n	80034b2 <_printf_float+0xc6>
 8003650:	2301      	movs	r3, #1
 8003652:	464a      	mov	r2, r9
 8003654:	4631      	mov	r1, r6
 8003656:	4628      	mov	r0, r5
 8003658:	47b8      	blx	r7
 800365a:	3001      	adds	r0, #1
 800365c:	f43f af27 	beq.w	80034ae <_printf_float+0xc2>
 8003660:	f108 0801 	add.w	r8, r8, #1
 8003664:	e7e6      	b.n	8003634 <_printf_float+0x248>
 8003666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	dc39      	bgt.n	80036e0 <_printf_float+0x2f4>
 800366c:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <_printf_float+0x2f0>)
 800366e:	2301      	movs	r3, #1
 8003670:	4631      	mov	r1, r6
 8003672:	4628      	mov	r0, r5
 8003674:	47b8      	blx	r7
 8003676:	3001      	adds	r0, #1
 8003678:	f43f af19 	beq.w	80034ae <_printf_float+0xc2>
 800367c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003680:	4313      	orrs	r3, r2
 8003682:	d102      	bne.n	800368a <_printf_float+0x29e>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	07d9      	lsls	r1, r3, #31
 8003688:	d5d8      	bpl.n	800363c <_printf_float+0x250>
 800368a:	ee18 3a10 	vmov	r3, s16
 800368e:	4652      	mov	r2, sl
 8003690:	4631      	mov	r1, r6
 8003692:	4628      	mov	r0, r5
 8003694:	47b8      	blx	r7
 8003696:	3001      	adds	r0, #1
 8003698:	f43f af09 	beq.w	80034ae <_printf_float+0xc2>
 800369c:	f04f 0900 	mov.w	r9, #0
 80036a0:	f104 0a1a 	add.w	sl, r4, #26
 80036a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a6:	425b      	negs	r3, r3
 80036a8:	454b      	cmp	r3, r9
 80036aa:	dc01      	bgt.n	80036b0 <_printf_float+0x2c4>
 80036ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ae:	e792      	b.n	80035d6 <_printf_float+0x1ea>
 80036b0:	2301      	movs	r3, #1
 80036b2:	4652      	mov	r2, sl
 80036b4:	4631      	mov	r1, r6
 80036b6:	4628      	mov	r0, r5
 80036b8:	47b8      	blx	r7
 80036ba:	3001      	adds	r0, #1
 80036bc:	f43f aef7 	beq.w	80034ae <_printf_float+0xc2>
 80036c0:	f109 0901 	add.w	r9, r9, #1
 80036c4:	e7ee      	b.n	80036a4 <_printf_float+0x2b8>
 80036c6:	bf00      	nop
 80036c8:	7fefffff 	.word	0x7fefffff
 80036cc:	08012788 	.word	0x08012788
 80036d0:	0801278c 	.word	0x0801278c
 80036d4:	08012794 	.word	0x08012794
 80036d8:	08012790 	.word	0x08012790
 80036dc:	08008697 	.word	0x08008697
 80036e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036e4:	429a      	cmp	r2, r3
 80036e6:	bfa8      	it	ge
 80036e8:	461a      	movge	r2, r3
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	4691      	mov	r9, r2
 80036ee:	dc37      	bgt.n	8003760 <_printf_float+0x374>
 80036f0:	f04f 0b00 	mov.w	fp, #0
 80036f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036f8:	f104 021a 	add.w	r2, r4, #26
 80036fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	eba3 0309 	sub.w	r3, r3, r9
 8003704:	455b      	cmp	r3, fp
 8003706:	dc33      	bgt.n	8003770 <_printf_float+0x384>
 8003708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800370c:	429a      	cmp	r2, r3
 800370e:	db3b      	blt.n	8003788 <_printf_float+0x39c>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	07da      	lsls	r2, r3, #31
 8003714:	d438      	bmi.n	8003788 <_printf_float+0x39c>
 8003716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003718:	9a05      	ldr	r2, [sp, #20]
 800371a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800371c:	1a9a      	subs	r2, r3, r2
 800371e:	eba3 0901 	sub.w	r9, r3, r1
 8003722:	4591      	cmp	r9, r2
 8003724:	bfa8      	it	ge
 8003726:	4691      	movge	r9, r2
 8003728:	f1b9 0f00 	cmp.w	r9, #0
 800372c:	dc35      	bgt.n	800379a <_printf_float+0x3ae>
 800372e:	f04f 0800 	mov.w	r8, #0
 8003732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003736:	f104 0a1a 	add.w	sl, r4, #26
 800373a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	eba3 0309 	sub.w	r3, r3, r9
 8003744:	4543      	cmp	r3, r8
 8003746:	f77f af79 	ble.w	800363c <_printf_float+0x250>
 800374a:	2301      	movs	r3, #1
 800374c:	4652      	mov	r2, sl
 800374e:	4631      	mov	r1, r6
 8003750:	4628      	mov	r0, r5
 8003752:	47b8      	blx	r7
 8003754:	3001      	adds	r0, #1
 8003756:	f43f aeaa 	beq.w	80034ae <_printf_float+0xc2>
 800375a:	f108 0801 	add.w	r8, r8, #1
 800375e:	e7ec      	b.n	800373a <_printf_float+0x34e>
 8003760:	4613      	mov	r3, r2
 8003762:	4631      	mov	r1, r6
 8003764:	4642      	mov	r2, r8
 8003766:	4628      	mov	r0, r5
 8003768:	47b8      	blx	r7
 800376a:	3001      	adds	r0, #1
 800376c:	d1c0      	bne.n	80036f0 <_printf_float+0x304>
 800376e:	e69e      	b.n	80034ae <_printf_float+0xc2>
 8003770:	2301      	movs	r3, #1
 8003772:	4631      	mov	r1, r6
 8003774:	4628      	mov	r0, r5
 8003776:	9205      	str	r2, [sp, #20]
 8003778:	47b8      	blx	r7
 800377a:	3001      	adds	r0, #1
 800377c:	f43f ae97 	beq.w	80034ae <_printf_float+0xc2>
 8003780:	9a05      	ldr	r2, [sp, #20]
 8003782:	f10b 0b01 	add.w	fp, fp, #1
 8003786:	e7b9      	b.n	80036fc <_printf_float+0x310>
 8003788:	ee18 3a10 	vmov	r3, s16
 800378c:	4652      	mov	r2, sl
 800378e:	4631      	mov	r1, r6
 8003790:	4628      	mov	r0, r5
 8003792:	47b8      	blx	r7
 8003794:	3001      	adds	r0, #1
 8003796:	d1be      	bne.n	8003716 <_printf_float+0x32a>
 8003798:	e689      	b.n	80034ae <_printf_float+0xc2>
 800379a:	9a05      	ldr	r2, [sp, #20]
 800379c:	464b      	mov	r3, r9
 800379e:	4442      	add	r2, r8
 80037a0:	4631      	mov	r1, r6
 80037a2:	4628      	mov	r0, r5
 80037a4:	47b8      	blx	r7
 80037a6:	3001      	adds	r0, #1
 80037a8:	d1c1      	bne.n	800372e <_printf_float+0x342>
 80037aa:	e680      	b.n	80034ae <_printf_float+0xc2>
 80037ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ae:	2a01      	cmp	r2, #1
 80037b0:	dc01      	bgt.n	80037b6 <_printf_float+0x3ca>
 80037b2:	07db      	lsls	r3, r3, #31
 80037b4:	d538      	bpl.n	8003828 <_printf_float+0x43c>
 80037b6:	2301      	movs	r3, #1
 80037b8:	4642      	mov	r2, r8
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	f43f ae74 	beq.w	80034ae <_printf_float+0xc2>
 80037c6:	ee18 3a10 	vmov	r3, s16
 80037ca:	4652      	mov	r2, sl
 80037cc:	4631      	mov	r1, r6
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b8      	blx	r7
 80037d2:	3001      	adds	r0, #1
 80037d4:	f43f ae6b 	beq.w	80034ae <_printf_float+0xc2>
 80037d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037dc:	2200      	movs	r2, #0
 80037de:	2300      	movs	r3, #0
 80037e0:	f7fd fb1a 	bl	8000e18 <__aeabi_dcmpeq>
 80037e4:	b9d8      	cbnz	r0, 800381e <_printf_float+0x432>
 80037e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037e8:	f108 0201 	add.w	r2, r8, #1
 80037ec:	3b01      	subs	r3, #1
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b8      	blx	r7
 80037f4:	3001      	adds	r0, #1
 80037f6:	d10e      	bne.n	8003816 <_printf_float+0x42a>
 80037f8:	e659      	b.n	80034ae <_printf_float+0xc2>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4652      	mov	r2, sl
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	f43f ae52 	beq.w	80034ae <_printf_float+0xc2>
 800380a:	f108 0801 	add.w	r8, r8, #1
 800380e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	4543      	cmp	r3, r8
 8003814:	dcf1      	bgt.n	80037fa <_printf_float+0x40e>
 8003816:	464b      	mov	r3, r9
 8003818:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800381c:	e6dc      	b.n	80035d8 <_printf_float+0x1ec>
 800381e:	f04f 0800 	mov.w	r8, #0
 8003822:	f104 0a1a 	add.w	sl, r4, #26
 8003826:	e7f2      	b.n	800380e <_printf_float+0x422>
 8003828:	2301      	movs	r3, #1
 800382a:	4642      	mov	r2, r8
 800382c:	e7df      	b.n	80037ee <_printf_float+0x402>
 800382e:	2301      	movs	r3, #1
 8003830:	464a      	mov	r2, r9
 8003832:	4631      	mov	r1, r6
 8003834:	4628      	mov	r0, r5
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	f43f ae38 	beq.w	80034ae <_printf_float+0xc2>
 800383e:	f108 0801 	add.w	r8, r8, #1
 8003842:	68e3      	ldr	r3, [r4, #12]
 8003844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003846:	1a5b      	subs	r3, r3, r1
 8003848:	4543      	cmp	r3, r8
 800384a:	dcf0      	bgt.n	800382e <_printf_float+0x442>
 800384c:	e6fa      	b.n	8003644 <_printf_float+0x258>
 800384e:	f04f 0800 	mov.w	r8, #0
 8003852:	f104 0919 	add.w	r9, r4, #25
 8003856:	e7f4      	b.n	8003842 <_printf_float+0x456>

08003858 <_printf_common>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	4616      	mov	r6, r2
 800385e:	4699      	mov	r9, r3
 8003860:	688a      	ldr	r2, [r1, #8]
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003868:	4293      	cmp	r3, r2
 800386a:	bfb8      	it	lt
 800386c:	4613      	movlt	r3, r2
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003874:	4607      	mov	r7, r0
 8003876:	460c      	mov	r4, r1
 8003878:	b10a      	cbz	r2, 800387e <_printf_common+0x26>
 800387a:	3301      	adds	r3, #1
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	0699      	lsls	r1, r3, #26
 8003882:	bf42      	ittt	mi
 8003884:	6833      	ldrmi	r3, [r6, #0]
 8003886:	3302      	addmi	r3, #2
 8003888:	6033      	strmi	r3, [r6, #0]
 800388a:	6825      	ldr	r5, [r4, #0]
 800388c:	f015 0506 	ands.w	r5, r5, #6
 8003890:	d106      	bne.n	80038a0 <_printf_common+0x48>
 8003892:	f104 0a19 	add.w	sl, r4, #25
 8003896:	68e3      	ldr	r3, [r4, #12]
 8003898:	6832      	ldr	r2, [r6, #0]
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	42ab      	cmp	r3, r5
 800389e:	dc26      	bgt.n	80038ee <_printf_common+0x96>
 80038a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038a4:	1e13      	subs	r3, r2, #0
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	bf18      	it	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	0692      	lsls	r2, r2, #26
 80038ae:	d42b      	bmi.n	8003908 <_printf_common+0xb0>
 80038b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b4:	4649      	mov	r1, r9
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	3001      	adds	r0, #1
 80038bc:	d01e      	beq.n	80038fc <_printf_common+0xa4>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	68e5      	ldr	r5, [r4, #12]
 80038c2:	6832      	ldr	r2, [r6, #0]
 80038c4:	f003 0306 	and.w	r3, r3, #6
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	bf08      	it	eq
 80038cc:	1aad      	subeq	r5, r5, r2
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	bf0c      	ite	eq
 80038d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d8:	2500      	movne	r5, #0
 80038da:	4293      	cmp	r3, r2
 80038dc:	bfc4      	itt	gt
 80038de:	1a9b      	subgt	r3, r3, r2
 80038e0:	18ed      	addgt	r5, r5, r3
 80038e2:	2600      	movs	r6, #0
 80038e4:	341a      	adds	r4, #26
 80038e6:	42b5      	cmp	r5, r6
 80038e8:	d11a      	bne.n	8003920 <_printf_common+0xc8>
 80038ea:	2000      	movs	r0, #0
 80038ec:	e008      	b.n	8003900 <_printf_common+0xa8>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4652      	mov	r2, sl
 80038f2:	4649      	mov	r1, r9
 80038f4:	4638      	mov	r0, r7
 80038f6:	47c0      	blx	r8
 80038f8:	3001      	adds	r0, #1
 80038fa:	d103      	bne.n	8003904 <_printf_common+0xac>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	3501      	adds	r5, #1
 8003906:	e7c6      	b.n	8003896 <_printf_common+0x3e>
 8003908:	18e1      	adds	r1, r4, r3
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	2030      	movs	r0, #48	; 0x30
 800390e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003912:	4422      	add	r2, r4
 8003914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800391c:	3302      	adds	r3, #2
 800391e:	e7c7      	b.n	80038b0 <_printf_common+0x58>
 8003920:	2301      	movs	r3, #1
 8003922:	4622      	mov	r2, r4
 8003924:	4649      	mov	r1, r9
 8003926:	4638      	mov	r0, r7
 8003928:	47c0      	blx	r8
 800392a:	3001      	adds	r0, #1
 800392c:	d0e6      	beq.n	80038fc <_printf_common+0xa4>
 800392e:	3601      	adds	r6, #1
 8003930:	e7d9      	b.n	80038e6 <_printf_common+0x8e>
	...

08003934 <_printf_i>:
 8003934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	7e0f      	ldrb	r7, [r1, #24]
 800393a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800393c:	2f78      	cmp	r7, #120	; 0x78
 800393e:	4691      	mov	r9, r2
 8003940:	4680      	mov	r8, r0
 8003942:	460c      	mov	r4, r1
 8003944:	469a      	mov	sl, r3
 8003946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800394a:	d807      	bhi.n	800395c <_printf_i+0x28>
 800394c:	2f62      	cmp	r7, #98	; 0x62
 800394e:	d80a      	bhi.n	8003966 <_printf_i+0x32>
 8003950:	2f00      	cmp	r7, #0
 8003952:	f000 80d8 	beq.w	8003b06 <_printf_i+0x1d2>
 8003956:	2f58      	cmp	r7, #88	; 0x58
 8003958:	f000 80a3 	beq.w	8003aa2 <_printf_i+0x16e>
 800395c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003964:	e03a      	b.n	80039dc <_printf_i+0xa8>
 8003966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800396a:	2b15      	cmp	r3, #21
 800396c:	d8f6      	bhi.n	800395c <_printf_i+0x28>
 800396e:	a101      	add	r1, pc, #4	; (adr r1, 8003974 <_printf_i+0x40>)
 8003970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039e1 	.word	0x080039e1
 800397c:	0800395d 	.word	0x0800395d
 8003980:	0800395d 	.word	0x0800395d
 8003984:	0800395d 	.word	0x0800395d
 8003988:	0800395d 	.word	0x0800395d
 800398c:	080039e1 	.word	0x080039e1
 8003990:	0800395d 	.word	0x0800395d
 8003994:	0800395d 	.word	0x0800395d
 8003998:	0800395d 	.word	0x0800395d
 800399c:	0800395d 	.word	0x0800395d
 80039a0:	08003aed 	.word	0x08003aed
 80039a4:	08003a11 	.word	0x08003a11
 80039a8:	08003acf 	.word	0x08003acf
 80039ac:	0800395d 	.word	0x0800395d
 80039b0:	0800395d 	.word	0x0800395d
 80039b4:	08003b0f 	.word	0x08003b0f
 80039b8:	0800395d 	.word	0x0800395d
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	0800395d 	.word	0x0800395d
 80039c4:	0800395d 	.word	0x0800395d
 80039c8:	08003ad7 	.word	0x08003ad7
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	602a      	str	r2, [r5, #0]
 80039d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039dc:	2301      	movs	r3, #1
 80039de:	e0a3      	b.n	8003b28 <_printf_i+0x1f4>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	6829      	ldr	r1, [r5, #0]
 80039e4:	0606      	lsls	r6, r0, #24
 80039e6:	f101 0304 	add.w	r3, r1, #4
 80039ea:	d50a      	bpl.n	8003a02 <_printf_i+0xce>
 80039ec:	680e      	ldr	r6, [r1, #0]
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	da03      	bge.n	80039fc <_printf_i+0xc8>
 80039f4:	232d      	movs	r3, #45	; 0x2d
 80039f6:	4276      	negs	r6, r6
 80039f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fc:	485e      	ldr	r0, [pc, #376]	; (8003b78 <_printf_i+0x244>)
 80039fe:	230a      	movs	r3, #10
 8003a00:	e019      	b.n	8003a36 <_printf_i+0x102>
 8003a02:	680e      	ldr	r6, [r1, #0]
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a0a:	bf18      	it	ne
 8003a0c:	b236      	sxthne	r6, r6
 8003a0e:	e7ef      	b.n	80039f0 <_printf_i+0xbc>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	1d19      	adds	r1, r3, #4
 8003a16:	6029      	str	r1, [r5, #0]
 8003a18:	0601      	lsls	r1, r0, #24
 8003a1a:	d501      	bpl.n	8003a20 <_printf_i+0xec>
 8003a1c:	681e      	ldr	r6, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <_printf_i+0xf2>
 8003a20:	0646      	lsls	r6, r0, #25
 8003a22:	d5fb      	bpl.n	8003a1c <_printf_i+0xe8>
 8003a24:	881e      	ldrh	r6, [r3, #0]
 8003a26:	4854      	ldr	r0, [pc, #336]	; (8003b78 <_printf_i+0x244>)
 8003a28:	2f6f      	cmp	r7, #111	; 0x6f
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2308      	moveq	r3, #8
 8003a2e:	230a      	movne	r3, #10
 8003a30:	2100      	movs	r1, #0
 8003a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a36:	6865      	ldr	r5, [r4, #4]
 8003a38:	60a5      	str	r5, [r4, #8]
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	bfa2      	ittt	ge
 8003a3e:	6821      	ldrge	r1, [r4, #0]
 8003a40:	f021 0104 	bicge.w	r1, r1, #4
 8003a44:	6021      	strge	r1, [r4, #0]
 8003a46:	b90e      	cbnz	r6, 8003a4c <_printf_i+0x118>
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	d04d      	beq.n	8003ae8 <_printf_i+0x1b4>
 8003a4c:	4615      	mov	r5, r2
 8003a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a52:	fb03 6711 	mls	r7, r3, r1, r6
 8003a56:	5dc7      	ldrb	r7, [r0, r7]
 8003a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a5c:	4637      	mov	r7, r6
 8003a5e:	42bb      	cmp	r3, r7
 8003a60:	460e      	mov	r6, r1
 8003a62:	d9f4      	bls.n	8003a4e <_printf_i+0x11a>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d10b      	bne.n	8003a80 <_printf_i+0x14c>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	07de      	lsls	r6, r3, #31
 8003a6c:	d508      	bpl.n	8003a80 <_printf_i+0x14c>
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	6861      	ldr	r1, [r4, #4]
 8003a72:	4299      	cmp	r1, r3
 8003a74:	bfde      	ittt	le
 8003a76:	2330      	movle	r3, #48	; 0x30
 8003a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a80:	1b52      	subs	r2, r2, r5
 8003a82:	6122      	str	r2, [r4, #16]
 8003a84:	f8cd a000 	str.w	sl, [sp]
 8003a88:	464b      	mov	r3, r9
 8003a8a:	aa03      	add	r2, sp, #12
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f7ff fee2 	bl	8003858 <_printf_common>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d14c      	bne.n	8003b32 <_printf_i+0x1fe>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9c:	b004      	add	sp, #16
 8003a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa2:	4835      	ldr	r0, [pc, #212]	; (8003b78 <_printf_i+0x244>)
 8003aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aa8:	6829      	ldr	r1, [r5, #0]
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ab0:	6029      	str	r1, [r5, #0]
 8003ab2:	061d      	lsls	r5, r3, #24
 8003ab4:	d514      	bpl.n	8003ae0 <_printf_i+0x1ac>
 8003ab6:	07df      	lsls	r7, r3, #31
 8003ab8:	bf44      	itt	mi
 8003aba:	f043 0320 	orrmi.w	r3, r3, #32
 8003abe:	6023      	strmi	r3, [r4, #0]
 8003ac0:	b91e      	cbnz	r6, 8003aca <_printf_i+0x196>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f023 0320 	bic.w	r3, r3, #32
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	2310      	movs	r3, #16
 8003acc:	e7b0      	b.n	8003a30 <_printf_i+0xfc>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	f043 0320 	orr.w	r3, r3, #32
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	2378      	movs	r3, #120	; 0x78
 8003ad8:	4828      	ldr	r0, [pc, #160]	; (8003b7c <_printf_i+0x248>)
 8003ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ade:	e7e3      	b.n	8003aa8 <_printf_i+0x174>
 8003ae0:	0659      	lsls	r1, r3, #25
 8003ae2:	bf48      	it	mi
 8003ae4:	b2b6      	uxthmi	r6, r6
 8003ae6:	e7e6      	b.n	8003ab6 <_printf_i+0x182>
 8003ae8:	4615      	mov	r5, r2
 8003aea:	e7bb      	b.n	8003a64 <_printf_i+0x130>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	6826      	ldr	r6, [r4, #0]
 8003af0:	6961      	ldr	r1, [r4, #20]
 8003af2:	1d18      	adds	r0, r3, #4
 8003af4:	6028      	str	r0, [r5, #0]
 8003af6:	0635      	lsls	r5, r6, #24
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0x1cc>
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0x1d2>
 8003b00:	0670      	lsls	r0, r6, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0x1c8>
 8003b04:	8019      	strh	r1, [r3, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	4615      	mov	r5, r2
 8003b0c:	e7ba      	b.n	8003a84 <_printf_i+0x150>
 8003b0e:	682b      	ldr	r3, [r5, #0]
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	681d      	ldr	r5, [r3, #0]
 8003b16:	6862      	ldr	r2, [r4, #4]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f7fc fd08 	bl	8000530 <memchr>
 8003b20:	b108      	cbz	r0, 8003b26 <_printf_i+0x1f2>
 8003b22:	1b40      	subs	r0, r0, r5
 8003b24:	6060      	str	r0, [r4, #4]
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	6123      	str	r3, [r4, #16]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b30:	e7a8      	b.n	8003a84 <_printf_i+0x150>
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	462a      	mov	r2, r5
 8003b36:	4649      	mov	r1, r9
 8003b38:	4640      	mov	r0, r8
 8003b3a:	47d0      	blx	sl
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d0ab      	beq.n	8003a98 <_printf_i+0x164>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	079b      	lsls	r3, r3, #30
 8003b44:	d413      	bmi.n	8003b6e <_printf_i+0x23a>
 8003b46:	68e0      	ldr	r0, [r4, #12]
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	bfb8      	it	lt
 8003b4e:	4618      	movlt	r0, r3
 8003b50:	e7a4      	b.n	8003a9c <_printf_i+0x168>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4632      	mov	r2, r6
 8003b56:	4649      	mov	r1, r9
 8003b58:	4640      	mov	r0, r8
 8003b5a:	47d0      	blx	sl
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d09b      	beq.n	8003a98 <_printf_i+0x164>
 8003b60:	3501      	adds	r5, #1
 8003b62:	68e3      	ldr	r3, [r4, #12]
 8003b64:	9903      	ldr	r1, [sp, #12]
 8003b66:	1a5b      	subs	r3, r3, r1
 8003b68:	42ab      	cmp	r3, r5
 8003b6a:	dcf2      	bgt.n	8003b52 <_printf_i+0x21e>
 8003b6c:	e7eb      	b.n	8003b46 <_printf_i+0x212>
 8003b6e:	2500      	movs	r5, #0
 8003b70:	f104 0619 	add.w	r6, r4, #25
 8003b74:	e7f5      	b.n	8003b62 <_printf_i+0x22e>
 8003b76:	bf00      	nop
 8003b78:	08012798 	.word	0x08012798
 8003b7c:	080127a9 	.word	0x080127a9

08003b80 <iprintf>:
 8003b80:	b40f      	push	{r0, r1, r2, r3}
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <iprintf+0x2c>)
 8003b84:	b513      	push	{r0, r1, r4, lr}
 8003b86:	681c      	ldr	r4, [r3, #0]
 8003b88:	b124      	cbz	r4, 8003b94 <iprintf+0x14>
 8003b8a:	69a3      	ldr	r3, [r4, #24]
 8003b8c:	b913      	cbnz	r3, 8003b94 <iprintf+0x14>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f001 fb06 	bl	80051a0 <__sinit>
 8003b94:	ab05      	add	r3, sp, #20
 8003b96:	9a04      	ldr	r2, [sp, #16]
 8003b98:	68a1      	ldr	r1, [r4, #8]
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f002 fa03 	bl	8005fa8 <_vfiprintf_r>
 8003ba2:	b002      	add	sp, #8
 8003ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba8:	b004      	add	sp, #16
 8003baa:	4770      	bx	lr
 8003bac:	200001b4 	.word	0x200001b4

08003bb0 <putchar>:
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <putchar+0x28>)
 8003bb2:	b513      	push	{r0, r1, r4, lr}
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	b134      	cbz	r4, 8003bc8 <putchar+0x18>
 8003bba:	69a3      	ldr	r3, [r4, #24]
 8003bbc:	b923      	cbnz	r3, 8003bc8 <putchar+0x18>
 8003bbe:	9001      	str	r0, [sp, #4]
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f001 faed 	bl	80051a0 <__sinit>
 8003bc6:	9901      	ldr	r1, [sp, #4]
 8003bc8:	68a2      	ldr	r2, [r4, #8]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	b002      	add	sp, #8
 8003bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd2:	f002 bb19 	b.w	8006208 <_putc_r>
 8003bd6:	bf00      	nop
 8003bd8:	200001b4 	.word	0x200001b4

08003bdc <_puts_r>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	460e      	mov	r6, r1
 8003be0:	4605      	mov	r5, r0
 8003be2:	b118      	cbz	r0, 8003bec <_puts_r+0x10>
 8003be4:	6983      	ldr	r3, [r0, #24]
 8003be6:	b90b      	cbnz	r3, 8003bec <_puts_r+0x10>
 8003be8:	f001 fada 	bl	80051a0 <__sinit>
 8003bec:	69ab      	ldr	r3, [r5, #24]
 8003bee:	68ac      	ldr	r4, [r5, #8]
 8003bf0:	b913      	cbnz	r3, 8003bf8 <_puts_r+0x1c>
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f001 fad4 	bl	80051a0 <__sinit>
 8003bf8:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <_puts_r+0xd0>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d120      	bne.n	8003c40 <_puts_r+0x64>
 8003bfe:	686c      	ldr	r4, [r5, #4]
 8003c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c02:	07db      	lsls	r3, r3, #31
 8003c04:	d405      	bmi.n	8003c12 <_puts_r+0x36>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	0598      	lsls	r0, r3, #22
 8003c0a:	d402      	bmi.n	8003c12 <_puts_r+0x36>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c0e:	f001 fb7c 	bl	800530a <__retarget_lock_acquire_recursive>
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	0719      	lsls	r1, r3, #28
 8003c16:	d51d      	bpl.n	8003c54 <_puts_r+0x78>
 8003c18:	6923      	ldr	r3, [r4, #16]
 8003c1a:	b1db      	cbz	r3, 8003c54 <_puts_r+0x78>
 8003c1c:	3e01      	subs	r6, #1
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c24:	3b01      	subs	r3, #1
 8003c26:	60a3      	str	r3, [r4, #8]
 8003c28:	bb39      	cbnz	r1, 8003c7a <_puts_r+0x9e>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da38      	bge.n	8003ca0 <_puts_r+0xc4>
 8003c2e:	4622      	mov	r2, r4
 8003c30:	210a      	movs	r1, #10
 8003c32:	4628      	mov	r0, r5
 8003c34:	f000 fa42 	bl	80040bc <__swbuf_r>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d011      	beq.n	8003c60 <_puts_r+0x84>
 8003c3c:	250a      	movs	r5, #10
 8003c3e:	e011      	b.n	8003c64 <_puts_r+0x88>
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <_puts_r+0xd4>)
 8003c42:	429c      	cmp	r4, r3
 8003c44:	d101      	bne.n	8003c4a <_puts_r+0x6e>
 8003c46:	68ac      	ldr	r4, [r5, #8]
 8003c48:	e7da      	b.n	8003c00 <_puts_r+0x24>
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <_puts_r+0xd8>)
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	bf08      	it	eq
 8003c50:	68ec      	ldreq	r4, [r5, #12]
 8003c52:	e7d5      	b.n	8003c00 <_puts_r+0x24>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 fa82 	bl	8004160 <__swsetup_r>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d0dd      	beq.n	8003c1c <_puts_r+0x40>
 8003c60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c66:	07da      	lsls	r2, r3, #31
 8003c68:	d405      	bmi.n	8003c76 <_puts_r+0x9a>
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	059b      	lsls	r3, r3, #22
 8003c6e:	d402      	bmi.n	8003c76 <_puts_r+0x9a>
 8003c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c72:	f001 fb4b 	bl	800530c <__retarget_lock_release_recursive>
 8003c76:	4628      	mov	r0, r5
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da04      	bge.n	8003c88 <_puts_r+0xac>
 8003c7e:	69a2      	ldr	r2, [r4, #24]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	dc06      	bgt.n	8003c92 <_puts_r+0xb6>
 8003c84:	290a      	cmp	r1, #10
 8003c86:	d004      	beq.n	8003c92 <_puts_r+0xb6>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	6022      	str	r2, [r4, #0]
 8003c8e:	7019      	strb	r1, [r3, #0]
 8003c90:	e7c5      	b.n	8003c1e <_puts_r+0x42>
 8003c92:	4622      	mov	r2, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	f000 fa11 	bl	80040bc <__swbuf_r>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d1bf      	bne.n	8003c1e <_puts_r+0x42>
 8003c9e:	e7df      	b.n	8003c60 <_puts_r+0x84>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	250a      	movs	r5, #10
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	6022      	str	r2, [r4, #0]
 8003ca8:	701d      	strb	r5, [r3, #0]
 8003caa:	e7db      	b.n	8003c64 <_puts_r+0x88>
 8003cac:	08012948 	.word	0x08012948
 8003cb0:	08012968 	.word	0x08012968
 8003cb4:	08012928 	.word	0x08012928

08003cb8 <puts>:
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <puts+0xc>)
 8003cba:	4601      	mov	r1, r0
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	f7ff bf8d 	b.w	8003bdc <_puts_r>
 8003cc2:	bf00      	nop
 8003cc4:	200001b4 	.word	0x200001b4

08003cc8 <setvbuf>:
 8003cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ccc:	461d      	mov	r5, r3
 8003cce:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <setvbuf+0x17c>)
 8003cd0:	681f      	ldr	r7, [r3, #0]
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	460e      	mov	r6, r1
 8003cd6:	4690      	mov	r8, r2
 8003cd8:	b127      	cbz	r7, 8003ce4 <setvbuf+0x1c>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	b913      	cbnz	r3, 8003ce4 <setvbuf+0x1c>
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f001 fa5e 	bl	80051a0 <__sinit>
 8003ce4:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <setvbuf+0x180>)
 8003ce6:	429c      	cmp	r4, r3
 8003ce8:	d167      	bne.n	8003dba <setvbuf+0xf2>
 8003cea:	687c      	ldr	r4, [r7, #4]
 8003cec:	f1b8 0f02 	cmp.w	r8, #2
 8003cf0:	d006      	beq.n	8003d00 <setvbuf+0x38>
 8003cf2:	f1b8 0f01 	cmp.w	r8, #1
 8003cf6:	f200 809f 	bhi.w	8003e38 <setvbuf+0x170>
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	f2c0 809c 	blt.w	8003e38 <setvbuf+0x170>
 8003d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d02:	07db      	lsls	r3, r3, #31
 8003d04:	d405      	bmi.n	8003d12 <setvbuf+0x4a>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	0598      	lsls	r0, r3, #22
 8003d0a:	d402      	bmi.n	8003d12 <setvbuf+0x4a>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0e:	f001 fafc 	bl	800530a <__retarget_lock_acquire_recursive>
 8003d12:	4621      	mov	r1, r4
 8003d14:	4638      	mov	r0, r7
 8003d16:	f001 f9af 	bl	8005078 <_fflush_r>
 8003d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d1c:	b141      	cbz	r1, 8003d30 <setvbuf+0x68>
 8003d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d22:	4299      	cmp	r1, r3
 8003d24:	d002      	beq.n	8003d2c <setvbuf+0x64>
 8003d26:	4638      	mov	r0, r7
 8003d28:	f001 ff12 	bl	8005b50 <_free_r>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	6363      	str	r3, [r4, #52]	; 0x34
 8003d30:	2300      	movs	r3, #0
 8003d32:	61a3      	str	r3, [r4, #24]
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	0619      	lsls	r1, r3, #24
 8003d3a:	d503      	bpl.n	8003d44 <setvbuf+0x7c>
 8003d3c:	6921      	ldr	r1, [r4, #16]
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f001 ff06 	bl	8005b50 <_free_r>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	f1b8 0f02 	cmp.w	r8, #2
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	d06c      	beq.n	8003e30 <setvbuf+0x168>
 8003d56:	ab01      	add	r3, sp, #4
 8003d58:	466a      	mov	r2, sp
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f001 fad6 	bl	800530e <__swhatbuf_r>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	4318      	orrs	r0, r3
 8003d66:	81a0      	strh	r0, [r4, #12]
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	d130      	bne.n	8003dce <setvbuf+0x106>
 8003d6c:	9d00      	ldr	r5, [sp, #0]
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f001 fb32 	bl	80053d8 <malloc>
 8003d74:	4606      	mov	r6, r0
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d155      	bne.n	8003e26 <setvbuf+0x15e>
 8003d7a:	f8dd 9000 	ldr.w	r9, [sp]
 8003d7e:	45a9      	cmp	r9, r5
 8003d80:	d14a      	bne.n	8003e18 <setvbuf+0x150>
 8003d82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d86:	2200      	movs	r2, #0
 8003d88:	60a2      	str	r2, [r4, #8]
 8003d8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	6122      	str	r2, [r4, #16]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d98:	6162      	str	r2, [r4, #20]
 8003d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	07d2      	lsls	r2, r2, #31
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	d405      	bmi.n	8003db2 <setvbuf+0xea>
 8003da6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003daa:	d102      	bne.n	8003db2 <setvbuf+0xea>
 8003dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dae:	f001 faad 	bl	800530c <__retarget_lock_release_recursive>
 8003db2:	4628      	mov	r0, r5
 8003db4:	b003      	add	sp, #12
 8003db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <setvbuf+0x184>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	d101      	bne.n	8003dc4 <setvbuf+0xfc>
 8003dc0:	68bc      	ldr	r4, [r7, #8]
 8003dc2:	e793      	b.n	8003cec <setvbuf+0x24>
 8003dc4:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <setvbuf+0x188>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	bf08      	it	eq
 8003dca:	68fc      	ldreq	r4, [r7, #12]
 8003dcc:	e78e      	b.n	8003cec <setvbuf+0x24>
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	d0cd      	beq.n	8003d6e <setvbuf+0xa6>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	b913      	cbnz	r3, 8003ddc <setvbuf+0x114>
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	f001 f9e2 	bl	80051a0 <__sinit>
 8003ddc:	f1b8 0f01 	cmp.w	r8, #1
 8003de0:	bf08      	it	eq
 8003de2:	89a3      	ldrheq	r3, [r4, #12]
 8003de4:	6026      	str	r6, [r4, #0]
 8003de6:	bf04      	itt	eq
 8003de8:	f043 0301 	orreq.w	r3, r3, #1
 8003dec:	81a3      	strheq	r3, [r4, #12]
 8003dee:	89a2      	ldrh	r2, [r4, #12]
 8003df0:	f012 0308 	ands.w	r3, r2, #8
 8003df4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003df8:	d01c      	beq.n	8003e34 <setvbuf+0x16c>
 8003dfa:	07d3      	lsls	r3, r2, #31
 8003dfc:	bf41      	itttt	mi
 8003dfe:	2300      	movmi	r3, #0
 8003e00:	426d      	negmi	r5, r5
 8003e02:	60a3      	strmi	r3, [r4, #8]
 8003e04:	61a5      	strmi	r5, [r4, #24]
 8003e06:	bf58      	it	pl
 8003e08:	60a5      	strpl	r5, [r4, #8]
 8003e0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e0c:	f015 0501 	ands.w	r5, r5, #1
 8003e10:	d115      	bne.n	8003e3e <setvbuf+0x176>
 8003e12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e16:	e7c8      	b.n	8003daa <setvbuf+0xe2>
 8003e18:	4648      	mov	r0, r9
 8003e1a:	f001 fadd 	bl	80053d8 <malloc>
 8003e1e:	4606      	mov	r6, r0
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0ae      	beq.n	8003d82 <setvbuf+0xba>
 8003e24:	464d      	mov	r5, r9
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	e7d0      	b.n	8003dd2 <setvbuf+0x10a>
 8003e30:	2500      	movs	r5, #0
 8003e32:	e7a8      	b.n	8003d86 <setvbuf+0xbe>
 8003e34:	60a3      	str	r3, [r4, #8]
 8003e36:	e7e8      	b.n	8003e0a <setvbuf+0x142>
 8003e38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e3c:	e7b9      	b.n	8003db2 <setvbuf+0xea>
 8003e3e:	2500      	movs	r5, #0
 8003e40:	e7b7      	b.n	8003db2 <setvbuf+0xea>
 8003e42:	bf00      	nop
 8003e44:	200001b4 	.word	0x200001b4
 8003e48:	08012948 	.word	0x08012948
 8003e4c:	08012968 	.word	0x08012968
 8003e50:	08012928 	.word	0x08012928

08003e54 <strcasecmp>:
 8003e54:	b530      	push	{r4, r5, lr}
 8003e56:	4d0b      	ldr	r5, [pc, #44]	; (8003e84 <strcasecmp+0x30>)
 8003e58:	4604      	mov	r4, r0
 8003e5a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e5e:	5d5a      	ldrb	r2, [r3, r5]
 8003e60:	f002 0203 	and.w	r2, r2, #3
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e6a:	5ca8      	ldrb	r0, [r5, r2]
 8003e6c:	f000 0003 	and.w	r0, r0, #3
 8003e70:	bf08      	it	eq
 8003e72:	3320      	addeq	r3, #32
 8003e74:	2801      	cmp	r0, #1
 8003e76:	bf08      	it	eq
 8003e78:	3220      	addeq	r2, #32
 8003e7a:	1a98      	subs	r0, r3, r2
 8003e7c:	d101      	bne.n	8003e82 <strcasecmp+0x2e>
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	d1eb      	bne.n	8003e5a <strcasecmp+0x6>
 8003e82:	bd30      	pop	{r4, r5, pc}
 8003e84:	08012684 	.word	0x08012684

08003e88 <strcpy>:
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e8e:	f803 2b01 	strb.w	r2, [r3], #1
 8003e92:	2a00      	cmp	r2, #0
 8003e94:	d1f9      	bne.n	8003e8a <strcpy+0x2>
 8003e96:	4770      	bx	lr

08003e98 <strtok>:
 8003e98:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <strtok+0x5c>)
 8003e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e9c:	681e      	ldr	r6, [r3, #0]
 8003e9e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b9fc      	cbnz	r4, 8003ee4 <strtok+0x4c>
 8003ea4:	2050      	movs	r0, #80	; 0x50
 8003ea6:	9101      	str	r1, [sp, #4]
 8003ea8:	f001 fa96 	bl	80053d8 <malloc>
 8003eac:	9901      	ldr	r1, [sp, #4]
 8003eae:	65b0      	str	r0, [r6, #88]	; 0x58
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	b920      	cbnz	r0, 8003ebe <strtok+0x26>
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <strtok+0x60>)
 8003eb6:	4811      	ldr	r0, [pc, #68]	; (8003efc <strtok+0x64>)
 8003eb8:	2157      	movs	r1, #87	; 0x57
 8003eba:	f000 f9bf 	bl	800423c <__assert_func>
 8003ebe:	e9c0 4400 	strd	r4, r4, [r0]
 8003ec2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ec6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003eca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ece:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003ed2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ed6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003eda:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003ede:	6184      	str	r4, [r0, #24]
 8003ee0:	7704      	strb	r4, [r0, #28]
 8003ee2:	6244      	str	r4, [r0, #36]	; 0x24
 8003ee4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4628      	mov	r0, r5
 8003eea:	b002      	add	sp, #8
 8003eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ef0:	f000 b806 	b.w	8003f00 <__strtok_r>
 8003ef4:	200001b4 	.word	0x200001b4
 8003ef8:	080127ba 	.word	0x080127ba
 8003efc:	080127d1 	.word	0x080127d1

08003f00 <__strtok_r>:
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b908      	cbnz	r0, 8003f08 <__strtok_r+0x8>
 8003f04:	6810      	ldr	r0, [r2, #0]
 8003f06:	b188      	cbz	r0, 8003f2c <__strtok_r+0x2c>
 8003f08:	4604      	mov	r4, r0
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f10:	460f      	mov	r7, r1
 8003f12:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f16:	b91e      	cbnz	r6, 8003f20 <__strtok_r+0x20>
 8003f18:	b965      	cbnz	r5, 8003f34 <__strtok_r+0x34>
 8003f1a:	6015      	str	r5, [r2, #0]
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	e005      	b.n	8003f2c <__strtok_r+0x2c>
 8003f20:	42b5      	cmp	r5, r6
 8003f22:	d1f6      	bne.n	8003f12 <__strtok_r+0x12>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f0      	bne.n	8003f0a <__strtok_r+0xa>
 8003f28:	6014      	str	r4, [r2, #0]
 8003f2a:	7003      	strb	r3, [r0, #0]
 8003f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2e:	461c      	mov	r4, r3
 8003f30:	e00c      	b.n	8003f4c <__strtok_r+0x4c>
 8003f32:	b915      	cbnz	r5, 8003f3a <__strtok_r+0x3a>
 8003f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f38:	460e      	mov	r6, r1
 8003f3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f3e:	42ab      	cmp	r3, r5
 8003f40:	d1f7      	bne.n	8003f32 <__strtok_r+0x32>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f3      	beq.n	8003f2e <__strtok_r+0x2e>
 8003f46:	2300      	movs	r3, #0
 8003f48:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f4c:	6014      	str	r4, [r2, #0]
 8003f4e:	e7ed      	b.n	8003f2c <__strtok_r+0x2c>

08003f50 <_strtoul_l.constprop.0>:
 8003f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f54:	4f36      	ldr	r7, [pc, #216]	; (8004030 <_strtoul_l.constprop.0+0xe0>)
 8003f56:	4686      	mov	lr, r0
 8003f58:	460d      	mov	r5, r1
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f60:	5de6      	ldrb	r6, [r4, r7]
 8003f62:	f016 0608 	ands.w	r6, r6, #8
 8003f66:	d1f8      	bne.n	8003f5a <_strtoul_l.constprop.0+0xa>
 8003f68:	2c2d      	cmp	r4, #45	; 0x2d
 8003f6a:	d12f      	bne.n	8003fcc <_strtoul_l.constprop.0+0x7c>
 8003f6c:	782c      	ldrb	r4, [r5, #0]
 8003f6e:	2601      	movs	r6, #1
 8003f70:	1c85      	adds	r5, r0, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d057      	beq.n	8004026 <_strtoul_l.constprop.0+0xd6>
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d109      	bne.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8003f7a:	2c30      	cmp	r4, #48	; 0x30
 8003f7c:	d107      	bne.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8003f7e:	7828      	ldrb	r0, [r5, #0]
 8003f80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003f84:	2858      	cmp	r0, #88	; 0x58
 8003f86:	d149      	bne.n	800401c <_strtoul_l.constprop.0+0xcc>
 8003f88:	786c      	ldrb	r4, [r5, #1]
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	3502      	adds	r5, #2
 8003f8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003f92:	2700      	movs	r7, #0
 8003f94:	fbb8 f8f3 	udiv	r8, r8, r3
 8003f98:	fb03 f908 	mul.w	r9, r3, r8
 8003f9c:	ea6f 0909 	mvn.w	r9, r9
 8003fa0:	4638      	mov	r0, r7
 8003fa2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003fa6:	f1bc 0f09 	cmp.w	ip, #9
 8003faa:	d814      	bhi.n	8003fd6 <_strtoul_l.constprop.0+0x86>
 8003fac:	4664      	mov	r4, ip
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	dd22      	ble.n	8003ff8 <_strtoul_l.constprop.0+0xa8>
 8003fb2:	2f00      	cmp	r7, #0
 8003fb4:	db1d      	blt.n	8003ff2 <_strtoul_l.constprop.0+0xa2>
 8003fb6:	4580      	cmp	r8, r0
 8003fb8:	d31b      	bcc.n	8003ff2 <_strtoul_l.constprop.0+0xa2>
 8003fba:	d101      	bne.n	8003fc0 <_strtoul_l.constprop.0+0x70>
 8003fbc:	45a1      	cmp	r9, r4
 8003fbe:	db18      	blt.n	8003ff2 <_strtoul_l.constprop.0+0xa2>
 8003fc0:	fb00 4003 	mla	r0, r0, r3, r4
 8003fc4:	2701      	movs	r7, #1
 8003fc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fca:	e7ea      	b.n	8003fa2 <_strtoul_l.constprop.0+0x52>
 8003fcc:	2c2b      	cmp	r4, #43	; 0x2b
 8003fce:	bf04      	itt	eq
 8003fd0:	782c      	ldrbeq	r4, [r5, #0]
 8003fd2:	1c85      	addeq	r5, r0, #2
 8003fd4:	e7cd      	b.n	8003f72 <_strtoul_l.constprop.0+0x22>
 8003fd6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003fda:	f1bc 0f19 	cmp.w	ip, #25
 8003fde:	d801      	bhi.n	8003fe4 <_strtoul_l.constprop.0+0x94>
 8003fe0:	3c37      	subs	r4, #55	; 0x37
 8003fe2:	e7e4      	b.n	8003fae <_strtoul_l.constprop.0+0x5e>
 8003fe4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003fe8:	f1bc 0f19 	cmp.w	ip, #25
 8003fec:	d804      	bhi.n	8003ff8 <_strtoul_l.constprop.0+0xa8>
 8003fee:	3c57      	subs	r4, #87	; 0x57
 8003ff0:	e7dd      	b.n	8003fae <_strtoul_l.constprop.0+0x5e>
 8003ff2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ff6:	e7e6      	b.n	8003fc6 <_strtoul_l.constprop.0+0x76>
 8003ff8:	2f00      	cmp	r7, #0
 8003ffa:	da07      	bge.n	800400c <_strtoul_l.constprop.0+0xbc>
 8003ffc:	2322      	movs	r3, #34	; 0x22
 8003ffe:	f8ce 3000 	str.w	r3, [lr]
 8004002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004006:	b932      	cbnz	r2, 8004016 <_strtoul_l.constprop.0+0xc6>
 8004008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800400c:	b106      	cbz	r6, 8004010 <_strtoul_l.constprop.0+0xc0>
 800400e:	4240      	negs	r0, r0
 8004010:	2a00      	cmp	r2, #0
 8004012:	d0f9      	beq.n	8004008 <_strtoul_l.constprop.0+0xb8>
 8004014:	b107      	cbz	r7, 8004018 <_strtoul_l.constprop.0+0xc8>
 8004016:	1e69      	subs	r1, r5, #1
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	e7f5      	b.n	8004008 <_strtoul_l.constprop.0+0xb8>
 800401c:	2430      	movs	r4, #48	; 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1b5      	bne.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8004022:	2308      	movs	r3, #8
 8004024:	e7b3      	b.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 8004026:	2c30      	cmp	r4, #48	; 0x30
 8004028:	d0a9      	beq.n	8003f7e <_strtoul_l.constprop.0+0x2e>
 800402a:	230a      	movs	r3, #10
 800402c:	e7af      	b.n	8003f8e <_strtoul_l.constprop.0+0x3e>
 800402e:	bf00      	nop
 8004030:	08012684 	.word	0x08012684

08004034 <strtoul>:
 8004034:	4613      	mov	r3, r2
 8004036:	460a      	mov	r2, r1
 8004038:	4601      	mov	r1, r0
 800403a:	4802      	ldr	r0, [pc, #8]	; (8004044 <strtoul+0x10>)
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f7ff bf87 	b.w	8003f50 <_strtoul_l.constprop.0>
 8004042:	bf00      	nop
 8004044:	200001b4 	.word	0x200001b4

08004048 <_vsniprintf_r>:
 8004048:	b530      	push	{r4, r5, lr}
 800404a:	4614      	mov	r4, r2
 800404c:	2c00      	cmp	r4, #0
 800404e:	b09b      	sub	sp, #108	; 0x6c
 8004050:	4605      	mov	r5, r0
 8004052:	461a      	mov	r2, r3
 8004054:	da05      	bge.n	8004062 <_vsniprintf_r+0x1a>
 8004056:	238b      	movs	r3, #139	; 0x8b
 8004058:	6003      	str	r3, [r0, #0]
 800405a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800405e:	b01b      	add	sp, #108	; 0x6c
 8004060:	bd30      	pop	{r4, r5, pc}
 8004062:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004066:	f8ad 300c 	strh.w	r3, [sp, #12]
 800406a:	bf14      	ite	ne
 800406c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004070:	4623      	moveq	r3, r4
 8004072:	9302      	str	r3, [sp, #8]
 8004074:	9305      	str	r3, [sp, #20]
 8004076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800407a:	9100      	str	r1, [sp, #0]
 800407c:	9104      	str	r1, [sp, #16]
 800407e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004082:	4669      	mov	r1, sp
 8004084:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004086:	f001 fe65 	bl	8005d54 <_svfiprintf_r>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	bfbc      	itt	lt
 800408e:	238b      	movlt	r3, #139	; 0x8b
 8004090:	602b      	strlt	r3, [r5, #0]
 8004092:	2c00      	cmp	r4, #0
 8004094:	d0e3      	beq.n	800405e <_vsniprintf_r+0x16>
 8004096:	9b00      	ldr	r3, [sp, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e7df      	b.n	800405e <_vsniprintf_r+0x16>
	...

080040a0 <vsniprintf>:
 80040a0:	b507      	push	{r0, r1, r2, lr}
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	460a      	mov	r2, r1
 80040a8:	4601      	mov	r1, r0
 80040aa:	4803      	ldr	r0, [pc, #12]	; (80040b8 <vsniprintf+0x18>)
 80040ac:	6800      	ldr	r0, [r0, #0]
 80040ae:	f7ff ffcb 	bl	8004048 <_vsniprintf_r>
 80040b2:	b003      	add	sp, #12
 80040b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80040b8:	200001b4 	.word	0x200001b4

080040bc <__swbuf_r>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	4605      	mov	r5, r0
 80040c4:	b118      	cbz	r0, 80040ce <__swbuf_r+0x12>
 80040c6:	6983      	ldr	r3, [r0, #24]
 80040c8:	b90b      	cbnz	r3, 80040ce <__swbuf_r+0x12>
 80040ca:	f001 f869 	bl	80051a0 <__sinit>
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <__swbuf_r+0x98>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d12b      	bne.n	800412c <__swbuf_r+0x70>
 80040d4:	686c      	ldr	r4, [r5, #4]
 80040d6:	69a3      	ldr	r3, [r4, #24]
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	071a      	lsls	r2, r3, #28
 80040de:	d52f      	bpl.n	8004140 <__swbuf_r+0x84>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	b36b      	cbz	r3, 8004140 <__swbuf_r+0x84>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	1ac0      	subs	r0, r0, r3
 80040ea:	6963      	ldr	r3, [r4, #20]
 80040ec:	b2f6      	uxtb	r6, r6
 80040ee:	4283      	cmp	r3, r0
 80040f0:	4637      	mov	r7, r6
 80040f2:	dc04      	bgt.n	80040fe <__swbuf_r+0x42>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 ffbe 	bl	8005078 <_fflush_r>
 80040fc:	bb30      	cbnz	r0, 800414c <__swbuf_r+0x90>
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	3b01      	subs	r3, #1
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	6022      	str	r2, [r4, #0]
 800410a:	701e      	strb	r6, [r3, #0]
 800410c:	6963      	ldr	r3, [r4, #20]
 800410e:	3001      	adds	r0, #1
 8004110:	4283      	cmp	r3, r0
 8004112:	d004      	beq.n	800411e <__swbuf_r+0x62>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	07db      	lsls	r3, r3, #31
 8004118:	d506      	bpl.n	8004128 <__swbuf_r+0x6c>
 800411a:	2e0a      	cmp	r6, #10
 800411c:	d104      	bne.n	8004128 <__swbuf_r+0x6c>
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 ffa9 	bl	8005078 <_fflush_r>
 8004126:	b988      	cbnz	r0, 800414c <__swbuf_r+0x90>
 8004128:	4638      	mov	r0, r7
 800412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <__swbuf_r+0x9c>)
 800412e:	429c      	cmp	r4, r3
 8004130:	d101      	bne.n	8004136 <__swbuf_r+0x7a>
 8004132:	68ac      	ldr	r4, [r5, #8]
 8004134:	e7cf      	b.n	80040d6 <__swbuf_r+0x1a>
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <__swbuf_r+0xa0>)
 8004138:	429c      	cmp	r4, r3
 800413a:	bf08      	it	eq
 800413c:	68ec      	ldreq	r4, [r5, #12]
 800413e:	e7ca      	b.n	80040d6 <__swbuf_r+0x1a>
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f80c 	bl	8004160 <__swsetup_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	d0cb      	beq.n	80040e4 <__swbuf_r+0x28>
 800414c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004150:	e7ea      	b.n	8004128 <__swbuf_r+0x6c>
 8004152:	bf00      	nop
 8004154:	08012948 	.word	0x08012948
 8004158:	08012968 	.word	0x08012968
 800415c:	08012928 	.word	0x08012928

08004160 <__swsetup_r>:
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <__swsetup_r+0xcc>)
 8004162:	b570      	push	{r4, r5, r6, lr}
 8004164:	681d      	ldr	r5, [r3, #0]
 8004166:	4606      	mov	r6, r0
 8004168:	460c      	mov	r4, r1
 800416a:	b125      	cbz	r5, 8004176 <__swsetup_r+0x16>
 800416c:	69ab      	ldr	r3, [r5, #24]
 800416e:	b913      	cbnz	r3, 8004176 <__swsetup_r+0x16>
 8004170:	4628      	mov	r0, r5
 8004172:	f001 f815 	bl	80051a0 <__sinit>
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <__swsetup_r+0xd0>)
 8004178:	429c      	cmp	r4, r3
 800417a:	d10f      	bne.n	800419c <__swsetup_r+0x3c>
 800417c:	686c      	ldr	r4, [r5, #4]
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004184:	0719      	lsls	r1, r3, #28
 8004186:	d42c      	bmi.n	80041e2 <__swsetup_r+0x82>
 8004188:	06dd      	lsls	r5, r3, #27
 800418a:	d411      	bmi.n	80041b0 <__swsetup_r+0x50>
 800418c:	2309      	movs	r3, #9
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800419a:	e03e      	b.n	800421a <__swsetup_r+0xba>
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <__swsetup_r+0xd4>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	d101      	bne.n	80041a6 <__swsetup_r+0x46>
 80041a2:	68ac      	ldr	r4, [r5, #8]
 80041a4:	e7eb      	b.n	800417e <__swsetup_r+0x1e>
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <__swsetup_r+0xd8>)
 80041a8:	429c      	cmp	r4, r3
 80041aa:	bf08      	it	eq
 80041ac:	68ec      	ldreq	r4, [r5, #12]
 80041ae:	e7e6      	b.n	800417e <__swsetup_r+0x1e>
 80041b0:	0758      	lsls	r0, r3, #29
 80041b2:	d512      	bpl.n	80041da <__swsetup_r+0x7a>
 80041b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b6:	b141      	cbz	r1, 80041ca <__swsetup_r+0x6a>
 80041b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041bc:	4299      	cmp	r1, r3
 80041be:	d002      	beq.n	80041c6 <__swsetup_r+0x66>
 80041c0:	4630      	mov	r0, r6
 80041c2:	f001 fcc5 	bl	8005b50 <_free_r>
 80041c6:	2300      	movs	r3, #0
 80041c8:	6363      	str	r3, [r4, #52]	; 0x34
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	2300      	movs	r3, #0
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	b94b      	cbnz	r3, 80041fa <__swsetup_r+0x9a>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d003      	beq.n	80041fa <__swsetup_r+0x9a>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4630      	mov	r0, r6
 80041f6:	f001 f8af 	bl	8005358 <__smakebuf_r>
 80041fa:	89a0      	ldrh	r0, [r4, #12]
 80041fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004200:	f010 0301 	ands.w	r3, r0, #1
 8004204:	d00a      	beq.n	800421c <__swsetup_r+0xbc>
 8004206:	2300      	movs	r3, #0
 8004208:	60a3      	str	r3, [r4, #8]
 800420a:	6963      	ldr	r3, [r4, #20]
 800420c:	425b      	negs	r3, r3
 800420e:	61a3      	str	r3, [r4, #24]
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	b943      	cbnz	r3, 8004226 <__swsetup_r+0xc6>
 8004214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004218:	d1ba      	bne.n	8004190 <__swsetup_r+0x30>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	0781      	lsls	r1, r0, #30
 800421e:	bf58      	it	pl
 8004220:	6963      	ldrpl	r3, [r4, #20]
 8004222:	60a3      	str	r3, [r4, #8]
 8004224:	e7f4      	b.n	8004210 <__swsetup_r+0xb0>
 8004226:	2000      	movs	r0, #0
 8004228:	e7f7      	b.n	800421a <__swsetup_r+0xba>
 800422a:	bf00      	nop
 800422c:	200001b4 	.word	0x200001b4
 8004230:	08012948 	.word	0x08012948
 8004234:	08012968 	.word	0x08012968
 8004238:	08012928 	.word	0x08012928

0800423c <__assert_func>:
 800423c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800423e:	4614      	mov	r4, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <__assert_func+0x2c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4605      	mov	r5, r0
 8004248:	68d8      	ldr	r0, [r3, #12]
 800424a:	b14c      	cbz	r4, 8004260 <__assert_func+0x24>
 800424c:	4b07      	ldr	r3, [pc, #28]	; (800426c <__assert_func+0x30>)
 800424e:	9100      	str	r1, [sp, #0]
 8004250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004254:	4906      	ldr	r1, [pc, #24]	; (8004270 <__assert_func+0x34>)
 8004256:	462b      	mov	r3, r5
 8004258:	f001 f820 	bl	800529c <fiprintf>
 800425c:	f002 f86c 	bl	8006338 <abort>
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__assert_func+0x38>)
 8004262:	461c      	mov	r4, r3
 8004264:	e7f3      	b.n	800424e <__assert_func+0x12>
 8004266:	bf00      	nop
 8004268:	200001b4 	.word	0x200001b4
 800426c:	08012850 	.word	0x08012850
 8004270:	0801285d 	.word	0x0801285d
 8004274:	08008d8f 	.word	0x08008d8f

08004278 <quorem>:
 8004278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	6903      	ldr	r3, [r0, #16]
 800427e:	690c      	ldr	r4, [r1, #16]
 8004280:	42a3      	cmp	r3, r4
 8004282:	4607      	mov	r7, r0
 8004284:	f2c0 8081 	blt.w	800438a <quorem+0x112>
 8004288:	3c01      	subs	r4, #1
 800428a:	f101 0814 	add.w	r8, r1, #20
 800428e:	f100 0514 	add.w	r5, r0, #20
 8004292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800429c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042a0:	3301      	adds	r3, #1
 80042a2:	429a      	cmp	r2, r3
 80042a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80042b0:	d331      	bcc.n	8004316 <quorem+0x9e>
 80042b2:	f04f 0e00 	mov.w	lr, #0
 80042b6:	4640      	mov	r0, r8
 80042b8:	46ac      	mov	ip, r5
 80042ba:	46f2      	mov	sl, lr
 80042bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80042c0:	b293      	uxth	r3, r2
 80042c2:	fb06 e303 	mla	r3, r6, r3, lr
 80042c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	ebaa 0303 	sub.w	r3, sl, r3
 80042d0:	0c12      	lsrs	r2, r2, #16
 80042d2:	f8dc a000 	ldr.w	sl, [ip]
 80042d6:	fb06 e202 	mla	r2, r6, r2, lr
 80042da:	fa13 f38a 	uxtah	r3, r3, sl
 80042de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042e2:	fa1f fa82 	uxth.w	sl, r2
 80042e6:	f8dc 2000 	ldr.w	r2, [ip]
 80042ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80042ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042f8:	4581      	cmp	r9, r0
 80042fa:	f84c 3b04 	str.w	r3, [ip], #4
 80042fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004302:	d2db      	bcs.n	80042bc <quorem+0x44>
 8004304:	f855 300b 	ldr.w	r3, [r5, fp]
 8004308:	b92b      	cbnz	r3, 8004316 <quorem+0x9e>
 800430a:	9b01      	ldr	r3, [sp, #4]
 800430c:	3b04      	subs	r3, #4
 800430e:	429d      	cmp	r5, r3
 8004310:	461a      	mov	r2, r3
 8004312:	d32e      	bcc.n	8004372 <quorem+0xfa>
 8004314:	613c      	str	r4, [r7, #16]
 8004316:	4638      	mov	r0, r7
 8004318:	f001 fb08 	bl	800592c <__mcmp>
 800431c:	2800      	cmp	r0, #0
 800431e:	db24      	blt.n	800436a <quorem+0xf2>
 8004320:	3601      	adds	r6, #1
 8004322:	4628      	mov	r0, r5
 8004324:	f04f 0c00 	mov.w	ip, #0
 8004328:	f858 2b04 	ldr.w	r2, [r8], #4
 800432c:	f8d0 e000 	ldr.w	lr, [r0]
 8004330:	b293      	uxth	r3, r2
 8004332:	ebac 0303 	sub.w	r3, ip, r3
 8004336:	0c12      	lsrs	r2, r2, #16
 8004338:	fa13 f38e 	uxtah	r3, r3, lr
 800433c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004344:	b29b      	uxth	r3, r3
 8004346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800434a:	45c1      	cmp	r9, r8
 800434c:	f840 3b04 	str.w	r3, [r0], #4
 8004350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004354:	d2e8      	bcs.n	8004328 <quorem+0xb0>
 8004356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800435a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800435e:	b922      	cbnz	r2, 800436a <quorem+0xf2>
 8004360:	3b04      	subs	r3, #4
 8004362:	429d      	cmp	r5, r3
 8004364:	461a      	mov	r2, r3
 8004366:	d30a      	bcc.n	800437e <quorem+0x106>
 8004368:	613c      	str	r4, [r7, #16]
 800436a:	4630      	mov	r0, r6
 800436c:	b003      	add	sp, #12
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	3b04      	subs	r3, #4
 8004376:	2a00      	cmp	r2, #0
 8004378:	d1cc      	bne.n	8004314 <quorem+0x9c>
 800437a:	3c01      	subs	r4, #1
 800437c:	e7c7      	b.n	800430e <quorem+0x96>
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	3b04      	subs	r3, #4
 8004382:	2a00      	cmp	r2, #0
 8004384:	d1f0      	bne.n	8004368 <quorem+0xf0>
 8004386:	3c01      	subs	r4, #1
 8004388:	e7eb      	b.n	8004362 <quorem+0xea>
 800438a:	2000      	movs	r0, #0
 800438c:	e7ee      	b.n	800436c <quorem+0xf4>
	...

08004390 <_dtoa_r>:
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	ed2d 8b04 	vpush	{d8-d9}
 8004398:	ec57 6b10 	vmov	r6, r7, d0
 800439c:	b093      	sub	sp, #76	; 0x4c
 800439e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043a4:	9106      	str	r1, [sp, #24]
 80043a6:	ee10 aa10 	vmov	sl, s0
 80043aa:	4604      	mov	r4, r0
 80043ac:	9209      	str	r2, [sp, #36]	; 0x24
 80043ae:	930c      	str	r3, [sp, #48]	; 0x30
 80043b0:	46bb      	mov	fp, r7
 80043b2:	b975      	cbnz	r5, 80043d2 <_dtoa_r+0x42>
 80043b4:	2010      	movs	r0, #16
 80043b6:	f001 f80f 	bl	80053d8 <malloc>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6260      	str	r0, [r4, #36]	; 0x24
 80043be:	b920      	cbnz	r0, 80043ca <_dtoa_r+0x3a>
 80043c0:	4ba7      	ldr	r3, [pc, #668]	; (8004660 <_dtoa_r+0x2d0>)
 80043c2:	21ea      	movs	r1, #234	; 0xea
 80043c4:	48a7      	ldr	r0, [pc, #668]	; (8004664 <_dtoa_r+0x2d4>)
 80043c6:	f7ff ff39 	bl	800423c <__assert_func>
 80043ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043ce:	6005      	str	r5, [r0, #0]
 80043d0:	60c5      	str	r5, [r0, #12]
 80043d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	b151      	cbz	r1, 80043ee <_dtoa_r+0x5e>
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	604a      	str	r2, [r1, #4]
 80043dc:	2301      	movs	r3, #1
 80043de:	4093      	lsls	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
 80043e2:	4620      	mov	r0, r4
 80043e4:	f001 f860 	bl	80054a8 <_Bfree>
 80043e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	1e3b      	subs	r3, r7, #0
 80043f0:	bfaa      	itet	ge
 80043f2:	2300      	movge	r3, #0
 80043f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80043f8:	f8c8 3000 	strge.w	r3, [r8]
 80043fc:	4b9a      	ldr	r3, [pc, #616]	; (8004668 <_dtoa_r+0x2d8>)
 80043fe:	bfbc      	itt	lt
 8004400:	2201      	movlt	r2, #1
 8004402:	f8c8 2000 	strlt.w	r2, [r8]
 8004406:	ea33 030b 	bics.w	r3, r3, fp
 800440a:	d11b      	bne.n	8004444 <_dtoa_r+0xb4>
 800440c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800440e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004418:	4333      	orrs	r3, r6
 800441a:	f000 8592 	beq.w	8004f42 <_dtoa_r+0xbb2>
 800441e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004420:	b963      	cbnz	r3, 800443c <_dtoa_r+0xac>
 8004422:	4b92      	ldr	r3, [pc, #584]	; (800466c <_dtoa_r+0x2dc>)
 8004424:	e022      	b.n	800446c <_dtoa_r+0xdc>
 8004426:	4b92      	ldr	r3, [pc, #584]	; (8004670 <_dtoa_r+0x2e0>)
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	3308      	adds	r3, #8
 800442c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	9801      	ldr	r0, [sp, #4]
 8004432:	b013      	add	sp, #76	; 0x4c
 8004434:	ecbd 8b04 	vpop	{d8-d9}
 8004438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443c:	4b8b      	ldr	r3, [pc, #556]	; (800466c <_dtoa_r+0x2dc>)
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	3303      	adds	r3, #3
 8004442:	e7f3      	b.n	800442c <_dtoa_r+0x9c>
 8004444:	2200      	movs	r2, #0
 8004446:	2300      	movs	r3, #0
 8004448:	4650      	mov	r0, sl
 800444a:	4659      	mov	r1, fp
 800444c:	f7fc fce4 	bl	8000e18 <__aeabi_dcmpeq>
 8004450:	ec4b ab19 	vmov	d9, sl, fp
 8004454:	4680      	mov	r8, r0
 8004456:	b158      	cbz	r0, 8004470 <_dtoa_r+0xe0>
 8004458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800445a:	2301      	movs	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 856b 	beq.w	8004f3c <_dtoa_r+0xbac>
 8004466:	4883      	ldr	r0, [pc, #524]	; (8004674 <_dtoa_r+0x2e4>)
 8004468:	6018      	str	r0, [r3, #0]
 800446a:	1e43      	subs	r3, r0, #1
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	e7df      	b.n	8004430 <_dtoa_r+0xa0>
 8004470:	ec4b ab10 	vmov	d0, sl, fp
 8004474:	aa10      	add	r2, sp, #64	; 0x40
 8004476:	a911      	add	r1, sp, #68	; 0x44
 8004478:	4620      	mov	r0, r4
 800447a:	f001 fafd 	bl	8005a78 <__d2b>
 800447e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004482:	ee08 0a10 	vmov	s16, r0
 8004486:	2d00      	cmp	r5, #0
 8004488:	f000 8084 	beq.w	8004594 <_dtoa_r+0x204>
 800448c:	ee19 3a90 	vmov	r3, s19
 8004490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004494:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004498:	4656      	mov	r6, sl
 800449a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800449e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80044a6:	4b74      	ldr	r3, [pc, #464]	; (8004678 <_dtoa_r+0x2e8>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	4630      	mov	r0, r6
 80044ac:	4639      	mov	r1, r7
 80044ae:	f7fc f893 	bl	80005d8 <__aeabi_dsub>
 80044b2:	a365      	add	r3, pc, #404	; (adr r3, 8004648 <_dtoa_r+0x2b8>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fc fa46 	bl	8000948 <__aeabi_dmul>
 80044bc:	a364      	add	r3, pc, #400	; (adr r3, 8004650 <_dtoa_r+0x2c0>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fc f88b 	bl	80005dc <__adddf3>
 80044c6:	4606      	mov	r6, r0
 80044c8:	4628      	mov	r0, r5
 80044ca:	460f      	mov	r7, r1
 80044cc:	f7fc f9d2 	bl	8000874 <__aeabi_i2d>
 80044d0:	a361      	add	r3, pc, #388	; (adr r3, 8004658 <_dtoa_r+0x2c8>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc fa37 	bl	8000948 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4630      	mov	r0, r6
 80044e0:	4639      	mov	r1, r7
 80044e2:	f7fc f87b 	bl	80005dc <__adddf3>
 80044e6:	4606      	mov	r6, r0
 80044e8:	460f      	mov	r7, r1
 80044ea:	f7fc fcdd 	bl	8000ea8 <__aeabi_d2iz>
 80044ee:	2200      	movs	r2, #0
 80044f0:	9000      	str	r0, [sp, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	4630      	mov	r0, r6
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fc fc98 	bl	8000e2c <__aeabi_dcmplt>
 80044fc:	b150      	cbz	r0, 8004514 <_dtoa_r+0x184>
 80044fe:	9800      	ldr	r0, [sp, #0]
 8004500:	f7fc f9b8 	bl	8000874 <__aeabi_i2d>
 8004504:	4632      	mov	r2, r6
 8004506:	463b      	mov	r3, r7
 8004508:	f7fc fc86 	bl	8000e18 <__aeabi_dcmpeq>
 800450c:	b910      	cbnz	r0, 8004514 <_dtoa_r+0x184>
 800450e:	9b00      	ldr	r3, [sp, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	9b00      	ldr	r3, [sp, #0]
 8004516:	2b16      	cmp	r3, #22
 8004518:	d85a      	bhi.n	80045d0 <_dtoa_r+0x240>
 800451a:	9a00      	ldr	r2, [sp, #0]
 800451c:	4b57      	ldr	r3, [pc, #348]	; (800467c <_dtoa_r+0x2ec>)
 800451e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	ec51 0b19 	vmov	r0, r1, d9
 800452a:	f7fc fc7f 	bl	8000e2c <__aeabi_dcmplt>
 800452e:	2800      	cmp	r0, #0
 8004530:	d050      	beq.n	80045d4 <_dtoa_r+0x244>
 8004532:	9b00      	ldr	r3, [sp, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2300      	movs	r3, #0
 800453a:	930b      	str	r3, [sp, #44]	; 0x2c
 800453c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800453e:	1b5d      	subs	r5, r3, r5
 8004540:	1e6b      	subs	r3, r5, #1
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	bf45      	ittet	mi
 8004546:	f1c5 0301 	rsbmi	r3, r5, #1
 800454a:	9304      	strmi	r3, [sp, #16]
 800454c:	2300      	movpl	r3, #0
 800454e:	2300      	movmi	r3, #0
 8004550:	bf4c      	ite	mi
 8004552:	9305      	strmi	r3, [sp, #20]
 8004554:	9304      	strpl	r3, [sp, #16]
 8004556:	9b00      	ldr	r3, [sp, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db3d      	blt.n	80045d8 <_dtoa_r+0x248>
 800455c:	9b05      	ldr	r3, [sp, #20]
 800455e:	9a00      	ldr	r2, [sp, #0]
 8004560:	920a      	str	r2, [sp, #40]	; 0x28
 8004562:	4413      	add	r3, r2
 8004564:	9305      	str	r3, [sp, #20]
 8004566:	2300      	movs	r3, #0
 8004568:	9307      	str	r3, [sp, #28]
 800456a:	9b06      	ldr	r3, [sp, #24]
 800456c:	2b09      	cmp	r3, #9
 800456e:	f200 8089 	bhi.w	8004684 <_dtoa_r+0x2f4>
 8004572:	2b05      	cmp	r3, #5
 8004574:	bfc4      	itt	gt
 8004576:	3b04      	subgt	r3, #4
 8004578:	9306      	strgt	r3, [sp, #24]
 800457a:	9b06      	ldr	r3, [sp, #24]
 800457c:	f1a3 0302 	sub.w	r3, r3, #2
 8004580:	bfcc      	ite	gt
 8004582:	2500      	movgt	r5, #0
 8004584:	2501      	movle	r5, #1
 8004586:	2b03      	cmp	r3, #3
 8004588:	f200 8087 	bhi.w	800469a <_dtoa_r+0x30a>
 800458c:	e8df f003 	tbb	[pc, r3]
 8004590:	59383a2d 	.word	0x59383a2d
 8004594:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004598:	441d      	add	r5, r3
 800459a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800459e:	2b20      	cmp	r3, #32
 80045a0:	bfc1      	itttt	gt
 80045a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80045aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80045ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045b2:	bfda      	itte	le
 80045b4:	f1c3 0320 	rsble	r3, r3, #32
 80045b8:	fa06 f003 	lslle.w	r0, r6, r3
 80045bc:	4318      	orrgt	r0, r3
 80045be:	f7fc f949 	bl	8000854 <__aeabi_ui2d>
 80045c2:	2301      	movs	r3, #1
 80045c4:	4606      	mov	r6, r0
 80045c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80045ca:	3d01      	subs	r5, #1
 80045cc:	930e      	str	r3, [sp, #56]	; 0x38
 80045ce:	e76a      	b.n	80044a6 <_dtoa_r+0x116>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e7b2      	b.n	800453a <_dtoa_r+0x1aa>
 80045d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80045d6:	e7b1      	b.n	800453c <_dtoa_r+0x1ac>
 80045d8:	9b04      	ldr	r3, [sp, #16]
 80045da:	9a00      	ldr	r2, [sp, #0]
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	4253      	negs	r3, r2
 80045e2:	9307      	str	r3, [sp, #28]
 80045e4:	2300      	movs	r3, #0
 80045e6:	930a      	str	r3, [sp, #40]	; 0x28
 80045e8:	e7bf      	b.n	800456a <_dtoa_r+0x1da>
 80045ea:	2300      	movs	r3, #0
 80045ec:	9308      	str	r3, [sp, #32]
 80045ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dc55      	bgt.n	80046a0 <_dtoa_r+0x310>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80045fa:	461a      	mov	r2, r3
 80045fc:	9209      	str	r2, [sp, #36]	; 0x24
 80045fe:	e00c      	b.n	800461a <_dtoa_r+0x28a>
 8004600:	2301      	movs	r3, #1
 8004602:	e7f3      	b.n	80045ec <_dtoa_r+0x25c>
 8004604:	2300      	movs	r3, #0
 8004606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004608:	9308      	str	r3, [sp, #32]
 800460a:	9b00      	ldr	r3, [sp, #0]
 800460c:	4413      	add	r3, r2
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	3301      	adds	r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	bfb8      	it	lt
 8004618:	2301      	movlt	r3, #1
 800461a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800461c:	2200      	movs	r2, #0
 800461e:	6042      	str	r2, [r0, #4]
 8004620:	2204      	movs	r2, #4
 8004622:	f102 0614 	add.w	r6, r2, #20
 8004626:	429e      	cmp	r6, r3
 8004628:	6841      	ldr	r1, [r0, #4]
 800462a:	d93d      	bls.n	80046a8 <_dtoa_r+0x318>
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fefb 	bl	8005428 <_Balloc>
 8004632:	9001      	str	r0, [sp, #4]
 8004634:	2800      	cmp	r0, #0
 8004636:	d13b      	bne.n	80046b0 <_dtoa_r+0x320>
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <_dtoa_r+0x2f0>)
 800463a:	4602      	mov	r2, r0
 800463c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004640:	e6c0      	b.n	80043c4 <_dtoa_r+0x34>
 8004642:	2301      	movs	r3, #1
 8004644:	e7df      	b.n	8004606 <_dtoa_r+0x276>
 8004646:	bf00      	nop
 8004648:	636f4361 	.word	0x636f4361
 800464c:	3fd287a7 	.word	0x3fd287a7
 8004650:	8b60c8b3 	.word	0x8b60c8b3
 8004654:	3fc68a28 	.word	0x3fc68a28
 8004658:	509f79fb 	.word	0x509f79fb
 800465c:	3fd34413 	.word	0x3fd34413
 8004660:	080127ba 	.word	0x080127ba
 8004664:	08012899 	.word	0x08012899
 8004668:	7ff00000 	.word	0x7ff00000
 800466c:	08012895 	.word	0x08012895
 8004670:	0801288c 	.word	0x0801288c
 8004674:	08008698 	.word	0x08008698
 8004678:	3ff80000 	.word	0x3ff80000
 800467c:	08012a38 	.word	0x08012a38
 8004680:	08012916 	.word	0x08012916
 8004684:	2501      	movs	r5, #1
 8004686:	2300      	movs	r3, #0
 8004688:	9306      	str	r3, [sp, #24]
 800468a:	9508      	str	r5, [sp, #32]
 800468c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004690:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004694:	2200      	movs	r2, #0
 8004696:	2312      	movs	r3, #18
 8004698:	e7b0      	b.n	80045fc <_dtoa_r+0x26c>
 800469a:	2301      	movs	r3, #1
 800469c:	9308      	str	r3, [sp, #32]
 800469e:	e7f5      	b.n	800468c <_dtoa_r+0x2fc>
 80046a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046a6:	e7b8      	b.n	800461a <_dtoa_r+0x28a>
 80046a8:	3101      	adds	r1, #1
 80046aa:	6041      	str	r1, [r0, #4]
 80046ac:	0052      	lsls	r2, r2, #1
 80046ae:	e7b8      	b.n	8004622 <_dtoa_r+0x292>
 80046b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b2:	9a01      	ldr	r2, [sp, #4]
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	2b0e      	cmp	r3, #14
 80046ba:	f200 809d 	bhi.w	80047f8 <_dtoa_r+0x468>
 80046be:	2d00      	cmp	r5, #0
 80046c0:	f000 809a 	beq.w	80047f8 <_dtoa_r+0x468>
 80046c4:	9b00      	ldr	r3, [sp, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dd32      	ble.n	8004730 <_dtoa_r+0x3a0>
 80046ca:	4ab7      	ldr	r2, [pc, #732]	; (80049a8 <_dtoa_r+0x618>)
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046d8:	9b00      	ldr	r3, [sp, #0]
 80046da:	05d8      	lsls	r0, r3, #23
 80046dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80046e0:	d516      	bpl.n	8004710 <_dtoa_r+0x380>
 80046e2:	4bb2      	ldr	r3, [pc, #712]	; (80049ac <_dtoa_r+0x61c>)
 80046e4:	ec51 0b19 	vmov	r0, r1, d9
 80046e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046ec:	f7fc fa56 	bl	8000b9c <__aeabi_ddiv>
 80046f0:	f007 070f 	and.w	r7, r7, #15
 80046f4:	4682      	mov	sl, r0
 80046f6:	468b      	mov	fp, r1
 80046f8:	2503      	movs	r5, #3
 80046fa:	4eac      	ldr	r6, [pc, #688]	; (80049ac <_dtoa_r+0x61c>)
 80046fc:	b957      	cbnz	r7, 8004714 <_dtoa_r+0x384>
 80046fe:	4642      	mov	r2, r8
 8004700:	464b      	mov	r3, r9
 8004702:	4650      	mov	r0, sl
 8004704:	4659      	mov	r1, fp
 8004706:	f7fc fa49 	bl	8000b9c <__aeabi_ddiv>
 800470a:	4682      	mov	sl, r0
 800470c:	468b      	mov	fp, r1
 800470e:	e028      	b.n	8004762 <_dtoa_r+0x3d2>
 8004710:	2502      	movs	r5, #2
 8004712:	e7f2      	b.n	80046fa <_dtoa_r+0x36a>
 8004714:	07f9      	lsls	r1, r7, #31
 8004716:	d508      	bpl.n	800472a <_dtoa_r+0x39a>
 8004718:	4640      	mov	r0, r8
 800471a:	4649      	mov	r1, r9
 800471c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004720:	f7fc f912 	bl	8000948 <__aeabi_dmul>
 8004724:	3501      	adds	r5, #1
 8004726:	4680      	mov	r8, r0
 8004728:	4689      	mov	r9, r1
 800472a:	107f      	asrs	r7, r7, #1
 800472c:	3608      	adds	r6, #8
 800472e:	e7e5      	b.n	80046fc <_dtoa_r+0x36c>
 8004730:	f000 809b 	beq.w	800486a <_dtoa_r+0x4da>
 8004734:	9b00      	ldr	r3, [sp, #0]
 8004736:	4f9d      	ldr	r7, [pc, #628]	; (80049ac <_dtoa_r+0x61c>)
 8004738:	425e      	negs	r6, r3
 800473a:	4b9b      	ldr	r3, [pc, #620]	; (80049a8 <_dtoa_r+0x618>)
 800473c:	f006 020f 	and.w	r2, r6, #15
 8004740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	ec51 0b19 	vmov	r0, r1, d9
 800474c:	f7fc f8fc 	bl	8000948 <__aeabi_dmul>
 8004750:	1136      	asrs	r6, r6, #4
 8004752:	4682      	mov	sl, r0
 8004754:	468b      	mov	fp, r1
 8004756:	2300      	movs	r3, #0
 8004758:	2502      	movs	r5, #2
 800475a:	2e00      	cmp	r6, #0
 800475c:	d17a      	bne.n	8004854 <_dtoa_r+0x4c4>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1d3      	bne.n	800470a <_dtoa_r+0x37a>
 8004762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8082 	beq.w	800486e <_dtoa_r+0x4de>
 800476a:	4b91      	ldr	r3, [pc, #580]	; (80049b0 <_dtoa_r+0x620>)
 800476c:	2200      	movs	r2, #0
 800476e:	4650      	mov	r0, sl
 8004770:	4659      	mov	r1, fp
 8004772:	f7fc fb5b 	bl	8000e2c <__aeabi_dcmplt>
 8004776:	2800      	cmp	r0, #0
 8004778:	d079      	beq.n	800486e <_dtoa_r+0x4de>
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d076      	beq.n	800486e <_dtoa_r+0x4de>
 8004780:	9b02      	ldr	r3, [sp, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dd36      	ble.n	80047f4 <_dtoa_r+0x464>
 8004786:	9b00      	ldr	r3, [sp, #0]
 8004788:	4650      	mov	r0, sl
 800478a:	4659      	mov	r1, fp
 800478c:	1e5f      	subs	r7, r3, #1
 800478e:	2200      	movs	r2, #0
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <_dtoa_r+0x624>)
 8004792:	f7fc f8d9 	bl	8000948 <__aeabi_dmul>
 8004796:	9e02      	ldr	r6, [sp, #8]
 8004798:	4682      	mov	sl, r0
 800479a:	468b      	mov	fp, r1
 800479c:	3501      	adds	r5, #1
 800479e:	4628      	mov	r0, r5
 80047a0:	f7fc f868 	bl	8000874 <__aeabi_i2d>
 80047a4:	4652      	mov	r2, sl
 80047a6:	465b      	mov	r3, fp
 80047a8:	f7fc f8ce 	bl	8000948 <__aeabi_dmul>
 80047ac:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <_dtoa_r+0x628>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	f7fb ff14 	bl	80005dc <__adddf3>
 80047b4:	46d0      	mov	r8, sl
 80047b6:	46d9      	mov	r9, fp
 80047b8:	4682      	mov	sl, r0
 80047ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d158      	bne.n	8004874 <_dtoa_r+0x4e4>
 80047c2:	4b7e      	ldr	r3, [pc, #504]	; (80049bc <_dtoa_r+0x62c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	4640      	mov	r0, r8
 80047c8:	4649      	mov	r1, r9
 80047ca:	f7fb ff05 	bl	80005d8 <__aeabi_dsub>
 80047ce:	4652      	mov	r2, sl
 80047d0:	465b      	mov	r3, fp
 80047d2:	4680      	mov	r8, r0
 80047d4:	4689      	mov	r9, r1
 80047d6:	f7fc fb47 	bl	8000e68 <__aeabi_dcmpgt>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f040 8295 	bne.w	8004d0a <_dtoa_r+0x97a>
 80047e0:	4652      	mov	r2, sl
 80047e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80047e6:	4640      	mov	r0, r8
 80047e8:	4649      	mov	r1, r9
 80047ea:	f7fc fb1f 	bl	8000e2c <__aeabi_dcmplt>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f040 8289 	bne.w	8004d06 <_dtoa_r+0x976>
 80047f4:	ec5b ab19 	vmov	sl, fp, d9
 80047f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f2c0 8148 	blt.w	8004a90 <_dtoa_r+0x700>
 8004800:	9a00      	ldr	r2, [sp, #0]
 8004802:	2a0e      	cmp	r2, #14
 8004804:	f300 8144 	bgt.w	8004a90 <_dtoa_r+0x700>
 8004808:	4b67      	ldr	r3, [pc, #412]	; (80049a8 <_dtoa_r+0x618>)
 800480a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800480e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	f280 80d5 	bge.w	80049c4 <_dtoa_r+0x634>
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f300 80d1 	bgt.w	80049c4 <_dtoa_r+0x634>
 8004822:	f040 826f 	bne.w	8004d04 <_dtoa_r+0x974>
 8004826:	4b65      	ldr	r3, [pc, #404]	; (80049bc <_dtoa_r+0x62c>)
 8004828:	2200      	movs	r2, #0
 800482a:	4640      	mov	r0, r8
 800482c:	4649      	mov	r1, r9
 800482e:	f7fc f88b 	bl	8000948 <__aeabi_dmul>
 8004832:	4652      	mov	r2, sl
 8004834:	465b      	mov	r3, fp
 8004836:	f7fc fb0d 	bl	8000e54 <__aeabi_dcmpge>
 800483a:	9e03      	ldr	r6, [sp, #12]
 800483c:	4637      	mov	r7, r6
 800483e:	2800      	cmp	r0, #0
 8004840:	f040 8245 	bne.w	8004cce <_dtoa_r+0x93e>
 8004844:	9d01      	ldr	r5, [sp, #4]
 8004846:	2331      	movs	r3, #49	; 0x31
 8004848:	f805 3b01 	strb.w	r3, [r5], #1
 800484c:	9b00      	ldr	r3, [sp, #0]
 800484e:	3301      	adds	r3, #1
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	e240      	b.n	8004cd6 <_dtoa_r+0x946>
 8004854:	07f2      	lsls	r2, r6, #31
 8004856:	d505      	bpl.n	8004864 <_dtoa_r+0x4d4>
 8004858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800485c:	f7fc f874 	bl	8000948 <__aeabi_dmul>
 8004860:	3501      	adds	r5, #1
 8004862:	2301      	movs	r3, #1
 8004864:	1076      	asrs	r6, r6, #1
 8004866:	3708      	adds	r7, #8
 8004868:	e777      	b.n	800475a <_dtoa_r+0x3ca>
 800486a:	2502      	movs	r5, #2
 800486c:	e779      	b.n	8004762 <_dtoa_r+0x3d2>
 800486e:	9f00      	ldr	r7, [sp, #0]
 8004870:	9e03      	ldr	r6, [sp, #12]
 8004872:	e794      	b.n	800479e <_dtoa_r+0x40e>
 8004874:	9901      	ldr	r1, [sp, #4]
 8004876:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <_dtoa_r+0x618>)
 8004878:	4431      	add	r1, r6
 800487a:	910d      	str	r1, [sp, #52]	; 0x34
 800487c:	9908      	ldr	r1, [sp, #32]
 800487e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004886:	2900      	cmp	r1, #0
 8004888:	d043      	beq.n	8004912 <_dtoa_r+0x582>
 800488a:	494d      	ldr	r1, [pc, #308]	; (80049c0 <_dtoa_r+0x630>)
 800488c:	2000      	movs	r0, #0
 800488e:	f7fc f985 	bl	8000b9c <__aeabi_ddiv>
 8004892:	4652      	mov	r2, sl
 8004894:	465b      	mov	r3, fp
 8004896:	f7fb fe9f 	bl	80005d8 <__aeabi_dsub>
 800489a:	9d01      	ldr	r5, [sp, #4]
 800489c:	4682      	mov	sl, r0
 800489e:	468b      	mov	fp, r1
 80048a0:	4649      	mov	r1, r9
 80048a2:	4640      	mov	r0, r8
 80048a4:	f7fc fb00 	bl	8000ea8 <__aeabi_d2iz>
 80048a8:	4606      	mov	r6, r0
 80048aa:	f7fb ffe3 	bl	8000874 <__aeabi_i2d>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4640      	mov	r0, r8
 80048b4:	4649      	mov	r1, r9
 80048b6:	f7fb fe8f 	bl	80005d8 <__aeabi_dsub>
 80048ba:	3630      	adds	r6, #48	; 0x30
 80048bc:	f805 6b01 	strb.w	r6, [r5], #1
 80048c0:	4652      	mov	r2, sl
 80048c2:	465b      	mov	r3, fp
 80048c4:	4680      	mov	r8, r0
 80048c6:	4689      	mov	r9, r1
 80048c8:	f7fc fab0 	bl	8000e2c <__aeabi_dcmplt>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d163      	bne.n	8004998 <_dtoa_r+0x608>
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	4936      	ldr	r1, [pc, #216]	; (80049b0 <_dtoa_r+0x620>)
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7fb fe7e 	bl	80005d8 <__aeabi_dsub>
 80048dc:	4652      	mov	r2, sl
 80048de:	465b      	mov	r3, fp
 80048e0:	f7fc faa4 	bl	8000e2c <__aeabi_dcmplt>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f040 80b5 	bne.w	8004a54 <_dtoa_r+0x6c4>
 80048ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ec:	429d      	cmp	r5, r3
 80048ee:	d081      	beq.n	80047f4 <_dtoa_r+0x464>
 80048f0:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <_dtoa_r+0x624>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	4650      	mov	r0, sl
 80048f6:	4659      	mov	r1, fp
 80048f8:	f7fc f826 	bl	8000948 <__aeabi_dmul>
 80048fc:	4b2d      	ldr	r3, [pc, #180]	; (80049b4 <_dtoa_r+0x624>)
 80048fe:	4682      	mov	sl, r0
 8004900:	468b      	mov	fp, r1
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	2200      	movs	r2, #0
 8004908:	f7fc f81e 	bl	8000948 <__aeabi_dmul>
 800490c:	4680      	mov	r8, r0
 800490e:	4689      	mov	r9, r1
 8004910:	e7c6      	b.n	80048a0 <_dtoa_r+0x510>
 8004912:	4650      	mov	r0, sl
 8004914:	4659      	mov	r1, fp
 8004916:	f7fc f817 	bl	8000948 <__aeabi_dmul>
 800491a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800491c:	9d01      	ldr	r5, [sp, #4]
 800491e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004920:	4682      	mov	sl, r0
 8004922:	468b      	mov	fp, r1
 8004924:	4649      	mov	r1, r9
 8004926:	4640      	mov	r0, r8
 8004928:	f7fc fabe 	bl	8000ea8 <__aeabi_d2iz>
 800492c:	4606      	mov	r6, r0
 800492e:	f7fb ffa1 	bl	8000874 <__aeabi_i2d>
 8004932:	3630      	adds	r6, #48	; 0x30
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4640      	mov	r0, r8
 800493a:	4649      	mov	r1, r9
 800493c:	f7fb fe4c 	bl	80005d8 <__aeabi_dsub>
 8004940:	f805 6b01 	strb.w	r6, [r5], #1
 8004944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004946:	429d      	cmp	r5, r3
 8004948:	4680      	mov	r8, r0
 800494a:	4689      	mov	r9, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	d124      	bne.n	800499c <_dtoa_r+0x60c>
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <_dtoa_r+0x630>)
 8004954:	4650      	mov	r0, sl
 8004956:	4659      	mov	r1, fp
 8004958:	f7fb fe40 	bl	80005dc <__adddf3>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4640      	mov	r0, r8
 8004962:	4649      	mov	r1, r9
 8004964:	f7fc fa80 	bl	8000e68 <__aeabi_dcmpgt>
 8004968:	2800      	cmp	r0, #0
 800496a:	d173      	bne.n	8004a54 <_dtoa_r+0x6c4>
 800496c:	4652      	mov	r2, sl
 800496e:	465b      	mov	r3, fp
 8004970:	4913      	ldr	r1, [pc, #76]	; (80049c0 <_dtoa_r+0x630>)
 8004972:	2000      	movs	r0, #0
 8004974:	f7fb fe30 	bl	80005d8 <__aeabi_dsub>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4640      	mov	r0, r8
 800497e:	4649      	mov	r1, r9
 8004980:	f7fc fa54 	bl	8000e2c <__aeabi_dcmplt>
 8004984:	2800      	cmp	r0, #0
 8004986:	f43f af35 	beq.w	80047f4 <_dtoa_r+0x464>
 800498a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800498c:	1e6b      	subs	r3, r5, #1
 800498e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004990:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004994:	2b30      	cmp	r3, #48	; 0x30
 8004996:	d0f8      	beq.n	800498a <_dtoa_r+0x5fa>
 8004998:	9700      	str	r7, [sp, #0]
 800499a:	e049      	b.n	8004a30 <_dtoa_r+0x6a0>
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <_dtoa_r+0x624>)
 800499e:	f7fb ffd3 	bl	8000948 <__aeabi_dmul>
 80049a2:	4680      	mov	r8, r0
 80049a4:	4689      	mov	r9, r1
 80049a6:	e7bd      	b.n	8004924 <_dtoa_r+0x594>
 80049a8:	08012a38 	.word	0x08012a38
 80049ac:	08012a10 	.word	0x08012a10
 80049b0:	3ff00000 	.word	0x3ff00000
 80049b4:	40240000 	.word	0x40240000
 80049b8:	401c0000 	.word	0x401c0000
 80049bc:	40140000 	.word	0x40140000
 80049c0:	3fe00000 	.word	0x3fe00000
 80049c4:	9d01      	ldr	r5, [sp, #4]
 80049c6:	4656      	mov	r6, sl
 80049c8:	465f      	mov	r7, fp
 80049ca:	4642      	mov	r2, r8
 80049cc:	464b      	mov	r3, r9
 80049ce:	4630      	mov	r0, r6
 80049d0:	4639      	mov	r1, r7
 80049d2:	f7fc f8e3 	bl	8000b9c <__aeabi_ddiv>
 80049d6:	f7fc fa67 	bl	8000ea8 <__aeabi_d2iz>
 80049da:	4682      	mov	sl, r0
 80049dc:	f7fb ff4a 	bl	8000874 <__aeabi_i2d>
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	f7fb ffb0 	bl	8000948 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4630      	mov	r0, r6
 80049ee:	4639      	mov	r1, r7
 80049f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80049f4:	f7fb fdf0 	bl	80005d8 <__aeabi_dsub>
 80049f8:	f805 6b01 	strb.w	r6, [r5], #1
 80049fc:	9e01      	ldr	r6, [sp, #4]
 80049fe:	9f03      	ldr	r7, [sp, #12]
 8004a00:	1bae      	subs	r6, r5, r6
 8004a02:	42b7      	cmp	r7, r6
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	d135      	bne.n	8004a76 <_dtoa_r+0x6e6>
 8004a0a:	f7fb fde7 	bl	80005dc <__adddf3>
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	4606      	mov	r6, r0
 8004a14:	460f      	mov	r7, r1
 8004a16:	f7fc fa27 	bl	8000e68 <__aeabi_dcmpgt>
 8004a1a:	b9d0      	cbnz	r0, 8004a52 <_dtoa_r+0x6c2>
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	4630      	mov	r0, r6
 8004a22:	4639      	mov	r1, r7
 8004a24:	f7fc f9f8 	bl	8000e18 <__aeabi_dcmpeq>
 8004a28:	b110      	cbz	r0, 8004a30 <_dtoa_r+0x6a0>
 8004a2a:	f01a 0f01 	tst.w	sl, #1
 8004a2e:	d110      	bne.n	8004a52 <_dtoa_r+0x6c2>
 8004a30:	4620      	mov	r0, r4
 8004a32:	ee18 1a10 	vmov	r1, s16
 8004a36:	f000 fd37 	bl	80054a8 <_Bfree>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9800      	ldr	r0, [sp, #0]
 8004a3e:	702b      	strb	r3, [r5, #0]
 8004a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a42:	3001      	adds	r0, #1
 8004a44:	6018      	str	r0, [r3, #0]
 8004a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f43f acf1 	beq.w	8004430 <_dtoa_r+0xa0>
 8004a4e:	601d      	str	r5, [r3, #0]
 8004a50:	e4ee      	b.n	8004430 <_dtoa_r+0xa0>
 8004a52:	9f00      	ldr	r7, [sp, #0]
 8004a54:	462b      	mov	r3, r5
 8004a56:	461d      	mov	r5, r3
 8004a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a5c:	2a39      	cmp	r2, #57	; 0x39
 8004a5e:	d106      	bne.n	8004a6e <_dtoa_r+0x6de>
 8004a60:	9a01      	ldr	r2, [sp, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d1f7      	bne.n	8004a56 <_dtoa_r+0x6c6>
 8004a66:	9901      	ldr	r1, [sp, #4]
 8004a68:	2230      	movs	r2, #48	; 0x30
 8004a6a:	3701      	adds	r7, #1
 8004a6c:	700a      	strb	r2, [r1, #0]
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	3201      	adds	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e790      	b.n	8004998 <_dtoa_r+0x608>
 8004a76:	4ba6      	ldr	r3, [pc, #664]	; (8004d10 <_dtoa_r+0x980>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f7fb ff65 	bl	8000948 <__aeabi_dmul>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4606      	mov	r6, r0
 8004a84:	460f      	mov	r7, r1
 8004a86:	f7fc f9c7 	bl	8000e18 <__aeabi_dcmpeq>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d09d      	beq.n	80049ca <_dtoa_r+0x63a>
 8004a8e:	e7cf      	b.n	8004a30 <_dtoa_r+0x6a0>
 8004a90:	9a08      	ldr	r2, [sp, #32]
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f000 80d7 	beq.w	8004c46 <_dtoa_r+0x8b6>
 8004a98:	9a06      	ldr	r2, [sp, #24]
 8004a9a:	2a01      	cmp	r2, #1
 8004a9c:	f300 80ba 	bgt.w	8004c14 <_dtoa_r+0x884>
 8004aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	f000 80b2 	beq.w	8004c0c <_dtoa_r+0x87c>
 8004aa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004aac:	9e07      	ldr	r6, [sp, #28]
 8004aae:	9d04      	ldr	r5, [sp, #16]
 8004ab0:	9a04      	ldr	r2, [sp, #16]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	9204      	str	r2, [sp, #16]
 8004ab6:	9a05      	ldr	r2, [sp, #20]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	441a      	add	r2, r3
 8004abc:	4620      	mov	r0, r4
 8004abe:	9205      	str	r2, [sp, #20]
 8004ac0:	f000 fdaa 	bl	8005618 <__i2b>
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	dd0c      	ble.n	8004ae4 <_dtoa_r+0x754>
 8004aca:	9b05      	ldr	r3, [sp, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	dd09      	ble.n	8004ae4 <_dtoa_r+0x754>
 8004ad0:	42ab      	cmp	r3, r5
 8004ad2:	9a04      	ldr	r2, [sp, #16]
 8004ad4:	bfa8      	it	ge
 8004ad6:	462b      	movge	r3, r5
 8004ad8:	1ad2      	subs	r2, r2, r3
 8004ada:	9204      	str	r2, [sp, #16]
 8004adc:	9a05      	ldr	r2, [sp, #20]
 8004ade:	1aed      	subs	r5, r5, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	9305      	str	r3, [sp, #20]
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	b31b      	cbz	r3, 8004b30 <_dtoa_r+0x7a0>
 8004ae8:	9b08      	ldr	r3, [sp, #32]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80af 	beq.w	8004c4e <_dtoa_r+0x8be>
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	dd13      	ble.n	8004b1c <_dtoa_r+0x78c>
 8004af4:	4639      	mov	r1, r7
 8004af6:	4632      	mov	r2, r6
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 fe4d 	bl	8005798 <__pow5mult>
 8004afe:	ee18 2a10 	vmov	r2, s16
 8004b02:	4601      	mov	r1, r0
 8004b04:	4607      	mov	r7, r0
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 fd9c 	bl	8005644 <__multiply>
 8004b0c:	ee18 1a10 	vmov	r1, s16
 8004b10:	4680      	mov	r8, r0
 8004b12:	4620      	mov	r0, r4
 8004b14:	f000 fcc8 	bl	80054a8 <_Bfree>
 8004b18:	ee08 8a10 	vmov	s16, r8
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	1b9a      	subs	r2, r3, r6
 8004b20:	d006      	beq.n	8004b30 <_dtoa_r+0x7a0>
 8004b22:	ee18 1a10 	vmov	r1, s16
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 fe36 	bl	8005798 <__pow5mult>
 8004b2c:	ee08 0a10 	vmov	s16, r0
 8004b30:	2101      	movs	r1, #1
 8004b32:	4620      	mov	r0, r4
 8004b34:	f000 fd70 	bl	8005618 <__i2b>
 8004b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	f340 8088 	ble.w	8004c52 <_dtoa_r+0x8c2>
 8004b42:	461a      	mov	r2, r3
 8004b44:	4601      	mov	r1, r0
 8004b46:	4620      	mov	r0, r4
 8004b48:	f000 fe26 	bl	8005798 <__pow5mult>
 8004b4c:	9b06      	ldr	r3, [sp, #24]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	4606      	mov	r6, r0
 8004b52:	f340 8081 	ble.w	8004c58 <_dtoa_r+0x8c8>
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	6933      	ldr	r3, [r6, #16]
 8004b5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b60:	6918      	ldr	r0, [r3, #16]
 8004b62:	f000 fd09 	bl	8005578 <__hi0bits>
 8004b66:	f1c0 0020 	rsb	r0, r0, #32
 8004b6a:	9b05      	ldr	r3, [sp, #20]
 8004b6c:	4418      	add	r0, r3
 8004b6e:	f010 001f 	ands.w	r0, r0, #31
 8004b72:	f000 8092 	beq.w	8004c9a <_dtoa_r+0x90a>
 8004b76:	f1c0 0320 	rsb	r3, r0, #32
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	f340 808a 	ble.w	8004c94 <_dtoa_r+0x904>
 8004b80:	f1c0 001c 	rsb	r0, r0, #28
 8004b84:	9b04      	ldr	r3, [sp, #16]
 8004b86:	4403      	add	r3, r0
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	9b05      	ldr	r3, [sp, #20]
 8004b8c:	4403      	add	r3, r0
 8004b8e:	4405      	add	r5, r0
 8004b90:	9305      	str	r3, [sp, #20]
 8004b92:	9b04      	ldr	r3, [sp, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dd07      	ble.n	8004ba8 <_dtoa_r+0x818>
 8004b98:	ee18 1a10 	vmov	r1, s16
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 fe54 	bl	800584c <__lshift>
 8004ba4:	ee08 0a10 	vmov	s16, r0
 8004ba8:	9b05      	ldr	r3, [sp, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dd05      	ble.n	8004bba <_dtoa_r+0x82a>
 8004bae:	4631      	mov	r1, r6
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 fe4a 	bl	800584c <__lshift>
 8004bb8:	4606      	mov	r6, r0
 8004bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d06e      	beq.n	8004c9e <_dtoa_r+0x90e>
 8004bc0:	ee18 0a10 	vmov	r0, s16
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	f000 feb1 	bl	800592c <__mcmp>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	da67      	bge.n	8004c9e <_dtoa_r+0x90e>
 8004bce:	9b00      	ldr	r3, [sp, #0]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	ee18 1a10 	vmov	r1, s16
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	220a      	movs	r2, #10
 8004bda:	2300      	movs	r3, #0
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 fc85 	bl	80054ec <__multadd>
 8004be2:	9b08      	ldr	r3, [sp, #32]
 8004be4:	ee08 0a10 	vmov	s16, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 81b1 	beq.w	8004f50 <_dtoa_r+0xbc0>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	220a      	movs	r2, #10
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f000 fc79 	bl	80054ec <__multadd>
 8004bfa:	9b02      	ldr	r3, [sp, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	4607      	mov	r7, r0
 8004c00:	f300 808e 	bgt.w	8004d20 <_dtoa_r+0x990>
 8004c04:	9b06      	ldr	r3, [sp, #24]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	dc51      	bgt.n	8004cae <_dtoa_r+0x91e>
 8004c0a:	e089      	b.n	8004d20 <_dtoa_r+0x990>
 8004c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c12:	e74b      	b.n	8004aac <_dtoa_r+0x71c>
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	1e5e      	subs	r6, r3, #1
 8004c18:	9b07      	ldr	r3, [sp, #28]
 8004c1a:	42b3      	cmp	r3, r6
 8004c1c:	bfbf      	itttt	lt
 8004c1e:	9b07      	ldrlt	r3, [sp, #28]
 8004c20:	9607      	strlt	r6, [sp, #28]
 8004c22:	1af2      	sublt	r2, r6, r3
 8004c24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c26:	bfb6      	itet	lt
 8004c28:	189b      	addlt	r3, r3, r2
 8004c2a:	1b9e      	subge	r6, r3, r6
 8004c2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	bfb8      	it	lt
 8004c32:	2600      	movlt	r6, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfb7      	itett	lt
 8004c38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004c3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004c40:	1a9d      	sublt	r5, r3, r2
 8004c42:	2300      	movlt	r3, #0
 8004c44:	e734      	b.n	8004ab0 <_dtoa_r+0x720>
 8004c46:	9e07      	ldr	r6, [sp, #28]
 8004c48:	9d04      	ldr	r5, [sp, #16]
 8004c4a:	9f08      	ldr	r7, [sp, #32]
 8004c4c:	e73b      	b.n	8004ac6 <_dtoa_r+0x736>
 8004c4e:	9a07      	ldr	r2, [sp, #28]
 8004c50:	e767      	b.n	8004b22 <_dtoa_r+0x792>
 8004c52:	9b06      	ldr	r3, [sp, #24]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	dc18      	bgt.n	8004c8a <_dtoa_r+0x8fa>
 8004c58:	f1ba 0f00 	cmp.w	sl, #0
 8004c5c:	d115      	bne.n	8004c8a <_dtoa_r+0x8fa>
 8004c5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c62:	b993      	cbnz	r3, 8004c8a <_dtoa_r+0x8fa>
 8004c64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c68:	0d1b      	lsrs	r3, r3, #20
 8004c6a:	051b      	lsls	r3, r3, #20
 8004c6c:	b183      	cbz	r3, 8004c90 <_dtoa_r+0x900>
 8004c6e:	9b04      	ldr	r3, [sp, #16]
 8004c70:	3301      	adds	r3, #1
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	9b05      	ldr	r3, [sp, #20]
 8004c76:	3301      	adds	r3, #1
 8004c78:	9305      	str	r3, [sp, #20]
 8004c7a:	f04f 0801 	mov.w	r8, #1
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f47f af6a 	bne.w	8004b5a <_dtoa_r+0x7ca>
 8004c86:	2001      	movs	r0, #1
 8004c88:	e76f      	b.n	8004b6a <_dtoa_r+0x7da>
 8004c8a:	f04f 0800 	mov.w	r8, #0
 8004c8e:	e7f6      	b.n	8004c7e <_dtoa_r+0x8ee>
 8004c90:	4698      	mov	r8, r3
 8004c92:	e7f4      	b.n	8004c7e <_dtoa_r+0x8ee>
 8004c94:	f43f af7d 	beq.w	8004b92 <_dtoa_r+0x802>
 8004c98:	4618      	mov	r0, r3
 8004c9a:	301c      	adds	r0, #28
 8004c9c:	e772      	b.n	8004b84 <_dtoa_r+0x7f4>
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dc37      	bgt.n	8004d14 <_dtoa_r+0x984>
 8004ca4:	9b06      	ldr	r3, [sp, #24]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	dd34      	ble.n	8004d14 <_dtoa_r+0x984>
 8004caa:	9b03      	ldr	r3, [sp, #12]
 8004cac:	9302      	str	r3, [sp, #8]
 8004cae:	9b02      	ldr	r3, [sp, #8]
 8004cb0:	b96b      	cbnz	r3, 8004cce <_dtoa_r+0x93e>
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	2205      	movs	r2, #5
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 fc18 	bl	80054ec <__multadd>
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	ee18 0a10 	vmov	r0, s16
 8004cc4:	f000 fe32 	bl	800592c <__mcmp>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f73f adbb 	bgt.w	8004844 <_dtoa_r+0x4b4>
 8004cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd0:	9d01      	ldr	r5, [sp, #4]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	f04f 0800 	mov.w	r8, #0
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 fbe3 	bl	80054a8 <_Bfree>
 8004ce2:	2f00      	cmp	r7, #0
 8004ce4:	f43f aea4 	beq.w	8004a30 <_dtoa_r+0x6a0>
 8004ce8:	f1b8 0f00 	cmp.w	r8, #0
 8004cec:	d005      	beq.n	8004cfa <_dtoa_r+0x96a>
 8004cee:	45b8      	cmp	r8, r7
 8004cf0:	d003      	beq.n	8004cfa <_dtoa_r+0x96a>
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 fbd7 	bl	80054a8 <_Bfree>
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 fbd3 	bl	80054a8 <_Bfree>
 8004d02:	e695      	b.n	8004a30 <_dtoa_r+0x6a0>
 8004d04:	2600      	movs	r6, #0
 8004d06:	4637      	mov	r7, r6
 8004d08:	e7e1      	b.n	8004cce <_dtoa_r+0x93e>
 8004d0a:	9700      	str	r7, [sp, #0]
 8004d0c:	4637      	mov	r7, r6
 8004d0e:	e599      	b.n	8004844 <_dtoa_r+0x4b4>
 8004d10:	40240000 	.word	0x40240000
 8004d14:	9b08      	ldr	r3, [sp, #32]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80ca 	beq.w	8004eb0 <_dtoa_r+0xb20>
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	dd05      	ble.n	8004d30 <_dtoa_r+0x9a0>
 8004d24:	4639      	mov	r1, r7
 8004d26:	462a      	mov	r2, r5
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f000 fd8f 	bl	800584c <__lshift>
 8004d2e:	4607      	mov	r7, r0
 8004d30:	f1b8 0f00 	cmp.w	r8, #0
 8004d34:	d05b      	beq.n	8004dee <_dtoa_r+0xa5e>
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fb75 	bl	8005428 <_Balloc>
 8004d3e:	4605      	mov	r5, r0
 8004d40:	b928      	cbnz	r0, 8004d4e <_dtoa_r+0x9be>
 8004d42:	4b87      	ldr	r3, [pc, #540]	; (8004f60 <_dtoa_r+0xbd0>)
 8004d44:	4602      	mov	r2, r0
 8004d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d4a:	f7ff bb3b 	b.w	80043c4 <_dtoa_r+0x34>
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	3202      	adds	r2, #2
 8004d52:	0092      	lsls	r2, r2, #2
 8004d54:	f107 010c 	add.w	r1, r7, #12
 8004d58:	300c      	adds	r0, #12
 8004d5a:	f000 fb57 	bl	800540c <memcpy>
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4629      	mov	r1, r5
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fd72 	bl	800584c <__lshift>
 8004d68:	9b01      	ldr	r3, [sp, #4]
 8004d6a:	f103 0901 	add.w	r9, r3, #1
 8004d6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	f00a 0301 	and.w	r3, sl, #1
 8004d7a:	46b8      	mov	r8, r7
 8004d7c:	9304      	str	r3, [sp, #16]
 8004d7e:	4607      	mov	r7, r0
 8004d80:	4631      	mov	r1, r6
 8004d82:	ee18 0a10 	vmov	r0, s16
 8004d86:	f7ff fa77 	bl	8004278 <quorem>
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	9002      	str	r0, [sp, #8]
 8004d8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004d92:	ee18 0a10 	vmov	r0, s16
 8004d96:	f000 fdc9 	bl	800592c <__mcmp>
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	9003      	str	r0, [sp, #12]
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 fddf 	bl	8005964 <__mdiff>
 8004da6:	68c2      	ldr	r2, [r0, #12]
 8004da8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004dac:	4605      	mov	r5, r0
 8004dae:	bb02      	cbnz	r2, 8004df2 <_dtoa_r+0xa62>
 8004db0:	4601      	mov	r1, r0
 8004db2:	ee18 0a10 	vmov	r0, s16
 8004db6:	f000 fdb9 	bl	800592c <__mcmp>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	9207      	str	r2, [sp, #28]
 8004dc2:	f000 fb71 	bl	80054a8 <_Bfree>
 8004dc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004dca:	ea43 0102 	orr.w	r1, r3, r2
 8004dce:	9b04      	ldr	r3, [sp, #16]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	464d      	mov	r5, r9
 8004dd4:	d10f      	bne.n	8004df6 <_dtoa_r+0xa66>
 8004dd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004dda:	d02a      	beq.n	8004e32 <_dtoa_r+0xaa2>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dd02      	ble.n	8004de8 <_dtoa_r+0xa58>
 8004de2:	9b02      	ldr	r3, [sp, #8]
 8004de4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004de8:	f88b a000 	strb.w	sl, [fp]
 8004dec:	e775      	b.n	8004cda <_dtoa_r+0x94a>
 8004dee:	4638      	mov	r0, r7
 8004df0:	e7ba      	b.n	8004d68 <_dtoa_r+0x9d8>
 8004df2:	2201      	movs	r2, #1
 8004df4:	e7e2      	b.n	8004dbc <_dtoa_r+0xa2c>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db04      	blt.n	8004e06 <_dtoa_r+0xa76>
 8004dfc:	9906      	ldr	r1, [sp, #24]
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	9904      	ldr	r1, [sp, #16]
 8004e02:	430b      	orrs	r3, r1
 8004e04:	d122      	bne.n	8004e4c <_dtoa_r+0xabc>
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	ddee      	ble.n	8004de8 <_dtoa_r+0xa58>
 8004e0a:	ee18 1a10 	vmov	r1, s16
 8004e0e:	2201      	movs	r2, #1
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 fd1b 	bl	800584c <__lshift>
 8004e16:	4631      	mov	r1, r6
 8004e18:	ee08 0a10 	vmov	s16, r0
 8004e1c:	f000 fd86 	bl	800592c <__mcmp>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	dc03      	bgt.n	8004e2c <_dtoa_r+0xa9c>
 8004e24:	d1e0      	bne.n	8004de8 <_dtoa_r+0xa58>
 8004e26:	f01a 0f01 	tst.w	sl, #1
 8004e2a:	d0dd      	beq.n	8004de8 <_dtoa_r+0xa58>
 8004e2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e30:	d1d7      	bne.n	8004de2 <_dtoa_r+0xa52>
 8004e32:	2339      	movs	r3, #57	; 0x39
 8004e34:	f88b 3000 	strb.w	r3, [fp]
 8004e38:	462b      	mov	r3, r5
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e42:	2a39      	cmp	r2, #57	; 0x39
 8004e44:	d071      	beq.n	8004f2a <_dtoa_r+0xb9a>
 8004e46:	3201      	adds	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e746      	b.n	8004cda <_dtoa_r+0x94a>
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	dd07      	ble.n	8004e60 <_dtoa_r+0xad0>
 8004e50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e54:	d0ed      	beq.n	8004e32 <_dtoa_r+0xaa2>
 8004e56:	f10a 0301 	add.w	r3, sl, #1
 8004e5a:	f88b 3000 	strb.w	r3, [fp]
 8004e5e:	e73c      	b.n	8004cda <_dtoa_r+0x94a>
 8004e60:	9b05      	ldr	r3, [sp, #20]
 8004e62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004e66:	4599      	cmp	r9, r3
 8004e68:	d047      	beq.n	8004efa <_dtoa_r+0xb6a>
 8004e6a:	ee18 1a10 	vmov	r1, s16
 8004e6e:	2300      	movs	r3, #0
 8004e70:	220a      	movs	r2, #10
 8004e72:	4620      	mov	r0, r4
 8004e74:	f000 fb3a 	bl	80054ec <__multadd>
 8004e78:	45b8      	cmp	r8, r7
 8004e7a:	ee08 0a10 	vmov	s16, r0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	f04f 020a 	mov.w	r2, #10
 8004e86:	4641      	mov	r1, r8
 8004e88:	4620      	mov	r0, r4
 8004e8a:	d106      	bne.n	8004e9a <_dtoa_r+0xb0a>
 8004e8c:	f000 fb2e 	bl	80054ec <__multadd>
 8004e90:	4680      	mov	r8, r0
 8004e92:	4607      	mov	r7, r0
 8004e94:	f109 0901 	add.w	r9, r9, #1
 8004e98:	e772      	b.n	8004d80 <_dtoa_r+0x9f0>
 8004e9a:	f000 fb27 	bl	80054ec <__multadd>
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 fb20 	bl	80054ec <__multadd>
 8004eac:	4607      	mov	r7, r0
 8004eae:	e7f1      	b.n	8004e94 <_dtoa_r+0xb04>
 8004eb0:	9b03      	ldr	r3, [sp, #12]
 8004eb2:	9302      	str	r3, [sp, #8]
 8004eb4:	9d01      	ldr	r5, [sp, #4]
 8004eb6:	ee18 0a10 	vmov	r0, s16
 8004eba:	4631      	mov	r1, r6
 8004ebc:	f7ff f9dc 	bl	8004278 <quorem>
 8004ec0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	f805 ab01 	strb.w	sl, [r5], #1
 8004eca:	1aea      	subs	r2, r5, r3
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	dd09      	ble.n	8004ee6 <_dtoa_r+0xb56>
 8004ed2:	ee18 1a10 	vmov	r1, s16
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	220a      	movs	r2, #10
 8004eda:	4620      	mov	r0, r4
 8004edc:	f000 fb06 	bl	80054ec <__multadd>
 8004ee0:	ee08 0a10 	vmov	s16, r0
 8004ee4:	e7e7      	b.n	8004eb6 <_dtoa_r+0xb26>
 8004ee6:	9b02      	ldr	r3, [sp, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bfc8      	it	gt
 8004eec:	461d      	movgt	r5, r3
 8004eee:	9b01      	ldr	r3, [sp, #4]
 8004ef0:	bfd8      	it	le
 8004ef2:	2501      	movle	r5, #1
 8004ef4:	441d      	add	r5, r3
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	ee18 1a10 	vmov	r1, s16
 8004efe:	2201      	movs	r2, #1
 8004f00:	4620      	mov	r0, r4
 8004f02:	f000 fca3 	bl	800584c <__lshift>
 8004f06:	4631      	mov	r1, r6
 8004f08:	ee08 0a10 	vmov	s16, r0
 8004f0c:	f000 fd0e 	bl	800592c <__mcmp>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	dc91      	bgt.n	8004e38 <_dtoa_r+0xaa8>
 8004f14:	d102      	bne.n	8004f1c <_dtoa_r+0xb8c>
 8004f16:	f01a 0f01 	tst.w	sl, #1
 8004f1a:	d18d      	bne.n	8004e38 <_dtoa_r+0xaa8>
 8004f1c:	462b      	mov	r3, r5
 8004f1e:	461d      	mov	r5, r3
 8004f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f24:	2a30      	cmp	r2, #48	; 0x30
 8004f26:	d0fa      	beq.n	8004f1e <_dtoa_r+0xb8e>
 8004f28:	e6d7      	b.n	8004cda <_dtoa_r+0x94a>
 8004f2a:	9a01      	ldr	r2, [sp, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d184      	bne.n	8004e3a <_dtoa_r+0xaaa>
 8004f30:	9b00      	ldr	r3, [sp, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2331      	movs	r3, #49	; 0x31
 8004f38:	7013      	strb	r3, [r2, #0]
 8004f3a:	e6ce      	b.n	8004cda <_dtoa_r+0x94a>
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <_dtoa_r+0xbd4>)
 8004f3e:	f7ff ba95 	b.w	800446c <_dtoa_r+0xdc>
 8004f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f aa6e 	bne.w	8004426 <_dtoa_r+0x96>
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <_dtoa_r+0xbd8>)
 8004f4c:	f7ff ba8e 	b.w	800446c <_dtoa_r+0xdc>
 8004f50:	9b02      	ldr	r3, [sp, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dcae      	bgt.n	8004eb4 <_dtoa_r+0xb24>
 8004f56:	9b06      	ldr	r3, [sp, #24]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f73f aea8 	bgt.w	8004cae <_dtoa_r+0x91e>
 8004f5e:	e7a9      	b.n	8004eb4 <_dtoa_r+0xb24>
 8004f60:	08012916 	.word	0x08012916
 8004f64:	08008697 	.word	0x08008697
 8004f68:	0801288c 	.word	0x0801288c

08004f6c <__sflush_r>:
 8004f6c:	898a      	ldrh	r2, [r1, #12]
 8004f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	4605      	mov	r5, r0
 8004f74:	0710      	lsls	r0, r2, #28
 8004f76:	460c      	mov	r4, r1
 8004f78:	d458      	bmi.n	800502c <__sflush_r+0xc0>
 8004f7a:	684b      	ldr	r3, [r1, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	dc05      	bgt.n	8004f8c <__sflush_r+0x20>
 8004f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dc02      	bgt.n	8004f8c <__sflush_r+0x20>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d0f9      	beq.n	8004f86 <__sflush_r+0x1a>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f98:	682f      	ldr	r7, [r5, #0]
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	d032      	beq.n	8005004 <__sflush_r+0x98>
 8004f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	075a      	lsls	r2, r3, #29
 8004fa4:	d505      	bpl.n	8004fb2 <__sflush_r+0x46>
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fac:	b10b      	cbz	r3, 8004fb2 <__sflush_r+0x46>
 8004fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb0:	1ac0      	subs	r0, r0, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fb8:	6a21      	ldr	r1, [r4, #32]
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b0      	blx	r6
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	d106      	bne.n	8004fd2 <__sflush_r+0x66>
 8004fc4:	6829      	ldr	r1, [r5, #0]
 8004fc6:	291d      	cmp	r1, #29
 8004fc8:	d82c      	bhi.n	8005024 <__sflush_r+0xb8>
 8004fca:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <__sflush_r+0x108>)
 8004fcc:	40ca      	lsrs	r2, r1
 8004fce:	07d6      	lsls	r6, r2, #31
 8004fd0:	d528      	bpl.n	8005024 <__sflush_r+0xb8>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	6062      	str	r2, [r4, #4]
 8004fd6:	04d9      	lsls	r1, r3, #19
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	6022      	str	r2, [r4, #0]
 8004fdc:	d504      	bpl.n	8004fe8 <__sflush_r+0x7c>
 8004fde:	1c42      	adds	r2, r0, #1
 8004fe0:	d101      	bne.n	8004fe6 <__sflush_r+0x7a>
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	b903      	cbnz	r3, 8004fe8 <__sflush_r+0x7c>
 8004fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8004fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fea:	602f      	str	r7, [r5, #0]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d0ca      	beq.n	8004f86 <__sflush_r+0x1a>
 8004ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	d002      	beq.n	8004ffe <__sflush_r+0x92>
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 fda9 	bl	8005b50 <_free_r>
 8004ffe:	2000      	movs	r0, #0
 8005000:	6360      	str	r0, [r4, #52]	; 0x34
 8005002:	e7c1      	b.n	8004f88 <__sflush_r+0x1c>
 8005004:	6a21      	ldr	r1, [r4, #32]
 8005006:	2301      	movs	r3, #1
 8005008:	4628      	mov	r0, r5
 800500a:	47b0      	blx	r6
 800500c:	1c41      	adds	r1, r0, #1
 800500e:	d1c7      	bne.n	8004fa0 <__sflush_r+0x34>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0c4      	beq.n	8004fa0 <__sflush_r+0x34>
 8005016:	2b1d      	cmp	r3, #29
 8005018:	d001      	beq.n	800501e <__sflush_r+0xb2>
 800501a:	2b16      	cmp	r3, #22
 800501c:	d101      	bne.n	8005022 <__sflush_r+0xb6>
 800501e:	602f      	str	r7, [r5, #0]
 8005020:	e7b1      	b.n	8004f86 <__sflush_r+0x1a>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	e7ad      	b.n	8004f88 <__sflush_r+0x1c>
 800502c:	690f      	ldr	r7, [r1, #16]
 800502e:	2f00      	cmp	r7, #0
 8005030:	d0a9      	beq.n	8004f86 <__sflush_r+0x1a>
 8005032:	0793      	lsls	r3, r2, #30
 8005034:	680e      	ldr	r6, [r1, #0]
 8005036:	bf08      	it	eq
 8005038:	694b      	ldreq	r3, [r1, #20]
 800503a:	600f      	str	r7, [r1, #0]
 800503c:	bf18      	it	ne
 800503e:	2300      	movne	r3, #0
 8005040:	eba6 0807 	sub.w	r8, r6, r7
 8005044:	608b      	str	r3, [r1, #8]
 8005046:	f1b8 0f00 	cmp.w	r8, #0
 800504a:	dd9c      	ble.n	8004f86 <__sflush_r+0x1a>
 800504c:	6a21      	ldr	r1, [r4, #32]
 800504e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005050:	4643      	mov	r3, r8
 8005052:	463a      	mov	r2, r7
 8005054:	4628      	mov	r0, r5
 8005056:	47b0      	blx	r6
 8005058:	2800      	cmp	r0, #0
 800505a:	dc06      	bgt.n	800506a <__sflush_r+0xfe>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005068:	e78e      	b.n	8004f88 <__sflush_r+0x1c>
 800506a:	4407      	add	r7, r0
 800506c:	eba8 0800 	sub.w	r8, r8, r0
 8005070:	e7e9      	b.n	8005046 <__sflush_r+0xda>
 8005072:	bf00      	nop
 8005074:	20400001 	.word	0x20400001

08005078 <_fflush_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	4605      	mov	r5, r0
 800507e:	460c      	mov	r4, r1
 8005080:	b913      	cbnz	r3, 8005088 <_fflush_r+0x10>
 8005082:	2500      	movs	r5, #0
 8005084:	4628      	mov	r0, r5
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	b118      	cbz	r0, 8005092 <_fflush_r+0x1a>
 800508a:	6983      	ldr	r3, [r0, #24]
 800508c:	b90b      	cbnz	r3, 8005092 <_fflush_r+0x1a>
 800508e:	f000 f887 	bl	80051a0 <__sinit>
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <_fflush_r+0x6c>)
 8005094:	429c      	cmp	r4, r3
 8005096:	d11b      	bne.n	80050d0 <_fflush_r+0x58>
 8005098:	686c      	ldr	r4, [r5, #4]
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ef      	beq.n	8005082 <_fflush_r+0xa>
 80050a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d404      	bmi.n	80050b2 <_fflush_r+0x3a>
 80050a8:	0599      	lsls	r1, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <_fflush_r+0x3a>
 80050ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ae:	f000 f92c 	bl	800530a <__retarget_lock_acquire_recursive>
 80050b2:	4628      	mov	r0, r5
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7ff ff59 	bl	8004f6c <__sflush_r>
 80050ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050bc:	07da      	lsls	r2, r3, #31
 80050be:	4605      	mov	r5, r0
 80050c0:	d4e0      	bmi.n	8005084 <_fflush_r+0xc>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	059b      	lsls	r3, r3, #22
 80050c6:	d4dd      	bmi.n	8005084 <_fflush_r+0xc>
 80050c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ca:	f000 f91f 	bl	800530c <__retarget_lock_release_recursive>
 80050ce:	e7d9      	b.n	8005084 <_fflush_r+0xc>
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <_fflush_r+0x70>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d101      	bne.n	80050da <_fflush_r+0x62>
 80050d6:	68ac      	ldr	r4, [r5, #8]
 80050d8:	e7df      	b.n	800509a <_fflush_r+0x22>
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <_fflush_r+0x74>)
 80050dc:	429c      	cmp	r4, r3
 80050de:	bf08      	it	eq
 80050e0:	68ec      	ldreq	r4, [r5, #12]
 80050e2:	e7da      	b.n	800509a <_fflush_r+0x22>
 80050e4:	08012948 	.word	0x08012948
 80050e8:	08012968 	.word	0x08012968
 80050ec:	08012928 	.word	0x08012928

080050f0 <std>:
 80050f0:	2300      	movs	r3, #0
 80050f2:	b510      	push	{r4, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	e9c0 3300 	strd	r3, r3, [r0]
 80050fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050fe:	6083      	str	r3, [r0, #8]
 8005100:	8181      	strh	r1, [r0, #12]
 8005102:	6643      	str	r3, [r0, #100]	; 0x64
 8005104:	81c2      	strh	r2, [r0, #14]
 8005106:	6183      	str	r3, [r0, #24]
 8005108:	4619      	mov	r1, r3
 800510a:	2208      	movs	r2, #8
 800510c:	305c      	adds	r0, #92	; 0x5c
 800510e:	f7fe f8c5 	bl	800329c <memset>
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x38>)
 8005114:	6263      	str	r3, [r4, #36]	; 0x24
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <std+0x3c>)
 8005118:	62a3      	str	r3, [r4, #40]	; 0x28
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <std+0x40>)
 800511c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <std+0x44>)
 8005120:	6224      	str	r4, [r4, #32]
 8005122:	6323      	str	r3, [r4, #48]	; 0x30
 8005124:	bd10      	pop	{r4, pc}
 8005126:	bf00      	nop
 8005128:	08006299 	.word	0x08006299
 800512c:	080062bb 	.word	0x080062bb
 8005130:	080062f3 	.word	0x080062f3
 8005134:	08006317 	.word	0x08006317

08005138 <_cleanup_r>:
 8005138:	4901      	ldr	r1, [pc, #4]	; (8005140 <_cleanup_r+0x8>)
 800513a:	f000 b8c1 	b.w	80052c0 <_fwalk_reent>
 800513e:	bf00      	nop
 8005140:	08005079 	.word	0x08005079

08005144 <__sfmoreglue>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	2268      	movs	r2, #104	; 0x68
 8005148:	1e4d      	subs	r5, r1, #1
 800514a:	4355      	muls	r5, r2
 800514c:	460e      	mov	r6, r1
 800514e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005152:	f000 fd49 	bl	8005be8 <_malloc_r>
 8005156:	4604      	mov	r4, r0
 8005158:	b140      	cbz	r0, 800516c <__sfmoreglue+0x28>
 800515a:	2100      	movs	r1, #0
 800515c:	e9c0 1600 	strd	r1, r6, [r0]
 8005160:	300c      	adds	r0, #12
 8005162:	60a0      	str	r0, [r4, #8]
 8005164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005168:	f7fe f898 	bl	800329c <memset>
 800516c:	4620      	mov	r0, r4
 800516e:	bd70      	pop	{r4, r5, r6, pc}

08005170 <__sfp_lock_acquire>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sfp_lock_acquire+0x8>)
 8005172:	f000 b8ca 	b.w	800530a <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	20000d49 	.word	0x20000d49

0800517c <__sfp_lock_release>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sfp_lock_release+0x8>)
 800517e:	f000 b8c5 	b.w	800530c <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	20000d49 	.word	0x20000d49

08005188 <__sinit_lock_acquire>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sinit_lock_acquire+0x8>)
 800518a:	f000 b8be 	b.w	800530a <__retarget_lock_acquire_recursive>
 800518e:	bf00      	nop
 8005190:	20000d4a 	.word	0x20000d4a

08005194 <__sinit_lock_release>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sinit_lock_release+0x8>)
 8005196:	f000 b8b9 	b.w	800530c <__retarget_lock_release_recursive>
 800519a:	bf00      	nop
 800519c:	20000d4a 	.word	0x20000d4a

080051a0 <__sinit>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4604      	mov	r4, r0
 80051a4:	f7ff fff0 	bl	8005188 <__sinit_lock_acquire>
 80051a8:	69a3      	ldr	r3, [r4, #24]
 80051aa:	b11b      	cbz	r3, 80051b4 <__sinit+0x14>
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f7ff bff0 	b.w	8005194 <__sinit_lock_release>
 80051b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051b8:	6523      	str	r3, [r4, #80]	; 0x50
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <__sinit+0x68>)
 80051bc:	4a13      	ldr	r2, [pc, #76]	; (800520c <__sinit+0x6c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	bf04      	itt	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	61a3      	streq	r3, [r4, #24]
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 f820 	bl	8005210 <__sfp>
 80051d0:	6060      	str	r0, [r4, #4]
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f81c 	bl	8005210 <__sfp>
 80051d8:	60a0      	str	r0, [r4, #8]
 80051da:	4620      	mov	r0, r4
 80051dc:	f000 f818 	bl	8005210 <__sfp>
 80051e0:	2200      	movs	r2, #0
 80051e2:	60e0      	str	r0, [r4, #12]
 80051e4:	2104      	movs	r1, #4
 80051e6:	6860      	ldr	r0, [r4, #4]
 80051e8:	f7ff ff82 	bl	80050f0 <std>
 80051ec:	68a0      	ldr	r0, [r4, #8]
 80051ee:	2201      	movs	r2, #1
 80051f0:	2109      	movs	r1, #9
 80051f2:	f7ff ff7d 	bl	80050f0 <std>
 80051f6:	68e0      	ldr	r0, [r4, #12]
 80051f8:	2202      	movs	r2, #2
 80051fa:	2112      	movs	r1, #18
 80051fc:	f7ff ff78 	bl	80050f0 <std>
 8005200:	2301      	movs	r3, #1
 8005202:	61a3      	str	r3, [r4, #24]
 8005204:	e7d2      	b.n	80051ac <__sinit+0xc>
 8005206:	bf00      	nop
 8005208:	08012784 	.word	0x08012784
 800520c:	08005139 	.word	0x08005139

08005210 <__sfp>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	4607      	mov	r7, r0
 8005214:	f7ff ffac 	bl	8005170 <__sfp_lock_acquire>
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <__sfp+0x84>)
 800521a:	681e      	ldr	r6, [r3, #0]
 800521c:	69b3      	ldr	r3, [r6, #24]
 800521e:	b913      	cbnz	r3, 8005226 <__sfp+0x16>
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ffbd 	bl	80051a0 <__sinit>
 8005226:	3648      	adds	r6, #72	; 0x48
 8005228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800522c:	3b01      	subs	r3, #1
 800522e:	d503      	bpl.n	8005238 <__sfp+0x28>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	b30b      	cbz	r3, 8005278 <__sfp+0x68>
 8005234:	6836      	ldr	r6, [r6, #0]
 8005236:	e7f7      	b.n	8005228 <__sfp+0x18>
 8005238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800523c:	b9d5      	cbnz	r5, 8005274 <__sfp+0x64>
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <__sfp+0x88>)
 8005240:	60e3      	str	r3, [r4, #12]
 8005242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005246:	6665      	str	r5, [r4, #100]	; 0x64
 8005248:	f000 f85e 	bl	8005308 <__retarget_lock_init_recursive>
 800524c:	f7ff ff96 	bl	800517c <__sfp_lock_release>
 8005250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005258:	6025      	str	r5, [r4, #0]
 800525a:	61a5      	str	r5, [r4, #24]
 800525c:	2208      	movs	r2, #8
 800525e:	4629      	mov	r1, r5
 8005260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005264:	f7fe f81a 	bl	800329c <memset>
 8005268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800526c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005270:	4620      	mov	r0, r4
 8005272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005274:	3468      	adds	r4, #104	; 0x68
 8005276:	e7d9      	b.n	800522c <__sfp+0x1c>
 8005278:	2104      	movs	r1, #4
 800527a:	4638      	mov	r0, r7
 800527c:	f7ff ff62 	bl	8005144 <__sfmoreglue>
 8005280:	4604      	mov	r4, r0
 8005282:	6030      	str	r0, [r6, #0]
 8005284:	2800      	cmp	r0, #0
 8005286:	d1d5      	bne.n	8005234 <__sfp+0x24>
 8005288:	f7ff ff78 	bl	800517c <__sfp_lock_release>
 800528c:	230c      	movs	r3, #12
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	e7ee      	b.n	8005270 <__sfp+0x60>
 8005292:	bf00      	nop
 8005294:	08012784 	.word	0x08012784
 8005298:	ffff0001 	.word	0xffff0001

0800529c <fiprintf>:
 800529c:	b40e      	push	{r1, r2, r3}
 800529e:	b503      	push	{r0, r1, lr}
 80052a0:	4601      	mov	r1, r0
 80052a2:	ab03      	add	r3, sp, #12
 80052a4:	4805      	ldr	r0, [pc, #20]	; (80052bc <fiprintf+0x20>)
 80052a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	f000 fe7b 	bl	8005fa8 <_vfiprintf_r>
 80052b2:	b002      	add	sp, #8
 80052b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052b8:	b003      	add	sp, #12
 80052ba:	4770      	bx	lr
 80052bc:	200001b4 	.word	0x200001b4

080052c0 <_fwalk_reent>:
 80052c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c4:	4606      	mov	r6, r0
 80052c6:	4688      	mov	r8, r1
 80052c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052cc:	2700      	movs	r7, #0
 80052ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052d2:	f1b9 0901 	subs.w	r9, r9, #1
 80052d6:	d505      	bpl.n	80052e4 <_fwalk_reent+0x24>
 80052d8:	6824      	ldr	r4, [r4, #0]
 80052da:	2c00      	cmp	r4, #0
 80052dc:	d1f7      	bne.n	80052ce <_fwalk_reent+0xe>
 80052de:	4638      	mov	r0, r7
 80052e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e4:	89ab      	ldrh	r3, [r5, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d907      	bls.n	80052fa <_fwalk_reent+0x3a>
 80052ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ee:	3301      	adds	r3, #1
 80052f0:	d003      	beq.n	80052fa <_fwalk_reent+0x3a>
 80052f2:	4629      	mov	r1, r5
 80052f4:	4630      	mov	r0, r6
 80052f6:	47c0      	blx	r8
 80052f8:	4307      	orrs	r7, r0
 80052fa:	3568      	adds	r5, #104	; 0x68
 80052fc:	e7e9      	b.n	80052d2 <_fwalk_reent+0x12>
	...

08005300 <_localeconv_r>:
 8005300:	4800      	ldr	r0, [pc, #0]	; (8005304 <_localeconv_r+0x4>)
 8005302:	4770      	bx	lr
 8005304:	20000308 	.word	0x20000308

08005308 <__retarget_lock_init_recursive>:
 8005308:	4770      	bx	lr

0800530a <__retarget_lock_acquire_recursive>:
 800530a:	4770      	bx	lr

0800530c <__retarget_lock_release_recursive>:
 800530c:	4770      	bx	lr

0800530e <__swhatbuf_r>:
 800530e:	b570      	push	{r4, r5, r6, lr}
 8005310:	460e      	mov	r6, r1
 8005312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005316:	2900      	cmp	r1, #0
 8005318:	b096      	sub	sp, #88	; 0x58
 800531a:	4614      	mov	r4, r2
 800531c:	461d      	mov	r5, r3
 800531e:	da08      	bge.n	8005332 <__swhatbuf_r+0x24>
 8005320:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	602a      	str	r2, [r5, #0]
 8005328:	061a      	lsls	r2, r3, #24
 800532a:	d410      	bmi.n	800534e <__swhatbuf_r+0x40>
 800532c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005330:	e00e      	b.n	8005350 <__swhatbuf_r+0x42>
 8005332:	466a      	mov	r2, sp
 8005334:	f7fc f852 	bl	80013dc <_fstat_r>
 8005338:	2800      	cmp	r0, #0
 800533a:	dbf1      	blt.n	8005320 <__swhatbuf_r+0x12>
 800533c:	9a01      	ldr	r2, [sp, #4]
 800533e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005342:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005346:	425a      	negs	r2, r3
 8005348:	415a      	adcs	r2, r3
 800534a:	602a      	str	r2, [r5, #0]
 800534c:	e7ee      	b.n	800532c <__swhatbuf_r+0x1e>
 800534e:	2340      	movs	r3, #64	; 0x40
 8005350:	2000      	movs	r0, #0
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	b016      	add	sp, #88	; 0x58
 8005356:	bd70      	pop	{r4, r5, r6, pc}

08005358 <__smakebuf_r>:
 8005358:	898b      	ldrh	r3, [r1, #12]
 800535a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800535c:	079d      	lsls	r5, r3, #30
 800535e:	4606      	mov	r6, r0
 8005360:	460c      	mov	r4, r1
 8005362:	d507      	bpl.n	8005374 <__smakebuf_r+0x1c>
 8005364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2301      	movs	r3, #1
 800536e:	6163      	str	r3, [r4, #20]
 8005370:	b002      	add	sp, #8
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	ab01      	add	r3, sp, #4
 8005376:	466a      	mov	r2, sp
 8005378:	f7ff ffc9 	bl	800530e <__swhatbuf_r>
 800537c:	9900      	ldr	r1, [sp, #0]
 800537e:	4605      	mov	r5, r0
 8005380:	4630      	mov	r0, r6
 8005382:	f000 fc31 	bl	8005be8 <_malloc_r>
 8005386:	b948      	cbnz	r0, 800539c <__smakebuf_r+0x44>
 8005388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538c:	059a      	lsls	r2, r3, #22
 800538e:	d4ef      	bmi.n	8005370 <__smakebuf_r+0x18>
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	e7e3      	b.n	8005364 <__smakebuf_r+0xc>
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <__smakebuf_r+0x7c>)
 800539e:	62b3      	str	r3, [r6, #40]	; 0x28
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	6020      	str	r0, [r4, #0]
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	6163      	str	r3, [r4, #20]
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	6120      	str	r0, [r4, #16]
 80053b2:	b15b      	cbz	r3, 80053cc <__smakebuf_r+0x74>
 80053b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7fc f814 	bl	80013e6 <_isatty_r>
 80053be:	b128      	cbz	r0, 80053cc <__smakebuf_r+0x74>
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	89a0      	ldrh	r0, [r4, #12]
 80053ce:	4305      	orrs	r5, r0
 80053d0:	81a5      	strh	r5, [r4, #12]
 80053d2:	e7cd      	b.n	8005370 <__smakebuf_r+0x18>
 80053d4:	08005139 	.word	0x08005139

080053d8 <malloc>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <malloc+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f000 bc03 	b.w	8005be8 <_malloc_r>
 80053e2:	bf00      	nop
 80053e4:	200001b4 	.word	0x200001b4

080053e8 <__ascii_mbtowc>:
 80053e8:	b082      	sub	sp, #8
 80053ea:	b901      	cbnz	r1, 80053ee <__ascii_mbtowc+0x6>
 80053ec:	a901      	add	r1, sp, #4
 80053ee:	b142      	cbz	r2, 8005402 <__ascii_mbtowc+0x1a>
 80053f0:	b14b      	cbz	r3, 8005406 <__ascii_mbtowc+0x1e>
 80053f2:	7813      	ldrb	r3, [r2, #0]
 80053f4:	600b      	str	r3, [r1, #0]
 80053f6:	7812      	ldrb	r2, [r2, #0]
 80053f8:	1e10      	subs	r0, r2, #0
 80053fa:	bf18      	it	ne
 80053fc:	2001      	movne	r0, #1
 80053fe:	b002      	add	sp, #8
 8005400:	4770      	bx	lr
 8005402:	4610      	mov	r0, r2
 8005404:	e7fb      	b.n	80053fe <__ascii_mbtowc+0x16>
 8005406:	f06f 0001 	mvn.w	r0, #1
 800540a:	e7f8      	b.n	80053fe <__ascii_mbtowc+0x16>

0800540c <memcpy>:
 800540c:	440a      	add	r2, r1
 800540e:	4291      	cmp	r1, r2
 8005410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005414:	d100      	bne.n	8005418 <memcpy+0xc>
 8005416:	4770      	bx	lr
 8005418:	b510      	push	{r4, lr}
 800541a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005422:	4291      	cmp	r1, r2
 8005424:	d1f9      	bne.n	800541a <memcpy+0xe>
 8005426:	bd10      	pop	{r4, pc}

08005428 <_Balloc>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800542c:	4604      	mov	r4, r0
 800542e:	460d      	mov	r5, r1
 8005430:	b976      	cbnz	r6, 8005450 <_Balloc+0x28>
 8005432:	2010      	movs	r0, #16
 8005434:	f7ff ffd0 	bl	80053d8 <malloc>
 8005438:	4602      	mov	r2, r0
 800543a:	6260      	str	r0, [r4, #36]	; 0x24
 800543c:	b920      	cbnz	r0, 8005448 <_Balloc+0x20>
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <_Balloc+0x78>)
 8005440:	4818      	ldr	r0, [pc, #96]	; (80054a4 <_Balloc+0x7c>)
 8005442:	2166      	movs	r1, #102	; 0x66
 8005444:	f7fe fefa 	bl	800423c <__assert_func>
 8005448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800544c:	6006      	str	r6, [r0, #0]
 800544e:	60c6      	str	r6, [r0, #12]
 8005450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005452:	68f3      	ldr	r3, [r6, #12]
 8005454:	b183      	cbz	r3, 8005478 <_Balloc+0x50>
 8005456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800545e:	b9b8      	cbnz	r0, 8005490 <_Balloc+0x68>
 8005460:	2101      	movs	r1, #1
 8005462:	fa01 f605 	lsl.w	r6, r1, r5
 8005466:	1d72      	adds	r2, r6, #5
 8005468:	0092      	lsls	r2, r2, #2
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fb60 	bl	8005b30 <_calloc_r>
 8005470:	b160      	cbz	r0, 800548c <_Balloc+0x64>
 8005472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005476:	e00e      	b.n	8005496 <_Balloc+0x6e>
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	2104      	movs	r1, #4
 800547c:	4620      	mov	r0, r4
 800547e:	f000 fb57 	bl	8005b30 <_calloc_r>
 8005482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005484:	60f0      	str	r0, [r6, #12]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e4      	bne.n	8005456 <_Balloc+0x2e>
 800548c:	2000      	movs	r0, #0
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	6802      	ldr	r2, [r0, #0]
 8005492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005496:	2300      	movs	r3, #0
 8005498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800549c:	e7f7      	b.n	800548e <_Balloc+0x66>
 800549e:	bf00      	nop
 80054a0:	080127ba 	.word	0x080127ba
 80054a4:	0801298e 	.word	0x0801298e

080054a8 <_Bfree>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054ac:	4605      	mov	r5, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	b976      	cbnz	r6, 80054d0 <_Bfree+0x28>
 80054b2:	2010      	movs	r0, #16
 80054b4:	f7ff ff90 	bl	80053d8 <malloc>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6268      	str	r0, [r5, #36]	; 0x24
 80054bc:	b920      	cbnz	r0, 80054c8 <_Bfree+0x20>
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <_Bfree+0x3c>)
 80054c0:	4809      	ldr	r0, [pc, #36]	; (80054e8 <_Bfree+0x40>)
 80054c2:	218a      	movs	r1, #138	; 0x8a
 80054c4:	f7fe feba 	bl	800423c <__assert_func>
 80054c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054cc:	6006      	str	r6, [r0, #0]
 80054ce:	60c6      	str	r6, [r0, #12]
 80054d0:	b13c      	cbz	r4, 80054e2 <_Bfree+0x3a>
 80054d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054d4:	6862      	ldr	r2, [r4, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054dc:	6021      	str	r1, [r4, #0]
 80054de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	080127ba 	.word	0x080127ba
 80054e8:	0801298e 	.word	0x0801298e

080054ec <__multadd>:
 80054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	690d      	ldr	r5, [r1, #16]
 80054f2:	4607      	mov	r7, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	461e      	mov	r6, r3
 80054f8:	f101 0c14 	add.w	ip, r1, #20
 80054fc:	2000      	movs	r0, #0
 80054fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005502:	b299      	uxth	r1, r3
 8005504:	fb02 6101 	mla	r1, r2, r1, r6
 8005508:	0c1e      	lsrs	r6, r3, #16
 800550a:	0c0b      	lsrs	r3, r1, #16
 800550c:	fb02 3306 	mla	r3, r2, r6, r3
 8005510:	b289      	uxth	r1, r1
 8005512:	3001      	adds	r0, #1
 8005514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005518:	4285      	cmp	r5, r0
 800551a:	f84c 1b04 	str.w	r1, [ip], #4
 800551e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005522:	dcec      	bgt.n	80054fe <__multadd+0x12>
 8005524:	b30e      	cbz	r6, 800556a <__multadd+0x7e>
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	42ab      	cmp	r3, r5
 800552a:	dc19      	bgt.n	8005560 <__multadd+0x74>
 800552c:	6861      	ldr	r1, [r4, #4]
 800552e:	4638      	mov	r0, r7
 8005530:	3101      	adds	r1, #1
 8005532:	f7ff ff79 	bl	8005428 <_Balloc>
 8005536:	4680      	mov	r8, r0
 8005538:	b928      	cbnz	r0, 8005546 <__multadd+0x5a>
 800553a:	4602      	mov	r2, r0
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <__multadd+0x84>)
 800553e:	480d      	ldr	r0, [pc, #52]	; (8005574 <__multadd+0x88>)
 8005540:	21b5      	movs	r1, #181	; 0xb5
 8005542:	f7fe fe7b 	bl	800423c <__assert_func>
 8005546:	6922      	ldr	r2, [r4, #16]
 8005548:	3202      	adds	r2, #2
 800554a:	f104 010c 	add.w	r1, r4, #12
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	300c      	adds	r0, #12
 8005552:	f7ff ff5b 	bl	800540c <memcpy>
 8005556:	4621      	mov	r1, r4
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff ffa5 	bl	80054a8 <_Bfree>
 800555e:	4644      	mov	r4, r8
 8005560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005564:	3501      	adds	r5, #1
 8005566:	615e      	str	r6, [r3, #20]
 8005568:	6125      	str	r5, [r4, #16]
 800556a:	4620      	mov	r0, r4
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	08012916 	.word	0x08012916
 8005574:	0801298e 	.word	0x0801298e

08005578 <__hi0bits>:
 8005578:	0c03      	lsrs	r3, r0, #16
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	b9d3      	cbnz	r3, 80055b4 <__hi0bits+0x3c>
 800557e:	0400      	lsls	r0, r0, #16
 8005580:	2310      	movs	r3, #16
 8005582:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005586:	bf04      	itt	eq
 8005588:	0200      	lsleq	r0, r0, #8
 800558a:	3308      	addeq	r3, #8
 800558c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005590:	bf04      	itt	eq
 8005592:	0100      	lsleq	r0, r0, #4
 8005594:	3304      	addeq	r3, #4
 8005596:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800559a:	bf04      	itt	eq
 800559c:	0080      	lsleq	r0, r0, #2
 800559e:	3302      	addeq	r3, #2
 80055a0:	2800      	cmp	r0, #0
 80055a2:	db05      	blt.n	80055b0 <__hi0bits+0x38>
 80055a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055a8:	f103 0301 	add.w	r3, r3, #1
 80055ac:	bf08      	it	eq
 80055ae:	2320      	moveq	r3, #32
 80055b0:	4618      	mov	r0, r3
 80055b2:	4770      	bx	lr
 80055b4:	2300      	movs	r3, #0
 80055b6:	e7e4      	b.n	8005582 <__hi0bits+0xa>

080055b8 <__lo0bits>:
 80055b8:	6803      	ldr	r3, [r0, #0]
 80055ba:	f013 0207 	ands.w	r2, r3, #7
 80055be:	4601      	mov	r1, r0
 80055c0:	d00b      	beq.n	80055da <__lo0bits+0x22>
 80055c2:	07da      	lsls	r2, r3, #31
 80055c4:	d423      	bmi.n	800560e <__lo0bits+0x56>
 80055c6:	0798      	lsls	r0, r3, #30
 80055c8:	bf49      	itett	mi
 80055ca:	085b      	lsrmi	r3, r3, #1
 80055cc:	089b      	lsrpl	r3, r3, #2
 80055ce:	2001      	movmi	r0, #1
 80055d0:	600b      	strmi	r3, [r1, #0]
 80055d2:	bf5c      	itt	pl
 80055d4:	600b      	strpl	r3, [r1, #0]
 80055d6:	2002      	movpl	r0, #2
 80055d8:	4770      	bx	lr
 80055da:	b298      	uxth	r0, r3
 80055dc:	b9a8      	cbnz	r0, 800560a <__lo0bits+0x52>
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	2010      	movs	r0, #16
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	b90a      	cbnz	r2, 80055ea <__lo0bits+0x32>
 80055e6:	3008      	adds	r0, #8
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	071a      	lsls	r2, r3, #28
 80055ec:	bf04      	itt	eq
 80055ee:	091b      	lsreq	r3, r3, #4
 80055f0:	3004      	addeq	r0, #4
 80055f2:	079a      	lsls	r2, r3, #30
 80055f4:	bf04      	itt	eq
 80055f6:	089b      	lsreq	r3, r3, #2
 80055f8:	3002      	addeq	r0, #2
 80055fa:	07da      	lsls	r2, r3, #31
 80055fc:	d403      	bmi.n	8005606 <__lo0bits+0x4e>
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	f100 0001 	add.w	r0, r0, #1
 8005604:	d005      	beq.n	8005612 <__lo0bits+0x5a>
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	4770      	bx	lr
 800560a:	4610      	mov	r0, r2
 800560c:	e7e9      	b.n	80055e2 <__lo0bits+0x2a>
 800560e:	2000      	movs	r0, #0
 8005610:	4770      	bx	lr
 8005612:	2020      	movs	r0, #32
 8005614:	4770      	bx	lr
	...

08005618 <__i2b>:
 8005618:	b510      	push	{r4, lr}
 800561a:	460c      	mov	r4, r1
 800561c:	2101      	movs	r1, #1
 800561e:	f7ff ff03 	bl	8005428 <_Balloc>
 8005622:	4602      	mov	r2, r0
 8005624:	b928      	cbnz	r0, 8005632 <__i2b+0x1a>
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <__i2b+0x24>)
 8005628:	4805      	ldr	r0, [pc, #20]	; (8005640 <__i2b+0x28>)
 800562a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800562e:	f7fe fe05 	bl	800423c <__assert_func>
 8005632:	2301      	movs	r3, #1
 8005634:	6144      	str	r4, [r0, #20]
 8005636:	6103      	str	r3, [r0, #16]
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	08012916 	.word	0x08012916
 8005640:	0801298e 	.word	0x0801298e

08005644 <__multiply>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	4691      	mov	r9, r2
 800564a:	690a      	ldr	r2, [r1, #16]
 800564c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	bfb8      	it	lt
 8005654:	460b      	movlt	r3, r1
 8005656:	460c      	mov	r4, r1
 8005658:	bfbc      	itt	lt
 800565a:	464c      	movlt	r4, r9
 800565c:	4699      	movlt	r9, r3
 800565e:	6927      	ldr	r7, [r4, #16]
 8005660:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	6861      	ldr	r1, [r4, #4]
 8005668:	eb07 060a 	add.w	r6, r7, sl
 800566c:	42b3      	cmp	r3, r6
 800566e:	b085      	sub	sp, #20
 8005670:	bfb8      	it	lt
 8005672:	3101      	addlt	r1, #1
 8005674:	f7ff fed8 	bl	8005428 <_Balloc>
 8005678:	b930      	cbnz	r0, 8005688 <__multiply+0x44>
 800567a:	4602      	mov	r2, r0
 800567c:	4b44      	ldr	r3, [pc, #272]	; (8005790 <__multiply+0x14c>)
 800567e:	4845      	ldr	r0, [pc, #276]	; (8005794 <__multiply+0x150>)
 8005680:	f240 115d 	movw	r1, #349	; 0x15d
 8005684:	f7fe fdda 	bl	800423c <__assert_func>
 8005688:	f100 0514 	add.w	r5, r0, #20
 800568c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005690:	462b      	mov	r3, r5
 8005692:	2200      	movs	r2, #0
 8005694:	4543      	cmp	r3, r8
 8005696:	d321      	bcc.n	80056dc <__multiply+0x98>
 8005698:	f104 0314 	add.w	r3, r4, #20
 800569c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056a0:	f109 0314 	add.w	r3, r9, #20
 80056a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056a8:	9202      	str	r2, [sp, #8]
 80056aa:	1b3a      	subs	r2, r7, r4
 80056ac:	3a15      	subs	r2, #21
 80056ae:	f022 0203 	bic.w	r2, r2, #3
 80056b2:	3204      	adds	r2, #4
 80056b4:	f104 0115 	add.w	r1, r4, #21
 80056b8:	428f      	cmp	r7, r1
 80056ba:	bf38      	it	cc
 80056bc:	2204      	movcc	r2, #4
 80056be:	9201      	str	r2, [sp, #4]
 80056c0:	9a02      	ldr	r2, [sp, #8]
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d80c      	bhi.n	80056e2 <__multiply+0x9e>
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	dd03      	ble.n	80056d4 <__multiply+0x90>
 80056cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05a      	beq.n	800578a <__multiply+0x146>
 80056d4:	6106      	str	r6, [r0, #16]
 80056d6:	b005      	add	sp, #20
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	f843 2b04 	str.w	r2, [r3], #4
 80056e0:	e7d8      	b.n	8005694 <__multiply+0x50>
 80056e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80056e6:	f1ba 0f00 	cmp.w	sl, #0
 80056ea:	d024      	beq.n	8005736 <__multiply+0xf2>
 80056ec:	f104 0e14 	add.w	lr, r4, #20
 80056f0:	46a9      	mov	r9, r5
 80056f2:	f04f 0c00 	mov.w	ip, #0
 80056f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80056fa:	f8d9 1000 	ldr.w	r1, [r9]
 80056fe:	fa1f fb82 	uxth.w	fp, r2
 8005702:	b289      	uxth	r1, r1
 8005704:	fb0a 110b 	mla	r1, sl, fp, r1
 8005708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800570c:	f8d9 2000 	ldr.w	r2, [r9]
 8005710:	4461      	add	r1, ip
 8005712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005716:	fb0a c20b 	mla	r2, sl, fp, ip
 800571a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800571e:	b289      	uxth	r1, r1
 8005720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005724:	4577      	cmp	r7, lr
 8005726:	f849 1b04 	str.w	r1, [r9], #4
 800572a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800572e:	d8e2      	bhi.n	80056f6 <__multiply+0xb2>
 8005730:	9a01      	ldr	r2, [sp, #4]
 8005732:	f845 c002 	str.w	ip, [r5, r2]
 8005736:	9a03      	ldr	r2, [sp, #12]
 8005738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800573c:	3304      	adds	r3, #4
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	d020      	beq.n	8005786 <__multiply+0x142>
 8005744:	6829      	ldr	r1, [r5, #0]
 8005746:	f104 0c14 	add.w	ip, r4, #20
 800574a:	46ae      	mov	lr, r5
 800574c:	f04f 0a00 	mov.w	sl, #0
 8005750:	f8bc b000 	ldrh.w	fp, [ip]
 8005754:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005758:	fb09 220b 	mla	r2, r9, fp, r2
 800575c:	4492      	add	sl, r2
 800575e:	b289      	uxth	r1, r1
 8005760:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005764:	f84e 1b04 	str.w	r1, [lr], #4
 8005768:	f85c 2b04 	ldr.w	r2, [ip], #4
 800576c:	f8be 1000 	ldrh.w	r1, [lr]
 8005770:	0c12      	lsrs	r2, r2, #16
 8005772:	fb09 1102 	mla	r1, r9, r2, r1
 8005776:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800577a:	4567      	cmp	r7, ip
 800577c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005780:	d8e6      	bhi.n	8005750 <__multiply+0x10c>
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	50a9      	str	r1, [r5, r2]
 8005786:	3504      	adds	r5, #4
 8005788:	e79a      	b.n	80056c0 <__multiply+0x7c>
 800578a:	3e01      	subs	r6, #1
 800578c:	e79c      	b.n	80056c8 <__multiply+0x84>
 800578e:	bf00      	nop
 8005790:	08012916 	.word	0x08012916
 8005794:	0801298e 	.word	0x0801298e

08005798 <__pow5mult>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4615      	mov	r5, r2
 800579e:	f012 0203 	ands.w	r2, r2, #3
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	d007      	beq.n	80057b8 <__pow5mult+0x20>
 80057a8:	4c25      	ldr	r4, [pc, #148]	; (8005840 <__pow5mult+0xa8>)
 80057aa:	3a01      	subs	r2, #1
 80057ac:	2300      	movs	r3, #0
 80057ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057b2:	f7ff fe9b 	bl	80054ec <__multadd>
 80057b6:	4607      	mov	r7, r0
 80057b8:	10ad      	asrs	r5, r5, #2
 80057ba:	d03d      	beq.n	8005838 <__pow5mult+0xa0>
 80057bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057be:	b97c      	cbnz	r4, 80057e0 <__pow5mult+0x48>
 80057c0:	2010      	movs	r0, #16
 80057c2:	f7ff fe09 	bl	80053d8 <malloc>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6270      	str	r0, [r6, #36]	; 0x24
 80057ca:	b928      	cbnz	r0, 80057d8 <__pow5mult+0x40>
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <__pow5mult+0xac>)
 80057ce:	481e      	ldr	r0, [pc, #120]	; (8005848 <__pow5mult+0xb0>)
 80057d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80057d4:	f7fe fd32 	bl	800423c <__assert_func>
 80057d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057dc:	6004      	str	r4, [r0, #0]
 80057de:	60c4      	str	r4, [r0, #12]
 80057e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e8:	b94c      	cbnz	r4, 80057fe <__pow5mult+0x66>
 80057ea:	f240 2171 	movw	r1, #625	; 0x271
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7ff ff12 	bl	8005618 <__i2b>
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80057fa:	4604      	mov	r4, r0
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	f04f 0900 	mov.w	r9, #0
 8005802:	07eb      	lsls	r3, r5, #31
 8005804:	d50a      	bpl.n	800581c <__pow5mult+0x84>
 8005806:	4639      	mov	r1, r7
 8005808:	4622      	mov	r2, r4
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ff1a 	bl	8005644 <__multiply>
 8005810:	4639      	mov	r1, r7
 8005812:	4680      	mov	r8, r0
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff fe47 	bl	80054a8 <_Bfree>
 800581a:	4647      	mov	r7, r8
 800581c:	106d      	asrs	r5, r5, #1
 800581e:	d00b      	beq.n	8005838 <__pow5mult+0xa0>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	b938      	cbnz	r0, 8005834 <__pow5mult+0x9c>
 8005824:	4622      	mov	r2, r4
 8005826:	4621      	mov	r1, r4
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ff0b 	bl	8005644 <__multiply>
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f8c0 9000 	str.w	r9, [r0]
 8005834:	4604      	mov	r4, r0
 8005836:	e7e4      	b.n	8005802 <__pow5mult+0x6a>
 8005838:	4638      	mov	r0, r7
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	bf00      	nop
 8005840:	08012b00 	.word	0x08012b00
 8005844:	080127ba 	.word	0x080127ba
 8005848:	0801298e 	.word	0x0801298e

0800584c <__lshift>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	460c      	mov	r4, r1
 8005852:	6849      	ldr	r1, [r1, #4]
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	4607      	mov	r7, r0
 800585e:	4691      	mov	r9, r2
 8005860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005864:	f108 0601 	add.w	r6, r8, #1
 8005868:	42b3      	cmp	r3, r6
 800586a:	db0b      	blt.n	8005884 <__lshift+0x38>
 800586c:	4638      	mov	r0, r7
 800586e:	f7ff fddb 	bl	8005428 <_Balloc>
 8005872:	4605      	mov	r5, r0
 8005874:	b948      	cbnz	r0, 800588a <__lshift+0x3e>
 8005876:	4602      	mov	r2, r0
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <__lshift+0xd8>)
 800587a:	482b      	ldr	r0, [pc, #172]	; (8005928 <__lshift+0xdc>)
 800587c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005880:	f7fe fcdc 	bl	800423c <__assert_func>
 8005884:	3101      	adds	r1, #1
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	e7ee      	b.n	8005868 <__lshift+0x1c>
 800588a:	2300      	movs	r3, #0
 800588c:	f100 0114 	add.w	r1, r0, #20
 8005890:	f100 0210 	add.w	r2, r0, #16
 8005894:	4618      	mov	r0, r3
 8005896:	4553      	cmp	r3, sl
 8005898:	db37      	blt.n	800590a <__lshift+0xbe>
 800589a:	6920      	ldr	r0, [r4, #16]
 800589c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058a0:	f104 0314 	add.w	r3, r4, #20
 80058a4:	f019 091f 	ands.w	r9, r9, #31
 80058a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058b0:	d02f      	beq.n	8005912 <__lshift+0xc6>
 80058b2:	f1c9 0e20 	rsb	lr, r9, #32
 80058b6:	468a      	mov	sl, r1
 80058b8:	f04f 0c00 	mov.w	ip, #0
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	fa02 f209 	lsl.w	r2, r2, r9
 80058c2:	ea42 020c 	orr.w	r2, r2, ip
 80058c6:	f84a 2b04 	str.w	r2, [sl], #4
 80058ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ce:	4298      	cmp	r0, r3
 80058d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80058d4:	d8f2      	bhi.n	80058bc <__lshift+0x70>
 80058d6:	1b03      	subs	r3, r0, r4
 80058d8:	3b15      	subs	r3, #21
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	3304      	adds	r3, #4
 80058e0:	f104 0215 	add.w	r2, r4, #21
 80058e4:	4290      	cmp	r0, r2
 80058e6:	bf38      	it	cc
 80058e8:	2304      	movcc	r3, #4
 80058ea:	f841 c003 	str.w	ip, [r1, r3]
 80058ee:	f1bc 0f00 	cmp.w	ip, #0
 80058f2:	d001      	beq.n	80058f8 <__lshift+0xac>
 80058f4:	f108 0602 	add.w	r6, r8, #2
 80058f8:	3e01      	subs	r6, #1
 80058fa:	4638      	mov	r0, r7
 80058fc:	612e      	str	r6, [r5, #16]
 80058fe:	4621      	mov	r1, r4
 8005900:	f7ff fdd2 	bl	80054a8 <_Bfree>
 8005904:	4628      	mov	r0, r5
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	f842 0f04 	str.w	r0, [r2, #4]!
 800590e:	3301      	adds	r3, #1
 8005910:	e7c1      	b.n	8005896 <__lshift+0x4a>
 8005912:	3904      	subs	r1, #4
 8005914:	f853 2b04 	ldr.w	r2, [r3], #4
 8005918:	f841 2f04 	str.w	r2, [r1, #4]!
 800591c:	4298      	cmp	r0, r3
 800591e:	d8f9      	bhi.n	8005914 <__lshift+0xc8>
 8005920:	e7ea      	b.n	80058f8 <__lshift+0xac>
 8005922:	bf00      	nop
 8005924:	08012916 	.word	0x08012916
 8005928:	0801298e 	.word	0x0801298e

0800592c <__mcmp>:
 800592c:	b530      	push	{r4, r5, lr}
 800592e:	6902      	ldr	r2, [r0, #16]
 8005930:	690c      	ldr	r4, [r1, #16]
 8005932:	1b12      	subs	r2, r2, r4
 8005934:	d10e      	bne.n	8005954 <__mcmp+0x28>
 8005936:	f100 0314 	add.w	r3, r0, #20
 800593a:	3114      	adds	r1, #20
 800593c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005940:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005944:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005948:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800594c:	42a5      	cmp	r5, r4
 800594e:	d003      	beq.n	8005958 <__mcmp+0x2c>
 8005950:	d305      	bcc.n	800595e <__mcmp+0x32>
 8005952:	2201      	movs	r2, #1
 8005954:	4610      	mov	r0, r2
 8005956:	bd30      	pop	{r4, r5, pc}
 8005958:	4283      	cmp	r3, r0
 800595a:	d3f3      	bcc.n	8005944 <__mcmp+0x18>
 800595c:	e7fa      	b.n	8005954 <__mcmp+0x28>
 800595e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005962:	e7f7      	b.n	8005954 <__mcmp+0x28>

08005964 <__mdiff>:
 8005964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	460c      	mov	r4, r1
 800596a:	4606      	mov	r6, r0
 800596c:	4611      	mov	r1, r2
 800596e:	4620      	mov	r0, r4
 8005970:	4690      	mov	r8, r2
 8005972:	f7ff ffdb 	bl	800592c <__mcmp>
 8005976:	1e05      	subs	r5, r0, #0
 8005978:	d110      	bne.n	800599c <__mdiff+0x38>
 800597a:	4629      	mov	r1, r5
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff fd53 	bl	8005428 <_Balloc>
 8005982:	b930      	cbnz	r0, 8005992 <__mdiff+0x2e>
 8005984:	4b3a      	ldr	r3, [pc, #232]	; (8005a70 <__mdiff+0x10c>)
 8005986:	4602      	mov	r2, r0
 8005988:	f240 2132 	movw	r1, #562	; 0x232
 800598c:	4839      	ldr	r0, [pc, #228]	; (8005a74 <__mdiff+0x110>)
 800598e:	f7fe fc55 	bl	800423c <__assert_func>
 8005992:	2301      	movs	r3, #1
 8005994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	bfa4      	itt	ge
 800599e:	4643      	movge	r3, r8
 80059a0:	46a0      	movge	r8, r4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059a8:	bfa6      	itte	ge
 80059aa:	461c      	movge	r4, r3
 80059ac:	2500      	movge	r5, #0
 80059ae:	2501      	movlt	r5, #1
 80059b0:	f7ff fd3a 	bl	8005428 <_Balloc>
 80059b4:	b920      	cbnz	r0, 80059c0 <__mdiff+0x5c>
 80059b6:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <__mdiff+0x10c>)
 80059b8:	4602      	mov	r2, r0
 80059ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80059be:	e7e5      	b.n	800598c <__mdiff+0x28>
 80059c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059c4:	6926      	ldr	r6, [r4, #16]
 80059c6:	60c5      	str	r5, [r0, #12]
 80059c8:	f104 0914 	add.w	r9, r4, #20
 80059cc:	f108 0514 	add.w	r5, r8, #20
 80059d0:	f100 0e14 	add.w	lr, r0, #20
 80059d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80059d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80059dc:	f108 0210 	add.w	r2, r8, #16
 80059e0:	46f2      	mov	sl, lr
 80059e2:	2100      	movs	r1, #0
 80059e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80059e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80059ec:	fa1f f883 	uxth.w	r8, r3
 80059f0:	fa11 f18b 	uxtah	r1, r1, fp
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	eba1 0808 	sub.w	r8, r1, r8
 80059fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a02:	fa1f f888 	uxth.w	r8, r8
 8005a06:	1419      	asrs	r1, r3, #16
 8005a08:	454e      	cmp	r6, r9
 8005a0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a0e:	f84a 3b04 	str.w	r3, [sl], #4
 8005a12:	d8e7      	bhi.n	80059e4 <__mdiff+0x80>
 8005a14:	1b33      	subs	r3, r6, r4
 8005a16:	3b15      	subs	r3, #21
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	3415      	adds	r4, #21
 8005a20:	42a6      	cmp	r6, r4
 8005a22:	bf38      	it	cc
 8005a24:	2304      	movcc	r3, #4
 8005a26:	441d      	add	r5, r3
 8005a28:	4473      	add	r3, lr
 8005a2a:	469e      	mov	lr, r3
 8005a2c:	462e      	mov	r6, r5
 8005a2e:	4566      	cmp	r6, ip
 8005a30:	d30e      	bcc.n	8005a50 <__mdiff+0xec>
 8005a32:	f10c 0203 	add.w	r2, ip, #3
 8005a36:	1b52      	subs	r2, r2, r5
 8005a38:	f022 0203 	bic.w	r2, r2, #3
 8005a3c:	3d03      	subs	r5, #3
 8005a3e:	45ac      	cmp	ip, r5
 8005a40:	bf38      	it	cc
 8005a42:	2200      	movcc	r2, #0
 8005a44:	441a      	add	r2, r3
 8005a46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005a4a:	b17b      	cbz	r3, 8005a6c <__mdiff+0x108>
 8005a4c:	6107      	str	r7, [r0, #16]
 8005a4e:	e7a3      	b.n	8005998 <__mdiff+0x34>
 8005a50:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a54:	fa11 f288 	uxtah	r2, r1, r8
 8005a58:	1414      	asrs	r4, r2, #16
 8005a5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a5e:	b292      	uxth	r2, r2
 8005a60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005a64:	f84e 2b04 	str.w	r2, [lr], #4
 8005a68:	1421      	asrs	r1, r4, #16
 8005a6a:	e7e0      	b.n	8005a2e <__mdiff+0xca>
 8005a6c:	3f01      	subs	r7, #1
 8005a6e:	e7ea      	b.n	8005a46 <__mdiff+0xe2>
 8005a70:	08012916 	.word	0x08012916
 8005a74:	0801298e 	.word	0x0801298e

08005a78 <__d2b>:
 8005a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	4689      	mov	r9, r1
 8005a7e:	2101      	movs	r1, #1
 8005a80:	ec57 6b10 	vmov	r6, r7, d0
 8005a84:	4690      	mov	r8, r2
 8005a86:	f7ff fccf 	bl	8005428 <_Balloc>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	b930      	cbnz	r0, 8005a9c <__d2b+0x24>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <__d2b+0xb0>)
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <__d2b+0xb4>)
 8005a94:	f240 310a 	movw	r1, #778	; 0x30a
 8005a98:	f7fe fbd0 	bl	800423c <__assert_func>
 8005a9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005aa4:	bb35      	cbnz	r5, 8005af4 <__d2b+0x7c>
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	d028      	beq.n	8005afe <__d2b+0x86>
 8005aac:	4668      	mov	r0, sp
 8005aae:	9600      	str	r6, [sp, #0]
 8005ab0:	f7ff fd82 	bl	80055b8 <__lo0bits>
 8005ab4:	9900      	ldr	r1, [sp, #0]
 8005ab6:	b300      	cbz	r0, 8005afa <__d2b+0x82>
 8005ab8:	9a01      	ldr	r2, [sp, #4]
 8005aba:	f1c0 0320 	rsb	r3, r0, #32
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	40c2      	lsrs	r2, r0
 8005ac6:	6163      	str	r3, [r4, #20]
 8005ac8:	9201      	str	r2, [sp, #4]
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	61a3      	str	r3, [r4, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bf14      	ite	ne
 8005ad2:	2202      	movne	r2, #2
 8005ad4:	2201      	moveq	r2, #1
 8005ad6:	6122      	str	r2, [r4, #16]
 8005ad8:	b1d5      	cbz	r5, 8005b10 <__d2b+0x98>
 8005ada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ade:	4405      	add	r5, r0
 8005ae0:	f8c9 5000 	str.w	r5, [r9]
 8005ae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ae8:	f8c8 0000 	str.w	r0, [r8]
 8005aec:	4620      	mov	r0, r4
 8005aee:	b003      	add	sp, #12
 8005af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af8:	e7d5      	b.n	8005aa6 <__d2b+0x2e>
 8005afa:	6161      	str	r1, [r4, #20]
 8005afc:	e7e5      	b.n	8005aca <__d2b+0x52>
 8005afe:	a801      	add	r0, sp, #4
 8005b00:	f7ff fd5a 	bl	80055b8 <__lo0bits>
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	6163      	str	r3, [r4, #20]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	6122      	str	r2, [r4, #16]
 8005b0c:	3020      	adds	r0, #32
 8005b0e:	e7e3      	b.n	8005ad8 <__d2b+0x60>
 8005b10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b18:	f8c9 0000 	str.w	r0, [r9]
 8005b1c:	6918      	ldr	r0, [r3, #16]
 8005b1e:	f7ff fd2b 	bl	8005578 <__hi0bits>
 8005b22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b26:	e7df      	b.n	8005ae8 <__d2b+0x70>
 8005b28:	08012916 	.word	0x08012916
 8005b2c:	0801298e 	.word	0x0801298e

08005b30 <_calloc_r>:
 8005b30:	b513      	push	{r0, r1, r4, lr}
 8005b32:	434a      	muls	r2, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	9201      	str	r2, [sp, #4]
 8005b38:	f000 f856 	bl	8005be8 <_malloc_r>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	b118      	cbz	r0, 8005b48 <_calloc_r+0x18>
 8005b40:	9a01      	ldr	r2, [sp, #4]
 8005b42:	2100      	movs	r1, #0
 8005b44:	f7fd fbaa 	bl	800329c <memset>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd10      	pop	{r4, pc}
	...

08005b50 <_free_r>:
 8005b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b52:	2900      	cmp	r1, #0
 8005b54:	d044      	beq.n	8005be0 <_free_r+0x90>
 8005b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5a:	9001      	str	r0, [sp, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b62:	bfb8      	it	lt
 8005b64:	18e4      	addlt	r4, r4, r3
 8005b66:	f000 fc09 	bl	800637c <__malloc_lock>
 8005b6a:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <_free_r+0x94>)
 8005b6c:	9801      	ldr	r0, [sp, #4]
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	b933      	cbnz	r3, 8005b80 <_free_r+0x30>
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	6014      	str	r4, [r2, #0]
 8005b76:	b003      	add	sp, #12
 8005b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b7c:	f000 bc04 	b.w	8006388 <__malloc_unlock>
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d908      	bls.n	8005b96 <_free_r+0x46>
 8005b84:	6825      	ldr	r5, [r4, #0]
 8005b86:	1961      	adds	r1, r4, r5
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	bf01      	itttt	eq
 8005b8c:	6819      	ldreq	r1, [r3, #0]
 8005b8e:	685b      	ldreq	r3, [r3, #4]
 8005b90:	1949      	addeq	r1, r1, r5
 8005b92:	6021      	streq	r1, [r4, #0]
 8005b94:	e7ed      	b.n	8005b72 <_free_r+0x22>
 8005b96:	461a      	mov	r2, r3
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	b10b      	cbz	r3, 8005ba0 <_free_r+0x50>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d9fa      	bls.n	8005b96 <_free_r+0x46>
 8005ba0:	6811      	ldr	r1, [r2, #0]
 8005ba2:	1855      	adds	r5, r2, r1
 8005ba4:	42a5      	cmp	r5, r4
 8005ba6:	d10b      	bne.n	8005bc0 <_free_r+0x70>
 8005ba8:	6824      	ldr	r4, [r4, #0]
 8005baa:	4421      	add	r1, r4
 8005bac:	1854      	adds	r4, r2, r1
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	6011      	str	r1, [r2, #0]
 8005bb2:	d1e0      	bne.n	8005b76 <_free_r+0x26>
 8005bb4:	681c      	ldr	r4, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	6053      	str	r3, [r2, #4]
 8005bba:	4421      	add	r1, r4
 8005bbc:	6011      	str	r1, [r2, #0]
 8005bbe:	e7da      	b.n	8005b76 <_free_r+0x26>
 8005bc0:	d902      	bls.n	8005bc8 <_free_r+0x78>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	6003      	str	r3, [r0, #0]
 8005bc6:	e7d6      	b.n	8005b76 <_free_r+0x26>
 8005bc8:	6825      	ldr	r5, [r4, #0]
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf04      	itt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	bf04      	itt	eq
 8005bd8:	1949      	addeq	r1, r1, r5
 8005bda:	6021      	streq	r1, [r4, #0]
 8005bdc:	6054      	str	r4, [r2, #4]
 8005bde:	e7ca      	b.n	8005b76 <_free_r+0x26>
 8005be0:	b003      	add	sp, #12
 8005be2:	bd30      	pop	{r4, r5, pc}
 8005be4:	20000d4c 	.word	0x20000d4c

08005be8 <_malloc_r>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	1ccd      	adds	r5, r1, #3
 8005bec:	f025 0503 	bic.w	r5, r5, #3
 8005bf0:	3508      	adds	r5, #8
 8005bf2:	2d0c      	cmp	r5, #12
 8005bf4:	bf38      	it	cc
 8005bf6:	250c      	movcc	r5, #12
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	db01      	blt.n	8005c02 <_malloc_r+0x1a>
 8005bfe:	42a9      	cmp	r1, r5
 8005c00:	d903      	bls.n	8005c0a <_malloc_r+0x22>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6033      	str	r3, [r6, #0]
 8005c06:	2000      	movs	r0, #0
 8005c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0a:	f000 fbb7 	bl	800637c <__malloc_lock>
 8005c0e:	4921      	ldr	r1, [pc, #132]	; (8005c94 <_malloc_r+0xac>)
 8005c10:	680a      	ldr	r2, [r1, #0]
 8005c12:	4614      	mov	r4, r2
 8005c14:	b99c      	cbnz	r4, 8005c3e <_malloc_r+0x56>
 8005c16:	4f20      	ldr	r7, [pc, #128]	; (8005c98 <_malloc_r+0xb0>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	b923      	cbnz	r3, 8005c26 <_malloc_r+0x3e>
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7fb fbc2 	bl	80013a8 <_sbrk_r>
 8005c24:	6038      	str	r0, [r7, #0]
 8005c26:	4629      	mov	r1, r5
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f7fb fbbd 	bl	80013a8 <_sbrk_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d123      	bne.n	8005c7a <_malloc_r+0x92>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	4630      	mov	r0, r6
 8005c38:	f000 fba6 	bl	8006388 <__malloc_unlock>
 8005c3c:	e7e3      	b.n	8005c06 <_malloc_r+0x1e>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	1b5b      	subs	r3, r3, r5
 8005c42:	d417      	bmi.n	8005c74 <_malloc_r+0x8c>
 8005c44:	2b0b      	cmp	r3, #11
 8005c46:	d903      	bls.n	8005c50 <_malloc_r+0x68>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	441c      	add	r4, r3
 8005c4c:	6025      	str	r5, [r4, #0]
 8005c4e:	e004      	b.n	8005c5a <_malloc_r+0x72>
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	42a2      	cmp	r2, r4
 8005c54:	bf0c      	ite	eq
 8005c56:	600b      	streq	r3, [r1, #0]
 8005c58:	6053      	strne	r3, [r2, #4]
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 fb94 	bl	8006388 <__malloc_unlock>
 8005c60:	f104 000b 	add.w	r0, r4, #11
 8005c64:	1d23      	adds	r3, r4, #4
 8005c66:	f020 0007 	bic.w	r0, r0, #7
 8005c6a:	1ac2      	subs	r2, r0, r3
 8005c6c:	d0cc      	beq.n	8005c08 <_malloc_r+0x20>
 8005c6e:	1a1b      	subs	r3, r3, r0
 8005c70:	50a3      	str	r3, [r4, r2]
 8005c72:	e7c9      	b.n	8005c08 <_malloc_r+0x20>
 8005c74:	4622      	mov	r2, r4
 8005c76:	6864      	ldr	r4, [r4, #4]
 8005c78:	e7cc      	b.n	8005c14 <_malloc_r+0x2c>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d0e3      	beq.n	8005c4c <_malloc_r+0x64>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7fb fb8e 	bl	80013a8 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d1dd      	bne.n	8005c4c <_malloc_r+0x64>
 8005c90:	e7cf      	b.n	8005c32 <_malloc_r+0x4a>
 8005c92:	bf00      	nop
 8005c94:	20000d4c 	.word	0x20000d4c
 8005c98:	20000d50 	.word	0x20000d50

08005c9c <__ssputs_r>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	688e      	ldr	r6, [r1, #8]
 8005ca2:	429e      	cmp	r6, r3
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	4690      	mov	r8, r2
 8005caa:	461f      	mov	r7, r3
 8005cac:	d838      	bhi.n	8005d20 <__ssputs_r+0x84>
 8005cae:	898a      	ldrh	r2, [r1, #12]
 8005cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cb4:	d032      	beq.n	8005d1c <__ssputs_r+0x80>
 8005cb6:	6825      	ldr	r5, [r4, #0]
 8005cb8:	6909      	ldr	r1, [r1, #16]
 8005cba:	eba5 0901 	sub.w	r9, r5, r1
 8005cbe:	6965      	ldr	r5, [r4, #20]
 8005cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cc8:	3301      	adds	r3, #1
 8005cca:	444b      	add	r3, r9
 8005ccc:	106d      	asrs	r5, r5, #1
 8005cce:	429d      	cmp	r5, r3
 8005cd0:	bf38      	it	cc
 8005cd2:	461d      	movcc	r5, r3
 8005cd4:	0553      	lsls	r3, r2, #21
 8005cd6:	d531      	bpl.n	8005d3c <__ssputs_r+0xa0>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7ff ff85 	bl	8005be8 <_malloc_r>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	b950      	cbnz	r0, 8005cf8 <__ssputs_r+0x5c>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	f8ca 3000 	str.w	r3, [sl]
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf8:	6921      	ldr	r1, [r4, #16]
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	f7ff fb86 	bl	800540c <memcpy>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	6126      	str	r6, [r4, #16]
 8005d0e:	6165      	str	r5, [r4, #20]
 8005d10:	444e      	add	r6, r9
 8005d12:	eba5 0509 	sub.w	r5, r5, r9
 8005d16:	6026      	str	r6, [r4, #0]
 8005d18:	60a5      	str	r5, [r4, #8]
 8005d1a:	463e      	mov	r6, r7
 8005d1c:	42be      	cmp	r6, r7
 8005d1e:	d900      	bls.n	8005d22 <__ssputs_r+0x86>
 8005d20:	463e      	mov	r6, r7
 8005d22:	6820      	ldr	r0, [r4, #0]
 8005d24:	4632      	mov	r2, r6
 8005d26:	4641      	mov	r1, r8
 8005d28:	f000 fb0d 	bl	8006346 <memmove>
 8005d2c:	68a3      	ldr	r3, [r4, #8]
 8005d2e:	1b9b      	subs	r3, r3, r6
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	4433      	add	r3, r6
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	2000      	movs	r0, #0
 8005d3a:	e7db      	b.n	8005cf4 <__ssputs_r+0x58>
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	f000 fb29 	bl	8006394 <_realloc_r>
 8005d42:	4606      	mov	r6, r0
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d1e1      	bne.n	8005d0c <__ssputs_r+0x70>
 8005d48:	6921      	ldr	r1, [r4, #16]
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7ff ff00 	bl	8005b50 <_free_r>
 8005d50:	e7c7      	b.n	8005ce2 <__ssputs_r+0x46>
	...

08005d54 <_svfiprintf_r>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	4698      	mov	r8, r3
 8005d5a:	898b      	ldrh	r3, [r1, #12]
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	b09d      	sub	sp, #116	; 0x74
 8005d60:	4607      	mov	r7, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	d50e      	bpl.n	8005d86 <_svfiprintf_r+0x32>
 8005d68:	690b      	ldr	r3, [r1, #16]
 8005d6a:	b963      	cbnz	r3, 8005d86 <_svfiprintf_r+0x32>
 8005d6c:	2140      	movs	r1, #64	; 0x40
 8005d6e:	f7ff ff3b 	bl	8005be8 <_malloc_r>
 8005d72:	6028      	str	r0, [r5, #0]
 8005d74:	6128      	str	r0, [r5, #16]
 8005d76:	b920      	cbnz	r0, 8005d82 <_svfiprintf_r+0x2e>
 8005d78:	230c      	movs	r3, #12
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d80:	e0d1      	b.n	8005f26 <_svfiprintf_r+0x1d2>
 8005d82:	2340      	movs	r3, #64	; 0x40
 8005d84:	616b      	str	r3, [r5, #20]
 8005d86:	2300      	movs	r3, #0
 8005d88:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d94:	2330      	movs	r3, #48	; 0x30
 8005d96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f40 <_svfiprintf_r+0x1ec>
 8005d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d9e:	f04f 0901 	mov.w	r9, #1
 8005da2:	4623      	mov	r3, r4
 8005da4:	469a      	mov	sl, r3
 8005da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005daa:	b10a      	cbz	r2, 8005db0 <_svfiprintf_r+0x5c>
 8005dac:	2a25      	cmp	r2, #37	; 0x25
 8005dae:	d1f9      	bne.n	8005da4 <_svfiprintf_r+0x50>
 8005db0:	ebba 0b04 	subs.w	fp, sl, r4
 8005db4:	d00b      	beq.n	8005dce <_svfiprintf_r+0x7a>
 8005db6:	465b      	mov	r3, fp
 8005db8:	4622      	mov	r2, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	f7ff ff6d 	bl	8005c9c <__ssputs_r>
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	f000 80aa 	beq.w	8005f1c <_svfiprintf_r+0x1c8>
 8005dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dca:	445a      	add	r2, fp
 8005dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8005dce:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80a2 	beq.w	8005f1c <_svfiprintf_r+0x1c8>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005de2:	f10a 0a01 	add.w	sl, sl, #1
 8005de6:	9304      	str	r3, [sp, #16]
 8005de8:	9307      	str	r3, [sp, #28]
 8005dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dee:	931a      	str	r3, [sp, #104]	; 0x68
 8005df0:	4654      	mov	r4, sl
 8005df2:	2205      	movs	r2, #5
 8005df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df8:	4851      	ldr	r0, [pc, #324]	; (8005f40 <_svfiprintf_r+0x1ec>)
 8005dfa:	f7fa fb99 	bl	8000530 <memchr>
 8005dfe:	9a04      	ldr	r2, [sp, #16]
 8005e00:	b9d8      	cbnz	r0, 8005e3a <_svfiprintf_r+0xe6>
 8005e02:	06d0      	lsls	r0, r2, #27
 8005e04:	bf44      	itt	mi
 8005e06:	2320      	movmi	r3, #32
 8005e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e0c:	0711      	lsls	r1, r2, #28
 8005e0e:	bf44      	itt	mi
 8005e10:	232b      	movmi	r3, #43	; 0x2b
 8005e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e16:	f89a 3000 	ldrb.w	r3, [sl]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d015      	beq.n	8005e4a <_svfiprintf_r+0xf6>
 8005e1e:	9a07      	ldr	r2, [sp, #28]
 8005e20:	4654      	mov	r4, sl
 8005e22:	2000      	movs	r0, #0
 8005e24:	f04f 0c0a 	mov.w	ip, #10
 8005e28:	4621      	mov	r1, r4
 8005e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e2e:	3b30      	subs	r3, #48	; 0x30
 8005e30:	2b09      	cmp	r3, #9
 8005e32:	d94e      	bls.n	8005ed2 <_svfiprintf_r+0x17e>
 8005e34:	b1b0      	cbz	r0, 8005e64 <_svfiprintf_r+0x110>
 8005e36:	9207      	str	r2, [sp, #28]
 8005e38:	e014      	b.n	8005e64 <_svfiprintf_r+0x110>
 8005e3a:	eba0 0308 	sub.w	r3, r0, r8
 8005e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e42:	4313      	orrs	r3, r2
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	46a2      	mov	sl, r4
 8005e48:	e7d2      	b.n	8005df0 <_svfiprintf_r+0x9c>
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	9103      	str	r1, [sp, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bfbb      	ittet	lt
 8005e56:	425b      	neglt	r3, r3
 8005e58:	f042 0202 	orrlt.w	r2, r2, #2
 8005e5c:	9307      	strge	r3, [sp, #28]
 8005e5e:	9307      	strlt	r3, [sp, #28]
 8005e60:	bfb8      	it	lt
 8005e62:	9204      	strlt	r2, [sp, #16]
 8005e64:	7823      	ldrb	r3, [r4, #0]
 8005e66:	2b2e      	cmp	r3, #46	; 0x2e
 8005e68:	d10c      	bne.n	8005e84 <_svfiprintf_r+0x130>
 8005e6a:	7863      	ldrb	r3, [r4, #1]
 8005e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6e:	d135      	bne.n	8005edc <_svfiprintf_r+0x188>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9203      	str	r2, [sp, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfb8      	it	lt
 8005e7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e80:	3402      	adds	r4, #2
 8005e82:	9305      	str	r3, [sp, #20]
 8005e84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f50 <_svfiprintf_r+0x1fc>
 8005e88:	7821      	ldrb	r1, [r4, #0]
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	f7fa fb4f 	bl	8000530 <memchr>
 8005e92:	b140      	cbz	r0, 8005ea6 <_svfiprintf_r+0x152>
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	eba0 000a 	sub.w	r0, r0, sl
 8005e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e9e:	9b04      	ldr	r3, [sp, #16]
 8005ea0:	4303      	orrs	r3, r0
 8005ea2:	3401      	adds	r4, #1
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eaa:	4826      	ldr	r0, [pc, #152]	; (8005f44 <_svfiprintf_r+0x1f0>)
 8005eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eb0:	2206      	movs	r2, #6
 8005eb2:	f7fa fb3d 	bl	8000530 <memchr>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d038      	beq.n	8005f2c <_svfiprintf_r+0x1d8>
 8005eba:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <_svfiprintf_r+0x1f4>)
 8005ebc:	bb1b      	cbnz	r3, 8005f06 <_svfiprintf_r+0x1b2>
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	3307      	adds	r3, #7
 8005ec2:	f023 0307 	bic.w	r3, r3, #7
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	9303      	str	r3, [sp, #12]
 8005eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ecc:	4433      	add	r3, r6
 8005ece:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed0:	e767      	b.n	8005da2 <_svfiprintf_r+0x4e>
 8005ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	2001      	movs	r0, #1
 8005eda:	e7a5      	b.n	8005e28 <_svfiprintf_r+0xd4>
 8005edc:	2300      	movs	r3, #0
 8005ede:	3401      	adds	r4, #1
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f04f 0c0a 	mov.w	ip, #10
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eee:	3a30      	subs	r2, #48	; 0x30
 8005ef0:	2a09      	cmp	r2, #9
 8005ef2:	d903      	bls.n	8005efc <_svfiprintf_r+0x1a8>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0c5      	beq.n	8005e84 <_svfiprintf_r+0x130>
 8005ef8:	9105      	str	r1, [sp, #20]
 8005efa:	e7c3      	b.n	8005e84 <_svfiprintf_r+0x130>
 8005efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f00:	4604      	mov	r4, r0
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7f0      	b.n	8005ee8 <_svfiprintf_r+0x194>
 8005f06:	ab03      	add	r3, sp, #12
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <_svfiprintf_r+0x1f8>)
 8005f0e:	a904      	add	r1, sp, #16
 8005f10:	4638      	mov	r0, r7
 8005f12:	f7fd fa6b 	bl	80033ec <_printf_float>
 8005f16:	1c42      	adds	r2, r0, #1
 8005f18:	4606      	mov	r6, r0
 8005f1a:	d1d6      	bne.n	8005eca <_svfiprintf_r+0x176>
 8005f1c:	89ab      	ldrh	r3, [r5, #12]
 8005f1e:	065b      	lsls	r3, r3, #25
 8005f20:	f53f af2c 	bmi.w	8005d7c <_svfiprintf_r+0x28>
 8005f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f26:	b01d      	add	sp, #116	; 0x74
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	ab03      	add	r3, sp, #12
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	462a      	mov	r2, r5
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <_svfiprintf_r+0x1f8>)
 8005f34:	a904      	add	r1, sp, #16
 8005f36:	4638      	mov	r0, r7
 8005f38:	f7fd fcfc 	bl	8003934 <_printf_i>
 8005f3c:	e7eb      	b.n	8005f16 <_svfiprintf_r+0x1c2>
 8005f3e:	bf00      	nop
 8005f40:	08012b0c 	.word	0x08012b0c
 8005f44:	08012b16 	.word	0x08012b16
 8005f48:	080033ed 	.word	0x080033ed
 8005f4c:	08005c9d 	.word	0x08005c9d
 8005f50:	08012b12 	.word	0x08012b12

08005f54 <__sfputc_r>:
 8005f54:	6893      	ldr	r3, [r2, #8]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	b410      	push	{r4}
 8005f5c:	6093      	str	r3, [r2, #8]
 8005f5e:	da08      	bge.n	8005f72 <__sfputc_r+0x1e>
 8005f60:	6994      	ldr	r4, [r2, #24]
 8005f62:	42a3      	cmp	r3, r4
 8005f64:	db01      	blt.n	8005f6a <__sfputc_r+0x16>
 8005f66:	290a      	cmp	r1, #10
 8005f68:	d103      	bne.n	8005f72 <__sfputc_r+0x1e>
 8005f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6e:	f7fe b8a5 	b.w	80040bc <__swbuf_r>
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	1c58      	adds	r0, r3, #1
 8005f76:	6010      	str	r0, [r2, #0]
 8005f78:	7019      	strb	r1, [r3, #0]
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <__sfputs_r>:
 8005f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	18d5      	adds	r5, r2, r3
 8005f8c:	42ac      	cmp	r4, r5
 8005f8e:	d101      	bne.n	8005f94 <__sfputs_r+0x12>
 8005f90:	2000      	movs	r0, #0
 8005f92:	e007      	b.n	8005fa4 <__sfputs_r+0x22>
 8005f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f98:	463a      	mov	r2, r7
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7ff ffda 	bl	8005f54 <__sfputc_r>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d1f3      	bne.n	8005f8c <__sfputs_r+0xa>
 8005fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fa8 <_vfiprintf_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	460d      	mov	r5, r1
 8005fae:	b09d      	sub	sp, #116	; 0x74
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	4698      	mov	r8, r3
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	b118      	cbz	r0, 8005fc0 <_vfiprintf_r+0x18>
 8005fb8:	6983      	ldr	r3, [r0, #24]
 8005fba:	b90b      	cbnz	r3, 8005fc0 <_vfiprintf_r+0x18>
 8005fbc:	f7ff f8f0 	bl	80051a0 <__sinit>
 8005fc0:	4b89      	ldr	r3, [pc, #548]	; (80061e8 <_vfiprintf_r+0x240>)
 8005fc2:	429d      	cmp	r5, r3
 8005fc4:	d11b      	bne.n	8005ffe <_vfiprintf_r+0x56>
 8005fc6:	6875      	ldr	r5, [r6, #4]
 8005fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fca:	07d9      	lsls	r1, r3, #31
 8005fcc:	d405      	bmi.n	8005fda <_vfiprintf_r+0x32>
 8005fce:	89ab      	ldrh	r3, [r5, #12]
 8005fd0:	059a      	lsls	r2, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_vfiprintf_r+0x32>
 8005fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fd6:	f7ff f998 	bl	800530a <__retarget_lock_acquire_recursive>
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	071b      	lsls	r3, r3, #28
 8005fde:	d501      	bpl.n	8005fe4 <_vfiprintf_r+0x3c>
 8005fe0:	692b      	ldr	r3, [r5, #16]
 8005fe2:	b9eb      	cbnz	r3, 8006020 <_vfiprintf_r+0x78>
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7fe f8ba 	bl	8004160 <__swsetup_r>
 8005fec:	b1c0      	cbz	r0, 8006020 <_vfiprintf_r+0x78>
 8005fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ff0:	07dc      	lsls	r4, r3, #31
 8005ff2:	d50e      	bpl.n	8006012 <_vfiprintf_r+0x6a>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ff8:	b01d      	add	sp, #116	; 0x74
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	4b7b      	ldr	r3, [pc, #492]	; (80061ec <_vfiprintf_r+0x244>)
 8006000:	429d      	cmp	r5, r3
 8006002:	d101      	bne.n	8006008 <_vfiprintf_r+0x60>
 8006004:	68b5      	ldr	r5, [r6, #8]
 8006006:	e7df      	b.n	8005fc8 <_vfiprintf_r+0x20>
 8006008:	4b79      	ldr	r3, [pc, #484]	; (80061f0 <_vfiprintf_r+0x248>)
 800600a:	429d      	cmp	r5, r3
 800600c:	bf08      	it	eq
 800600e:	68f5      	ldreq	r5, [r6, #12]
 8006010:	e7da      	b.n	8005fc8 <_vfiprintf_r+0x20>
 8006012:	89ab      	ldrh	r3, [r5, #12]
 8006014:	0598      	lsls	r0, r3, #22
 8006016:	d4ed      	bmi.n	8005ff4 <_vfiprintf_r+0x4c>
 8006018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800601a:	f7ff f977 	bl	800530c <__retarget_lock_release_recursive>
 800601e:	e7e9      	b.n	8005ff4 <_vfiprintf_r+0x4c>
 8006020:	2300      	movs	r3, #0
 8006022:	9309      	str	r3, [sp, #36]	; 0x24
 8006024:	2320      	movs	r3, #32
 8006026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800602a:	f8cd 800c 	str.w	r8, [sp, #12]
 800602e:	2330      	movs	r3, #48	; 0x30
 8006030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80061f4 <_vfiprintf_r+0x24c>
 8006034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006038:	f04f 0901 	mov.w	r9, #1
 800603c:	4623      	mov	r3, r4
 800603e:	469a      	mov	sl, r3
 8006040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006044:	b10a      	cbz	r2, 800604a <_vfiprintf_r+0xa2>
 8006046:	2a25      	cmp	r2, #37	; 0x25
 8006048:	d1f9      	bne.n	800603e <_vfiprintf_r+0x96>
 800604a:	ebba 0b04 	subs.w	fp, sl, r4
 800604e:	d00b      	beq.n	8006068 <_vfiprintf_r+0xc0>
 8006050:	465b      	mov	r3, fp
 8006052:	4622      	mov	r2, r4
 8006054:	4629      	mov	r1, r5
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff ff93 	bl	8005f82 <__sfputs_r>
 800605c:	3001      	adds	r0, #1
 800605e:	f000 80aa 	beq.w	80061b6 <_vfiprintf_r+0x20e>
 8006062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006064:	445a      	add	r2, fp
 8006066:	9209      	str	r2, [sp, #36]	; 0x24
 8006068:	f89a 3000 	ldrb.w	r3, [sl]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a2 	beq.w	80061b6 <_vfiprintf_r+0x20e>
 8006072:	2300      	movs	r3, #0
 8006074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800607c:	f10a 0a01 	add.w	sl, sl, #1
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	9307      	str	r3, [sp, #28]
 8006084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006088:	931a      	str	r3, [sp, #104]	; 0x68
 800608a:	4654      	mov	r4, sl
 800608c:	2205      	movs	r2, #5
 800608e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006092:	4858      	ldr	r0, [pc, #352]	; (80061f4 <_vfiprintf_r+0x24c>)
 8006094:	f7fa fa4c 	bl	8000530 <memchr>
 8006098:	9a04      	ldr	r2, [sp, #16]
 800609a:	b9d8      	cbnz	r0, 80060d4 <_vfiprintf_r+0x12c>
 800609c:	06d1      	lsls	r1, r2, #27
 800609e:	bf44      	itt	mi
 80060a0:	2320      	movmi	r3, #32
 80060a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a6:	0713      	lsls	r3, r2, #28
 80060a8:	bf44      	itt	mi
 80060aa:	232b      	movmi	r3, #43	; 0x2b
 80060ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b0:	f89a 3000 	ldrb.w	r3, [sl]
 80060b4:	2b2a      	cmp	r3, #42	; 0x2a
 80060b6:	d015      	beq.n	80060e4 <_vfiprintf_r+0x13c>
 80060b8:	9a07      	ldr	r2, [sp, #28]
 80060ba:	4654      	mov	r4, sl
 80060bc:	2000      	movs	r0, #0
 80060be:	f04f 0c0a 	mov.w	ip, #10
 80060c2:	4621      	mov	r1, r4
 80060c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060c8:	3b30      	subs	r3, #48	; 0x30
 80060ca:	2b09      	cmp	r3, #9
 80060cc:	d94e      	bls.n	800616c <_vfiprintf_r+0x1c4>
 80060ce:	b1b0      	cbz	r0, 80060fe <_vfiprintf_r+0x156>
 80060d0:	9207      	str	r2, [sp, #28]
 80060d2:	e014      	b.n	80060fe <_vfiprintf_r+0x156>
 80060d4:	eba0 0308 	sub.w	r3, r0, r8
 80060d8:	fa09 f303 	lsl.w	r3, r9, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	46a2      	mov	sl, r4
 80060e2:	e7d2      	b.n	800608a <_vfiprintf_r+0xe2>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	1d19      	adds	r1, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	9103      	str	r1, [sp, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bfbb      	ittet	lt
 80060f0:	425b      	neglt	r3, r3
 80060f2:	f042 0202 	orrlt.w	r2, r2, #2
 80060f6:	9307      	strge	r3, [sp, #28]
 80060f8:	9307      	strlt	r3, [sp, #28]
 80060fa:	bfb8      	it	lt
 80060fc:	9204      	strlt	r2, [sp, #16]
 80060fe:	7823      	ldrb	r3, [r4, #0]
 8006100:	2b2e      	cmp	r3, #46	; 0x2e
 8006102:	d10c      	bne.n	800611e <_vfiprintf_r+0x176>
 8006104:	7863      	ldrb	r3, [r4, #1]
 8006106:	2b2a      	cmp	r3, #42	; 0x2a
 8006108:	d135      	bne.n	8006176 <_vfiprintf_r+0x1ce>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9203      	str	r2, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfb8      	it	lt
 8006116:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800611a:	3402      	adds	r4, #2
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006204 <_vfiprintf_r+0x25c>
 8006122:	7821      	ldrb	r1, [r4, #0]
 8006124:	2203      	movs	r2, #3
 8006126:	4650      	mov	r0, sl
 8006128:	f7fa fa02 	bl	8000530 <memchr>
 800612c:	b140      	cbz	r0, 8006140 <_vfiprintf_r+0x198>
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	eba0 000a 	sub.w	r0, r0, sl
 8006134:	fa03 f000 	lsl.w	r0, r3, r0
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	4303      	orrs	r3, r0
 800613c:	3401      	adds	r4, #1
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006144:	482c      	ldr	r0, [pc, #176]	; (80061f8 <_vfiprintf_r+0x250>)
 8006146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800614a:	2206      	movs	r2, #6
 800614c:	f7fa f9f0 	bl	8000530 <memchr>
 8006150:	2800      	cmp	r0, #0
 8006152:	d03f      	beq.n	80061d4 <_vfiprintf_r+0x22c>
 8006154:	4b29      	ldr	r3, [pc, #164]	; (80061fc <_vfiprintf_r+0x254>)
 8006156:	bb1b      	cbnz	r3, 80061a0 <_vfiprintf_r+0x1f8>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	3307      	adds	r3, #7
 800615c:	f023 0307 	bic.w	r3, r3, #7
 8006160:	3308      	adds	r3, #8
 8006162:	9303      	str	r3, [sp, #12]
 8006164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006166:	443b      	add	r3, r7
 8006168:	9309      	str	r3, [sp, #36]	; 0x24
 800616a:	e767      	b.n	800603c <_vfiprintf_r+0x94>
 800616c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006170:	460c      	mov	r4, r1
 8006172:	2001      	movs	r0, #1
 8006174:	e7a5      	b.n	80060c2 <_vfiprintf_r+0x11a>
 8006176:	2300      	movs	r3, #0
 8006178:	3401      	adds	r4, #1
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	4619      	mov	r1, r3
 800617e:	f04f 0c0a 	mov.w	ip, #10
 8006182:	4620      	mov	r0, r4
 8006184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006188:	3a30      	subs	r2, #48	; 0x30
 800618a:	2a09      	cmp	r2, #9
 800618c:	d903      	bls.n	8006196 <_vfiprintf_r+0x1ee>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0c5      	beq.n	800611e <_vfiprintf_r+0x176>
 8006192:	9105      	str	r1, [sp, #20]
 8006194:	e7c3      	b.n	800611e <_vfiprintf_r+0x176>
 8006196:	fb0c 2101 	mla	r1, ip, r1, r2
 800619a:	4604      	mov	r4, r0
 800619c:	2301      	movs	r3, #1
 800619e:	e7f0      	b.n	8006182 <_vfiprintf_r+0x1da>
 80061a0:	ab03      	add	r3, sp, #12
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	462a      	mov	r2, r5
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <_vfiprintf_r+0x258>)
 80061a8:	a904      	add	r1, sp, #16
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7fd f91e 	bl	80033ec <_printf_float>
 80061b0:	4607      	mov	r7, r0
 80061b2:	1c78      	adds	r0, r7, #1
 80061b4:	d1d6      	bne.n	8006164 <_vfiprintf_r+0x1bc>
 80061b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061b8:	07d9      	lsls	r1, r3, #31
 80061ba:	d405      	bmi.n	80061c8 <_vfiprintf_r+0x220>
 80061bc:	89ab      	ldrh	r3, [r5, #12]
 80061be:	059a      	lsls	r2, r3, #22
 80061c0:	d402      	bmi.n	80061c8 <_vfiprintf_r+0x220>
 80061c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061c4:	f7ff f8a2 	bl	800530c <__retarget_lock_release_recursive>
 80061c8:	89ab      	ldrh	r3, [r5, #12]
 80061ca:	065b      	lsls	r3, r3, #25
 80061cc:	f53f af12 	bmi.w	8005ff4 <_vfiprintf_r+0x4c>
 80061d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061d2:	e711      	b.n	8005ff8 <_vfiprintf_r+0x50>
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	462a      	mov	r2, r5
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <_vfiprintf_r+0x258>)
 80061dc:	a904      	add	r1, sp, #16
 80061de:	4630      	mov	r0, r6
 80061e0:	f7fd fba8 	bl	8003934 <_printf_i>
 80061e4:	e7e4      	b.n	80061b0 <_vfiprintf_r+0x208>
 80061e6:	bf00      	nop
 80061e8:	08012948 	.word	0x08012948
 80061ec:	08012968 	.word	0x08012968
 80061f0:	08012928 	.word	0x08012928
 80061f4:	08012b0c 	.word	0x08012b0c
 80061f8:	08012b16 	.word	0x08012b16
 80061fc:	080033ed 	.word	0x080033ed
 8006200:	08005f83 	.word	0x08005f83
 8006204:	08012b12 	.word	0x08012b12

08006208 <_putc_r>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	460d      	mov	r5, r1
 800620c:	4614      	mov	r4, r2
 800620e:	4606      	mov	r6, r0
 8006210:	b118      	cbz	r0, 800621a <_putc_r+0x12>
 8006212:	6983      	ldr	r3, [r0, #24]
 8006214:	b90b      	cbnz	r3, 800621a <_putc_r+0x12>
 8006216:	f7fe ffc3 	bl	80051a0 <__sinit>
 800621a:	4b1c      	ldr	r3, [pc, #112]	; (800628c <_putc_r+0x84>)
 800621c:	429c      	cmp	r4, r3
 800621e:	d124      	bne.n	800626a <_putc_r+0x62>
 8006220:	6874      	ldr	r4, [r6, #4]
 8006222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006224:	07d8      	lsls	r0, r3, #31
 8006226:	d405      	bmi.n	8006234 <_putc_r+0x2c>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	0599      	lsls	r1, r3, #22
 800622c:	d402      	bmi.n	8006234 <_putc_r+0x2c>
 800622e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006230:	f7ff f86b 	bl	800530a <__retarget_lock_acquire_recursive>
 8006234:	68a3      	ldr	r3, [r4, #8]
 8006236:	3b01      	subs	r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	60a3      	str	r3, [r4, #8]
 800623c:	da05      	bge.n	800624a <_putc_r+0x42>
 800623e:	69a2      	ldr	r2, [r4, #24]
 8006240:	4293      	cmp	r3, r2
 8006242:	db1c      	blt.n	800627e <_putc_r+0x76>
 8006244:	b2eb      	uxtb	r3, r5
 8006246:	2b0a      	cmp	r3, #10
 8006248:	d019      	beq.n	800627e <_putc_r+0x76>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	701d      	strb	r5, [r3, #0]
 8006252:	b2ed      	uxtb	r5, r5
 8006254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006256:	07da      	lsls	r2, r3, #31
 8006258:	d405      	bmi.n	8006266 <_putc_r+0x5e>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	059b      	lsls	r3, r3, #22
 800625e:	d402      	bmi.n	8006266 <_putc_r+0x5e>
 8006260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006262:	f7ff f853 	bl	800530c <__retarget_lock_release_recursive>
 8006266:	4628      	mov	r0, r5
 8006268:	bd70      	pop	{r4, r5, r6, pc}
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <_putc_r+0x88>)
 800626c:	429c      	cmp	r4, r3
 800626e:	d101      	bne.n	8006274 <_putc_r+0x6c>
 8006270:	68b4      	ldr	r4, [r6, #8]
 8006272:	e7d6      	b.n	8006222 <_putc_r+0x1a>
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <_putc_r+0x8c>)
 8006276:	429c      	cmp	r4, r3
 8006278:	bf08      	it	eq
 800627a:	68f4      	ldreq	r4, [r6, #12]
 800627c:	e7d1      	b.n	8006222 <_putc_r+0x1a>
 800627e:	4629      	mov	r1, r5
 8006280:	4622      	mov	r2, r4
 8006282:	4630      	mov	r0, r6
 8006284:	f7fd ff1a 	bl	80040bc <__swbuf_r>
 8006288:	4605      	mov	r5, r0
 800628a:	e7e3      	b.n	8006254 <_putc_r+0x4c>
 800628c:	08012948 	.word	0x08012948
 8006290:	08012968 	.word	0x08012968
 8006294:	08012928 	.word	0x08012928

08006298 <__sread>:
 8006298:	b510      	push	{r4, lr}
 800629a:	460c      	mov	r4, r1
 800629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a0:	f7fb f8a5 	bl	80013ee <_read_r>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	bfab      	itete	ge
 80062a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062aa:	89a3      	ldrhlt	r3, [r4, #12]
 80062ac:	181b      	addge	r3, r3, r0
 80062ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062b2:	bfac      	ite	ge
 80062b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80062b6:	81a3      	strhlt	r3, [r4, #12]
 80062b8:	bd10      	pop	{r4, pc}

080062ba <__swrite>:
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	461f      	mov	r7, r3
 80062c0:	898b      	ldrh	r3, [r1, #12]
 80062c2:	05db      	lsls	r3, r3, #23
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	4616      	mov	r6, r2
 80062ca:	d505      	bpl.n	80062d8 <__swrite+0x1e>
 80062cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d0:	2302      	movs	r3, #2
 80062d2:	2200      	movs	r2, #0
 80062d4:	f7fb f889 	bl	80013ea <_lseek_r>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	4632      	mov	r2, r6
 80062e6:	463b      	mov	r3, r7
 80062e8:	4628      	mov	r0, r5
 80062ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	f7fb b883 	b.w	80013f8 <_write_r>

080062f2 <__sseek>:
 80062f2:	b510      	push	{r4, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fa:	f7fb f876 	bl	80013ea <_lseek_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	bf15      	itete	ne
 8006304:	6560      	strne	r0, [r4, #84]	; 0x54
 8006306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800630a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800630e:	81a3      	strheq	r3, [r4, #12]
 8006310:	bf18      	it	ne
 8006312:	81a3      	strhne	r3, [r4, #12]
 8006314:	bd10      	pop	{r4, pc}

08006316 <__sclose>:
 8006316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631a:	f7fb b85d 	b.w	80013d8 <_close_r>

0800631e <__ascii_wctomb>:
 800631e:	b149      	cbz	r1, 8006334 <__ascii_wctomb+0x16>
 8006320:	2aff      	cmp	r2, #255	; 0xff
 8006322:	bf85      	ittet	hi
 8006324:	238a      	movhi	r3, #138	; 0x8a
 8006326:	6003      	strhi	r3, [r0, #0]
 8006328:	700a      	strbls	r2, [r1, #0]
 800632a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800632e:	bf98      	it	ls
 8006330:	2001      	movls	r0, #1
 8006332:	4770      	bx	lr
 8006334:	4608      	mov	r0, r1
 8006336:	4770      	bx	lr

08006338 <abort>:
 8006338:	b508      	push	{r3, lr}
 800633a:	2006      	movs	r0, #6
 800633c:	f000 f878 	bl	8006430 <raise>
 8006340:	2001      	movs	r0, #1
 8006342:	f7fb f87c 	bl	800143e <_exit>

08006346 <memmove>:
 8006346:	4288      	cmp	r0, r1
 8006348:	b510      	push	{r4, lr}
 800634a:	eb01 0402 	add.w	r4, r1, r2
 800634e:	d902      	bls.n	8006356 <memmove+0x10>
 8006350:	4284      	cmp	r4, r0
 8006352:	4623      	mov	r3, r4
 8006354:	d807      	bhi.n	8006366 <memmove+0x20>
 8006356:	1e43      	subs	r3, r0, #1
 8006358:	42a1      	cmp	r1, r4
 800635a:	d008      	beq.n	800636e <memmove+0x28>
 800635c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006360:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006364:	e7f8      	b.n	8006358 <memmove+0x12>
 8006366:	4402      	add	r2, r0
 8006368:	4601      	mov	r1, r0
 800636a:	428a      	cmp	r2, r1
 800636c:	d100      	bne.n	8006370 <memmove+0x2a>
 800636e:	bd10      	pop	{r4, pc}
 8006370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006374:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006378:	e7f7      	b.n	800636a <memmove+0x24>
	...

0800637c <__malloc_lock>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__malloc_lock+0x8>)
 800637e:	f7fe bfc4 	b.w	800530a <__retarget_lock_acquire_recursive>
 8006382:	bf00      	nop
 8006384:	20000d48 	.word	0x20000d48

08006388 <__malloc_unlock>:
 8006388:	4801      	ldr	r0, [pc, #4]	; (8006390 <__malloc_unlock+0x8>)
 800638a:	f7fe bfbf 	b.w	800530c <__retarget_lock_release_recursive>
 800638e:	bf00      	nop
 8006390:	20000d48 	.word	0x20000d48

08006394 <_realloc_r>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	4607      	mov	r7, r0
 8006398:	4614      	mov	r4, r2
 800639a:	460e      	mov	r6, r1
 800639c:	b921      	cbnz	r1, 80063a8 <_realloc_r+0x14>
 800639e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063a2:	4611      	mov	r1, r2
 80063a4:	f7ff bc20 	b.w	8005be8 <_malloc_r>
 80063a8:	b922      	cbnz	r2, 80063b4 <_realloc_r+0x20>
 80063aa:	f7ff fbd1 	bl	8005b50 <_free_r>
 80063ae:	4625      	mov	r5, r4
 80063b0:	4628      	mov	r0, r5
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b4:	f000 f858 	bl	8006468 <_malloc_usable_size_r>
 80063b8:	42a0      	cmp	r0, r4
 80063ba:	d20f      	bcs.n	80063dc <_realloc_r+0x48>
 80063bc:	4621      	mov	r1, r4
 80063be:	4638      	mov	r0, r7
 80063c0:	f7ff fc12 	bl	8005be8 <_malloc_r>
 80063c4:	4605      	mov	r5, r0
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d0f2      	beq.n	80063b0 <_realloc_r+0x1c>
 80063ca:	4631      	mov	r1, r6
 80063cc:	4622      	mov	r2, r4
 80063ce:	f7ff f81d 	bl	800540c <memcpy>
 80063d2:	4631      	mov	r1, r6
 80063d4:	4638      	mov	r0, r7
 80063d6:	f7ff fbbb 	bl	8005b50 <_free_r>
 80063da:	e7e9      	b.n	80063b0 <_realloc_r+0x1c>
 80063dc:	4635      	mov	r5, r6
 80063de:	e7e7      	b.n	80063b0 <_realloc_r+0x1c>

080063e0 <_raise_r>:
 80063e0:	291f      	cmp	r1, #31
 80063e2:	b538      	push	{r3, r4, r5, lr}
 80063e4:	4604      	mov	r4, r0
 80063e6:	460d      	mov	r5, r1
 80063e8:	d904      	bls.n	80063f4 <_raise_r+0x14>
 80063ea:	2316      	movs	r3, #22
 80063ec:	6003      	str	r3, [r0, #0]
 80063ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80063f6:	b112      	cbz	r2, 80063fe <_raise_r+0x1e>
 80063f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063fc:	b94b      	cbnz	r3, 8006412 <_raise_r+0x32>
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 f830 	bl	8006464 <_getpid_r>
 8006404:	462a      	mov	r2, r5
 8006406:	4601      	mov	r1, r0
 8006408:	4620      	mov	r0, r4
 800640a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800640e:	f000 b817 	b.w	8006440 <_kill_r>
 8006412:	2b01      	cmp	r3, #1
 8006414:	d00a      	beq.n	800642c <_raise_r+0x4c>
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	d103      	bne.n	8006422 <_raise_r+0x42>
 800641a:	2316      	movs	r3, #22
 800641c:	6003      	str	r3, [r0, #0]
 800641e:	2001      	movs	r0, #1
 8006420:	e7e7      	b.n	80063f2 <_raise_r+0x12>
 8006422:	2400      	movs	r4, #0
 8006424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006428:	4628      	mov	r0, r5
 800642a:	4798      	blx	r3
 800642c:	2000      	movs	r0, #0
 800642e:	e7e0      	b.n	80063f2 <_raise_r+0x12>

08006430 <raise>:
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <raise+0xc>)
 8006432:	4601      	mov	r1, r0
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f7ff bfd3 	b.w	80063e0 <_raise_r>
 800643a:	bf00      	nop
 800643c:	200001b4 	.word	0x200001b4

08006440 <_kill_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_kill_r+0x20>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	f7fa fff3 	bl	8001438 <_kill>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d102      	bne.n	800645c <_kill_r+0x1c>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	b103      	cbz	r3, 800645c <_kill_r+0x1c>
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	20000d54 	.word	0x20000d54

08006464 <_getpid_r>:
 8006464:	f7fa bfec 	b.w	8001440 <_getpid>

08006468 <_malloc_usable_size_r>:
 8006468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800646c:	1f18      	subs	r0, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	bfbc      	itt	lt
 8006472:	580b      	ldrlt	r3, [r1, r0]
 8006474:	18c0      	addlt	r0, r0, r3
 8006476:	4770      	bx	lr

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
