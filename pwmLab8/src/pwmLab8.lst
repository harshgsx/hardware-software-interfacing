
pwmLab8.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08006530 l    d  .rodata	00000000 .rodata
08012a6c l    d  .ARM	00000000 .ARM
08012a74 l    d  .init_array	00000000 .init_array
08012a78 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000384 l    d  .bss	00000000 .bss
20000d54 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
080010ec l       .text	00000000 LoopCopyDataInit
080010e6 l       .text	00000000 CopyDataInit
080010fe l       .text	00000000 LoopFillZerobss
080010fa l       .text	00000000 FillZerobss
08001128 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08006518 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
20000384 l       .bss	00000001 completed.1
08012a78 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
20000388 l       .bss	00000018 object.0
08012a74 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 my_main.c
00000000 l    df *ABS*	00000000 mytest.c
200003a0 l     O .bss	00000004 LedState.0
00000000 l    df *ABS*	00000000 pwm_example.c
00000000 l    df *ABS*	00000000 syscall.c
200003ec l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
200003f0 l     O .bss	00000004 cmdArgs
200003f4 l     O .bss	00000004 count.3
200003f8 l     O .bss	00000004 crReceived
2000049c l     O .bss	00000004 saved.1
20000198 l     O .data	00000004 buf.2
2000019c l     O .data	00000004 printPrompt.4
080118ef l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
200004a0 l     O .bss	00000004 address.1
200001a0 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 terminal.c
200004a4 l     O .bss	00000834 TerminalState
08011d80 l     O .rodata	00000010 TerminalInfo
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 tasking.c
20000cd8 l     O .bss	00000004 AccumTicks
00000000 l    df *ABS*	00000000 default.c
08011f64 l     O .rodata	00000013 __FUNCTION__.0
00000000 l    df *ABS*	00000000 decoder.c
08001c7c l     F .text	0000007c Uncompress
20000cdc l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_msp.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_uart.c
08002b74 l     F .text	000000bc UART_SetConfig
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim.c
08002e84 l     F .text	00000050 TIM_OC1_SetConfig
08002ed4 l     F .text	00000054 TIM_OC3_SetConfig
08002f28 l     F .text	00000044 TIM_OC4_SetConfig
00000000 l    df *ABS*	00000000 version.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003fec l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
08004314 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005190 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012980 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005ff4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 STM32F411.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
200001b4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012a78 l       .init_array	00000000 __init_array_end
08012a74 l       .init_array	00000000 __preinit_array_end
08012a74 l       .init_array	00000000 __init_array_start
08012a74 l       .init_array	00000000 __preinit_array_start
08001128  w    F .text	00000006 RTC_Alarm_IRQHandler
08006508 g     F .text	00000010 _malloc_usable_size_r
0800ec88 g     O .rodata	00000008 RTC_BKP19R_fields
080106d0 g     O .rodata	00000050 TIM2_SR_fields
08003348 g     F .text	000000c4 __cvt
08001128  w    F .text	00000006 EXTI2_IRQHandler
08003c4c g     F .text	0000002c putchar
0800d2b8 g     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800fa00 g     O .rodata	00000008 STK_VAL_fields
080124a1 g     O .rodata	00000008 APBPrescTable
08000e7c g     F .text	0000002c .hidden __aeabi_dcmpun
0800116e g     F .text	00000004 _isatty_r
2000044c g     O .bss	00000050 input_b
08000e40 g     F .text	00000012 .hidden __aeabi_dcmple
08010f00 g     O .rodata	00000018 TIM5_CR2_fields
08010690 g     O .rodata	00000008 TIM2_PSC_fields
08003f24 g     F .text	00000010 strcpy
080011c8 g     F .text	00000004 _getpid
0800cd68 g     O .rodata	00000260 OTG_FS_DEVICE_registers
08003c78 g     F .text	000000dc _puts_r
080030b8 g     F .text	000000b8 HAL_TIM_PWM_ConfigChannel
0800cc10 g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
08000d7c g     F .text	0000007a .hidden __cmpdf2
08001d4c g     F .text	00000054 DecodeWriteRegister
0800d710 g     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
08001172 g     F .text	00000004 _lseek_r
08002398 g     F .text	00000002 DebugMon_Handler
08001b3c g     F .text	00000044 CmdTasks
08010b30 g     O .rodata	00000008 TIM3_PSC_fields
0800dfb8 g     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
08009328 g     O .rodata	00000008 ADC1_JOFR3_fields
08010698 g     O .rodata	00000038 TIM2_SMCR_fields
0800c930 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800dc40 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800c370 g     O .rodata	00000020 NVIC_IPR1_fields
080129b8 g     O .rodata	0000000c CmdTestE
0800f9c0 g     O .rodata	00000018 STK_CALIB_fields
0800f250 g     O .rodata	00000008 SCB_AFSR_fields
08001128  w    F .text	00000006 SPI4_IRQHandler
08000d7c g     F .text	0000007a .hidden __eqdf2
08001624 g     F .text	00000068 CmdStats
08010720 g     O .rodata	00000150 TIM2_registers
0800abd0 g     O .rodata	00000100 GPIOA_BSRR_fields
0800f468 g     O .rodata	00000018 SCB_SHPR1_fields
0800bcd0 g     O .rodata	00000030 I2C3_CR2_fields
08009378 g     O .rodata	00000028 ADC1_SQR1_fields
080008ec g     F .text	0000005a .hidden __floatdidf
0800fbb8 g     O .rodata	00000008 TIM10_CNT_fields
08001908 g     F .text	00000028 TerminalWritePolled
080064e0 g     F .text	00000024 _kill_r
0800ffa8 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800ee78 g     O .rodata	00000010 RTC_SHIFTR_fields
0800d7f8 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
08003c1c g     F .text	00000030 printf
08010688 g     O .rodata	00000008 TIM2_OR_fields
0800bba8 g     O .rodata	000000a0 GPIOH_registers
0800c2b0 g     O .rodata	00000020 NVIC_IPR14_fields
0800dbe0 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
080029a0 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
08002acc g     F .text	00000064 HAL_NVIC_SetPriority
08001128  w    F .text	00000006 TIM1_CC_IRQHandler
0800f688 g     O .rodata	00000068 SDIO_ICR_fields
08009430 g     O .rodata	00000140 ADC1_registers
080029c0 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800fd88 g     O .rodata	00000008 TIM11_OR_fields
080105c8 g     O .rodata	00000018 TIM2_CR2_fields
08000f5e g     F .text	00000012 my_main
08006392 g     F .text	00000024 __sseek
0800b6a0 g     O .rodata	00000040 GPIOH_AFRH_fields
08005240 g     F .text	00000070 __sinit
08001128  w    F .text	00000006 DMA2_Stream5_IRQHandler
08004158 g     F .text	000000a4 __swbuf_r
0800238e g     F .text	00000002 HardFault_Handler
08010a20 g     O .rodata	00000010 TIM3_CNT_fields
08009780 g     O .rodata	000000a0 DMA2_HIFCR_fields
08009c88 g     O .rodata	00000008 DMA2_S2NDTR_fields
08009650 g     O .rodata	00000008 CRC_CR_fields
0800fb60 g     O .rodata	00000018 TIM10_CCER_fields
080051e4 g     F .text	0000002c __sfmoreglue
08001128  w    F .text	00000006 DMA1_Stream5_IRQHandler
0800c490 g     O .rodata	00000008 NVIC_ISER0_fields
08006428 g     F .text	0000000c __malloc_unlock
0800fc08 g     O .rodata	00000008 TIM10_PSC_fields
0800a0e8 g     O .rodata	00000008 DMA2_S7NDTR_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08010038 g     O .rodata	00000008 TIM1_CCR3_fields
08010178 g     O .rodata	00000008 TIM1_DMAR_fields
0800fd38 g     O .rodata	00000008 TIM11_CNT_fields
08010578 g     O .rodata	00000010 TIM2_CNT_fields
0800239c g     F .text	00000012 SysTick_Handler
0800ef98 g     O .rodata	00000008 RTC_WPR_fields
0800ee88 g     O .rodata	00000008 RTC_SSR_fields
080129dc g     O .rodata	0000000c CmdLedE
08002e1c g     F .text	0000000a HAL_GPIO_WritePin
08009e18 g     O .rodata	00000020 DMA2_S4FCR_fields
08001128  w    F .text	00000006 PVD_IRQHandler
080019c0 g     F .text	000000e0 TerminalISR
08001128  w    F .text	00000006 SDIO_IRQHandler
08010100 g     O .rodata	00000078 TIM1_DIER_fields
0800c1f8 g     O .rodata	00000008 NVIC_ICPR0_fields
080063e6 g     F .text	00000034 memmove
08001128  w    F .text	00000006 TAMP_STAMP_IRQHandler
0800c390 g     O .rodata	00000020 NVIC_IPR2_fields
08012a7c g       *ABS*	00000000 _sidata
0800239a g     F .text	00000002 PendSV_Handler
0800c200 g     O .rodata	00000008 NVIC_ICPR1_fields
0800f9f8 g     O .rodata	00000008 STK_LOAD_fields
0800238c g     F .text	00000002 NMI_Handler
08002b30 g     F .text	0000001c HAL_NVIC_EnableIRQ
0800d350 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
080054c8 g     F .text	00000080 _Balloc
0800d2c0 g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
08012a74 g       .ARM	00000000 __exidx_end
0800cca8 g     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
08003f9c g     F .text	00000050 __strtok_r
0800d768 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
08009ba0 g     O .rodata	00000008 DMA2_S1M1AR_fields
08001128  w    F .text	00000006 EXTI3_IRQHandler
0800f7b8 g     O .rodata	00000008 SDIO_RESP1_fields
0800280c  w    F .text	0000005c HAL_RCC_GetSysClockFreq
08009e58 g     O .rodata	000000a0 DMA2_S5CR_fields
08010e20 g     O .rodata	00000050 TIM5_CCMR2_Output_fields
08000d6c g     F .text	0000008a .hidden __gtdf2
08009d58 g     O .rodata	00000008 DMA2_S3M0AR_fields
08012a6c g       .rodata	00000000 _parsetable_end
080032e4 g     F .text	0000000c __errno
0800ecb8 g     O .rodata	00000008 RTC_BKP6R_fields
0800e9c8 g     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800f390 g     O .rodata	00000048 SCB_ICSR_fields
08002e26 g     F .text	00000050 HAL_IWDG_Init
08012a54 g     O .rodata	0000000c CmdWE
0800c4a0 g     O .rodata	00000008 NVIC_ISER2_fields
0800f7e0 g     O .rodata	000000c0 SDIO_STA_fields
080023b0 g     F .text	0000003c HAL_MspInit
0800c0f8 g     O .rodata	00000048 MPU_MPU_RASR_fields
08001128  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
0800c8a8 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
08001164 g     F .text	0000000a _fstat_r
08009e50 g     O .rodata	00000008 DMA2_S4PAR_fields
08011268 g     O .rodata	00000030 TIM9_CR1_fields
20000d50 g     O .bss	00000004 errno
0800b0f8 g     O .rodata	00000040 GPIOB_AFRH_fields
0800cb38 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
08006530 g       .text	00000000 _etext
0800cc58 g     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
20000384 g       .bss	00000000 _sbss
0800f4a0 g     O .rodata	000000f0 SCB_registers
0800c140 g     O .rodata	00000018 MPU_MPU_RBAR_fields
080105f0 g     O .rodata	00000060 TIM2_DIER_fields
08000e08 g     F .text	00000010 .hidden __aeabi_cdcmple
08010df0 g     O .rodata	00000030 TIM5_CCMR2_Input_fields
0800b178 g     O .rodata	00000100 GPIOB_BSRR_fields
0800f590 g     O .rodata	00000008 SDIO_ARG_fields
08001128  w    F .text	00000006 I2C3_ER_IRQHandler
0800ecd8 g     O .rodata	00000010 RTC_CALIBR_fields
0800a0d8 g     O .rodata	00000008 DMA2_S7M0AR_fields
0800d670 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800c708 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
08009f28 g     O .rodata	00000008 DMA2_S5NDTR_fields
0800dd18 g     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800a918 g     O .rodata	00000048 FLASH_CR_fields
080109e0 g     O .rodata	00000010 TIM3_CCR1_fields
08010d10 g     O .rodata	00000060 TIM5_CCER_fields
0800ec58 g     O .rodata	00000008 RTC_BKP13R_fields
0800e4f0 g     O .rodata	00000008 RCC_AHB2ENR_fields
0800dd40 g     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
080093a0 g     O .rodata	00000030 ADC1_SQR2_fields
08011648 g     O .rodata	00000008 WWDG_SR_fields
0800a888 g     O .rodata	00000060 EXTI_registers
08002c8c g     F .text	00000190 HAL_GPIO_Init
0800cff0 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800d5d0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
08002e76 g     F .text	0000000c HAL_IWDG_Refresh
0800a9b0 g     O .rodata	00000038 FLASH_SR_fields
0800c9b0 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800db90 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
08009a98 g     O .rodata	00000020 DMA2_S0FCR_fields
0800a008 g     O .rodata	00000008 DMA2_S6NDTR_fields
08001520 g     F .text	000000b0 DumpBuffer
08011540 g     O .rodata	00000008 USART1_DR_fields
0800acd0 g     O .rodata	00000080 GPIOA_IDR_fields
20000cf0 g     O .bss	0000000c hiwdg
08011250 g     O .rodata	00000008 TIM9_CCR1_fields
080054ac g     F .text	0000001c memcpy
080095a0 g     O .rodata	00000090 ADC_Common_CSR_fields
08000df8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08010048 g     O .rodata	00000008 TIM1_CNT_fields
08010a30 g     O .rodata	00000040 TIM3_CR1_fields
08003d64 g     F .text	0000018c setvbuf
08010208 g     O .rodata	00000060 TIM1_SR_fields
0800f680 g     O .rodata	00000008 SDIO_FIFO_fields
0800c290 g     O .rodata	00000020 NVIC_IPR13_fields
080051d8 g     F .text	0000000c _cleanup_r
0800ab50 g     O .rodata	00000040 GPIOA_AFRH_fields
08005df4 g     F .text	00000200 _svfprintf_r
08000874 g     F .text	00000022 .hidden __floatsidf
0800d530 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
08000d74 g     F .text	00000082 .hidden __ltdf2
08001128  w    F .text	00000006 EXTI0_IRQHandler
08001128  w    F .text	00000006 I2C2_EV_IRQHandler
0800aa48 g     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800fc10 g     O .rodata	00000018 TIM10_SR_fields
0800c8d8 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
08000214 g     F .text	00000000 .hidden __aeabi_uldivmod
08009a00 g     O .rodata	00000098 DMA2_S0CR_fields
08011650 g     O .rodata	00000030 WWDG_registers
08003d54 g     F .text	00000010 puts
080098c0 g     O .rodata	000000a0 DMA2_LIFCR_fields
08001128  w    F .text	00000006 DMA1_Stream2_IRQHandler
08001128  w    F .text	00000006 FPU_IRQHandler
08002a80  w    F .text	00000028 HAL_Delay
0800dc58 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
200001a4 g     O .data	00000004 SystemCoreClock
08009e40 g     O .rodata	00000008 DMA2_S4M1AR_fields
080001f4 g     F .text	00000012 my_Tick
08000f9c g     F .text	00000014 USR_LED_Toggle
0800aab0 g     O .rodata	00000070 FPU_FPSCR_fields
0800be80 g     O .rodata	00000070 I2S2ext_CR1_fields
08010538 g     O .rodata	00000010 TIM2_CCR1_fields
0800dd30 g     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800bd38 g     O .rodata	00000070 I2C3_SR1_fields
0800d200 g     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
08005478 g     F .text	00000010 malloc
0800c088 g     O .rodata	00000008 IWDG_RLR_fields
200001a8 g     O .data	00000001 uwTickFreq
080032c0 g     F .text	00000018 VersionPrint
080129b8 g       .rodata	00000000 _tasktable_end
0800f678 g     O .rodata	00000008 SDIO_FIFOCNT_fields
08006480 g     F .text	00000050 _raise_r
080042d8 g     F .text	0000003c __assert_func
080128b8 g     O .rodata	000000c8 __mprec_tens
0800e500 g     O .rodata	00000008 RCC_AHB2RSTR_fields
08009e48 g     O .rodata	00000008 DMA2_S4NDTR_fields
0800c1d0 g     O .rodata	00000008 NVIC_IABR1_fields
08002394 g     F .text	00000002 UsageFault_Handler
0800fbc0 g     O .rodata	00000028 TIM10_CR1_fields
0800413c g     F .text	0000001c vsnprintf
0800fbb0 g     O .rodata	00000008 TIM10_CCR1_fields
08010af8 g     O .rodata	00000008 TIM3_DMAR_fields
08001bac g     F .text	00000010 TaskingTickHandler
200003fc g     O .bss	00000050 input
08001128  w    F .text	00000006 DMA2_Stream2_IRQHandler
08006504 g     F .text	00000004 _getpid_r
0800318c g     F .text	000000b4 HAL_TIM_OC_Start
20000384 g       .bss	00000000 __bss_start__
0800bf38 g     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800c1f0 g     O .rodata	00000008 NVIC_ICER2_fields
080040d0 g     F .text	00000014 strtoul
08000854 g     F .text	0000001e .hidden __aeabi_ui2d
080053a0 g     F .text	00000008 _localeconv_r
080056b8 g     F .text	0000002c __i2b
0800d840 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
08009ff8 g     O .rodata	00000008 DMA2_S6M0AR_fields
20000000 g       .data	00000000 _sdata
08001128  w    F .text	00000006 SPI1_IRQHandler
08001b30 g     F .text	0000000c WDTFeed
08009740 g     O .rodata	00000040 DBG_registers
08000244 g     F .text	000002d0 .hidden __udivmoddi4
080005d0 g     F .text	00000000 .hidden __aeabi_drsub
08009370 g     O .rodata	00000008 ADC1_SMPR2_fields
08001130 g     F .text	00000030 _sbrk_r
0800c3d0 g     O .rodata	00000020 NVIC_IPR4_fields
08009820 g     O .rodata	000000a0 DMA2_HISR_fields
0800f218 g     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
08011058 g     O .rodata	00000150 TIM5_registers
0800a660 g     O .rodata	000000b8 EXTI_PR_fields
080129e8 g     O .rodata	0000000c timerEventE
0800c330 g     O .rodata	00000020 NVIC_IPR18_fields
0800d4e0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800d918 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800ff58 g     O .rodata	00000050 TIM1_CCMR1_Output_fields
0800cba0 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
08001176 g     F .text	0000000a _read_r
08009ac0 g     O .rodata	00000008 DMA2_S0M1AR_fields
0800c770 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
080101d0 g     O .rodata	00000038 TIM1_SMCR_fields
08001128  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
0800d250 g     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
08000e2c g     F .text	00000012 .hidden __aeabi_dcmplt
20000d40 g     O .bss	00000004 uwTick
080021e8 g     F .text	0000009c SystemClock_Config
080103c8 g     O .rodata	00000010 TIM2_ARR_fields
0800bf98 g     O .rodata	00000048 I2S2ext_SR_fields
0800cbb8 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800fd78 g     O .rodata	00000010 TIM11_EGR_fields
080108e0 g     O .rodata	00000030 TIM3_CCMR1_Input_fields
08009f18 g     O .rodata	00000008 DMA2_S5M0AR_fields
08011330 g     O .rodata	000000e0 TIM9_registers
0800edb0 g     O .rodata	00000038 RTC_DR_fields
0800dc70 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
08010a00 g     O .rodata	00000010 TIM3_CCR3_fields
08011298 g     O .rodata	00000008 TIM9_CR2_fields
08010028 g     O .rodata	00000008 TIM1_CCR1_fields
08009ab8 g     O .rodata	00000008 DMA2_S0M0AR_fields
08002b4c g     F .text	00000028 HAL_SYSTICK_Config
08000898 g     F .text	00000042 .hidden __extendsfdf2
08000b9c g     F .text	000001d0 .hidden __aeabi_ddiv
080092f8 g     O .rodata	00000008 ADC1_JDR1_fields
0800c078 g     O .rodata	00000008 IWDG_KR_fields
0800bde8 g     O .rodata	00000008 I2C3_TRISE_fields
080005dc g     F .text	00000276 .hidden __adddf3
0800bf90 g     O .rodata	00000008 I2S2ext_RXCRCR_fields
08001768 g     F .text	00000060 CmdReceive
08009668 g     O .rodata	00000030 CRC_registers
08011420 g     O .rodata	00000078 USART1_CR1_fields
0800efa8 g     O .rodata	00000270 RTC_registers
08010a98 g     O .rodata	00000060 TIM3_DIER_fields
0800e9d8 g     O .rodata	00000020 RCC_SSCGR_fields
08012a6c g       .ARM	00000000 __exidx_start
08009e38 g     O .rodata	00000008 DMA2_S4M0AR_fields
08000f48 g     F .text	00000016 my_init
0800bdf0 g     O .rodata	00000090 I2C3_registers
08000948 g     F .text	00000254 .hidden __aeabi_dmul
08001128  w    F .text	00000006 DMA2_Stream3_IRQHandler
08012a48 g     O .rodata	0000000c CmdVersionE
0800e030 g     O .rodata	00000038 PWR_CSR_fields
0800eba8 g     O .rodata	00000010 RTC_ALRMASSR_fields
0800fab8 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08010e80 g     O .rodata	00000010 TIM5_CCR2_fields
20000d46 g     O .bss	00000001 __lock___sinit_recursive_mutex
0800c1c8 g     O .rodata	00000008 NVIC_IABR0_fields
08012604 g     O .rodata	00000004 _global_impure_ptr
08010bc0 g     O .rodata	00000140 TIM3_registers
080109f0 g     O .rodata	00000010 TIM3_CCR2_fields
08010fc8 g     O .rodata	00000008 TIM5_PSC_fields
08006434 g     F .text	0000004c _realloc_r
080032f0 g     F .text	00000048 __libc_init_array
0800ec50 g     O .rodata	00000008 RTC_BKP12R_fields
08011548 g     O .rodata	00000010 USART1_GTPR_fields
0800cb10 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800b580 g     O .rodata	00000080 GPIOB_PUPDR_fields
080011ec g     F .text	00000070 CmdR
0800c948 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
08012890 g     O .rodata	00000028 __mprec_bigtens
08010040 g     O .rodata	00000008 TIM1_CCR4_fields
080063d8 g     F .text	0000000e abort
08000854 g     F .text	0000001e .hidden __floatunsidf
08011008 g     O .rodata	00000050 TIM5_SR_fields
080059cc g     F .text	00000038 __mcmp
0800c430 g     O .rodata	00000020 NVIC_IPR7_fields
08009360 g     O .rodata	00000008 ADC1_LTR_fields
20000380 g     O .data	00000004 TaskInputTaskState
08001128  w    F .text	00000006 USART6_IRQHandler
0800ec40 g     O .rodata	00000008 RTC_BKP10R_fields
08009c78 g     O .rodata	00000008 DMA2_S2M0AR_fields
0800e9f8 g     O .rodata	00000140 RCC_registers
08006518 g     F .text	00000000 _init
08009330 g     O .rodata	00000008 ADC1_JOFR4_fields
0800e5c8 g     O .rodata	00000060 RCC_APB1RSTR_fields
0800ec38 g     O .rodata	00000008 RTC_BKP0R_fields
0800e568 g     O .rodata	00000060 RCC_APB1LPENR_fields
0800e4a8 g     O .rodata	00000048 RCC_AHB1RSTR_fields
080129b8 g       .rodata	00000000 _parsetable_start
0800a018 g     O .rodata	000000a0 DMA2_S7CR_fields
080129a0 g       .rodata	00000000 _tasktable_start
0800ecc8 g     O .rodata	00000008 RTC_BKP8R_fields
080104b8 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800c1e8 g     O .rodata	00000008 NVIC_ICER1_fields
08012a00 g     O .rodata	0000000c CmdRE
0800c878 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800e8c8 g     O .rodata	00000050 RCC_CSR_fields
0800af58 g     O .rodata	00000080 GPIOA_OTYPER_fields
08010268 g     O .rodata	00000160 TIM1_registers
0800f3e0 g     O .rodata	00000018 SCB_SCR_fields
08001890 g     F .text	00000078 CmdSend
0800daa0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
08009338 g     O .rodata	00000028 ADC1_JSQR_fields
0800f7b0 g     O .rodata	00000008 SDIO_POWER_fields
20000d54 g       .bss	00000000 _ebss
08000f70 g     F .text	0000002c CmdTest
08009ad0 g     O .rodata	00000008 DMA2_S0PAR_fields
0800cbf8 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800ab90 g     O .rodata	00000040 GPIOA_AFRL_fields
080010d8  w    F .text	00000038 Reset_Handler
0800413c g     F .text	0000001c vsniprintf
08002f6c g     F .text	0000009c TIM_Base_SetConfig
0800fc28 g     O .rodata	000000b0 TIM10_registers
0800c210 g     O .rodata	00000020 NVIC_IPR0_fields
0800ae58 g     O .rodata	00000080 GPIOA_ODR_fields
08005618 g     F .text	00000040 __hi0bits
0800c2d0 g     O .rodata	00000020 NVIC_IPR15_fields
08010030 g     O .rodata	00000008 TIM1_CCR2_fields
08009698 g     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
08010990 g     O .rodata	00000050 TIM3_CCMR2_Output_fields
08009658 g     O .rodata	00000008 CRC_DR_fields
08000ea8 g     F .text	0000004e .hidden __fixdfsi
0800b480 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800bc60 g     O .rodata	00000070 I2C3_CR1_fields
0800ca18 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
20000d44 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800ca80 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
08001e50 g     F .text	00000054 DecodePeripheral
08010ea0 g     O .rodata	00000010 TIM5_CCR4_fields
08009400 g     O .rodata	00000030 ADC1_SR_fields
0800fa58 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
08001128  w    F .text	00000006 DMA2_Stream0_IRQHandler
08009960 g     O .rodata	000000a0 DMA2_LISR_fields
0800ef60 g     O .rodata	00000038 RTC_TSTR_fields
200001ac g     O .data	00000004 uwTickPrio
0800cb88 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
08010588 g     O .rodata	00000040 TIM2_CR1_fields
08002a28 g     F .text	00000034 HAL_Init
0800dbf8 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800e918 g     O .rodata	000000b0 RCC_PLLCFGR_fields
0800d360 g     O .rodata	00000130 OTG_FS_GLOBAL_registers
080062a8 g     F .text	00000090 _putc_r
08009ef8 g     O .rodata	00000020 DMA2_S5FCR_fields
0800f498 g     O .rodata	00000008 SCB_VTOR_fields
0800e450 g     O .rodata	00000058 RCC_AHB1LPENR_fields
0800ec78 g     O .rodata	00000008 RTC_BKP17R_fields
08009218 g     O .rodata	00000070 ADC1_CR1_fields
0800533c g     F .text	00000024 fprintf
08001128  w    F .text	00000006 TIM4_IRQHandler
080005dc g     F .text	00000276 .hidden __aeabi_dadd
0800f378 g     O .rodata	00000018 SCB_HFSR_fields
0800fb58 g     O .rodata	00000008 TIM10_ARR_fields
08000d74 g     F .text	00000082 .hidden __ledf2
0800d6c0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800b720 g     O .rodata	00000100 GPIOH_BSRR_fields
08010438 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0800cc18 g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800a718 g     O .rodata	000000b8 EXTI_RTSR_fields
08009f38 g     O .rodata	000000a0 DMA2_S6CR_fields
0800f7c0 g     O .rodata	00000008 SDIO_RESP2_fields
0800ecc0 g     O .rodata	00000008 RTC_BKP7R_fields
08005838 g     F .text	000000b4 __pow5mult
080008dc g     F .text	0000006a .hidden __aeabi_ul2d
08009f30 g     O .rodata	00000008 DMA2_S5PAR_fields
0800a7d0 g     O .rodata	000000b8 EXTI_SWIER_fields
0800a438 g     O .rodata	000000b8 EXTI_EMR_fields
0800ec80 g     O .rodata	00000008 RTC_BKP18R_fields
0800a960 g     O .rodata	00000008 FLASH_KEYR_fields
080001e0 g     F .text	00000014 mytest
080127a8 g     O .rodata	00000020 __sf_fake_stderr
080111e0 g     O .rodata	00000030 TIM9_CCMR1_Input_fields
08010a70 g     O .rodata	00000018 TIM3_CR2_fields
08010568 g     O .rodata	00000010 TIM2_CCR4_fields
20000d58 g       ._user_heap_stack	00000000 end
08001128  w    F .text	00000006 I2C1_EV_IRQHandler
0800bfe8 g     O .rodata	00000090 I2S2ext_registers
080053ac g     F .text	00000002 __retarget_lock_release_recursive
08001128  w    F .text	00000006 DMA1_Stream6_IRQHandler
08001ef8 g     F .text	00000064 DecodePrintRegisters
080115a8 g     O .rodata	00000070 USART1_registers
20000380 g       .data	00000000 _taskstate_start
0800e508 g     O .rodata	00000060 RCC_APB1ENR_fields
08005d3c g     F .text	000000b6 __ssputs_r
0800c1e0 g     O .rodata	00000008 NVIC_ICER0_fields
0800c498 g     O .rodata	00000008 NVIC_ISER1_fields
08010180 g     O .rodata	00000040 TIM1_EGR_fields
08010468 g     O .rodata	00000050 TIM2_CCMR1_Output_fields
08010548 g     O .rodata	00000010 TIM2_CCR2_fields
080032bc g     F .text	00000004 HAL_TIM_PWM_Stop
0800bda8 g     O .rodata	00000040 I2C3_SR2_fields
0800b9a8 g     O .rodata	00000080 GPIOH_ODR_fields
0800fd30 g     O .rodata	00000008 TIM11_CCR1_fields
0800d888 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
08010f28 g     O .rodata	00000060 TIM5_DIER_fields
0800eca0 g     O .rodata	00000008 RTC_BKP3R_fields
08000e68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08001128  w    F .text	00000006 DMA1_Stream1_IRQHandler
08011300 g     O .rodata	00000030 TIM9_SR_fields
0800d018 g     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800dd48 g     O .rodata	00000270 OTG_FS_HOST_registers
08006022 g     F .text	00000024 __sfputs_r
0800cc00 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800ecb0 g     O .rodata	00000008 RTC_BKP5R_fields
08005210 g     F .text	0000000c __sfp_lock_acquire
08000530 g     F .text	00000000 memchr
08003488  w    F .text	0000046c _printf_float
0800e408 g     O .rodata	00000048 RCC_AHB1ENR_fields
20000d54 g       .bss	00000000 __bss_end__
08005bf0 g     F .text	00000098 _free_r
08001128  w    F .text	00000006 TIM3_IRQHandler
08001128  w    F .text	00000006 RCC_IRQHandler
0800ece8 g     O .rodata	00000020 RTC_CALR_fields
08009d38 g     O .rodata	00000020 DMA2_S3FCR_fields
08000e54 g     F .text	00000012 .hidden __aeabi_dcmpge
08009d68 g     O .rodata	00000008 DMA2_S3NDTR_fields
0800fce0 g     O .rodata	00000018 TIM11_CCER_fields
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800b500 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800e4f8 g     O .rodata	00000008 RCC_AHB2LPENR_fields
0800ecd0 g     O .rodata	00000008 RTC_BKP9R_fields
0800bd08 g     O .rodata	00000020 I2C3_OAR1_fields
0800bc48 g     O .rodata	00000018 I2C3_CCR_fields
080005d8 g     F .text	0000027a .hidden __aeabi_dsub
08001128 g       .text	00000006 Default_Handler
0800d8d0 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800ad50 g     O .rodata	00000088 GPIOA_LCKR_fields
0800ee90 g     O .rodata	00000068 RTC_TAFCR_fields
08012491 g     O .rodata	00000010 AHBPrescTable
0800b058 g     O .rodata	000000a0 GPIOA_registers
0800c4b8 g     O .rodata	00000008 NVIC_ISPR2_fields
08001510 g     F .text	00000010 fetch_cmd_args
080104e8 g     O .rodata	00000050 TIM2_CCMR2_Output_fields
08010910 g     O .rodata	00000050 TIM3_CCMR1_Output_fields
0800b2f8 g     O .rodata	00000088 GPIOB_LCKR_fields
08000fb0 g     F .text	0000005c timerEvent
0800bd28 g     O .rodata	00000010 I2C3_OAR2_fields
080008dc g     F .text	0000006a .hidden __floatundidf
08011260 g     O .rodata	00000008 TIM9_CNT_fields
0800f8a0 g     O .rodata	00000120 SDIO_registers
0800c230 g     O .rodata	00000020 NVIC_IPR10_fields
080058ec g     F .text	000000e0 __lshift
0800a010 g     O .rodata	00000008 DMA2_S6PAR_fields
0800bfe0 g     O .rodata	00000008 I2S2ext_TXCRCR_fields
080112a0 g     O .rodata	00000020 TIM9_DIER_fields
080101c8 g     O .rodata	00000008 TIM1_RCR_fields
0800c908 g     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800c3f0 g     O .rodata	00000020 NVIC_IPR5_fields
08001128  w    F .text	00000006 EXTI15_10_IRQHandler
0800fad8 g     O .rodata	00000008 SYSCFG_MEMRM_fields
0800bf78 g     O .rodata	00000018 I2S2ext_I2SPR_fields
0800eef8 g     O .rodata	00000038 RTC_TR_fields
0800c310 g     O .rodata	00000020 NVIC_IPR17_fields
080032d8 g     F .text	0000000c CmdVersion
08010f90 g     O .rodata	00000030 TIM5_EGR_fields
08001128  w    F .text	00000006 ADC_IRQHandler
0800c350 g     O .rodata	00000020 NVIC_IPR19_fields
0800fa78 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800fbf8 g     O .rodata	00000010 TIM10_EGR_fields
080056e4 g     F .text	00000154 __multiply
08002868 g     F .text	00000138 HAL_RCC_ClockConfig
08002aa8 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
0800bb28 g     O .rodata	00000080 GPIOH_PUPDR_fields
0800136c g     F .text	00000138 TaskInput
0800ef58 g     O .rodata	00000008 RTC_TSSSR_fields
0800e868 g     O .rodata	00000060 RCC_CR_fields
08005b18 g     F .text	000000b8 __d2b
0800bf30 g     O .rodata	00000008 I2S2ext_DR_fields
08011498 g     O .rodata	00000048 USART1_CR2_fields
0800a0f0 g     O .rodata	00000008 DMA2_S7PAR_fields
08003ef0 g     F .text	00000034 strcasecmp
0800fe78 g     O .rodata	00000040 TIM1_BDTR_fields
0800f9d8 g     O .rodata	00000020 STK_CTRL_fields
08009368 g     O .rodata	00000008 ADC1_SMPR1_fields
08010e90 g     O .rodata	00000010 TIM5_CCR3_fields
08001128  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800daf0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800020c g     F .text	00000004 my_Init
0800e680 g     O .rodata	00000058 RCC_APB2LPENR_fields
0800dc28 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
08001128  w    F .text	00000006 SPI5_IRQHandler
0800f5d0 g     O .rodata	00000048 SDIO_CMD_fields
08012a0c g     O .rodata	0000000c CmdReceiveE
0800d720 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800f258 g     O .rodata	00000030 SCB_AIRCR_fields
08009630 g     O .rodata	00000020 ADC_Common_registers
0800ec60 g     O .rodata	00000008 RTC_BKP14R_fields
0800b6e0 g     O .rodata	00000040 GPIOH_AFRL_fields
08001160 g     F .text	00000004 _close_r
08000874 g     F .text	00000022 .hidden __aeabi_i2d
08001084 g     F .text	00000044 gpioInit
08009660 g     O .rodata	00000008 CRC_IDR_fields
080112e0 g     O .rodata	00000008 TIM9_PSC_fields
08001128  w    F .text	00000006 TIM5_IRQHandler
0800c0a0 g     O .rodata	00000040 IWDG_registers
08003f34 g     F .text	00000068 strtok
0800dd38 g     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
080129a0 g     O .rodata	00000018 TaskInputTask
0800da50 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800b820 g     O .rodata	00000080 GPIOH_IDR_fields
0800cd28 g     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800c080 g     O .rodata	00000008 IWDG_PR_fields
08010960 g     O .rodata	00000030 TIM3_CCMR2_Input_fields
08001b80 g     F .text	0000002c TaskingInit
08001128  w    F .text	00000006 DMA2_Stream7_IRQHandler
08003008 g     F .text	00000058 HAL_TIM_Base_Init
0800f7d0 g     O .rodata	00000008 SDIO_RESP4_fields
0800c250 g     O .rodata	00000020 NVIC_IPR11_fields
08001128  w    F .text	00000006 I2C3_EV_IRQHandler
0800c7d8 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
080010c8 g     F .text	00000010 pwmInit
0800fa48 g     O .rodata	00000010 SYSCFG_CMPCR_fields
080016d0 g     F .text	0000004c TerminalInit
080041fc g     F .text	000000dc __swsetup_r
08000514  w    F .text	00000002 .hidden __aeabi_ldiv0
08001128  w    F .text	00000006 EXTI9_5_IRQHandler
08000b9c g     F .text	000001d0 .hidden __divdf3
080092e8 g     O .rodata	00000008 ADC1_DR_fields
080052b0 g     F .text	0000008c __sfp
0800d000 g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
08001128  w    F .text	00000006 RTC_WKUP_IRQHandler
08011410 g     O .rodata	00000010 USART1_BRR_fields
08001930 g     F .text	0000002a PolledPrintf
08009fd8 g     O .rodata	00000020 DMA2_S6FCR_fields
0800cbd0 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
08005234 g     F .text	0000000c __sinit_lock_release
080040e4 g     F .text	00000056 _vsnprintf_r
08000948 g     F .text	00000254 .hidden __muldf3
080015d0 g     F .text	00000054 CmdDump
08001bbc g     F .text	00000068 TaskingRun
08006338 g     F .text	00000022 __sread
08011618 g     O .rodata	00000020 WWDG_CFR_fields
08009c58 g     O .rodata	00000020 DMA2_S2FCR_fields
0800e088 g     O .rodata	00000380 Peripherals
0800f6f0 g     O .rodata	000000c0 SDIO_MASK_fields
0800b400 g     O .rodata	00000080 GPIOB_ODR_fields
08002a74  w    F .text	0000000c HAL_GetTick
0800fb78 g     O .rodata	00000018 TIM10_CCMR1_Input_fields
0800641c g     F .text	0000000c __malloc_lock
0800c4a8 g     O .rodata	00000008 NVIC_ISPR0_fields
0800aa68 g     O .rodata	00000048 FPU_FPCCR_fields
08009d60 g     O .rodata	00000008 DMA2_S3M1AR_fields
0800b928 g     O .rodata	00000080 GPIOH_MODER_fields
0800c1d8 g     O .rodata	00000008 NVIC_IABR2_fields
08005118 g     F .text	00000078 _fflush_r
08005bd0 g     F .text	0000001e _calloc_r
080096e8 g     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800afd8 g     O .rodata	00000080 GPIOA_PUPDR_fields
08001128  w    F .text	00000006 SPI2_IRQHandler
0800cc28 g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800fd68 g     O .rodata	00000010 TIM11_DIER_fields
080127c8 g     O .rodata	00000020 __sf_fake_stdin
0800f488 g     O .rodata	00000010 SCB_SHPR3_fields
0800c4c0 g     O .rodata	00000008 NVIC_STIR_STIR_fields
08010f88 g     O .rodata	00000008 TIM5_DMAR_fields
080053aa g     F .text	00000002 __retarget_lock_acquire_recursive
08009d70 g     O .rodata	00000008 DMA2_S3PAR_fields
0800a5a8 g     O .rodata	000000b8 EXTI_IMR_fields
0800d620 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800ef30 g     O .rodata	00000028 RTC_TSDR_fields
08003338 g     F .text	00000010 memset
08002390 g     F .text	00000002 MemManage_Handler
08002284 g     F .text	00000108 main
08003244 g     F .text	00000078 HAL_TIM_OC_Stop
0800fa98 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
0800fd10 g     O .rodata	00000020 TIM11_CCMR1_Output_fields
08001128  w    F .text	00000006 DMA1_Stream0_IRQHandler
0800a000 g     O .rodata	00000008 DMA2_S6M1AR_fields
080053a8 g     F .text	00000002 __retarget_lock_init_recursive
08009308 g     O .rodata	00000008 ADC1_JDR3_fields
0800a0b8 g     O .rodata	00000020 DMA2_S7FCR_fields
0800fd40 g     O .rodata	00000028 TIM11_CR1_fields
080124fd g     O .rodata	00000006 VersionBuildUser
08010ec0 g     O .rodata	00000040 TIM5_CR1_fields
200003a4 g     O .bss	00000048 htim1
08009ba8 g     O .rodata	00000008 DMA2_S1NDTR_fields
0800c470 g     O .rodata	00000020 NVIC_IPR9_fields
0800c2f0 g     O .rodata	00000020 NVIC_IPR16_fields
0800d9b0 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
08002396 g     F .text	00000002 SVC_Handler
080063b6 g     F .text	00000008 __sclose
08009c90 g     O .rodata	00000008 DMA2_S2PAR_fields
08010a10 g     O .rodata	00000010 TIM3_CCR4_fields
080129f4 g     O .rodata	0000000c pwmInitE
0800195c g     F .text	00000064 TerminalInputBufferWrite
08004430 g     F .text	00000bdc _dtoa_r
08005c88 g     F .text	000000b4 _malloc_r
0800b138 g     O .rodata	00000040 GPIOB_AFRL_fields
080063be g     F .text	0000001a __ascii_wctomb
0800d310 g     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
08009ac8 g     O .rodata	00000008 DMA2_S0NDTR_fields
080008ec g     F .text	0000005a .hidden __aeabi_l2d
0800ff28 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
08009f20 g     O .rodata	00000008 DMA2_S5M1AR_fields
0800bf28 g     O .rodata	00000008 I2S2ext_CRCPR_fields
0800aa50 g     O .rodata	00000010 FPU_CPACR_registers
08010b00 g     O .rodata	00000030 TIM3_EGR_fields
08009b98 g     O .rodata	00000008 DMA2_S1M0AR_fields
0800f290 g     O .rodata	00000030 SCB_CCR_fields
08001128  w    F .text	00000006 EXTI4_IRQHandler
0800fd90 g     O .rodata	00000008 TIM11_PSC_fields
0800eca8 g     O .rodata	00000008 RTC_BKP4R_fields
0800ec70 g     O .rodata	00000008 RTC_BKP16R_fields
08009b78 g     O .rodata	00000020 DMA2_S1FCR_fields
08009570 g     O .rodata	00000030 ADC_Common_CCR_fields
0800ec48 g     O .rodata	00000008 RTC_BKP11R_fields
08002498 g     F .text	00000014 SystemInit
0800f3d8 g     O .rodata	00000008 SCB_MMFAR_fields
08010eb0 g     O .rodata	00000010 TIM5_CNT_fields
0800100c g     F .text	00000078 timer1Init
08000d7c g     F .text	0000007a .hidden __nedf2
0800ebb8 g     O .rodata	00000070 RTC_ALRMBR_fields
080105e0 g     O .rodata	00000010 TIM2_DCR_fields
08006524 g     F .text	00000000 _fini
080011cc g     F .text	0000001e CmdW
0800d100 g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
08003c1c g     F .text	00000030 iprintf
080112e8 g     O .rodata	00000018 TIM9_SMCR_fields
20000384 g       .data	00000000 _taskstate_end
0800fdb0 g     O .rodata	000000c0 TIM11_registers
0800241c g     F .text	0000007c HAL_UART_MspInit
0800340c g     F .text	0000007c __exponent
0800c918 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800efa0 g     O .rodata	00000008 RTC_WUTR_fields
0800ede8 g     O .rodata	00000080 RTC_ISR_fields
080100f0 g     O .rodata	00000010 TIM1_DCR_fields
0800dfe0 g     O .rodata	00000050 PWR_CR_fields
08010658 g     O .rodata	00000030 TIM2_EGR_fields
0800ab20 g     O .rodata	00000030 FPU_registers
08001180 g     F .text	00000040 _write_r
0800fae0 g     O .rodata	00000008 SYSCFG_PMC_fields
0800d280 g     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
08009730 g     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
080093d0 g     O .rodata	00000030 ADC1_SQR3_fields
08009288 g     O .rodata	00000060 ADC1_CR2_fields
0800f598 g     O .rodata	00000038 SDIO_CLKCR_fields
0800d960 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
080029e0  w    F .text	00000048 HAL_InitTick
0800ccf8 g     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
08010d00 g     O .rodata	00000010 TIM5_ARR_fields
080038f4 g     F .text	000000da _printf_common
0800c270 g     O .rodata	00000020 NVIC_IPR12_fields
200001b0 g     O .data	00000004 _impure_ptr
0800cd48 g     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
08009310 g     O .rodata	00000008 ADC1_JDR4_fields
0800500c g     F .text	0000010c __sflush_r
08002a5c  w    F .text	00000018 HAL_IncTick
0800e760 g     O .rodata	00000068 RCC_CFGR_fields
0800ed08 g     O .rodata	000000a8 RTC_CR_fields
0800a4f0 g     O .rodata	000000b8 EXTI_FTSR_fields
08005df4 g     F .text	00000200 _svfiprintf_r
0800d1c8 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
08011558 g     O .rodata	00000050 USART1_SR_fields
0800dca0 g     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
08001128  w    F .text	00000006 WWDG_IRQHandler
0800bef0 g     O .rodata	00000038 I2S2ext_CR2_fields
080092f0 g     O .rodata	00000008 ADC1_HTR_fields
0800c410 g     O .rodata	00000020 NVIC_IPR6_fields
08010e70 g     O .rodata	00000010 TIM5_CCR1_fields
08010558 g     O .rodata	00000010 TIM2_CCR3_fields
08001c24 g     F .text	00000058 Default_IRQHandler
08005488 g     F .text	00000024 __ascii_mbtowc
0800add8 g     O .rodata	00000080 GPIOA_MODER_fields
08012a3c g     O .rodata	0000000c CmdTransparentE
0800168c g     F .text	00000044 CmdTransparent
08010090 g     O .rodata	00000060 TIM1_CR2_fields
0800ee68 g     O .rodata	00000010 RTC_PRER_fields
0800c4c8 g     O .rodata	00000010 NVIC_STIR_registers
08011258 g     O .rodata	00000008 TIM9_CCR2_fields
0800da00 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800fbe8 g     O .rodata	00000010 TIM10_DIER_fields
08010d70 g     O .rodata	00000030 TIM5_CCMR1_Input_fields
08010a88 g     O .rodata	00000010 TIM3_DCR_fields
0800fa08 g     O .rodata	00000040 STK_registers
08001128  w    F .text	00000006 TIM2_IRQHandler
0800baa8 g     O .rodata	00000080 GPIOH_OTYPER_fields
08000208 g     F .text	00000004 my_Loop
0800cc08 g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
080129d0 g     O .rodata	0000000c CmdDecodeE
080040e4 g     F .text	00000056 _vsniprintf_r
0800f350 g     O .rodata	00000028 SCB_CPUID_fields
20000000 g       .data	00000000 myTickCount
0800f618 g     O .rodata	00000008 SDIO_DCOUNT_fields
0800a0f8 g     O .rodata	00000340 DMA2_registers
0800dcb0 g     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
08001128  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
0800a8e8 g     O .rodata	00000030 FLASH_ACR_fields
08003060 g     F .text	00000058 TIM_OC2_SetConfig
08001128  w    F .text	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800eb38 g     O .rodata	00000070 RTC_ALRMAR_fields
0800fe70 g     O .rodata	00000008 TIM1_ARR_fields
0800ba28 g     O .rodata	00000080 GPIOH_OSPEEDR_fields
08009bb0 g     O .rodata	00000008 DMA2_S1PAR_fields
0800a968 g     O .rodata	00000040 FLASH_OPTCR_fields
080053ae g     F .text	0000004a __swhatbuf_r
0800125c g     F .text	00000110 parse
20020000 g       *ABS*	00000000 _estack
080124e4 g     O .rodata	00000019 VersionBuildDateString
08009708 g     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800d2e8 g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800ec98 g     O .rodata	00000008 RTC_BKP2R_fields
08001128  w    F .text	00000006 EXTI1_IRQHandler
08000e18 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800f620 g     O .rodata	00000048 SDIO_DCTRL_fields
0800fcf8 g     O .rodata	00000018 TIM11_CCMR1_Input_fields
08009c98 g     O .rodata	000000a0 DMA2_S3CR_fields
0800f670 g     O .rodata	00000008 SDIO_DTIMER_fields
0800aa60 g     O .rodata	00000008 FPU_FPCAR_fields
20000384 g       .data	00000000 _edata
0800d1d8 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800f7c8 g     O .rodata	00000008 SDIO_RESP3_fields
20000cfc g     O .bss	00000044 huart2
0800f7d8 g     O .rodata	00000008 SDIO_RESPCMD_fields
08001f5c g     F .text	0000028c CmdDecode
08011210 g     O .rodata	00000040 TIM9_CCMR1_Output_fields
08003240 g     F .text	00000004 HAL_TIM_PWM_Start
0800b278 g     O .rodata	00000080 GPIOB_IDR_fields
080023ec g     F .text	00000030 HAL_TIM_Base_MspInit
0800dfd0 g     O .rodata	00000010 OTG_FS_PWRCLK_registers
080111a8 g     O .rodata	00000008 TIM9_ARR_fields
08009bb8 g     O .rodata	000000a0 DMA2_S2CR_fields
0800e6d8 g     O .rodata	00000050 RCC_APB2RSTR_fields
0800d038 g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
080014a4 g     F .text	0000003c fetch_uint32_arg
0800ec28 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08001aa0 g     F .text	00000006 USART2_IRQHandler
0800c4d8 g     O .rodata	00000230 NVIC_registers
0800c158 g     O .rodata	00000008 MPU_MPU_RNR_fields
0800635a g     F .text	00000038 __swrite
080024ac  w    F .text	00000360 HAL_RCC_OscConfig
080112c0 g     O .rodata	00000020 TIM9_EGR_fields
0800533c g     F .text	00000024 fiprintf
08006048 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800cbe8 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
08005360 g     F .text	0000003e _fwalk_reent
08005a04 g     F .text	00000114 __mdiff
08000ea8 g     F .text	0000004e .hidden __aeabi_d2iz
0800ec68 g     O .rodata	00000008 RTC_BKP15R_fields
0800e068 g     O .rodata	00000020 PWR_registers
08009c80 g     O .rodata	00000008 DMA2_S2M1AR_fields
0800c0e0 g     O .rodata	00000018 MPU_MPU_CTRL_fields
08009300 g     O .rodata	00000008 ADC1_JDR2_fields
08009d78 g     O .rodata	000000a0 DMA2_S4CR_fields
080011c0 g     F .text	00000006 _kill
0800c178 g     O .rodata	00000050 MPU_registers
0800c960 g     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
08001128  w    F .text	00000006 I2C2_ER_IRQHandler
0800dc88 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800aed8 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800521c g     F .text	0000000c __sfp_lock_release
080103d8 g     O .rodata	00000060 TIM2_CCER_fields
080014e0 g     F .text	00000030 fetch_string_arg
080127e8 g     O .rodata	00000020 __sf_fake_stdout
080129c4 g     O .rodata	0000000c CmdDumpE
0800b380 g     O .rodata	00000080 GPIOB_MODER_fields
080114e0 g     O .rodata	00000060 USART1_CR3_fields
0800fcd8 g     O .rodata	00000008 TIM11_ARR_fields
08001128  w    F .text	00000006 DMA2_Stream1_IRQHandler
08001da0 g     F .text	00000050 DecodeField
08010880 g     O .rodata	00000060 TIM3_CCER_fields
08001ea4 g     F .text	00000054 DecodePrintPeripherals
080101c0 g     O .rodata	00000008 TIM1_PSC_fields
08012503 g     O .rodata	00000101 _ctype_
0800cfd0 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
08000514  w    F .text	00000002 .hidden __aeabi_idiv0
0800f3f8 g     O .rodata	00000070 SCB_SHCRS_fields
08000e7c g     F .text	0000002c .hidden __unorddf2
08003170 g     F .text	0000001c TIM_CCxChannelCmd
0800f480 g     O .rodata	00000008 SCB_SHPR2_fields
0800cae8 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800e7c8 g     O .rodata	000000a0 RCC_CIR_fields
08012a30 g     O .rodata	0000000c CmdStatsE
08001128  w    F .text	00000006 FLASH_IRQHandler
08010fd0 g     O .rodata	00000038 TIM5_SMCR_fields
0800cc38 g     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
080011c6 g     F .text	00000002 _exit
0800c3b0 g     O .rodata	00000020 NVIC_IPR3_fields
08012a24 g     O .rodata	0000000c CmdTasksE
0800a0e0 g     O .rodata	00000008 DMA2_S7M1AR_fields
080017c8 g     F .text	000000c8 TerminalOutputBufferWrite
08001128  w    F .text	00000006 DMA2_Stream4_IRQHandler
08002392 g     F .text	00000002 BusFault_Handler
08001128  w    F .text	00000006 USART1_IRQHandler
0800cbf0 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800cfe0 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
080053f8 g     F .text	00000080 __smakebuf_r
0800db40 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
08001aa8 g     F .text	00000088 WDTCheckReset
08000518 g     F .text	00000010 strlen
0800e628 g     O .rodata	00000058 RCC_APB2ENR_fields
08001128  w    F .text	00000006 OTG_FS_IRQHandler
080039d0 g     F .text	0000024c _printf_i
08001128  w    F .text	00000006 SPI3_IRQHandler
0800f668 g     O .rodata	00000008 SDIO_DLEN_fields
0800b8a0 g     O .rodata	00000088 GPIOH_LCKR_fields
08000e08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08010fc0 g     O .rodata	00000008 TIM5_OR_fields
08000d6c g     F .text	0000008a .hidden __gedf2
08001128  w    F .text	00000006 DMA1_Stream4_IRQHandler
08010050 g     O .rodata	00000040 TIM1_CR1_fields
20000d4c g     O .bss	00000004 __malloc_sbrk_start
0800c090 g     O .rodata	00000010 IWDG_SR_fields
08002c30 g     F .text	0000005c HAL_UART_Init
0800feb8 g     O .rodata	00000070 TIM1_CCER_fields
0800d1e8 g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800f288 g     O .rodata	00000008 SCB_BFAR_fields
20000004 g     O .data	00000194 InterruptNames
08001128  w    F .text	00000006 I2C1_ER_IRQHandler
08009320 g     O .rodata	00000008 ADC1_JOFR2_fields
0800ffd8 g     O .rodata	00000050 TIM1_CCMR2_Output_fields
0800c160 g     O .rodata	00000018 MPU_MPU_TYPER_fields
08012a18 g     O .rodata	0000000c CmdSendE
0800c450 g     O .rodata	00000020 NVIC_IPR8_fields
08000898 g     F .text	00000042 .hidden __aeabi_f2d
0800d7b0 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
08000ef8 g     F .text	00000050 CmdLed
0800a9e8 g     O .rodata	00000060 FLASH_registers
20000d48 g     O .bss	00000004 __malloc_free_list
08009318 g     O .rodata	00000008 ADC1_JOFR1_fields
0800f240 g     O .rodata	00000010 SCB_ACTRL_registers
08010870 g     O .rodata	00000010 TIM3_ARR_fields
0800cb60 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
080005d8 g     F .text	0000027a .hidden __subdf3
08006048 g     F .text	00000260 _vfprintf_r
08005658 g     F .text	0000005e __lo0bits
0800cfc8 g     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
08010f18 g     O .rodata	00000010 TIM5_DCR_fields
0800dc10 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800ec90 g     O .rodata	00000008 RTC_BKP1R_fields
08001df0 g     F .text	00000060 DecodeRegister
0800b600 g     O .rodata	000000a0 GPIOB_registers
08001cf8 g     F .text	00000054 DecodeReadRegister
0800d490 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
08001128  w    F .text	00000006 DMA2_Stream6_IRQHandler
0800171c g     F .text	0000004c TerminalRead
08010b70 g     O .rodata	00000050 TIM3_SR_fields
08010650 g     O .rodata	00000008 TIM2_DMAR_fields
20000214 g     O .data	0000016c __global_locale
0800fb90 g     O .rodata	00000020 TIM10_CCMR1_Output_fields
0800c840 g     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800bd00 g     O .rodata	00000008 I2C3_DR_fields
0800fd98 g     O .rodata	00000018 TIM11_SR_fields
0800e728 g     O .rodata	00000038 RCC_BDCR_fields
0800d580 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
08001128  w    F .text	00000006 DMA1_Stream3_IRQHandler
08010b38 g     O .rodata	00000038 TIM3_SMCR_fields
0800c4b0 g     O .rodata	00000008 NVIC_ISPR1_fields
0800c208 g     O .rodata	00000008 NVIC_ICPR2_fields
20000d45 g     O .bss	00000001 __lock___sfp_recursive_mutex
080111b0 g     O .rodata	00000030 TIM9_CCER_fields
08010da0 g     O .rodata	00000050 TIM5_CCMR1_Output_fields
0800fae8 g     O .rodata	00000070 SYSCFG_registers
080064d0 g     F .text	00000010 raise
0800c848 g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
08005228 g     F .text	0000000c __sinit_lock_acquire
08009ad8 g     O .rodata	000000a0 DMA2_S1CR_fields
0800f2c0 g     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
0800558c g     F .text	0000008c __multadd
08005548 g     F .text	00000044 _Bfree
0800a9a8 g     O .rodata	00000008 FLASH_OPTKEYR_fields
08011638 g     O .rodata	00000010 WWDG_CR_fields



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000384 	.word	0x20000384
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006518 	.word	0x08006518

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000388 	.word	0x20000388
 80001dc:	08006518 	.word	0x08006518

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f000 fed9 	bl	8000f9c <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <strlen>:
 8000518:	4603      	mov	r3, r0
 800051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800051e:	2a00      	cmp	r2, #0
 8000520:	d1fb      	bne.n	800051a <strlen+0x2>
 8000522:	1a18      	subs	r0, r3, r0
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
	...

08000530 <memchr>:
 8000530:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000534:	2a10      	cmp	r2, #16
 8000536:	db2b      	blt.n	8000590 <memchr+0x60>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	d008      	beq.n	8000550 <memchr+0x20>
 800053e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000542:	3a01      	subs	r2, #1
 8000544:	428b      	cmp	r3, r1
 8000546:	d02d      	beq.n	80005a4 <memchr+0x74>
 8000548:	f010 0f07 	tst.w	r0, #7
 800054c:	b342      	cbz	r2, 80005a0 <memchr+0x70>
 800054e:	d1f6      	bne.n	800053e <memchr+0xe>
 8000550:	b4f0      	push	{r4, r5, r6, r7}
 8000552:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000556:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800055a:	f022 0407 	bic.w	r4, r2, #7
 800055e:	f07f 0700 	mvns.w	r7, #0
 8000562:	2300      	movs	r3, #0
 8000564:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000568:	3c08      	subs	r4, #8
 800056a:	ea85 0501 	eor.w	r5, r5, r1
 800056e:	ea86 0601 	eor.w	r6, r6, r1
 8000572:	fa85 f547 	uadd8	r5, r5, r7
 8000576:	faa3 f587 	sel	r5, r3, r7
 800057a:	fa86 f647 	uadd8	r6, r6, r7
 800057e:	faa5 f687 	sel	r6, r5, r7
 8000582:	b98e      	cbnz	r6, 80005a8 <memchr+0x78>
 8000584:	d1ee      	bne.n	8000564 <memchr+0x34>
 8000586:	bcf0      	pop	{r4, r5, r6, r7}
 8000588:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800058c:	f002 0207 	and.w	r2, r2, #7
 8000590:	b132      	cbz	r2, 80005a0 <memchr+0x70>
 8000592:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000596:	3a01      	subs	r2, #1
 8000598:	ea83 0301 	eor.w	r3, r3, r1
 800059c:	b113      	cbz	r3, 80005a4 <memchr+0x74>
 800059e:	d1f8      	bne.n	8000592 <memchr+0x62>
 80005a0:	2000      	movs	r0, #0
 80005a2:	4770      	bx	lr
 80005a4:	3801      	subs	r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	bf06      	itte	eq
 80005ac:	4635      	moveq	r5, r6
 80005ae:	3803      	subeq	r0, #3
 80005b0:	3807      	subne	r0, #7
 80005b2:	f015 0f01 	tst.w	r5, #1
 80005b6:	d107      	bne.n	80005c8 <memchr+0x98>
 80005b8:	3001      	adds	r0, #1
 80005ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005be:	bf02      	ittt	eq
 80005c0:	3001      	addeq	r0, #1
 80005c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005c6:	3001      	addeq	r0, #1
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	3801      	subs	r0, #1
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__aeabi_drsub>:
 80005d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005d4:	e002      	b.n	80005dc <__adddf3>
 80005d6:	bf00      	nop

080005d8 <__aeabi_dsub>:
 80005d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005dc <__adddf3>:
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	bf1f      	itttt	ne
 80005f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000602:	f000 80e2 	beq.w	80007ca <__adddf3+0x1ee>
 8000606:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800060a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800060e:	bfb8      	it	lt
 8000610:	426d      	neglt	r5, r5
 8000612:	dd0c      	ble.n	800062e <__adddf3+0x52>
 8000614:	442c      	add	r4, r5
 8000616:	ea80 0202 	eor.w	r2, r0, r2
 800061a:	ea81 0303 	eor.w	r3, r1, r3
 800061e:	ea82 0000 	eor.w	r0, r2, r0
 8000622:	ea83 0101 	eor.w	r1, r3, r1
 8000626:	ea80 0202 	eor.w	r2, r0, r2
 800062a:	ea81 0303 	eor.w	r3, r1, r3
 800062e:	2d36      	cmp	r5, #54	; 0x36
 8000630:	bf88      	it	hi
 8000632:	bd30      	pophi	{r4, r5, pc}
 8000634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800063c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000644:	d002      	beq.n	800064c <__adddf3+0x70>
 8000646:	4240      	negs	r0, r0
 8000648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800064c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000658:	d002      	beq.n	8000660 <__adddf3+0x84>
 800065a:	4252      	negs	r2, r2
 800065c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000660:	ea94 0f05 	teq	r4, r5
 8000664:	f000 80a7 	beq.w	80007b6 <__adddf3+0x1da>
 8000668:	f1a4 0401 	sub.w	r4, r4, #1
 800066c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000670:	db0d      	blt.n	800068e <__adddf3+0xb2>
 8000672:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000676:	fa22 f205 	lsr.w	r2, r2, r5
 800067a:	1880      	adds	r0, r0, r2
 800067c:	f141 0100 	adc.w	r1, r1, #0
 8000680:	fa03 f20e 	lsl.w	r2, r3, lr
 8000684:	1880      	adds	r0, r0, r2
 8000686:	fa43 f305 	asr.w	r3, r3, r5
 800068a:	4159      	adcs	r1, r3
 800068c:	e00e      	b.n	80006ac <__adddf3+0xd0>
 800068e:	f1a5 0520 	sub.w	r5, r5, #32
 8000692:	f10e 0e20 	add.w	lr, lr, #32
 8000696:	2a01      	cmp	r2, #1
 8000698:	fa03 fc0e 	lsl.w	ip, r3, lr
 800069c:	bf28      	it	cs
 800069e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006a2:	fa43 f305 	asr.w	r3, r3, r5
 80006a6:	18c0      	adds	r0, r0, r3
 80006a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b0:	d507      	bpl.n	80006c2 <__adddf3+0xe6>
 80006b2:	f04f 0e00 	mov.w	lr, #0
 80006b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80006ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006be:	eb6e 0101 	sbc.w	r1, lr, r1
 80006c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006c6:	d31b      	bcc.n	8000700 <__adddf3+0x124>
 80006c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006cc:	d30c      	bcc.n	80006e8 <__adddf3+0x10c>
 80006ce:	0849      	lsrs	r1, r1, #1
 80006d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006d8:	f104 0401 	add.w	r4, r4, #1
 80006dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006e4:	f080 809a 	bcs.w	800081c <__adddf3+0x240>
 80006e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	ea41 0105 	orr.w	r1, r1, r5
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000704:	4140      	adcs	r0, r0
 8000706:	eb41 0101 	adc.w	r1, r1, r1
 800070a:	3c01      	subs	r4, #1
 800070c:	bf28      	it	cs
 800070e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000712:	d2e9      	bcs.n	80006e8 <__adddf3+0x10c>
 8000714:	f091 0f00 	teq	r1, #0
 8000718:	bf04      	itt	eq
 800071a:	4601      	moveq	r1, r0
 800071c:	2000      	moveq	r0, #0
 800071e:	fab1 f381 	clz	r3, r1
 8000722:	bf08      	it	eq
 8000724:	3320      	addeq	r3, #32
 8000726:	f1a3 030b 	sub.w	r3, r3, #11
 800072a:	f1b3 0220 	subs.w	r2, r3, #32
 800072e:	da0c      	bge.n	800074a <__adddf3+0x16e>
 8000730:	320c      	adds	r2, #12
 8000732:	dd08      	ble.n	8000746 <__adddf3+0x16a>
 8000734:	f102 0c14 	add.w	ip, r2, #20
 8000738:	f1c2 020c 	rsb	r2, r2, #12
 800073c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000740:	fa21 f102 	lsr.w	r1, r1, r2
 8000744:	e00c      	b.n	8000760 <__adddf3+0x184>
 8000746:	f102 0214 	add.w	r2, r2, #20
 800074a:	bfd8      	it	le
 800074c:	f1c2 0c20 	rsble	ip, r2, #32
 8000750:	fa01 f102 	lsl.w	r1, r1, r2
 8000754:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000758:	bfdc      	itt	le
 800075a:	ea41 010c 	orrle.w	r1, r1, ip
 800075e:	4090      	lslle	r0, r2
 8000760:	1ae4      	subs	r4, r4, r3
 8000762:	bfa2      	ittt	ge
 8000764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000768:	4329      	orrge	r1, r5
 800076a:	bd30      	popge	{r4, r5, pc}
 800076c:	ea6f 0404 	mvn.w	r4, r4
 8000770:	3c1f      	subs	r4, #31
 8000772:	da1c      	bge.n	80007ae <__adddf3+0x1d2>
 8000774:	340c      	adds	r4, #12
 8000776:	dc0e      	bgt.n	8000796 <__adddf3+0x1ba>
 8000778:	f104 0414 	add.w	r4, r4, #20
 800077c:	f1c4 0220 	rsb	r2, r4, #32
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f302 	lsl.w	r3, r1, r2
 8000788:	ea40 0003 	orr.w	r0, r0, r3
 800078c:	fa21 f304 	lsr.w	r3, r1, r4
 8000790:	ea45 0103 	orr.w	r1, r5, r3
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	f1c4 040c 	rsb	r4, r4, #12
 800079a:	f1c4 0220 	rsb	r2, r4, #32
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 f304 	lsl.w	r3, r1, r4
 80007a6:	ea40 0003 	orr.w	r0, r0, r3
 80007aa:	4629      	mov	r1, r5
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	fa21 f004 	lsr.w	r0, r1, r4
 80007b2:	4629      	mov	r1, r5
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	f094 0f00 	teq	r4, #0
 80007ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007be:	bf06      	itte	eq
 80007c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007c4:	3401      	addeq	r4, #1
 80007c6:	3d01      	subne	r5, #1
 80007c8:	e74e      	b.n	8000668 <__adddf3+0x8c>
 80007ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ce:	bf18      	it	ne
 80007d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007d4:	d029      	beq.n	800082a <__adddf3+0x24e>
 80007d6:	ea94 0f05 	teq	r4, r5
 80007da:	bf08      	it	eq
 80007dc:	ea90 0f02 	teqeq	r0, r2
 80007e0:	d005      	beq.n	80007ee <__adddf3+0x212>
 80007e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007e6:	bf04      	itt	eq
 80007e8:	4619      	moveq	r1, r3
 80007ea:	4610      	moveq	r0, r2
 80007ec:	bd30      	pop	{r4, r5, pc}
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf1e      	ittt	ne
 80007f4:	2100      	movne	r1, #0
 80007f6:	2000      	movne	r0, #0
 80007f8:	bd30      	popne	{r4, r5, pc}
 80007fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007fe:	d105      	bne.n	800080c <__adddf3+0x230>
 8000800:	0040      	lsls	r0, r0, #1
 8000802:	4149      	adcs	r1, r1
 8000804:	bf28      	it	cs
 8000806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800080a:	bd30      	pop	{r4, r5, pc}
 800080c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000810:	bf3c      	itt	cc
 8000812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000816:	bd30      	popcc	{r4, r5, pc}
 8000818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800081c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800082e:	bf1a      	itte	ne
 8000830:	4619      	movne	r1, r3
 8000832:	4610      	movne	r0, r2
 8000834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000838:	bf1c      	itt	ne
 800083a:	460b      	movne	r3, r1
 800083c:	4602      	movne	r2, r0
 800083e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000842:	bf06      	itte	eq
 8000844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000848:	ea91 0f03 	teqeq	r1, r3
 800084c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000850:	bd30      	pop	{r4, r5, pc}
 8000852:	bf00      	nop

08000854 <__aeabi_ui2d>:
 8000854:	f090 0f00 	teq	r0, #0
 8000858:	bf04      	itt	eq
 800085a:	2100      	moveq	r1, #0
 800085c:	4770      	bxeq	lr
 800085e:	b530      	push	{r4, r5, lr}
 8000860:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000864:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000868:	f04f 0500 	mov.w	r5, #0
 800086c:	f04f 0100 	mov.w	r1, #0
 8000870:	e750      	b.n	8000714 <__adddf3+0x138>
 8000872:	bf00      	nop

08000874 <__aeabi_i2d>:
 8000874:	f090 0f00 	teq	r0, #0
 8000878:	bf04      	itt	eq
 800087a:	2100      	moveq	r1, #0
 800087c:	4770      	bxeq	lr
 800087e:	b530      	push	{r4, r5, lr}
 8000880:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000884:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800088c:	bf48      	it	mi
 800088e:	4240      	negmi	r0, r0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	e73e      	b.n	8000714 <__adddf3+0x138>
 8000896:	bf00      	nop

08000898 <__aeabi_f2d>:
 8000898:	0042      	lsls	r2, r0, #1
 800089a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800089e:	ea4f 0131 	mov.w	r1, r1, rrx
 80008a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008a6:	bf1f      	itttt	ne
 80008a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008b4:	4770      	bxne	lr
 80008b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008ba:	bf08      	it	eq
 80008bc:	4770      	bxeq	lr
 80008be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008c2:	bf04      	itt	eq
 80008c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008c8:	4770      	bxeq	lr
 80008ca:	b530      	push	{r4, r5, lr}
 80008cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	e71c      	b.n	8000714 <__adddf3+0x138>
 80008da:	bf00      	nop

080008dc <__aeabi_ul2d>:
 80008dc:	ea50 0201 	orrs.w	r2, r0, r1
 80008e0:	bf08      	it	eq
 80008e2:	4770      	bxeq	lr
 80008e4:	b530      	push	{r4, r5, lr}
 80008e6:	f04f 0500 	mov.w	r5, #0
 80008ea:	e00a      	b.n	8000902 <__aeabi_l2d+0x16>

080008ec <__aeabi_l2d>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008fa:	d502      	bpl.n	8000902 <__aeabi_l2d+0x16>
 80008fc:	4240      	negs	r0, r0
 80008fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000902:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000906:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800090a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800090e:	f43f aed8 	beq.w	80006c2 <__adddf3+0xe6>
 8000912:	f04f 0203 	mov.w	r2, #3
 8000916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800091a:	bf18      	it	ne
 800091c:	3203      	addne	r2, #3
 800091e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000922:	bf18      	it	ne
 8000924:	3203      	addne	r2, #3
 8000926:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800092a:	f1c2 0320 	rsb	r3, r2, #32
 800092e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000932:	fa20 f002 	lsr.w	r0, r0, r2
 8000936:	fa01 fe03 	lsl.w	lr, r1, r3
 800093a:	ea40 000e 	orr.w	r0, r0, lr
 800093e:	fa21 f102 	lsr.w	r1, r1, r2
 8000942:	4414      	add	r4, r2
 8000944:	e6bd      	b.n	80006c2 <__adddf3+0xe6>
 8000946:	bf00      	nop

08000948 <__aeabi_dmul>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000956:	bf1d      	ittte	ne
 8000958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800095c:	ea94 0f0c 	teqne	r4, ip
 8000960:	ea95 0f0c 	teqne	r5, ip
 8000964:	f000 f8de 	bleq	8000b24 <__aeabi_dmul+0x1dc>
 8000968:	442c      	add	r4, r5
 800096a:	ea81 0603 	eor.w	r6, r1, r3
 800096e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000972:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000976:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800097a:	bf18      	it	ne
 800097c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000988:	d038      	beq.n	80009fc <__aeabi_dmul+0xb4>
 800098a:	fba0 ce02 	umull	ip, lr, r0, r2
 800098e:	f04f 0500 	mov.w	r5, #0
 8000992:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000996:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800099a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800099e:	f04f 0600 	mov.w	r6, #0
 80009a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009a6:	f09c 0f00 	teq	ip, #0
 80009aa:	bf18      	it	ne
 80009ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80009b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80009b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80009b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80009bc:	d204      	bcs.n	80009c8 <__aeabi_dmul+0x80>
 80009be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80009c2:	416d      	adcs	r5, r5
 80009c4:	eb46 0606 	adc.w	r6, r6, r6
 80009c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80009cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e0:	bf88      	it	hi
 80009e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e6:	d81e      	bhi.n	8000a26 <__aeabi_dmul+0xde>
 80009e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009f2:	f150 0000 	adcs.w	r0, r0, #0
 80009f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a00:	ea46 0101 	orr.w	r1, r6, r1
 8000a04:	ea40 0002 	orr.w	r0, r0, r2
 8000a08:	ea81 0103 	eor.w	r1, r1, r3
 8000a0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a10:	bfc2      	ittt	gt
 8000a12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a20:	f04f 0e00 	mov.w	lr, #0
 8000a24:	3c01      	subs	r4, #1
 8000a26:	f300 80ab 	bgt.w	8000b80 <__aeabi_dmul+0x238>
 8000a2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a2e:	bfde      	ittt	le
 8000a30:	2000      	movle	r0, #0
 8000a32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a36:	bd70      	pople	{r4, r5, r6, pc}
 8000a38:	f1c4 0400 	rsb	r4, r4, #0
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	da35      	bge.n	8000aac <__aeabi_dmul+0x164>
 8000a40:	340c      	adds	r4, #12
 8000a42:	dc1b      	bgt.n	8000a7c <__aeabi_dmul+0x134>
 8000a44:	f104 0414 	add.w	r4, r4, #20
 8000a48:	f1c4 0520 	rsb	r5, r4, #32
 8000a4c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a50:	fa20 f004 	lsr.w	r0, r0, r4
 8000a54:	fa01 f205 	lsl.w	r2, r1, r5
 8000a58:	ea40 0002 	orr.w	r0, r0, r2
 8000a5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a68:	fa21 f604 	lsr.w	r6, r1, r4
 8000a6c:	eb42 0106 	adc.w	r1, r2, r6
 8000a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a74:	bf08      	it	eq
 8000a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f1c4 040c 	rsb	r4, r4, #12
 8000a80:	f1c4 0520 	rsb	r5, r4, #32
 8000a84:	fa00 f304 	lsl.w	r3, r0, r4
 8000a88:	fa20 f005 	lsr.w	r0, r0, r5
 8000a8c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a90:	ea40 0002 	orr.w	r0, r0, r2
 8000a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a9c:	f141 0100 	adc.w	r1, r1, #0
 8000aa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aa4:	bf08      	it	eq
 8000aa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	f1c4 0520 	rsb	r5, r4, #32
 8000ab0:	fa00 f205 	lsl.w	r2, r0, r5
 8000ab4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ab8:	fa20 f304 	lsr.w	r3, r0, r4
 8000abc:	fa01 f205 	lsl.w	r2, r1, r5
 8000ac0:	ea43 0302 	orr.w	r3, r3, r2
 8000ac4:	fa21 f004 	lsr.w	r0, r1, r4
 8000ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000acc:	fa21 f204 	lsr.w	r2, r1, r4
 8000ad0:	ea20 0002 	bic.w	r0, r0, r2
 8000ad4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000adc:	bf08      	it	eq
 8000ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f094 0f00 	teq	r4, #0
 8000ae8:	d10f      	bne.n	8000b0a <__aeabi_dmul+0x1c2>
 8000aea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000aee:	0040      	lsls	r0, r0, #1
 8000af0:	eb41 0101 	adc.w	r1, r1, r1
 8000af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000af8:	bf08      	it	eq
 8000afa:	3c01      	subeq	r4, #1
 8000afc:	d0f7      	beq.n	8000aee <__aeabi_dmul+0x1a6>
 8000afe:	ea41 0106 	orr.w	r1, r1, r6
 8000b02:	f095 0f00 	teq	r5, #0
 8000b06:	bf18      	it	ne
 8000b08:	4770      	bxne	lr
 8000b0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	eb43 0303 	adc.w	r3, r3, r3
 8000b14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b18:	bf08      	it	eq
 8000b1a:	3d01      	subeq	r5, #1
 8000b1c:	d0f7      	beq.n	8000b0e <__aeabi_dmul+0x1c6>
 8000b1e:	ea43 0306 	orr.w	r3, r3, r6
 8000b22:	4770      	bx	lr
 8000b24:	ea94 0f0c 	teq	r4, ip
 8000b28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b2c:	bf18      	it	ne
 8000b2e:	ea95 0f0c 	teqne	r5, ip
 8000b32:	d00c      	beq.n	8000b4e <__aeabi_dmul+0x206>
 8000b34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3e:	d1d1      	bne.n	8000ae4 <__aeabi_dmul+0x19c>
 8000b40:	ea81 0103 	eor.w	r1, r1, r3
 8000b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b52:	bf06      	itte	eq
 8000b54:	4610      	moveq	r0, r2
 8000b56:	4619      	moveq	r1, r3
 8000b58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b5c:	d019      	beq.n	8000b92 <__aeabi_dmul+0x24a>
 8000b5e:	ea94 0f0c 	teq	r4, ip
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dmul+0x222>
 8000b64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b68:	d113      	bne.n	8000b92 <__aeabi_dmul+0x24a>
 8000b6a:	ea95 0f0c 	teq	r5, ip
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_dmul+0x234>
 8000b70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b74:	bf1c      	itt	ne
 8000b76:	4610      	movne	r0, r2
 8000b78:	4619      	movne	r1, r3
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dmul+0x24a>
 8000b7c:	ea81 0103 	eor.w	r1, r1, r3
 8000b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}

08000b9c <__aeabi_ddiv>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ba6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000baa:	bf1d      	ittte	ne
 8000bac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000bb0:	ea94 0f0c 	teqne	r4, ip
 8000bb4:	ea95 0f0c 	teqne	r5, ip
 8000bb8:	f000 f8a7 	bleq	8000d0a <__aeabi_ddiv+0x16e>
 8000bbc:	eba4 0405 	sub.w	r4, r4, r5
 8000bc0:	ea81 0e03 	eor.w	lr, r1, r3
 8000bc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000bcc:	f000 8088 	beq.w	8000ce0 <__aeabi_ddiv+0x144>
 8000bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000bd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000bd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000bdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000be0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000be4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000be8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bf4:	429d      	cmp	r5, r3
 8000bf6:	bf08      	it	eq
 8000bf8:	4296      	cmpeq	r6, r2
 8000bfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c02:	d202      	bcs.n	8000c0a <__aeabi_ddiv+0x6e>
 8000c04:	085b      	lsrs	r3, r3, #1
 8000c06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c0a:	1ab6      	subs	r6, r6, r2
 8000c0c:	eb65 0503 	sbc.w	r5, r5, r3
 8000c10:	085b      	lsrs	r3, r3, #1
 8000c12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c26:	bf22      	ittt	cs
 8000c28:	1ab6      	subcs	r6, r6, r2
 8000c2a:	4675      	movcs	r5, lr
 8000c2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c3e:	bf22      	ittt	cs
 8000c40:	1ab6      	subcs	r6, r6, r2
 8000c42:	4675      	movcs	r5, lr
 8000c44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c56:	bf22      	ittt	cs
 8000c58:	1ab6      	subcs	r6, r6, r2
 8000c5a:	4675      	movcs	r5, lr
 8000c5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c6e:	bf22      	ittt	cs
 8000c70:	1ab6      	subcs	r6, r6, r2
 8000c72:	4675      	movcs	r5, lr
 8000c74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c78:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_ddiv+0x114>
 8000c7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c9a:	d1c0      	bne.n	8000c1e <__aeabi_ddiv+0x82>
 8000c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ca0:	d10b      	bne.n	8000cba <__aeabi_ddiv+0x11e>
 8000ca2:	ea41 0100 	orr.w	r1, r1, r0
 8000ca6:	f04f 0000 	mov.w	r0, #0
 8000caa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cae:	e7b6      	b.n	8000c1e <__aeabi_ddiv+0x82>
 8000cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cb4:	bf04      	itt	eq
 8000cb6:	4301      	orreq	r1, r0
 8000cb8:	2000      	moveq	r0, #0
 8000cba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000cbe:	bf88      	it	hi
 8000cc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000cc4:	f63f aeaf 	bhi.w	8000a26 <__aeabi_dmul+0xde>
 8000cc8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ccc:	bf04      	itt	eq
 8000cce:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000cd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000cd6:	f150 0000 	adcs.w	r0, r0, #0
 8000cda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ce4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ce8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cec:	bfc2      	ittt	gt
 8000cee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cf6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cfc:	f04f 0e00 	mov.w	lr, #0
 8000d00:	3c01      	subs	r4, #1
 8000d02:	e690      	b.n	8000a26 <__aeabi_dmul+0xde>
 8000d04:	ea45 0e06 	orr.w	lr, r5, r6
 8000d08:	e68d      	b.n	8000a26 <__aeabi_dmul+0xde>
 8000d0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d0e:	ea94 0f0c 	teq	r4, ip
 8000d12:	bf08      	it	eq
 8000d14:	ea95 0f0c 	teqeq	r5, ip
 8000d18:	f43f af3b 	beq.w	8000b92 <__aeabi_dmul+0x24a>
 8000d1c:	ea94 0f0c 	teq	r4, ip
 8000d20:	d10a      	bne.n	8000d38 <__aeabi_ddiv+0x19c>
 8000d22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d26:	f47f af34 	bne.w	8000b92 <__aeabi_dmul+0x24a>
 8000d2a:	ea95 0f0c 	teq	r5, ip
 8000d2e:	f47f af25 	bne.w	8000b7c <__aeabi_dmul+0x234>
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	e72c      	b.n	8000b92 <__aeabi_dmul+0x24a>
 8000d38:	ea95 0f0c 	teq	r5, ip
 8000d3c:	d106      	bne.n	8000d4c <__aeabi_ddiv+0x1b0>
 8000d3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d42:	f43f aefd 	beq.w	8000b40 <__aeabi_dmul+0x1f8>
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	e722      	b.n	8000b92 <__aeabi_dmul+0x24a>
 8000d4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d50:	bf18      	it	ne
 8000d52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d56:	f47f aec5 	bne.w	8000ae4 <__aeabi_dmul+0x19c>
 8000d5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d5e:	f47f af0d 	bne.w	8000b7c <__aeabi_dmul+0x234>
 8000d62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d66:	f47f aeeb 	bne.w	8000b40 <__aeabi_dmul+0x1f8>
 8000d6a:	e712      	b.n	8000b92 <__aeabi_dmul+0x24a>

08000d6c <__gedf2>:
 8000d6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d70:	e006      	b.n	8000d80 <__cmpdf2+0x4>
 8000d72:	bf00      	nop

08000d74 <__ledf2>:
 8000d74:	f04f 0c01 	mov.w	ip, #1
 8000d78:	e002      	b.n	8000d80 <__cmpdf2+0x4>
 8000d7a:	bf00      	nop

08000d7c <__cmpdf2>:
 8000d7c:	f04f 0c01 	mov.w	ip, #1
 8000d80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d96:	d01b      	beq.n	8000dd0 <__cmpdf2+0x54>
 8000d98:	b001      	add	sp, #4
 8000d9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d9e:	bf0c      	ite	eq
 8000da0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000da4:	ea91 0f03 	teqne	r1, r3
 8000da8:	bf02      	ittt	eq
 8000daa:	ea90 0f02 	teqeq	r0, r2
 8000dae:	2000      	moveq	r0, #0
 8000db0:	4770      	bxeq	lr
 8000db2:	f110 0f00 	cmn.w	r0, #0
 8000db6:	ea91 0f03 	teq	r1, r3
 8000dba:	bf58      	it	pl
 8000dbc:	4299      	cmppl	r1, r3
 8000dbe:	bf08      	it	eq
 8000dc0:	4290      	cmpeq	r0, r2
 8000dc2:	bf2c      	ite	cs
 8000dc4:	17d8      	asrcs	r0, r3, #31
 8000dc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000dca:	f040 0001 	orr.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd8:	d102      	bne.n	8000de0 <__cmpdf2+0x64>
 8000dda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dde:	d107      	bne.n	8000df0 <__cmpdf2+0x74>
 8000de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de8:	d1d6      	bne.n	8000d98 <__cmpdf2+0x1c>
 8000dea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dee:	d0d3      	beq.n	8000d98 <__cmpdf2+0x1c>
 8000df0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <__aeabi_cdrcmple>:
 8000df8:	4684      	mov	ip, r0
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4662      	mov	r2, ip
 8000dfe:	468c      	mov	ip, r1
 8000e00:	4619      	mov	r1, r3
 8000e02:	4663      	mov	r3, ip
 8000e04:	e000      	b.n	8000e08 <__aeabi_cdcmpeq>
 8000e06:	bf00      	nop

08000e08 <__aeabi_cdcmpeq>:
 8000e08:	b501      	push	{r0, lr}
 8000e0a:	f7ff ffb7 	bl	8000d7c <__cmpdf2>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	bf48      	it	mi
 8000e12:	f110 0f00 	cmnmi.w	r0, #0
 8000e16:	bd01      	pop	{r0, pc}

08000e18 <__aeabi_dcmpeq>:
 8000e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e1c:	f7ff fff4 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e20:	bf0c      	ite	eq
 8000e22:	2001      	moveq	r0, #1
 8000e24:	2000      	movne	r0, #0
 8000e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2a:	bf00      	nop

08000e2c <__aeabi_dcmplt>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff ffea 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e34:	bf34      	ite	cc
 8000e36:	2001      	movcc	r0, #1
 8000e38:	2000      	movcs	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_dcmple>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffe0 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e48:	bf94      	ite	ls
 8000e4a:	2001      	movls	r0, #1
 8000e4c:	2000      	movhi	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_dcmpge>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffce 	bl	8000df8 <__aeabi_cdrcmple>
 8000e5c:	bf94      	ite	ls
 8000e5e:	2001      	movls	r0, #1
 8000e60:	2000      	movhi	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_dcmpgt>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffc4 	bl	8000df8 <__aeabi_cdrcmple>
 8000e70:	bf34      	ite	cc
 8000e72:	2001      	movcc	r0, #1
 8000e74:	2000      	movcs	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_dcmpun>:
 8000e7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e84:	d102      	bne.n	8000e8c <__aeabi_dcmpun+0x10>
 8000e86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e8a:	d10a      	bne.n	8000ea2 <__aeabi_dcmpun+0x26>
 8000e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e94:	d102      	bne.n	8000e9c <__aeabi_dcmpun+0x20>
 8000e96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e9a:	d102      	bne.n	8000ea2 <__aeabi_dcmpun+0x26>
 8000e9c:	f04f 0000 	mov.w	r0, #0
 8000ea0:	4770      	bx	lr
 8000ea2:	f04f 0001 	mov.w	r0, #1
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_d2iz>:
 8000ea8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000eac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb0:	d215      	bcs.n	8000ede <__aeabi_d2iz+0x36>
 8000eb2:	d511      	bpl.n	8000ed8 <__aeabi_d2iz+0x30>
 8000eb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ebc:	d912      	bls.n	8000ee4 <__aeabi_d2iz+0x3c>
 8000ebe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ece:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed2:	bf18      	it	ne
 8000ed4:	4240      	negne	r0, r0
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee2:	d105      	bne.n	8000ef0 <__aeabi_d2iz+0x48>
 8000ee4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ee8:	bf08      	it	eq
 8000eea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eee:	4770      	bx	lr
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8000ef8:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000efa:	b9d8      	cbnz	r0, 8000f34 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8000efc:	a801      	add	r0, sp, #4
 8000efe:	f000 fad1 	bl	80014a4 <fetch_uint32_arg>
  if(rc) {
 8000f02:	b128      	cbz	r0, 8000f10 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <CmdLed+0x40>)
 8000f06:	f002 ff25 	bl	8003d54 <puts>
    return CmdReturnBadParameter1;
 8000f0a:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8000f10:	9901      	ldr	r1, [sp, #4]
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <CmdLed+0x44>)
 8000f14:	f002 fe82 	bl	8003c1c <iprintf>
  val = val ? 1 : 0;
 8000f18:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <CmdLed+0x48>)
  val = val ? 1 : 0;
 8000f1c:	3b00      	subs	r3, #0
 8000f1e:	bf18      	it	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f24:	f002 ff16 	bl	8003d54 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8000f28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <CmdLed+0x4c>)
 8000f2e:	2120      	movs	r1, #32
 8000f30:	f001 ff74 	bl	8002e1c <HAL_GPIO_WritePin>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000f34:	2000      	movs	r0, #0
 8000f36:	e7e9      	b.n	8000f0c <CmdLed+0x14>
 8000f38:	08006970 	.word	0x08006970
 8000f3c:	0800699e 	.word	0x0800699e
 8000f40:	080069ba 	.word	0x080069ba
 8000f44:	40020000 	.word	0x40020000

08000f48 <my_init>:
{
 8000f48:	b508      	push	{r3, lr}
  TerminalInit();
 8000f4a:	f000 fbc1 	bl	80016d0 <TerminalInit>
  WDTCheckReset();
 8000f4e:	f000 fdab 	bl	8001aa8 <WDTCheckReset>
  TaskingInit();
 8000f52:	f000 fe15 	bl	8001b80 <TaskingInit>
}
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  my_Init();
 8000f5a:	f7ff b957 	b.w	800020c <my_Init>

08000f5e <my_main>:
{
 8000f5e:	b508      	push	{r3, lr}
  TaskingRun();  /* Run all registered tasks */
 8000f60:	f000 fe2c 	bl	8001bbc <TaskingRun>
  my_Loop();
 8000f64:	f7ff f950 	bl	8000208 <my_Loop>
}
 8000f68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WDTFeed();
 8000f6c:	f000 bde0 	b.w	8001b30 <WDTFeed>

08000f70 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f70:	2801      	cmp	r0, #1
{
 8000f72:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f74:	d004      	beq.n	8000f80 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d104      	bne.n	8000f84 <CmdTest+0x14>
    printf("testasm\n\n"
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <CmdTest+0x24>)
 8000f7c:	f002 feea 	bl	8003d54 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8000f80:	2000      	movs	r0, #0
 8000f82:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8000f84:	204d      	movs	r0, #77	; 0x4d
 8000f86:	f7ff f92b 	bl	80001e0 <mytest>
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CmdTest+0x28>)
 8000f8e:	f002 fe45 	bl	8003c1c <iprintf>
  return CmdReturnOk;
 8000f92:	e7f5      	b.n	8000f80 <CmdTest+0x10>
 8000f94:	080069e6 	.word	0x080069e6
 8000f98:	08006a1f 	.word	0x08006a1f

08000f9c <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <USR_LED_Toggle+0x10>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200003a0 	.word	0x200003a0

08000fb0 <timerEvent>:
}
ADD_CMD("pwminit",pwmInit,"              Initialize PWM pins") 


ParserReturnVal_t timerEvent(int mode)
{
 8000fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000fb4:	b9f8      	cbnz	r0, 8000ff6 <timerEvent+0x46>

 for(int x = 0; x < 50; x++) {
   
        float pwm_val = 255.0*sqrt(1.0 -  pow(abs((2.0*(x/500))-1.0),2.0));
        int pwmToInt = (int) pwm_val;
        printf("%lf, %d\n",pwm_val, pwmToInt);
 8000fb6:	4f12      	ldr	r7, [pc, #72]	; (8001000 <timerEvent+0x50>)
        //glowRGB(100,120, 150);

        TIM1->CCR1 = pwmToInt;
        HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);        
 8000fb8:	4e12      	ldr	r6, [pc, #72]	; (8001004 <timerEvent+0x54>)
 8000fba:	2532      	movs	r5, #50	; 0x32
        printf("%lf, %d\n",pwm_val, pwmToInt);
 8000fbc:	f04f 0800 	mov.w	r8, #0
 8000fc0:	f04f 0900 	mov.w	r9, #0
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	464b      	mov	r3, r9
 8000fca:	9400      	str	r4, [sp, #0]
 8000fcc:	4638      	mov	r0, r7
 8000fce:	f002 fe25 	bl	8003c1c <iprintf>
        TIM1->CCR1 = pwmToInt;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <timerEvent+0x58>)
        HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);        
 8000fd4:	4621      	mov	r1, r4
        TIM1->CCR1 = pwmToInt;
 8000fd6:	635c      	str	r4, [r3, #52]	; 0x34
        HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);        
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f002 f931 	bl	8003240 <HAL_TIM_PWM_Start>
        HAL_Delay(500);
 8000fde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe2:	f001 fd4d 	bl	8002a80 <HAL_Delay>
        HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f002 f967 	bl	80032bc <HAL_TIM_PWM_Stop>
        WDTFeed();
 8000fee:	f000 fd9f 	bl	8001b30 <WDTFeed>
 for(int x = 0; x < 50; x++) {
 8000ff2:	3d01      	subs	r5, #1
 8000ff4:	d1e6      	bne.n	8000fc4 <timerEvent+0x14>

      }

  return CmdReturnOk;
}
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	b003      	add	sp, #12
 8000ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ffe:	bf00      	nop
 8001000:	08006a43 	.word	0x08006a43
 8001004:	200003a4 	.word	0x200003a4
 8001008:	40010000 	.word	0x40010000

0800100c <timer1Init>:
void timer1Init() {
 800100c:	b530      	push	{r4, r5, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
__HAL_RCC_TIM1_CLK_ENABLE();
 8001010:	2400      	movs	r4, #0
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <timer1Init+0x68>)
 8001014:	9400      	str	r4, [sp, #0]
 8001016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
htim1.Instance = TIM1;
 8001018:	4d17      	ldr	r5, [pc, #92]	; (8001078 <timer1Init+0x6c>)
__HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	9b00      	ldr	r3, [sp, #0]
htim1.Instance = TIM1;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <timer1Init+0x70>)
 800102c:	602b      	str	r3, [r5, #0]
htim1.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;
 800102e:	f001 fcc7 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <timer1Init+0x74>)
 8001034:	fbb0 f0f3 	udiv	r0, r0, r3
 8001038:	3801      	subs	r0, #1
htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	e9c5 0401 	strd	r0, r4, [r5, #4]
htim1.Init.Period = 1000;
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
HAL_TIM_Base_Init(&htim1);
 8001042:	4628      	mov	r0, r5
htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	e9c5 3403 	strd	r3, r4, [r5, #12]
htim1.Init.RepetitionCounter = 0;
 8001048:	616c      	str	r4, [r5, #20]
HAL_TIM_Base_Init(&htim1);
 800104a:	f001 ffdd 	bl	8003008 <HAL_TIM_Base_Init>
sConfig.Pulse = 500;
 800104e:	2260      	movs	r2, #96	; 0x60
 8001050:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001054:	e9cd 2301 	strd	r2, r3, [sp, #4]
HAL_TIM_PWM_ConfigChannel(&htim1,&sConfig, TIM_CHANNEL_1);
 8001058:	a901      	add	r1, sp, #4
sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800105a:	2308      	movs	r3, #8
HAL_TIM_PWM_ConfigChannel(&htim1,&sConfig, TIM_CHANNEL_1);
 800105c:	4622      	mov	r2, r4
 800105e:	4628      	mov	r0, r5
sConfig.OCFastMode= TIM_OCFAST_DISABLE;
 8001060:	e9cd 3404 	strd	r3, r4, [sp, #16]
sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001064:	e9cd 4406 	strd	r4, r4, [sp, #24]
sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	9403      	str	r4, [sp, #12]
HAL_TIM_PWM_ConfigChannel(&htim1,&sConfig, TIM_CHANNEL_1);
 800106a:	f002 f825 	bl	80030b8 <HAL_TIM_PWM_ConfigChannel>
}
 800106e:	b009      	add	sp, #36	; 0x24
 8001070:	bd30      	pop	{r4, r5, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	200003a4 	.word	0x200003a4
 800107c:	40010000 	.word	0x40010000
 8001080:	000f4240 	.word	0x000f4240

08001084 <gpioInit>:
void gpioInit() {
 8001084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	2300      	movs	r3, #0
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	9303      	str	r3, [sp, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <gpioInit+0x3c>)
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <gpioInit+0x40>)
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	9b00      	ldr	r3, [sp, #0]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80010a6:	2302      	movs	r3, #2
 80010a8:	e9cd 2301 	strd	r2, r3, [sp, #4]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	9304      	str	r3, [sp, #16]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	a901      	add	r1, sp, #4
GPIO_InitStruct.Alternate = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	9305      	str	r3, [sp, #20]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f001 fdea 	bl	8002c8c <HAL_GPIO_Init>
} 
 80010b8:	b007      	add	sp, #28
 80010ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000

080010c8 <pwmInit>:
ParserReturnVal_t pwmInit(int mode){
 80010c8:	b508      	push	{r3, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80010ca:	b918      	cbnz	r0, 80010d4 <pwmInit+0xc>
    gpioInit();
 80010cc:	f7ff ffda 	bl	8001084 <gpioInit>
    timer1Init();
 80010d0:	f7ff ff9c 	bl	800100c <timer1Init>
}
 80010d4:	2000      	movs	r0, #0
 80010d6:	bd08      	pop	{r3, pc}

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001102:	f001 f9c9 	bl	8002498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f002 f8f3 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f001 f8bb 	bl	8002284 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 800111c:	08012a7c 	.word	0x08012a7c
  ldr r2, =_sbss
 8001120:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 8001124:	20000d54 	.word	0x20000d54

08001128 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 8001128:	f000 fd7c 	bl	8001c24 <Default_IRQHandler>
  b  Infinite_Loop
 800112c:	e7fc      	b.n	8001128 <ADC_IRQHandler>
	...

08001130 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8001130:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <_sbrk_r+0x28>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	b90a      	cbnz	r2, 800113c <_sbrk_r+0xc>
    heap_end = &end;
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <_sbrk_r+0x2c>)
 800113a:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 800113c:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 800113e:	466a      	mov	r2, sp
 8001140:	4401      	add	r1, r0
 8001142:	4291      	cmp	r1, r2
 8001144:	d906      	bls.n	8001154 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8001146:	f002 f8cd 	bl	80032e4 <__errno>
 800114a:	230c      	movs	r3, #12
 800114c:	6003      	str	r3, [r0, #0]
      return (caddr_t) -1;
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8001152:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8001154:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8001156:	e7fc      	b.n	8001152 <_sbrk_r+0x22>
 8001158:	200003ec 	.word	0x200003ec
 800115c:	20000d58 	.word	0x20000d58

08001160 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 8001160:	2000      	movs	r0, #0
 8001162:	4770      	bx	lr

08001164 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	6053      	str	r3, [r2, #4]
   return 0;
}
 800116a:	2000      	movs	r0, #0
 800116c:	4770      	bx	lr

0800116e <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800116e:	2001      	movs	r0, #1
 8001170:	4770      	bx	lr

08001172 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 8001172:	2000      	movs	r0, #0
 8001174:	4770      	bx	lr

08001176 <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8001176:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001178:	2000      	movs	r0, #0
 800117a:	461a      	mov	r2, r3
 800117c:	f000 bace 	b.w	800171c <TerminalRead>

08001180 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8001184:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80011bc <_write_r+0x3c>
{
 8001188:	461d      	mov	r5, r3
 800118a:	4614      	mov	r4, r2
 800118c:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 800118e:	42bc      	cmp	r4, r7
 8001190:	4626      	mov	r6, r4
 8001192:	d102      	bne.n	800119a <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8001194:	4628      	mov	r0, r5
 8001196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 800119a:	7833      	ldrb	r3, [r6, #0]
 800119c:	2b0a      	cmp	r3, #10
 800119e:	f104 0401 	add.w	r4, r4, #1
 80011a2:	d104      	bne.n	80011ae <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	4641      	mov	r1, r8
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 fb0d 	bl	80017c8 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4631      	mov	r1, r6
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 fb08 	bl	80017c8 <TerminalOutputBufferWrite>
    count--;
 80011b8:	e7e9      	b.n	800118e <_write_r+0xe>
 80011ba:	bf00      	nop
 80011bc:	080073fc 	.word	0x080073fc

080011c0 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c4:	4770      	bx	lr

080011c6 <_exit>:

void _exit(int status)
{
  while(1) {}
 80011c6:	e7fe      	b.n	80011c6 <_exit>

080011c8 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 80011c8:	2000      	movs	r0, #0
 80011ca:	4770      	bx	lr

080011cc <CmdW>:
  return CmdReturnOk;
}


ParserReturnVal_t CmdW(int mode)
{
 80011cc:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80011ce:	b940      	cbnz	r0, 80011e2 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80011d0:	4668      	mov	r0, sp
 80011d2:	f000 f967 	bl	80014a4 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80011d6:	a801      	add	r0, sp, #4
 80011d8:	f000 f964 	bl	80014a4 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80011dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80011e0:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 80011e2:	2000      	movs	r0, #0
 80011e4:	b003      	add	sp, #12
 80011e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011ec <CmdR>:
{
 80011ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80011f0:	4604      	mov	r4, r0
 80011f2:	b9f0      	cbnz	r0, 8001232 <CmdR+0x46>
  fetch_uint32_arg(&addr);
 80011f4:	a801      	add	r0, sp, #4
 80011f6:	f000 f955 	bl	80014a4 <fetch_uint32_arg>
  data = *((uint32_t *)addr);
 80011fa:	9901      	ldr	r1, [sp, #4]
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 80011fe:	680d      	ldr	r5, [r1, #0]
    printf("%s%c",
 8001200:	4e12      	ldr	r6, [pc, #72]	; (800124c <CmdR+0x60>)
 8001202:	4f13      	ldr	r7, [pc, #76]	; (8001250 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8001204:	462a      	mov	r2, r5
 8001206:	f002 fd09 	bl	8003c1c <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <CmdR+0x68>)
 800120c:	f002 fd06 	bl	8003c1c <iprintf>
    printf("%s%c",
 8001210:	4911      	ldr	r1, [pc, #68]	; (8001258 <CmdR+0x6c>)
 8001212:	4688      	mov	r8, r1
 8001214:	2d00      	cmp	r5, #0
 8001216:	bfb4      	ite	lt
 8001218:	2231      	movlt	r2, #49	; 0x31
 800121a:	2230      	movge	r2, #48	; 0x30
 800121c:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 800121e:	3401      	adds	r4, #1
    printf("%s%c",
 8001220:	f002 fcfc 	bl	8003c1c <iprintf>
  for(i=0; i<32; i++) {
 8001224:	2c20      	cmp	r4, #32
    data <<= 1;
 8001226:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 800122a:	d106      	bne.n	800123a <CmdR+0x4e>
  printf("\n");
 800122c:	200a      	movs	r0, #10
 800122e:	f002 fd0d 	bl	8003c4c <putchar>
}
 8001232:	2000      	movs	r0, #0
 8001234:	b002      	add	sp, #8
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 800123a:	f014 0f03 	tst.w	r4, #3
 800123e:	bf14      	ite	ne
 8001240:	4639      	movne	r1, r7
 8001242:	4641      	moveq	r1, r8
 8001244:	e7e6      	b.n	8001214 <CmdR+0x28>
 8001246:	bf00      	nop
 8001248:	08011680 	.word	0x08011680
 800124c:	0801173a 	.word	0x0801173a
 8001250:	08008c0f 	.word	0x08008c0f
 8001254:	08011692 	.word	0x08011692
 8001258:	08008eb8 	.word	0x08008eb8

0800125c <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
{
 800125c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800125e:	4614      	mov	r4, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8001260:	b928      	cbnz	r0, 800126e <parse+0x12>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8001262:	4936      	ldr	r1, [pc, #216]	; (800133c <parse+0xe0>)
 8001264:	4836      	ldr	r0, [pc, #216]	; (8001340 <parse+0xe4>)
    return CmdReturnParserFailure;
  }

  if(len==0) {
    printf("len == 0 in %s\n",__FUNCTION__);
 8001266:	f002 fcd9 	bl	8003c1c <iprintf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return CmdReturnParserFailure;
 800126a:	2003      	movs	r0, #3
 800126c:	e033      	b.n	80012d6 <parse+0x7a>
  if(len==0) {
 800126e:	b911      	cbnz	r1, 8001276 <parse+0x1a>
    printf("len == 0 in %s\n",__FUNCTION__);
 8001270:	4932      	ldr	r1, [pc, #200]	; (800133c <parse+0xe0>)
 8001272:	4834      	ldr	r0, [pc, #208]	; (8001344 <parse+0xe8>)
 8001274:	e7f7      	b.n	8001266 <parse+0xa>
  if(table == NULL) {
 8001276:	b182      	cbz	r2, 800129a <parse+0x3e>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001278:	4d33      	ldr	r5, [pc, #204]	; (8001348 <parse+0xec>)
 800127a:	3901      	subs	r1, #1
 800127c:	4603      	mov	r3, r0
 800127e:	1c4e      	adds	r6, r1, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001286:	d00d      	beq.n	80012a4 <parse+0x48>
 8001288:	2a00      	cmp	r2, #0
 800128a:	d0ee      	beq.n	800126a <parse+0xe>
 800128c:	5d52      	ldrb	r2, [r2, r5]
 800128e:	0712      	lsls	r2, r2, #28
 8001290:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8001294:	d404      	bmi.n	80012a0 <parse+0x44>
  if((i==0) || (*buf==0)) {
 8001296:	b939      	cbnz	r1, 80012a8 <parse+0x4c>
 8001298:	e7e7      	b.n	800126a <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 800129a:	4928      	ldr	r1, [pc, #160]	; (800133c <parse+0xe0>)
 800129c:	482b      	ldr	r0, [pc, #172]	; (800134c <parse+0xf0>)
 800129e:	e7e2      	b.n	8001266 <parse+0xa>
 80012a0:	4631      	mov	r1, r6
 80012a2:	e7ec      	b.n	800127e <parse+0x22>
  if((i==0) || (*buf==0)) {
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	d0e0      	beq.n	800126a <parse+0xe>
  }
	
  p = strtok(buf,SEPS);
 80012a8:	4929      	ldr	r1, [pc, #164]	; (8001350 <parse+0xf4>)
 80012aa:	f002 fe43 	bl	8003f34 <strtok>
  if(p==NULL) {
 80012ae:	4605      	mov	r5, r0
 80012b0:	b910      	cbnz	r0, 80012b8 <parse+0x5c>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80012b2:	4922      	ldr	r1, [pc, #136]	; (800133c <parse+0xe0>)
 80012b4:	4827      	ldr	r0, [pc, #156]	; (8001354 <parse+0xf8>)
 80012b6:	e7d6      	b.n	8001266 <parse+0xa>
    return CmdReturnParserFailure;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 80012b8:	4927      	ldr	r1, [pc, #156]	; (8001358 <parse+0xfc>)
 80012ba:	f002 fe19 	bl	8003ef0 <strcasecmp>
 80012be:	b9c8      	cbnz	r0, 80012f4 <parse+0x98>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 80012c0:	4923      	ldr	r1, [pc, #140]	; (8001350 <parse+0xf4>)
 80012c2:	f002 fe37 	bl	8003f34 <strtok>
    if(p == NULL) {
 80012c6:	4605      	mov	r5, r0
 80012c8:	bb20      	cbnz	r0, 8001314 <parse+0xb8>
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
	if(t->help != NULL) {
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80012ca:	4d24      	ldr	r5, [pc, #144]	; (800135c <parse+0x100>)
 80012cc:	340c      	adds	r4, #12
      for(t=table; t->cmdname!=NULL; t++) {
 80012ce:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 80012d2:	b911      	cbnz	r1, 80012da <parse+0x7e>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
	}
      }
      return 0;
 80012d4:	4608      	mov	r0, r1
    }
  }

  printf("Command '%s' not found. Type 'help' for online help\n",p);
  return CmdReturnNotFound;
}
 80012d6:	b002      	add	sp, #8
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
	if(t->help != NULL) {
 80012da:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80012de:	b122      	cbz	r2, 80012ea <parse+0x8e>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80012e0:	4628      	mov	r0, r5
 80012e2:	f002 fc9b 	bl	8003c1c <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 80012e6:	340c      	adds	r4, #12
 80012e8:	e7f1      	b.n	80012ce <parse+0x72>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80012ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80012ee:	2001      	movs	r0, #1
 80012f0:	4798      	blx	r3
 80012f2:	e7f8      	b.n	80012e6 <parse+0x8a>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80012f4:	2600      	movs	r6, #0
  cmdArgs = p + strlen(p) + 1;
 80012f6:	4628      	mov	r0, r5
 80012f8:	f7ff f90e 	bl	8000518 <strlen>
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <parse+0x104>)
 80012fe:	3001      	adds	r0, #1
 8001300:	4428      	add	r0, r5
 8001302:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 8001304:	6821      	ldr	r1, [r4, #0]
 8001306:	b939      	cbnz	r1, 8001318 <parse+0xbc>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <parse+0x108>)
 800130a:	4629      	mov	r1, r5
 800130c:	f002 fc86 	bl	8003c1c <iprintf>
  return CmdReturnNotFound;
 8001310:	2001      	movs	r0, #1
 8001312:	e7e0      	b.n	80012d6 <parse+0x7a>
      arg = CMD_LONG_HELP;
 8001314:	2602      	movs	r6, #2
 8001316:	e7ee      	b.n	80012f6 <parse+0x9a>
    if(strcasecmp(p,t->cmdname) == 0) {
 8001318:	4628      	mov	r0, r5
 800131a:	9101      	str	r1, [sp, #4]
 800131c:	f002 fde8 	bl	8003ef0 <strcasecmp>
 8001320:	9901      	ldr	r1, [sp, #4]
 8001322:	b948      	cbnz	r0, 8001338 <parse+0xdc>
      if(arg == CMD_LONG_HELP) {	
 8001324:	b116      	cbz	r6, 800132c <parse+0xd0>
	printf("%s:\n",t->cmdname);
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <parse+0x10c>)
 8001328:	f002 fc78 	bl	8003c1c <iprintf>
      return t->func(arg);
 800132c:	6863      	ldr	r3, [r4, #4]
 800132e:	4630      	mov	r0, r6
}
 8001330:	b002      	add	sp, #8
 8001332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return t->func(arg);
 8001336:	4718      	bx	r3
  for(t=table; t->cmdname!=NULL; t++) {
 8001338:	340c      	adds	r4, #12
 800133a:	e7e3      	b.n	8001304 <parse+0xa8>
 800133c:	080118ef 	.word	0x080118ef
 8001340:	0801177a 	.word	0x0801177a
 8001344:	0801179b 	.word	0x0801179b
 8001348:	08012504 	.word	0x08012504
 800134c:	080117ab 	.word	0x080117ab
 8001350:	080117ce 	.word	0x080117ce
 8001354:	080117d5 	.word	0x080117d5
 8001358:	08011805 	.word	0x08011805
 800135c:	0801180a 	.word	0x0801180a
 8001360:	200003f0 	.word	0x200003f0
 8001364:	0801181b 	.word	0x0801181b
 8001368:	08011816 	.word	0x08011816

0800136c <TaskInput>:
{
 800136c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(printPrompt) {
 800136e:	4d41      	ldr	r5, [pc, #260]	; (8001474 <TaskInput+0x108>)
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	b123      	cbz	r3, 800137e <TaskInput+0x12>
    printf("ARMON>");
 8001374:	4840      	ldr	r0, [pc, #256]	; (8001478 <TaskInput+0x10c>)
 8001376:	f002 fc51 	bl	8003c1c <iprintf>
    printPrompt = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 800137e:	2201      	movs	r2, #1
 8001380:	f10d 0107 	add.w	r1, sp, #7
 8001384:	2000      	movs	r0, #0
 8001386:	f000 f9c9 	bl	800171c <TerminalRead>
  if(rc) goto ProcessCharacter;
 800138a:	2800      	cmp	r0, #0
 800138c:	d04f      	beq.n	800142e <TaskInput+0xc2>
  if(((c == 010) || (c == 0x7f)) && count) {
 800138e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001392:	2b08      	cmp	r3, #8
 8001394:	d001      	beq.n	800139a <TaskInput+0x2e>
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d115      	bne.n	80013c6 <TaskInput+0x5a>
 800139a:	4c38      	ldr	r4, [pc, #224]	; (800147c <TaskInput+0x110>)
 800139c:	6822      	ldr	r2, [r4, #0]
 800139e:	b192      	cbz	r2, 80013c6 <TaskInput+0x5a>
    printf("\010 \010"); /* Obliterate character */
 80013a0:	4837      	ldr	r0, [pc, #220]	; (8001480 <TaskInput+0x114>)
 80013a2:	f002 fc3b 	bl	8003c1c <iprintf>
    buf--;     /* Then remove it from the buffer */
 80013a6:	4a37      	ldr	r2, [pc, #220]	; (8001484 <TaskInput+0x118>)
 80013a8:	6813      	ldr	r3, [r2, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 80013b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013b8:	f1a3 020d 	sub.w	r2, r3, #13
 80013bc:	4253      	negs	r3, r2
 80013be:	4153      	adcs	r3, r2
 80013c0:	4a31      	ldr	r2, [pc, #196]	; (8001488 <TaskInput+0x11c>)
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e033      	b.n	800142e <TaskInput+0xc2>
  } else if(c == '!') { /* '!' repeats the last command */
 80013c6:	2b21      	cmp	r3, #33	; 0x21
 80013c8:	d125      	bne.n	8001416 <TaskInput+0xaa>
    if(saved) {  /* But only if we have something saved */
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <TaskInput+0x120>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <TaskInput+0x48>
      strcpy(input,input_b);  /* Restore the command */
 80013d2:	4c2f      	ldr	r4, [pc, #188]	; (8001490 <TaskInput+0x124>)
 80013d4:	492f      	ldr	r1, [pc, #188]	; (8001494 <TaskInput+0x128>)
 80013d6:	4620      	mov	r0, r4
 80013d8:	f002 fda4 	bl	8003f24 <strcpy>
      printf("%s",input);
 80013dc:	4621      	mov	r1, r4
 80013de:	482e      	ldr	r0, [pc, #184]	; (8001498 <TaskInput+0x12c>)
 80013e0:	f002 fc1c 	bl	8003c1c <iprintf>
      count = strlen(input);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff f897 	bl	8000518 <strlen>
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <TaskInput+0x110>)
 80013ec:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <TaskInput+0x118>)
 80013f0:	4404      	add	r4, r0
 80013f2:	601c      	str	r4, [r3, #0]
    parse(input, sizeof(input), _parsetable_start);
 80013f4:	4c26      	ldr	r4, [pc, #152]	; (8001490 <TaskInput+0x124>)
    printf("\n");
 80013f6:	200a      	movs	r0, #10
 80013f8:	f002 fc28 	bl	8003c4c <putchar>
    parse(input, sizeof(input), _parsetable_start);
 80013fc:	4a27      	ldr	r2, [pc, #156]	; (800149c <TaskInput+0x130>)
 80013fe:	2150      	movs	r1, #80	; 0x50
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff ff2b 	bl	800125c <parse>
    printPrompt = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	602b      	str	r3, [r5, #0]
    buf = input;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <TaskInput+0x118>)
 800140c:	601c      	str	r4, [r3, #0]
    count = 0;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <TaskInput+0x110>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e7ce      	b.n	80013b4 <TaskInput+0x48>
  } else if(isprint((unsigned int)c)) {
 8001416:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <TaskInput+0x134>)
 8001418:	5c9a      	ldrb	r2, [r3, r2]
 800141a:	f012 0f97 	tst.w	r2, #151	; 0x97
 800141e:	d014      	beq.n	800144a <TaskInput+0xde>
    if(count >= sizeof(input)) {
 8001420:	4916      	ldr	r1, [pc, #88]	; (800147c <TaskInput+0x110>)
 8001422:	680a      	ldr	r2, [r1, #0]
 8001424:	2a4f      	cmp	r2, #79	; 0x4f
 8001426:	d904      	bls.n	8001432 <TaskInput+0xc6>
      printf("\x07"); /* Beep */
 8001428:	2007      	movs	r0, #7
 800142a:	f002 fc0f 	bl	8003c4c <putchar>
}
 800142e:	b003      	add	sp, #12
 8001430:	bd30      	pop	{r4, r5, pc}
      *buf++ = c;
 8001432:	4c14      	ldr	r4, [pc, #80]	; (8001484 <TaskInput+0x118>)
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	7003      	strb	r3, [r0, #0]
 8001438:	1c45      	adds	r5, r0, #1
      count++;
 800143a:	3201      	adds	r2, #1
      printf("%c",c);
 800143c:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8001440:	6025      	str	r5, [r4, #0]
      count++;
 8001442:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8001444:	f002 fc02 	bl	8003c4c <putchar>
 8001448:	e7b4      	b.n	80013b4 <TaskInput+0x48>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 800144a:	2b0d      	cmp	r3, #13
 800144c:	d005      	beq.n	800145a <TaskInput+0xee>
 800144e:	2b0a      	cmp	r3, #10
 8001450:	d1b0      	bne.n	80013b4 <TaskInput+0x48>
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <TaskInput+0x11c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ac      	bne.n	80013b4 <TaskInput+0x48>
    *buf = '\0';
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <TaskInput+0x118>)
    strcpy(input_b,input);
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <TaskInput+0x124>)
    *buf = '\0';
 800145e:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <TaskInput+0x128>)
    *buf = '\0';
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8001466:	f002 fd5d 	bl	8003f24 <strcpy>
    saved = 1;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <TaskInput+0x120>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e7c0      	b.n	80013f4 <TaskInput+0x88>
 8001472:	bf00      	nop
 8001474:	2000019c 	.word	0x2000019c
 8001478:	08011850 	.word	0x08011850
 800147c:	200003f4 	.word	0x200003f4
 8001480:	08011857 	.word	0x08011857
 8001484:	20000198 	.word	0x20000198
 8001488:	200003f8 	.word	0x200003f8
 800148c:	2000049c 	.word	0x2000049c
 8001490:	200003fc 	.word	0x200003fc
 8001494:	2000044c 	.word	0x2000044c
 8001498:	08011fbc 	.word	0x08011fbc
 800149c:	080129b8 	.word	0x080129b8
 80014a0:	08012504 	.word	0x08012504

080014a4 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80014a4:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80014a6:	490c      	ldr	r1, [pc, #48]	; (80014d8 <fetch_uint32_arg+0x34>)
{
 80014a8:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f002 fd42 	bl	8003f34 <strtok>
  if(p == NULL) {
 80014b0:	4604      	mov	r4, r0
 80014b2:	b168      	cbz	r0, 80014d0 <fetch_uint32_arg+0x2c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	4611      	mov	r1, r2
 80014b8:	f002 fe0a 	bl	80040d0 <strtoul>
 80014bc:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff f82a 	bl	8000518 <strlen>
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <fetch_uint32_arg+0x38>)
 80014c6:	3001      	adds	r0, #1
 80014c8:	4404      	add	r4, r0
 80014ca:	601c      	str	r4, [r3, #0]
  return 0;
 80014cc:	2000      	movs	r0, #0
}
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	e7fb      	b.n	80014ce <fetch_uint32_arg+0x2a>
 80014d6:	bf00      	nop
 80014d8:	080117ce 	.word	0x080117ce
 80014dc:	200003f0 	.word	0x200003f0

080014e0 <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80014e0:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80014e2:	4909      	ldr	r1, [pc, #36]	; (8001508 <fetch_string_arg+0x28>)
{
 80014e4:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fd24 	bl	8003f34 <strtok>
  if(p == NULL) {
 80014ec:	4604      	mov	r4, r0
 80014ee:	b140      	cbz	r0, 8001502 <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80014f0:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 80014f2:	f7ff f811 	bl	8000518 <strlen>
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <fetch_string_arg+0x2c>)
 80014f8:	3001      	adds	r0, #1
 80014fa:	4404      	add	r4, r0
 80014fc:	601c      	str	r4, [r3, #0]
  return 0;
 80014fe:	2000      	movs	r0, #0
}
 8001500:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001506:	e7fb      	b.n	8001500 <fetch_string_arg+0x20>
 8001508:	080117ce 	.word	0x080117ce
 800150c:	200003f0 	.word	0x200003f0

08001510 <fetch_cmd_args>:

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <fetch_cmd_args+0xc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6003      	str	r3, [r0, #0]
  return 0;
}
 8001516:	2000      	movs	r0, #0
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200003f0 	.word	0x200003f0

08001520 <DumpBuffer>:
#define BYTES_PER_LINE        16
#define BYTES_PER_BINARY_LINE  8

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8001520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 800152a:	460c      	mov	r4, r1
 800152c:	2900      	cmp	r1, #0
 800152e:	d040      	beq.n	80015b2 <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 8001530:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x: ",(unsigned int)address);
 8001532:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80015c8 <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001536:	f8df a094 	ldr.w	sl, [pc, #148]	; 80015cc <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 800153a:	2500      	movs	r5, #0
 800153c:	463e      	mov	r6, r7
 800153e:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 8001540:	f015 0b0f 	ands.w	fp, r5, #15
 8001544:	eb03 0105 	add.w	r1, r3, r5
 8001548:	d136      	bne.n	80015b8 <DumpBuffer+0x98>
      printf("%08x: ",(unsigned int)address);
 800154a:	4648      	mov	r0, r9
 800154c:	f002 fb66 	bl	8003c1c <iprintf>
      bufp = buf;
 8001550:	46b0      	mov	r8, r6
    c = *p++;
 8001552:	9b00      	ldr	r3, [sp, #0]
 8001554:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <DumpBuffer+0x9c>)
 8001558:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 800155c:	4647      	mov	r7, r8
      *bufp++ = '.';
 800155e:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8001562:	4601      	mov	r1, r0
      *bufp++ = '.';
 8001564:	bf08      	it	eq
 8001566:	202e      	moveq	r0, #46	; 0x2e
 8001568:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 800156c:	4650      	mov	r0, sl
 800156e:	f002 fb55 	bl	8003c1c <iprintf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8001572:	f1bb 0f0f 	cmp.w	fp, #15
 8001576:	d106      	bne.n	8001586 <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 8001578:	2100      	movs	r1, #0
 800157a:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  |%s|\n",buf);
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <DumpBuffer+0xa0>)
 8001580:	4631      	mov	r1, r6
 8001582:	f002 fb4b 	bl	8003c1c <iprintf>
  for(i=0; i<count; i++) {
 8001586:	3501      	adds	r5, #1
 8001588:	42ac      	cmp	r4, r5
 800158a:	d1d8      	bne.n	800153e <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 800158c:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 800158e:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8001592:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 8001596:	d00c      	beq.n	80015b2 <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 8001598:	4f0a      	ldr	r7, [pc, #40]	; (80015c4 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800159a:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 800159e:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80015a0:	3501      	adds	r5, #1
      printf("   ");
 80015a2:	f002 fb3b 	bl	8003c1c <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80015a6:	42a5      	cmp	r5, r4
 80015a8:	d3f9      	bcc.n	800159e <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  |%s|\n",buf);
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <DumpBuffer+0xa0>)
 80015ac:	4631      	mov	r1, r6
 80015ae:	f002 fb35 	bl	8003c1c <iprintf>
  }
}
 80015b2:	b009      	add	sp, #36	; 0x24
 80015b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b8:	46b8      	mov	r8, r7
 80015ba:	e7ca      	b.n	8001552 <DumpBuffer+0x32>
 80015bc:	08012504 	.word	0x08012504
 80015c0:	08011902 	.word	0x08011902
 80015c4:	08011736 	.word	0x08011736
 80015c8:	080118f5 	.word	0x080118f5
 80015cc:	080118fc 	.word	0x080118fc

080015d0 <CmdDump>:
ParserReturnVal_t CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80015d0:	2801      	cmp	r0, #1
{
 80015d2:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80015d4:	d00b      	beq.n	80015ee <CmdDump+0x1e>
  if(action==CMD_LONG_HELP) {
 80015d6:	2802      	cmp	r0, #2
 80015d8:	4d0e      	ldr	r5, [pc, #56]	; (8001614 <CmdDump+0x44>)
 80015da:	4c0f      	ldr	r4, [pc, #60]	; (8001618 <CmdDump+0x48>)
 80015dc:	d109      	bne.n	80015f2 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <CmdDump+0x4c>)
 80015e0:	f002 fbb8 	bl	8003d54 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80015e4:	682a      	ldr	r2, [r5, #0]
 80015e6:	6821      	ldr	r1, [r4, #0]
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <CmdDump+0x50>)
 80015ea:	f002 fb17 	bl	8003c1c <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 80015ee:	2000      	movs	r0, #0
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
  rc = fetch_uint32_arg(&address);
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff ff56 	bl	80014a4 <fetch_uint32_arg>
  if(rc == 0) {
 80015f8:	b910      	cbnz	r0, 8001600 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 80015fa:	4628      	mov	r0, r5
 80015fc:	f7ff ff52 	bl	80014a4 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	6829      	ldr	r1, [r5, #0]
 8001604:	4610      	mov	r0, r2
 8001606:	f7ff ff8b 	bl	8001520 <DumpBuffer>
  address = address+count;
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	682a      	ldr	r2, [r5, #0]
 800160e:	4413      	add	r3, r2
 8001610:	6023      	str	r3, [r4, #0]
  return CmdReturnOk;
 8001612:	e7ec      	b.n	80015ee <CmdDump+0x1e>
 8001614:	200001a0 	.word	0x200001a0
 8001618:	200004a0 	.word	0x200004a0
 800161c:	0801190a 	.word	0x0801190a
 8001620:	08011aa2 	.word	0x08011aa2

08001624 <CmdStats>:
  }
#include "terminal.inc"

/* Dump the terminal statistics */
ParserReturnVal_t CmdStats(int mode)
{
 8001624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001628:	4601      	mov	r1, r0
{
 800162a:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800162c:	bb10      	cbnz	r0, 8001674 <CmdStats+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162e:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomically */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001632:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8001634:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8001638:	930b      	str	r3, [sp, #44]	; 0x2c
 800163a:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 800163e:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001642:	2224      	movs	r2, #36	; 0x24
 8001644:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8001648:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 800164a:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800164e:	f001 fe73 	bl	8003338 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8001652:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%lu, %s: %s\n"
 8001654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <CmdStats+0x5c>)
 8001658:	990a      	ldr	r1, [sp, #40]	; 0x28
 800165a:	480a      	ldr	r0, [pc, #40]	; (8001684 <CmdStats+0x60>)
 800165c:	9400      	str	r4, [sp, #0]
 800165e:	e9cd b307 	strd	fp, r3, [sp, #28]
 8001662:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8001666:	e9cd 7803 	strd	r7, r8, [sp, #12]
 800166a:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <CmdStats+0x64>)
 8001670:	f002 fad4 	bl	8003c1c <iprintf>
	   s[i].framingError,
	   s[i].parityError);
  }

  return CmdReturnOk;
}
 8001674:	2000      	movs	r0, #0
 8001676:	b00d      	add	sp, #52	; 0x34
 8001678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800167c:	200004a4 	.word	0x200004a4
 8001680:	08011af8 	.word	0x08011af8
 8001684:	08011b00 	.word	0x08011b00
 8001688:	08011af0 	.word	0x08011af0

0800168c <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 800168c:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800168e:	4604      	mov	r4, r0
 8001690:	b9b0      	cbnz	r0, 80016c0 <CmdTransparent+0x34>

  index = 0;
 8001692:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8001694:	a801      	add	r0, sp, #4
 8001696:	f7ff ff05 	bl	80014a4 <fetch_uint32_arg>
  if(rc) {
 800169a:	4602      	mov	r2, r0
 800169c:	b130      	cbz	r0, 80016ac <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <CmdTransparent+0x38>)
 80016a0:	4621      	mov	r1, r4
 80016a2:	f002 fabb 	bl	8003c1c <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 80016a6:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 80016a8:	b002      	add	sp, #8
 80016aa:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80016ac:	9901      	ldr	r1, [sp, #4]
 80016ae:	b119      	cbz	r1, 80016b8 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <CmdTransparent+0x3c>)
 80016b2:	f002 fab3 	bl	8003c1c <iprintf>
    return CmdReturnBadParameter1;
 80016b6:	e7f6      	b.n	80016a6 <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <CmdTransparent+0x40>)
 80016ba:	f002 fb4b 	bl	8003d54 <puts>
 80016be:	e7f2      	b.n	80016a6 <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80016c0:	2000      	movs	r0, #0
 80016c2:	e7f1      	b.n	80016a8 <CmdTransparent+0x1c>
 80016c4:	08011bdd 	.word	0x08011bdd
 80016c8:	08011c0b 	.word	0x08011c0b
 80016cc:	08011c41 	.word	0x08011c41

080016d0 <TerminalInit>:
{
 80016d0:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 80016d2:	4c10      	ldr	r4, [pc, #64]	; (8001714 <TerminalInit+0x44>)
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	2202      	movs	r2, #2
 80016dc:	6840      	ldr	r0, [r0, #4]
 80016de:	f002 fb41 	bl	8003d64 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	2202      	movs	r2, #2
 80016ea:	6880      	ldr	r0, [r0, #8]
 80016ec:	f002 fb3a 	bl	8003d64 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80016f0:	6820      	ldr	r0, [r4, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	2202      	movs	r2, #2
 80016f6:	4619      	mov	r1, r3
 80016f8:	68c0      	ldr	r0, [r0, #12]
 80016fa:	f002 fb33 	bl	8003d64 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <TerminalInit+0x48>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001706:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	615a      	str	r2, [r3, #20]
}
 8001710:	bd10      	pop	{r4, pc}
 8001712:	bf00      	nop
 8001714:	200001b0 	.word	0x200001b0
 8001718:	40004400 	.word	0x40004400

0800171c <TerminalRead>:
{
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 8001722:	4c10      	ldr	r4, [pc, #64]	; (8001764 <TerminalRead+0x48>)
 8001724:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8001728:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 800172a:	fb05 4303 	mla	r3, r5, r3, r4
 800172e:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001732:	b2a4      	uxth	r4, r4
 8001734:	b10c      	cbz	r4, 800173a <TerminalRead+0x1e>
 8001736:	4290      	cmp	r0, r2
 8001738:	d101      	bne.n	800173e <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800173a:	b662      	cpsie	i
}
 800173c:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 800173e:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8001742:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001744:	5d1d      	ldrb	r5, [r3, r4]
 8001746:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001748:	3401      	adds	r4, #1
 800174a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800174e:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8001752:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001756:	3c01      	subs	r4, #1
 8001758:	b2a4      	uxth	r4, r4
 800175a:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 800175e:	3001      	adds	r0, #1
 8001760:	e7e5      	b.n	800172e <TerminalRead+0x12>
 8001762:	bf00      	nop
 8001764:	200004a4 	.word	0x200004a4

08001768 <CmdReceive>:
{
 8001768:	b513      	push	{r0, r1, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800176a:	4604      	mov	r4, r0
 800176c:	bb18      	cbnz	r0, 80017b6 <CmdReceive+0x4e>
  index = 0;
 800176e:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8001770:	a801      	add	r0, sp, #4
 8001772:	f7ff fe97 	bl	80014a4 <fetch_uint32_arg>
  if(rc) {
 8001776:	4602      	mov	r2, r0
 8001778:	b130      	cbz	r0, 8001788 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <CmdReceive+0x54>)
 800177c:	4621      	mov	r1, r4
 800177e:	f002 fa4d 	bl	8003c1c <iprintf>
    return CmdReturnBadParameter1;
 8001782:	2004      	movs	r0, #4
}
 8001784:	b002      	add	sp, #8
 8001786:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001788:	9901      	ldr	r1, [sp, #4]
 800178a:	b119      	cbz	r1, 8001794 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <CmdReceive+0x58>)
 800178e:	f002 fa45 	bl	8003c1c <iprintf>
 8001792:	e7f6      	b.n	8001782 <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <CmdReceive+0x5c>)
 8001796:	f002 fa41 	bl	8003c1c <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 800179a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f10d 0103 	add.w	r1, sp, #3
 80017a4:	f7ff ffba 	bl	800171c <TerminalRead>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d0eb      	beq.n	8001784 <CmdReceive+0x1c>
    printf("%c",c);
 80017ac:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80017b0:	f002 fa4c 	bl	8003c4c <putchar>
 80017b4:	e7f1      	b.n	800179a <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80017b6:	2000      	movs	r0, #0
 80017b8:	e7e4      	b.n	8001784 <CmdReceive+0x1c>
 80017ba:	bf00      	nop
 80017bc:	08011bdd 	.word	0x08011bdd
 80017c0:	08011c0b 	.word	0x08011c0b
 80017c4:	08011c66 	.word	0x08011c66

080017c8 <TerminalOutputBufferWrite>:
  if(len >= TERMINALBUFFERSIZE) {
 80017c8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	4c2e      	ldr	r4, [pc, #184]	; (8001888 <TerminalOutputBufferWrite+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 80017d0:	d30a      	bcc.n	80017e8 <TerminalOutputBufferWrite+0x20>
    TerminalState[index].stats.writeTooBig++;
 80017d2:	f640 0334 	movw	r3, #2100	; 0x834
 80017d6:	fb03 4300 	mla	r3, r3, r0, r4
 80017da:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80017de:	3201      	adds	r2, #1
 80017e0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80017e8:	f640 0334 	movw	r3, #2100	; 0x834
 80017ec:	fb03 4300 	mla	r3, r3, r0, r4
 80017f0:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80017f4:	fa12 f585 	uxtah	r5, r2, r5
 80017f8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017fc:	d221      	bcs.n	8001842 <TerminalOutputBufferWrite+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 80017fe:	b672      	cpsid	i
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001800:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001804:	2500      	movs	r5, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001806:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 800180a:	42aa      	cmp	r2, r5
 800180c:	d005      	beq.n	800181a <TerminalOutputBufferWrite+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800180e:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
 8001812:	b2b6      	uxth	r6, r6
 8001814:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001818:	d321      	bcc.n	800185e <TerminalOutputBufferWrite+0x96>
  TerminalState[index].stats.written += sent;  /* gather statistics */
 800181a:	f640 0334 	movw	r3, #2100	; 0x834
 800181e:	fb03 4400 	mla	r4, r3, r0, r4
 8001822:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001826:	442b      	add	r3, r5
 8001828:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
  uart=TerminalInfo[index].instance;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <TerminalOutputBufferWrite+0xc4>)
 800182e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001832:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001834:	68d3      	ldr	r3, [r2, #12]
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800183c:	b662      	cpsie	i
}
 800183e:	4628      	mov	r0, r5
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 8001842:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001846:	3501      	adds	r5, #1
 8001848:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 800184c:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001850:	fa12 f585 	uxtah	r5, r2, r5
 8001854:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001858:	d3d1      	bcc.n	80017fe <TerminalOutputBufferWrite+0x36>
      asm volatile ("nop");
 800185a:	bf00      	nop
 800185c:	e7f6      	b.n	800184c <TerminalOutputBufferWrite+0x84>
    head = TerminalState[index].outHead;
 800185e:	f8b3 6806 	ldrh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 8001862:	f811 c005 	ldrb.w	ip, [r1, r5]
 8001866:	fa13 f786 	uxtah	r7, r3, r6
    TerminalState[index].outHead = TERMINALINCR(head);
 800186a:	3601      	adds	r6, #1
 800186c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001870:	f8a3 6806 	strh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001874:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001878:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 800187c:	3601      	adds	r6, #1
 800187e:	b2b6      	uxth	r6, r6
 8001880:	f8a3 680a 	strh.w	r6, [r3, #2058]	; 0x80a
    sent++;
 8001884:	3501      	adds	r5, #1
 8001886:	e7c0      	b.n	800180a <TerminalOutputBufferWrite+0x42>
 8001888:	200004a4 	.word	0x200004a4
 800188c:	08011d80 	.word	0x08011d80

08001890 <CmdSend>:
{
 8001890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001892:	4604      	mov	r4, r0
 8001894:	bb70      	cbnz	r0, 80018f4 <CmdSend+0x64>
  index = 0;
 8001896:	9002      	str	r0, [sp, #8]
  rc = fetch_uint32_arg(&index);
 8001898:	a802      	add	r0, sp, #8
 800189a:	f7ff fe03 	bl	80014a4 <fetch_uint32_arg>
  if(rc) {
 800189e:	4602      	mov	r2, r0
 80018a0:	b130      	cbz	r0, 80018b0 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80018a2:	4815      	ldr	r0, [pc, #84]	; (80018f8 <CmdSend+0x68>)
 80018a4:	4621      	mov	r1, r4
 80018a6:	f002 f9b9 	bl	8003c1c <iprintf>
    return CmdReturnBadParameter1;
 80018aa:	2004      	movs	r0, #4
}
 80018ac:	b004      	add	sp, #16
 80018ae:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80018b0:	9c02      	ldr	r4, [sp, #8]
 80018b2:	b124      	cbz	r4, 80018be <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80018b4:	4621      	mov	r1, r4
 80018b6:	4811      	ldr	r0, [pc, #68]	; (80018fc <CmdSend+0x6c>)
 80018b8:	f002 f9b0 	bl	8003c1c <iprintf>
 80018bc:	e7f5      	b.n	80018aa <CmdSend+0x1a>
  fetch_cmd_args(&s);
 80018be:	a803      	add	r0, sp, #12
  s = NULL;
 80018c0:	9403      	str	r4, [sp, #12]
  fetch_cmd_args(&s);
 80018c2:	f7ff fe25 	bl	8001510 <fetch_cmd_args>
  len = strlen(s);
 80018c6:	9903      	ldr	r1, [sp, #12]
 80018c8:	9101      	str	r1, [sp, #4]
 80018ca:	4608      	mov	r0, r1
 80018cc:	f7fe fe24 	bl	8000518 <strlen>
  if(len==0) {
 80018d0:	9901      	ldr	r1, [sp, #4]
 80018d2:	4602      	mov	r2, r0
 80018d4:	b920      	cbnz	r0, 80018e0 <CmdSend+0x50>
    printf("You need to specify what you want to send\n");
 80018d6:	480a      	ldr	r0, [pc, #40]	; (8001900 <CmdSend+0x70>)
 80018d8:	f002 fa3c 	bl	8003d54 <puts>
    return CmdReturnBadParameter2;
 80018dc:	2005      	movs	r0, #5
 80018de:	e7e5      	b.n	80018ac <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 80018e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80018e4:	f7ff ff70 	bl	80017c8 <TerminalOutputBufferWrite>
  TerminalOutputBufferWrite(index,"\r\n",2);
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <CmdSend+0x74>)
 80018ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f7ff ff6a 	bl	80017c8 <TerminalOutputBufferWrite>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018f4:	2000      	movs	r0, #0
 80018f6:	e7d9      	b.n	80018ac <CmdSend+0x1c>
 80018f8:	08011bdd 	.word	0x08011bdd
 80018fc:	08011c0b 	.word	0x08011c0b
 8001900:	08011c81 	.word	0x08011c81
 8001904:	08011eb7 	.word	0x08011eb7

08001908 <TerminalWritePolled>:
  uart = TerminalInfo[index].instance;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <TerminalWritePolled+0x24>)
{
 800190a:	b510      	push	{r4, lr}
  uart = TerminalInfo[index].instance;
 800190c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001910:	6883      	ldr	r3, [r0, #8]
  while(len) {
 8001912:	1888      	adds	r0, r1, r2
 8001914:	4281      	cmp	r1, r0
 8001916:	d102      	bne.n	800191e <TerminalWritePolled+0x16>
}
 8001918:	4610      	mov	r0, r2
 800191a:	bd10      	pop	{r4, pc}
      asm volatile ("nop");
 800191c:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 800191e:	681c      	ldr	r4, [r3, #0]
 8001920:	0624      	lsls	r4, r4, #24
 8001922:	d5fb      	bpl.n	800191c <TerminalWritePolled+0x14>
    uart->DR = *p;
 8001924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001928:	605c      	str	r4, [r3, #4]
    sent++;
 800192a:	e7f3      	b.n	8001914 <TerminalWritePolled+0xc>
 800192c:	08011d80 	.word	0x08011d80

08001930 <PolledPrintf>:
{
 8001930:	b40f      	push	{r0, r1, r2, r3}
 8001932:	b500      	push	{lr}
 8001934:	b097      	sub	sp, #92	; 0x5c
 8001936:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001938:	2150      	movs	r1, #80	; 0x50
{
 800193a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 800193e:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001940:	a802      	add	r0, sp, #8
 8001942:	f002 fbfb 	bl	800413c <vsniprintf>
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001946:	a902      	add	r1, sp, #8
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001948:	4602      	mov	r2, r0
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff ffdc 	bl	8001908 <TerminalWritePolled>
}
 8001950:	b017      	add	sp, #92	; 0x5c
 8001952:	f85d eb04 	ldr.w	lr, [sp], #4
 8001956:	b004      	add	sp, #16
 8001958:	4770      	bx	lr
	...

0800195c <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <TerminalInputBufferWrite+0x60>)
{
 800195e:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001960:	f640 0434 	movw	r4, #2100	; 0x834
 8001964:	fb04 3000 	mla	r0, r4, r0, r3
 8001968:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 800196c:	fa12 f383 	uxtah	r3, r2, r3
 8001970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001974:	d306      	bcc.n	8001984 <TerminalInputBufferWrite+0x28>
    TerminalState[index].stats.receiveTooBig++;
 8001976:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800197a:	3301      	adds	r3, #1
 800197c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    return 1;
 8001980:	2001      	movs	r0, #1
}
 8001982:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8001984:	f8d0 3820 	ldr.w	r3, [r0, #2080]	; 0x820
 8001988:	4413      	add	r3, r2
 800198a:	f8c0 3820 	str.w	r3, [r0, #2080]	; 0x820
  while(len != 0) {
 800198e:	440a      	add	r2, r1
 8001990:	4291      	cmp	r1, r2
 8001992:	d101      	bne.n	8001998 <TerminalInputBufferWrite+0x3c>
  return 0;
 8001994:	2000      	movs	r0, #0
 8001996:	e7f4      	b.n	8001982 <TerminalInputBufferWrite+0x26>
    head = TerminalState[index].inHead;
 8001998:	f8b0 3400 	ldrh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inBuffer[head] = *p++;
 800199c:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 80019a0:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 80019a2:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 80019a4:	3301      	adds	r3, #1
 80019a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019aa:	f8a0 3400 	strh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inCount++;
 80019ae:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 80019b2:	3301      	adds	r3, #1
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    len--;
 80019ba:	e7e9      	b.n	8001990 <TerminalInputBufferWrite+0x34>
 80019bc:	200004a4 	.word	0x200004a4

080019c0 <TerminalISR>:
  uart = TerminalInfo[index].instance;
 80019c0:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <TerminalISR+0xd8>)
 80019c2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
{
 80019c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uart = TerminalInfo[index].instance;
 80019c8:	689e      	ldr	r6, [r3, #8]
  isr = uart->SR;
 80019ca:	6835      	ldr	r5, [r6, #0]
  if(isr & USART_SR_RXNE) { 
 80019cc:	06a9      	lsls	r1, r5, #26
{
 80019ce:	4604      	mov	r4, r0
  if(isr & USART_SR_RXNE) { 
 80019d0:	d507      	bpl.n	80019e2 <TerminalISR+0x22>
    c = uart->DR;
 80019d2:	6873      	ldr	r3, [r6, #4]
 80019d4:	f88d 3007 	strb.w	r3, [sp, #7]
    TerminalInputBufferWrite(index,&c,1);
 80019d8:	2201      	movs	r2, #1
 80019da:	f10d 0107 	add.w	r1, sp, #7
 80019de:	f7ff ffbd 	bl	800195c <TerminalInputBufferWrite>
  if(isr & USART_SR_TXE) {
 80019e2:	062a      	lsls	r2, r5, #24
 80019e4:	d50d      	bpl.n	8001a02 <TerminalISR+0x42>
    if(TerminalState[index].outCount == 0) {
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <TerminalISR+0xdc>)
 80019e8:	f640 0234 	movw	r2, #2100	; 0x834
 80019ec:	fb02 3304 	mla	r3, r2, r4, r3
 80019f0:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 80019f4:	b292      	uxth	r2, r2
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	d13b      	bne.n	8001a72 <TerminalISR+0xb2>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 80019fa:	68f3      	ldr	r3, [r6, #12]
 80019fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a00:	60f3      	str	r3, [r6, #12]
  if(isr & USART_SR_TC) {
 8001a02:	066b      	lsls	r3, r5, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8001a04:	bf42      	ittt	mi
 8001a06:	68f3      	ldrmi	r3, [r6, #12]
 8001a08:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8001a0c:	60f3      	strmi	r3, [r6, #12]
  if(isr & USART_SR_PE) {
 8001a0e:	07e8      	lsls	r0, r5, #31
 8001a10:	d509      	bpl.n	8001a26 <TerminalISR+0x66>
    TerminalState[index].stats.parityError++;
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <TerminalISR+0xdc>)
 8001a14:	f640 0234 	movw	r2, #2100	; 0x834
 8001a18:	fb02 3304 	mla	r3, r2, r4, r3
 8001a1c:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001a20:	3201      	adds	r2, #1
 8001a22:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8001a26:	07a9      	lsls	r1, r5, #30
 8001a28:	d509      	bpl.n	8001a3e <TerminalISR+0x7e>
    TerminalState[index].stats.framingError++;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <TerminalISR+0xdc>)
 8001a2c:	f640 0234 	movw	r2, #2100	; 0x834
 8001a30:	fb02 3304 	mla	r3, r2, r4, r3
 8001a34:	f8d3 282c 	ldr.w	r2, [r3, #2092]	; 0x82c
 8001a38:	3201      	adds	r2, #1
 8001a3a:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8001a3e:	076a      	lsls	r2, r5, #29
 8001a40:	d509      	bpl.n	8001a56 <TerminalISR+0x96>
    TerminalState[index].stats.noiseError++;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <TerminalISR+0xdc>)
 8001a44:	f640 0234 	movw	r2, #2100	; 0x834
 8001a48:	fb02 3304 	mla	r3, r2, r4, r3
 8001a4c:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 8001a50:	3201      	adds	r2, #1
 8001a52:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8001a56:	072b      	lsls	r3, r5, #28
 8001a58:	d509      	bpl.n	8001a6e <TerminalISR+0xae>
    TerminalState[index].stats.overrunError++;
 8001a5a:	4810      	ldr	r0, [pc, #64]	; (8001a9c <TerminalISR+0xdc>)
 8001a5c:	f640 0334 	movw	r3, #2100	; 0x834
 8001a60:	fb03 0404 	mla	r4, r3, r4, r0
 8001a64:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
}
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
      tail = TerminalState[index].outTail;
 8001a72:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8001a76:	fa13 f182 	uxtah	r1, r3, r2
      tail = TERMINALINCR(tail);
 8001a7a:	3201      	adds	r2, #1
      uart->DR = c;
 8001a7c:	f891 1406 	ldrb.w	r1, [r1, #1030]	; 0x406
 8001a80:	6071      	str	r1, [r6, #4]
      TerminalState[index].outCount--;
 8001a82:	f8b3 180a 	ldrh.w	r1, [r3, #2058]	; 0x80a
 8001a86:	3901      	subs	r1, #1
 8001a88:	b289      	uxth	r1, r1
      TerminalState[index].outTail = tail;
 8001a8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8001a8e:	f8a3 180a 	strh.w	r1, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8001a92:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8001a96:	e7b4      	b.n	8001a02 <TerminalISR+0x42>
 8001a98:	08011d80 	.word	0x08011d80
 8001a9c:	200004a4 	.word	0x200004a4

08001aa0 <USART2_IRQHandler>:
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff bf8d 	b.w	80019c0 <TerminalISR>
	...

08001aa8 <WDTCheckReset>:
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <WDTCheckReset+0x64>)
{
 8001aaa:	b510      	push	{r4, lr}
  csr = RCC->CSR;
 8001aac:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 8001aae:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8001ab2:	d025      	beq.n	8001b00 <WDTCheckReset+0x58>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <WDTCheckReset+0x68>)
 8001ab6:	f002 f94d 	bl	8003d54 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 8001aba:	2c00      	cmp	r4, #0
 8001abc:	da02      	bge.n	8001ac4 <WDTCheckReset+0x1c>
 8001abe:	4815      	ldr	r0, [pc, #84]	; (8001b14 <WDTCheckReset+0x6c>)
 8001ac0:	f002 f948 	bl	8003d54 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8001ac4:	0062      	lsls	r2, r4, #1
 8001ac6:	d502      	bpl.n	8001ace <WDTCheckReset+0x26>
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <WDTCheckReset+0x70>)
 8001aca:	f002 f943 	bl	8003d54 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 8001ace:	00a3      	lsls	r3, r4, #2
 8001ad0:	d502      	bpl.n	8001ad8 <WDTCheckReset+0x30>
 8001ad2:	4812      	ldr	r0, [pc, #72]	; (8001b1c <WDTCheckReset+0x74>)
 8001ad4:	f002 f93e 	bl	8003d54 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8001ad8:	00e0      	lsls	r0, r4, #3
 8001ada:	d502      	bpl.n	8001ae2 <WDTCheckReset+0x3a>
 8001adc:	4810      	ldr	r0, [pc, #64]	; (8001b20 <WDTCheckReset+0x78>)
 8001ade:	f002 f939 	bl	8003d54 <puts>
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8001ae2:	01a1      	lsls	r1, r4, #6
 8001ae4:	d502      	bpl.n	8001aec <WDTCheckReset+0x44>
 8001ae6:	480f      	ldr	r0, [pc, #60]	; (8001b24 <WDTCheckReset+0x7c>)
 8001ae8:	f002 f934 	bl	8003d54 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8001aec:	0162      	lsls	r2, r4, #5
 8001aee:	d502      	bpl.n	8001af6 <WDTCheckReset+0x4e>
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <WDTCheckReset+0x80>)
 8001af2:	f002 f92f 	bl	8003d54 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8001af6:	0123      	lsls	r3, r4, #4
 8001af8:	d502      	bpl.n	8001b00 <WDTCheckReset+0x58>
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <WDTCheckReset+0x84>)
 8001afc:	f002 f92a 	bl	8003d54 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <WDTCheckReset+0x64>)
 8001b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b06:	675a      	str	r2, [r3, #116]	; 0x74

}
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08011d90 	.word	0x08011d90
 8001b14:	08011dc8 	.word	0x08011dc8
 8001b18:	08011dd3 	.word	0x08011dd3
 8001b1c:	08011de6 	.word	0x08011de6
 8001b20:	08011e05 	.word	0x08011e05
 8001b24:	08011e0f 	.word	0x08011e0f
 8001b28:	08011e19 	.word	0x08011e19
 8001b2c:	08011e23 	.word	0x08011e23

08001b30 <WDTFeed>:

/* Feed the watchdog */
void WDTFeed(void)
{
#if defined(HAL_IWDG_MODULE_ENABLED)
  HAL_IWDG_Refresh(&hiwdg); /* Feed it */
 8001b30:	4801      	ldr	r0, [pc, #4]	; (8001b38 <WDTFeed+0x8>)
 8001b32:	f001 b9a0 	b.w	8002e76 <HAL_IWDG_Refresh>
 8001b36:	bf00      	nop
 8001b38:	20000cf0 	.word	0x20000cf0

08001b3c <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b938      	cbnz	r0, 8001b52 <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 8001b42:	480b      	ldr	r0, [pc, #44]	; (8001b70 <CmdTasks+0x34>)
  p = _tasktable_start;
 8001b44:	4d0b      	ldr	r5, [pc, #44]	; (8001b74 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001b46:	4e0c      	ldr	r6, [pc, #48]	; (8001b78 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001b48:	4f0c      	ldr	r7, [pc, #48]	; (8001b7c <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001b4a:	f002 f903 	bl	8003d54 <puts>
  while(p != _tasktable_end) {
 8001b4e:	42b5      	cmp	r5, r6
 8001b50:	d102      	bne.n	8001b58 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 8001b52:	2000      	movs	r0, #0
 8001b54:	b003      	add	sp, #12
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001b58:	696b      	ldr	r3, [r5, #20]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	692b      	ldr	r3, [r5, #16]
 8001b60:	f855 2b18 	ldr.w	r2, [r5], #24
 8001b64:	4638      	mov	r0, r7
 8001b66:	f002 f859 	bl	8003c1c <iprintf>
    i++;
 8001b6a:	3401      	adds	r4, #1
 8001b6c:	e7ef      	b.n	8001b4e <CmdTasks+0x12>
 8001b6e:	bf00      	nop
 8001b70:	08011e2d 	.word	0x08011e2d
 8001b74:	080129a0 	.word	0x080129a0
 8001b78:	080129b8 	.word	0x080129b8
 8001b7c:	08011e46 	.word	0x08011e46

08001b80 <TaskingInit>:
{
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	4d07      	ldr	r5, [pc, #28]	; (8001ba0 <TaskingInit+0x20>)
  p = _tasktable_start;
 8001b84:	4c07      	ldr	r4, [pc, #28]	; (8001ba4 <TaskingInit+0x24>)
  while(p != _tasktable_end) {
 8001b86:	4e08      	ldr	r6, [pc, #32]	; (8001ba8 <TaskingInit+0x28>)
    s->interval = 0;    /* Expire all task intervals */
 8001b88:	2700      	movs	r7, #0
  while(p != _tasktable_end) {
 8001b8a:	42b4      	cmp	r4, r6
 8001b8c:	d100      	bne.n	8001b90 <TaskingInit+0x10>
}
 8001b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->initFunc != NULL) {
 8001b90:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8001b92:	f845 7b04 	str.w	r7, [r5], #4
    if(p->initFunc != NULL) {
 8001b96:	b10b      	cbz	r3, 8001b9c <TaskingInit+0x1c>
      p->initFunc(p->data);
 8001b98:	68e0      	ldr	r0, [r4, #12]
 8001b9a:	4798      	blx	r3
    p++;
 8001b9c:	3418      	adds	r4, #24
    s++;
 8001b9e:	e7f4      	b.n	8001b8a <TaskingInit+0xa>
 8001ba0:	20000380 	.word	0x20000380
 8001ba4:	080129a0 	.word	0x080129a0
 8001ba8:	080129b8 	.word	0x080129b8

08001bac <TaskingTickHandler>:
  AccumTicks++;
 8001bac:	4a02      	ldr	r2, [pc, #8]	; (8001bb8 <TaskingTickHandler+0xc>)
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000cd8 	.word	0x20000cd8

08001bbc <TaskingRun>:
{
 8001bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
  ticks = AccumTicks;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <TaskingRun+0x58>)
  AccumTicks = 0;
 8001bc4:	2200      	movs	r2, #0
  ticks = AccumTicks;
 8001bc6:	681f      	ldr	r7, [r3, #0]
  AccumTicks = 0;
 8001bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bca:	b662      	cpsie	i
  s = _taskstate_start;
 8001bcc:	4d12      	ldr	r5, [pc, #72]	; (8001c18 <TaskingRun+0x5c>)
  p = _tasktable_start;
 8001bce:	4c13      	ldr	r4, [pc, #76]	; (8001c1c <TaskingRun+0x60>)
  while(p != _tasktable_end) {
 8001bd0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001c20 <TaskingRun+0x64>
 8001bd4:	4544      	cmp	r4, r8
 8001bd6:	d101      	bne.n	8001bdc <TaskingRun+0x20>
}
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p->func != NULL) {
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	b11b      	cbz	r3, 8001be8 <TaskingRun+0x2c>
      if(p->interval == 0) {
 8001be0:	6922      	ldr	r2, [r4, #16]
 8001be2:	b9a2      	cbnz	r2, 8001c0e <TaskingRun+0x52>
	p->func(p->data);
 8001be4:	68e0      	ldr	r0, [r4, #12]
 8001be6:	4798      	blx	r3
    p++;
 8001be8:	3418      	adds	r4, #24
    s++;
 8001bea:	3504      	adds	r5, #4
 8001bec:	e7f2      	b.n	8001bd4 <TaskingRun+0x18>
	  if(s->interval) {
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	b943      	cbnz	r3, 8001c04 <TaskingRun+0x48>
	    p->func(p->data);
 8001bf2:	6863      	ldr	r3, [r4, #4]
 8001bf4:	68e0      	ldr	r0, [r4, #12]
 8001bf6:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8001bf8:	6923      	ldr	r3, [r4, #16]
 8001bfa:	602b      	str	r3, [r5, #0]
 8001bfc:	3e01      	subs	r6, #1
	while(i--) { /* This could be better... if ticks > interval... */
 8001bfe:	2e00      	cmp	r6, #0
 8001c00:	d1f5      	bne.n	8001bee <TaskingRun+0x32>
 8001c02:	e7f1      	b.n	8001be8 <TaskingRun+0x2c>
	    s->interval--;
 8001c04:	3b01      	subs	r3, #1
 8001c06:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f7      	bne.n	8001bfc <TaskingRun+0x40>
 8001c0c:	e7f1      	b.n	8001bf2 <TaskingRun+0x36>
 8001c0e:	463e      	mov	r6, r7
 8001c10:	e7f5      	b.n	8001bfe <TaskingRun+0x42>
 8001c12:	bf00      	nop
 8001c14:	20000cd8 	.word	0x20000cd8
 8001c18:	20000380 	.word	0x20000380
 8001c1c:	080129a0 	.word	0x080129a0
 8001c20:	080129b8 	.word	0x080129b8

08001c24 <Default_IRQHandler>:
void Default_IRQHandler(void)
{
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001c26:	490e      	ldr	r1, [pc, #56]	; (8001c60 <Default_IRQHandler+0x3c>)
 8001c28:	480e      	ldr	r0, [pc, #56]	; (8001c64 <Default_IRQHandler+0x40>)
{
 8001c2a:	b510      	push	{r4, lr}
  icsr = SCB->ICSR;
 8001c2c:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001c2e:	f7ff fe7f 	bl	8001930 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8001c32:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <Default_IRQHandler+0x44>)
 8001c38:	f7ff fe7a 	bl	8001930 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8001c3c:	480b      	ldr	r0, [pc, #44]	; (8001c6c <Default_IRQHandler+0x48>)
 8001c3e:	f1a4 0110 	sub.w	r1, r4, #16
 8001c42:	f7ff fe75 	bl	8001930 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <Default_IRQHandler+0x4c>)
 8001c48:	480a      	ldr	r0, [pc, #40]	; (8001c74 <Default_IRQHandler+0x50>)
 8001c4a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001c4e:	f7ff fe6f 	bl	8001930 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <Default_IRQHandler+0x54>)
 8001c54:	f7ff fe6c 	bl	8001930 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8001c58:	e7fe      	b.n	8001c58 <Default_IRQHandler+0x34>
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	08011f64 	.word	0x08011f64
 8001c64:	08011e83 	.word	0x08011e83
 8001c68:	08011eba 	.word	0x08011eba
 8001c6c:	08011ef6 	.word	0x08011ef6
 8001c70:	20000004 	.word	0x20000004
 8001c74:	08011f1f 	.word	0x08011f1f
 8001c78:	08011f3a 	.word	0x08011f3a

08001c7c <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <Uncompress+0x74>)
{
 8001c80:	b08a      	sub	sp, #40	; 0x28
 8001c82:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001c84:	466c      	mov	r4, sp
 8001c86:	f102 0620 	add.w	r6, r2, #32
 8001c8a:	6810      	ldr	r0, [r2, #0]
 8001c8c:	6851      	ldr	r1, [r2, #4]
 8001c8e:	4625      	mov	r5, r4
 8001c90:	c503      	stmia	r5!, {r0, r1}
 8001c92:	3208      	adds	r2, #8
 8001c94:	42b2      	cmp	r2, r6
 8001c96:	462c      	mov	r4, r5
 8001c98:	d1f7      	bne.n	8001c8a <Uncompress+0xe>
 8001c9a:	6810      	ldr	r0, [r2, #0]
 8001c9c:	6028      	str	r0, [r5, #0]
 8001c9e:	8892      	ldrh	r2, [r2, #4]
 8001ca0:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	4d13      	ldr	r5, [pc, #76]	; (8001cf4 <Uncompress+0x78>)
 8001ca6:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8001caa:	2100      	movs	r1, #0
 8001cac:	ba5b      	rev16	r3, r3
 8001cae:	b29b      	uxth	r3, r3
  i = 0;
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001cb4:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8001cb8:	d103      	bne.n	8001cc2 <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <Uncompress+0x78>)
  buf[i]='\0';
 8001cbc:	5532      	strb	r2, [r6, r4]
}
 8001cbe:	b00a      	add	sp, #40	; 0x28
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8001cc2:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8001cc4:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8001cc8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001ccc:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8001cd0:	4462      	add	r2, ip
    buf[i++] = c;
 8001cd2:	3401      	adds	r4, #1
 8001cd4:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001cd8:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001cdc:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8001cde:	2a07      	cmp	r2, #7
      bits -= 8;
 8001ce0:	bf81      	itttt	hi
 8001ce2:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001ce4:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001ce8:	4091      	lslhi	r1, r2
 8001cea:	430b      	orrhi	r3, r1
 8001cec:	4611      	mov	r1, r2
 8001cee:	e7e1      	b.n	8001cb4 <Uncompress+0x38>
 8001cf0:	08011f77 	.word	0x08011f77
 8001cf4:	20000cdc 	.word	0x20000cdc

08001cf8 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001cf8:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b1f0      	cbz	r0, 8001d3c <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8001cfe:	b1f9      	cbz	r1, 8001d40 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001d00:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001d02:	888a      	ldrh	r2, [r1, #4]
 8001d04:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001d06:	2d10      	cmp	r5, #16
 8001d08:	d005      	beq.n	8001d16 <DecodeReadRegister+0x1e>
 8001d0a:	2d20      	cmp	r5, #32
 8001d0c:	d005      	beq.n	8001d1a <DecodeReadRegister+0x22>
 8001d0e:	2d08      	cmp	r5, #8
 8001d10:	d105      	bne.n	8001d1e <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8001d12:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001d16:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001d18:	e7fc      	b.n	8001d14 <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 8001d1a:	58d0      	ldr	r0, [r2, r3]
    break;
 8001d1c:	e7fa      	b.n	8001d14 <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001d1e:	6808      	ldr	r0, [r1, #0]
 8001d20:	f7ff ffac 	bl	8001c7c <Uncompress>
 8001d24:	4629      	mov	r1, r5
 8001d26:	4602      	mov	r2, r0
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <DecodeReadRegister+0x4c>)
 8001d2a:	f001 ff77 	bl	8003c1c <iprintf>
    printf(" in periphral %s!\n",
 8001d2e:	6820      	ldr	r0, [r4, #0]
 8001d30:	f7ff ffa4 	bl	8001c7c <Uncompress>
 8001d34:	4601      	mov	r1, r0
 8001d36:	4804      	ldr	r0, [pc, #16]	; (8001d48 <DecodeReadRegister+0x50>)
 8001d38:	f001 ff70 	bl	8003c1c <iprintf>
    return 0;
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e7e9      	b.n	8001d14 <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 8001d40:	4608      	mov	r0, r1
 8001d42:	e7e7      	b.n	8001d14 <DecodeReadRegister+0x1c>
 8001d44:	08011f9d 	.word	0x08011f9d
 8001d48:	08011fbf 	.word	0x08011fbf

08001d4c <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001d4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8001d4e:	4604      	mov	r4, r0
 8001d50:	b1f8      	cbz	r0, 8001d92 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8001d52:	b1f1      	cbz	r1, 8001d92 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001d54:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001d56:	8888      	ldrh	r0, [r1, #4]
 8001d58:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001d5a:	2d10      	cmp	r5, #16
 8001d5c:	d006      	beq.n	8001d6c <DecodeWriteRegister+0x20>
 8001d5e:	2d20      	cmp	r5, #32
 8001d60:	d006      	beq.n	8001d70 <DecodeWriteRegister+0x24>
 8001d62:	2d08      	cmp	r5, #8
 8001d64:	d106      	bne.n	8001d74 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8001d66:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8001d68:	2000      	movs	r0, #0
}
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001d6c:	52c2      	strh	r2, [r0, r3]
    break;  
 8001d6e:	e7fb      	b.n	8001d68 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8001d70:	50c2      	str	r2, [r0, r3]
 8001d72:	e7f9      	b.n	8001d68 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001d74:	6808      	ldr	r0, [r1, #0]
 8001d76:	f7ff ff81 	bl	8001c7c <Uncompress>
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <DecodeWriteRegister+0x4c>)
 8001d80:	f001 ff4c 	bl	8003c1c <iprintf>
    printf(" in periphral %s!\n",
 8001d84:	6820      	ldr	r0, [r4, #0]
 8001d86:	f7ff ff79 	bl	8001c7c <Uncompress>
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <DecodeWriteRegister+0x50>)
 8001d8e:	f001 ff45 	bl	8003c1c <iprintf>
  if(p == NULL) return 1;
 8001d92:	2001      	movs	r0, #1
 8001d94:	e7e9      	b.n	8001d6a <DecodeWriteRegister+0x1e>
 8001d96:	bf00      	nop
 8001d98:	08011f9d 	.word	0x08011f9d
 8001d9c:	08011fbf 	.word	0x08011fbf

08001da0 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001da0:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8001da2:	4604      	mov	r4, r0
{
 8001da4:	b087      	sub	sp, #28
  if(f == NULL) return;
 8001da6:	b1d0      	cbz	r0, 8001dde <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001da8:	7942      	ldrb	r2, [r0, #5]
 8001daa:	2301      	movs	r3, #1
 8001dac:	4093      	lsls	r3, r2
 8001dae:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001db0:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001db2:	40d1      	lsrs	r1, r2
 8001db4:	3b01      	subs	r3, #1
 8001db6:	400b      	ands	r3, r1
 8001db8:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001dba:	f7ff ff5f 	bl	8001c7c <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8001dbe:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001dc0:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <DecodeField+0x44>)
 8001dc2:	9b05      	ldr	r3, [sp, #20]
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <DecodeField+0x48>)
 8001dc8:	2d01      	cmp	r5, #1
 8001dca:	bf98      	it	ls
 8001dcc:	4602      	movls	r2, r0
 8001dce:	7920      	ldrb	r0, [r4, #4]
 8001dd0:	9500      	str	r5, [sp, #0]
 8001dd2:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <DecodeField+0x4c>)
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f001 ff1f 	bl	8003c1c <iprintf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8001dde:	b007      	add	sp, #28
 8001de0:	bd30      	pop	{r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	08011fd2 	.word	0x08011fd2
 8001de8:	08011fd8 	.word	0x08011fd8
 8001dec:	08011fde 	.word	0x08011fde

08001df0 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001df2:	460f      	mov	r7, r1
 8001df4:	4615      	mov	r5, r2
 8001df6:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001df8:	4604      	mov	r4, r0
 8001dfa:	b180      	cbz	r0, 8001e1e <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001dfc:	6800      	ldr	r0, [r0, #0]
 8001dfe:	f7ff ff3d 	bl	8001c7c <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001e02:	88a2      	ldrh	r2, [r4, #4]
 8001e04:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	79a3      	ldrb	r3, [r4, #6]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	462b      	mov	r3, r5
 8001e10:	480e      	ldr	r0, [pc, #56]	; (8001e4c <DecodeRegister+0x5c>)
 8001e12:	462a      	mov	r2, r5
 8001e14:	f001 ff02 	bl	8003c1c <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001e18:	68a7      	ldr	r7, [r4, #8]
 8001e1a:	b19f      	cbz	r7, 8001e44 <DecodeRegister+0x54>
 8001e1c:	b986      	cbnz	r6, 8001e40 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8001e1e:	b003      	add	sp, #12
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7ff ffbc 	bl	8001da0 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8001e28:	3601      	adds	r6, #1
 8001e2a:	89a3      	ldrh	r3, [r4, #12]
 8001e2c:	429e      	cmp	r6, r3
 8001e2e:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 8001e32:	d3f6      	bcc.n	8001e22 <DecodeRegister+0x32>
    printf("\n");
 8001e34:	200a      	movs	r0, #10
}
 8001e36:	b003      	add	sp, #12
 8001e38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 8001e3c:	f001 bf06 	b.w	8003c4c <putchar>
    for(i=0; i<r->numFields; i++) {
 8001e40:	2600      	movs	r6, #0
 8001e42:	e7f2      	b.n	8001e2a <DecodeRegister+0x3a>
  if(decodeFields) {
 8001e44:	2e00      	cmp	r6, #0
 8001e46:	d0ea      	beq.n	8001e1e <DecodeRegister+0x2e>
 8001e48:	e7f4      	b.n	8001e34 <DecodeRegister+0x44>
 8001e4a:	bf00      	nop
 8001e4c:	08012007 	.word	0x08012007

08001e50 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e54:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8001e56:	4604      	mov	r4, r0
 8001e58:	b160      	cbz	r0, 8001e74 <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	f7ff ff0e 	bl	8001c7c <Uncompress>
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	4601      	mov	r1, r0
 8001e64:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <DecodePeripheral+0x50>)
 8001e66:	f001 fed9 	bl	8003c1c <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001e6a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001e6e:	f1b8 0f00 	cmp.w	r8, #0
 8001e72:	d112      	bne.n	8001e9a <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001e78:	4639      	mov	r1, r7
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff ff3c 	bl	8001cf8 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001e80:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001e82:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001e84:	4633      	mov	r3, r6
 8001e86:	4638      	mov	r0, r7
 8001e88:	f7ff ffb2 	bl	8001df0 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001e8c:	3501      	adds	r5, #1
 8001e8e:	89a3      	ldrh	r3, [r4, #12]
 8001e90:	429d      	cmp	r5, r3
 8001e92:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001e96:	d3ef      	bcc.n	8001e78 <DecodePeripheral+0x28>
 8001e98:	e7ec      	b.n	8001e74 <DecodePeripheral+0x24>
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	e7f7      	b.n	8001e8e <DecodePeripheral+0x3e>
 8001e9e:	bf00      	nop
 8001ea0:	08012042 	.word	0x08012042

08001ea4 <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8001eaa:	2009      	movs	r0, #9
 8001eac:	f001 fece 	bl	8003c4c <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8001eb0:	4e0e      	ldr	r6, [pc, #56]	; (8001eec <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 8001eb2:	4f0f      	ldr	r7, [pc, #60]	; (8001ef0 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001eb4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8001ef4 <DecodePrintPeripherals+0x50>
  col = 8;
 8001eb8:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	b908      	cbnz	r0, 8001ec2 <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8001ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8001ec2:	f7ff fedb 	bl	8001c7c <Uncompress>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f001 fea7 	bl	8003c1c <iprintf>
    if((p+1)->name != NULL) {
 8001ece:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8001ed0:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 8001ed2:	b14b      	cbz	r3, 8001ee8 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 8001ed4:	4638      	mov	r0, r7
 8001ed6:	f001 fea1 	bl	8003c1c <iprintf>
 8001eda:	4405      	add	r5, r0
      if(col > 70) {
 8001edc:	2d46      	cmp	r5, #70	; 0x46
 8001ede:	d903      	bls.n	8001ee8 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8001ee0:	4640      	mov	r0, r8
 8001ee2:	f001 fe9b 	bl	8003c1c <iprintf>
	col = 8;
 8001ee6:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8001ee8:	3410      	adds	r4, #16
 8001eea:	e7e6      	b.n	8001eba <DecodePrintPeripherals+0x16>
 8001eec:	08011fbc 	.word	0x08011fbc
 8001ef0:	08011fdb 	.word	0x08011fdb
 8001ef4:	0801206a 	.word	0x0801206a

08001ef8 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001efc:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001efe:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001f00:	460d      	mov	r5, r1
  printf("\t");
 8001f02:	f001 fea3 	bl	8003c4c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001f06:	4f12      	ldr	r7, [pc, #72]	; (8001f50 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8001f08:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001f54 <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001f0c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001f58 <DecodePrintRegisters+0x60>
 8001f10:	3d01      	subs	r5, #1
 8001f12:	3610      	adds	r6, #16
  col = 8;
 8001f14:	2408      	movs	r4, #8
  while(count--) {
 8001f16:	1c6b      	adds	r3, r5, #1
 8001f18:	d101      	bne.n	8001f1e <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 8001f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001f1e:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8001f22:	f7ff feab 	bl	8001c7c <Uncompress>
 8001f26:	4601      	mov	r1, r0
 8001f28:	4638      	mov	r0, r7
 8001f2a:	f001 fe77 	bl	8003c1c <iprintf>
 8001f2e:	4420      	add	r0, r4
 8001f30:	b2c4      	uxtb	r4, r0
    if(count) {
 8001f32:	b155      	cbz	r5, 8001f4a <DecodePrintRegisters+0x52>
      col += printf(", ");
 8001f34:	4640      	mov	r0, r8
 8001f36:	f001 fe71 	bl	8003c1c <iprintf>
 8001f3a:	4420      	add	r0, r4
 8001f3c:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001f3e:	2c46      	cmp	r4, #70	; 0x46
 8001f40:	d903      	bls.n	8001f4a <DecodePrintRegisters+0x52>
	printf("\n\t");
 8001f42:	4648      	mov	r0, r9
 8001f44:	f001 fe6a 	bl	8003c1c <iprintf>
	col = 8;
 8001f48:	2408      	movs	r4, #8
    r++;
 8001f4a:	3d01      	subs	r5, #1
 8001f4c:	3610      	adds	r6, #16
 8001f4e:	e7e2      	b.n	8001f16 <DecodePrintRegisters+0x1e>
 8001f50:	08011fbc 	.word	0x08011fbc
 8001f54:	08011fdb 	.word	0x08011fdb
 8001f58:	0801206a 	.word	0x0801206a

08001f5c <CmdDecode>:
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001f5c:	2802      	cmp	r0, #2
{
 8001f5e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(mode == CMD_LONG_HELP) {
 8001f62:	d135      	bne.n	8001fd0 <CmdDecode+0x74>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8001f64:	a803      	add	r0, sp, #12
 8001f66:	f7ff fabb 	bl	80014e0 <fetch_string_arg>
    if(rc) {
 8001f6a:	b168      	cbz	r0, 8001f88 <CmdDecode+0x2c>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8001f6c:	488d      	ldr	r0, [pc, #564]	; (80021a4 <CmdDecode+0x248>)
 8001f6e:	f001 fef1 	bl	8003d54 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8001f72:	488d      	ldr	r0, [pc, #564]	; (80021a8 <CmdDecode+0x24c>)
 8001f74:	f7ff ff96 	bl	8001ea4 <DecodePrintPeripherals>
      printf("\n\n"
 8001f78:	488c      	ldr	r0, [pc, #560]	; (80021ac <CmdDecode+0x250>)
 8001f7a:	f001 feeb 	bl	8003d54 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 8001f7e:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 8001f80:	4620      	mov	r0, r4
 8001f82:	b004      	add	sp, #16
 8001f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8001f88:	4d87      	ldr	r5, [pc, #540]	; (80021a8 <CmdDecode+0x24c>)
 8001f8a:	e008      	b.n	8001f9e <CmdDecode+0x42>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001f8c:	9c03      	ldr	r4, [sp, #12]
 8001f8e:	f7ff fe75 	bl	8001c7c <Uncompress>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4620      	mov	r0, r4
 8001f96:	f001 ffab 	bl	8003ef0 <strcasecmp>
 8001f9a:	b118      	cbz	r0, 8001fa4 <CmdDecode+0x48>
	p++;
 8001f9c:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001f9e:	6828      	ldr	r0, [r5, #0]
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d1f3      	bne.n	8001f8c <CmdDecode+0x30>
      if(p->name == NULL) {
 8001fa4:	682c      	ldr	r4, [r5, #0]
 8001fa6:	b93c      	cbnz	r4, 8001fb8 <CmdDecode+0x5c>
	printf("%s is not a valid peripheral name\n"
 8001fa8:	9903      	ldr	r1, [sp, #12]
 8001faa:	4881      	ldr	r0, [pc, #516]	; (80021b0 <CmdDecode+0x254>)
 8001fac:	f001 fe36 	bl	8003c1c <iprintf>
	DecodePrintPeripherals(Peripherals);
 8001fb0:	487d      	ldr	r0, [pc, #500]	; (80021a8 <CmdDecode+0x24c>)
 8001fb2:	f7ff ff77 	bl	8001ea4 <DecodePrintPeripherals>
	return CmdReturnOk;
 8001fb6:	e7e3      	b.n	8001f80 <CmdDecode+0x24>
      printf("Valid registers for peripheral %s:\n"
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff fe5f 	bl	8001c7c <Uncompress>
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	487c      	ldr	r0, [pc, #496]	; (80021b4 <CmdDecode+0x258>)
 8001fc2:	f001 fe2b 	bl	8003c1c <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8001fc6:	89a9      	ldrh	r1, [r5, #12]
 8001fc8:	68a8      	ldr	r0, [r5, #8]
 8001fca:	f7ff ff95 	bl	8001ef8 <DecodePrintRegisters>
    printf("\n\n");
 8001fce:	e009      	b.n	8001fe4 <CmdDecode+0x88>
  rc = fetch_string_arg(&pname);
 8001fd0:	4668      	mov	r0, sp
 8001fd2:	f7ff fa85 	bl	80014e0 <fetch_string_arg>
  if(rc) {
 8001fd6:	b180      	cbz	r0, 8001ffa <CmdDecode+0x9e>
    printf("Missing peripheral name, please chose one of:\n\n");
 8001fd8:	4877      	ldr	r0, [pc, #476]	; (80021b8 <CmdDecode+0x25c>)
 8001fda:	f001 febb 	bl	8003d54 <puts>
    DecodePrintPeripherals(Peripherals);
 8001fde:	4872      	ldr	r0, [pc, #456]	; (80021a8 <CmdDecode+0x24c>)
 8001fe0:	f7ff ff60 	bl	8001ea4 <DecodePrintPeripherals>
    printf("\n\n");
 8001fe4:	4875      	ldr	r0, [pc, #468]	; (80021bc <CmdDecode+0x260>)
 8001fe6:	e7c8      	b.n	8001f7a <CmdDecode+0x1e>
    p++;
 8001fe8:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8001fea:	6828      	ldr	r0, [r5, #0]
 8001fec:	9c00      	ldr	r4, [sp, #0]
 8001fee:	b930      	cbnz	r0, 8001ffe <CmdDecode+0xa2>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8001ff0:	9900      	ldr	r1, [sp, #0]
 8001ff2:	4873      	ldr	r0, [pc, #460]	; (80021c0 <CmdDecode+0x264>)
 8001ff4:	f001 fe12 	bl	8003c1c <iprintf>
    DecodePrintPeripherals(Peripherals);
 8001ff8:	e7f1      	b.n	8001fde <CmdDecode+0x82>
  p = Peripherals;
 8001ffa:	4d6b      	ldr	r5, [pc, #428]	; (80021a8 <CmdDecode+0x24c>)
 8001ffc:	e7f5      	b.n	8001fea <CmdDecode+0x8e>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8001ffe:	f7ff fe3d 	bl	8001c7c <Uncompress>
 8002002:	4601      	mov	r1, r0
 8002004:	4620      	mov	r0, r4
 8002006:	f001 ff73 	bl	8003ef0 <strcasecmp>
 800200a:	4604      	mov	r4, r0
 800200c:	2800      	cmp	r0, #0
 800200e:	d1eb      	bne.n	8001fe8 <CmdDecode+0x8c>
  if(p->name == NULL) {
 8002010:	682b      	ldr	r3, [r5, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ec      	beq.n	8001ff0 <CmdDecode+0x94>
  rc = fetch_string_arg(&rname);
 8002016:	a801      	add	r0, sp, #4
 8002018:	f7ff fa62 	bl	80014e0 <fetch_string_arg>
  if(rc) {
 800201c:	b120      	cbz	r0, 8002028 <CmdDecode+0xcc>
    DecodePeripheral(p,0);
 800201e:	4621      	mov	r1, r4
 8002020:	4628      	mov	r0, r5
 8002022:	f7ff ff15 	bl	8001e50 <DecodePeripheral>
    return CmdReturnOk;
 8002026:	e7ab      	b.n	8001f80 <CmdDecode+0x24>
  r = p->registers;
 8002028:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 800202a:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800202c:	9c01      	ldr	r4, [sp, #4]
 800202e:	2f00      	cmp	r7, #0
 8002030:	f000 80a8 	beq.w	8002184 <CmdDecode+0x228>
 8002034:	6830      	ldr	r0, [r6, #0]
 8002036:	f7ff fe21 	bl	8001c7c <Uncompress>
 800203a:	4601      	mov	r1, r0
 800203c:	4620      	mov	r0, r4
 800203e:	f001 ff57 	bl	8003ef0 <strcasecmp>
 8002042:	3f01      	subs	r7, #1
 8002044:	4604      	mov	r4, r0
 8002046:	b958      	cbnz	r0, 8002060 <CmdDecode+0x104>
  rc = fetch_string_arg(&fname);
 8002048:	a802      	add	r0, sp, #8
 800204a:	f7ff fa49 	bl	80014e0 <fetch_string_arg>
  if(rc == 0) {
 800204e:	b170      	cbz	r0, 800206e <CmdDecode+0x112>
  val = DecodeReadRegister(p,r);
 8002050:	4631      	mov	r1, r6
 8002052:	4628      	mov	r0, r5
 8002054:	f7ff fe50 	bl	8001cf8 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002058:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 800205a:	4602      	mov	r2, r0
 800205c:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 800205e:	e017      	b.n	8002090 <CmdDecode+0x134>
    r++;
 8002060:	3610      	adds	r6, #16
 8002062:	e7e3      	b.n	800202c <CmdDecode+0xd0>
      DecodePeripheral(p,1);
 8002064:	2101      	movs	r1, #1
 8002066:	4628      	mov	r0, r5
 8002068:	f7ff fef2 	bl	8001e50 <DecodePeripheral>
      return CmdReturnOk;
 800206c:	e787      	b.n	8001f7e <CmdDecode+0x22>
    if(strcasecmp(fname,"val") == 0) {
 800206e:	4955      	ldr	r1, [pc, #340]	; (80021c4 <CmdDecode+0x268>)
 8002070:	9802      	ldr	r0, [sp, #8]
 8002072:	f001 ff3d 	bl	8003ef0 <strcasecmp>
 8002076:	b980      	cbnz	r0, 800209a <CmdDecode+0x13e>
      rc = fetch_uint32_arg(&val);
 8002078:	a803      	add	r0, sp, #12
 800207a:	f7ff fa13 	bl	80014a4 <fetch_uint32_arg>
      if(rc) {
 800207e:	4604      	mov	r4, r0
 8002080:	b120      	cbz	r0, 800208c <CmdDecode+0x130>
	printf("Missing value to use in decode\n");
 8002082:	4851      	ldr	r0, [pc, #324]	; (80021c8 <CmdDecode+0x26c>)
 8002084:	f001 fe66 	bl	8003d54 <puts>
	return CmdReturnBadParameter4;
 8002088:	2407      	movs	r4, #7
 800208a:	e779      	b.n	8001f80 <CmdDecode+0x24>
      DecodeRegister(r,p->base,val,1);
 800208c:	9a03      	ldr	r2, [sp, #12]
 800208e:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8002090:	6869      	ldr	r1, [r5, #4]
 8002092:	4630      	mov	r0, r6
 8002094:	f7ff feac 	bl	8001df0 <DecodeRegister>
  return CmdReturnOk;
 8002098:	e772      	b.n	8001f80 <CmdDecode+0x24>
    f = r->fields;
 800209a:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 800209c:	b15f      	cbz	r7, 80020b6 <CmdDecode+0x15a>
	  && (f->name != NULL)
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	b148      	cbz	r0, 80020b6 <CmdDecode+0x15a>
	  && strcasecmp(fname,Uncompress(f->name))) {
 80020a2:	9c02      	ldr	r4, [sp, #8]
 80020a4:	f7ff fdea 	bl	8001c7c <Uncompress>
 80020a8:	4601      	mov	r1, r0
 80020aa:	4620      	mov	r0, r4
 80020ac:	f001 ff20 	bl	8003ef0 <strcasecmp>
 80020b0:	b998      	cbnz	r0, 80020da <CmdDecode+0x17e>
    if((f != NULL) && f->name != NULL) {
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b99b      	cbnz	r3, 80020de <CmdDecode+0x182>
    errno = 0;
 80020b6:	f001 f915 	bl	80032e4 <__errno>
 80020ba:	2700      	movs	r7, #0
 80020bc:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 80020be:	463a      	mov	r2, r7
 80020c0:	4639      	mov	r1, r7
 80020c2:	9802      	ldr	r0, [sp, #8]
 80020c4:	f002 f804 	bl	80040d0 <strtoul>
 80020c8:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 80020ca:	f001 f90b 	bl	80032e4 <__errno>
 80020ce:	6804      	ldr	r4, [r0, #0]
 80020d0:	2c00      	cmp	r4, #0
 80020d2:	d042      	beq.n	800215a <CmdDecode+0x1fe>
      printf("Invalid number '%s' entered.\n",
 80020d4:	9902      	ldr	r1, [sp, #8]
 80020d6:	483d      	ldr	r0, [pc, #244]	; (80021cc <CmdDecode+0x270>)
 80020d8:	e00b      	b.n	80020f2 <CmdDecode+0x196>
      f++;
 80020da:	3708      	adds	r7, #8
 80020dc:	e7de      	b.n	800209c <CmdDecode+0x140>
      rc = fetch_uint32_arg(&val);
 80020de:	a803      	add	r0, sp, #12
 80020e0:	f7ff f9e0 	bl	80014a4 <fetch_uint32_arg>
      if(rc) {
 80020e4:	4604      	mov	r4, r0
 80020e6:	b138      	cbz	r0, 80020f8 <CmdDecode+0x19c>
	printf("Missing Value to program into register %s\n",
 80020e8:	6830      	ldr	r0, [r6, #0]
 80020ea:	f7ff fdc7 	bl	8001c7c <Uncompress>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4837      	ldr	r0, [pc, #220]	; (80021d0 <CmdDecode+0x274>)
      printf("Invalid number '%s' entered.\n",
 80020f2:	f001 fd93 	bl	8003c1c <iprintf>
      return CmdReturnOk;
 80020f6:	e742      	b.n	8001f7e <CmdDecode+0x22>
      t = DecodeReadRegister(p,r);
 80020f8:	4631      	mov	r1, r6
 80020fa:	4628      	mov	r0, r5
 80020fc:	f7ff fdfc 	bl	8001cf8 <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002100:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 8002102:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 8002104:	2301      	movs	r3, #1
 8002106:	4093      	lsls	r3, r2
 8002108:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 800210a:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 800210e:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 8002112:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8002116:	9803      	ldr	r0, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8002118:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 800211c:	4003      	ands	r3, r0
 800211e:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002120:	431a      	orrs	r2, r3
 8002122:	4631      	mov	r1, r6
 8002124:	4628      	mov	r0, r5
 8002126:	f7ff fe11 	bl	8001d4c <DecodeWriteRegister>
      printf("%s.",
 800212a:	6828      	ldr	r0, [r5, #0]
 800212c:	f7ff fda6 	bl	8001c7c <Uncompress>
 8002130:	4601      	mov	r1, r0
 8002132:	4828      	ldr	r0, [pc, #160]	; (80021d4 <CmdDecode+0x278>)
 8002134:	f001 fd72 	bl	8003c1c <iprintf>
      printf("%s.",
 8002138:	6830      	ldr	r0, [r6, #0]
 800213a:	f7ff fd9f 	bl	8001c7c <Uncompress>
 800213e:	4601      	mov	r1, r0
 8002140:	4824      	ldr	r0, [pc, #144]	; (80021d4 <CmdDecode+0x278>)
 8002142:	f001 fd6b 	bl	8003c1c <iprintf>
      printf("%s (%d) -> (%d)\n",
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f7ff fd98 	bl	8001c7c <Uncompress>
 800214c:	9b03      	ldr	r3, [sp, #12]
 800214e:	4601      	mov	r1, r0
 8002150:	4642      	mov	r2, r8
 8002152:	4821      	ldr	r0, [pc, #132]	; (80021d8 <CmdDecode+0x27c>)
 8002154:	f001 fd62 	bl	8003c1c <iprintf>
      return CmdReturnOk;
 8002158:	e712      	b.n	8001f80 <CmdDecode+0x24>
    DecodeWriteRegister(p,r,val);
 800215a:	9a03      	ldr	r2, [sp, #12]
 800215c:	4631      	mov	r1, r6
 800215e:	4628      	mov	r0, r5
 8002160:	f7ff fdf4 	bl	8001d4c <DecodeWriteRegister>
    printf("%s.",
 8002164:	6828      	ldr	r0, [r5, #0]
 8002166:	f7ff fd89 	bl	8001c7c <Uncompress>
 800216a:	4601      	mov	r1, r0
 800216c:	4819      	ldr	r0, [pc, #100]	; (80021d4 <CmdDecode+0x278>)
 800216e:	f001 fd55 	bl	8003c1c <iprintf>
    printf("%s = 0x%08x\n",
 8002172:	6830      	ldr	r0, [r6, #0]
 8002174:	f7ff fd82 	bl	8001c7c <Uncompress>
 8002178:	9a03      	ldr	r2, [sp, #12]
 800217a:	4601      	mov	r1, r0
 800217c:	4817      	ldr	r0, [pc, #92]	; (80021dc <CmdDecode+0x280>)
 800217e:	f001 fd4d 	bl	8003c1c <iprintf>
    return CmdReturnOk;
 8002182:	e6fd      	b.n	8001f80 <CmdDecode+0x24>
    if(strcasecmp(rname,"full") == 0) {
 8002184:	4916      	ldr	r1, [pc, #88]	; (80021e0 <CmdDecode+0x284>)
 8002186:	4620      	mov	r0, r4
 8002188:	f001 feb2 	bl	8003ef0 <strcasecmp>
 800218c:	2800      	cmp	r0, #0
 800218e:	f43f af69 	beq.w	8002064 <CmdDecode+0x108>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002192:	6828      	ldr	r0, [r5, #0]
 8002194:	f7ff fd72 	bl	8001c7c <Uncompress>
 8002198:	4621      	mov	r1, r4
 800219a:	4602      	mov	r2, r0
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <CmdDecode+0x288>)
 800219e:	f001 fd3d 	bl	8003c1c <iprintf>
 80021a2:	e710      	b.n	8001fc6 <CmdDecode+0x6a>
 80021a4:	0801206d 	.word	0x0801206d
 80021a8:	0800e088 	.word	0x0800e088
 80021ac:	08012280 	.word	0x08012280
 80021b0:	080122d5 	.word	0x080122d5
 80021b4:	08012310 	.word	0x08012310
 80021b8:	08012335 	.word	0x08012335
 80021bc:	0801239e 	.word	0x0801239e
 80021c0:	08012364 	.word	0x08012364
 80021c4:	080123dd 	.word	0x080123dd
 80021c8:	080123e1 	.word	0x080123e1
 80021cc:	08012440 	.word	0x08012440
 80021d0:	08012400 	.word	0x08012400
 80021d4:	0801242b 	.word	0x0801242b
 80021d8:	0801242f 	.word	0x0801242f
 80021dc:	0801245e 	.word	0x0801245e
 80021e0:	0801246b 	.word	0x0801246b
 80021e4:	080123a0 	.word	0x080123a0

080021e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ea:	2400      	movs	r4, #0
{
 80021ec:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ee:	4621      	mov	r1, r4
 80021f0:	2214      	movs	r2, #20
 80021f2:	a803      	add	r0, sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80021f8:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fa:	f001 f89d 	bl	8003338 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b1f      	ldr	r3, [pc, #124]	; (800227c <SystemClock_Config+0x94>)
 8002200:	9401      	str	r4, [sp, #4]
 8002202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <SystemClock_Config+0x98>)
 8002216:	9402      	str	r4, [sp, #8]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002226:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002228:	2209      	movs	r2, #9
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800222a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800222c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002230:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002234:	2402      	movs	r4, #2
 8002236:	2301      	movs	r3, #1
 8002238:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800223c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002240:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002242:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002244:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002246:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800224a:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800224e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002250:	f000 f92c 	bl	80024ac <HAL_RCC_OscConfig>
 8002254:	b108      	cbz	r0, 800225a <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 8002256:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	e7fe      	b.n	8002258 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002264:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002268:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800226a:	2103      	movs	r1, #3
 800226c:	a803      	add	r0, sp, #12
 800226e:	f000 fafb 	bl	8002868 <HAL_RCC_ClockConfig>
 8002272:	b108      	cbz	r0, 8002278 <SystemClock_Config+0x90>
 8002274:	b672      	cpsid	i
  while (1)
 8002276:	e7fe      	b.n	8002276 <SystemClock_Config+0x8e>
}
 8002278:	b014      	add	sp, #80	; 0x50
 800227a:	bd10      	pop	{r4, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000

08002284 <main>:
{
 8002284:	b500      	push	{lr}
 8002286:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002288:	f000 fbce 	bl	8002a28 <HAL_Init>
  SystemClock_Config();
 800228c:	f7ff ffac 	bl	80021e8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	2214      	movs	r2, #20
 8002292:	2100      	movs	r1, #0
 8002294:	eb0d 0002 	add.w	r0, sp, r2
 8002298:	f001 f84e 	bl	8003338 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229c:	2400      	movs	r4, #0
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <main+0xec>)
 80022a0:	9401      	str	r4, [sp, #4]
 80022a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022a4:	4833      	ldr	r0, [pc, #204]	; (8002374 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	f042 0204 	orr.w	r2, r2, #4
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
 80022ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ae:	f002 0204 	and.w	r2, r2, #4
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b6:	9402      	str	r4, [sp, #8]
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80022c6:	9202      	str	r2, [sp, #8]
 80022c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	9403      	str	r4, [sp, #12]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
 80022d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d6:	f002 0201 	and.w	r2, r2, #1
 80022da:	9203      	str	r2, [sp, #12]
 80022dc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	9404      	str	r4, [sp, #16]
 80022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e2:	f042 0202 	orr.w	r2, r2, #2
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022ee:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022f2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022f6:	f000 fd91 	bl	8002e1c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002302:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002306:	481c      	ldr	r0, [pc, #112]	; (8002378 <main+0xf4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800230a:	a905      	add	r1, sp, #20
 800230c:	f000 fcbe 	bl	8002c8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	2020      	movs	r0, #32
 8002314:	e9cd 0305 	strd	r0, r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002318:	a905      	add	r1, sp, #20
 800231a:	4816      	ldr	r0, [pc, #88]	; (8002374 <main+0xf0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002320:	f000 fcb4 	bl	8002c8c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002324:	4815      	ldr	r0, [pc, #84]	; (800237c <main+0xf8>)
  huart2.Init.BaudRate = 115200;
 8002326:	f8df c060 	ldr.w	ip, [pc, #96]	; 8002388 <main+0x104>
  huart2.Init.Parity = UART_PARITY_NONE;
 800232a:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 800232c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002330:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002334:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002336:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800233e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002340:	f000 fc76 	bl	8002c30 <HAL_UART_Init>
 8002344:	b108      	cbz	r0, 800234a <main+0xc6>
 8002346:	b672      	cpsid	i
  while (1)
 8002348:	e7fe      	b.n	8002348 <main+0xc4>
  hiwdg.Instance = IWDG;
 800234a:	480d      	ldr	r0, [pc, #52]	; (8002380 <main+0xfc>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <main+0x100>)
 800234e:	2304      	movs	r3, #4
 8002350:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Reload = 4095;
 8002354:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002358:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800235a:	f000 fd64 	bl	8002e26 <HAL_IWDG_Init>
 800235e:	b108      	cbz	r0, 8002364 <main+0xe0>
 8002360:	b672      	cpsid	i
  while (1)
 8002362:	e7fe      	b.n	8002362 <main+0xde>
  my_init();
 8002364:	f7fe fdf0 	bl	8000f48 <my_init>
    my_main();
 8002368:	f7fe fdf9 	bl	8000f5e <my_main>
  while (1)
 800236c:	e7fc      	b.n	8002368 <main+0xe4>
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020800 	.word	0x40020800
 800237c:	20000cfc 	.word	0x20000cfc
 8002380:	20000cf0 	.word	0x20000cf0
 8002384:	40003000 	.word	0x40003000
 8002388:	40004400 	.word	0x40004400

0800238c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800238c:	e7fe      	b.n	800238c <NMI_Handler>

0800238e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <HardFault_Handler>

08002390 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler>

08002392 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <BusFault_Handler>

08002394 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler>

08002396 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:
 800239a:	4770      	bx	lr

0800239c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239e:	f000 fb5d 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 80023a2:	f7fd ff27 	bl	80001f4 <my_Tick>
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80023a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TaskingTickHandler();
 80023aa:	f7ff bbff 	b.w	8001bac <TaskingTickHandler>
	...

080023b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_MspInit+0x38>)
 80023b4:	2100      	movs	r1, #0
 80023b6:	9100      	str	r1, [sp, #0]
 80023b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023be:	645a      	str	r2, [r3, #68]	; 0x44
 80023c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023c6:	9200      	str	r2, [sp, #0]
 80023c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	9101      	str	r1, [sp, #4]
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023de:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023e2:	f000 bb61 	b.w	8002aa8 <HAL_NVIC_SetPriorityGrouping>
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80023ec:	6802      	ldr	r2, [r0, #0]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_TIM_Base_MspInit+0x28>)
 80023f0:	429a      	cmp	r2, r3
{
 80023f2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM11)
 80023f4:	d10b      	bne.n	800240e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_TIM_Base_MspInit+0x2c>)
 80023fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800240e:	b002      	add	sp, #8
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40014800 	.word	0x40014800
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800241c:	b510      	push	{r4, lr}
 800241e:	4604      	mov	r4, r0
 8002420:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	2214      	movs	r2, #20
 8002424:	2100      	movs	r1, #0
 8002426:	a803      	add	r0, sp, #12
 8002428:	f000 ff86 	bl	8003338 <memset>
  if(huart->Instance==USART2)
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x74>)
 8002430:	429a      	cmp	r2, r3
 8002432:	d12a      	bne.n	800248a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002434:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002438:	2400      	movs	r4, #0
 800243a:	9401      	str	r4, [sp, #4]
 800243c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	4815      	ldr	r0, [pc, #84]	; (8002494 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002440:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
 8002446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002448:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800244c:	9201      	str	r2, [sp, #4]
 800244e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	9402      	str	r4, [sp, #8]
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002464:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246c:	2103      	movs	r1, #3
 800246e:	2307      	movs	r3, #7
 8002470:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	a903      	add	r1, sp, #12
 8002476:	f000 fc09 	bl	8002c8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800247a:	2026      	movs	r0, #38	; 0x26
 800247c:	4622      	mov	r2, r4
 800247e:	4621      	mov	r1, r4
 8002480:	f000 fb24 	bl	8002acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002484:	2026      	movs	r0, #38	; 0x26
 8002486:	f000 fb53 	bl	8002b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800248a:	b008      	add	sp, #32
 800248c:	bd10      	pop	{r4, pc}
 800248e:	bf00      	nop
 8002490:	40004400 	.word	0x40004400
 8002494:	40020000 	.word	0x40020000

08002498 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <SystemInit+0x10>)
 800249a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800249e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b0:	4604      	mov	r4, r0
 80024b2:	b340      	cbz	r0, 8002506 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b4:	6803      	ldr	r3, [r0, #0]
 80024b6:	07dd      	lsls	r5, r3, #31
 80024b8:	d410      	bmi.n	80024dc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	0798      	lsls	r0, r3, #30
 80024be:	d45e      	bmi.n	800257e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	071a      	lsls	r2, r3, #28
 80024c4:	f100 80a0 	bmi.w	8002608 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	075b      	lsls	r3, r3, #29
 80024cc:	f100 80c0 	bmi.w	8002650 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d0:	69a0      	ldr	r0, [r4, #24]
 80024d2:	2800      	cmp	r0, #0
 80024d4:	f040 8128 	bne.w	8002728 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	e02b      	b.n	8002534 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024dc:	4b8f      	ldr	r3, [pc, #572]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	f002 020c 	and.w	r2, r2, #12
 80024e4:	2a04      	cmp	r2, #4
 80024e6:	d007      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	2a08      	cmp	r2, #8
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	0251      	lsls	r1, r2, #9
 80024f6:	d508      	bpl.n	800250a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	039a      	lsls	r2, r3, #14
 80024fe:	d5dc      	bpl.n	80024ba <HAL_RCC_OscConfig+0xe>
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1d9      	bne.n	80024ba <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002506:	2001      	movs	r0, #1
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	6862      	ldr	r2, [r4, #4]
 800250c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002510:	d113      	bne.n	800253a <HAL_RCC_OscConfig+0x8e>
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002518:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800251a:	f000 faab 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4e7f      	ldr	r6, [pc, #508]	; (800271c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002520:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	6833      	ldr	r3, [r6, #0]
 8002524:	039b      	lsls	r3, r3, #14
 8002526:	d4c8      	bmi.n	80024ba <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f000 faa4 	bl	8002a74 <HAL_GetTick>
 800252c:	1b40      	subs	r0, r0, r5
 800252e:	2864      	cmp	r0, #100	; 0x64
 8002530:	d9f7      	bls.n	8002522 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
}
 8002534:	b002      	add	sp, #8
 8002536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	4d78      	ldr	r5, [pc, #480]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800253c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002540:	682b      	ldr	r3, [r5, #0]
 8002542:	d107      	bne.n	8002554 <HAL_RCC_OscConfig+0xa8>
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	602b      	str	r3, [r5, #0]
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002552:	e7e2      	b.n	800251a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	602b      	str	r3, [r5, #0]
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002560:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002562:	2a00      	cmp	r2, #0
 8002564:	d1d9      	bne.n	800251a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002566:	f000 fa85 	bl	8002a74 <HAL_GetTick>
 800256a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	039f      	lsls	r7, r3, #14
 8002570:	d5a3      	bpl.n	80024ba <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002572:	f000 fa7f 	bl	8002a74 <HAL_GetTick>
 8002576:	1b80      	subs	r0, r0, r6
 8002578:	2864      	cmp	r0, #100	; 0x64
 800257a:	d9f7      	bls.n	800256c <HAL_RCC_OscConfig+0xc0>
 800257c:	e7d9      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	f012 0f0c 	tst.w	r2, #12
 8002586:	d007      	beq.n	8002598 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258e:	2a08      	cmp	r2, #8
 8002590:	d111      	bne.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	025e      	lsls	r6, r3, #9
 8002596:	d40e      	bmi.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002598:	4a60      	ldr	r2, [pc, #384]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	079d      	lsls	r5, r3, #30
 800259e:	d502      	bpl.n	80025a6 <HAL_RCC_OscConfig+0xfa>
 80025a0:	68e3      	ldr	r3, [r4, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d1af      	bne.n	8002506 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	6921      	ldr	r1, [r4, #16]
 80025aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025b2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b4:	e784      	b.n	80024c0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b6:	68e2      	ldr	r2, [r4, #12]
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80025ba:	b1b2      	cbz	r2, 80025ea <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025c0:	f000 fa58 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4d55      	ldr	r5, [pc, #340]	; (800271c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80025c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	0798      	lsls	r0, r3, #30
 80025cc:	d507      	bpl.n	80025de <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	682b      	ldr	r3, [r5, #0]
 80025d0:	6922      	ldr	r2, [r4, #16]
 80025d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025da:	602b      	str	r3, [r5, #0]
 80025dc:	e770      	b.n	80024c0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025de:	f000 fa49 	bl	8002a74 <HAL_GetTick>
 80025e2:	1b80      	subs	r0, r0, r6
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d9ef      	bls.n	80025c8 <HAL_RCC_OscConfig+0x11c>
 80025e8:	e7a3      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80025ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025ec:	f000 fa42 	bl	8002a74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f0:	4e4a      	ldr	r6, [pc, #296]	; (800271c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80025f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f4:	6833      	ldr	r3, [r6, #0]
 80025f6:	0799      	lsls	r1, r3, #30
 80025f8:	f57f af62 	bpl.w	80024c0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fc:	f000 fa3a 	bl	8002a74 <HAL_GetTick>
 8002600:	1b40      	subs	r0, r0, r5
 8002602:	2802      	cmp	r0, #2
 8002604:	d9f6      	bls.n	80025f4 <HAL_RCC_OscConfig+0x148>
 8002606:	e794      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002608:	6962      	ldr	r2, [r4, #20]
 800260a:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 800260c:	b182      	cbz	r2, 8002630 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800260e:	2201      	movs	r2, #1
 8002610:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002614:	f000 fa2e 	bl	8002a74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002618:	4e40      	ldr	r6, [pc, #256]	; (800271c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800261a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800261e:	079f      	lsls	r7, r3, #30
 8002620:	f53f af52 	bmi.w	80024c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f000 fa26 	bl	8002a74 <HAL_GetTick>
 8002628:	1b40      	subs	r0, r0, r5
 800262a:	2802      	cmp	r0, #2
 800262c:	d9f6      	bls.n	800261c <HAL_RCC_OscConfig+0x170>
 800262e:	e780      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002630:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002634:	f000 fa1e 	bl	8002a74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4e38      	ldr	r6, [pc, #224]	; (800271c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800263a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800263e:	0798      	lsls	r0, r3, #30
 8002640:	f57f af42 	bpl.w	80024c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002644:	f000 fa16 	bl	8002a74 <HAL_GetTick>
 8002648:	1b40      	subs	r0, r0, r5
 800264a:	2802      	cmp	r0, #2
 800264c:	d9f6      	bls.n	800263c <HAL_RCC_OscConfig+0x190>
 800264e:	e770      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002654:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002658:	d128      	bne.n	80026ac <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800266e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4d2c      	ldr	r5, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x278>)
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	05d9      	lsls	r1, r3, #23
 8002676:	d51b      	bpl.n	80026b0 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	68a3      	ldr	r3, [r4, #8]
 800267a:	4d28      	ldr	r5, [pc, #160]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800267c:	2b01      	cmp	r3, #1
 800267e:	d127      	bne.n	80026d0 <HAL_RCC_OscConfig+0x224>
 8002680:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002688:	f000 f9f4 	bl	8002a74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	4e23      	ldr	r6, [pc, #140]	; (800271c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800268e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002696:	079b      	lsls	r3, r3, #30
 8002698:	d539      	bpl.n	800270e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800269a:	2f00      	cmp	r7, #0
 800269c:	f43f af18 	beq.w	80024d0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	e711      	b.n	80024d0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80026ac:	2700      	movs	r7, #0
 80026ae:	e7df      	b.n	8002670 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80026b8:	f000 f9dc 	bl	8002a74 <HAL_GetTick>
 80026bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	682b      	ldr	r3, [r5, #0]
 80026c0:	05da      	lsls	r2, r3, #23
 80026c2:	d4d9      	bmi.n	8002678 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c4:	f000 f9d6 	bl	8002a74 <HAL_GetTick>
 80026c8:	1b80      	subs	r0, r0, r6
 80026ca:	2802      	cmp	r0, #2
 80026cc:	d9f7      	bls.n	80026be <HAL_RCC_OscConfig+0x212>
 80026ce:	e730      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d104      	bne.n	80026de <HAL_RCC_OscConfig+0x232>
 80026d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	672b      	str	r3, [r5, #112]	; 0x70
 80026dc:	e7d0      	b.n	8002680 <HAL_RCC_OscConfig+0x1d4>
 80026de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	672a      	str	r2, [r5, #112]	; 0x70
 80026e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80026e8:	f022 0204 	bic.w	r2, r2, #4
 80026ec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ca      	bne.n	8002688 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80026f2:	f000 f9bf 	bl	8002a74 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80026fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026fe:	0798      	lsls	r0, r3, #30
 8002700:	d5cb      	bpl.n	800269a <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f000 f9b7 	bl	8002a74 <HAL_GetTick>
 8002706:	1b80      	subs	r0, r0, r6
 8002708:	4540      	cmp	r0, r8
 800270a:	d9f7      	bls.n	80026fc <HAL_RCC_OscConfig+0x250>
 800270c:	e711      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f000 f9b1 	bl	8002a74 <HAL_GetTick>
 8002712:	1b40      	subs	r0, r0, r5
 8002714:	4540      	cmp	r0, r8
 8002716:	d9bd      	bls.n	8002694 <HAL_RCC_OscConfig+0x1e8>
 8002718:	e70b      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	42470000 	.word	0x42470000
 8002724:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002728:	4d36      	ldr	r5, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x358>)
 800272a:	68ab      	ldr	r3, [r5, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d03d      	beq.n	80027b0 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_OscConfig+0x35c>)
 8002736:	2200      	movs	r2, #0
 8002738:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800273a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	d12b      	bne.n	8002796 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800273e:	f000 f999 	bl	8002a74 <HAL_GetTick>
 8002742:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	0199      	lsls	r1, r3, #6
 8002748:	d41f      	bmi.n	800278a <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800274e:	4313      	orrs	r3, r2
 8002750:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002752:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002756:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800275c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002766:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4d26      	ldr	r5, [pc, #152]	; (8002804 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 800276c:	2201      	movs	r2, #1
 800276e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002770:	f000 f980 	bl	8002a74 <HAL_GetTick>
 8002774:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	019a      	lsls	r2, r3, #6
 800277a:	f53f aead 	bmi.w	80024d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f000 f979 	bl	8002a74 <HAL_GetTick>
 8002782:	1b00      	subs	r0, r0, r4
 8002784:	2802      	cmp	r0, #2
 8002786:	d9f6      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ca>
 8002788:	e6d3      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278a:	f000 f973 	bl	8002a74 <HAL_GetTick>
 800278e:	1b80      	subs	r0, r0, r6
 8002790:	2802      	cmp	r0, #2
 8002792:	d9d7      	bls.n	8002744 <HAL_RCC_OscConfig+0x298>
 8002794:	e6cd      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002796:	f000 f96d 	bl	8002a74 <HAL_GetTick>
 800279a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	f57f ae9a 	bpl.w	80024d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f000 f966 	bl	8002a74 <HAL_GetTick>
 80027a8:	1b00      	subs	r0, r0, r4
 80027aa:	2802      	cmp	r0, #2
 80027ac:	d9f6      	bls.n	800279c <HAL_RCC_OscConfig+0x2f0>
 80027ae:	e6c0      	b.n	8002532 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	2801      	cmp	r0, #1
 80027b2:	f43f aebf 	beq.w	8002534 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80027b6:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b8:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	4291      	cmp	r1, r2
 80027c0:	f47f aea1 	bne.w	8002506 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	428a      	cmp	r2, r1
 80027cc:	f47f ae9b 	bne.w	8002506 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80027d6:	401a      	ands	r2, r3
 80027d8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80027dc:	f47f ae93 	bne.w	8002506 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027e2:	0852      	lsrs	r2, r2, #1
 80027e4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80027e8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ea:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80027ee:	f47f ae8a 	bne.w	8002506 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80027fc:	f43f ae6c 	beq.w	80024d8 <HAL_RCC_OscConfig+0x2c>
 8002800:	e681      	b.n	8002506 <HAL_RCC_OscConfig+0x5a>
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000

0800280c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280c:	4913      	ldr	r1, [pc, #76]	; (800285c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800280e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002810:	688b      	ldr	r3, [r1, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d01c      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x48>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002820:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002822:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002824:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002828:	bf14      	ite	ne
 800282a:	480d      	ldrne	r0, [pc, #52]	; (8002860 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282c:	480d      	ldreq	r0, [pc, #52]	; (8002864 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002832:	bf18      	it	ne
 8002834:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002836:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	fba1 0100 	umull	r0, r1, r1, r0
 800283e:	f7fd fce9 	bl	8000214 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetSysClockFreq+0x50>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800284e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002852:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <HAL_RCC_GetSysClockFreq+0x54>)
 8002856:	e7fc      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002858:	4802      	ldr	r0, [pc, #8]	; (8002864 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800285a:	e7fa      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x46>
 800285c:	40023800 	.word	0x40023800
 8002860:	007a1200 	.word	0x007a1200
 8002864:	00f42400 	.word	0x00f42400

08002868 <HAL_RCC_ClockConfig>:
{
 8002868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800286c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800286e:	4604      	mov	r4, r0
 8002870:	b910      	cbnz	r0, 8002878 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002872:	2001      	movs	r0, #1
}
 8002874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b44      	ldr	r3, [pc, #272]	; (800298c <HAL_RCC_ClockConfig+0x124>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f002 0207 	and.w	r2, r2, #7
 8002880:	428a      	cmp	r2, r1
 8002882:	d328      	bcc.n	80028d6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	0797      	lsls	r7, r2, #30
 8002888:	d42d      	bmi.n	80028e6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	07d0      	lsls	r0, r2, #31
 800288c:	d441      	bmi.n	8002912 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x124>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f002 0207 	and.w	r2, r2, #7
 8002896:	42aa      	cmp	r2, r5
 8002898:	d866      	bhi.n	8002968 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289a:	6822      	ldr	r2, [r4, #0]
 800289c:	0751      	lsls	r1, r2, #29
 800289e:	d46c      	bmi.n	800297a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	0713      	lsls	r3, r2, #28
 80028a2:	d507      	bpl.n	80028b4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a4:	4a3a      	ldr	r2, [pc, #232]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 80028a6:	6921      	ldr	r1, [r4, #16]
 80028a8:	6893      	ldr	r3, [r2, #8]
 80028aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b4:	f7ff ffaa 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 80028ba:	4a36      	ldr	r2, [pc, #216]	; (8002994 <HAL_RCC_ClockConfig+0x12c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	40d8      	lsrs	r0, r3
 80028c6:	4b34      	ldr	r3, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x130>)
 80028c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_ClockConfig+0x134>)
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f000 f887 	bl	80029e0 <HAL_InitTick>
  return HAL_OK;
 80028d2:	2000      	movs	r0, #0
 80028d4:	e7ce      	b.n	8002874 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	428b      	cmp	r3, r1
 80028e2:	d1c6      	bne.n	8002872 <HAL_RCC_ClockConfig+0xa>
 80028e4:	e7ce      	b.n	8002884 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 80028e8:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	bf1e      	ittt	ne
 80028ee:	6899      	ldrne	r1, [r3, #8]
 80028f0:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80028f4:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	bf42      	ittt	mi
 80028fa:	6899      	ldrmi	r1, [r3, #8]
 80028fc:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002900:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002902:	4923      	ldr	r1, [pc, #140]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 8002904:	68a0      	ldr	r0, [r4, #8]
 8002906:	688b      	ldr	r3, [r1, #8]
 8002908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290c:	4303      	orrs	r3, r0
 800290e:	608b      	str	r3, [r1, #8]
 8002910:	e7bb      	b.n	800288a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	6862      	ldr	r2, [r4, #4]
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 8002916:	2a01      	cmp	r2, #1
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	d0a7      	beq.n	8002872 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4e1b      	ldr	r6, [pc, #108]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 8002924:	68b3      	ldr	r3, [r6, #8]
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	4313      	orrs	r3, r2
 800292c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800292e:	f000 f8a1 	bl	8002a74 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002936:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002938:	68b3      	ldr	r3, [r6, #8]
 800293a:	6862      	ldr	r2, [r4, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002944:	d0a3      	beq.n	800288e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002946:	f000 f895 	bl	8002a74 <HAL_GetTick>
 800294a:	1bc0      	subs	r0, r0, r7
 800294c:	4540      	cmp	r0, r8
 800294e:	d9f3      	bls.n	8002938 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002950:	2003      	movs	r0, #3
 8002952:	e78f      	b.n	8002874 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002954:	1e91      	subs	r1, r2, #2
 8002956:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	d802      	bhi.n	8002962 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002960:	e7de      	b.n	8002920 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	f013 0f02 	tst.w	r3, #2
 8002966:	e7db      	b.n	8002920 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002968:	b2ea      	uxtb	r2, r5
 800296a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	42ab      	cmp	r3, r5
 8002974:	f47f af7d 	bne.w	8002872 <HAL_RCC_ClockConfig+0xa>
 8002978:	e78f      	b.n	800289a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297a:	4905      	ldr	r1, [pc, #20]	; (8002990 <HAL_RCC_ClockConfig+0x128>)
 800297c:	68e0      	ldr	r0, [r4, #12]
 800297e:	688b      	ldr	r3, [r1, #8]
 8002980:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002984:	4303      	orrs	r3, r0
 8002986:	608b      	str	r3, [r1, #8]
 8002988:	e78a      	b.n	80028a0 <HAL_RCC_ClockConfig+0x38>
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08012491 	.word	0x08012491
 8002998:	200001a4 	.word	0x200001a4
 800299c:	200001ac 	.word	0x200001ac

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029ae:	6810      	ldr	r0, [r2, #0]
}
 80029b0:	40d8      	lsrs	r0, r3
 80029b2:	4770      	bx	lr
 80029b4:	40023800 	.word	0x40023800
 80029b8:	080124a1 	.word	0x080124a1
 80029bc:	200001a4 	.word	0x200001a4

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	4a03      	ldr	r2, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029ce:	6810      	ldr	r0, [r2, #0]
}
 80029d0:	40d8      	lsrs	r0, r3
 80029d2:	4770      	bx	lr
 80029d4:	40023800 	.word	0x40023800
 80029d8:	080124a1 	.word	0x080124a1
 80029dc:	200001a4 	.word	0x200001a4

080029e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_InitTick+0x3c>)
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_InitTick+0x40>)
{
 80029e6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e8:	7818      	ldrb	r0, [r3, #0]
 80029ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80029f2:	6810      	ldr	r0, [r2, #0]
 80029f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f8:	f000 f8a8 	bl	8002b4c <HAL_SYSTICK_Config>
 80029fc:	4604      	mov	r4, r0
 80029fe:	b958      	cbnz	r0, 8002a18 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a00:	2d0f      	cmp	r5, #15
 8002a02:	d809      	bhi.n	8002a18 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a04:	4602      	mov	r2, r0
 8002a06:	4629      	mov	r1, r5
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a0c:	f000 f85e 	bl	8002acc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_InitTick+0x44>)
 8002a12:	4620      	mov	r0, r4
 8002a14:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	e7fc      	b.n	8002a16 <HAL_InitTick+0x36>
 8002a1c:	200001a4 	.word	0x200001a4
 8002a20:	200001a8 	.word	0x200001a8
 8002a24:	200001ac 	.word	0x200001ac

08002a28 <HAL_Init>:
{
 8002a28:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_Init+0x30>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a42:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a44:	2003      	movs	r0, #3
 8002a46:	f000 f82f 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7ff ffc8 	bl	80029e0 <HAL_InitTick>
  HAL_MspInit();
 8002a50:	f7ff fcae 	bl	80023b0 <HAL_MspInit>
}
 8002a54:	2000      	movs	r0, #0
 8002a56:	bd08      	pop	{r3, pc}
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <HAL_IncTick+0x10>)
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <HAL_IncTick+0x14>)
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	440b      	add	r3, r1
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000d40 	.word	0x20000d40
 8002a70:	200001a8 	.word	0x200001a8

08002a74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a74:	4b01      	ldr	r3, [pc, #4]	; (8002a7c <HAL_GetTick+0x8>)
 8002a76:	6818      	ldr	r0, [r3, #0]
}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000d40 	.word	0x20000d40

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff fff6 	bl	8002a74 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a88:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8a:	bf1c      	itt	ne
 8002a8c:	4b05      	ldrne	r3, [pc, #20]	; (8002aa4 <HAL_Delay+0x24>)
 8002a8e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002a90:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002a92:	bf18      	it	ne
 8002a94:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a96:	f7ff ffed 	bl	8002a74 <HAL_GetTick>
 8002a9a:	1b43      	subs	r3, r0, r5
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d3fa      	bcc.n	8002a96 <HAL_Delay+0x16>
  {
  }
}
 8002aa0:	bd38      	pop	{r3, r4, r5, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200001a8 	.word	0x200001a8

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002aaa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ac4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b530      	push	{r4, r5, lr}
 8002ad0:	68dc      	ldr	r4, [r3, #12]
 8002ad2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002adc:	2d04      	cmp	r5, #4
 8002ade:	bf28      	it	cs
 8002ae0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae8:	bf8c      	ite	hi
 8002aea:	3c03      	subhi	r4, #3
 8002aec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aee:	fa03 f505 	lsl.w	r5, r3, r5
 8002af2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af6:	40a3      	lsls	r3, r4
 8002af8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002afe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	bfac      	ite	ge
 8002b06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	4a08      	ldrlt	r2, [pc, #32]	; (8002b2c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	bfb8      	it	lt
 8002b12:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	bfaa      	itet	ge
 8002b1a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b24:	bd30      	pop	{r4, r5, pc}
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	e000ed14 	.word	0xe000ed14

08002b30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b30:	2800      	cmp	r0, #0
 8002b32:	db08      	blt.n	8002b46 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b34:	0942      	lsrs	r2, r0, #5
 8002b36:	2301      	movs	r3, #1
 8002b38:	f000 001f 	and.w	r0, r0, #31
 8002b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8002b40:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <HAL_NVIC_EnableIRQ+0x18>)
 8002b42:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	3801      	subs	r0, #1
 8002b4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b52:	d20b      	bcs.n	8002b6c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	21f0      	movs	r1, #240	; 0xf0
 8002b5e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b62:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b64:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b66:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b68:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b6c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	6802      	ldr	r2, [r0, #0]
 8002b76:	68c1      	ldr	r1, [r0, #12]
 8002b78:	6913      	ldr	r3, [r2, #16]
 8002b7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b7e:	430b      	orrs	r3, r1
{
 8002b80:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b82:	6113      	str	r3, [r2, #16]
{
 8002b84:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b86:	6883      	ldr	r3, [r0, #8]
 8002b88:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002b8a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	6968      	ldr	r0, [r5, #20]
 8002b90:	4303      	orrs	r3, r0
 8002b92:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002b94:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002b98:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b9c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba2:	6953      	ldr	r3, [r2, #20]
 8002ba4:	69a9      	ldr	r1, [r5, #24]
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	430b      	orrs	r3, r1
 8002bac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <UART_SetConfig+0xb8>)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d003      	beq.n	8002bbc <UART_SetConfig+0x48>
 8002bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d123      	bne.n	8002c04 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff ff00 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc0:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc2:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc8:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002bcc:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	d11b      	bne.n	8002c0a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd2:	19b2      	adds	r2, r6, r6
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	415b      	adcs	r3, r3
 8002bda:	f7fd fb1b 	bl	8000214 <__aeabi_uldivmod>
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	fbb0 f5f1 	udiv	r5, r0, r1
 8002be4:	fb01 0315 	mls	r3, r1, r5, r0
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	3332      	adds	r3, #50	; 0x32
 8002bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf0:	f003 0207 	and.w	r2, r3, #7
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002bfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bfe:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c00:	60a3      	str	r3, [r4, #8]
  }
}
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff fecc 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8002c08:	e7da      	b.n	8002bc0 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c0a:	00b2      	lsls	r2, r6, #2
 8002c0c:	0fb3      	lsrs	r3, r6, #30
 8002c0e:	f7fd fb01 	bl	8000214 <__aeabi_uldivmod>
 8002c12:	2264      	movs	r2, #100	; 0x64
 8002c14:	fbb0 f1f2 	udiv	r1, r0, r2
 8002c18:	fb02 0311 	mls	r3, r2, r1, r0
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	3332      	adds	r3, #50	; 0x32
 8002c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c24:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002c28:	e7ea      	b.n	8002c00 <UART_SetConfig+0x8c>
 8002c2a:	bf00      	nop
 8002c2c:	40011000 	.word	0x40011000

08002c30 <HAL_UART_Init>:
{
 8002c30:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c32:	4604      	mov	r4, r0
 8002c34:	b340      	cbz	r0, 8002c88 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c3e:	b91b      	cbnz	r3, 8002c48 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002c44:	f7ff fbea 	bl	800241c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c48:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c4a:	2324      	movs	r3, #36	; 0x24
 8002c4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c50:	68d3      	ldr	r3, [r2, #12]
 8002c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c56:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff ff8b 	bl	8002b74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c6e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c76:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c7a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002c86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c88:	2001      	movs	r0, #1
 8002c8a:	e7fc      	b.n	8002c86 <HAL_UART_Init+0x56>

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c90:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002e18 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c94:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c98:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002c9a:	2401      	movs	r4, #1
 8002c9c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002ca2:	43ac      	bics	r4, r5
 8002ca4:	f040 80a5 	bne.w	8002df2 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca8:	684d      	ldr	r5, [r1, #4]
 8002caa:	f005 0403 	and.w	r4, r5, #3
 8002cae:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cba:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cbc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc0:	d834      	bhi.n	8002d2c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002cc2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc8:	68cf      	ldr	r7, [r1, #12]
 8002cca:	fa07 f708 	lsl.w	r7, r7, r8
 8002cce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002cd2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002cd4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cda:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002cde:	409f      	lsls	r7, r3
 8002ce0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002ce4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ce6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	688f      	ldr	r7, [r1, #8]
 8002cee:	fa07 f708 	lsl.w	r7, r7, r8
 8002cf2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002cf8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfa:	d119      	bne.n	8002d30 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002cfc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002d00:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d04:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002d08:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002d10:	f04f 0e0f 	mov.w	lr, #15
 8002d14:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002d18:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d1c:	690f      	ldr	r7, [r1, #16]
 8002d1e:	fa07 f70b 	lsl.w	r7, r7, fp
 8002d22:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002d26:	f8ca 7020 	str.w	r7, [sl, #32]
 8002d2a:	e001      	b.n	8002d30 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d2c:	2c03      	cmp	r4, #3
 8002d2e:	d1da      	bne.n	8002ce6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002d30:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d32:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d36:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d38:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d3a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002d3e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	d057      	beq.n	8002df2 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	f04f 0a00 	mov.w	sl, #0
 8002d46:	f8cd a004 	str.w	sl, [sp, #4]
 8002d4a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4e:	4c31      	ldr	r4, [pc, #196]	; (8002e14 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d50:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002d54:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002d58:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002d5c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002d60:	9601      	str	r6, [sp, #4]
 8002d62:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d64:	f023 0603 	bic.w	r6, r3, #3
 8002d68:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002d6c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d74:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d78:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002d7c:	270f      	movs	r7, #15
 8002d7e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d82:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d84:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d88:	d03a      	beq.n	8002e00 <HAL_GPIO_Init+0x174>
 8002d8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d8e:	42a0      	cmp	r0, r4
 8002d90:	d038      	beq.n	8002e04 <HAL_GPIO_Init+0x178>
 8002d92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d96:	42a0      	cmp	r0, r4
 8002d98:	d036      	beq.n	8002e08 <HAL_GPIO_Init+0x17c>
 8002d9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d9e:	42a0      	cmp	r0, r4
 8002da0:	d034      	beq.n	8002e0c <HAL_GPIO_Init+0x180>
 8002da2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002da6:	42a0      	cmp	r0, r4
 8002da8:	bf0c      	ite	eq
 8002daa:	2404      	moveq	r4, #4
 8002dac:	2407      	movne	r4, #7
 8002dae:	fa04 f40e 	lsl.w	r4, r4, lr
 8002db2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002db6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002db8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	bf54      	ite	pl
 8002dc0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002dc2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002dc6:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002dc8:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dca:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	bf54      	ite	pl
 8002dce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002dd0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002dd4:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002dda:	bf54      	ite	pl
 8002ddc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002dde:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002de2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de6:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002de8:	bf54      	ite	pl
 8002dea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002dec:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002df0:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df2:	3301      	adds	r3, #1
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	f47f af4f 	bne.w	8002c98 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002dfa:	b003      	add	sp, #12
 8002dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e00:	4654      	mov	r4, sl
 8002e02:	e7d4      	b.n	8002dae <HAL_GPIO_Init+0x122>
 8002e04:	2401      	movs	r4, #1
 8002e06:	e7d2      	b.n	8002dae <HAL_GPIO_Init+0x122>
 8002e08:	2402      	movs	r4, #2
 8002e0a:	e7d0      	b.n	8002dae <HAL_GPIO_Init+0x122>
 8002e0c:	2403      	movs	r4, #3
 8002e0e:	e7ce      	b.n	8002dae <HAL_GPIO_Init+0x122>
 8002e10:	40013c00 	.word	0x40013c00
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e1c:	b10a      	cbz	r2, 8002e22 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	6181      	str	r1, [r0, #24]
  }
}
 8002e20:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	0409      	lsls	r1, r1, #16
 8002e24:	e7fb      	b.n	8002e1e <HAL_GPIO_WritePin+0x2>

08002e26 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002e26:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002e28:	4604      	mov	r4, r0
 8002e2a:	b310      	cbz	r0, 8002e72 <HAL_IWDG_Init+0x4c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002e2c:	6803      	ldr	r3, [r0, #0]
 8002e2e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002e32:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002e34:	f245 5255 	movw	r2, #21845	; 0x5555
 8002e38:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002e3a:	6842      	ldr	r2, [r0, #4]
 8002e3c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002e3e:	6882      	ldr	r2, [r0, #8]
 8002e40:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002e42:	f7ff fe17 	bl	8002a74 <HAL_GetTick>
 8002e46:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	68d3      	ldr	r3, [r2, #12]
 8002e4c:	f013 0303 	ands.w	r3, r3, #3
 8002e50:	d104      	bne.n	8002e5c <HAL_IWDG_Init+0x36>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e52:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8002e56:	6011      	str	r1, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e58:	4618      	mov	r0, r3
}
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002e5c:	f7ff fe0a 	bl	8002a74 <HAL_GetTick>
 8002e60:	1b40      	subs	r0, r0, r5
 8002e62:	2831      	cmp	r0, #49	; 0x31
 8002e64:	d9f0      	bls.n	8002e48 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	079b      	lsls	r3, r3, #30
 8002e6c:	d0ec      	beq.n	8002e48 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 8002e6e:	2003      	movs	r0, #3
 8002e70:	e7f3      	b.n	8002e5a <HAL_IWDG_Init+0x34>
    return HAL_ERROR;
 8002e72:	2001      	movs	r0, #1
 8002e74:	e7f1      	b.n	8002e5a <HAL_IWDG_Init+0x34>

08002e76 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	4770      	bx	lr
	...

08002e84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e84:	6a03      	ldr	r3, [r0, #32]
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8c:	6a03      	ldr	r3, [r0, #32]
{
 8002e8e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e92:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e96:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002e9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e9c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002ea2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea4:	4d0a      	ldr	r5, [pc, #40]	; (8002ed0 <TIM_OC1_SetConfig+0x4c>)
 8002ea6:	42a8      	cmp	r0, r5
 8002ea8:	d10b      	bne.n	8002ec2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eaa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002eb0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eb2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ec4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ec6:	684a      	ldr	r2, [r1, #4]
 8002ec8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eca:	6203      	str	r3, [r0, #32]
}
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000

08002ed4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed4:	6a03      	ldr	r3, [r0, #32]
 8002ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eda:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002edc:	6a03      	ldr	r3, [r0, #32]
{
 8002ede:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ee6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002eea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002eee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ef2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ef6:	4d0b      	ldr	r5, [pc, #44]	; (8002f24 <TIM_OC3_SetConfig+0x50>)
 8002ef8:	42a8      	cmp	r0, r5
 8002efa:	d10d      	bne.n	8002f18 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002efc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f06:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f0a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f0e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f14:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f1a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f1c:	684a      	ldr	r2, [r1, #4]
 8002f1e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f20:	6203      	str	r3, [r0, #32]
}
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	40010000 	.word	0x40010000

08002f28 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f28:	6a03      	ldr	r3, [r0, #32]
 8002f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f2e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f30:	6a03      	ldr	r3, [r0, #32]
{
 8002f32:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f36:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f3a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f42:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f48:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4c:	4d06      	ldr	r5, [pc, #24]	; (8002f68 <TIM_OC4_SetConfig+0x40>)
 8002f4e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f50:	bf02      	ittt	eq
 8002f52:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f54:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f58:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f5e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f60:	684a      	ldr	r2, [r1, #4]
 8002f62:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f64:	6203      	str	r3, [r0, #32]
}
 8002f66:	bd30      	pop	{r4, r5, pc}
 8002f68:	40010000 	.word	0x40010000

08002f6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	4a24      	ldr	r2, [pc, #144]	; (8003000 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002f6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	4290      	cmp	r0, r2
 8002f72:	d00e      	beq.n	8002f92 <TIM_Base_SetConfig+0x26>
 8002f74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f78:	d00b      	beq.n	8002f92 <TIM_Base_SetConfig+0x26>
 8002f7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f7e:	4290      	cmp	r0, r2
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x26>
 8002f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f86:	4290      	cmp	r0, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x26>
 8002f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f8e:	4290      	cmp	r0, r2
 8002f90:	d115      	bne.n	8002fbe <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8002f92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9a:	4a19      	ldr	r2, [pc, #100]	; (8003000 <TIM_Base_SetConfig+0x94>)
 8002f9c:	4290      	cmp	r0, r2
 8002f9e:	d019      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fa4:	d016      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fa6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002faa:	4290      	cmp	r0, r2
 8002fac:	d012      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fb2:	4290      	cmp	r0, r2
 8002fb4:	d00e      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fba:	4290      	cmp	r0, r2
 8002fbc:	d00a      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fbe:	4a11      	ldr	r2, [pc, #68]	; (8003004 <TIM_Base_SetConfig+0x98>)
 8002fc0:	4290      	cmp	r0, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fc8:	4290      	cmp	r0, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0x68>
 8002fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fd0:	4290      	cmp	r0, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fdc:	694a      	ldr	r2, [r1, #20]
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002fe4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe6:	688b      	ldr	r3, [r1, #8]
 8002fe8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fea:	680b      	ldr	r3, [r1, #0]
 8002fec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <TIM_Base_SetConfig+0x94>)
 8002ff0:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff2:	bf04      	itt	eq
 8002ff4:	690b      	ldreq	r3, [r1, #16]
 8002ff6:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	6143      	str	r3, [r0, #20]
}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40014000 	.word	0x40014000

08003008 <HAL_TIM_Base_Init>:
{
 8003008:	b510      	push	{r4, lr}
  if (htim == NULL)
 800300a:	4604      	mov	r4, r0
 800300c:	b330      	cbz	r0, 800305c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003016:	b91b      	cbnz	r3, 8003020 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003018:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800301c:	f7ff f9e6 	bl	80023ec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003022:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	1d21      	adds	r1, r4, #4
 800302a:	f7ff ff9f 	bl	8002f6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302e:	2301      	movs	r3, #1
 8003030:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003034:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800303a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800303e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800304a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800304e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800305a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800305c:	2001      	movs	r0, #1
 800305e:	e7fc      	b.n	800305a <HAL_TIM_Base_Init+0x52>

08003060 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003060:	6a03      	ldr	r3, [r0, #32]
 8003062:	f023 0310 	bic.w	r3, r3, #16
 8003066:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003068:	6a03      	ldr	r3, [r0, #32]
{
 800306a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800306c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800306e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003072:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003076:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800307a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800307c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003080:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003084:	4d0b      	ldr	r5, [pc, #44]	; (80030b4 <TIM_OC2_SetConfig+0x54>)
 8003086:	42a8      	cmp	r0, r5
 8003088:	d10d      	bne.n	80030a6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800308a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800308c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003090:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003094:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003098:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800309c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030a2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80030a6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80030a8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80030aa:	684a      	ldr	r2, [r1, #4]
 80030ac:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80030ae:	6203      	str	r3, [r0, #32]
}
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000

080030b8 <HAL_TIM_PWM_ConfigChannel>:
{
 80030b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80030ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
{
 80030c0:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80030c2:	d053      	beq.n	800316c <HAL_TIM_PWM_ConfigChannel+0xb4>
 80030c4:	2001      	movs	r0, #1
  switch (Channel)
 80030c6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80030c8:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 80030cc:	d03d      	beq.n	800314a <HAL_TIM_PWM_ConfigChannel+0x92>
 80030ce:	d806      	bhi.n	80030de <HAL_TIM_PWM_ConfigChannel+0x26>
 80030d0:	b1c2      	cbz	r2, 8003104 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80030d2:	2a04      	cmp	r2, #4
 80030d4:	d028      	beq.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 80030d6:	2300      	movs	r3, #0
 80030d8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80030de:	2a0c      	cmp	r2, #12
 80030e0:	d1f9      	bne.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e2:	6828      	ldr	r0, [r5, #0]
 80030e4:	f7ff ff20 	bl	8002f28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003102:	e031      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003104:	6828      	ldr	r0, [r5, #0]
 8003106:	f7ff febd 	bl	8002e84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800310a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800310c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	f042 0208 	orr.w	r2, r2, #8
 8003114:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003116:	699a      	ldr	r2, [r3, #24]
 8003118:	f022 0204 	bic.w	r2, r2, #4
 800311c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003122:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2000      	movs	r0, #0
      break;
 8003126:	e7d6      	b.n	80030d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003128:	6828      	ldr	r0, [r5, #0]
 800312a:	f7ff ff99 	bl	8003060 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800312e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003130:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003138:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003148:	e7eb      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800314a:	6828      	ldr	r0, [r5, #0]
 800314c:	f7ff fec2 	bl	8002ed4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003150:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003152:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	f042 0208 	orr.w	r2, r2, #8
 800315a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	f022 0204 	bic.w	r2, r2, #4
 8003162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003168:	61da      	str	r2, [r3, #28]
 800316a:	e7db      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 800316c:	2002      	movs	r0, #2
 800316e:	e7b5      	b.n	80030dc <HAL_TIM_PWM_ConfigChannel+0x24>

08003170 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003170:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003172:	f001 011f 	and.w	r1, r1, #31
{
 8003176:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003178:	2401      	movs	r4, #1
 800317a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800317c:	ea23 0304 	bic.w	r3, r3, r4
 8003180:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003182:	6a03      	ldr	r3, [r0, #32]
 8003184:	408a      	lsls	r2, r1
 8003186:	431a      	orrs	r2, r3
 8003188:	6202      	str	r2, [r0, #32]
}
 800318a:	bd10      	pop	{r4, pc}

0800318c <HAL_TIM_OC_Start>:
{
 800318c:	b510      	push	{r4, lr}
 800318e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003190:	b929      	cbnz	r1, 800319e <HAL_TIM_OC_Start+0x12>
 8003192:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003196:	2b01      	cmp	r3, #1
 8003198:	d021      	beq.n	80031de <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800319a:	2001      	movs	r0, #1
}
 800319c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800319e:	2904      	cmp	r1, #4
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_OC_Start+0x26>
 80031a2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d1f7      	bne.n	800319a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031aa:	2302      	movs	r3, #2
 80031ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80031b0:	e018      	b.n	80031e4 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031b2:	2908      	cmp	r1, #8
 80031b4:	d107      	bne.n	80031c6 <HAL_TIM_OC_Start+0x3a>
 80031b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d1ed      	bne.n	800319a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031be:	2302      	movs	r3, #2
 80031c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80031c4:	e00e      	b.n	80031e4 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d1e5      	bne.n	800319a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	2904      	cmp	r1, #4
 80031d0:	d0eb      	beq.n	80031aa <HAL_TIM_OC_Start+0x1e>
 80031d2:	2908      	cmp	r1, #8
 80031d4:	d0f3      	beq.n	80031be <HAL_TIM_OC_Start+0x32>
 80031d6:	2302      	movs	r3, #2
 80031d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80031dc:	e002      	b.n	80031e4 <HAL_TIM_OC_Start+0x58>
 80031de:	2302      	movs	r3, #2
 80031e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e4:	2201      	movs	r2, #1
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	f7ff ffc2 	bl	8003170 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_TIM_OC_Start+0xac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d10a      	bne.n	800320a <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 80031f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	2a06      	cmp	r2, #6
 8003204:	d113      	bne.n	800322e <HAL_TIM_OC_Start+0xa2>
  return HAL_OK;
 8003206:	2000      	movs	r0, #0
 8003208:	e7c8      	b.n	800319c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d0f5      	beq.n	80031fc <HAL_TIM_OC_Start+0x70>
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_TIM_OC_Start+0xb0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d0f2      	beq.n	80031fc <HAL_TIM_OC_Start+0x70>
 8003216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800321a:	4293      	cmp	r3, r2
 800321c:	d0ee      	beq.n	80031fc <HAL_TIM_OC_Start+0x70>
 800321e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003222:	4293      	cmp	r3, r2
 8003224:	d0ea      	beq.n	80031fc <HAL_TIM_OC_Start+0x70>
 8003226:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800322a:	4293      	cmp	r3, r2
 800322c:	d0e6      	beq.n	80031fc <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e7e6      	b.n	8003206 <HAL_TIM_OC_Start+0x7a>
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400

08003240 <HAL_TIM_PWM_Start>:
 8003240:	f7ff bfa4 	b.w	800318c <HAL_TIM_OC_Start>

08003244 <HAL_TIM_OC_Stop>:
{
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003248:	2200      	movs	r2, #0
 800324a:	6800      	ldr	r0, [r0, #0]
{
 800324c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800324e:	f7ff ff8f 	bl	8003170 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_TIM_OC_Stop+0x74>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10d      	bne.n	8003276 <HAL_TIM_OC_Stop+0x32>
    __HAL_TIM_MOE_DISABLE(htim);
 800325a:	6a19      	ldr	r1, [r3, #32]
 800325c:	f241 1211 	movw	r2, #4369	; 0x1111
 8003260:	4211      	tst	r1, r2
 8003262:	d108      	bne.n	8003276 <HAL_TIM_OC_Stop+0x32>
 8003264:	6a19      	ldr	r1, [r3, #32]
 8003266:	f240 4244 	movw	r2, #1092	; 0x444
 800326a:	4211      	tst	r1, r2
 800326c:	bf02      	ittt	eq
 800326e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003270:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8003274:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003276:	6a19      	ldr	r1, [r3, #32]
 8003278:	f241 1211 	movw	r2, #4369	; 0x1111
 800327c:	4211      	tst	r1, r2
 800327e:	d108      	bne.n	8003292 <HAL_TIM_OC_Stop+0x4e>
 8003280:	6a19      	ldr	r1, [r3, #32]
 8003282:	f240 4244 	movw	r2, #1092	; 0x444
 8003286:	4211      	tst	r1, r2
 8003288:	bf02      	ittt	eq
 800328a:	681a      	ldreq	r2, [r3, #0]
 800328c:	f022 0201 	biceq.w	r2, r2, #1
 8003290:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003292:	2301      	movs	r3, #1
 8003294:	b91d      	cbnz	r5, 800329e <HAL_TIM_OC_Stop+0x5a>
 8003296:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800329a:	2000      	movs	r0, #0
 800329c:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800329e:	2d04      	cmp	r5, #4
 80032a0:	d102      	bne.n	80032a8 <HAL_TIM_OC_Stop+0x64>
 80032a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80032a6:	e7f8      	b.n	800329a <HAL_TIM_OC_Stop+0x56>
 80032a8:	2d08      	cmp	r5, #8
 80032aa:	bf0c      	ite	eq
 80032ac:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80032b0:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80032b4:	e7f1      	b.n	800329a <HAL_TIM_OC_Stop+0x56>
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000

080032bc <HAL_TIM_PWM_Stop>:
 80032bc:	f7ff bfc2 	b.w	8003244 <HAL_TIM_OC_Stop>

080032c0 <VersionPrint>:
const char VersionBuildDateString[] = "Wed Nov  3 15:57:29 2021";
const char VersionBuildUser[] = "harsh";

void VersionPrint(void)
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 80032c0:	4a02      	ldr	r2, [pc, #8]	; (80032cc <VersionPrint+0xc>)
 80032c2:	4903      	ldr	r1, [pc, #12]	; (80032d0 <VersionPrint+0x10>)
 80032c4:	4803      	ldr	r0, [pc, #12]	; (80032d4 <VersionPrint+0x14>)
 80032c6:	f000 bca9 	b.w	8003c1c <iprintf>
 80032ca:	bf00      	nop
 80032cc:	080124fd 	.word	0x080124fd
 80032d0:	080124e4 	.word	0x080124e4
 80032d4:	080124a9 	.word	0x080124a9

080032d8 <CmdVersion>:
}

ParserReturnVal_t CmdVersion(int mode)
{
 80032d8:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80032da:	b908      	cbnz	r0, 80032e0 <CmdVersion+0x8>

   VersionPrint();
 80032dc:	f7ff fff0 	bl	80032c0 <VersionPrint>
   return CmdReturnOk;
}
 80032e0:	2000      	movs	r0, #0
 80032e2:	bd08      	pop	{r3, pc}

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200001b0 	.word	0x200001b0

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4d0d      	ldr	r5, [pc, #52]	; (8003328 <__libc_init_array+0x38>)
 80032f4:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	2600      	movs	r6, #0
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	4d0b      	ldr	r5, [pc, #44]	; (8003330 <__libc_init_array+0x40>)
 8003302:	4c0c      	ldr	r4, [pc, #48]	; (8003334 <__libc_init_array+0x44>)
 8003304:	f003 f908 	bl	8006518 <_init>
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	2600      	movs	r6, #0
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f855 3b04 	ldr.w	r3, [r5], #4
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08012a74 	.word	0x08012a74
 800332c:	08012a74 	.word	0x08012a74
 8003330:	08012a74 	.word	0x08012a74
 8003334:	08012a78 	.word	0x08012a78

08003338 <memset>:
 8003338:	4402      	add	r2, r0
 800333a:	4603      	mov	r3, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <__cvt>:
 8003348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800334c:	ec55 4b10 	vmov	r4, r5, d0
 8003350:	2d00      	cmp	r5, #0
 8003352:	460e      	mov	r6, r1
 8003354:	4619      	mov	r1, r3
 8003356:	462b      	mov	r3, r5
 8003358:	bfbb      	ittet	lt
 800335a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800335e:	461d      	movlt	r5, r3
 8003360:	2300      	movge	r3, #0
 8003362:	232d      	movlt	r3, #45	; 0x2d
 8003364:	700b      	strb	r3, [r1, #0]
 8003366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003368:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800336c:	4691      	mov	r9, r2
 800336e:	f023 0820 	bic.w	r8, r3, #32
 8003372:	bfbc      	itt	lt
 8003374:	4622      	movlt	r2, r4
 8003376:	4614      	movlt	r4, r2
 8003378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800337c:	d005      	beq.n	800338a <__cvt+0x42>
 800337e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003382:	d100      	bne.n	8003386 <__cvt+0x3e>
 8003384:	3601      	adds	r6, #1
 8003386:	2102      	movs	r1, #2
 8003388:	e000      	b.n	800338c <__cvt+0x44>
 800338a:	2103      	movs	r1, #3
 800338c:	ab03      	add	r3, sp, #12
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	ab02      	add	r3, sp, #8
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	ec45 4b10 	vmov	d0, r4, r5
 8003398:	4653      	mov	r3, sl
 800339a:	4632      	mov	r2, r6
 800339c:	f001 f848 	bl	8004430 <_dtoa_r>
 80033a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033a4:	4607      	mov	r7, r0
 80033a6:	d102      	bne.n	80033ae <__cvt+0x66>
 80033a8:	f019 0f01 	tst.w	r9, #1
 80033ac:	d022      	beq.n	80033f4 <__cvt+0xac>
 80033ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80033b2:	eb07 0906 	add.w	r9, r7, r6
 80033b6:	d110      	bne.n	80033da <__cvt+0x92>
 80033b8:	783b      	ldrb	r3, [r7, #0]
 80033ba:	2b30      	cmp	r3, #48	; 0x30
 80033bc:	d10a      	bne.n	80033d4 <__cvt+0x8c>
 80033be:	2200      	movs	r2, #0
 80033c0:	2300      	movs	r3, #0
 80033c2:	4620      	mov	r0, r4
 80033c4:	4629      	mov	r1, r5
 80033c6:	f7fd fd27 	bl	8000e18 <__aeabi_dcmpeq>
 80033ca:	b918      	cbnz	r0, 80033d4 <__cvt+0x8c>
 80033cc:	f1c6 0601 	rsb	r6, r6, #1
 80033d0:	f8ca 6000 	str.w	r6, [sl]
 80033d4:	f8da 3000 	ldr.w	r3, [sl]
 80033d8:	4499      	add	r9, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	2300      	movs	r3, #0
 80033de:	4620      	mov	r0, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	f7fd fd19 	bl	8000e18 <__aeabi_dcmpeq>
 80033e6:	b108      	cbz	r0, 80033ec <__cvt+0xa4>
 80033e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80033ec:	2230      	movs	r2, #48	; 0x30
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	454b      	cmp	r3, r9
 80033f2:	d307      	bcc.n	8003404 <__cvt+0xbc>
 80033f4:	9b03      	ldr	r3, [sp, #12]
 80033f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033f8:	1bdb      	subs	r3, r3, r7
 80033fa:	4638      	mov	r0, r7
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	b004      	add	sp, #16
 8003400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003404:	1c59      	adds	r1, r3, #1
 8003406:	9103      	str	r1, [sp, #12]
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e7f0      	b.n	80033ee <__cvt+0xa6>

0800340c <__exponent>:
 800340c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800340e:	4603      	mov	r3, r0
 8003410:	2900      	cmp	r1, #0
 8003412:	bfb8      	it	lt
 8003414:	4249      	neglt	r1, r1
 8003416:	f803 2b02 	strb.w	r2, [r3], #2
 800341a:	bfb4      	ite	lt
 800341c:	222d      	movlt	r2, #45	; 0x2d
 800341e:	222b      	movge	r2, #43	; 0x2b
 8003420:	2909      	cmp	r1, #9
 8003422:	7042      	strb	r2, [r0, #1]
 8003424:	dd2a      	ble.n	800347c <__exponent+0x70>
 8003426:	f10d 0407 	add.w	r4, sp, #7
 800342a:	46a4      	mov	ip, r4
 800342c:	270a      	movs	r7, #10
 800342e:	46a6      	mov	lr, r4
 8003430:	460a      	mov	r2, r1
 8003432:	fb91 f6f7 	sdiv	r6, r1, r7
 8003436:	fb07 1516 	mls	r5, r7, r6, r1
 800343a:	3530      	adds	r5, #48	; 0x30
 800343c:	2a63      	cmp	r2, #99	; 0x63
 800343e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003442:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003446:	4631      	mov	r1, r6
 8003448:	dcf1      	bgt.n	800342e <__exponent+0x22>
 800344a:	3130      	adds	r1, #48	; 0x30
 800344c:	f1ae 0502 	sub.w	r5, lr, #2
 8003450:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003454:	1c44      	adds	r4, r0, #1
 8003456:	4629      	mov	r1, r5
 8003458:	4561      	cmp	r1, ip
 800345a:	d30a      	bcc.n	8003472 <__exponent+0x66>
 800345c:	f10d 0209 	add.w	r2, sp, #9
 8003460:	eba2 020e 	sub.w	r2, r2, lr
 8003464:	4565      	cmp	r5, ip
 8003466:	bf88      	it	hi
 8003468:	2200      	movhi	r2, #0
 800346a:	4413      	add	r3, r2
 800346c:	1a18      	subs	r0, r3, r0
 800346e:	b003      	add	sp, #12
 8003470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003476:	f804 2f01 	strb.w	r2, [r4, #1]!
 800347a:	e7ed      	b.n	8003458 <__exponent+0x4c>
 800347c:	2330      	movs	r3, #48	; 0x30
 800347e:	3130      	adds	r1, #48	; 0x30
 8003480:	7083      	strb	r3, [r0, #2]
 8003482:	70c1      	strb	r1, [r0, #3]
 8003484:	1d03      	adds	r3, r0, #4
 8003486:	e7f1      	b.n	800346c <__exponent+0x60>

08003488 <_printf_float>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	ed2d 8b02 	vpush	{d8}
 8003490:	b08d      	sub	sp, #52	; 0x34
 8003492:	460c      	mov	r4, r1
 8003494:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003498:	4616      	mov	r6, r2
 800349a:	461f      	mov	r7, r3
 800349c:	4605      	mov	r5, r0
 800349e:	f001 ff7f 	bl	80053a0 <_localeconv_r>
 80034a2:	f8d0 a000 	ldr.w	sl, [r0]
 80034a6:	4650      	mov	r0, sl
 80034a8:	f7fd f836 	bl	8000518 <strlen>
 80034ac:	2300      	movs	r3, #0
 80034ae:	930a      	str	r3, [sp, #40]	; 0x28
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	9305      	str	r3, [sp, #20]
 80034b4:	f8d8 3000 	ldr.w	r3, [r8]
 80034b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80034bc:	3307      	adds	r3, #7
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	f103 0208 	add.w	r2, r3, #8
 80034c6:	f8c8 2000 	str.w	r2, [r8]
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80034d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80034da:	9307      	str	r3, [sp, #28]
 80034dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80034e0:	ee08 0a10 	vmov	s16, r0
 80034e4:	4b9f      	ldr	r3, [pc, #636]	; (8003764 <_printf_float+0x2dc>)
 80034e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ee:	f7fd fcc5 	bl	8000e7c <__aeabi_dcmpun>
 80034f2:	bb88      	cbnz	r0, 8003558 <_printf_float+0xd0>
 80034f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034f8:	4b9a      	ldr	r3, [pc, #616]	; (8003764 <_printf_float+0x2dc>)
 80034fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034fe:	f7fd fc9f 	bl	8000e40 <__aeabi_dcmple>
 8003502:	bb48      	cbnz	r0, 8003558 <_printf_float+0xd0>
 8003504:	2200      	movs	r2, #0
 8003506:	2300      	movs	r3, #0
 8003508:	4640      	mov	r0, r8
 800350a:	4649      	mov	r1, r9
 800350c:	f7fd fc8e 	bl	8000e2c <__aeabi_dcmplt>
 8003510:	b110      	cbz	r0, 8003518 <_printf_float+0x90>
 8003512:	232d      	movs	r3, #45	; 0x2d
 8003514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003518:	4b93      	ldr	r3, [pc, #588]	; (8003768 <_printf_float+0x2e0>)
 800351a:	4894      	ldr	r0, [pc, #592]	; (800376c <_printf_float+0x2e4>)
 800351c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003520:	bf94      	ite	ls
 8003522:	4698      	movls	r8, r3
 8003524:	4680      	movhi	r8, r0
 8003526:	2303      	movs	r3, #3
 8003528:	6123      	str	r3, [r4, #16]
 800352a:	9b05      	ldr	r3, [sp, #20]
 800352c:	f023 0204 	bic.w	r2, r3, #4
 8003530:	6022      	str	r2, [r4, #0]
 8003532:	f04f 0900 	mov.w	r9, #0
 8003536:	9700      	str	r7, [sp, #0]
 8003538:	4633      	mov	r3, r6
 800353a:	aa0b      	add	r2, sp, #44	; 0x2c
 800353c:	4621      	mov	r1, r4
 800353e:	4628      	mov	r0, r5
 8003540:	f000 f9d8 	bl	80038f4 <_printf_common>
 8003544:	3001      	adds	r0, #1
 8003546:	f040 8090 	bne.w	800366a <_printf_float+0x1e2>
 800354a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800354e:	b00d      	add	sp, #52	; 0x34
 8003550:	ecbd 8b02 	vpop	{d8}
 8003554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	4640      	mov	r0, r8
 800355e:	4649      	mov	r1, r9
 8003560:	f7fd fc8c 	bl	8000e7c <__aeabi_dcmpun>
 8003564:	b140      	cbz	r0, 8003578 <_printf_float+0xf0>
 8003566:	464b      	mov	r3, r9
 8003568:	2b00      	cmp	r3, #0
 800356a:	bfbc      	itt	lt
 800356c:	232d      	movlt	r3, #45	; 0x2d
 800356e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003572:	487f      	ldr	r0, [pc, #508]	; (8003770 <_printf_float+0x2e8>)
 8003574:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <_printf_float+0x2ec>)
 8003576:	e7d1      	b.n	800351c <_printf_float+0x94>
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800357e:	9206      	str	r2, [sp, #24]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	d13f      	bne.n	8003604 <_printf_float+0x17c>
 8003584:	2306      	movs	r3, #6
 8003586:	6063      	str	r3, [r4, #4]
 8003588:	9b05      	ldr	r3, [sp, #20]
 800358a:	6861      	ldr	r1, [r4, #4]
 800358c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003590:	2300      	movs	r3, #0
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	ab0a      	add	r3, sp, #40	; 0x28
 8003596:	e9cd b301 	strd	fp, r3, [sp, #4]
 800359a:	ab09      	add	r3, sp, #36	; 0x24
 800359c:	ec49 8b10 	vmov	d0, r8, r9
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6022      	str	r2, [r4, #0]
 80035a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80035a8:	4628      	mov	r0, r5
 80035aa:	f7ff fecd 	bl	8003348 <__cvt>
 80035ae:	9b06      	ldr	r3, [sp, #24]
 80035b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035b2:	2b47      	cmp	r3, #71	; 0x47
 80035b4:	4680      	mov	r8, r0
 80035b6:	d108      	bne.n	80035ca <_printf_float+0x142>
 80035b8:	1cc8      	adds	r0, r1, #3
 80035ba:	db02      	blt.n	80035c2 <_printf_float+0x13a>
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	4299      	cmp	r1, r3
 80035c0:	dd41      	ble.n	8003646 <_printf_float+0x1be>
 80035c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80035c6:	fa5f fb8b 	uxtb.w	fp, fp
 80035ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035ce:	d820      	bhi.n	8003612 <_printf_float+0x18a>
 80035d0:	3901      	subs	r1, #1
 80035d2:	465a      	mov	r2, fp
 80035d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80035d8:	9109      	str	r1, [sp, #36]	; 0x24
 80035da:	f7ff ff17 	bl	800340c <__exponent>
 80035de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035e0:	1813      	adds	r3, r2, r0
 80035e2:	2a01      	cmp	r2, #1
 80035e4:	4681      	mov	r9, r0
 80035e6:	6123      	str	r3, [r4, #16]
 80035e8:	dc02      	bgt.n	80035f0 <_printf_float+0x168>
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	07d2      	lsls	r2, r2, #31
 80035ee:	d501      	bpl.n	80035f4 <_printf_float+0x16c>
 80035f0:	3301      	adds	r3, #1
 80035f2:	6123      	str	r3, [r4, #16]
 80035f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d09c      	beq.n	8003536 <_printf_float+0xae>
 80035fc:	232d      	movs	r3, #45	; 0x2d
 80035fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003602:	e798      	b.n	8003536 <_printf_float+0xae>
 8003604:	9a06      	ldr	r2, [sp, #24]
 8003606:	2a47      	cmp	r2, #71	; 0x47
 8003608:	d1be      	bne.n	8003588 <_printf_float+0x100>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1bc      	bne.n	8003588 <_printf_float+0x100>
 800360e:	2301      	movs	r3, #1
 8003610:	e7b9      	b.n	8003586 <_printf_float+0xfe>
 8003612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003616:	d118      	bne.n	800364a <_printf_float+0x1c2>
 8003618:	2900      	cmp	r1, #0
 800361a:	6863      	ldr	r3, [r4, #4]
 800361c:	dd0b      	ble.n	8003636 <_printf_float+0x1ae>
 800361e:	6121      	str	r1, [r4, #16]
 8003620:	b913      	cbnz	r3, 8003628 <_printf_float+0x1a0>
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	07d0      	lsls	r0, r2, #31
 8003626:	d502      	bpl.n	800362e <_printf_float+0x1a6>
 8003628:	3301      	adds	r3, #1
 800362a:	440b      	add	r3, r1
 800362c:	6123      	str	r3, [r4, #16]
 800362e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003630:	f04f 0900 	mov.w	r9, #0
 8003634:	e7de      	b.n	80035f4 <_printf_float+0x16c>
 8003636:	b913      	cbnz	r3, 800363e <_printf_float+0x1b6>
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	07d2      	lsls	r2, r2, #31
 800363c:	d501      	bpl.n	8003642 <_printf_float+0x1ba>
 800363e:	3302      	adds	r3, #2
 8003640:	e7f4      	b.n	800362c <_printf_float+0x1a4>
 8003642:	2301      	movs	r3, #1
 8003644:	e7f2      	b.n	800362c <_printf_float+0x1a4>
 8003646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800364a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800364c:	4299      	cmp	r1, r3
 800364e:	db05      	blt.n	800365c <_printf_float+0x1d4>
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	6121      	str	r1, [r4, #16]
 8003654:	07d8      	lsls	r0, r3, #31
 8003656:	d5ea      	bpl.n	800362e <_printf_float+0x1a6>
 8003658:	1c4b      	adds	r3, r1, #1
 800365a:	e7e7      	b.n	800362c <_printf_float+0x1a4>
 800365c:	2900      	cmp	r1, #0
 800365e:	bfd4      	ite	le
 8003660:	f1c1 0202 	rsble	r2, r1, #2
 8003664:	2201      	movgt	r2, #1
 8003666:	4413      	add	r3, r2
 8003668:	e7e0      	b.n	800362c <_printf_float+0x1a4>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	055a      	lsls	r2, r3, #21
 800366e:	d407      	bmi.n	8003680 <_printf_float+0x1f8>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	4642      	mov	r2, r8
 8003674:	4631      	mov	r1, r6
 8003676:	4628      	mov	r0, r5
 8003678:	47b8      	blx	r7
 800367a:	3001      	adds	r0, #1
 800367c:	d12c      	bne.n	80036d8 <_printf_float+0x250>
 800367e:	e764      	b.n	800354a <_printf_float+0xc2>
 8003680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003684:	f240 80e0 	bls.w	8003848 <_printf_float+0x3c0>
 8003688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800368c:	2200      	movs	r2, #0
 800368e:	2300      	movs	r3, #0
 8003690:	f7fd fbc2 	bl	8000e18 <__aeabi_dcmpeq>
 8003694:	2800      	cmp	r0, #0
 8003696:	d034      	beq.n	8003702 <_printf_float+0x27a>
 8003698:	4a37      	ldr	r2, [pc, #220]	; (8003778 <_printf_float+0x2f0>)
 800369a:	2301      	movs	r3, #1
 800369c:	4631      	mov	r1, r6
 800369e:	4628      	mov	r0, r5
 80036a0:	47b8      	blx	r7
 80036a2:	3001      	adds	r0, #1
 80036a4:	f43f af51 	beq.w	800354a <_printf_float+0xc2>
 80036a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036ac:	429a      	cmp	r2, r3
 80036ae:	db02      	blt.n	80036b6 <_printf_float+0x22e>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	07d8      	lsls	r0, r3, #31
 80036b4:	d510      	bpl.n	80036d8 <_printf_float+0x250>
 80036b6:	ee18 3a10 	vmov	r3, s16
 80036ba:	4652      	mov	r2, sl
 80036bc:	4631      	mov	r1, r6
 80036be:	4628      	mov	r0, r5
 80036c0:	47b8      	blx	r7
 80036c2:	3001      	adds	r0, #1
 80036c4:	f43f af41 	beq.w	800354a <_printf_float+0xc2>
 80036c8:	f04f 0800 	mov.w	r8, #0
 80036cc:	f104 091a 	add.w	r9, r4, #26
 80036d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	4543      	cmp	r3, r8
 80036d6:	dc09      	bgt.n	80036ec <_printf_float+0x264>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	079b      	lsls	r3, r3, #30
 80036dc:	f100 8105 	bmi.w	80038ea <_printf_float+0x462>
 80036e0:	68e0      	ldr	r0, [r4, #12]
 80036e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036e4:	4298      	cmp	r0, r3
 80036e6:	bfb8      	it	lt
 80036e8:	4618      	movlt	r0, r3
 80036ea:	e730      	b.n	800354e <_printf_float+0xc6>
 80036ec:	2301      	movs	r3, #1
 80036ee:	464a      	mov	r2, r9
 80036f0:	4631      	mov	r1, r6
 80036f2:	4628      	mov	r0, r5
 80036f4:	47b8      	blx	r7
 80036f6:	3001      	adds	r0, #1
 80036f8:	f43f af27 	beq.w	800354a <_printf_float+0xc2>
 80036fc:	f108 0801 	add.w	r8, r8, #1
 8003700:	e7e6      	b.n	80036d0 <_printf_float+0x248>
 8003702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003704:	2b00      	cmp	r3, #0
 8003706:	dc39      	bgt.n	800377c <_printf_float+0x2f4>
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <_printf_float+0x2f0>)
 800370a:	2301      	movs	r3, #1
 800370c:	4631      	mov	r1, r6
 800370e:	4628      	mov	r0, r5
 8003710:	47b8      	blx	r7
 8003712:	3001      	adds	r0, #1
 8003714:	f43f af19 	beq.w	800354a <_printf_float+0xc2>
 8003718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800371c:	4313      	orrs	r3, r2
 800371e:	d102      	bne.n	8003726 <_printf_float+0x29e>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	07d9      	lsls	r1, r3, #31
 8003724:	d5d8      	bpl.n	80036d8 <_printf_float+0x250>
 8003726:	ee18 3a10 	vmov	r3, s16
 800372a:	4652      	mov	r2, sl
 800372c:	4631      	mov	r1, r6
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	f43f af09 	beq.w	800354a <_printf_float+0xc2>
 8003738:	f04f 0900 	mov.w	r9, #0
 800373c:	f104 0a1a 	add.w	sl, r4, #26
 8003740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003742:	425b      	negs	r3, r3
 8003744:	454b      	cmp	r3, r9
 8003746:	dc01      	bgt.n	800374c <_printf_float+0x2c4>
 8003748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800374a:	e792      	b.n	8003672 <_printf_float+0x1ea>
 800374c:	2301      	movs	r3, #1
 800374e:	4652      	mov	r2, sl
 8003750:	4631      	mov	r1, r6
 8003752:	4628      	mov	r0, r5
 8003754:	47b8      	blx	r7
 8003756:	3001      	adds	r0, #1
 8003758:	f43f aef7 	beq.w	800354a <_printf_float+0xc2>
 800375c:	f109 0901 	add.w	r9, r9, #1
 8003760:	e7ee      	b.n	8003740 <_printf_float+0x2b8>
 8003762:	bf00      	nop
 8003764:	7fefffff 	.word	0x7fefffff
 8003768:	08012608 	.word	0x08012608
 800376c:	0801260c 	.word	0x0801260c
 8003770:	08012614 	.word	0x08012614
 8003774:	08012610 	.word	0x08012610
 8003778:	08008517 	.word	0x08008517
 800377c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800377e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003780:	429a      	cmp	r2, r3
 8003782:	bfa8      	it	ge
 8003784:	461a      	movge	r2, r3
 8003786:	2a00      	cmp	r2, #0
 8003788:	4691      	mov	r9, r2
 800378a:	dc37      	bgt.n	80037fc <_printf_float+0x374>
 800378c:	f04f 0b00 	mov.w	fp, #0
 8003790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003794:	f104 021a 	add.w	r2, r4, #26
 8003798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800379a:	9305      	str	r3, [sp, #20]
 800379c:	eba3 0309 	sub.w	r3, r3, r9
 80037a0:	455b      	cmp	r3, fp
 80037a2:	dc33      	bgt.n	800380c <_printf_float+0x384>
 80037a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037a8:	429a      	cmp	r2, r3
 80037aa:	db3b      	blt.n	8003824 <_printf_float+0x39c>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	07da      	lsls	r2, r3, #31
 80037b0:	d438      	bmi.n	8003824 <_printf_float+0x39c>
 80037b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037b4:	9a05      	ldr	r2, [sp, #20]
 80037b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037b8:	1a9a      	subs	r2, r3, r2
 80037ba:	eba3 0901 	sub.w	r9, r3, r1
 80037be:	4591      	cmp	r9, r2
 80037c0:	bfa8      	it	ge
 80037c2:	4691      	movge	r9, r2
 80037c4:	f1b9 0f00 	cmp.w	r9, #0
 80037c8:	dc35      	bgt.n	8003836 <_printf_float+0x3ae>
 80037ca:	f04f 0800 	mov.w	r8, #0
 80037ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037d2:	f104 0a1a 	add.w	sl, r4, #26
 80037d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	eba3 0309 	sub.w	r3, r3, r9
 80037e0:	4543      	cmp	r3, r8
 80037e2:	f77f af79 	ble.w	80036d8 <_printf_float+0x250>
 80037e6:	2301      	movs	r3, #1
 80037e8:	4652      	mov	r2, sl
 80037ea:	4631      	mov	r1, r6
 80037ec:	4628      	mov	r0, r5
 80037ee:	47b8      	blx	r7
 80037f0:	3001      	adds	r0, #1
 80037f2:	f43f aeaa 	beq.w	800354a <_printf_float+0xc2>
 80037f6:	f108 0801 	add.w	r8, r8, #1
 80037fa:	e7ec      	b.n	80037d6 <_printf_float+0x34e>
 80037fc:	4613      	mov	r3, r2
 80037fe:	4631      	mov	r1, r6
 8003800:	4642      	mov	r2, r8
 8003802:	4628      	mov	r0, r5
 8003804:	47b8      	blx	r7
 8003806:	3001      	adds	r0, #1
 8003808:	d1c0      	bne.n	800378c <_printf_float+0x304>
 800380a:	e69e      	b.n	800354a <_printf_float+0xc2>
 800380c:	2301      	movs	r3, #1
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	9205      	str	r2, [sp, #20]
 8003814:	47b8      	blx	r7
 8003816:	3001      	adds	r0, #1
 8003818:	f43f ae97 	beq.w	800354a <_printf_float+0xc2>
 800381c:	9a05      	ldr	r2, [sp, #20]
 800381e:	f10b 0b01 	add.w	fp, fp, #1
 8003822:	e7b9      	b.n	8003798 <_printf_float+0x310>
 8003824:	ee18 3a10 	vmov	r3, s16
 8003828:	4652      	mov	r2, sl
 800382a:	4631      	mov	r1, r6
 800382c:	4628      	mov	r0, r5
 800382e:	47b8      	blx	r7
 8003830:	3001      	adds	r0, #1
 8003832:	d1be      	bne.n	80037b2 <_printf_float+0x32a>
 8003834:	e689      	b.n	800354a <_printf_float+0xc2>
 8003836:	9a05      	ldr	r2, [sp, #20]
 8003838:	464b      	mov	r3, r9
 800383a:	4442      	add	r2, r8
 800383c:	4631      	mov	r1, r6
 800383e:	4628      	mov	r0, r5
 8003840:	47b8      	blx	r7
 8003842:	3001      	adds	r0, #1
 8003844:	d1c1      	bne.n	80037ca <_printf_float+0x342>
 8003846:	e680      	b.n	800354a <_printf_float+0xc2>
 8003848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800384a:	2a01      	cmp	r2, #1
 800384c:	dc01      	bgt.n	8003852 <_printf_float+0x3ca>
 800384e:	07db      	lsls	r3, r3, #31
 8003850:	d538      	bpl.n	80038c4 <_printf_float+0x43c>
 8003852:	2301      	movs	r3, #1
 8003854:	4642      	mov	r2, r8
 8003856:	4631      	mov	r1, r6
 8003858:	4628      	mov	r0, r5
 800385a:	47b8      	blx	r7
 800385c:	3001      	adds	r0, #1
 800385e:	f43f ae74 	beq.w	800354a <_printf_float+0xc2>
 8003862:	ee18 3a10 	vmov	r3, s16
 8003866:	4652      	mov	r2, sl
 8003868:	4631      	mov	r1, r6
 800386a:	4628      	mov	r0, r5
 800386c:	47b8      	blx	r7
 800386e:	3001      	adds	r0, #1
 8003870:	f43f ae6b 	beq.w	800354a <_printf_float+0xc2>
 8003874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003878:	2200      	movs	r2, #0
 800387a:	2300      	movs	r3, #0
 800387c:	f7fd facc 	bl	8000e18 <__aeabi_dcmpeq>
 8003880:	b9d8      	cbnz	r0, 80038ba <_printf_float+0x432>
 8003882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003884:	f108 0201 	add.w	r2, r8, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	d10e      	bne.n	80038b2 <_printf_float+0x42a>
 8003894:	e659      	b.n	800354a <_printf_float+0xc2>
 8003896:	2301      	movs	r3, #1
 8003898:	4652      	mov	r2, sl
 800389a:	4631      	mov	r1, r6
 800389c:	4628      	mov	r0, r5
 800389e:	47b8      	blx	r7
 80038a0:	3001      	adds	r0, #1
 80038a2:	f43f ae52 	beq.w	800354a <_printf_float+0xc2>
 80038a6:	f108 0801 	add.w	r8, r8, #1
 80038aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4543      	cmp	r3, r8
 80038b0:	dcf1      	bgt.n	8003896 <_printf_float+0x40e>
 80038b2:	464b      	mov	r3, r9
 80038b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80038b8:	e6dc      	b.n	8003674 <_printf_float+0x1ec>
 80038ba:	f04f 0800 	mov.w	r8, #0
 80038be:	f104 0a1a 	add.w	sl, r4, #26
 80038c2:	e7f2      	b.n	80038aa <_printf_float+0x422>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4642      	mov	r2, r8
 80038c8:	e7df      	b.n	800388a <_printf_float+0x402>
 80038ca:	2301      	movs	r3, #1
 80038cc:	464a      	mov	r2, r9
 80038ce:	4631      	mov	r1, r6
 80038d0:	4628      	mov	r0, r5
 80038d2:	47b8      	blx	r7
 80038d4:	3001      	adds	r0, #1
 80038d6:	f43f ae38 	beq.w	800354a <_printf_float+0xc2>
 80038da:	f108 0801 	add.w	r8, r8, #1
 80038de:	68e3      	ldr	r3, [r4, #12]
 80038e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038e2:	1a5b      	subs	r3, r3, r1
 80038e4:	4543      	cmp	r3, r8
 80038e6:	dcf0      	bgt.n	80038ca <_printf_float+0x442>
 80038e8:	e6fa      	b.n	80036e0 <_printf_float+0x258>
 80038ea:	f04f 0800 	mov.w	r8, #0
 80038ee:	f104 0919 	add.w	r9, r4, #25
 80038f2:	e7f4      	b.n	80038de <_printf_float+0x456>

080038f4 <_printf_common>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	4616      	mov	r6, r2
 80038fa:	4699      	mov	r9, r3
 80038fc:	688a      	ldr	r2, [r1, #8]
 80038fe:	690b      	ldr	r3, [r1, #16]
 8003900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003904:	4293      	cmp	r3, r2
 8003906:	bfb8      	it	lt
 8003908:	4613      	movlt	r3, r2
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003910:	4607      	mov	r7, r0
 8003912:	460c      	mov	r4, r1
 8003914:	b10a      	cbz	r2, 800391a <_printf_common+0x26>
 8003916:	3301      	adds	r3, #1
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	0699      	lsls	r1, r3, #26
 800391e:	bf42      	ittt	mi
 8003920:	6833      	ldrmi	r3, [r6, #0]
 8003922:	3302      	addmi	r3, #2
 8003924:	6033      	strmi	r3, [r6, #0]
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	f015 0506 	ands.w	r5, r5, #6
 800392c:	d106      	bne.n	800393c <_printf_common+0x48>
 800392e:	f104 0a19 	add.w	sl, r4, #25
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	42ab      	cmp	r3, r5
 800393a:	dc26      	bgt.n	800398a <_printf_common+0x96>
 800393c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003940:	1e13      	subs	r3, r2, #0
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	bf18      	it	ne
 8003946:	2301      	movne	r3, #1
 8003948:	0692      	lsls	r2, r2, #26
 800394a:	d42b      	bmi.n	80039a4 <_printf_common+0xb0>
 800394c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003950:	4649      	mov	r1, r9
 8003952:	4638      	mov	r0, r7
 8003954:	47c0      	blx	r8
 8003956:	3001      	adds	r0, #1
 8003958:	d01e      	beq.n	8003998 <_printf_common+0xa4>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	68e5      	ldr	r5, [r4, #12]
 800395e:	6832      	ldr	r2, [r6, #0]
 8003960:	f003 0306 	and.w	r3, r3, #6
 8003964:	2b04      	cmp	r3, #4
 8003966:	bf08      	it	eq
 8003968:	1aad      	subeq	r5, r5, r2
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	6922      	ldr	r2, [r4, #16]
 800396e:	bf0c      	ite	eq
 8003970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003974:	2500      	movne	r5, #0
 8003976:	4293      	cmp	r3, r2
 8003978:	bfc4      	itt	gt
 800397a:	1a9b      	subgt	r3, r3, r2
 800397c:	18ed      	addgt	r5, r5, r3
 800397e:	2600      	movs	r6, #0
 8003980:	341a      	adds	r4, #26
 8003982:	42b5      	cmp	r5, r6
 8003984:	d11a      	bne.n	80039bc <_printf_common+0xc8>
 8003986:	2000      	movs	r0, #0
 8003988:	e008      	b.n	800399c <_printf_common+0xa8>
 800398a:	2301      	movs	r3, #1
 800398c:	4652      	mov	r2, sl
 800398e:	4649      	mov	r1, r9
 8003990:	4638      	mov	r0, r7
 8003992:	47c0      	blx	r8
 8003994:	3001      	adds	r0, #1
 8003996:	d103      	bne.n	80039a0 <_printf_common+0xac>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	3501      	adds	r5, #1
 80039a2:	e7c6      	b.n	8003932 <_printf_common+0x3e>
 80039a4:	18e1      	adds	r1, r4, r3
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	2030      	movs	r0, #48	; 0x30
 80039aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ae:	4422      	add	r2, r4
 80039b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039b8:	3302      	adds	r3, #2
 80039ba:	e7c7      	b.n	800394c <_printf_common+0x58>
 80039bc:	2301      	movs	r3, #1
 80039be:	4622      	mov	r2, r4
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d0e6      	beq.n	8003998 <_printf_common+0xa4>
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7d9      	b.n	8003982 <_printf_common+0x8e>
	...

080039d0 <_printf_i>:
 80039d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	7e0f      	ldrb	r7, [r1, #24]
 80039d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039d8:	2f78      	cmp	r7, #120	; 0x78
 80039da:	4691      	mov	r9, r2
 80039dc:	4680      	mov	r8, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	469a      	mov	sl, r3
 80039e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039e6:	d807      	bhi.n	80039f8 <_printf_i+0x28>
 80039e8:	2f62      	cmp	r7, #98	; 0x62
 80039ea:	d80a      	bhi.n	8003a02 <_printf_i+0x32>
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	f000 80d8 	beq.w	8003ba2 <_printf_i+0x1d2>
 80039f2:	2f58      	cmp	r7, #88	; 0x58
 80039f4:	f000 80a3 	beq.w	8003b3e <_printf_i+0x16e>
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a00:	e03a      	b.n	8003a78 <_printf_i+0xa8>
 8003a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a06:	2b15      	cmp	r3, #21
 8003a08:	d8f6      	bhi.n	80039f8 <_printf_i+0x28>
 8003a0a:	a101      	add	r1, pc, #4	; (adr r1, 8003a10 <_printf_i+0x40>)
 8003a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	080039f9 	.word	0x080039f9
 8003a1c:	080039f9 	.word	0x080039f9
 8003a20:	080039f9 	.word	0x080039f9
 8003a24:	080039f9 	.word	0x080039f9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039f9 	.word	0x080039f9
 8003a30:	080039f9 	.word	0x080039f9
 8003a34:	080039f9 	.word	0x080039f9
 8003a38:	080039f9 	.word	0x080039f9
 8003a3c:	08003b89 	.word	0x08003b89
 8003a40:	08003aad 	.word	0x08003aad
 8003a44:	08003b6b 	.word	0x08003b6b
 8003a48:	080039f9 	.word	0x080039f9
 8003a4c:	080039f9 	.word	0x080039f9
 8003a50:	08003bab 	.word	0x08003bab
 8003a54:	080039f9 	.word	0x080039f9
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	080039f9 	.word	0x080039f9
 8003a60:	080039f9 	.word	0x080039f9
 8003a64:	08003b73 	.word	0x08003b73
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a3      	b.n	8003bc4 <_printf_i+0x1f4>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	6829      	ldr	r1, [r5, #0]
 8003a80:	0606      	lsls	r6, r0, #24
 8003a82:	f101 0304 	add.w	r3, r1, #4
 8003a86:	d50a      	bpl.n	8003a9e <_printf_i+0xce>
 8003a88:	680e      	ldr	r6, [r1, #0]
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	da03      	bge.n	8003a98 <_printf_i+0xc8>
 8003a90:	232d      	movs	r3, #45	; 0x2d
 8003a92:	4276      	negs	r6, r6
 8003a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a98:	485e      	ldr	r0, [pc, #376]	; (8003c14 <_printf_i+0x244>)
 8003a9a:	230a      	movs	r3, #10
 8003a9c:	e019      	b.n	8003ad2 <_printf_i+0x102>
 8003a9e:	680e      	ldr	r6, [r1, #0]
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aa6:	bf18      	it	ne
 8003aa8:	b236      	sxthne	r6, r6
 8003aaa:	e7ef      	b.n	8003a8c <_printf_i+0xbc>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	1d19      	adds	r1, r3, #4
 8003ab2:	6029      	str	r1, [r5, #0]
 8003ab4:	0601      	lsls	r1, r0, #24
 8003ab6:	d501      	bpl.n	8003abc <_printf_i+0xec>
 8003ab8:	681e      	ldr	r6, [r3, #0]
 8003aba:	e002      	b.n	8003ac2 <_printf_i+0xf2>
 8003abc:	0646      	lsls	r6, r0, #25
 8003abe:	d5fb      	bpl.n	8003ab8 <_printf_i+0xe8>
 8003ac0:	881e      	ldrh	r6, [r3, #0]
 8003ac2:	4854      	ldr	r0, [pc, #336]	; (8003c14 <_printf_i+0x244>)
 8003ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2308      	moveq	r3, #8
 8003aca:	230a      	movne	r3, #10
 8003acc:	2100      	movs	r1, #0
 8003ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ad2:	6865      	ldr	r5, [r4, #4]
 8003ad4:	60a5      	str	r5, [r4, #8]
 8003ad6:	2d00      	cmp	r5, #0
 8003ad8:	bfa2      	ittt	ge
 8003ada:	6821      	ldrge	r1, [r4, #0]
 8003adc:	f021 0104 	bicge.w	r1, r1, #4
 8003ae0:	6021      	strge	r1, [r4, #0]
 8003ae2:	b90e      	cbnz	r6, 8003ae8 <_printf_i+0x118>
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	d04d      	beq.n	8003b84 <_printf_i+0x1b4>
 8003ae8:	4615      	mov	r5, r2
 8003aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8003aee:	fb03 6711 	mls	r7, r3, r1, r6
 8003af2:	5dc7      	ldrb	r7, [r0, r7]
 8003af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003af8:	4637      	mov	r7, r6
 8003afa:	42bb      	cmp	r3, r7
 8003afc:	460e      	mov	r6, r1
 8003afe:	d9f4      	bls.n	8003aea <_printf_i+0x11a>
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d10b      	bne.n	8003b1c <_printf_i+0x14c>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	07de      	lsls	r6, r3, #31
 8003b08:	d508      	bpl.n	8003b1c <_printf_i+0x14c>
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	6861      	ldr	r1, [r4, #4]
 8003b0e:	4299      	cmp	r1, r3
 8003b10:	bfde      	ittt	le
 8003b12:	2330      	movle	r3, #48	; 0x30
 8003b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b1c:	1b52      	subs	r2, r2, r5
 8003b1e:	6122      	str	r2, [r4, #16]
 8003b20:	f8cd a000 	str.w	sl, [sp]
 8003b24:	464b      	mov	r3, r9
 8003b26:	aa03      	add	r2, sp, #12
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f7ff fee2 	bl	80038f4 <_printf_common>
 8003b30:	3001      	adds	r0, #1
 8003b32:	d14c      	bne.n	8003bce <_printf_i+0x1fe>
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b38:	b004      	add	sp, #16
 8003b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3e:	4835      	ldr	r0, [pc, #212]	; (8003c14 <_printf_i+0x244>)
 8003b40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b44:	6829      	ldr	r1, [r5, #0]
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b4c:	6029      	str	r1, [r5, #0]
 8003b4e:	061d      	lsls	r5, r3, #24
 8003b50:	d514      	bpl.n	8003b7c <_printf_i+0x1ac>
 8003b52:	07df      	lsls	r7, r3, #31
 8003b54:	bf44      	itt	mi
 8003b56:	f043 0320 	orrmi.w	r3, r3, #32
 8003b5a:	6023      	strmi	r3, [r4, #0]
 8003b5c:	b91e      	cbnz	r6, 8003b66 <_printf_i+0x196>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f023 0320 	bic.w	r3, r3, #32
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	2310      	movs	r3, #16
 8003b68:	e7b0      	b.n	8003acc <_printf_i+0xfc>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	f043 0320 	orr.w	r3, r3, #32
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	2378      	movs	r3, #120	; 0x78
 8003b74:	4828      	ldr	r0, [pc, #160]	; (8003c18 <_printf_i+0x248>)
 8003b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b7a:	e7e3      	b.n	8003b44 <_printf_i+0x174>
 8003b7c:	0659      	lsls	r1, r3, #25
 8003b7e:	bf48      	it	mi
 8003b80:	b2b6      	uxthmi	r6, r6
 8003b82:	e7e6      	b.n	8003b52 <_printf_i+0x182>
 8003b84:	4615      	mov	r5, r2
 8003b86:	e7bb      	b.n	8003b00 <_printf_i+0x130>
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	6826      	ldr	r6, [r4, #0]
 8003b8c:	6961      	ldr	r1, [r4, #20]
 8003b8e:	1d18      	adds	r0, r3, #4
 8003b90:	6028      	str	r0, [r5, #0]
 8003b92:	0635      	lsls	r5, r6, #24
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	d501      	bpl.n	8003b9c <_printf_i+0x1cc>
 8003b98:	6019      	str	r1, [r3, #0]
 8003b9a:	e002      	b.n	8003ba2 <_printf_i+0x1d2>
 8003b9c:	0670      	lsls	r0, r6, #25
 8003b9e:	d5fb      	bpl.n	8003b98 <_printf_i+0x1c8>
 8003ba0:	8019      	strh	r1, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	4615      	mov	r5, r2
 8003ba8:	e7ba      	b.n	8003b20 <_printf_i+0x150>
 8003baa:	682b      	ldr	r3, [r5, #0]
 8003bac:	1d1a      	adds	r2, r3, #4
 8003bae:	602a      	str	r2, [r5, #0]
 8003bb0:	681d      	ldr	r5, [r3, #0]
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7fc fcba 	bl	8000530 <memchr>
 8003bbc:	b108      	cbz	r0, 8003bc2 <_printf_i+0x1f2>
 8003bbe:	1b40      	subs	r0, r0, r5
 8003bc0:	6060      	str	r0, [r4, #4]
 8003bc2:	6863      	ldr	r3, [r4, #4]
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bcc:	e7a8      	b.n	8003b20 <_printf_i+0x150>
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	462a      	mov	r2, r5
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	47d0      	blx	sl
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d0ab      	beq.n	8003b34 <_printf_i+0x164>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	079b      	lsls	r3, r3, #30
 8003be0:	d413      	bmi.n	8003c0a <_printf_i+0x23a>
 8003be2:	68e0      	ldr	r0, [r4, #12]
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	4298      	cmp	r0, r3
 8003be8:	bfb8      	it	lt
 8003bea:	4618      	movlt	r0, r3
 8003bec:	e7a4      	b.n	8003b38 <_printf_i+0x168>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	47d0      	blx	sl
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d09b      	beq.n	8003b34 <_printf_i+0x164>
 8003bfc:	3501      	adds	r5, #1
 8003bfe:	68e3      	ldr	r3, [r4, #12]
 8003c00:	9903      	ldr	r1, [sp, #12]
 8003c02:	1a5b      	subs	r3, r3, r1
 8003c04:	42ab      	cmp	r3, r5
 8003c06:	dcf2      	bgt.n	8003bee <_printf_i+0x21e>
 8003c08:	e7eb      	b.n	8003be2 <_printf_i+0x212>
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	f104 0619 	add.w	r6, r4, #25
 8003c10:	e7f5      	b.n	8003bfe <_printf_i+0x22e>
 8003c12:	bf00      	nop
 8003c14:	08012618 	.word	0x08012618
 8003c18:	08012629 	.word	0x08012629

08003c1c <iprintf>:
 8003c1c:	b40f      	push	{r0, r1, r2, r3}
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <iprintf+0x2c>)
 8003c20:	b513      	push	{r0, r1, r4, lr}
 8003c22:	681c      	ldr	r4, [r3, #0]
 8003c24:	b124      	cbz	r4, 8003c30 <iprintf+0x14>
 8003c26:	69a3      	ldr	r3, [r4, #24]
 8003c28:	b913      	cbnz	r3, 8003c30 <iprintf+0x14>
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f001 fb08 	bl	8005240 <__sinit>
 8003c30:	ab05      	add	r3, sp, #20
 8003c32:	9a04      	ldr	r2, [sp, #16]
 8003c34:	68a1      	ldr	r1, [r4, #8]
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f002 fa05 	bl	8006048 <_vfiprintf_r>
 8003c3e:	b002      	add	sp, #8
 8003c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c44:	b004      	add	sp, #16
 8003c46:	4770      	bx	lr
 8003c48:	200001b0 	.word	0x200001b0

08003c4c <putchar>:
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <putchar+0x28>)
 8003c4e:	b513      	push	{r0, r1, r4, lr}
 8003c50:	681c      	ldr	r4, [r3, #0]
 8003c52:	4601      	mov	r1, r0
 8003c54:	b134      	cbz	r4, 8003c64 <putchar+0x18>
 8003c56:	69a3      	ldr	r3, [r4, #24]
 8003c58:	b923      	cbnz	r3, 8003c64 <putchar+0x18>
 8003c5a:	9001      	str	r0, [sp, #4]
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f001 faef 	bl	8005240 <__sinit>
 8003c62:	9901      	ldr	r1, [sp, #4]
 8003c64:	68a2      	ldr	r2, [r4, #8]
 8003c66:	4620      	mov	r0, r4
 8003c68:	b002      	add	sp, #8
 8003c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6e:	f002 bb1b 	b.w	80062a8 <_putc_r>
 8003c72:	bf00      	nop
 8003c74:	200001b0 	.word	0x200001b0

08003c78 <_puts_r>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	4605      	mov	r5, r0
 8003c7e:	b118      	cbz	r0, 8003c88 <_puts_r+0x10>
 8003c80:	6983      	ldr	r3, [r0, #24]
 8003c82:	b90b      	cbnz	r3, 8003c88 <_puts_r+0x10>
 8003c84:	f001 fadc 	bl	8005240 <__sinit>
 8003c88:	69ab      	ldr	r3, [r5, #24]
 8003c8a:	68ac      	ldr	r4, [r5, #8]
 8003c8c:	b913      	cbnz	r3, 8003c94 <_puts_r+0x1c>
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f001 fad6 	bl	8005240 <__sinit>
 8003c94:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <_puts_r+0xd0>)
 8003c96:	429c      	cmp	r4, r3
 8003c98:	d120      	bne.n	8003cdc <_puts_r+0x64>
 8003c9a:	686c      	ldr	r4, [r5, #4]
 8003c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c9e:	07db      	lsls	r3, r3, #31
 8003ca0:	d405      	bmi.n	8003cae <_puts_r+0x36>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	0598      	lsls	r0, r3, #22
 8003ca6:	d402      	bmi.n	8003cae <_puts_r+0x36>
 8003ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003caa:	f001 fb7e 	bl	80053aa <__retarget_lock_acquire_recursive>
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	0719      	lsls	r1, r3, #28
 8003cb2:	d51d      	bpl.n	8003cf0 <_puts_r+0x78>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	b1db      	cbz	r3, 8003cf0 <_puts_r+0x78>
 8003cb8:	3e01      	subs	r6, #1
 8003cba:	68a3      	ldr	r3, [r4, #8]
 8003cbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60a3      	str	r3, [r4, #8]
 8003cc4:	bb39      	cbnz	r1, 8003d16 <_puts_r+0x9e>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da38      	bge.n	8003d3c <_puts_r+0xc4>
 8003cca:	4622      	mov	r2, r4
 8003ccc:	210a      	movs	r1, #10
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 fa42 	bl	8004158 <__swbuf_r>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d011      	beq.n	8003cfc <_puts_r+0x84>
 8003cd8:	250a      	movs	r5, #10
 8003cda:	e011      	b.n	8003d00 <_puts_r+0x88>
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <_puts_r+0xd4>)
 8003cde:	429c      	cmp	r4, r3
 8003ce0:	d101      	bne.n	8003ce6 <_puts_r+0x6e>
 8003ce2:	68ac      	ldr	r4, [r5, #8]
 8003ce4:	e7da      	b.n	8003c9c <_puts_r+0x24>
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <_puts_r+0xd8>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	bf08      	it	eq
 8003cec:	68ec      	ldreq	r4, [r5, #12]
 8003cee:	e7d5      	b.n	8003c9c <_puts_r+0x24>
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 fa82 	bl	80041fc <__swsetup_r>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d0dd      	beq.n	8003cb8 <_puts_r+0x40>
 8003cfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d02:	07da      	lsls	r2, r3, #31
 8003d04:	d405      	bmi.n	8003d12 <_puts_r+0x9a>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	059b      	lsls	r3, r3, #22
 8003d0a:	d402      	bmi.n	8003d12 <_puts_r+0x9a>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0e:	f001 fb4d 	bl	80053ac <__retarget_lock_release_recursive>
 8003d12:	4628      	mov	r0, r5
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da04      	bge.n	8003d24 <_puts_r+0xac>
 8003d1a:	69a2      	ldr	r2, [r4, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dc06      	bgt.n	8003d2e <_puts_r+0xb6>
 8003d20:	290a      	cmp	r1, #10
 8003d22:	d004      	beq.n	8003d2e <_puts_r+0xb6>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	6022      	str	r2, [r4, #0]
 8003d2a:	7019      	strb	r1, [r3, #0]
 8003d2c:	e7c5      	b.n	8003cba <_puts_r+0x42>
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 fa11 	bl	8004158 <__swbuf_r>
 8003d36:	3001      	adds	r0, #1
 8003d38:	d1bf      	bne.n	8003cba <_puts_r+0x42>
 8003d3a:	e7df      	b.n	8003cfc <_puts_r+0x84>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	250a      	movs	r5, #10
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	6022      	str	r2, [r4, #0]
 8003d44:	701d      	strb	r5, [r3, #0]
 8003d46:	e7db      	b.n	8003d00 <_puts_r+0x88>
 8003d48:	080127c8 	.word	0x080127c8
 8003d4c:	080127e8 	.word	0x080127e8
 8003d50:	080127a8 	.word	0x080127a8

08003d54 <puts>:
 8003d54:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <puts+0xc>)
 8003d56:	4601      	mov	r1, r0
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f7ff bf8d 	b.w	8003c78 <_puts_r>
 8003d5e:	bf00      	nop
 8003d60:	200001b0 	.word	0x200001b0

08003d64 <setvbuf>:
 8003d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	461d      	mov	r5, r3
 8003d6a:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <setvbuf+0x17c>)
 8003d6c:	681f      	ldr	r7, [r3, #0]
 8003d6e:	4604      	mov	r4, r0
 8003d70:	460e      	mov	r6, r1
 8003d72:	4690      	mov	r8, r2
 8003d74:	b127      	cbz	r7, 8003d80 <setvbuf+0x1c>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	b913      	cbnz	r3, 8003d80 <setvbuf+0x1c>
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	f001 fa60 	bl	8005240 <__sinit>
 8003d80:	4b58      	ldr	r3, [pc, #352]	; (8003ee4 <setvbuf+0x180>)
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d167      	bne.n	8003e56 <setvbuf+0xf2>
 8003d86:	687c      	ldr	r4, [r7, #4]
 8003d88:	f1b8 0f02 	cmp.w	r8, #2
 8003d8c:	d006      	beq.n	8003d9c <setvbuf+0x38>
 8003d8e:	f1b8 0f01 	cmp.w	r8, #1
 8003d92:	f200 809f 	bhi.w	8003ed4 <setvbuf+0x170>
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	f2c0 809c 	blt.w	8003ed4 <setvbuf+0x170>
 8003d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d9e:	07db      	lsls	r3, r3, #31
 8003da0:	d405      	bmi.n	8003dae <setvbuf+0x4a>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	0598      	lsls	r0, r3, #22
 8003da6:	d402      	bmi.n	8003dae <setvbuf+0x4a>
 8003da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003daa:	f001 fafe 	bl	80053aa <__retarget_lock_acquire_recursive>
 8003dae:	4621      	mov	r1, r4
 8003db0:	4638      	mov	r0, r7
 8003db2:	f001 f9b1 	bl	8005118 <_fflush_r>
 8003db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003db8:	b141      	cbz	r1, 8003dcc <setvbuf+0x68>
 8003dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dbe:	4299      	cmp	r1, r3
 8003dc0:	d002      	beq.n	8003dc8 <setvbuf+0x64>
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f001 ff14 	bl	8005bf0 <_free_r>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6363      	str	r3, [r4, #52]	; 0x34
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61a3      	str	r3, [r4, #24]
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	0619      	lsls	r1, r3, #24
 8003dd6:	d503      	bpl.n	8003de0 <setvbuf+0x7c>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	4638      	mov	r0, r7
 8003ddc:	f001 ff08 	bl	8005bf0 <_free_r>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	f1b8 0f02 	cmp.w	r8, #2
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	d06c      	beq.n	8003ecc <setvbuf+0x168>
 8003df2:	ab01      	add	r3, sp, #4
 8003df4:	466a      	mov	r2, sp
 8003df6:	4621      	mov	r1, r4
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f001 fad8 	bl	80053ae <__swhatbuf_r>
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	4318      	orrs	r0, r3
 8003e02:	81a0      	strh	r0, [r4, #12]
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	d130      	bne.n	8003e6a <setvbuf+0x106>
 8003e08:	9d00      	ldr	r5, [sp, #0]
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f001 fb34 	bl	8005478 <malloc>
 8003e10:	4606      	mov	r6, r0
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d155      	bne.n	8003ec2 <setvbuf+0x15e>
 8003e16:	f8dd 9000 	ldr.w	r9, [sp]
 8003e1a:	45a9      	cmp	r9, r5
 8003e1c:	d14a      	bne.n	8003eb4 <setvbuf+0x150>
 8003e1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e22:	2200      	movs	r2, #0
 8003e24:	60a2      	str	r2, [r4, #8]
 8003e26:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003e2a:	6022      	str	r2, [r4, #0]
 8003e2c:	6122      	str	r2, [r4, #16]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e34:	6162      	str	r2, [r4, #20]
 8003e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	07d2      	lsls	r2, r2, #31
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	d405      	bmi.n	8003e4e <setvbuf+0xea>
 8003e42:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e46:	d102      	bne.n	8003e4e <setvbuf+0xea>
 8003e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e4a:	f001 faaf 	bl	80053ac <__retarget_lock_release_recursive>
 8003e4e:	4628      	mov	r0, r5
 8003e50:	b003      	add	sp, #12
 8003e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <setvbuf+0x184>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	d101      	bne.n	8003e60 <setvbuf+0xfc>
 8003e5c:	68bc      	ldr	r4, [r7, #8]
 8003e5e:	e793      	b.n	8003d88 <setvbuf+0x24>
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <setvbuf+0x188>)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	bf08      	it	eq
 8003e66:	68fc      	ldreq	r4, [r7, #12]
 8003e68:	e78e      	b.n	8003d88 <setvbuf+0x24>
 8003e6a:	2e00      	cmp	r6, #0
 8003e6c:	d0cd      	beq.n	8003e0a <setvbuf+0xa6>
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	b913      	cbnz	r3, 8003e78 <setvbuf+0x114>
 8003e72:	4638      	mov	r0, r7
 8003e74:	f001 f9e4 	bl	8005240 <__sinit>
 8003e78:	f1b8 0f01 	cmp.w	r8, #1
 8003e7c:	bf08      	it	eq
 8003e7e:	89a3      	ldrheq	r3, [r4, #12]
 8003e80:	6026      	str	r6, [r4, #0]
 8003e82:	bf04      	itt	eq
 8003e84:	f043 0301 	orreq.w	r3, r3, #1
 8003e88:	81a3      	strheq	r3, [r4, #12]
 8003e8a:	89a2      	ldrh	r2, [r4, #12]
 8003e8c:	f012 0308 	ands.w	r3, r2, #8
 8003e90:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e94:	d01c      	beq.n	8003ed0 <setvbuf+0x16c>
 8003e96:	07d3      	lsls	r3, r2, #31
 8003e98:	bf41      	itttt	mi
 8003e9a:	2300      	movmi	r3, #0
 8003e9c:	426d      	negmi	r5, r5
 8003e9e:	60a3      	strmi	r3, [r4, #8]
 8003ea0:	61a5      	strmi	r5, [r4, #24]
 8003ea2:	bf58      	it	pl
 8003ea4:	60a5      	strpl	r5, [r4, #8]
 8003ea6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003ea8:	f015 0501 	ands.w	r5, r5, #1
 8003eac:	d115      	bne.n	8003eda <setvbuf+0x176>
 8003eae:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003eb2:	e7c8      	b.n	8003e46 <setvbuf+0xe2>
 8003eb4:	4648      	mov	r0, r9
 8003eb6:	f001 fadf 	bl	8005478 <malloc>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d0ae      	beq.n	8003e1e <setvbuf+0xba>
 8003ec0:	464d      	mov	r5, r9
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	e7d0      	b.n	8003e6e <setvbuf+0x10a>
 8003ecc:	2500      	movs	r5, #0
 8003ece:	e7a8      	b.n	8003e22 <setvbuf+0xbe>
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	e7e8      	b.n	8003ea6 <setvbuf+0x142>
 8003ed4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ed8:	e7b9      	b.n	8003e4e <setvbuf+0xea>
 8003eda:	2500      	movs	r5, #0
 8003edc:	e7b7      	b.n	8003e4e <setvbuf+0xea>
 8003ede:	bf00      	nop
 8003ee0:	200001b0 	.word	0x200001b0
 8003ee4:	080127c8 	.word	0x080127c8
 8003ee8:	080127e8 	.word	0x080127e8
 8003eec:	080127a8 	.word	0x080127a8

08003ef0 <strcasecmp>:
 8003ef0:	b530      	push	{r4, r5, lr}
 8003ef2:	4d0b      	ldr	r5, [pc, #44]	; (8003f20 <strcasecmp+0x30>)
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003efa:	5d5a      	ldrb	r2, [r3, r5]
 8003efc:	f002 0203 	and.w	r2, r2, #3
 8003f00:	2a01      	cmp	r2, #1
 8003f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f06:	5ca8      	ldrb	r0, [r5, r2]
 8003f08:	f000 0003 	and.w	r0, r0, #3
 8003f0c:	bf08      	it	eq
 8003f0e:	3320      	addeq	r3, #32
 8003f10:	2801      	cmp	r0, #1
 8003f12:	bf08      	it	eq
 8003f14:	3220      	addeq	r2, #32
 8003f16:	1a98      	subs	r0, r3, r2
 8003f18:	d101      	bne.n	8003f1e <strcasecmp+0x2e>
 8003f1a:	2a00      	cmp	r2, #0
 8003f1c:	d1eb      	bne.n	8003ef6 <strcasecmp+0x6>
 8003f1e:	bd30      	pop	{r4, r5, pc}
 8003f20:	08012504 	.word	0x08012504

08003f24 <strcpy>:
 8003f24:	4603      	mov	r3, r0
 8003f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f2a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	d1f9      	bne.n	8003f26 <strcpy+0x2>
 8003f32:	4770      	bx	lr

08003f34 <strtok>:
 8003f34:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <strtok+0x5c>)
 8003f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f38:	681e      	ldr	r6, [r3, #0]
 8003f3a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	b9fc      	cbnz	r4, 8003f80 <strtok+0x4c>
 8003f40:	2050      	movs	r0, #80	; 0x50
 8003f42:	9101      	str	r1, [sp, #4]
 8003f44:	f001 fa98 	bl	8005478 <malloc>
 8003f48:	9901      	ldr	r1, [sp, #4]
 8003f4a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	b920      	cbnz	r0, 8003f5a <strtok+0x26>
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <strtok+0x60>)
 8003f52:	4811      	ldr	r0, [pc, #68]	; (8003f98 <strtok+0x64>)
 8003f54:	2157      	movs	r1, #87	; 0x57
 8003f56:	f000 f9bf 	bl	80042d8 <__assert_func>
 8003f5a:	e9c0 4400 	strd	r4, r4, [r0]
 8003f5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003f62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003f66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003f6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003f6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003f72:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003f76:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003f7a:	6184      	str	r4, [r0, #24]
 8003f7c:	7704      	strb	r4, [r0, #28]
 8003f7e:	6244      	str	r4, [r0, #36]	; 0x24
 8003f80:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003f82:	2301      	movs	r3, #1
 8003f84:	4628      	mov	r0, r5
 8003f86:	b002      	add	sp, #8
 8003f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f8c:	f000 b806 	b.w	8003f9c <__strtok_r>
 8003f90:	200001b0 	.word	0x200001b0
 8003f94:	0801263a 	.word	0x0801263a
 8003f98:	08012651 	.word	0x08012651

08003f9c <__strtok_r>:
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	b908      	cbnz	r0, 8003fa4 <__strtok_r+0x8>
 8003fa0:	6810      	ldr	r0, [r2, #0]
 8003fa2:	b188      	cbz	r0, 8003fc8 <__strtok_r+0x2c>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003fac:	460f      	mov	r7, r1
 8003fae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003fb2:	b91e      	cbnz	r6, 8003fbc <__strtok_r+0x20>
 8003fb4:	b965      	cbnz	r5, 8003fd0 <__strtok_r+0x34>
 8003fb6:	6015      	str	r5, [r2, #0]
 8003fb8:	4628      	mov	r0, r5
 8003fba:	e005      	b.n	8003fc8 <__strtok_r+0x2c>
 8003fbc:	42b5      	cmp	r5, r6
 8003fbe:	d1f6      	bne.n	8003fae <__strtok_r+0x12>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <__strtok_r+0xa>
 8003fc4:	6014      	str	r4, [r2, #0]
 8003fc6:	7003      	strb	r3, [r0, #0]
 8003fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fca:	461c      	mov	r4, r3
 8003fcc:	e00c      	b.n	8003fe8 <__strtok_r+0x4c>
 8003fce:	b915      	cbnz	r5, 8003fd6 <__strtok_r+0x3a>
 8003fd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fd4:	460e      	mov	r6, r1
 8003fd6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003fda:	42ab      	cmp	r3, r5
 8003fdc:	d1f7      	bne.n	8003fce <__strtok_r+0x32>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f3      	beq.n	8003fca <__strtok_r+0x2e>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003fe8:	6014      	str	r4, [r2, #0]
 8003fea:	e7ed      	b.n	8003fc8 <__strtok_r+0x2c>

08003fec <_strtoul_l.constprop.0>:
 8003fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	4f36      	ldr	r7, [pc, #216]	; (80040cc <_strtoul_l.constprop.0+0xe0>)
 8003ff2:	4686      	mov	lr, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ffc:	5de6      	ldrb	r6, [r4, r7]
 8003ffe:	f016 0608 	ands.w	r6, r6, #8
 8004002:	d1f8      	bne.n	8003ff6 <_strtoul_l.constprop.0+0xa>
 8004004:	2c2d      	cmp	r4, #45	; 0x2d
 8004006:	d12f      	bne.n	8004068 <_strtoul_l.constprop.0+0x7c>
 8004008:	782c      	ldrb	r4, [r5, #0]
 800400a:	2601      	movs	r6, #1
 800400c:	1c85      	adds	r5, r0, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d057      	beq.n	80040c2 <_strtoul_l.constprop.0+0xd6>
 8004012:	2b10      	cmp	r3, #16
 8004014:	d109      	bne.n	800402a <_strtoul_l.constprop.0+0x3e>
 8004016:	2c30      	cmp	r4, #48	; 0x30
 8004018:	d107      	bne.n	800402a <_strtoul_l.constprop.0+0x3e>
 800401a:	7828      	ldrb	r0, [r5, #0]
 800401c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004020:	2858      	cmp	r0, #88	; 0x58
 8004022:	d149      	bne.n	80040b8 <_strtoul_l.constprop.0+0xcc>
 8004024:	786c      	ldrb	r4, [r5, #1]
 8004026:	2310      	movs	r3, #16
 8004028:	3502      	adds	r5, #2
 800402a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800402e:	2700      	movs	r7, #0
 8004030:	fbb8 f8f3 	udiv	r8, r8, r3
 8004034:	fb03 f908 	mul.w	r9, r3, r8
 8004038:	ea6f 0909 	mvn.w	r9, r9
 800403c:	4638      	mov	r0, r7
 800403e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004042:	f1bc 0f09 	cmp.w	ip, #9
 8004046:	d814      	bhi.n	8004072 <_strtoul_l.constprop.0+0x86>
 8004048:	4664      	mov	r4, ip
 800404a:	42a3      	cmp	r3, r4
 800404c:	dd22      	ble.n	8004094 <_strtoul_l.constprop.0+0xa8>
 800404e:	2f00      	cmp	r7, #0
 8004050:	db1d      	blt.n	800408e <_strtoul_l.constprop.0+0xa2>
 8004052:	4580      	cmp	r8, r0
 8004054:	d31b      	bcc.n	800408e <_strtoul_l.constprop.0+0xa2>
 8004056:	d101      	bne.n	800405c <_strtoul_l.constprop.0+0x70>
 8004058:	45a1      	cmp	r9, r4
 800405a:	db18      	blt.n	800408e <_strtoul_l.constprop.0+0xa2>
 800405c:	fb00 4003 	mla	r0, r0, r3, r4
 8004060:	2701      	movs	r7, #1
 8004062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004066:	e7ea      	b.n	800403e <_strtoul_l.constprop.0+0x52>
 8004068:	2c2b      	cmp	r4, #43	; 0x2b
 800406a:	bf04      	itt	eq
 800406c:	782c      	ldrbeq	r4, [r5, #0]
 800406e:	1c85      	addeq	r5, r0, #2
 8004070:	e7cd      	b.n	800400e <_strtoul_l.constprop.0+0x22>
 8004072:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004076:	f1bc 0f19 	cmp.w	ip, #25
 800407a:	d801      	bhi.n	8004080 <_strtoul_l.constprop.0+0x94>
 800407c:	3c37      	subs	r4, #55	; 0x37
 800407e:	e7e4      	b.n	800404a <_strtoul_l.constprop.0+0x5e>
 8004080:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004084:	f1bc 0f19 	cmp.w	ip, #25
 8004088:	d804      	bhi.n	8004094 <_strtoul_l.constprop.0+0xa8>
 800408a:	3c57      	subs	r4, #87	; 0x57
 800408c:	e7dd      	b.n	800404a <_strtoul_l.constprop.0+0x5e>
 800408e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004092:	e7e6      	b.n	8004062 <_strtoul_l.constprop.0+0x76>
 8004094:	2f00      	cmp	r7, #0
 8004096:	da07      	bge.n	80040a8 <_strtoul_l.constprop.0+0xbc>
 8004098:	2322      	movs	r3, #34	; 0x22
 800409a:	f8ce 3000 	str.w	r3, [lr]
 800409e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a2:	b932      	cbnz	r2, 80040b2 <_strtoul_l.constprop.0+0xc6>
 80040a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040a8:	b106      	cbz	r6, 80040ac <_strtoul_l.constprop.0+0xc0>
 80040aa:	4240      	negs	r0, r0
 80040ac:	2a00      	cmp	r2, #0
 80040ae:	d0f9      	beq.n	80040a4 <_strtoul_l.constprop.0+0xb8>
 80040b0:	b107      	cbz	r7, 80040b4 <_strtoul_l.constprop.0+0xc8>
 80040b2:	1e69      	subs	r1, r5, #1
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	e7f5      	b.n	80040a4 <_strtoul_l.constprop.0+0xb8>
 80040b8:	2430      	movs	r4, #48	; 0x30
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1b5      	bne.n	800402a <_strtoul_l.constprop.0+0x3e>
 80040be:	2308      	movs	r3, #8
 80040c0:	e7b3      	b.n	800402a <_strtoul_l.constprop.0+0x3e>
 80040c2:	2c30      	cmp	r4, #48	; 0x30
 80040c4:	d0a9      	beq.n	800401a <_strtoul_l.constprop.0+0x2e>
 80040c6:	230a      	movs	r3, #10
 80040c8:	e7af      	b.n	800402a <_strtoul_l.constprop.0+0x3e>
 80040ca:	bf00      	nop
 80040cc:	08012504 	.word	0x08012504

080040d0 <strtoul>:
 80040d0:	4613      	mov	r3, r2
 80040d2:	460a      	mov	r2, r1
 80040d4:	4601      	mov	r1, r0
 80040d6:	4802      	ldr	r0, [pc, #8]	; (80040e0 <strtoul+0x10>)
 80040d8:	6800      	ldr	r0, [r0, #0]
 80040da:	f7ff bf87 	b.w	8003fec <_strtoul_l.constprop.0>
 80040de:	bf00      	nop
 80040e0:	200001b0 	.word	0x200001b0

080040e4 <_vsniprintf_r>:
 80040e4:	b530      	push	{r4, r5, lr}
 80040e6:	4614      	mov	r4, r2
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	b09b      	sub	sp, #108	; 0x6c
 80040ec:	4605      	mov	r5, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	da05      	bge.n	80040fe <_vsniprintf_r+0x1a>
 80040f2:	238b      	movs	r3, #139	; 0x8b
 80040f4:	6003      	str	r3, [r0, #0]
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040fa:	b01b      	add	sp, #108	; 0x6c
 80040fc:	bd30      	pop	{r4, r5, pc}
 80040fe:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004102:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004106:	bf14      	ite	ne
 8004108:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800410c:	4623      	moveq	r3, r4
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004116:	9100      	str	r1, [sp, #0]
 8004118:	9104      	str	r1, [sp, #16]
 800411a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800411e:	4669      	mov	r1, sp
 8004120:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004122:	f001 fe67 	bl	8005df4 <_svfiprintf_r>
 8004126:	1c43      	adds	r3, r0, #1
 8004128:	bfbc      	itt	lt
 800412a:	238b      	movlt	r3, #139	; 0x8b
 800412c:	602b      	strlt	r3, [r5, #0]
 800412e:	2c00      	cmp	r4, #0
 8004130:	d0e3      	beq.n	80040fa <_vsniprintf_r+0x16>
 8004132:	9b00      	ldr	r3, [sp, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e7df      	b.n	80040fa <_vsniprintf_r+0x16>
	...

0800413c <vsniprintf>:
 800413c:	b507      	push	{r0, r1, r2, lr}
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	460a      	mov	r2, r1
 8004144:	4601      	mov	r1, r0
 8004146:	4803      	ldr	r0, [pc, #12]	; (8004154 <vsniprintf+0x18>)
 8004148:	6800      	ldr	r0, [r0, #0]
 800414a:	f7ff ffcb 	bl	80040e4 <_vsniprintf_r>
 800414e:	b003      	add	sp, #12
 8004150:	f85d fb04 	ldr.w	pc, [sp], #4
 8004154:	200001b0 	.word	0x200001b0

08004158 <__swbuf_r>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	460e      	mov	r6, r1
 800415c:	4614      	mov	r4, r2
 800415e:	4605      	mov	r5, r0
 8004160:	b118      	cbz	r0, 800416a <__swbuf_r+0x12>
 8004162:	6983      	ldr	r3, [r0, #24]
 8004164:	b90b      	cbnz	r3, 800416a <__swbuf_r+0x12>
 8004166:	f001 f86b 	bl	8005240 <__sinit>
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <__swbuf_r+0x98>)
 800416c:	429c      	cmp	r4, r3
 800416e:	d12b      	bne.n	80041c8 <__swbuf_r+0x70>
 8004170:	686c      	ldr	r4, [r5, #4]
 8004172:	69a3      	ldr	r3, [r4, #24]
 8004174:	60a3      	str	r3, [r4, #8]
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	071a      	lsls	r2, r3, #28
 800417a:	d52f      	bpl.n	80041dc <__swbuf_r+0x84>
 800417c:	6923      	ldr	r3, [r4, #16]
 800417e:	b36b      	cbz	r3, 80041dc <__swbuf_r+0x84>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	6963      	ldr	r3, [r4, #20]
 8004188:	b2f6      	uxtb	r6, r6
 800418a:	4283      	cmp	r3, r0
 800418c:	4637      	mov	r7, r6
 800418e:	dc04      	bgt.n	800419a <__swbuf_r+0x42>
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f000 ffc0 	bl	8005118 <_fflush_r>
 8004198:	bb30      	cbnz	r0, 80041e8 <__swbuf_r+0x90>
 800419a:	68a3      	ldr	r3, [r4, #8]
 800419c:	3b01      	subs	r3, #1
 800419e:	60a3      	str	r3, [r4, #8]
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	6022      	str	r2, [r4, #0]
 80041a6:	701e      	strb	r6, [r3, #0]
 80041a8:	6963      	ldr	r3, [r4, #20]
 80041aa:	3001      	adds	r0, #1
 80041ac:	4283      	cmp	r3, r0
 80041ae:	d004      	beq.n	80041ba <__swbuf_r+0x62>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	07db      	lsls	r3, r3, #31
 80041b4:	d506      	bpl.n	80041c4 <__swbuf_r+0x6c>
 80041b6:	2e0a      	cmp	r6, #10
 80041b8:	d104      	bne.n	80041c4 <__swbuf_r+0x6c>
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 ffab 	bl	8005118 <_fflush_r>
 80041c2:	b988      	cbnz	r0, 80041e8 <__swbuf_r+0x90>
 80041c4:	4638      	mov	r0, r7
 80041c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <__swbuf_r+0x9c>)
 80041ca:	429c      	cmp	r4, r3
 80041cc:	d101      	bne.n	80041d2 <__swbuf_r+0x7a>
 80041ce:	68ac      	ldr	r4, [r5, #8]
 80041d0:	e7cf      	b.n	8004172 <__swbuf_r+0x1a>
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <__swbuf_r+0xa0>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	bf08      	it	eq
 80041d8:	68ec      	ldreq	r4, [r5, #12]
 80041da:	e7ca      	b.n	8004172 <__swbuf_r+0x1a>
 80041dc:	4621      	mov	r1, r4
 80041de:	4628      	mov	r0, r5
 80041e0:	f000 f80c 	bl	80041fc <__swsetup_r>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d0cb      	beq.n	8004180 <__swbuf_r+0x28>
 80041e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041ec:	e7ea      	b.n	80041c4 <__swbuf_r+0x6c>
 80041ee:	bf00      	nop
 80041f0:	080127c8 	.word	0x080127c8
 80041f4:	080127e8 	.word	0x080127e8
 80041f8:	080127a8 	.word	0x080127a8

080041fc <__swsetup_r>:
 80041fc:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <__swsetup_r+0xcc>)
 80041fe:	b570      	push	{r4, r5, r6, lr}
 8004200:	681d      	ldr	r5, [r3, #0]
 8004202:	4606      	mov	r6, r0
 8004204:	460c      	mov	r4, r1
 8004206:	b125      	cbz	r5, 8004212 <__swsetup_r+0x16>
 8004208:	69ab      	ldr	r3, [r5, #24]
 800420a:	b913      	cbnz	r3, 8004212 <__swsetup_r+0x16>
 800420c:	4628      	mov	r0, r5
 800420e:	f001 f817 	bl	8005240 <__sinit>
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <__swsetup_r+0xd0>)
 8004214:	429c      	cmp	r4, r3
 8004216:	d10f      	bne.n	8004238 <__swsetup_r+0x3c>
 8004218:	686c      	ldr	r4, [r5, #4]
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004220:	0719      	lsls	r1, r3, #28
 8004222:	d42c      	bmi.n	800427e <__swsetup_r+0x82>
 8004224:	06dd      	lsls	r5, r3, #27
 8004226:	d411      	bmi.n	800424c <__swsetup_r+0x50>
 8004228:	2309      	movs	r3, #9
 800422a:	6033      	str	r3, [r6, #0]
 800422c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004236:	e03e      	b.n	80042b6 <__swsetup_r+0xba>
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <__swsetup_r+0xd4>)
 800423a:	429c      	cmp	r4, r3
 800423c:	d101      	bne.n	8004242 <__swsetup_r+0x46>
 800423e:	68ac      	ldr	r4, [r5, #8]
 8004240:	e7eb      	b.n	800421a <__swsetup_r+0x1e>
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <__swsetup_r+0xd8>)
 8004244:	429c      	cmp	r4, r3
 8004246:	bf08      	it	eq
 8004248:	68ec      	ldreq	r4, [r5, #12]
 800424a:	e7e6      	b.n	800421a <__swsetup_r+0x1e>
 800424c:	0758      	lsls	r0, r3, #29
 800424e:	d512      	bpl.n	8004276 <__swsetup_r+0x7a>
 8004250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004252:	b141      	cbz	r1, 8004266 <__swsetup_r+0x6a>
 8004254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004258:	4299      	cmp	r1, r3
 800425a:	d002      	beq.n	8004262 <__swsetup_r+0x66>
 800425c:	4630      	mov	r0, r6
 800425e:	f001 fcc7 	bl	8005bf0 <_free_r>
 8004262:	2300      	movs	r3, #0
 8004264:	6363      	str	r3, [r4, #52]	; 0x34
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	2300      	movs	r3, #0
 8004270:	6063      	str	r3, [r4, #4]
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	b94b      	cbnz	r3, 8004296 <__swsetup_r+0x9a>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d003      	beq.n	8004296 <__swsetup_r+0x9a>
 800428e:	4621      	mov	r1, r4
 8004290:	4630      	mov	r0, r6
 8004292:	f001 f8b1 	bl	80053f8 <__smakebuf_r>
 8004296:	89a0      	ldrh	r0, [r4, #12]
 8004298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800429c:	f010 0301 	ands.w	r3, r0, #1
 80042a0:	d00a      	beq.n	80042b8 <__swsetup_r+0xbc>
 80042a2:	2300      	movs	r3, #0
 80042a4:	60a3      	str	r3, [r4, #8]
 80042a6:	6963      	ldr	r3, [r4, #20]
 80042a8:	425b      	negs	r3, r3
 80042aa:	61a3      	str	r3, [r4, #24]
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	b943      	cbnz	r3, 80042c2 <__swsetup_r+0xc6>
 80042b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042b4:	d1ba      	bne.n	800422c <__swsetup_r+0x30>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	0781      	lsls	r1, r0, #30
 80042ba:	bf58      	it	pl
 80042bc:	6963      	ldrpl	r3, [r4, #20]
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	e7f4      	b.n	80042ac <__swsetup_r+0xb0>
 80042c2:	2000      	movs	r0, #0
 80042c4:	e7f7      	b.n	80042b6 <__swsetup_r+0xba>
 80042c6:	bf00      	nop
 80042c8:	200001b0 	.word	0x200001b0
 80042cc:	080127c8 	.word	0x080127c8
 80042d0:	080127e8 	.word	0x080127e8
 80042d4:	080127a8 	.word	0x080127a8

080042d8 <__assert_func>:
 80042d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042da:	4614      	mov	r4, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <__assert_func+0x2c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4605      	mov	r5, r0
 80042e4:	68d8      	ldr	r0, [r3, #12]
 80042e6:	b14c      	cbz	r4, 80042fc <__assert_func+0x24>
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <__assert_func+0x30>)
 80042ea:	9100      	str	r1, [sp, #0]
 80042ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042f0:	4906      	ldr	r1, [pc, #24]	; (800430c <__assert_func+0x34>)
 80042f2:	462b      	mov	r3, r5
 80042f4:	f001 f822 	bl	800533c <fiprintf>
 80042f8:	f002 f86e 	bl	80063d8 <abort>
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <__assert_func+0x38>)
 80042fe:	461c      	mov	r4, r3
 8004300:	e7f3      	b.n	80042ea <__assert_func+0x12>
 8004302:	bf00      	nop
 8004304:	200001b0 	.word	0x200001b0
 8004308:	080126d0 	.word	0x080126d0
 800430c:	080126dd 	.word	0x080126dd
 8004310:	08008c0f 	.word	0x08008c0f

08004314 <quorem>:
 8004314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	6903      	ldr	r3, [r0, #16]
 800431a:	690c      	ldr	r4, [r1, #16]
 800431c:	42a3      	cmp	r3, r4
 800431e:	4607      	mov	r7, r0
 8004320:	f2c0 8081 	blt.w	8004426 <quorem+0x112>
 8004324:	3c01      	subs	r4, #1
 8004326:	f101 0814 	add.w	r8, r1, #20
 800432a:	f100 0514 	add.w	r5, r0, #20
 800432e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800433c:	3301      	adds	r3, #1
 800433e:	429a      	cmp	r2, r3
 8004340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004348:	fbb2 f6f3 	udiv	r6, r2, r3
 800434c:	d331      	bcc.n	80043b2 <quorem+0x9e>
 800434e:	f04f 0e00 	mov.w	lr, #0
 8004352:	4640      	mov	r0, r8
 8004354:	46ac      	mov	ip, r5
 8004356:	46f2      	mov	sl, lr
 8004358:	f850 2b04 	ldr.w	r2, [r0], #4
 800435c:	b293      	uxth	r3, r2
 800435e:	fb06 e303 	mla	r3, r6, r3, lr
 8004362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004366:	b29b      	uxth	r3, r3
 8004368:	ebaa 0303 	sub.w	r3, sl, r3
 800436c:	0c12      	lsrs	r2, r2, #16
 800436e:	f8dc a000 	ldr.w	sl, [ip]
 8004372:	fb06 e202 	mla	r2, r6, r2, lr
 8004376:	fa13 f38a 	uxtah	r3, r3, sl
 800437a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800437e:	fa1f fa82 	uxth.w	sl, r2
 8004382:	f8dc 2000 	ldr.w	r2, [ip]
 8004386:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800438a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004394:	4581      	cmp	r9, r0
 8004396:	f84c 3b04 	str.w	r3, [ip], #4
 800439a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800439e:	d2db      	bcs.n	8004358 <quorem+0x44>
 80043a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80043a4:	b92b      	cbnz	r3, 80043b2 <quorem+0x9e>
 80043a6:	9b01      	ldr	r3, [sp, #4]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	429d      	cmp	r5, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	d32e      	bcc.n	800440e <quorem+0xfa>
 80043b0:	613c      	str	r4, [r7, #16]
 80043b2:	4638      	mov	r0, r7
 80043b4:	f001 fb0a 	bl	80059cc <__mcmp>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	db24      	blt.n	8004406 <quorem+0xf2>
 80043bc:	3601      	adds	r6, #1
 80043be:	4628      	mov	r0, r5
 80043c0:	f04f 0c00 	mov.w	ip, #0
 80043c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80043c8:	f8d0 e000 	ldr.w	lr, [r0]
 80043cc:	b293      	uxth	r3, r2
 80043ce:	ebac 0303 	sub.w	r3, ip, r3
 80043d2:	0c12      	lsrs	r2, r2, #16
 80043d4:	fa13 f38e 	uxtah	r3, r3, lr
 80043d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80043dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e6:	45c1      	cmp	r9, r8
 80043e8:	f840 3b04 	str.w	r3, [r0], #4
 80043ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80043f0:	d2e8      	bcs.n	80043c4 <quorem+0xb0>
 80043f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043fa:	b922      	cbnz	r2, 8004406 <quorem+0xf2>
 80043fc:	3b04      	subs	r3, #4
 80043fe:	429d      	cmp	r5, r3
 8004400:	461a      	mov	r2, r3
 8004402:	d30a      	bcc.n	800441a <quorem+0x106>
 8004404:	613c      	str	r4, [r7, #16]
 8004406:	4630      	mov	r0, r6
 8004408:	b003      	add	sp, #12
 800440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	3b04      	subs	r3, #4
 8004412:	2a00      	cmp	r2, #0
 8004414:	d1cc      	bne.n	80043b0 <quorem+0x9c>
 8004416:	3c01      	subs	r4, #1
 8004418:	e7c7      	b.n	80043aa <quorem+0x96>
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	3b04      	subs	r3, #4
 800441e:	2a00      	cmp	r2, #0
 8004420:	d1f0      	bne.n	8004404 <quorem+0xf0>
 8004422:	3c01      	subs	r4, #1
 8004424:	e7eb      	b.n	80043fe <quorem+0xea>
 8004426:	2000      	movs	r0, #0
 8004428:	e7ee      	b.n	8004408 <quorem+0xf4>
 800442a:	0000      	movs	r0, r0
 800442c:	0000      	movs	r0, r0
	...

08004430 <_dtoa_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	ed2d 8b04 	vpush	{d8-d9}
 8004438:	ec57 6b10 	vmov	r6, r7, d0
 800443c:	b093      	sub	sp, #76	; 0x4c
 800443e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004444:	9106      	str	r1, [sp, #24]
 8004446:	ee10 aa10 	vmov	sl, s0
 800444a:	4604      	mov	r4, r0
 800444c:	9209      	str	r2, [sp, #36]	; 0x24
 800444e:	930c      	str	r3, [sp, #48]	; 0x30
 8004450:	46bb      	mov	fp, r7
 8004452:	b975      	cbnz	r5, 8004472 <_dtoa_r+0x42>
 8004454:	2010      	movs	r0, #16
 8004456:	f001 f80f 	bl	8005478 <malloc>
 800445a:	4602      	mov	r2, r0
 800445c:	6260      	str	r0, [r4, #36]	; 0x24
 800445e:	b920      	cbnz	r0, 800446a <_dtoa_r+0x3a>
 8004460:	4ba7      	ldr	r3, [pc, #668]	; (8004700 <_dtoa_r+0x2d0>)
 8004462:	21ea      	movs	r1, #234	; 0xea
 8004464:	48a7      	ldr	r0, [pc, #668]	; (8004704 <_dtoa_r+0x2d4>)
 8004466:	f7ff ff37 	bl	80042d8 <__assert_func>
 800446a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800446e:	6005      	str	r5, [r0, #0]
 8004470:	60c5      	str	r5, [r0, #12]
 8004472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	b151      	cbz	r1, 800448e <_dtoa_r+0x5e>
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	604a      	str	r2, [r1, #4]
 800447c:	2301      	movs	r3, #1
 800447e:	4093      	lsls	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
 8004482:	4620      	mov	r0, r4
 8004484:	f001 f860 	bl	8005548 <_Bfree>
 8004488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	1e3b      	subs	r3, r7, #0
 8004490:	bfaa      	itet	ge
 8004492:	2300      	movge	r3, #0
 8004494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004498:	f8c8 3000 	strge.w	r3, [r8]
 800449c:	4b9a      	ldr	r3, [pc, #616]	; (8004708 <_dtoa_r+0x2d8>)
 800449e:	bfbc      	itt	lt
 80044a0:	2201      	movlt	r2, #1
 80044a2:	f8c8 2000 	strlt.w	r2, [r8]
 80044a6:	ea33 030b 	bics.w	r3, r3, fp
 80044aa:	d11b      	bne.n	80044e4 <_dtoa_r+0xb4>
 80044ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044b8:	4333      	orrs	r3, r6
 80044ba:	f000 8592 	beq.w	8004fe2 <_dtoa_r+0xbb2>
 80044be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044c0:	b963      	cbnz	r3, 80044dc <_dtoa_r+0xac>
 80044c2:	4b92      	ldr	r3, [pc, #584]	; (800470c <_dtoa_r+0x2dc>)
 80044c4:	e022      	b.n	800450c <_dtoa_r+0xdc>
 80044c6:	4b92      	ldr	r3, [pc, #584]	; (8004710 <_dtoa_r+0x2e0>)
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	3308      	adds	r3, #8
 80044cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	b013      	add	sp, #76	; 0x4c
 80044d4:	ecbd 8b04 	vpop	{d8-d9}
 80044d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044dc:	4b8b      	ldr	r3, [pc, #556]	; (800470c <_dtoa_r+0x2dc>)
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	3303      	adds	r3, #3
 80044e2:	e7f3      	b.n	80044cc <_dtoa_r+0x9c>
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	4650      	mov	r0, sl
 80044ea:	4659      	mov	r1, fp
 80044ec:	f7fc fc94 	bl	8000e18 <__aeabi_dcmpeq>
 80044f0:	ec4b ab19 	vmov	d9, sl, fp
 80044f4:	4680      	mov	r8, r0
 80044f6:	b158      	cbz	r0, 8004510 <_dtoa_r+0xe0>
 80044f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044fa:	2301      	movs	r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 856b 	beq.w	8004fdc <_dtoa_r+0xbac>
 8004506:	4883      	ldr	r0, [pc, #524]	; (8004714 <_dtoa_r+0x2e4>)
 8004508:	6018      	str	r0, [r3, #0]
 800450a:	1e43      	subs	r3, r0, #1
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	e7df      	b.n	80044d0 <_dtoa_r+0xa0>
 8004510:	ec4b ab10 	vmov	d0, sl, fp
 8004514:	aa10      	add	r2, sp, #64	; 0x40
 8004516:	a911      	add	r1, sp, #68	; 0x44
 8004518:	4620      	mov	r0, r4
 800451a:	f001 fafd 	bl	8005b18 <__d2b>
 800451e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004522:	ee08 0a10 	vmov	s16, r0
 8004526:	2d00      	cmp	r5, #0
 8004528:	f000 8084 	beq.w	8004634 <_dtoa_r+0x204>
 800452c:	ee19 3a90 	vmov	r3, s19
 8004530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004538:	4656      	mov	r6, sl
 800453a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800453e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004546:	4b74      	ldr	r3, [pc, #464]	; (8004718 <_dtoa_r+0x2e8>)
 8004548:	2200      	movs	r2, #0
 800454a:	4630      	mov	r0, r6
 800454c:	4639      	mov	r1, r7
 800454e:	f7fc f843 	bl	80005d8 <__aeabi_dsub>
 8004552:	a365      	add	r3, pc, #404	; (adr r3, 80046e8 <_dtoa_r+0x2b8>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fc f9f6 	bl	8000948 <__aeabi_dmul>
 800455c:	a364      	add	r3, pc, #400	; (adr r3, 80046f0 <_dtoa_r+0x2c0>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f7fc f83b 	bl	80005dc <__adddf3>
 8004566:	4606      	mov	r6, r0
 8004568:	4628      	mov	r0, r5
 800456a:	460f      	mov	r7, r1
 800456c:	f7fc f982 	bl	8000874 <__aeabi_i2d>
 8004570:	a361      	add	r3, pc, #388	; (adr r3, 80046f8 <_dtoa_r+0x2c8>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f7fc f9e7 	bl	8000948 <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4630      	mov	r0, r6
 8004580:	4639      	mov	r1, r7
 8004582:	f7fc f82b 	bl	80005dc <__adddf3>
 8004586:	4606      	mov	r6, r0
 8004588:	460f      	mov	r7, r1
 800458a:	f7fc fc8d 	bl	8000ea8 <__aeabi_d2iz>
 800458e:	2200      	movs	r2, #0
 8004590:	9000      	str	r0, [sp, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	4630      	mov	r0, r6
 8004596:	4639      	mov	r1, r7
 8004598:	f7fc fc48 	bl	8000e2c <__aeabi_dcmplt>
 800459c:	b150      	cbz	r0, 80045b4 <_dtoa_r+0x184>
 800459e:	9800      	ldr	r0, [sp, #0]
 80045a0:	f7fc f968 	bl	8000874 <__aeabi_i2d>
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	f7fc fc36 	bl	8000e18 <__aeabi_dcmpeq>
 80045ac:	b910      	cbnz	r0, 80045b4 <_dtoa_r+0x184>
 80045ae:	9b00      	ldr	r3, [sp, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	9b00      	ldr	r3, [sp, #0]
 80045b6:	2b16      	cmp	r3, #22
 80045b8:	d85a      	bhi.n	8004670 <_dtoa_r+0x240>
 80045ba:	9a00      	ldr	r2, [sp, #0]
 80045bc:	4b57      	ldr	r3, [pc, #348]	; (800471c <_dtoa_r+0x2ec>)
 80045be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	ec51 0b19 	vmov	r0, r1, d9
 80045ca:	f7fc fc2f 	bl	8000e2c <__aeabi_dcmplt>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d050      	beq.n	8004674 <_dtoa_r+0x244>
 80045d2:	9b00      	ldr	r3, [sp, #0]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	930b      	str	r3, [sp, #44]	; 0x2c
 80045dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045de:	1b5d      	subs	r5, r3, r5
 80045e0:	1e6b      	subs	r3, r5, #1
 80045e2:	9305      	str	r3, [sp, #20]
 80045e4:	bf45      	ittet	mi
 80045e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80045ea:	9304      	strmi	r3, [sp, #16]
 80045ec:	2300      	movpl	r3, #0
 80045ee:	2300      	movmi	r3, #0
 80045f0:	bf4c      	ite	mi
 80045f2:	9305      	strmi	r3, [sp, #20]
 80045f4:	9304      	strpl	r3, [sp, #16]
 80045f6:	9b00      	ldr	r3, [sp, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db3d      	blt.n	8004678 <_dtoa_r+0x248>
 80045fc:	9b05      	ldr	r3, [sp, #20]
 80045fe:	9a00      	ldr	r2, [sp, #0]
 8004600:	920a      	str	r2, [sp, #40]	; 0x28
 8004602:	4413      	add	r3, r2
 8004604:	9305      	str	r3, [sp, #20]
 8004606:	2300      	movs	r3, #0
 8004608:	9307      	str	r3, [sp, #28]
 800460a:	9b06      	ldr	r3, [sp, #24]
 800460c:	2b09      	cmp	r3, #9
 800460e:	f200 8089 	bhi.w	8004724 <_dtoa_r+0x2f4>
 8004612:	2b05      	cmp	r3, #5
 8004614:	bfc4      	itt	gt
 8004616:	3b04      	subgt	r3, #4
 8004618:	9306      	strgt	r3, [sp, #24]
 800461a:	9b06      	ldr	r3, [sp, #24]
 800461c:	f1a3 0302 	sub.w	r3, r3, #2
 8004620:	bfcc      	ite	gt
 8004622:	2500      	movgt	r5, #0
 8004624:	2501      	movle	r5, #1
 8004626:	2b03      	cmp	r3, #3
 8004628:	f200 8087 	bhi.w	800473a <_dtoa_r+0x30a>
 800462c:	e8df f003 	tbb	[pc, r3]
 8004630:	59383a2d 	.word	0x59383a2d
 8004634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004638:	441d      	add	r5, r3
 800463a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800463e:	2b20      	cmp	r3, #32
 8004640:	bfc1      	itttt	gt
 8004642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800464a:	fa0b f303 	lslgt.w	r3, fp, r3
 800464e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004652:	bfda      	itte	le
 8004654:	f1c3 0320 	rsble	r3, r3, #32
 8004658:	fa06 f003 	lslle.w	r0, r6, r3
 800465c:	4318      	orrgt	r0, r3
 800465e:	f7fc f8f9 	bl	8000854 <__aeabi_ui2d>
 8004662:	2301      	movs	r3, #1
 8004664:	4606      	mov	r6, r0
 8004666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800466a:	3d01      	subs	r5, #1
 800466c:	930e      	str	r3, [sp, #56]	; 0x38
 800466e:	e76a      	b.n	8004546 <_dtoa_r+0x116>
 8004670:	2301      	movs	r3, #1
 8004672:	e7b2      	b.n	80045da <_dtoa_r+0x1aa>
 8004674:	900b      	str	r0, [sp, #44]	; 0x2c
 8004676:	e7b1      	b.n	80045dc <_dtoa_r+0x1ac>
 8004678:	9b04      	ldr	r3, [sp, #16]
 800467a:	9a00      	ldr	r2, [sp, #0]
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	4253      	negs	r3, r2
 8004682:	9307      	str	r3, [sp, #28]
 8004684:	2300      	movs	r3, #0
 8004686:	930a      	str	r3, [sp, #40]	; 0x28
 8004688:	e7bf      	b.n	800460a <_dtoa_r+0x1da>
 800468a:	2300      	movs	r3, #0
 800468c:	9308      	str	r3, [sp, #32]
 800468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	dc55      	bgt.n	8004740 <_dtoa_r+0x310>
 8004694:	2301      	movs	r3, #1
 8004696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800469a:	461a      	mov	r2, r3
 800469c:	9209      	str	r2, [sp, #36]	; 0x24
 800469e:	e00c      	b.n	80046ba <_dtoa_r+0x28a>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e7f3      	b.n	800468c <_dtoa_r+0x25c>
 80046a4:	2300      	movs	r3, #0
 80046a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a8:	9308      	str	r3, [sp, #32]
 80046aa:	9b00      	ldr	r3, [sp, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	9302      	str	r3, [sp, #8]
 80046b0:	3301      	adds	r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	9303      	str	r3, [sp, #12]
 80046b6:	bfb8      	it	lt
 80046b8:	2301      	movlt	r3, #1
 80046ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046bc:	2200      	movs	r2, #0
 80046be:	6042      	str	r2, [r0, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	f102 0614 	add.w	r6, r2, #20
 80046c6:	429e      	cmp	r6, r3
 80046c8:	6841      	ldr	r1, [r0, #4]
 80046ca:	d93d      	bls.n	8004748 <_dtoa_r+0x318>
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 fefb 	bl	80054c8 <_Balloc>
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d13b      	bne.n	8004750 <_dtoa_r+0x320>
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <_dtoa_r+0x2f0>)
 80046da:	4602      	mov	r2, r0
 80046dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046e0:	e6c0      	b.n	8004464 <_dtoa_r+0x34>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e7df      	b.n	80046a6 <_dtoa_r+0x276>
 80046e6:	bf00      	nop
 80046e8:	636f4361 	.word	0x636f4361
 80046ec:	3fd287a7 	.word	0x3fd287a7
 80046f0:	8b60c8b3 	.word	0x8b60c8b3
 80046f4:	3fc68a28 	.word	0x3fc68a28
 80046f8:	509f79fb 	.word	0x509f79fb
 80046fc:	3fd34413 	.word	0x3fd34413
 8004700:	0801263a 	.word	0x0801263a
 8004704:	08012719 	.word	0x08012719
 8004708:	7ff00000 	.word	0x7ff00000
 800470c:	08012715 	.word	0x08012715
 8004710:	0801270c 	.word	0x0801270c
 8004714:	08008518 	.word	0x08008518
 8004718:	3ff80000 	.word	0x3ff80000
 800471c:	080128b8 	.word	0x080128b8
 8004720:	08012796 	.word	0x08012796
 8004724:	2501      	movs	r5, #1
 8004726:	2300      	movs	r3, #0
 8004728:	9306      	str	r3, [sp, #24]
 800472a:	9508      	str	r5, [sp, #32]
 800472c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004734:	2200      	movs	r2, #0
 8004736:	2312      	movs	r3, #18
 8004738:	e7b0      	b.n	800469c <_dtoa_r+0x26c>
 800473a:	2301      	movs	r3, #1
 800473c:	9308      	str	r3, [sp, #32]
 800473e:	e7f5      	b.n	800472c <_dtoa_r+0x2fc>
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004746:	e7b8      	b.n	80046ba <_dtoa_r+0x28a>
 8004748:	3101      	adds	r1, #1
 800474a:	6041      	str	r1, [r0, #4]
 800474c:	0052      	lsls	r2, r2, #1
 800474e:	e7b8      	b.n	80046c2 <_dtoa_r+0x292>
 8004750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004752:	9a01      	ldr	r2, [sp, #4]
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	2b0e      	cmp	r3, #14
 800475a:	f200 809d 	bhi.w	8004898 <_dtoa_r+0x468>
 800475e:	2d00      	cmp	r5, #0
 8004760:	f000 809a 	beq.w	8004898 <_dtoa_r+0x468>
 8004764:	9b00      	ldr	r3, [sp, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	dd32      	ble.n	80047d0 <_dtoa_r+0x3a0>
 800476a:	4ab7      	ldr	r2, [pc, #732]	; (8004a48 <_dtoa_r+0x618>)
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004778:	9b00      	ldr	r3, [sp, #0]
 800477a:	05d8      	lsls	r0, r3, #23
 800477c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004780:	d516      	bpl.n	80047b0 <_dtoa_r+0x380>
 8004782:	4bb2      	ldr	r3, [pc, #712]	; (8004a4c <_dtoa_r+0x61c>)
 8004784:	ec51 0b19 	vmov	r0, r1, d9
 8004788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800478c:	f7fc fa06 	bl	8000b9c <__aeabi_ddiv>
 8004790:	f007 070f 	and.w	r7, r7, #15
 8004794:	4682      	mov	sl, r0
 8004796:	468b      	mov	fp, r1
 8004798:	2503      	movs	r5, #3
 800479a:	4eac      	ldr	r6, [pc, #688]	; (8004a4c <_dtoa_r+0x61c>)
 800479c:	b957      	cbnz	r7, 80047b4 <_dtoa_r+0x384>
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	4650      	mov	r0, sl
 80047a4:	4659      	mov	r1, fp
 80047a6:	f7fc f9f9 	bl	8000b9c <__aeabi_ddiv>
 80047aa:	4682      	mov	sl, r0
 80047ac:	468b      	mov	fp, r1
 80047ae:	e028      	b.n	8004802 <_dtoa_r+0x3d2>
 80047b0:	2502      	movs	r5, #2
 80047b2:	e7f2      	b.n	800479a <_dtoa_r+0x36a>
 80047b4:	07f9      	lsls	r1, r7, #31
 80047b6:	d508      	bpl.n	80047ca <_dtoa_r+0x39a>
 80047b8:	4640      	mov	r0, r8
 80047ba:	4649      	mov	r1, r9
 80047bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047c0:	f7fc f8c2 	bl	8000948 <__aeabi_dmul>
 80047c4:	3501      	adds	r5, #1
 80047c6:	4680      	mov	r8, r0
 80047c8:	4689      	mov	r9, r1
 80047ca:	107f      	asrs	r7, r7, #1
 80047cc:	3608      	adds	r6, #8
 80047ce:	e7e5      	b.n	800479c <_dtoa_r+0x36c>
 80047d0:	f000 809b 	beq.w	800490a <_dtoa_r+0x4da>
 80047d4:	9b00      	ldr	r3, [sp, #0]
 80047d6:	4f9d      	ldr	r7, [pc, #628]	; (8004a4c <_dtoa_r+0x61c>)
 80047d8:	425e      	negs	r6, r3
 80047da:	4b9b      	ldr	r3, [pc, #620]	; (8004a48 <_dtoa_r+0x618>)
 80047dc:	f006 020f 	and.w	r2, r6, #15
 80047e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	ec51 0b19 	vmov	r0, r1, d9
 80047ec:	f7fc f8ac 	bl	8000948 <__aeabi_dmul>
 80047f0:	1136      	asrs	r6, r6, #4
 80047f2:	4682      	mov	sl, r0
 80047f4:	468b      	mov	fp, r1
 80047f6:	2300      	movs	r3, #0
 80047f8:	2502      	movs	r5, #2
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	d17a      	bne.n	80048f4 <_dtoa_r+0x4c4>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1d3      	bne.n	80047aa <_dtoa_r+0x37a>
 8004802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8082 	beq.w	800490e <_dtoa_r+0x4de>
 800480a:	4b91      	ldr	r3, [pc, #580]	; (8004a50 <_dtoa_r+0x620>)
 800480c:	2200      	movs	r2, #0
 800480e:	4650      	mov	r0, sl
 8004810:	4659      	mov	r1, fp
 8004812:	f7fc fb0b 	bl	8000e2c <__aeabi_dcmplt>
 8004816:	2800      	cmp	r0, #0
 8004818:	d079      	beq.n	800490e <_dtoa_r+0x4de>
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d076      	beq.n	800490e <_dtoa_r+0x4de>
 8004820:	9b02      	ldr	r3, [sp, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	dd36      	ble.n	8004894 <_dtoa_r+0x464>
 8004826:	9b00      	ldr	r3, [sp, #0]
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	1e5f      	subs	r7, r3, #1
 800482e:	2200      	movs	r2, #0
 8004830:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <_dtoa_r+0x624>)
 8004832:	f7fc f889 	bl	8000948 <__aeabi_dmul>
 8004836:	9e02      	ldr	r6, [sp, #8]
 8004838:	4682      	mov	sl, r0
 800483a:	468b      	mov	fp, r1
 800483c:	3501      	adds	r5, #1
 800483e:	4628      	mov	r0, r5
 8004840:	f7fc f818 	bl	8000874 <__aeabi_i2d>
 8004844:	4652      	mov	r2, sl
 8004846:	465b      	mov	r3, fp
 8004848:	f7fc f87e 	bl	8000948 <__aeabi_dmul>
 800484c:	4b82      	ldr	r3, [pc, #520]	; (8004a58 <_dtoa_r+0x628>)
 800484e:	2200      	movs	r2, #0
 8004850:	f7fb fec4 	bl	80005dc <__adddf3>
 8004854:	46d0      	mov	r8, sl
 8004856:	46d9      	mov	r9, fp
 8004858:	4682      	mov	sl, r0
 800485a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800485e:	2e00      	cmp	r6, #0
 8004860:	d158      	bne.n	8004914 <_dtoa_r+0x4e4>
 8004862:	4b7e      	ldr	r3, [pc, #504]	; (8004a5c <_dtoa_r+0x62c>)
 8004864:	2200      	movs	r2, #0
 8004866:	4640      	mov	r0, r8
 8004868:	4649      	mov	r1, r9
 800486a:	f7fb feb5 	bl	80005d8 <__aeabi_dsub>
 800486e:	4652      	mov	r2, sl
 8004870:	465b      	mov	r3, fp
 8004872:	4680      	mov	r8, r0
 8004874:	4689      	mov	r9, r1
 8004876:	f7fc faf7 	bl	8000e68 <__aeabi_dcmpgt>
 800487a:	2800      	cmp	r0, #0
 800487c:	f040 8295 	bne.w	8004daa <_dtoa_r+0x97a>
 8004880:	4652      	mov	r2, sl
 8004882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004886:	4640      	mov	r0, r8
 8004888:	4649      	mov	r1, r9
 800488a:	f7fc facf 	bl	8000e2c <__aeabi_dcmplt>
 800488e:	2800      	cmp	r0, #0
 8004890:	f040 8289 	bne.w	8004da6 <_dtoa_r+0x976>
 8004894:	ec5b ab19 	vmov	sl, fp, d9
 8004898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800489a:	2b00      	cmp	r3, #0
 800489c:	f2c0 8148 	blt.w	8004b30 <_dtoa_r+0x700>
 80048a0:	9a00      	ldr	r2, [sp, #0]
 80048a2:	2a0e      	cmp	r2, #14
 80048a4:	f300 8144 	bgt.w	8004b30 <_dtoa_r+0x700>
 80048a8:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <_dtoa_r+0x618>)
 80048aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f280 80d5 	bge.w	8004a64 <_dtoa_r+0x634>
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f300 80d1 	bgt.w	8004a64 <_dtoa_r+0x634>
 80048c2:	f040 826f 	bne.w	8004da4 <_dtoa_r+0x974>
 80048c6:	4b65      	ldr	r3, [pc, #404]	; (8004a5c <_dtoa_r+0x62c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	4640      	mov	r0, r8
 80048cc:	4649      	mov	r1, r9
 80048ce:	f7fc f83b 	bl	8000948 <__aeabi_dmul>
 80048d2:	4652      	mov	r2, sl
 80048d4:	465b      	mov	r3, fp
 80048d6:	f7fc fabd 	bl	8000e54 <__aeabi_dcmpge>
 80048da:	9e03      	ldr	r6, [sp, #12]
 80048dc:	4637      	mov	r7, r6
 80048de:	2800      	cmp	r0, #0
 80048e0:	f040 8245 	bne.w	8004d6e <_dtoa_r+0x93e>
 80048e4:	9d01      	ldr	r5, [sp, #4]
 80048e6:	2331      	movs	r3, #49	; 0x31
 80048e8:	f805 3b01 	strb.w	r3, [r5], #1
 80048ec:	9b00      	ldr	r3, [sp, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	e240      	b.n	8004d76 <_dtoa_r+0x946>
 80048f4:	07f2      	lsls	r2, r6, #31
 80048f6:	d505      	bpl.n	8004904 <_dtoa_r+0x4d4>
 80048f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048fc:	f7fc f824 	bl	8000948 <__aeabi_dmul>
 8004900:	3501      	adds	r5, #1
 8004902:	2301      	movs	r3, #1
 8004904:	1076      	asrs	r6, r6, #1
 8004906:	3708      	adds	r7, #8
 8004908:	e777      	b.n	80047fa <_dtoa_r+0x3ca>
 800490a:	2502      	movs	r5, #2
 800490c:	e779      	b.n	8004802 <_dtoa_r+0x3d2>
 800490e:	9f00      	ldr	r7, [sp, #0]
 8004910:	9e03      	ldr	r6, [sp, #12]
 8004912:	e794      	b.n	800483e <_dtoa_r+0x40e>
 8004914:	9901      	ldr	r1, [sp, #4]
 8004916:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <_dtoa_r+0x618>)
 8004918:	4431      	add	r1, r6
 800491a:	910d      	str	r1, [sp, #52]	; 0x34
 800491c:	9908      	ldr	r1, [sp, #32]
 800491e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004926:	2900      	cmp	r1, #0
 8004928:	d043      	beq.n	80049b2 <_dtoa_r+0x582>
 800492a:	494d      	ldr	r1, [pc, #308]	; (8004a60 <_dtoa_r+0x630>)
 800492c:	2000      	movs	r0, #0
 800492e:	f7fc f935 	bl	8000b9c <__aeabi_ddiv>
 8004932:	4652      	mov	r2, sl
 8004934:	465b      	mov	r3, fp
 8004936:	f7fb fe4f 	bl	80005d8 <__aeabi_dsub>
 800493a:	9d01      	ldr	r5, [sp, #4]
 800493c:	4682      	mov	sl, r0
 800493e:	468b      	mov	fp, r1
 8004940:	4649      	mov	r1, r9
 8004942:	4640      	mov	r0, r8
 8004944:	f7fc fab0 	bl	8000ea8 <__aeabi_d2iz>
 8004948:	4606      	mov	r6, r0
 800494a:	f7fb ff93 	bl	8000874 <__aeabi_i2d>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fb fe3f 	bl	80005d8 <__aeabi_dsub>
 800495a:	3630      	adds	r6, #48	; 0x30
 800495c:	f805 6b01 	strb.w	r6, [r5], #1
 8004960:	4652      	mov	r2, sl
 8004962:	465b      	mov	r3, fp
 8004964:	4680      	mov	r8, r0
 8004966:	4689      	mov	r9, r1
 8004968:	f7fc fa60 	bl	8000e2c <__aeabi_dcmplt>
 800496c:	2800      	cmp	r0, #0
 800496e:	d163      	bne.n	8004a38 <_dtoa_r+0x608>
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	4936      	ldr	r1, [pc, #216]	; (8004a50 <_dtoa_r+0x620>)
 8004976:	2000      	movs	r0, #0
 8004978:	f7fb fe2e 	bl	80005d8 <__aeabi_dsub>
 800497c:	4652      	mov	r2, sl
 800497e:	465b      	mov	r3, fp
 8004980:	f7fc fa54 	bl	8000e2c <__aeabi_dcmplt>
 8004984:	2800      	cmp	r0, #0
 8004986:	f040 80b5 	bne.w	8004af4 <_dtoa_r+0x6c4>
 800498a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800498c:	429d      	cmp	r5, r3
 800498e:	d081      	beq.n	8004894 <_dtoa_r+0x464>
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <_dtoa_r+0x624>)
 8004992:	2200      	movs	r2, #0
 8004994:	4650      	mov	r0, sl
 8004996:	4659      	mov	r1, fp
 8004998:	f7fb ffd6 	bl	8000948 <__aeabi_dmul>
 800499c:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <_dtoa_r+0x624>)
 800499e:	4682      	mov	sl, r0
 80049a0:	468b      	mov	fp, r1
 80049a2:	4640      	mov	r0, r8
 80049a4:	4649      	mov	r1, r9
 80049a6:	2200      	movs	r2, #0
 80049a8:	f7fb ffce 	bl	8000948 <__aeabi_dmul>
 80049ac:	4680      	mov	r8, r0
 80049ae:	4689      	mov	r9, r1
 80049b0:	e7c6      	b.n	8004940 <_dtoa_r+0x510>
 80049b2:	4650      	mov	r0, sl
 80049b4:	4659      	mov	r1, fp
 80049b6:	f7fb ffc7 	bl	8000948 <__aeabi_dmul>
 80049ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049bc:	9d01      	ldr	r5, [sp, #4]
 80049be:	930f      	str	r3, [sp, #60]	; 0x3c
 80049c0:	4682      	mov	sl, r0
 80049c2:	468b      	mov	fp, r1
 80049c4:	4649      	mov	r1, r9
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7fc fa6e 	bl	8000ea8 <__aeabi_d2iz>
 80049cc:	4606      	mov	r6, r0
 80049ce:	f7fb ff51 	bl	8000874 <__aeabi_i2d>
 80049d2:	3630      	adds	r6, #48	; 0x30
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fb fdfc 	bl	80005d8 <__aeabi_dsub>
 80049e0:	f805 6b01 	strb.w	r6, [r5], #1
 80049e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049e6:	429d      	cmp	r5, r3
 80049e8:	4680      	mov	r8, r0
 80049ea:	4689      	mov	r9, r1
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	d124      	bne.n	8004a3c <_dtoa_r+0x60c>
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <_dtoa_r+0x630>)
 80049f4:	4650      	mov	r0, sl
 80049f6:	4659      	mov	r1, fp
 80049f8:	f7fb fdf0 	bl	80005dc <__adddf3>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4640      	mov	r0, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	f7fc fa30 	bl	8000e68 <__aeabi_dcmpgt>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d173      	bne.n	8004af4 <_dtoa_r+0x6c4>
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	465b      	mov	r3, fp
 8004a10:	4913      	ldr	r1, [pc, #76]	; (8004a60 <_dtoa_r+0x630>)
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7fb fde0 	bl	80005d8 <__aeabi_dsub>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	4649      	mov	r1, r9
 8004a20:	f7fc fa04 	bl	8000e2c <__aeabi_dcmplt>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f43f af35 	beq.w	8004894 <_dtoa_r+0x464>
 8004a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a2c:	1e6b      	subs	r3, r5, #1
 8004a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a34:	2b30      	cmp	r3, #48	; 0x30
 8004a36:	d0f8      	beq.n	8004a2a <_dtoa_r+0x5fa>
 8004a38:	9700      	str	r7, [sp, #0]
 8004a3a:	e049      	b.n	8004ad0 <_dtoa_r+0x6a0>
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <_dtoa_r+0x624>)
 8004a3e:	f7fb ff83 	bl	8000948 <__aeabi_dmul>
 8004a42:	4680      	mov	r8, r0
 8004a44:	4689      	mov	r9, r1
 8004a46:	e7bd      	b.n	80049c4 <_dtoa_r+0x594>
 8004a48:	080128b8 	.word	0x080128b8
 8004a4c:	08012890 	.word	0x08012890
 8004a50:	3ff00000 	.word	0x3ff00000
 8004a54:	40240000 	.word	0x40240000
 8004a58:	401c0000 	.word	0x401c0000
 8004a5c:	40140000 	.word	0x40140000
 8004a60:	3fe00000 	.word	0x3fe00000
 8004a64:	9d01      	ldr	r5, [sp, #4]
 8004a66:	4656      	mov	r6, sl
 8004a68:	465f      	mov	r7, fp
 8004a6a:	4642      	mov	r2, r8
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	4630      	mov	r0, r6
 8004a70:	4639      	mov	r1, r7
 8004a72:	f7fc f893 	bl	8000b9c <__aeabi_ddiv>
 8004a76:	f7fc fa17 	bl	8000ea8 <__aeabi_d2iz>
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	f7fb fefa 	bl	8000874 <__aeabi_i2d>
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	f7fb ff60 	bl	8000948 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004a94:	f7fb fda0 	bl	80005d8 <__aeabi_dsub>
 8004a98:	f805 6b01 	strb.w	r6, [r5], #1
 8004a9c:	9e01      	ldr	r6, [sp, #4]
 8004a9e:	9f03      	ldr	r7, [sp, #12]
 8004aa0:	1bae      	subs	r6, r5, r6
 8004aa2:	42b7      	cmp	r7, r6
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	d135      	bne.n	8004b16 <_dtoa_r+0x6e6>
 8004aaa:	f7fb fd97 	bl	80005dc <__adddf3>
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	f7fc f9d7 	bl	8000e68 <__aeabi_dcmpgt>
 8004aba:	b9d0      	cbnz	r0, 8004af2 <_dtoa_r+0x6c2>
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	f7fc f9a8 	bl	8000e18 <__aeabi_dcmpeq>
 8004ac8:	b110      	cbz	r0, 8004ad0 <_dtoa_r+0x6a0>
 8004aca:	f01a 0f01 	tst.w	sl, #1
 8004ace:	d110      	bne.n	8004af2 <_dtoa_r+0x6c2>
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	ee18 1a10 	vmov	r1, s16
 8004ad6:	f000 fd37 	bl	8005548 <_Bfree>
 8004ada:	2300      	movs	r3, #0
 8004adc:	9800      	ldr	r0, [sp, #0]
 8004ade:	702b      	strb	r3, [r5, #0]
 8004ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	6018      	str	r0, [r3, #0]
 8004ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f43f acf1 	beq.w	80044d0 <_dtoa_r+0xa0>
 8004aee:	601d      	str	r5, [r3, #0]
 8004af0:	e4ee      	b.n	80044d0 <_dtoa_r+0xa0>
 8004af2:	9f00      	ldr	r7, [sp, #0]
 8004af4:	462b      	mov	r3, r5
 8004af6:	461d      	mov	r5, r3
 8004af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004afc:	2a39      	cmp	r2, #57	; 0x39
 8004afe:	d106      	bne.n	8004b0e <_dtoa_r+0x6de>
 8004b00:	9a01      	ldr	r2, [sp, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d1f7      	bne.n	8004af6 <_dtoa_r+0x6c6>
 8004b06:	9901      	ldr	r1, [sp, #4]
 8004b08:	2230      	movs	r2, #48	; 0x30
 8004b0a:	3701      	adds	r7, #1
 8004b0c:	700a      	strb	r2, [r1, #0]
 8004b0e:	781a      	ldrb	r2, [r3, #0]
 8004b10:	3201      	adds	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e790      	b.n	8004a38 <_dtoa_r+0x608>
 8004b16:	4ba6      	ldr	r3, [pc, #664]	; (8004db0 <_dtoa_r+0x980>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f7fb ff15 	bl	8000948 <__aeabi_dmul>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2300      	movs	r3, #0
 8004b22:	4606      	mov	r6, r0
 8004b24:	460f      	mov	r7, r1
 8004b26:	f7fc f977 	bl	8000e18 <__aeabi_dcmpeq>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d09d      	beq.n	8004a6a <_dtoa_r+0x63a>
 8004b2e:	e7cf      	b.n	8004ad0 <_dtoa_r+0x6a0>
 8004b30:	9a08      	ldr	r2, [sp, #32]
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	f000 80d7 	beq.w	8004ce6 <_dtoa_r+0x8b6>
 8004b38:	9a06      	ldr	r2, [sp, #24]
 8004b3a:	2a01      	cmp	r2, #1
 8004b3c:	f300 80ba 	bgt.w	8004cb4 <_dtoa_r+0x884>
 8004b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	f000 80b2 	beq.w	8004cac <_dtoa_r+0x87c>
 8004b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b4c:	9e07      	ldr	r6, [sp, #28]
 8004b4e:	9d04      	ldr	r5, [sp, #16]
 8004b50:	9a04      	ldr	r2, [sp, #16]
 8004b52:	441a      	add	r2, r3
 8004b54:	9204      	str	r2, [sp, #16]
 8004b56:	9a05      	ldr	r2, [sp, #20]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	441a      	add	r2, r3
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	9205      	str	r2, [sp, #20]
 8004b60:	f000 fdaa 	bl	80056b8 <__i2b>
 8004b64:	4607      	mov	r7, r0
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	dd0c      	ble.n	8004b84 <_dtoa_r+0x754>
 8004b6a:	9b05      	ldr	r3, [sp, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dd09      	ble.n	8004b84 <_dtoa_r+0x754>
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	9a04      	ldr	r2, [sp, #16]
 8004b74:	bfa8      	it	ge
 8004b76:	462b      	movge	r3, r5
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	9204      	str	r2, [sp, #16]
 8004b7c:	9a05      	ldr	r2, [sp, #20]
 8004b7e:	1aed      	subs	r5, r5, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	9305      	str	r3, [sp, #20]
 8004b84:	9b07      	ldr	r3, [sp, #28]
 8004b86:	b31b      	cbz	r3, 8004bd0 <_dtoa_r+0x7a0>
 8004b88:	9b08      	ldr	r3, [sp, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80af 	beq.w	8004cee <_dtoa_r+0x8be>
 8004b90:	2e00      	cmp	r6, #0
 8004b92:	dd13      	ble.n	8004bbc <_dtoa_r+0x78c>
 8004b94:	4639      	mov	r1, r7
 8004b96:	4632      	mov	r2, r6
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f000 fe4d 	bl	8005838 <__pow5mult>
 8004b9e:	ee18 2a10 	vmov	r2, s16
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 fd9c 	bl	80056e4 <__multiply>
 8004bac:	ee18 1a10 	vmov	r1, s16
 8004bb0:	4680      	mov	r8, r0
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 fcc8 	bl	8005548 <_Bfree>
 8004bb8:	ee08 8a10 	vmov	s16, r8
 8004bbc:	9b07      	ldr	r3, [sp, #28]
 8004bbe:	1b9a      	subs	r2, r3, r6
 8004bc0:	d006      	beq.n	8004bd0 <_dtoa_r+0x7a0>
 8004bc2:	ee18 1a10 	vmov	r1, s16
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fe36 	bl	8005838 <__pow5mult>
 8004bcc:	ee08 0a10 	vmov	s16, r0
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 fd70 	bl	80056b8 <__i2b>
 8004bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	4606      	mov	r6, r0
 8004bde:	f340 8088 	ble.w	8004cf2 <_dtoa_r+0x8c2>
 8004be2:	461a      	mov	r2, r3
 8004be4:	4601      	mov	r1, r0
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 fe26 	bl	8005838 <__pow5mult>
 8004bec:	9b06      	ldr	r3, [sp, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	f340 8081 	ble.w	8004cf8 <_dtoa_r+0x8c8>
 8004bf6:	f04f 0800 	mov.w	r8, #0
 8004bfa:	6933      	ldr	r3, [r6, #16]
 8004bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c00:	6918      	ldr	r0, [r3, #16]
 8004c02:	f000 fd09 	bl	8005618 <__hi0bits>
 8004c06:	f1c0 0020 	rsb	r0, r0, #32
 8004c0a:	9b05      	ldr	r3, [sp, #20]
 8004c0c:	4418      	add	r0, r3
 8004c0e:	f010 001f 	ands.w	r0, r0, #31
 8004c12:	f000 8092 	beq.w	8004d3a <_dtoa_r+0x90a>
 8004c16:	f1c0 0320 	rsb	r3, r0, #32
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	f340 808a 	ble.w	8004d34 <_dtoa_r+0x904>
 8004c20:	f1c0 001c 	rsb	r0, r0, #28
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	4403      	add	r3, r0
 8004c28:	9304      	str	r3, [sp, #16]
 8004c2a:	9b05      	ldr	r3, [sp, #20]
 8004c2c:	4403      	add	r3, r0
 8004c2e:	4405      	add	r5, r0
 8004c30:	9305      	str	r3, [sp, #20]
 8004c32:	9b04      	ldr	r3, [sp, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dd07      	ble.n	8004c48 <_dtoa_r+0x818>
 8004c38:	ee18 1a10 	vmov	r1, s16
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 fe54 	bl	80058ec <__lshift>
 8004c44:	ee08 0a10 	vmov	s16, r0
 8004c48:	9b05      	ldr	r3, [sp, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dd05      	ble.n	8004c5a <_dtoa_r+0x82a>
 8004c4e:	4631      	mov	r1, r6
 8004c50:	461a      	mov	r2, r3
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fe4a 	bl	80058ec <__lshift>
 8004c58:	4606      	mov	r6, r0
 8004c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d06e      	beq.n	8004d3e <_dtoa_r+0x90e>
 8004c60:	ee18 0a10 	vmov	r0, s16
 8004c64:	4631      	mov	r1, r6
 8004c66:	f000 feb1 	bl	80059cc <__mcmp>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	da67      	bge.n	8004d3e <_dtoa_r+0x90e>
 8004c6e:	9b00      	ldr	r3, [sp, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	ee18 1a10 	vmov	r1, s16
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	220a      	movs	r2, #10
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 fc85 	bl	800558c <__multadd>
 8004c82:	9b08      	ldr	r3, [sp, #32]
 8004c84:	ee08 0a10 	vmov	s16, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 81b1 	beq.w	8004ff0 <_dtoa_r+0xbc0>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4639      	mov	r1, r7
 8004c92:	220a      	movs	r2, #10
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 fc79 	bl	800558c <__multadd>
 8004c9a:	9b02      	ldr	r3, [sp, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	4607      	mov	r7, r0
 8004ca0:	f300 808e 	bgt.w	8004dc0 <_dtoa_r+0x990>
 8004ca4:	9b06      	ldr	r3, [sp, #24]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	dc51      	bgt.n	8004d4e <_dtoa_r+0x91e>
 8004caa:	e089      	b.n	8004dc0 <_dtoa_r+0x990>
 8004cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004cb2:	e74b      	b.n	8004b4c <_dtoa_r+0x71c>
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	1e5e      	subs	r6, r3, #1
 8004cb8:	9b07      	ldr	r3, [sp, #28]
 8004cba:	42b3      	cmp	r3, r6
 8004cbc:	bfbf      	itttt	lt
 8004cbe:	9b07      	ldrlt	r3, [sp, #28]
 8004cc0:	9607      	strlt	r6, [sp, #28]
 8004cc2:	1af2      	sublt	r2, r6, r3
 8004cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004cc6:	bfb6      	itet	lt
 8004cc8:	189b      	addlt	r3, r3, r2
 8004cca:	1b9e      	subge	r6, r3, r6
 8004ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	bfb8      	it	lt
 8004cd2:	2600      	movlt	r6, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bfb7      	itett	lt
 8004cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004ce0:	1a9d      	sublt	r5, r3, r2
 8004ce2:	2300      	movlt	r3, #0
 8004ce4:	e734      	b.n	8004b50 <_dtoa_r+0x720>
 8004ce6:	9e07      	ldr	r6, [sp, #28]
 8004ce8:	9d04      	ldr	r5, [sp, #16]
 8004cea:	9f08      	ldr	r7, [sp, #32]
 8004cec:	e73b      	b.n	8004b66 <_dtoa_r+0x736>
 8004cee:	9a07      	ldr	r2, [sp, #28]
 8004cf0:	e767      	b.n	8004bc2 <_dtoa_r+0x792>
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	dc18      	bgt.n	8004d2a <_dtoa_r+0x8fa>
 8004cf8:	f1ba 0f00 	cmp.w	sl, #0
 8004cfc:	d115      	bne.n	8004d2a <_dtoa_r+0x8fa>
 8004cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d02:	b993      	cbnz	r3, 8004d2a <_dtoa_r+0x8fa>
 8004d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d08:	0d1b      	lsrs	r3, r3, #20
 8004d0a:	051b      	lsls	r3, r3, #20
 8004d0c:	b183      	cbz	r3, 8004d30 <_dtoa_r+0x900>
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	3301      	adds	r3, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9b05      	ldr	r3, [sp, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	f04f 0801 	mov.w	r8, #1
 8004d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f af6a 	bne.w	8004bfa <_dtoa_r+0x7ca>
 8004d26:	2001      	movs	r0, #1
 8004d28:	e76f      	b.n	8004c0a <_dtoa_r+0x7da>
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	e7f6      	b.n	8004d1e <_dtoa_r+0x8ee>
 8004d30:	4698      	mov	r8, r3
 8004d32:	e7f4      	b.n	8004d1e <_dtoa_r+0x8ee>
 8004d34:	f43f af7d 	beq.w	8004c32 <_dtoa_r+0x802>
 8004d38:	4618      	mov	r0, r3
 8004d3a:	301c      	adds	r0, #28
 8004d3c:	e772      	b.n	8004c24 <_dtoa_r+0x7f4>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	dc37      	bgt.n	8004db4 <_dtoa_r+0x984>
 8004d44:	9b06      	ldr	r3, [sp, #24]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	dd34      	ble.n	8004db4 <_dtoa_r+0x984>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	9302      	str	r3, [sp, #8]
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	b96b      	cbnz	r3, 8004d6e <_dtoa_r+0x93e>
 8004d52:	4631      	mov	r1, r6
 8004d54:	2205      	movs	r2, #5
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 fc18 	bl	800558c <__multadd>
 8004d5c:	4601      	mov	r1, r0
 8004d5e:	4606      	mov	r6, r0
 8004d60:	ee18 0a10 	vmov	r0, s16
 8004d64:	f000 fe32 	bl	80059cc <__mcmp>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f73f adbb 	bgt.w	80048e4 <_dtoa_r+0x4b4>
 8004d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d70:	9d01      	ldr	r5, [sp, #4]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 fbe3 	bl	8005548 <_Bfree>
 8004d82:	2f00      	cmp	r7, #0
 8004d84:	f43f aea4 	beq.w	8004ad0 <_dtoa_r+0x6a0>
 8004d88:	f1b8 0f00 	cmp.w	r8, #0
 8004d8c:	d005      	beq.n	8004d9a <_dtoa_r+0x96a>
 8004d8e:	45b8      	cmp	r8, r7
 8004d90:	d003      	beq.n	8004d9a <_dtoa_r+0x96a>
 8004d92:	4641      	mov	r1, r8
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fbd7 	bl	8005548 <_Bfree>
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 fbd3 	bl	8005548 <_Bfree>
 8004da2:	e695      	b.n	8004ad0 <_dtoa_r+0x6a0>
 8004da4:	2600      	movs	r6, #0
 8004da6:	4637      	mov	r7, r6
 8004da8:	e7e1      	b.n	8004d6e <_dtoa_r+0x93e>
 8004daa:	9700      	str	r7, [sp, #0]
 8004dac:	4637      	mov	r7, r6
 8004dae:	e599      	b.n	80048e4 <_dtoa_r+0x4b4>
 8004db0:	40240000 	.word	0x40240000
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80ca 	beq.w	8004f50 <_dtoa_r+0xb20>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	9302      	str	r3, [sp, #8]
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	dd05      	ble.n	8004dd0 <_dtoa_r+0x9a0>
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 fd8f 	bl	80058ec <__lshift>
 8004dce:	4607      	mov	r7, r0
 8004dd0:	f1b8 0f00 	cmp.w	r8, #0
 8004dd4:	d05b      	beq.n	8004e8e <_dtoa_r+0xa5e>
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fb75 	bl	80054c8 <_Balloc>
 8004dde:	4605      	mov	r5, r0
 8004de0:	b928      	cbnz	r0, 8004dee <_dtoa_r+0x9be>
 8004de2:	4b87      	ldr	r3, [pc, #540]	; (8005000 <_dtoa_r+0xbd0>)
 8004de4:	4602      	mov	r2, r0
 8004de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004dea:	f7ff bb3b 	b.w	8004464 <_dtoa_r+0x34>
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	3202      	adds	r2, #2
 8004df2:	0092      	lsls	r2, r2, #2
 8004df4:	f107 010c 	add.w	r1, r7, #12
 8004df8:	300c      	adds	r0, #12
 8004dfa:	f000 fb57 	bl	80054ac <memcpy>
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4629      	mov	r1, r5
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fd72 	bl	80058ec <__lshift>
 8004e08:	9b01      	ldr	r3, [sp, #4]
 8004e0a:	f103 0901 	add.w	r9, r3, #1
 8004e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	9305      	str	r3, [sp, #20]
 8004e16:	f00a 0301 	and.w	r3, sl, #1
 8004e1a:	46b8      	mov	r8, r7
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	4607      	mov	r7, r0
 8004e20:	4631      	mov	r1, r6
 8004e22:	ee18 0a10 	vmov	r0, s16
 8004e26:	f7ff fa75 	bl	8004314 <quorem>
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	9002      	str	r0, [sp, #8]
 8004e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004e32:	ee18 0a10 	vmov	r0, s16
 8004e36:	f000 fdc9 	bl	80059cc <__mcmp>
 8004e3a:	463a      	mov	r2, r7
 8004e3c:	9003      	str	r0, [sp, #12]
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4620      	mov	r0, r4
 8004e42:	f000 fddf 	bl	8005a04 <__mdiff>
 8004e46:	68c2      	ldr	r2, [r0, #12]
 8004e48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	bb02      	cbnz	r2, 8004e92 <_dtoa_r+0xa62>
 8004e50:	4601      	mov	r1, r0
 8004e52:	ee18 0a10 	vmov	r0, s16
 8004e56:	f000 fdb9 	bl	80059cc <__mcmp>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4620      	mov	r0, r4
 8004e60:	9207      	str	r2, [sp, #28]
 8004e62:	f000 fb71 	bl	8005548 <_Bfree>
 8004e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004e6a:	ea43 0102 	orr.w	r1, r3, r2
 8004e6e:	9b04      	ldr	r3, [sp, #16]
 8004e70:	430b      	orrs	r3, r1
 8004e72:	464d      	mov	r5, r9
 8004e74:	d10f      	bne.n	8004e96 <_dtoa_r+0xa66>
 8004e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e7a:	d02a      	beq.n	8004ed2 <_dtoa_r+0xaa2>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dd02      	ble.n	8004e88 <_dtoa_r+0xa58>
 8004e82:	9b02      	ldr	r3, [sp, #8]
 8004e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004e88:	f88b a000 	strb.w	sl, [fp]
 8004e8c:	e775      	b.n	8004d7a <_dtoa_r+0x94a>
 8004e8e:	4638      	mov	r0, r7
 8004e90:	e7ba      	b.n	8004e08 <_dtoa_r+0x9d8>
 8004e92:	2201      	movs	r2, #1
 8004e94:	e7e2      	b.n	8004e5c <_dtoa_r+0xa2c>
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db04      	blt.n	8004ea6 <_dtoa_r+0xa76>
 8004e9c:	9906      	ldr	r1, [sp, #24]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	9904      	ldr	r1, [sp, #16]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	d122      	bne.n	8004eec <_dtoa_r+0xabc>
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	ddee      	ble.n	8004e88 <_dtoa_r+0xa58>
 8004eaa:	ee18 1a10 	vmov	r1, s16
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fd1b 	bl	80058ec <__lshift>
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	ee08 0a10 	vmov	s16, r0
 8004ebc:	f000 fd86 	bl	80059cc <__mcmp>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	dc03      	bgt.n	8004ecc <_dtoa_r+0xa9c>
 8004ec4:	d1e0      	bne.n	8004e88 <_dtoa_r+0xa58>
 8004ec6:	f01a 0f01 	tst.w	sl, #1
 8004eca:	d0dd      	beq.n	8004e88 <_dtoa_r+0xa58>
 8004ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ed0:	d1d7      	bne.n	8004e82 <_dtoa_r+0xa52>
 8004ed2:	2339      	movs	r3, #57	; 0x39
 8004ed4:	f88b 3000 	strb.w	r3, [fp]
 8004ed8:	462b      	mov	r3, r5
 8004eda:	461d      	mov	r5, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004ee2:	2a39      	cmp	r2, #57	; 0x39
 8004ee4:	d071      	beq.n	8004fca <_dtoa_r+0xb9a>
 8004ee6:	3201      	adds	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e746      	b.n	8004d7a <_dtoa_r+0x94a>
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	dd07      	ble.n	8004f00 <_dtoa_r+0xad0>
 8004ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ef4:	d0ed      	beq.n	8004ed2 <_dtoa_r+0xaa2>
 8004ef6:	f10a 0301 	add.w	r3, sl, #1
 8004efa:	f88b 3000 	strb.w	r3, [fp]
 8004efe:	e73c      	b.n	8004d7a <_dtoa_r+0x94a>
 8004f00:	9b05      	ldr	r3, [sp, #20]
 8004f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004f06:	4599      	cmp	r9, r3
 8004f08:	d047      	beq.n	8004f9a <_dtoa_r+0xb6a>
 8004f0a:	ee18 1a10 	vmov	r1, s16
 8004f0e:	2300      	movs	r3, #0
 8004f10:	220a      	movs	r2, #10
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 fb3a 	bl	800558c <__multadd>
 8004f18:	45b8      	cmp	r8, r7
 8004f1a:	ee08 0a10 	vmov	s16, r0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	f04f 020a 	mov.w	r2, #10
 8004f26:	4641      	mov	r1, r8
 8004f28:	4620      	mov	r0, r4
 8004f2a:	d106      	bne.n	8004f3a <_dtoa_r+0xb0a>
 8004f2c:	f000 fb2e 	bl	800558c <__multadd>
 8004f30:	4680      	mov	r8, r0
 8004f32:	4607      	mov	r7, r0
 8004f34:	f109 0901 	add.w	r9, r9, #1
 8004f38:	e772      	b.n	8004e20 <_dtoa_r+0x9f0>
 8004f3a:	f000 fb27 	bl	800558c <__multadd>
 8004f3e:	4639      	mov	r1, r7
 8004f40:	4680      	mov	r8, r0
 8004f42:	2300      	movs	r3, #0
 8004f44:	220a      	movs	r2, #10
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 fb20 	bl	800558c <__multadd>
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	e7f1      	b.n	8004f34 <_dtoa_r+0xb04>
 8004f50:	9b03      	ldr	r3, [sp, #12]
 8004f52:	9302      	str	r3, [sp, #8]
 8004f54:	9d01      	ldr	r5, [sp, #4]
 8004f56:	ee18 0a10 	vmov	r0, s16
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	f7ff f9da 	bl	8004314 <quorem>
 8004f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004f64:	9b01      	ldr	r3, [sp, #4]
 8004f66:	f805 ab01 	strb.w	sl, [r5], #1
 8004f6a:	1aea      	subs	r2, r5, r3
 8004f6c:	9b02      	ldr	r3, [sp, #8]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	dd09      	ble.n	8004f86 <_dtoa_r+0xb56>
 8004f72:	ee18 1a10 	vmov	r1, s16
 8004f76:	2300      	movs	r3, #0
 8004f78:	220a      	movs	r2, #10
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fb06 	bl	800558c <__multadd>
 8004f80:	ee08 0a10 	vmov	s16, r0
 8004f84:	e7e7      	b.n	8004f56 <_dtoa_r+0xb26>
 8004f86:	9b02      	ldr	r3, [sp, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfc8      	it	gt
 8004f8c:	461d      	movgt	r5, r3
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	bfd8      	it	le
 8004f92:	2501      	movle	r5, #1
 8004f94:	441d      	add	r5, r3
 8004f96:	f04f 0800 	mov.w	r8, #0
 8004f9a:	ee18 1a10 	vmov	r1, s16
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fca3 	bl	80058ec <__lshift>
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	ee08 0a10 	vmov	s16, r0
 8004fac:	f000 fd0e 	bl	80059cc <__mcmp>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	dc91      	bgt.n	8004ed8 <_dtoa_r+0xaa8>
 8004fb4:	d102      	bne.n	8004fbc <_dtoa_r+0xb8c>
 8004fb6:	f01a 0f01 	tst.w	sl, #1
 8004fba:	d18d      	bne.n	8004ed8 <_dtoa_r+0xaa8>
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	461d      	mov	r5, r3
 8004fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fc4:	2a30      	cmp	r2, #48	; 0x30
 8004fc6:	d0fa      	beq.n	8004fbe <_dtoa_r+0xb8e>
 8004fc8:	e6d7      	b.n	8004d7a <_dtoa_r+0x94a>
 8004fca:	9a01      	ldr	r2, [sp, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d184      	bne.n	8004eda <_dtoa_r+0xaaa>
 8004fd0:	9b00      	ldr	r3, [sp, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2331      	movs	r3, #49	; 0x31
 8004fd8:	7013      	strb	r3, [r2, #0]
 8004fda:	e6ce      	b.n	8004d7a <_dtoa_r+0x94a>
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <_dtoa_r+0xbd4>)
 8004fde:	f7ff ba95 	b.w	800450c <_dtoa_r+0xdc>
 8004fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f47f aa6e 	bne.w	80044c6 <_dtoa_r+0x96>
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <_dtoa_r+0xbd8>)
 8004fec:	f7ff ba8e 	b.w	800450c <_dtoa_r+0xdc>
 8004ff0:	9b02      	ldr	r3, [sp, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dcae      	bgt.n	8004f54 <_dtoa_r+0xb24>
 8004ff6:	9b06      	ldr	r3, [sp, #24]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	f73f aea8 	bgt.w	8004d4e <_dtoa_r+0x91e>
 8004ffe:	e7a9      	b.n	8004f54 <_dtoa_r+0xb24>
 8005000:	08012796 	.word	0x08012796
 8005004:	08008517 	.word	0x08008517
 8005008:	0801270c 	.word	0x0801270c

0800500c <__sflush_r>:
 800500c:	898a      	ldrh	r2, [r1, #12]
 800500e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	4605      	mov	r5, r0
 8005014:	0710      	lsls	r0, r2, #28
 8005016:	460c      	mov	r4, r1
 8005018:	d458      	bmi.n	80050cc <__sflush_r+0xc0>
 800501a:	684b      	ldr	r3, [r1, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	dc05      	bgt.n	800502c <__sflush_r+0x20>
 8005020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	dc02      	bgt.n	800502c <__sflush_r+0x20>
 8005026:	2000      	movs	r0, #0
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800502e:	2e00      	cmp	r6, #0
 8005030:	d0f9      	beq.n	8005026 <__sflush_r+0x1a>
 8005032:	2300      	movs	r3, #0
 8005034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005038:	682f      	ldr	r7, [r5, #0]
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	d032      	beq.n	80050a4 <__sflush_r+0x98>
 800503e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	075a      	lsls	r2, r3, #29
 8005044:	d505      	bpl.n	8005052 <__sflush_r+0x46>
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	1ac0      	subs	r0, r0, r3
 800504a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800504c:	b10b      	cbz	r3, 8005052 <__sflush_r+0x46>
 800504e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005050:	1ac0      	subs	r0, r0, r3
 8005052:	2300      	movs	r3, #0
 8005054:	4602      	mov	r2, r0
 8005056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005058:	6a21      	ldr	r1, [r4, #32]
 800505a:	4628      	mov	r0, r5
 800505c:	47b0      	blx	r6
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	d106      	bne.n	8005072 <__sflush_r+0x66>
 8005064:	6829      	ldr	r1, [r5, #0]
 8005066:	291d      	cmp	r1, #29
 8005068:	d82c      	bhi.n	80050c4 <__sflush_r+0xb8>
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <__sflush_r+0x108>)
 800506c:	40ca      	lsrs	r2, r1
 800506e:	07d6      	lsls	r6, r2, #31
 8005070:	d528      	bpl.n	80050c4 <__sflush_r+0xb8>
 8005072:	2200      	movs	r2, #0
 8005074:	6062      	str	r2, [r4, #4]
 8005076:	04d9      	lsls	r1, r3, #19
 8005078:	6922      	ldr	r2, [r4, #16]
 800507a:	6022      	str	r2, [r4, #0]
 800507c:	d504      	bpl.n	8005088 <__sflush_r+0x7c>
 800507e:	1c42      	adds	r2, r0, #1
 8005080:	d101      	bne.n	8005086 <__sflush_r+0x7a>
 8005082:	682b      	ldr	r3, [r5, #0]
 8005084:	b903      	cbnz	r3, 8005088 <__sflush_r+0x7c>
 8005086:	6560      	str	r0, [r4, #84]	; 0x54
 8005088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800508a:	602f      	str	r7, [r5, #0]
 800508c:	2900      	cmp	r1, #0
 800508e:	d0ca      	beq.n	8005026 <__sflush_r+0x1a>
 8005090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005094:	4299      	cmp	r1, r3
 8005096:	d002      	beq.n	800509e <__sflush_r+0x92>
 8005098:	4628      	mov	r0, r5
 800509a:	f000 fda9 	bl	8005bf0 <_free_r>
 800509e:	2000      	movs	r0, #0
 80050a0:	6360      	str	r0, [r4, #52]	; 0x34
 80050a2:	e7c1      	b.n	8005028 <__sflush_r+0x1c>
 80050a4:	6a21      	ldr	r1, [r4, #32]
 80050a6:	2301      	movs	r3, #1
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b0      	blx	r6
 80050ac:	1c41      	adds	r1, r0, #1
 80050ae:	d1c7      	bne.n	8005040 <__sflush_r+0x34>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0c4      	beq.n	8005040 <__sflush_r+0x34>
 80050b6:	2b1d      	cmp	r3, #29
 80050b8:	d001      	beq.n	80050be <__sflush_r+0xb2>
 80050ba:	2b16      	cmp	r3, #22
 80050bc:	d101      	bne.n	80050c2 <__sflush_r+0xb6>
 80050be:	602f      	str	r7, [r5, #0]
 80050c0:	e7b1      	b.n	8005026 <__sflush_r+0x1a>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	e7ad      	b.n	8005028 <__sflush_r+0x1c>
 80050cc:	690f      	ldr	r7, [r1, #16]
 80050ce:	2f00      	cmp	r7, #0
 80050d0:	d0a9      	beq.n	8005026 <__sflush_r+0x1a>
 80050d2:	0793      	lsls	r3, r2, #30
 80050d4:	680e      	ldr	r6, [r1, #0]
 80050d6:	bf08      	it	eq
 80050d8:	694b      	ldreq	r3, [r1, #20]
 80050da:	600f      	str	r7, [r1, #0]
 80050dc:	bf18      	it	ne
 80050de:	2300      	movne	r3, #0
 80050e0:	eba6 0807 	sub.w	r8, r6, r7
 80050e4:	608b      	str	r3, [r1, #8]
 80050e6:	f1b8 0f00 	cmp.w	r8, #0
 80050ea:	dd9c      	ble.n	8005026 <__sflush_r+0x1a>
 80050ec:	6a21      	ldr	r1, [r4, #32]
 80050ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050f0:	4643      	mov	r3, r8
 80050f2:	463a      	mov	r2, r7
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b0      	blx	r6
 80050f8:	2800      	cmp	r0, #0
 80050fa:	dc06      	bgt.n	800510a <__sflush_r+0xfe>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005102:	81a3      	strh	r3, [r4, #12]
 8005104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005108:	e78e      	b.n	8005028 <__sflush_r+0x1c>
 800510a:	4407      	add	r7, r0
 800510c:	eba8 0800 	sub.w	r8, r8, r0
 8005110:	e7e9      	b.n	80050e6 <__sflush_r+0xda>
 8005112:	bf00      	nop
 8005114:	20400001 	.word	0x20400001

08005118 <_fflush_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	690b      	ldr	r3, [r1, #16]
 800511c:	4605      	mov	r5, r0
 800511e:	460c      	mov	r4, r1
 8005120:	b913      	cbnz	r3, 8005128 <_fflush_r+0x10>
 8005122:	2500      	movs	r5, #0
 8005124:	4628      	mov	r0, r5
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	b118      	cbz	r0, 8005132 <_fflush_r+0x1a>
 800512a:	6983      	ldr	r3, [r0, #24]
 800512c:	b90b      	cbnz	r3, 8005132 <_fflush_r+0x1a>
 800512e:	f000 f887 	bl	8005240 <__sinit>
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <_fflush_r+0x6c>)
 8005134:	429c      	cmp	r4, r3
 8005136:	d11b      	bne.n	8005170 <_fflush_r+0x58>
 8005138:	686c      	ldr	r4, [r5, #4]
 800513a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ef      	beq.n	8005122 <_fflush_r+0xa>
 8005142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005144:	07d0      	lsls	r0, r2, #31
 8005146:	d404      	bmi.n	8005152 <_fflush_r+0x3a>
 8005148:	0599      	lsls	r1, r3, #22
 800514a:	d402      	bmi.n	8005152 <_fflush_r+0x3a>
 800514c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514e:	f000 f92c 	bl	80053aa <__retarget_lock_acquire_recursive>
 8005152:	4628      	mov	r0, r5
 8005154:	4621      	mov	r1, r4
 8005156:	f7ff ff59 	bl	800500c <__sflush_r>
 800515a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800515c:	07da      	lsls	r2, r3, #31
 800515e:	4605      	mov	r5, r0
 8005160:	d4e0      	bmi.n	8005124 <_fflush_r+0xc>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	059b      	lsls	r3, r3, #22
 8005166:	d4dd      	bmi.n	8005124 <_fflush_r+0xc>
 8005168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516a:	f000 f91f 	bl	80053ac <__retarget_lock_release_recursive>
 800516e:	e7d9      	b.n	8005124 <_fflush_r+0xc>
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <_fflush_r+0x70>)
 8005172:	429c      	cmp	r4, r3
 8005174:	d101      	bne.n	800517a <_fflush_r+0x62>
 8005176:	68ac      	ldr	r4, [r5, #8]
 8005178:	e7df      	b.n	800513a <_fflush_r+0x22>
 800517a:	4b04      	ldr	r3, [pc, #16]	; (800518c <_fflush_r+0x74>)
 800517c:	429c      	cmp	r4, r3
 800517e:	bf08      	it	eq
 8005180:	68ec      	ldreq	r4, [r5, #12]
 8005182:	e7da      	b.n	800513a <_fflush_r+0x22>
 8005184:	080127c8 	.word	0x080127c8
 8005188:	080127e8 	.word	0x080127e8
 800518c:	080127a8 	.word	0x080127a8

08005190 <std>:
 8005190:	2300      	movs	r3, #0
 8005192:	b510      	push	{r4, lr}
 8005194:	4604      	mov	r4, r0
 8005196:	e9c0 3300 	strd	r3, r3, [r0]
 800519a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800519e:	6083      	str	r3, [r0, #8]
 80051a0:	8181      	strh	r1, [r0, #12]
 80051a2:	6643      	str	r3, [r0, #100]	; 0x64
 80051a4:	81c2      	strh	r2, [r0, #14]
 80051a6:	6183      	str	r3, [r0, #24]
 80051a8:	4619      	mov	r1, r3
 80051aa:	2208      	movs	r2, #8
 80051ac:	305c      	adds	r0, #92	; 0x5c
 80051ae:	f7fe f8c3 	bl	8003338 <memset>
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std+0x38>)
 80051b4:	6263      	str	r3, [r4, #36]	; 0x24
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x3c>)
 80051b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <std+0x40>)
 80051bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <std+0x44>)
 80051c0:	6224      	str	r4, [r4, #32]
 80051c2:	6323      	str	r3, [r4, #48]	; 0x30
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop
 80051c8:	08006339 	.word	0x08006339
 80051cc:	0800635b 	.word	0x0800635b
 80051d0:	08006393 	.word	0x08006393
 80051d4:	080063b7 	.word	0x080063b7

080051d8 <_cleanup_r>:
 80051d8:	4901      	ldr	r1, [pc, #4]	; (80051e0 <_cleanup_r+0x8>)
 80051da:	f000 b8c1 	b.w	8005360 <_fwalk_reent>
 80051de:	bf00      	nop
 80051e0:	08005119 	.word	0x08005119

080051e4 <__sfmoreglue>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	2268      	movs	r2, #104	; 0x68
 80051e8:	1e4d      	subs	r5, r1, #1
 80051ea:	4355      	muls	r5, r2
 80051ec:	460e      	mov	r6, r1
 80051ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051f2:	f000 fd49 	bl	8005c88 <_malloc_r>
 80051f6:	4604      	mov	r4, r0
 80051f8:	b140      	cbz	r0, 800520c <__sfmoreglue+0x28>
 80051fa:	2100      	movs	r1, #0
 80051fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005200:	300c      	adds	r0, #12
 8005202:	60a0      	str	r0, [r4, #8]
 8005204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005208:	f7fe f896 	bl	8003338 <memset>
 800520c:	4620      	mov	r0, r4
 800520e:	bd70      	pop	{r4, r5, r6, pc}

08005210 <__sfp_lock_acquire>:
 8005210:	4801      	ldr	r0, [pc, #4]	; (8005218 <__sfp_lock_acquire+0x8>)
 8005212:	f000 b8ca 	b.w	80053aa <__retarget_lock_acquire_recursive>
 8005216:	bf00      	nop
 8005218:	20000d45 	.word	0x20000d45

0800521c <__sfp_lock_release>:
 800521c:	4801      	ldr	r0, [pc, #4]	; (8005224 <__sfp_lock_release+0x8>)
 800521e:	f000 b8c5 	b.w	80053ac <__retarget_lock_release_recursive>
 8005222:	bf00      	nop
 8005224:	20000d45 	.word	0x20000d45

08005228 <__sinit_lock_acquire>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__sinit_lock_acquire+0x8>)
 800522a:	f000 b8be 	b.w	80053aa <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	20000d46 	.word	0x20000d46

08005234 <__sinit_lock_release>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__sinit_lock_release+0x8>)
 8005236:	f000 b8b9 	b.w	80053ac <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	20000d46 	.word	0x20000d46

08005240 <__sinit>:
 8005240:	b510      	push	{r4, lr}
 8005242:	4604      	mov	r4, r0
 8005244:	f7ff fff0 	bl	8005228 <__sinit_lock_acquire>
 8005248:	69a3      	ldr	r3, [r4, #24]
 800524a:	b11b      	cbz	r3, 8005254 <__sinit+0x14>
 800524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005250:	f7ff bff0 	b.w	8005234 <__sinit_lock_release>
 8005254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005258:	6523      	str	r3, [r4, #80]	; 0x50
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <__sinit+0x68>)
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <__sinit+0x6c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	62a2      	str	r2, [r4, #40]	; 0x28
 8005262:	42a3      	cmp	r3, r4
 8005264:	bf04      	itt	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	61a3      	streq	r3, [r4, #24]
 800526a:	4620      	mov	r0, r4
 800526c:	f000 f820 	bl	80052b0 <__sfp>
 8005270:	6060      	str	r0, [r4, #4]
 8005272:	4620      	mov	r0, r4
 8005274:	f000 f81c 	bl	80052b0 <__sfp>
 8005278:	60a0      	str	r0, [r4, #8]
 800527a:	4620      	mov	r0, r4
 800527c:	f000 f818 	bl	80052b0 <__sfp>
 8005280:	2200      	movs	r2, #0
 8005282:	60e0      	str	r0, [r4, #12]
 8005284:	2104      	movs	r1, #4
 8005286:	6860      	ldr	r0, [r4, #4]
 8005288:	f7ff ff82 	bl	8005190 <std>
 800528c:	68a0      	ldr	r0, [r4, #8]
 800528e:	2201      	movs	r2, #1
 8005290:	2109      	movs	r1, #9
 8005292:	f7ff ff7d 	bl	8005190 <std>
 8005296:	68e0      	ldr	r0, [r4, #12]
 8005298:	2202      	movs	r2, #2
 800529a:	2112      	movs	r1, #18
 800529c:	f7ff ff78 	bl	8005190 <std>
 80052a0:	2301      	movs	r3, #1
 80052a2:	61a3      	str	r3, [r4, #24]
 80052a4:	e7d2      	b.n	800524c <__sinit+0xc>
 80052a6:	bf00      	nop
 80052a8:	08012604 	.word	0x08012604
 80052ac:	080051d9 	.word	0x080051d9

080052b0 <__sfp>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	4607      	mov	r7, r0
 80052b4:	f7ff ffac 	bl	8005210 <__sfp_lock_acquire>
 80052b8:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <__sfp+0x84>)
 80052ba:	681e      	ldr	r6, [r3, #0]
 80052bc:	69b3      	ldr	r3, [r6, #24]
 80052be:	b913      	cbnz	r3, 80052c6 <__sfp+0x16>
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff ffbd 	bl	8005240 <__sinit>
 80052c6:	3648      	adds	r6, #72	; 0x48
 80052c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	d503      	bpl.n	80052d8 <__sfp+0x28>
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	b30b      	cbz	r3, 8005318 <__sfp+0x68>
 80052d4:	6836      	ldr	r6, [r6, #0]
 80052d6:	e7f7      	b.n	80052c8 <__sfp+0x18>
 80052d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052dc:	b9d5      	cbnz	r5, 8005314 <__sfp+0x64>
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <__sfp+0x88>)
 80052e0:	60e3      	str	r3, [r4, #12]
 80052e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052e6:	6665      	str	r5, [r4, #100]	; 0x64
 80052e8:	f000 f85e 	bl	80053a8 <__retarget_lock_init_recursive>
 80052ec:	f7ff ff96 	bl	800521c <__sfp_lock_release>
 80052f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052f8:	6025      	str	r5, [r4, #0]
 80052fa:	61a5      	str	r5, [r4, #24]
 80052fc:	2208      	movs	r2, #8
 80052fe:	4629      	mov	r1, r5
 8005300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005304:	f7fe f818 	bl	8003338 <memset>
 8005308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800530c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005310:	4620      	mov	r0, r4
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005314:	3468      	adds	r4, #104	; 0x68
 8005316:	e7d9      	b.n	80052cc <__sfp+0x1c>
 8005318:	2104      	movs	r1, #4
 800531a:	4638      	mov	r0, r7
 800531c:	f7ff ff62 	bl	80051e4 <__sfmoreglue>
 8005320:	4604      	mov	r4, r0
 8005322:	6030      	str	r0, [r6, #0]
 8005324:	2800      	cmp	r0, #0
 8005326:	d1d5      	bne.n	80052d4 <__sfp+0x24>
 8005328:	f7ff ff78 	bl	800521c <__sfp_lock_release>
 800532c:	230c      	movs	r3, #12
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	e7ee      	b.n	8005310 <__sfp+0x60>
 8005332:	bf00      	nop
 8005334:	08012604 	.word	0x08012604
 8005338:	ffff0001 	.word	0xffff0001

0800533c <fiprintf>:
 800533c:	b40e      	push	{r1, r2, r3}
 800533e:	b503      	push	{r0, r1, lr}
 8005340:	4601      	mov	r1, r0
 8005342:	ab03      	add	r3, sp, #12
 8005344:	4805      	ldr	r0, [pc, #20]	; (800535c <fiprintf+0x20>)
 8005346:	f853 2b04 	ldr.w	r2, [r3], #4
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	f000 fe7b 	bl	8006048 <_vfiprintf_r>
 8005352:	b002      	add	sp, #8
 8005354:	f85d eb04 	ldr.w	lr, [sp], #4
 8005358:	b003      	add	sp, #12
 800535a:	4770      	bx	lr
 800535c:	200001b0 	.word	0x200001b0

08005360 <_fwalk_reent>:
 8005360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005364:	4606      	mov	r6, r0
 8005366:	4688      	mov	r8, r1
 8005368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800536c:	2700      	movs	r7, #0
 800536e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005372:	f1b9 0901 	subs.w	r9, r9, #1
 8005376:	d505      	bpl.n	8005384 <_fwalk_reent+0x24>
 8005378:	6824      	ldr	r4, [r4, #0]
 800537a:	2c00      	cmp	r4, #0
 800537c:	d1f7      	bne.n	800536e <_fwalk_reent+0xe>
 800537e:	4638      	mov	r0, r7
 8005380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005384:	89ab      	ldrh	r3, [r5, #12]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d907      	bls.n	800539a <_fwalk_reent+0x3a>
 800538a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800538e:	3301      	adds	r3, #1
 8005390:	d003      	beq.n	800539a <_fwalk_reent+0x3a>
 8005392:	4629      	mov	r1, r5
 8005394:	4630      	mov	r0, r6
 8005396:	47c0      	blx	r8
 8005398:	4307      	orrs	r7, r0
 800539a:	3568      	adds	r5, #104	; 0x68
 800539c:	e7e9      	b.n	8005372 <_fwalk_reent+0x12>
	...

080053a0 <_localeconv_r>:
 80053a0:	4800      	ldr	r0, [pc, #0]	; (80053a4 <_localeconv_r+0x4>)
 80053a2:	4770      	bx	lr
 80053a4:	20000304 	.word	0x20000304

080053a8 <__retarget_lock_init_recursive>:
 80053a8:	4770      	bx	lr

080053aa <__retarget_lock_acquire_recursive>:
 80053aa:	4770      	bx	lr

080053ac <__retarget_lock_release_recursive>:
 80053ac:	4770      	bx	lr

080053ae <__swhatbuf_r>:
 80053ae:	b570      	push	{r4, r5, r6, lr}
 80053b0:	460e      	mov	r6, r1
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	2900      	cmp	r1, #0
 80053b8:	b096      	sub	sp, #88	; 0x58
 80053ba:	4614      	mov	r4, r2
 80053bc:	461d      	mov	r5, r3
 80053be:	da08      	bge.n	80053d2 <__swhatbuf_r+0x24>
 80053c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	061a      	lsls	r2, r3, #24
 80053ca:	d410      	bmi.n	80053ee <__swhatbuf_r+0x40>
 80053cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d0:	e00e      	b.n	80053f0 <__swhatbuf_r+0x42>
 80053d2:	466a      	mov	r2, sp
 80053d4:	f7fb fec6 	bl	8001164 <_fstat_r>
 80053d8:	2800      	cmp	r0, #0
 80053da:	dbf1      	blt.n	80053c0 <__swhatbuf_r+0x12>
 80053dc:	9a01      	ldr	r2, [sp, #4]
 80053de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053e6:	425a      	negs	r2, r3
 80053e8:	415a      	adcs	r2, r3
 80053ea:	602a      	str	r2, [r5, #0]
 80053ec:	e7ee      	b.n	80053cc <__swhatbuf_r+0x1e>
 80053ee:	2340      	movs	r3, #64	; 0x40
 80053f0:	2000      	movs	r0, #0
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	b016      	add	sp, #88	; 0x58
 80053f6:	bd70      	pop	{r4, r5, r6, pc}

080053f8 <__smakebuf_r>:
 80053f8:	898b      	ldrh	r3, [r1, #12]
 80053fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053fc:	079d      	lsls	r5, r3, #30
 80053fe:	4606      	mov	r6, r0
 8005400:	460c      	mov	r4, r1
 8005402:	d507      	bpl.n	8005414 <__smakebuf_r+0x1c>
 8005404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	2301      	movs	r3, #1
 800540e:	6163      	str	r3, [r4, #20]
 8005410:	b002      	add	sp, #8
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	ab01      	add	r3, sp, #4
 8005416:	466a      	mov	r2, sp
 8005418:	f7ff ffc9 	bl	80053ae <__swhatbuf_r>
 800541c:	9900      	ldr	r1, [sp, #0]
 800541e:	4605      	mov	r5, r0
 8005420:	4630      	mov	r0, r6
 8005422:	f000 fc31 	bl	8005c88 <_malloc_r>
 8005426:	b948      	cbnz	r0, 800543c <__smakebuf_r+0x44>
 8005428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542c:	059a      	lsls	r2, r3, #22
 800542e:	d4ef      	bmi.n	8005410 <__smakebuf_r+0x18>
 8005430:	f023 0303 	bic.w	r3, r3, #3
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	e7e3      	b.n	8005404 <__smakebuf_r+0xc>
 800543c:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <__smakebuf_r+0x7c>)
 800543e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	6020      	str	r0, [r4, #0]
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	9b00      	ldr	r3, [sp, #0]
 800544c:	6163      	str	r3, [r4, #20]
 800544e:	9b01      	ldr	r3, [sp, #4]
 8005450:	6120      	str	r0, [r4, #16]
 8005452:	b15b      	cbz	r3, 800546c <__smakebuf_r+0x74>
 8005454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005458:	4630      	mov	r0, r6
 800545a:	f7fb fe88 	bl	800116e <_isatty_r>
 800545e:	b128      	cbz	r0, 800546c <__smakebuf_r+0x74>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	89a0      	ldrh	r0, [r4, #12]
 800546e:	4305      	orrs	r5, r0
 8005470:	81a5      	strh	r5, [r4, #12]
 8005472:	e7cd      	b.n	8005410 <__smakebuf_r+0x18>
 8005474:	080051d9 	.word	0x080051d9

08005478 <malloc>:
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <malloc+0xc>)
 800547a:	4601      	mov	r1, r0
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f000 bc03 	b.w	8005c88 <_malloc_r>
 8005482:	bf00      	nop
 8005484:	200001b0 	.word	0x200001b0

08005488 <__ascii_mbtowc>:
 8005488:	b082      	sub	sp, #8
 800548a:	b901      	cbnz	r1, 800548e <__ascii_mbtowc+0x6>
 800548c:	a901      	add	r1, sp, #4
 800548e:	b142      	cbz	r2, 80054a2 <__ascii_mbtowc+0x1a>
 8005490:	b14b      	cbz	r3, 80054a6 <__ascii_mbtowc+0x1e>
 8005492:	7813      	ldrb	r3, [r2, #0]
 8005494:	600b      	str	r3, [r1, #0]
 8005496:	7812      	ldrb	r2, [r2, #0]
 8005498:	1e10      	subs	r0, r2, #0
 800549a:	bf18      	it	ne
 800549c:	2001      	movne	r0, #1
 800549e:	b002      	add	sp, #8
 80054a0:	4770      	bx	lr
 80054a2:	4610      	mov	r0, r2
 80054a4:	e7fb      	b.n	800549e <__ascii_mbtowc+0x16>
 80054a6:	f06f 0001 	mvn.w	r0, #1
 80054aa:	e7f8      	b.n	800549e <__ascii_mbtowc+0x16>

080054ac <memcpy>:
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	4770      	bx	lr
 80054b8:	b510      	push	{r4, lr}
 80054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c2:	4291      	cmp	r1, r2
 80054c4:	d1f9      	bne.n	80054ba <memcpy+0xe>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <_Balloc>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	b976      	cbnz	r6, 80054f0 <_Balloc+0x28>
 80054d2:	2010      	movs	r0, #16
 80054d4:	f7ff ffd0 	bl	8005478 <malloc>
 80054d8:	4602      	mov	r2, r0
 80054da:	6260      	str	r0, [r4, #36]	; 0x24
 80054dc:	b920      	cbnz	r0, 80054e8 <_Balloc+0x20>
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <_Balloc+0x78>)
 80054e0:	4818      	ldr	r0, [pc, #96]	; (8005544 <_Balloc+0x7c>)
 80054e2:	2166      	movs	r1, #102	; 0x66
 80054e4:	f7fe fef8 	bl	80042d8 <__assert_func>
 80054e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054ec:	6006      	str	r6, [r0, #0]
 80054ee:	60c6      	str	r6, [r0, #12]
 80054f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054f2:	68f3      	ldr	r3, [r6, #12]
 80054f4:	b183      	cbz	r3, 8005518 <_Balloc+0x50>
 80054f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054fe:	b9b8      	cbnz	r0, 8005530 <_Balloc+0x68>
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f605 	lsl.w	r6, r1, r5
 8005506:	1d72      	adds	r2, r6, #5
 8005508:	0092      	lsls	r2, r2, #2
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fb60 	bl	8005bd0 <_calloc_r>
 8005510:	b160      	cbz	r0, 800552c <_Balloc+0x64>
 8005512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005516:	e00e      	b.n	8005536 <_Balloc+0x6e>
 8005518:	2221      	movs	r2, #33	; 0x21
 800551a:	2104      	movs	r1, #4
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fb57 	bl	8005bd0 <_calloc_r>
 8005522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005524:	60f0      	str	r0, [r6, #12]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e4      	bne.n	80054f6 <_Balloc+0x2e>
 800552c:	2000      	movs	r0, #0
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	6802      	ldr	r2, [r0, #0]
 8005532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005536:	2300      	movs	r3, #0
 8005538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800553c:	e7f7      	b.n	800552e <_Balloc+0x66>
 800553e:	bf00      	nop
 8005540:	0801263a 	.word	0x0801263a
 8005544:	0801280e 	.word	0x0801280e

08005548 <_Bfree>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800554c:	4605      	mov	r5, r0
 800554e:	460c      	mov	r4, r1
 8005550:	b976      	cbnz	r6, 8005570 <_Bfree+0x28>
 8005552:	2010      	movs	r0, #16
 8005554:	f7ff ff90 	bl	8005478 <malloc>
 8005558:	4602      	mov	r2, r0
 800555a:	6268      	str	r0, [r5, #36]	; 0x24
 800555c:	b920      	cbnz	r0, 8005568 <_Bfree+0x20>
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <_Bfree+0x3c>)
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <_Bfree+0x40>)
 8005562:	218a      	movs	r1, #138	; 0x8a
 8005564:	f7fe feb8 	bl	80042d8 <__assert_func>
 8005568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800556c:	6006      	str	r6, [r0, #0]
 800556e:	60c6      	str	r6, [r0, #12]
 8005570:	b13c      	cbz	r4, 8005582 <_Bfree+0x3a>
 8005572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005574:	6862      	ldr	r2, [r4, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800557c:	6021      	str	r1, [r4, #0]
 800557e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	0801263a 	.word	0x0801263a
 8005588:	0801280e 	.word	0x0801280e

0800558c <__multadd>:
 800558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	690d      	ldr	r5, [r1, #16]
 8005592:	4607      	mov	r7, r0
 8005594:	460c      	mov	r4, r1
 8005596:	461e      	mov	r6, r3
 8005598:	f101 0c14 	add.w	ip, r1, #20
 800559c:	2000      	movs	r0, #0
 800559e:	f8dc 3000 	ldr.w	r3, [ip]
 80055a2:	b299      	uxth	r1, r3
 80055a4:	fb02 6101 	mla	r1, r2, r1, r6
 80055a8:	0c1e      	lsrs	r6, r3, #16
 80055aa:	0c0b      	lsrs	r3, r1, #16
 80055ac:	fb02 3306 	mla	r3, r2, r6, r3
 80055b0:	b289      	uxth	r1, r1
 80055b2:	3001      	adds	r0, #1
 80055b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055b8:	4285      	cmp	r5, r0
 80055ba:	f84c 1b04 	str.w	r1, [ip], #4
 80055be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055c2:	dcec      	bgt.n	800559e <__multadd+0x12>
 80055c4:	b30e      	cbz	r6, 800560a <__multadd+0x7e>
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dc19      	bgt.n	8005600 <__multadd+0x74>
 80055cc:	6861      	ldr	r1, [r4, #4]
 80055ce:	4638      	mov	r0, r7
 80055d0:	3101      	adds	r1, #1
 80055d2:	f7ff ff79 	bl	80054c8 <_Balloc>
 80055d6:	4680      	mov	r8, r0
 80055d8:	b928      	cbnz	r0, 80055e6 <__multadd+0x5a>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <__multadd+0x84>)
 80055de:	480d      	ldr	r0, [pc, #52]	; (8005614 <__multadd+0x88>)
 80055e0:	21b5      	movs	r1, #181	; 0xb5
 80055e2:	f7fe fe79 	bl	80042d8 <__assert_func>
 80055e6:	6922      	ldr	r2, [r4, #16]
 80055e8:	3202      	adds	r2, #2
 80055ea:	f104 010c 	add.w	r1, r4, #12
 80055ee:	0092      	lsls	r2, r2, #2
 80055f0:	300c      	adds	r0, #12
 80055f2:	f7ff ff5b 	bl	80054ac <memcpy>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4638      	mov	r0, r7
 80055fa:	f7ff ffa5 	bl	8005548 <_Bfree>
 80055fe:	4644      	mov	r4, r8
 8005600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005604:	3501      	adds	r5, #1
 8005606:	615e      	str	r6, [r3, #20]
 8005608:	6125      	str	r5, [r4, #16]
 800560a:	4620      	mov	r0, r4
 800560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005610:	08012796 	.word	0x08012796
 8005614:	0801280e 	.word	0x0801280e

08005618 <__hi0bits>:
 8005618:	0c03      	lsrs	r3, r0, #16
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	b9d3      	cbnz	r3, 8005654 <__hi0bits+0x3c>
 800561e:	0400      	lsls	r0, r0, #16
 8005620:	2310      	movs	r3, #16
 8005622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005626:	bf04      	itt	eq
 8005628:	0200      	lsleq	r0, r0, #8
 800562a:	3308      	addeq	r3, #8
 800562c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005630:	bf04      	itt	eq
 8005632:	0100      	lsleq	r0, r0, #4
 8005634:	3304      	addeq	r3, #4
 8005636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800563a:	bf04      	itt	eq
 800563c:	0080      	lsleq	r0, r0, #2
 800563e:	3302      	addeq	r3, #2
 8005640:	2800      	cmp	r0, #0
 8005642:	db05      	blt.n	8005650 <__hi0bits+0x38>
 8005644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005648:	f103 0301 	add.w	r3, r3, #1
 800564c:	bf08      	it	eq
 800564e:	2320      	moveq	r3, #32
 8005650:	4618      	mov	r0, r3
 8005652:	4770      	bx	lr
 8005654:	2300      	movs	r3, #0
 8005656:	e7e4      	b.n	8005622 <__hi0bits+0xa>

08005658 <__lo0bits>:
 8005658:	6803      	ldr	r3, [r0, #0]
 800565a:	f013 0207 	ands.w	r2, r3, #7
 800565e:	4601      	mov	r1, r0
 8005660:	d00b      	beq.n	800567a <__lo0bits+0x22>
 8005662:	07da      	lsls	r2, r3, #31
 8005664:	d423      	bmi.n	80056ae <__lo0bits+0x56>
 8005666:	0798      	lsls	r0, r3, #30
 8005668:	bf49      	itett	mi
 800566a:	085b      	lsrmi	r3, r3, #1
 800566c:	089b      	lsrpl	r3, r3, #2
 800566e:	2001      	movmi	r0, #1
 8005670:	600b      	strmi	r3, [r1, #0]
 8005672:	bf5c      	itt	pl
 8005674:	600b      	strpl	r3, [r1, #0]
 8005676:	2002      	movpl	r0, #2
 8005678:	4770      	bx	lr
 800567a:	b298      	uxth	r0, r3
 800567c:	b9a8      	cbnz	r0, 80056aa <__lo0bits+0x52>
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	2010      	movs	r0, #16
 8005682:	b2da      	uxtb	r2, r3
 8005684:	b90a      	cbnz	r2, 800568a <__lo0bits+0x32>
 8005686:	3008      	adds	r0, #8
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	071a      	lsls	r2, r3, #28
 800568c:	bf04      	itt	eq
 800568e:	091b      	lsreq	r3, r3, #4
 8005690:	3004      	addeq	r0, #4
 8005692:	079a      	lsls	r2, r3, #30
 8005694:	bf04      	itt	eq
 8005696:	089b      	lsreq	r3, r3, #2
 8005698:	3002      	addeq	r0, #2
 800569a:	07da      	lsls	r2, r3, #31
 800569c:	d403      	bmi.n	80056a6 <__lo0bits+0x4e>
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	f100 0001 	add.w	r0, r0, #1
 80056a4:	d005      	beq.n	80056b2 <__lo0bits+0x5a>
 80056a6:	600b      	str	r3, [r1, #0]
 80056a8:	4770      	bx	lr
 80056aa:	4610      	mov	r0, r2
 80056ac:	e7e9      	b.n	8005682 <__lo0bits+0x2a>
 80056ae:	2000      	movs	r0, #0
 80056b0:	4770      	bx	lr
 80056b2:	2020      	movs	r0, #32
 80056b4:	4770      	bx	lr
	...

080056b8 <__i2b>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	460c      	mov	r4, r1
 80056bc:	2101      	movs	r1, #1
 80056be:	f7ff ff03 	bl	80054c8 <_Balloc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	b928      	cbnz	r0, 80056d2 <__i2b+0x1a>
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <__i2b+0x24>)
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <__i2b+0x28>)
 80056ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056ce:	f7fe fe03 	bl	80042d8 <__assert_func>
 80056d2:	2301      	movs	r3, #1
 80056d4:	6144      	str	r4, [r0, #20]
 80056d6:	6103      	str	r3, [r0, #16]
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	08012796 	.word	0x08012796
 80056e0:	0801280e 	.word	0x0801280e

080056e4 <__multiply>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	4691      	mov	r9, r2
 80056ea:	690a      	ldr	r2, [r1, #16]
 80056ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	bfb8      	it	lt
 80056f4:	460b      	movlt	r3, r1
 80056f6:	460c      	mov	r4, r1
 80056f8:	bfbc      	itt	lt
 80056fa:	464c      	movlt	r4, r9
 80056fc:	4699      	movlt	r9, r3
 80056fe:	6927      	ldr	r7, [r4, #16]
 8005700:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005704:	68a3      	ldr	r3, [r4, #8]
 8005706:	6861      	ldr	r1, [r4, #4]
 8005708:	eb07 060a 	add.w	r6, r7, sl
 800570c:	42b3      	cmp	r3, r6
 800570e:	b085      	sub	sp, #20
 8005710:	bfb8      	it	lt
 8005712:	3101      	addlt	r1, #1
 8005714:	f7ff fed8 	bl	80054c8 <_Balloc>
 8005718:	b930      	cbnz	r0, 8005728 <__multiply+0x44>
 800571a:	4602      	mov	r2, r0
 800571c:	4b44      	ldr	r3, [pc, #272]	; (8005830 <__multiply+0x14c>)
 800571e:	4845      	ldr	r0, [pc, #276]	; (8005834 <__multiply+0x150>)
 8005720:	f240 115d 	movw	r1, #349	; 0x15d
 8005724:	f7fe fdd8 	bl	80042d8 <__assert_func>
 8005728:	f100 0514 	add.w	r5, r0, #20
 800572c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005730:	462b      	mov	r3, r5
 8005732:	2200      	movs	r2, #0
 8005734:	4543      	cmp	r3, r8
 8005736:	d321      	bcc.n	800577c <__multiply+0x98>
 8005738:	f104 0314 	add.w	r3, r4, #20
 800573c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005740:	f109 0314 	add.w	r3, r9, #20
 8005744:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005748:	9202      	str	r2, [sp, #8]
 800574a:	1b3a      	subs	r2, r7, r4
 800574c:	3a15      	subs	r2, #21
 800574e:	f022 0203 	bic.w	r2, r2, #3
 8005752:	3204      	adds	r2, #4
 8005754:	f104 0115 	add.w	r1, r4, #21
 8005758:	428f      	cmp	r7, r1
 800575a:	bf38      	it	cc
 800575c:	2204      	movcc	r2, #4
 800575e:	9201      	str	r2, [sp, #4]
 8005760:	9a02      	ldr	r2, [sp, #8]
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d80c      	bhi.n	8005782 <__multiply+0x9e>
 8005768:	2e00      	cmp	r6, #0
 800576a:	dd03      	ble.n	8005774 <__multiply+0x90>
 800576c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05a      	beq.n	800582a <__multiply+0x146>
 8005774:	6106      	str	r6, [r0, #16]
 8005776:	b005      	add	sp, #20
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	f843 2b04 	str.w	r2, [r3], #4
 8005780:	e7d8      	b.n	8005734 <__multiply+0x50>
 8005782:	f8b3 a000 	ldrh.w	sl, [r3]
 8005786:	f1ba 0f00 	cmp.w	sl, #0
 800578a:	d024      	beq.n	80057d6 <__multiply+0xf2>
 800578c:	f104 0e14 	add.w	lr, r4, #20
 8005790:	46a9      	mov	r9, r5
 8005792:	f04f 0c00 	mov.w	ip, #0
 8005796:	f85e 2b04 	ldr.w	r2, [lr], #4
 800579a:	f8d9 1000 	ldr.w	r1, [r9]
 800579e:	fa1f fb82 	uxth.w	fp, r2
 80057a2:	b289      	uxth	r1, r1
 80057a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80057a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80057ac:	f8d9 2000 	ldr.w	r2, [r9]
 80057b0:	4461      	add	r1, ip
 80057b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80057ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057be:	b289      	uxth	r1, r1
 80057c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057c4:	4577      	cmp	r7, lr
 80057c6:	f849 1b04 	str.w	r1, [r9], #4
 80057ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057ce:	d8e2      	bhi.n	8005796 <__multiply+0xb2>
 80057d0:	9a01      	ldr	r2, [sp, #4]
 80057d2:	f845 c002 	str.w	ip, [r5, r2]
 80057d6:	9a03      	ldr	r2, [sp, #12]
 80057d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057dc:	3304      	adds	r3, #4
 80057de:	f1b9 0f00 	cmp.w	r9, #0
 80057e2:	d020      	beq.n	8005826 <__multiply+0x142>
 80057e4:	6829      	ldr	r1, [r5, #0]
 80057e6:	f104 0c14 	add.w	ip, r4, #20
 80057ea:	46ae      	mov	lr, r5
 80057ec:	f04f 0a00 	mov.w	sl, #0
 80057f0:	f8bc b000 	ldrh.w	fp, [ip]
 80057f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057f8:	fb09 220b 	mla	r2, r9, fp, r2
 80057fc:	4492      	add	sl, r2
 80057fe:	b289      	uxth	r1, r1
 8005800:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005804:	f84e 1b04 	str.w	r1, [lr], #4
 8005808:	f85c 2b04 	ldr.w	r2, [ip], #4
 800580c:	f8be 1000 	ldrh.w	r1, [lr]
 8005810:	0c12      	lsrs	r2, r2, #16
 8005812:	fb09 1102 	mla	r1, r9, r2, r1
 8005816:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800581a:	4567      	cmp	r7, ip
 800581c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005820:	d8e6      	bhi.n	80057f0 <__multiply+0x10c>
 8005822:	9a01      	ldr	r2, [sp, #4]
 8005824:	50a9      	str	r1, [r5, r2]
 8005826:	3504      	adds	r5, #4
 8005828:	e79a      	b.n	8005760 <__multiply+0x7c>
 800582a:	3e01      	subs	r6, #1
 800582c:	e79c      	b.n	8005768 <__multiply+0x84>
 800582e:	bf00      	nop
 8005830:	08012796 	.word	0x08012796
 8005834:	0801280e 	.word	0x0801280e

08005838 <__pow5mult>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	4615      	mov	r5, r2
 800583e:	f012 0203 	ands.w	r2, r2, #3
 8005842:	4606      	mov	r6, r0
 8005844:	460f      	mov	r7, r1
 8005846:	d007      	beq.n	8005858 <__pow5mult+0x20>
 8005848:	4c25      	ldr	r4, [pc, #148]	; (80058e0 <__pow5mult+0xa8>)
 800584a:	3a01      	subs	r2, #1
 800584c:	2300      	movs	r3, #0
 800584e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005852:	f7ff fe9b 	bl	800558c <__multadd>
 8005856:	4607      	mov	r7, r0
 8005858:	10ad      	asrs	r5, r5, #2
 800585a:	d03d      	beq.n	80058d8 <__pow5mult+0xa0>
 800585c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800585e:	b97c      	cbnz	r4, 8005880 <__pow5mult+0x48>
 8005860:	2010      	movs	r0, #16
 8005862:	f7ff fe09 	bl	8005478 <malloc>
 8005866:	4602      	mov	r2, r0
 8005868:	6270      	str	r0, [r6, #36]	; 0x24
 800586a:	b928      	cbnz	r0, 8005878 <__pow5mult+0x40>
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <__pow5mult+0xac>)
 800586e:	481e      	ldr	r0, [pc, #120]	; (80058e8 <__pow5mult+0xb0>)
 8005870:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005874:	f7fe fd30 	bl	80042d8 <__assert_func>
 8005878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800587c:	6004      	str	r4, [r0, #0]
 800587e:	60c4      	str	r4, [r0, #12]
 8005880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005888:	b94c      	cbnz	r4, 800589e <__pow5mult+0x66>
 800588a:	f240 2171 	movw	r1, #625	; 0x271
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ff12 	bl	80056b8 <__i2b>
 8005894:	2300      	movs	r3, #0
 8005896:	f8c8 0008 	str.w	r0, [r8, #8]
 800589a:	4604      	mov	r4, r0
 800589c:	6003      	str	r3, [r0, #0]
 800589e:	f04f 0900 	mov.w	r9, #0
 80058a2:	07eb      	lsls	r3, r5, #31
 80058a4:	d50a      	bpl.n	80058bc <__pow5mult+0x84>
 80058a6:	4639      	mov	r1, r7
 80058a8:	4622      	mov	r2, r4
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff ff1a 	bl	80056e4 <__multiply>
 80058b0:	4639      	mov	r1, r7
 80058b2:	4680      	mov	r8, r0
 80058b4:	4630      	mov	r0, r6
 80058b6:	f7ff fe47 	bl	8005548 <_Bfree>
 80058ba:	4647      	mov	r7, r8
 80058bc:	106d      	asrs	r5, r5, #1
 80058be:	d00b      	beq.n	80058d8 <__pow5mult+0xa0>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	b938      	cbnz	r0, 80058d4 <__pow5mult+0x9c>
 80058c4:	4622      	mov	r2, r4
 80058c6:	4621      	mov	r1, r4
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff ff0b 	bl	80056e4 <__multiply>
 80058ce:	6020      	str	r0, [r4, #0]
 80058d0:	f8c0 9000 	str.w	r9, [r0]
 80058d4:	4604      	mov	r4, r0
 80058d6:	e7e4      	b.n	80058a2 <__pow5mult+0x6a>
 80058d8:	4638      	mov	r0, r7
 80058da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058de:	bf00      	nop
 80058e0:	08012980 	.word	0x08012980
 80058e4:	0801263a 	.word	0x0801263a
 80058e8:	0801280e 	.word	0x0801280e

080058ec <__lshift>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	460c      	mov	r4, r1
 80058f2:	6849      	ldr	r1, [r1, #4]
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058fa:	68a3      	ldr	r3, [r4, #8]
 80058fc:	4607      	mov	r7, r0
 80058fe:	4691      	mov	r9, r2
 8005900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005904:	f108 0601 	add.w	r6, r8, #1
 8005908:	42b3      	cmp	r3, r6
 800590a:	db0b      	blt.n	8005924 <__lshift+0x38>
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff fddb 	bl	80054c8 <_Balloc>
 8005912:	4605      	mov	r5, r0
 8005914:	b948      	cbnz	r0, 800592a <__lshift+0x3e>
 8005916:	4602      	mov	r2, r0
 8005918:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <__lshift+0xd8>)
 800591a:	482b      	ldr	r0, [pc, #172]	; (80059c8 <__lshift+0xdc>)
 800591c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005920:	f7fe fcda 	bl	80042d8 <__assert_func>
 8005924:	3101      	adds	r1, #1
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	e7ee      	b.n	8005908 <__lshift+0x1c>
 800592a:	2300      	movs	r3, #0
 800592c:	f100 0114 	add.w	r1, r0, #20
 8005930:	f100 0210 	add.w	r2, r0, #16
 8005934:	4618      	mov	r0, r3
 8005936:	4553      	cmp	r3, sl
 8005938:	db37      	blt.n	80059aa <__lshift+0xbe>
 800593a:	6920      	ldr	r0, [r4, #16]
 800593c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005940:	f104 0314 	add.w	r3, r4, #20
 8005944:	f019 091f 	ands.w	r9, r9, #31
 8005948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800594c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005950:	d02f      	beq.n	80059b2 <__lshift+0xc6>
 8005952:	f1c9 0e20 	rsb	lr, r9, #32
 8005956:	468a      	mov	sl, r1
 8005958:	f04f 0c00 	mov.w	ip, #0
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	fa02 f209 	lsl.w	r2, r2, r9
 8005962:	ea42 020c 	orr.w	r2, r2, ip
 8005966:	f84a 2b04 	str.w	r2, [sl], #4
 800596a:	f853 2b04 	ldr.w	r2, [r3], #4
 800596e:	4298      	cmp	r0, r3
 8005970:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005974:	d8f2      	bhi.n	800595c <__lshift+0x70>
 8005976:	1b03      	subs	r3, r0, r4
 8005978:	3b15      	subs	r3, #21
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	3304      	adds	r3, #4
 8005980:	f104 0215 	add.w	r2, r4, #21
 8005984:	4290      	cmp	r0, r2
 8005986:	bf38      	it	cc
 8005988:	2304      	movcc	r3, #4
 800598a:	f841 c003 	str.w	ip, [r1, r3]
 800598e:	f1bc 0f00 	cmp.w	ip, #0
 8005992:	d001      	beq.n	8005998 <__lshift+0xac>
 8005994:	f108 0602 	add.w	r6, r8, #2
 8005998:	3e01      	subs	r6, #1
 800599a:	4638      	mov	r0, r7
 800599c:	612e      	str	r6, [r5, #16]
 800599e:	4621      	mov	r1, r4
 80059a0:	f7ff fdd2 	bl	8005548 <_Bfree>
 80059a4:	4628      	mov	r0, r5
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80059ae:	3301      	adds	r3, #1
 80059b0:	e7c1      	b.n	8005936 <__lshift+0x4a>
 80059b2:	3904      	subs	r1, #4
 80059b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80059bc:	4298      	cmp	r0, r3
 80059be:	d8f9      	bhi.n	80059b4 <__lshift+0xc8>
 80059c0:	e7ea      	b.n	8005998 <__lshift+0xac>
 80059c2:	bf00      	nop
 80059c4:	08012796 	.word	0x08012796
 80059c8:	0801280e 	.word	0x0801280e

080059cc <__mcmp>:
 80059cc:	b530      	push	{r4, r5, lr}
 80059ce:	6902      	ldr	r2, [r0, #16]
 80059d0:	690c      	ldr	r4, [r1, #16]
 80059d2:	1b12      	subs	r2, r2, r4
 80059d4:	d10e      	bne.n	80059f4 <__mcmp+0x28>
 80059d6:	f100 0314 	add.w	r3, r0, #20
 80059da:	3114      	adds	r1, #20
 80059dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80059e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80059e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80059e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80059ec:	42a5      	cmp	r5, r4
 80059ee:	d003      	beq.n	80059f8 <__mcmp+0x2c>
 80059f0:	d305      	bcc.n	80059fe <__mcmp+0x32>
 80059f2:	2201      	movs	r2, #1
 80059f4:	4610      	mov	r0, r2
 80059f6:	bd30      	pop	{r4, r5, pc}
 80059f8:	4283      	cmp	r3, r0
 80059fa:	d3f3      	bcc.n	80059e4 <__mcmp+0x18>
 80059fc:	e7fa      	b.n	80059f4 <__mcmp+0x28>
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a02:	e7f7      	b.n	80059f4 <__mcmp+0x28>

08005a04 <__mdiff>:
 8005a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	460c      	mov	r4, r1
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4690      	mov	r8, r2
 8005a12:	f7ff ffdb 	bl	80059cc <__mcmp>
 8005a16:	1e05      	subs	r5, r0, #0
 8005a18:	d110      	bne.n	8005a3c <__mdiff+0x38>
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff fd53 	bl	80054c8 <_Balloc>
 8005a22:	b930      	cbnz	r0, 8005a32 <__mdiff+0x2e>
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <__mdiff+0x10c>)
 8005a26:	4602      	mov	r2, r0
 8005a28:	f240 2132 	movw	r1, #562	; 0x232
 8005a2c:	4839      	ldr	r0, [pc, #228]	; (8005b14 <__mdiff+0x110>)
 8005a2e:	f7fe fc53 	bl	80042d8 <__assert_func>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	bfa4      	itt	ge
 8005a3e:	4643      	movge	r3, r8
 8005a40:	46a0      	movge	r8, r4
 8005a42:	4630      	mov	r0, r6
 8005a44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a48:	bfa6      	itte	ge
 8005a4a:	461c      	movge	r4, r3
 8005a4c:	2500      	movge	r5, #0
 8005a4e:	2501      	movlt	r5, #1
 8005a50:	f7ff fd3a 	bl	80054c8 <_Balloc>
 8005a54:	b920      	cbnz	r0, 8005a60 <__mdiff+0x5c>
 8005a56:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <__mdiff+0x10c>)
 8005a58:	4602      	mov	r2, r0
 8005a5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a5e:	e7e5      	b.n	8005a2c <__mdiff+0x28>
 8005a60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a64:	6926      	ldr	r6, [r4, #16]
 8005a66:	60c5      	str	r5, [r0, #12]
 8005a68:	f104 0914 	add.w	r9, r4, #20
 8005a6c:	f108 0514 	add.w	r5, r8, #20
 8005a70:	f100 0e14 	add.w	lr, r0, #20
 8005a74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a7c:	f108 0210 	add.w	r2, r8, #16
 8005a80:	46f2      	mov	sl, lr
 8005a82:	2100      	movs	r1, #0
 8005a84:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a8c:	fa1f f883 	uxth.w	r8, r3
 8005a90:	fa11 f18b 	uxtah	r1, r1, fp
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	eba1 0808 	sub.w	r8, r1, r8
 8005a9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005aa2:	fa1f f888 	uxth.w	r8, r8
 8005aa6:	1419      	asrs	r1, r3, #16
 8005aa8:	454e      	cmp	r6, r9
 8005aaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005aae:	f84a 3b04 	str.w	r3, [sl], #4
 8005ab2:	d8e7      	bhi.n	8005a84 <__mdiff+0x80>
 8005ab4:	1b33      	subs	r3, r6, r4
 8005ab6:	3b15      	subs	r3, #21
 8005ab8:	f023 0303 	bic.w	r3, r3, #3
 8005abc:	3304      	adds	r3, #4
 8005abe:	3415      	adds	r4, #21
 8005ac0:	42a6      	cmp	r6, r4
 8005ac2:	bf38      	it	cc
 8005ac4:	2304      	movcc	r3, #4
 8005ac6:	441d      	add	r5, r3
 8005ac8:	4473      	add	r3, lr
 8005aca:	469e      	mov	lr, r3
 8005acc:	462e      	mov	r6, r5
 8005ace:	4566      	cmp	r6, ip
 8005ad0:	d30e      	bcc.n	8005af0 <__mdiff+0xec>
 8005ad2:	f10c 0203 	add.w	r2, ip, #3
 8005ad6:	1b52      	subs	r2, r2, r5
 8005ad8:	f022 0203 	bic.w	r2, r2, #3
 8005adc:	3d03      	subs	r5, #3
 8005ade:	45ac      	cmp	ip, r5
 8005ae0:	bf38      	it	cc
 8005ae2:	2200      	movcc	r2, #0
 8005ae4:	441a      	add	r2, r3
 8005ae6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005aea:	b17b      	cbz	r3, 8005b0c <__mdiff+0x108>
 8005aec:	6107      	str	r7, [r0, #16]
 8005aee:	e7a3      	b.n	8005a38 <__mdiff+0x34>
 8005af0:	f856 8b04 	ldr.w	r8, [r6], #4
 8005af4:	fa11 f288 	uxtah	r2, r1, r8
 8005af8:	1414      	asrs	r4, r2, #16
 8005afa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005afe:	b292      	uxth	r2, r2
 8005b00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b04:	f84e 2b04 	str.w	r2, [lr], #4
 8005b08:	1421      	asrs	r1, r4, #16
 8005b0a:	e7e0      	b.n	8005ace <__mdiff+0xca>
 8005b0c:	3f01      	subs	r7, #1
 8005b0e:	e7ea      	b.n	8005ae6 <__mdiff+0xe2>
 8005b10:	08012796 	.word	0x08012796
 8005b14:	0801280e 	.word	0x0801280e

08005b18 <__d2b>:
 8005b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b1c:	4689      	mov	r9, r1
 8005b1e:	2101      	movs	r1, #1
 8005b20:	ec57 6b10 	vmov	r6, r7, d0
 8005b24:	4690      	mov	r8, r2
 8005b26:	f7ff fccf 	bl	80054c8 <_Balloc>
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	b930      	cbnz	r0, 8005b3c <__d2b+0x24>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <__d2b+0xb0>)
 8005b32:	4826      	ldr	r0, [pc, #152]	; (8005bcc <__d2b+0xb4>)
 8005b34:	f240 310a 	movw	r1, #778	; 0x30a
 8005b38:	f7fe fbce 	bl	80042d8 <__assert_func>
 8005b3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b44:	bb35      	cbnz	r5, 8005b94 <__d2b+0x7c>
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	d028      	beq.n	8005b9e <__d2b+0x86>
 8005b4c:	4668      	mov	r0, sp
 8005b4e:	9600      	str	r6, [sp, #0]
 8005b50:	f7ff fd82 	bl	8005658 <__lo0bits>
 8005b54:	9900      	ldr	r1, [sp, #0]
 8005b56:	b300      	cbz	r0, 8005b9a <__d2b+0x82>
 8005b58:	9a01      	ldr	r2, [sp, #4]
 8005b5a:	f1c0 0320 	rsb	r3, r0, #32
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	430b      	orrs	r3, r1
 8005b64:	40c2      	lsrs	r2, r0
 8005b66:	6163      	str	r3, [r4, #20]
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	61a3      	str	r3, [r4, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2202      	movne	r2, #2
 8005b74:	2201      	moveq	r2, #1
 8005b76:	6122      	str	r2, [r4, #16]
 8005b78:	b1d5      	cbz	r5, 8005bb0 <__d2b+0x98>
 8005b7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b7e:	4405      	add	r5, r0
 8005b80:	f8c9 5000 	str.w	r5, [r9]
 8005b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b88:	f8c8 0000 	str.w	r0, [r8]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	b003      	add	sp, #12
 8005b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b98:	e7d5      	b.n	8005b46 <__d2b+0x2e>
 8005b9a:	6161      	str	r1, [r4, #20]
 8005b9c:	e7e5      	b.n	8005b6a <__d2b+0x52>
 8005b9e:	a801      	add	r0, sp, #4
 8005ba0:	f7ff fd5a 	bl	8005658 <__lo0bits>
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	6163      	str	r3, [r4, #20]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	6122      	str	r2, [r4, #16]
 8005bac:	3020      	adds	r0, #32
 8005bae:	e7e3      	b.n	8005b78 <__d2b+0x60>
 8005bb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bb8:	f8c9 0000 	str.w	r0, [r9]
 8005bbc:	6918      	ldr	r0, [r3, #16]
 8005bbe:	f7ff fd2b 	bl	8005618 <__hi0bits>
 8005bc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005bc6:	e7df      	b.n	8005b88 <__d2b+0x70>
 8005bc8:	08012796 	.word	0x08012796
 8005bcc:	0801280e 	.word	0x0801280e

08005bd0 <_calloc_r>:
 8005bd0:	b513      	push	{r0, r1, r4, lr}
 8005bd2:	434a      	muls	r2, r1
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	9201      	str	r2, [sp, #4]
 8005bd8:	f000 f856 	bl	8005c88 <_malloc_r>
 8005bdc:	4604      	mov	r4, r0
 8005bde:	b118      	cbz	r0, 8005be8 <_calloc_r+0x18>
 8005be0:	9a01      	ldr	r2, [sp, #4]
 8005be2:	2100      	movs	r1, #0
 8005be4:	f7fd fba8 	bl	8003338 <memset>
 8005be8:	4620      	mov	r0, r4
 8005bea:	b002      	add	sp, #8
 8005bec:	bd10      	pop	{r4, pc}
	...

08005bf0 <_free_r>:
 8005bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d044      	beq.n	8005c80 <_free_r+0x90>
 8005bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfa:	9001      	str	r0, [sp, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8005c02:	bfb8      	it	lt
 8005c04:	18e4      	addlt	r4, r4, r3
 8005c06:	f000 fc09 	bl	800641c <__malloc_lock>
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <_free_r+0x94>)
 8005c0c:	9801      	ldr	r0, [sp, #4]
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	b933      	cbnz	r3, 8005c20 <_free_r+0x30>
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6014      	str	r4, [r2, #0]
 8005c16:	b003      	add	sp, #12
 8005c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c1c:	f000 bc04 	b.w	8006428 <__malloc_unlock>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d908      	bls.n	8005c36 <_free_r+0x46>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf01      	itttt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	1949      	addeq	r1, r1, r5
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	e7ed      	b.n	8005c12 <_free_r+0x22>
 8005c36:	461a      	mov	r2, r3
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b10b      	cbz	r3, 8005c40 <_free_r+0x50>
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d9fa      	bls.n	8005c36 <_free_r+0x46>
 8005c40:	6811      	ldr	r1, [r2, #0]
 8005c42:	1855      	adds	r5, r2, r1
 8005c44:	42a5      	cmp	r5, r4
 8005c46:	d10b      	bne.n	8005c60 <_free_r+0x70>
 8005c48:	6824      	ldr	r4, [r4, #0]
 8005c4a:	4421      	add	r1, r4
 8005c4c:	1854      	adds	r4, r2, r1
 8005c4e:	42a3      	cmp	r3, r4
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	d1e0      	bne.n	8005c16 <_free_r+0x26>
 8005c54:	681c      	ldr	r4, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	6053      	str	r3, [r2, #4]
 8005c5a:	4421      	add	r1, r4
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	e7da      	b.n	8005c16 <_free_r+0x26>
 8005c60:	d902      	bls.n	8005c68 <_free_r+0x78>
 8005c62:	230c      	movs	r3, #12
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	e7d6      	b.n	8005c16 <_free_r+0x26>
 8005c68:	6825      	ldr	r5, [r4, #0]
 8005c6a:	1961      	adds	r1, r4, r5
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf04      	itt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	bf04      	itt	eq
 8005c78:	1949      	addeq	r1, r1, r5
 8005c7a:	6021      	streq	r1, [r4, #0]
 8005c7c:	6054      	str	r4, [r2, #4]
 8005c7e:	e7ca      	b.n	8005c16 <_free_r+0x26>
 8005c80:	b003      	add	sp, #12
 8005c82:	bd30      	pop	{r4, r5, pc}
 8005c84:	20000d48 	.word	0x20000d48

08005c88 <_malloc_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	1ccd      	adds	r5, r1, #3
 8005c8c:	f025 0503 	bic.w	r5, r5, #3
 8005c90:	3508      	adds	r5, #8
 8005c92:	2d0c      	cmp	r5, #12
 8005c94:	bf38      	it	cc
 8005c96:	250c      	movcc	r5, #12
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	db01      	blt.n	8005ca2 <_malloc_r+0x1a>
 8005c9e:	42a9      	cmp	r1, r5
 8005ca0:	d903      	bls.n	8005caa <_malloc_r+0x22>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005caa:	f000 fbb7 	bl	800641c <__malloc_lock>
 8005cae:	4921      	ldr	r1, [pc, #132]	; (8005d34 <_malloc_r+0xac>)
 8005cb0:	680a      	ldr	r2, [r1, #0]
 8005cb2:	4614      	mov	r4, r2
 8005cb4:	b99c      	cbnz	r4, 8005cde <_malloc_r+0x56>
 8005cb6:	4f20      	ldr	r7, [pc, #128]	; (8005d38 <_malloc_r+0xb0>)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	b923      	cbnz	r3, 8005cc6 <_malloc_r+0x3e>
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f7fb fa36 	bl	8001130 <_sbrk_r>
 8005cc4:	6038      	str	r0, [r7, #0]
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7fb fa31 	bl	8001130 <_sbrk_r>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d123      	bne.n	8005d1a <_malloc_r+0x92>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 fba6 	bl	8006428 <__malloc_unlock>
 8005cdc:	e7e3      	b.n	8005ca6 <_malloc_r+0x1e>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	1b5b      	subs	r3, r3, r5
 8005ce2:	d417      	bmi.n	8005d14 <_malloc_r+0x8c>
 8005ce4:	2b0b      	cmp	r3, #11
 8005ce6:	d903      	bls.n	8005cf0 <_malloc_r+0x68>
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	441c      	add	r4, r3
 8005cec:	6025      	str	r5, [r4, #0]
 8005cee:	e004      	b.n	8005cfa <_malloc_r+0x72>
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	42a2      	cmp	r2, r4
 8005cf4:	bf0c      	ite	eq
 8005cf6:	600b      	streq	r3, [r1, #0]
 8005cf8:	6053      	strne	r3, [r2, #4]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 fb94 	bl	8006428 <__malloc_unlock>
 8005d00:	f104 000b 	add.w	r0, r4, #11
 8005d04:	1d23      	adds	r3, r4, #4
 8005d06:	f020 0007 	bic.w	r0, r0, #7
 8005d0a:	1ac2      	subs	r2, r0, r3
 8005d0c:	d0cc      	beq.n	8005ca8 <_malloc_r+0x20>
 8005d0e:	1a1b      	subs	r3, r3, r0
 8005d10:	50a3      	str	r3, [r4, r2]
 8005d12:	e7c9      	b.n	8005ca8 <_malloc_r+0x20>
 8005d14:	4622      	mov	r2, r4
 8005d16:	6864      	ldr	r4, [r4, #4]
 8005d18:	e7cc      	b.n	8005cb4 <_malloc_r+0x2c>
 8005d1a:	1cc4      	adds	r4, r0, #3
 8005d1c:	f024 0403 	bic.w	r4, r4, #3
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d0e3      	beq.n	8005cec <_malloc_r+0x64>
 8005d24:	1a21      	subs	r1, r4, r0
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7fb fa02 	bl	8001130 <_sbrk_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d1dd      	bne.n	8005cec <_malloc_r+0x64>
 8005d30:	e7cf      	b.n	8005cd2 <_malloc_r+0x4a>
 8005d32:	bf00      	nop
 8005d34:	20000d48 	.word	0x20000d48
 8005d38:	20000d4c 	.word	0x20000d4c

08005d3c <__ssputs_r>:
 8005d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	688e      	ldr	r6, [r1, #8]
 8005d42:	429e      	cmp	r6, r3
 8005d44:	4682      	mov	sl, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4690      	mov	r8, r2
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	d838      	bhi.n	8005dc0 <__ssputs_r+0x84>
 8005d4e:	898a      	ldrh	r2, [r1, #12]
 8005d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d54:	d032      	beq.n	8005dbc <__ssputs_r+0x80>
 8005d56:	6825      	ldr	r5, [r4, #0]
 8005d58:	6909      	ldr	r1, [r1, #16]
 8005d5a:	eba5 0901 	sub.w	r9, r5, r1
 8005d5e:	6965      	ldr	r5, [r4, #20]
 8005d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d68:	3301      	adds	r3, #1
 8005d6a:	444b      	add	r3, r9
 8005d6c:	106d      	asrs	r5, r5, #1
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	bf38      	it	cc
 8005d72:	461d      	movcc	r5, r3
 8005d74:	0553      	lsls	r3, r2, #21
 8005d76:	d531      	bpl.n	8005ddc <__ssputs_r+0xa0>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7ff ff85 	bl	8005c88 <_malloc_r>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	b950      	cbnz	r0, 8005d98 <__ssputs_r+0x5c>
 8005d82:	230c      	movs	r3, #12
 8005d84:	f8ca 3000 	str.w	r3, [sl]
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d98:	6921      	ldr	r1, [r4, #16]
 8005d9a:	464a      	mov	r2, r9
 8005d9c:	f7ff fb86 	bl	80054ac <memcpy>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	6126      	str	r6, [r4, #16]
 8005dae:	6165      	str	r5, [r4, #20]
 8005db0:	444e      	add	r6, r9
 8005db2:	eba5 0509 	sub.w	r5, r5, r9
 8005db6:	6026      	str	r6, [r4, #0]
 8005db8:	60a5      	str	r5, [r4, #8]
 8005dba:	463e      	mov	r6, r7
 8005dbc:	42be      	cmp	r6, r7
 8005dbe:	d900      	bls.n	8005dc2 <__ssputs_r+0x86>
 8005dc0:	463e      	mov	r6, r7
 8005dc2:	6820      	ldr	r0, [r4, #0]
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	f000 fb0d 	bl	80063e6 <memmove>
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	1b9b      	subs	r3, r3, r6
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	4433      	add	r3, r6
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e7db      	b.n	8005d94 <__ssputs_r+0x58>
 8005ddc:	462a      	mov	r2, r5
 8005dde:	f000 fb29 	bl	8006434 <_realloc_r>
 8005de2:	4606      	mov	r6, r0
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d1e1      	bne.n	8005dac <__ssputs_r+0x70>
 8005de8:	6921      	ldr	r1, [r4, #16]
 8005dea:	4650      	mov	r0, sl
 8005dec:	f7ff ff00 	bl	8005bf0 <_free_r>
 8005df0:	e7c7      	b.n	8005d82 <__ssputs_r+0x46>
	...

08005df4 <_svfiprintf_r>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	4698      	mov	r8, r3
 8005dfa:	898b      	ldrh	r3, [r1, #12]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	b09d      	sub	sp, #116	; 0x74
 8005e00:	4607      	mov	r7, r0
 8005e02:	460d      	mov	r5, r1
 8005e04:	4614      	mov	r4, r2
 8005e06:	d50e      	bpl.n	8005e26 <_svfiprintf_r+0x32>
 8005e08:	690b      	ldr	r3, [r1, #16]
 8005e0a:	b963      	cbnz	r3, 8005e26 <_svfiprintf_r+0x32>
 8005e0c:	2140      	movs	r1, #64	; 0x40
 8005e0e:	f7ff ff3b 	bl	8005c88 <_malloc_r>
 8005e12:	6028      	str	r0, [r5, #0]
 8005e14:	6128      	str	r0, [r5, #16]
 8005e16:	b920      	cbnz	r0, 8005e22 <_svfiprintf_r+0x2e>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e20:	e0d1      	b.n	8005fc6 <_svfiprintf_r+0x1d2>
 8005e22:	2340      	movs	r3, #64	; 0x40
 8005e24:	616b      	str	r3, [r5, #20]
 8005e26:	2300      	movs	r3, #0
 8005e28:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2a:	2320      	movs	r3, #32
 8005e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e34:	2330      	movs	r3, #48	; 0x30
 8005e36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fe0 <_svfiprintf_r+0x1ec>
 8005e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e3e:	f04f 0901 	mov.w	r9, #1
 8005e42:	4623      	mov	r3, r4
 8005e44:	469a      	mov	sl, r3
 8005e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e4a:	b10a      	cbz	r2, 8005e50 <_svfiprintf_r+0x5c>
 8005e4c:	2a25      	cmp	r2, #37	; 0x25
 8005e4e:	d1f9      	bne.n	8005e44 <_svfiprintf_r+0x50>
 8005e50:	ebba 0b04 	subs.w	fp, sl, r4
 8005e54:	d00b      	beq.n	8005e6e <_svfiprintf_r+0x7a>
 8005e56:	465b      	mov	r3, fp
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f7ff ff6d 	bl	8005d3c <__ssputs_r>
 8005e62:	3001      	adds	r0, #1
 8005e64:	f000 80aa 	beq.w	8005fbc <_svfiprintf_r+0x1c8>
 8005e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e6a:	445a      	add	r2, fp
 8005e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80a2 	beq.w	8005fbc <_svfiprintf_r+0x1c8>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e82:	f10a 0a01 	add.w	sl, sl, #1
 8005e86:	9304      	str	r3, [sp, #16]
 8005e88:	9307      	str	r3, [sp, #28]
 8005e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e90:	4654      	mov	r4, sl
 8005e92:	2205      	movs	r2, #5
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	4851      	ldr	r0, [pc, #324]	; (8005fe0 <_svfiprintf_r+0x1ec>)
 8005e9a:	f7fa fb49 	bl	8000530 <memchr>
 8005e9e:	9a04      	ldr	r2, [sp, #16]
 8005ea0:	b9d8      	cbnz	r0, 8005eda <_svfiprintf_r+0xe6>
 8005ea2:	06d0      	lsls	r0, r2, #27
 8005ea4:	bf44      	itt	mi
 8005ea6:	2320      	movmi	r3, #32
 8005ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eac:	0711      	lsls	r1, r2, #28
 8005eae:	bf44      	itt	mi
 8005eb0:	232b      	movmi	r3, #43	; 0x2b
 8005eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eba:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebc:	d015      	beq.n	8005eea <_svfiprintf_r+0xf6>
 8005ebe:	9a07      	ldr	r2, [sp, #28]
 8005ec0:	4654      	mov	r4, sl
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	f04f 0c0a 	mov.w	ip, #10
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ece:	3b30      	subs	r3, #48	; 0x30
 8005ed0:	2b09      	cmp	r3, #9
 8005ed2:	d94e      	bls.n	8005f72 <_svfiprintf_r+0x17e>
 8005ed4:	b1b0      	cbz	r0, 8005f04 <_svfiprintf_r+0x110>
 8005ed6:	9207      	str	r2, [sp, #28]
 8005ed8:	e014      	b.n	8005f04 <_svfiprintf_r+0x110>
 8005eda:	eba0 0308 	sub.w	r3, r0, r8
 8005ede:	fa09 f303 	lsl.w	r3, r9, r3
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	46a2      	mov	sl, r4
 8005ee8:	e7d2      	b.n	8005e90 <_svfiprintf_r+0x9c>
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	1d19      	adds	r1, r3, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	9103      	str	r1, [sp, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bfbb      	ittet	lt
 8005ef6:	425b      	neglt	r3, r3
 8005ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8005efc:	9307      	strge	r3, [sp, #28]
 8005efe:	9307      	strlt	r3, [sp, #28]
 8005f00:	bfb8      	it	lt
 8005f02:	9204      	strlt	r2, [sp, #16]
 8005f04:	7823      	ldrb	r3, [r4, #0]
 8005f06:	2b2e      	cmp	r3, #46	; 0x2e
 8005f08:	d10c      	bne.n	8005f24 <_svfiprintf_r+0x130>
 8005f0a:	7863      	ldrb	r3, [r4, #1]
 8005f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0e:	d135      	bne.n	8005f7c <_svfiprintf_r+0x188>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	9203      	str	r2, [sp, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bfb8      	it	lt
 8005f1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f20:	3402      	adds	r4, #2
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ff0 <_svfiprintf_r+0x1fc>
 8005f28:	7821      	ldrb	r1, [r4, #0]
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	4650      	mov	r0, sl
 8005f2e:	f7fa faff 	bl	8000530 <memchr>
 8005f32:	b140      	cbz	r0, 8005f46 <_svfiprintf_r+0x152>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	eba0 000a 	sub.w	r0, r0, sl
 8005f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	4303      	orrs	r3, r0
 8005f42:	3401      	adds	r4, #1
 8005f44:	9304      	str	r3, [sp, #16]
 8005f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4a:	4826      	ldr	r0, [pc, #152]	; (8005fe4 <_svfiprintf_r+0x1f0>)
 8005f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f50:	2206      	movs	r2, #6
 8005f52:	f7fa faed 	bl	8000530 <memchr>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d038      	beq.n	8005fcc <_svfiprintf_r+0x1d8>
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <_svfiprintf_r+0x1f4>)
 8005f5c:	bb1b      	cbnz	r3, 8005fa6 <_svfiprintf_r+0x1b2>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	3308      	adds	r3, #8
 8005f68:	9303      	str	r3, [sp, #12]
 8005f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6c:	4433      	add	r3, r6
 8005f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f70:	e767      	b.n	8005e42 <_svfiprintf_r+0x4e>
 8005f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f76:	460c      	mov	r4, r1
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e7a5      	b.n	8005ec8 <_svfiprintf_r+0xd4>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	3401      	adds	r4, #1
 8005f80:	9305      	str	r3, [sp, #20]
 8005f82:	4619      	mov	r1, r3
 8005f84:	f04f 0c0a 	mov.w	ip, #10
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f8e:	3a30      	subs	r2, #48	; 0x30
 8005f90:	2a09      	cmp	r2, #9
 8005f92:	d903      	bls.n	8005f9c <_svfiprintf_r+0x1a8>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0c5      	beq.n	8005f24 <_svfiprintf_r+0x130>
 8005f98:	9105      	str	r1, [sp, #20]
 8005f9a:	e7c3      	b.n	8005f24 <_svfiprintf_r+0x130>
 8005f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7f0      	b.n	8005f88 <_svfiprintf_r+0x194>
 8005fa6:	ab03      	add	r3, sp, #12
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	462a      	mov	r2, r5
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <_svfiprintf_r+0x1f8>)
 8005fae:	a904      	add	r1, sp, #16
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7fd fa69 	bl	8003488 <_printf_float>
 8005fb6:	1c42      	adds	r2, r0, #1
 8005fb8:	4606      	mov	r6, r0
 8005fba:	d1d6      	bne.n	8005f6a <_svfiprintf_r+0x176>
 8005fbc:	89ab      	ldrh	r3, [r5, #12]
 8005fbe:	065b      	lsls	r3, r3, #25
 8005fc0:	f53f af2c 	bmi.w	8005e1c <_svfiprintf_r+0x28>
 8005fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc6:	b01d      	add	sp, #116	; 0x74
 8005fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fcc:	ab03      	add	r3, sp, #12
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <_svfiprintf_r+0x1f8>)
 8005fd4:	a904      	add	r1, sp, #16
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f7fd fcfa 	bl	80039d0 <_printf_i>
 8005fdc:	e7eb      	b.n	8005fb6 <_svfiprintf_r+0x1c2>
 8005fde:	bf00      	nop
 8005fe0:	0801298c 	.word	0x0801298c
 8005fe4:	08012996 	.word	0x08012996
 8005fe8:	08003489 	.word	0x08003489
 8005fec:	08005d3d 	.word	0x08005d3d
 8005ff0:	08012992 	.word	0x08012992

08005ff4 <__sfputc_r>:
 8005ff4:	6893      	ldr	r3, [r2, #8]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	b410      	push	{r4}
 8005ffc:	6093      	str	r3, [r2, #8]
 8005ffe:	da08      	bge.n	8006012 <__sfputc_r+0x1e>
 8006000:	6994      	ldr	r4, [r2, #24]
 8006002:	42a3      	cmp	r3, r4
 8006004:	db01      	blt.n	800600a <__sfputc_r+0x16>
 8006006:	290a      	cmp	r1, #10
 8006008:	d103      	bne.n	8006012 <__sfputc_r+0x1e>
 800600a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600e:	f7fe b8a3 	b.w	8004158 <__swbuf_r>
 8006012:	6813      	ldr	r3, [r2, #0]
 8006014:	1c58      	adds	r0, r3, #1
 8006016:	6010      	str	r0, [r2, #0]
 8006018:	7019      	strb	r1, [r3, #0]
 800601a:	4608      	mov	r0, r1
 800601c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006020:	4770      	bx	lr

08006022 <__sfputs_r>:
 8006022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006024:	4606      	mov	r6, r0
 8006026:	460f      	mov	r7, r1
 8006028:	4614      	mov	r4, r2
 800602a:	18d5      	adds	r5, r2, r3
 800602c:	42ac      	cmp	r4, r5
 800602e:	d101      	bne.n	8006034 <__sfputs_r+0x12>
 8006030:	2000      	movs	r0, #0
 8006032:	e007      	b.n	8006044 <__sfputs_r+0x22>
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	463a      	mov	r2, r7
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff ffda 	bl	8005ff4 <__sfputc_r>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d1f3      	bne.n	800602c <__sfputs_r+0xa>
 8006044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006048 <_vfiprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	460d      	mov	r5, r1
 800604e:	b09d      	sub	sp, #116	; 0x74
 8006050:	4614      	mov	r4, r2
 8006052:	4698      	mov	r8, r3
 8006054:	4606      	mov	r6, r0
 8006056:	b118      	cbz	r0, 8006060 <_vfiprintf_r+0x18>
 8006058:	6983      	ldr	r3, [r0, #24]
 800605a:	b90b      	cbnz	r3, 8006060 <_vfiprintf_r+0x18>
 800605c:	f7ff f8f0 	bl	8005240 <__sinit>
 8006060:	4b89      	ldr	r3, [pc, #548]	; (8006288 <_vfiprintf_r+0x240>)
 8006062:	429d      	cmp	r5, r3
 8006064:	d11b      	bne.n	800609e <_vfiprintf_r+0x56>
 8006066:	6875      	ldr	r5, [r6, #4]
 8006068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606a:	07d9      	lsls	r1, r3, #31
 800606c:	d405      	bmi.n	800607a <_vfiprintf_r+0x32>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	059a      	lsls	r2, r3, #22
 8006072:	d402      	bmi.n	800607a <_vfiprintf_r+0x32>
 8006074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006076:	f7ff f998 	bl	80053aa <__retarget_lock_acquire_recursive>
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	071b      	lsls	r3, r3, #28
 800607e:	d501      	bpl.n	8006084 <_vfiprintf_r+0x3c>
 8006080:	692b      	ldr	r3, [r5, #16]
 8006082:	b9eb      	cbnz	r3, 80060c0 <_vfiprintf_r+0x78>
 8006084:	4629      	mov	r1, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f7fe f8b8 	bl	80041fc <__swsetup_r>
 800608c:	b1c0      	cbz	r0, 80060c0 <_vfiprintf_r+0x78>
 800608e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006090:	07dc      	lsls	r4, r3, #31
 8006092:	d50e      	bpl.n	80060b2 <_vfiprintf_r+0x6a>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006098:	b01d      	add	sp, #116	; 0x74
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	4b7b      	ldr	r3, [pc, #492]	; (800628c <_vfiprintf_r+0x244>)
 80060a0:	429d      	cmp	r5, r3
 80060a2:	d101      	bne.n	80060a8 <_vfiprintf_r+0x60>
 80060a4:	68b5      	ldr	r5, [r6, #8]
 80060a6:	e7df      	b.n	8006068 <_vfiprintf_r+0x20>
 80060a8:	4b79      	ldr	r3, [pc, #484]	; (8006290 <_vfiprintf_r+0x248>)
 80060aa:	429d      	cmp	r5, r3
 80060ac:	bf08      	it	eq
 80060ae:	68f5      	ldreq	r5, [r6, #12]
 80060b0:	e7da      	b.n	8006068 <_vfiprintf_r+0x20>
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	0598      	lsls	r0, r3, #22
 80060b6:	d4ed      	bmi.n	8006094 <_vfiprintf_r+0x4c>
 80060b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ba:	f7ff f977 	bl	80053ac <__retarget_lock_release_recursive>
 80060be:	e7e9      	b.n	8006094 <_vfiprintf_r+0x4c>
 80060c0:	2300      	movs	r3, #0
 80060c2:	9309      	str	r3, [sp, #36]	; 0x24
 80060c4:	2320      	movs	r3, #32
 80060c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ce:	2330      	movs	r3, #48	; 0x30
 80060d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006294 <_vfiprintf_r+0x24c>
 80060d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d8:	f04f 0901 	mov.w	r9, #1
 80060dc:	4623      	mov	r3, r4
 80060de:	469a      	mov	sl, r3
 80060e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e4:	b10a      	cbz	r2, 80060ea <_vfiprintf_r+0xa2>
 80060e6:	2a25      	cmp	r2, #37	; 0x25
 80060e8:	d1f9      	bne.n	80060de <_vfiprintf_r+0x96>
 80060ea:	ebba 0b04 	subs.w	fp, sl, r4
 80060ee:	d00b      	beq.n	8006108 <_vfiprintf_r+0xc0>
 80060f0:	465b      	mov	r3, fp
 80060f2:	4622      	mov	r2, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	4630      	mov	r0, r6
 80060f8:	f7ff ff93 	bl	8006022 <__sfputs_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	f000 80aa 	beq.w	8006256 <_vfiprintf_r+0x20e>
 8006102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006104:	445a      	add	r2, fp
 8006106:	9209      	str	r2, [sp, #36]	; 0x24
 8006108:	f89a 3000 	ldrb.w	r3, [sl]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80a2 	beq.w	8006256 <_vfiprintf_r+0x20e>
 8006112:	2300      	movs	r3, #0
 8006114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611c:	f10a 0a01 	add.w	sl, sl, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	9307      	str	r3, [sp, #28]
 8006124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006128:	931a      	str	r3, [sp, #104]	; 0x68
 800612a:	4654      	mov	r4, sl
 800612c:	2205      	movs	r2, #5
 800612e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006132:	4858      	ldr	r0, [pc, #352]	; (8006294 <_vfiprintf_r+0x24c>)
 8006134:	f7fa f9fc 	bl	8000530 <memchr>
 8006138:	9a04      	ldr	r2, [sp, #16]
 800613a:	b9d8      	cbnz	r0, 8006174 <_vfiprintf_r+0x12c>
 800613c:	06d1      	lsls	r1, r2, #27
 800613e:	bf44      	itt	mi
 8006140:	2320      	movmi	r3, #32
 8006142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006146:	0713      	lsls	r3, r2, #28
 8006148:	bf44      	itt	mi
 800614a:	232b      	movmi	r3, #43	; 0x2b
 800614c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006150:	f89a 3000 	ldrb.w	r3, [sl]
 8006154:	2b2a      	cmp	r3, #42	; 0x2a
 8006156:	d015      	beq.n	8006184 <_vfiprintf_r+0x13c>
 8006158:	9a07      	ldr	r2, [sp, #28]
 800615a:	4654      	mov	r4, sl
 800615c:	2000      	movs	r0, #0
 800615e:	f04f 0c0a 	mov.w	ip, #10
 8006162:	4621      	mov	r1, r4
 8006164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006168:	3b30      	subs	r3, #48	; 0x30
 800616a:	2b09      	cmp	r3, #9
 800616c:	d94e      	bls.n	800620c <_vfiprintf_r+0x1c4>
 800616e:	b1b0      	cbz	r0, 800619e <_vfiprintf_r+0x156>
 8006170:	9207      	str	r2, [sp, #28]
 8006172:	e014      	b.n	800619e <_vfiprintf_r+0x156>
 8006174:	eba0 0308 	sub.w	r3, r0, r8
 8006178:	fa09 f303 	lsl.w	r3, r9, r3
 800617c:	4313      	orrs	r3, r2
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	46a2      	mov	sl, r4
 8006182:	e7d2      	b.n	800612a <_vfiprintf_r+0xe2>
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	1d19      	adds	r1, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	9103      	str	r1, [sp, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfbb      	ittet	lt
 8006190:	425b      	neglt	r3, r3
 8006192:	f042 0202 	orrlt.w	r2, r2, #2
 8006196:	9307      	strge	r3, [sp, #28]
 8006198:	9307      	strlt	r3, [sp, #28]
 800619a:	bfb8      	it	lt
 800619c:	9204      	strlt	r2, [sp, #16]
 800619e:	7823      	ldrb	r3, [r4, #0]
 80061a0:	2b2e      	cmp	r3, #46	; 0x2e
 80061a2:	d10c      	bne.n	80061be <_vfiprintf_r+0x176>
 80061a4:	7863      	ldrb	r3, [r4, #1]
 80061a6:	2b2a      	cmp	r3, #42	; 0x2a
 80061a8:	d135      	bne.n	8006216 <_vfiprintf_r+0x1ce>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	1d1a      	adds	r2, r3, #4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	9203      	str	r2, [sp, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bfb8      	it	lt
 80061b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061ba:	3402      	adds	r4, #2
 80061bc:	9305      	str	r3, [sp, #20]
 80061be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062a4 <_vfiprintf_r+0x25c>
 80061c2:	7821      	ldrb	r1, [r4, #0]
 80061c4:	2203      	movs	r2, #3
 80061c6:	4650      	mov	r0, sl
 80061c8:	f7fa f9b2 	bl	8000530 <memchr>
 80061cc:	b140      	cbz	r0, 80061e0 <_vfiprintf_r+0x198>
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	eba0 000a 	sub.w	r0, r0, sl
 80061d4:	fa03 f000 	lsl.w	r0, r3, r0
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	4303      	orrs	r3, r0
 80061dc:	3401      	adds	r4, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	482c      	ldr	r0, [pc, #176]	; (8006298 <_vfiprintf_r+0x250>)
 80061e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ea:	2206      	movs	r2, #6
 80061ec:	f7fa f9a0 	bl	8000530 <memchr>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d03f      	beq.n	8006274 <_vfiprintf_r+0x22c>
 80061f4:	4b29      	ldr	r3, [pc, #164]	; (800629c <_vfiprintf_r+0x254>)
 80061f6:	bb1b      	cbnz	r3, 8006240 <_vfiprintf_r+0x1f8>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	3307      	adds	r3, #7
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	3308      	adds	r3, #8
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006206:	443b      	add	r3, r7
 8006208:	9309      	str	r3, [sp, #36]	; 0x24
 800620a:	e767      	b.n	80060dc <_vfiprintf_r+0x94>
 800620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006210:	460c      	mov	r4, r1
 8006212:	2001      	movs	r0, #1
 8006214:	e7a5      	b.n	8006162 <_vfiprintf_r+0x11a>
 8006216:	2300      	movs	r3, #0
 8006218:	3401      	adds	r4, #1
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0c0a 	mov.w	ip, #10
 8006222:	4620      	mov	r0, r4
 8006224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006228:	3a30      	subs	r2, #48	; 0x30
 800622a:	2a09      	cmp	r2, #9
 800622c:	d903      	bls.n	8006236 <_vfiprintf_r+0x1ee>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0c5      	beq.n	80061be <_vfiprintf_r+0x176>
 8006232:	9105      	str	r1, [sp, #20]
 8006234:	e7c3      	b.n	80061be <_vfiprintf_r+0x176>
 8006236:	fb0c 2101 	mla	r1, ip, r1, r2
 800623a:	4604      	mov	r4, r0
 800623c:	2301      	movs	r3, #1
 800623e:	e7f0      	b.n	8006222 <_vfiprintf_r+0x1da>
 8006240:	ab03      	add	r3, sp, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	462a      	mov	r2, r5
 8006246:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <_vfiprintf_r+0x258>)
 8006248:	a904      	add	r1, sp, #16
 800624a:	4630      	mov	r0, r6
 800624c:	f7fd f91c 	bl	8003488 <_printf_float>
 8006250:	4607      	mov	r7, r0
 8006252:	1c78      	adds	r0, r7, #1
 8006254:	d1d6      	bne.n	8006204 <_vfiprintf_r+0x1bc>
 8006256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006258:	07d9      	lsls	r1, r3, #31
 800625a:	d405      	bmi.n	8006268 <_vfiprintf_r+0x220>
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	059a      	lsls	r2, r3, #22
 8006260:	d402      	bmi.n	8006268 <_vfiprintf_r+0x220>
 8006262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006264:	f7ff f8a2 	bl	80053ac <__retarget_lock_release_recursive>
 8006268:	89ab      	ldrh	r3, [r5, #12]
 800626a:	065b      	lsls	r3, r3, #25
 800626c:	f53f af12 	bmi.w	8006094 <_vfiprintf_r+0x4c>
 8006270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006272:	e711      	b.n	8006098 <_vfiprintf_r+0x50>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <_vfiprintf_r+0x258>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4630      	mov	r0, r6
 8006280:	f7fd fba6 	bl	80039d0 <_printf_i>
 8006284:	e7e4      	b.n	8006250 <_vfiprintf_r+0x208>
 8006286:	bf00      	nop
 8006288:	080127c8 	.word	0x080127c8
 800628c:	080127e8 	.word	0x080127e8
 8006290:	080127a8 	.word	0x080127a8
 8006294:	0801298c 	.word	0x0801298c
 8006298:	08012996 	.word	0x08012996
 800629c:	08003489 	.word	0x08003489
 80062a0:	08006023 	.word	0x08006023
 80062a4:	08012992 	.word	0x08012992

080062a8 <_putc_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	460d      	mov	r5, r1
 80062ac:	4614      	mov	r4, r2
 80062ae:	4606      	mov	r6, r0
 80062b0:	b118      	cbz	r0, 80062ba <_putc_r+0x12>
 80062b2:	6983      	ldr	r3, [r0, #24]
 80062b4:	b90b      	cbnz	r3, 80062ba <_putc_r+0x12>
 80062b6:	f7fe ffc3 	bl	8005240 <__sinit>
 80062ba:	4b1c      	ldr	r3, [pc, #112]	; (800632c <_putc_r+0x84>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	d124      	bne.n	800630a <_putc_r+0x62>
 80062c0:	6874      	ldr	r4, [r6, #4]
 80062c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062c4:	07d8      	lsls	r0, r3, #31
 80062c6:	d405      	bmi.n	80062d4 <_putc_r+0x2c>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	0599      	lsls	r1, r3, #22
 80062cc:	d402      	bmi.n	80062d4 <_putc_r+0x2c>
 80062ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d0:	f7ff f86b 	bl	80053aa <__retarget_lock_acquire_recursive>
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	60a3      	str	r3, [r4, #8]
 80062dc:	da05      	bge.n	80062ea <_putc_r+0x42>
 80062de:	69a2      	ldr	r2, [r4, #24]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	db1c      	blt.n	800631e <_putc_r+0x76>
 80062e4:	b2eb      	uxtb	r3, r5
 80062e6:	2b0a      	cmp	r3, #10
 80062e8:	d019      	beq.n	800631e <_putc_r+0x76>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	6022      	str	r2, [r4, #0]
 80062f0:	701d      	strb	r5, [r3, #0]
 80062f2:	b2ed      	uxtb	r5, r5
 80062f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062f6:	07da      	lsls	r2, r3, #31
 80062f8:	d405      	bmi.n	8006306 <_putc_r+0x5e>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	059b      	lsls	r3, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_putc_r+0x5e>
 8006300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006302:	f7ff f853 	bl	80053ac <__retarget_lock_release_recursive>
 8006306:	4628      	mov	r0, r5
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <_putc_r+0x88>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d101      	bne.n	8006314 <_putc_r+0x6c>
 8006310:	68b4      	ldr	r4, [r6, #8]
 8006312:	e7d6      	b.n	80062c2 <_putc_r+0x1a>
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <_putc_r+0x8c>)
 8006316:	429c      	cmp	r4, r3
 8006318:	bf08      	it	eq
 800631a:	68f4      	ldreq	r4, [r6, #12]
 800631c:	e7d1      	b.n	80062c2 <_putc_r+0x1a>
 800631e:	4629      	mov	r1, r5
 8006320:	4622      	mov	r2, r4
 8006322:	4630      	mov	r0, r6
 8006324:	f7fd ff18 	bl	8004158 <__swbuf_r>
 8006328:	4605      	mov	r5, r0
 800632a:	e7e3      	b.n	80062f4 <_putc_r+0x4c>
 800632c:	080127c8 	.word	0x080127c8
 8006330:	080127e8 	.word	0x080127e8
 8006334:	080127a8 	.word	0x080127a8

08006338 <__sread>:
 8006338:	b510      	push	{r4, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	f7fa ff19 	bl	8001176 <_read_r>
 8006344:	2800      	cmp	r0, #0
 8006346:	bfab      	itete	ge
 8006348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800634a:	89a3      	ldrhlt	r3, [r4, #12]
 800634c:	181b      	addge	r3, r3, r0
 800634e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006352:	bfac      	ite	ge
 8006354:	6563      	strge	r3, [r4, #84]	; 0x54
 8006356:	81a3      	strhlt	r3, [r4, #12]
 8006358:	bd10      	pop	{r4, pc}

0800635a <__swrite>:
 800635a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635e:	461f      	mov	r7, r3
 8006360:	898b      	ldrh	r3, [r1, #12]
 8006362:	05db      	lsls	r3, r3, #23
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	4616      	mov	r6, r2
 800636a:	d505      	bpl.n	8006378 <__swrite+0x1e>
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	2302      	movs	r3, #2
 8006372:	2200      	movs	r2, #0
 8006374:	f7fa fefd 	bl	8001172 <_lseek_r>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	4628      	mov	r0, r5
 800638a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638e:	f7fa bef7 	b.w	8001180 <_write_r>

08006392 <__sseek>:
 8006392:	b510      	push	{r4, lr}
 8006394:	460c      	mov	r4, r1
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f7fa feea 	bl	8001172 <_lseek_r>
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	bf15      	itete	ne
 80063a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ae:	81a3      	strheq	r3, [r4, #12]
 80063b0:	bf18      	it	ne
 80063b2:	81a3      	strhne	r3, [r4, #12]
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <__sclose>:
 80063b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ba:	f7fa bed1 	b.w	8001160 <_close_r>

080063be <__ascii_wctomb>:
 80063be:	b149      	cbz	r1, 80063d4 <__ascii_wctomb+0x16>
 80063c0:	2aff      	cmp	r2, #255	; 0xff
 80063c2:	bf85      	ittet	hi
 80063c4:	238a      	movhi	r3, #138	; 0x8a
 80063c6:	6003      	strhi	r3, [r0, #0]
 80063c8:	700a      	strbls	r2, [r1, #0]
 80063ca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80063ce:	bf98      	it	ls
 80063d0:	2001      	movls	r0, #1
 80063d2:	4770      	bx	lr
 80063d4:	4608      	mov	r0, r1
 80063d6:	4770      	bx	lr

080063d8 <abort>:
 80063d8:	b508      	push	{r3, lr}
 80063da:	2006      	movs	r0, #6
 80063dc:	f000 f878 	bl	80064d0 <raise>
 80063e0:	2001      	movs	r0, #1
 80063e2:	f7fa fef0 	bl	80011c6 <_exit>

080063e6 <memmove>:
 80063e6:	4288      	cmp	r0, r1
 80063e8:	b510      	push	{r4, lr}
 80063ea:	eb01 0402 	add.w	r4, r1, r2
 80063ee:	d902      	bls.n	80063f6 <memmove+0x10>
 80063f0:	4284      	cmp	r4, r0
 80063f2:	4623      	mov	r3, r4
 80063f4:	d807      	bhi.n	8006406 <memmove+0x20>
 80063f6:	1e43      	subs	r3, r0, #1
 80063f8:	42a1      	cmp	r1, r4
 80063fa:	d008      	beq.n	800640e <memmove+0x28>
 80063fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006400:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006404:	e7f8      	b.n	80063f8 <memmove+0x12>
 8006406:	4402      	add	r2, r0
 8006408:	4601      	mov	r1, r0
 800640a:	428a      	cmp	r2, r1
 800640c:	d100      	bne.n	8006410 <memmove+0x2a>
 800640e:	bd10      	pop	{r4, pc}
 8006410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006418:	e7f7      	b.n	800640a <memmove+0x24>
	...

0800641c <__malloc_lock>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__malloc_lock+0x8>)
 800641e:	f7fe bfc4 	b.w	80053aa <__retarget_lock_acquire_recursive>
 8006422:	bf00      	nop
 8006424:	20000d44 	.word	0x20000d44

08006428 <__malloc_unlock>:
 8006428:	4801      	ldr	r0, [pc, #4]	; (8006430 <__malloc_unlock+0x8>)
 800642a:	f7fe bfbf 	b.w	80053ac <__retarget_lock_release_recursive>
 800642e:	bf00      	nop
 8006430:	20000d44 	.word	0x20000d44

08006434 <_realloc_r>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	4607      	mov	r7, r0
 8006438:	4614      	mov	r4, r2
 800643a:	460e      	mov	r6, r1
 800643c:	b921      	cbnz	r1, 8006448 <_realloc_r+0x14>
 800643e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006442:	4611      	mov	r1, r2
 8006444:	f7ff bc20 	b.w	8005c88 <_malloc_r>
 8006448:	b922      	cbnz	r2, 8006454 <_realloc_r+0x20>
 800644a:	f7ff fbd1 	bl	8005bf0 <_free_r>
 800644e:	4625      	mov	r5, r4
 8006450:	4628      	mov	r0, r5
 8006452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006454:	f000 f858 	bl	8006508 <_malloc_usable_size_r>
 8006458:	42a0      	cmp	r0, r4
 800645a:	d20f      	bcs.n	800647c <_realloc_r+0x48>
 800645c:	4621      	mov	r1, r4
 800645e:	4638      	mov	r0, r7
 8006460:	f7ff fc12 	bl	8005c88 <_malloc_r>
 8006464:	4605      	mov	r5, r0
 8006466:	2800      	cmp	r0, #0
 8006468:	d0f2      	beq.n	8006450 <_realloc_r+0x1c>
 800646a:	4631      	mov	r1, r6
 800646c:	4622      	mov	r2, r4
 800646e:	f7ff f81d 	bl	80054ac <memcpy>
 8006472:	4631      	mov	r1, r6
 8006474:	4638      	mov	r0, r7
 8006476:	f7ff fbbb 	bl	8005bf0 <_free_r>
 800647a:	e7e9      	b.n	8006450 <_realloc_r+0x1c>
 800647c:	4635      	mov	r5, r6
 800647e:	e7e7      	b.n	8006450 <_realloc_r+0x1c>

08006480 <_raise_r>:
 8006480:	291f      	cmp	r1, #31
 8006482:	b538      	push	{r3, r4, r5, lr}
 8006484:	4604      	mov	r4, r0
 8006486:	460d      	mov	r5, r1
 8006488:	d904      	bls.n	8006494 <_raise_r+0x14>
 800648a:	2316      	movs	r3, #22
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006496:	b112      	cbz	r2, 800649e <_raise_r+0x1e>
 8006498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800649c:	b94b      	cbnz	r3, 80064b2 <_raise_r+0x32>
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 f830 	bl	8006504 <_getpid_r>
 80064a4:	462a      	mov	r2, r5
 80064a6:	4601      	mov	r1, r0
 80064a8:	4620      	mov	r0, r4
 80064aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ae:	f000 b817 	b.w	80064e0 <_kill_r>
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d00a      	beq.n	80064cc <_raise_r+0x4c>
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	d103      	bne.n	80064c2 <_raise_r+0x42>
 80064ba:	2316      	movs	r3, #22
 80064bc:	6003      	str	r3, [r0, #0]
 80064be:	2001      	movs	r0, #1
 80064c0:	e7e7      	b.n	8006492 <_raise_r+0x12>
 80064c2:	2400      	movs	r4, #0
 80064c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064c8:	4628      	mov	r0, r5
 80064ca:	4798      	blx	r3
 80064cc:	2000      	movs	r0, #0
 80064ce:	e7e0      	b.n	8006492 <_raise_r+0x12>

080064d0 <raise>:
 80064d0:	4b02      	ldr	r3, [pc, #8]	; (80064dc <raise+0xc>)
 80064d2:	4601      	mov	r1, r0
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	f7ff bfd3 	b.w	8006480 <_raise_r>
 80064da:	bf00      	nop
 80064dc:	200001b0 	.word	0x200001b0

080064e0 <_kill_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d07      	ldr	r5, [pc, #28]	; (8006500 <_kill_r+0x20>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	f7fa fe67 	bl	80011c0 <_kill>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d102      	bne.n	80064fc <_kill_r+0x1c>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	b103      	cbz	r3, 80064fc <_kill_r+0x1c>
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	bf00      	nop
 8006500:	20000d50 	.word	0x20000d50

08006504 <_getpid_r>:
 8006504:	f7fa be60 	b.w	80011c8 <_getpid>

08006508 <_malloc_usable_size_r>:
 8006508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650c:	1f18      	subs	r0, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	bfbc      	itt	lt
 8006512:	580b      	ldrlt	r3, [r1, r0]
 8006514:	18c0      	addlt	r0, r0, r3
 8006516:	4770      	bx	lr

08006518 <_init>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	bf00      	nop
 800651c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651e:	bc08      	pop	{r3}
 8006520:	469e      	mov	lr, r3
 8006522:	4770      	bx	lr

08006524 <_fini>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr
