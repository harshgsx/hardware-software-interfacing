
dcmotorLab9and10.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08006668 l    d  .rodata	00000000 .rodata
08012d5c l    d  .ARM	00000000 .ARM
08012d64 l    d  .init_array	00000000 .init_array
08012d68 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001ec l    d  .bss	00000000 .bss
20000ca4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
080033d0 l       .text	00000000 LoopCopyDataInit
080033ca l       .text	00000000 CopyDataInit
080033e2 l       .text	00000000 LoopFillZerobss
080033de l       .text	00000000 FillZerobss
0800340c l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800664c l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001ec l       .bss	00000001 completed.1
08012d68 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001f0 l       .bss	00000018 object.0
08012d64 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000efc l     F .text	00000028 HAL_TIM_IC_CaptureCallback
08000f24 l     F .text	0000004c TerminalRead
08000f70 l     F .text	0000007c Uncompress
08000fec l     F .text	00000190 HAL_GPIO_Init
0800117c l     F .text	00000140 HAL_TIM_IRQHandler
080012bc l     F .text	0000009c TIM_Base_SetConfig
08001358 l     F .text	0000004e HAL_TIM_OC_Init
08001358 l     F .text	0000004e HAL_TIM_PWM_Init
080013a8 l     F .text	00000050 TIM_OC1_SetConfig
080013f8 l     F .text	00000124 HAL_TIM_PWM_ConfigChannel
0800151c l     F .text	00000064 HAL_TIMEx_MasterConfigSynchronization.constprop.0
08001580 l     F .text	00000074 HAL_TIM_Base_Init.constprop.0
080015f4 l     F .text	00000058 HAL_NVIC_SetPriority.constprop.0
0800164c l     F .text	0000008c HAL_TIM_PWM_Start.part.0.constprop.0.isra.0
080016d8 l     F .text	00000050 HAL_InitTick.isra.0
08001728 l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
080017f0 l     F .text	00000024 CmdEncoder2
08001814 l     F .text	00000044 CmdTasks
08001858 l     F .text	00000054 DecodeReadRegister
080018ac l     F .text	00000020 CmdVersion
080018cc l     F .text	00000050 DecodeWriteRegister.isra.0
0800191c l     F .text	0000002c CmdTest
08001948 l     F .text	000002ac CmdDC
08001bf4 l     F .text	000002d8 EncoderInit
08001ecc l     F .text	000000b8 DecodeRegister
08001f84 l     F .text	00000050 DecodePeripheral
08001fd4 l     F .text	00000060 DecodePrintRegisters
08002034 l     F .text	00000058 DecodePrintPeripherals.constprop.0
0800208c l     F .text	00000030 fetch_string_arg
080020bc l     F .text	00000204 TaskInput
080022c0 l     F .text	0000003c fetch_uint32_arg
080022fc l     F .text	00000058 CmdLed
08002354 l     F .text	000001d0 CmdDC2
08002524 l     F .text	00000070 CmdR
08002594 l     F .text	0000001e CmdW
080025b4 l     F .text	000000f8 CmdDump
080026ac l     F .text	00000074 CmdSend
08002720 l     F .text	00000060 CmdReceive
08002780 l     F .text	00000044 CmdTransparent
080027c4 l     F .text	00000284 CmdDecode
08002a48 l     F .text	0000003c PolledPrintf
08002a84 l     F .text	00000068 CmdStats
20000208 l     O .bss	00000004 AccumTicks
2000020c l     O .bss	00000004 LedState.0
20000210 l     O .bss	00000834 TerminalState
20000a44 l     O .bss	00000004 address.1
20000a48 l     O .bss	00000014 buf.0
20000a5c l     O .bss	00000004 cmdArgs
20000a60 l     O .bss	00000004 count
20000a64 l     O .bss	00000004 count.3
20000a68 l     O .bss	00000002 counterStart
20000a6c l     O .bss	00000004 crReceived
20000a70 l     O .bss	00000004 heap_end.0
20000a74 l     O .bss	0000000c hiwdg
20000a80 l     O .bss	00000048 htim1
20000ac8 l     O .bss	00000048 htim11
20000b10 l     O .bss	00000048 htim2
20000b58 l     O .bss	00000048 htim3
20000ba0 l     O .bss	00000044 huart2
20000be4 l     O .bss	00000050 input
20000c34 l     O .bss	00000050 input_b
20000c84 l     O .bss	00000002 oneSecondCount
20000c88 l     O .bss	00000004 saved.1
20000c8c l     O .bss	00000004 setTime
20000c90 l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000004 printPrompt.4
20000014 l     O .data	00000004 uwTickPrio
0800a17c l     O .rodata	00000070 ADC1_CR1_fields
0800a1ec l     O .rodata	00000060 ADC1_CR2_fields
0800a24c l     O .rodata	00000008 ADC1_DR_fields
0800a254 l     O .rodata	00000008 ADC1_HTR_fields
0800a25c l     O .rodata	00000008 ADC1_JDR1_fields
0800a264 l     O .rodata	00000008 ADC1_JDR2_fields
0800a26c l     O .rodata	00000008 ADC1_JDR3_fields
0800a274 l     O .rodata	00000008 ADC1_JDR4_fields
0800a27c l     O .rodata	00000008 ADC1_JOFR1_fields
0800a284 l     O .rodata	00000008 ADC1_JOFR2_fields
0800a28c l     O .rodata	00000008 ADC1_JOFR3_fields
0800a294 l     O .rodata	00000008 ADC1_JOFR4_fields
0800a29c l     O .rodata	00000028 ADC1_JSQR_fields
0800a2c4 l     O .rodata	00000008 ADC1_LTR_fields
0800a2cc l     O .rodata	00000008 ADC1_SMPR1_fields
0800a2d4 l     O .rodata	00000008 ADC1_SMPR2_fields
0800a2dc l     O .rodata	00000028 ADC1_SQR1_fields
0800a304 l     O .rodata	00000030 ADC1_SQR2_fields
0800a334 l     O .rodata	00000030 ADC1_SQR3_fields
0800a364 l     O .rodata	00000030 ADC1_SR_fields
0800a394 l     O .rodata	00000140 ADC1_registers
0800a4d4 l     O .rodata	00000030 ADC_Common_CCR_fields
0800a504 l     O .rodata	00000090 ADC_Common_CSR_fields
0800a594 l     O .rodata	00000020 ADC_Common_registers
0800a5b4 l     O .rodata	00000010 AHBPrescTable
0800a5c4 l     O .rodata	00000008 APBPrescTable
0800a5cc l     O .rodata	00000008 CRC_CR_fields
0800a5d4 l     O .rodata	00000008 CRC_DR_fields
0800a5dc l     O .rodata	00000008 CRC_IDR_fields
0800a5e4 l     O .rodata	00000030 CRC_registers
0800a614 l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
0800a664 l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800a684 l     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800a6ac l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
0800a6bc l     O .rodata	00000040 DBG_registers
0800a6fc l     O .rodata	000000a0 DMA2_HIFCR_fields
0800a79c l     O .rodata	000000a0 DMA2_HISR_fields
0800a83c l     O .rodata	000000a0 DMA2_LIFCR_fields
0800a8dc l     O .rodata	000000a0 DMA2_LISR_fields
0800a97c l     O .rodata	00000098 DMA2_S0CR_fields
0800aa14 l     O .rodata	00000020 DMA2_S0FCR_fields
0800aa34 l     O .rodata	00000008 DMA2_S0M0AR_fields
0800aa3c l     O .rodata	00000008 DMA2_S0M1AR_fields
0800aa44 l     O .rodata	00000008 DMA2_S0NDTR_fields
0800aa4c l     O .rodata	00000008 DMA2_S0PAR_fields
0800aa54 l     O .rodata	000000a0 DMA2_S1CR_fields
0800aaf4 l     O .rodata	00000020 DMA2_S1FCR_fields
0800ab14 l     O .rodata	00000008 DMA2_S1M0AR_fields
0800ab1c l     O .rodata	00000008 DMA2_S1M1AR_fields
0800ab24 l     O .rodata	00000008 DMA2_S1NDTR_fields
0800ab2c l     O .rodata	00000008 DMA2_S1PAR_fields
0800ab34 l     O .rodata	000000a0 DMA2_S2CR_fields
0800abd4 l     O .rodata	00000020 DMA2_S2FCR_fields
0800abf4 l     O .rodata	00000008 DMA2_S2M0AR_fields
0800abfc l     O .rodata	00000008 DMA2_S2M1AR_fields
0800ac04 l     O .rodata	00000008 DMA2_S2NDTR_fields
0800ac0c l     O .rodata	00000008 DMA2_S2PAR_fields
0800ac14 l     O .rodata	000000a0 DMA2_S3CR_fields
0800acb4 l     O .rodata	00000020 DMA2_S3FCR_fields
0800acd4 l     O .rodata	00000008 DMA2_S3M0AR_fields
0800acdc l     O .rodata	00000008 DMA2_S3M1AR_fields
0800ace4 l     O .rodata	00000008 DMA2_S3NDTR_fields
0800acec l     O .rodata	00000008 DMA2_S3PAR_fields
0800acf4 l     O .rodata	000000a0 DMA2_S4CR_fields
0800ad94 l     O .rodata	00000020 DMA2_S4FCR_fields
0800adb4 l     O .rodata	00000008 DMA2_S4M0AR_fields
0800adbc l     O .rodata	00000008 DMA2_S4M1AR_fields
0800adc4 l     O .rodata	00000008 DMA2_S4NDTR_fields
0800adcc l     O .rodata	00000008 DMA2_S4PAR_fields
0800add4 l     O .rodata	000000a0 DMA2_S5CR_fields
0800ae74 l     O .rodata	00000020 DMA2_S5FCR_fields
0800ae94 l     O .rodata	00000008 DMA2_S5M0AR_fields
0800ae9c l     O .rodata	00000008 DMA2_S5M1AR_fields
0800aea4 l     O .rodata	00000008 DMA2_S5NDTR_fields
0800aeac l     O .rodata	00000008 DMA2_S5PAR_fields
0800aeb4 l     O .rodata	000000a0 DMA2_S6CR_fields
0800af54 l     O .rodata	00000020 DMA2_S6FCR_fields
0800af74 l     O .rodata	00000008 DMA2_S6M0AR_fields
0800af7c l     O .rodata	00000008 DMA2_S6M1AR_fields
0800af84 l     O .rodata	00000008 DMA2_S6NDTR_fields
0800af8c l     O .rodata	00000008 DMA2_S6PAR_fields
0800af94 l     O .rodata	000000a0 DMA2_S7CR_fields
0800b034 l     O .rodata	00000020 DMA2_S7FCR_fields
0800b054 l     O .rodata	00000008 DMA2_S7M0AR_fields
0800b05c l     O .rodata	00000008 DMA2_S7M1AR_fields
0800b064 l     O .rodata	00000008 DMA2_S7NDTR_fields
0800b06c l     O .rodata	00000008 DMA2_S7PAR_fields
0800b074 l     O .rodata	00000340 DMA2_registers
0800b3b4 l     O .rodata	000000b8 EXTI_EMR_fields
0800b46c l     O .rodata	000000b8 EXTI_FTSR_fields
0800b524 l     O .rodata	000000b8 EXTI_IMR_fields
0800b5dc l     O .rodata	000000b8 EXTI_PR_fields
0800b694 l     O .rodata	000000b8 EXTI_RTSR_fields
0800b74c l     O .rodata	000000b8 EXTI_SWIER_fields
0800b804 l     O .rodata	00000060 EXTI_registers
0800b864 l     O .rodata	00000030 FLASH_ACR_fields
0800b894 l     O .rodata	00000048 FLASH_CR_fields
0800b8dc l     O .rodata	00000008 FLASH_KEYR_fields
0800b8e4 l     O .rodata	00000040 FLASH_OPTCR_fields
0800b924 l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800b92c l     O .rodata	00000038 FLASH_SR_fields
0800b964 l     O .rodata	00000060 FLASH_registers
0800b9c4 l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800b9cc l     O .rodata	00000010 FPU_CPACR_registers
0800b9dc l     O .rodata	00000008 FPU_FPCAR_fields
0800b9e4 l     O .rodata	00000048 FPU_FPCCR_fields
0800ba2c l     O .rodata	00000070 FPU_FPSCR_fields
0800ba9c l     O .rodata	00000030 FPU_registers
0800bacc l     O .rodata	00000040 GPIOA_AFRH_fields
0800bb0c l     O .rodata	00000040 GPIOA_AFRL_fields
0800bb4c l     O .rodata	00000100 GPIOA_BSRR_fields
0800bc4c l     O .rodata	00000080 GPIOA_IDR_fields
0800bccc l     O .rodata	00000088 GPIOA_LCKR_fields
0800bd54 l     O .rodata	00000080 GPIOA_MODER_fields
0800bdd4 l     O .rodata	00000080 GPIOA_ODR_fields
0800be54 l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800bed4 l     O .rodata	00000080 GPIOA_OTYPER_fields
0800bf54 l     O .rodata	00000080 GPIOA_PUPDR_fields
0800bfd4 l     O .rodata	000000a0 GPIOA_registers
0800c074 l     O .rodata	00000040 GPIOB_AFRH_fields
0800c0b4 l     O .rodata	00000040 GPIOB_AFRL_fields
0800c0f4 l     O .rodata	00000100 GPIOB_BSRR_fields
0800c1f4 l     O .rodata	00000080 GPIOB_IDR_fields
0800c274 l     O .rodata	00000088 GPIOB_LCKR_fields
0800c2fc l     O .rodata	00000080 GPIOB_MODER_fields
0800c37c l     O .rodata	00000080 GPIOB_ODR_fields
0800c3fc l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800c47c l     O .rodata	00000080 GPIOB_OTYPER_fields
0800c4fc l     O .rodata	00000080 GPIOB_PUPDR_fields
0800c57c l     O .rodata	000000a0 GPIOB_registers
0800c61c l     O .rodata	00000040 GPIOH_AFRH_fields
0800c65c l     O .rodata	00000040 GPIOH_AFRL_fields
0800c69c l     O .rodata	00000100 GPIOH_BSRR_fields
0800c79c l     O .rodata	00000080 GPIOH_IDR_fields
0800c81c l     O .rodata	00000088 GPIOH_LCKR_fields
0800c8a4 l     O .rodata	00000080 GPIOH_MODER_fields
0800c924 l     O .rodata	00000080 GPIOH_ODR_fields
0800c9a4 l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800ca24 l     O .rodata	00000080 GPIOH_OTYPER_fields
0800caa4 l     O .rodata	00000080 GPIOH_PUPDR_fields
0800cb24 l     O .rodata	000000a0 GPIOH_registers
0800cbc4 l     O .rodata	00000018 I2C3_CCR_fields
0800cbdc l     O .rodata	00000070 I2C3_CR1_fields
0800cc4c l     O .rodata	00000030 I2C3_CR2_fields
0800cc7c l     O .rodata	00000008 I2C3_DR_fields
0800cc84 l     O .rodata	00000020 I2C3_OAR1_fields
0800cca4 l     O .rodata	00000010 I2C3_OAR2_fields
0800ccb4 l     O .rodata	00000070 I2C3_SR1_fields
0800cd24 l     O .rodata	00000040 I2C3_SR2_fields
0800cd64 l     O .rodata	00000008 I2C3_TRISE_fields
0800cd6c l     O .rodata	00000090 I2C3_registers
0800cdfc l     O .rodata	00000070 I2S2ext_CR1_fields
0800ce6c l     O .rodata	00000038 I2S2ext_CR2_fields
0800cea4 l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800ceac l     O .rodata	00000008 I2S2ext_DR_fields
0800ceb4 l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800cef4 l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800cf0c l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800cf14 l     O .rodata	00000048 I2S2ext_SR_fields
0800cf5c l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800cf64 l     O .rodata	00000090 I2S2ext_registers
0800cff4 l     O .rodata	00000008 IWDG_KR_fields
0800cffc l     O .rodata	00000008 IWDG_PR_fields
0800d004 l     O .rodata	00000008 IWDG_RLR_fields
0800d00c l     O .rodata	00000010 IWDG_SR_fields
0800d01c l     O .rodata	00000040 IWDG_registers
0800d05c l     O .rodata	00000194 InterruptNames
0800d1f0 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800d208 l     O .rodata	00000048 MPU_MPU_RASR_fields
0800d250 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800d268 l     O .rodata	00000008 MPU_MPU_RNR_fields
0800d270 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800d288 l     O .rodata	00000050 MPU_registers
0800d2d8 l     O .rodata	00000008 NVIC_IABR0_fields
0800d2e0 l     O .rodata	00000008 NVIC_IABR1_fields
0800d2e8 l     O .rodata	00000008 NVIC_IABR2_fields
0800d2f0 l     O .rodata	00000008 NVIC_ICER0_fields
0800d2f8 l     O .rodata	00000008 NVIC_ICER1_fields
0800d300 l     O .rodata	00000008 NVIC_ICER2_fields
0800d308 l     O .rodata	00000008 NVIC_ICPR0_fields
0800d310 l     O .rodata	00000008 NVIC_ICPR1_fields
0800d318 l     O .rodata	00000008 NVIC_ICPR2_fields
0800d320 l     O .rodata	00000020 NVIC_IPR0_fields
0800d340 l     O .rodata	00000020 NVIC_IPR10_fields
0800d360 l     O .rodata	00000020 NVIC_IPR11_fields
0800d380 l     O .rodata	00000020 NVIC_IPR12_fields
0800d3a0 l     O .rodata	00000020 NVIC_IPR13_fields
0800d3c0 l     O .rodata	00000020 NVIC_IPR14_fields
0800d3e0 l     O .rodata	00000020 NVIC_IPR15_fields
0800d400 l     O .rodata	00000020 NVIC_IPR16_fields
0800d420 l     O .rodata	00000020 NVIC_IPR17_fields
0800d440 l     O .rodata	00000020 NVIC_IPR18_fields
0800d460 l     O .rodata	00000020 NVIC_IPR19_fields
0800d480 l     O .rodata	00000020 NVIC_IPR1_fields
0800d4a0 l     O .rodata	00000020 NVIC_IPR2_fields
0800d4c0 l     O .rodata	00000020 NVIC_IPR3_fields
0800d4e0 l     O .rodata	00000020 NVIC_IPR4_fields
0800d500 l     O .rodata	00000020 NVIC_IPR5_fields
0800d520 l     O .rodata	00000020 NVIC_IPR6_fields
0800d540 l     O .rodata	00000020 NVIC_IPR7_fields
0800d560 l     O .rodata	00000020 NVIC_IPR8_fields
0800d580 l     O .rodata	00000020 NVIC_IPR9_fields
0800d5a0 l     O .rodata	00000008 NVIC_ISER0_fields
0800d5a8 l     O .rodata	00000008 NVIC_ISER1_fields
0800d5b0 l     O .rodata	00000008 NVIC_ISER2_fields
0800d5b8 l     O .rodata	00000008 NVIC_ISPR0_fields
0800d5c0 l     O .rodata	00000008 NVIC_ISPR1_fields
0800d5c8 l     O .rodata	00000008 NVIC_ISPR2_fields
0800d5d0 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800d5d8 l     O .rodata	00000010 NVIC_STIR_registers
0800d5e8 l     O .rodata	00000230 NVIC_registers
0800d818 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800d880 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800d8e8 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800d950 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800d958 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800d988 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800d9b8 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800d9e8 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800da18 l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800da28 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800da40 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800da58 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800da70 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800dac0 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800db28 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800db90 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800dbf8 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800dc20 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800dc48 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800dc70 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800dc98 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800dcb0 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800dcc8 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800dce0 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800dcf8 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800dd00 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800dd08 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800dd10 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800dd18 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800dd20 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800dd28 l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800dd38 l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800dd48 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800dd68 l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800ddb8 l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800de08 l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800de38 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800de58 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800de78 l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800e0d8 l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800e0e0 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800e0f0 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800e100 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800e110 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800e128 l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800e148 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800e210 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800e2d8 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800e2e8 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800e2f8 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800e310 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800e360 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800e390 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800e3c8 l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800e3d0 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800e3f8 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800e420 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800e460 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800e470 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
0800e5a0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
0800e5f0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800e640 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
0800e690 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
0800e6e0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
0800e730 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800e780 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800e7d0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800e820 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
0800e830 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800e878 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
0800e8c0 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
0800e908 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
0800e950 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800e998 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
0800e9e0 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800ea28 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800ea70 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
0800eac0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
0800eb10 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800eb60 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800ebb0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
0800ec00 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800ec50 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
0800eca0 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
0800ecf0 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
0800ed08 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800ed20 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800ed38 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
0800ed50 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800ed68 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
0800ed80 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
0800ed98 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800edb0 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
0800edc0 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
0800ee28 l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800ee40 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800ee48 l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
0800ee50 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
0800ee58 l     O .rodata	00000270 OTG_FS_HOST_registers
0800f0c8 l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
0800f0e0 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
0800f0f0 l     O .rodata	00000050 PWR_CR_fields
0800f140 l     O .rodata	00000038 PWR_CSR_fields
0800f178 l     O .rodata	00000020 PWR_registers
0800f198 l     O .rodata	00000380 Peripherals
08011830 l     O .rodata	00000150 TIM2_registers
08011cd0 l     O .rodata	00000140 TIM3_registers
08012168 l     O .rodata	00000150 TIM5_registers
080100b8 l     O .rodata	00000270 RTC_registers
08012790 l     O .rodata	00000030 WWDG_registers
080126c8 l     O .rodata	00000070 USART1_registers
08011378 l     O .rodata	00000160 TIM1_registers
080109b0 l     O .rodata	00000120 SDIO_registers
08010bf8 l     O .rodata	00000070 SYSCFG_registers
08012440 l     O .rodata	000000e0 TIM9_registers
08010d38 l     O .rodata	000000b0 TIM10_registers
08010ec0 l     O .rodata	000000c0 TIM11_registers
0800fb08 l     O .rodata	00000140 RCC_registers
08010350 l     O .rodata	00000010 SCB_ACTRL_registers
08010b18 l     O .rodata	00000040 STK_registers
080105b0 l     O .rodata	000000f0 SCB_registers
0800f518 l     O .rodata	00000048 RCC_AHB1ENR_fields
0800f560 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0800f5b8 l     O .rodata	00000048 RCC_AHB1RSTR_fields
0800f600 l     O .rodata	00000008 RCC_AHB2ENR_fields
0800f608 l     O .rodata	00000008 RCC_AHB2LPENR_fields
0800f610 l     O .rodata	00000008 RCC_AHB2RSTR_fields
0800f618 l     O .rodata	00000060 RCC_APB1ENR_fields
0800f678 l     O .rodata	00000060 RCC_APB1LPENR_fields
0800f6d8 l     O .rodata	00000060 RCC_APB1RSTR_fields
0800f738 l     O .rodata	00000058 RCC_APB2ENR_fields
0800f790 l     O .rodata	00000058 RCC_APB2LPENR_fields
0800f7e8 l     O .rodata	00000050 RCC_APB2RSTR_fields
0800f838 l     O .rodata	00000038 RCC_BDCR_fields
0800f870 l     O .rodata	00000068 RCC_CFGR_fields
0800f8d8 l     O .rodata	000000a0 RCC_CIR_fields
0800f978 l     O .rodata	00000060 RCC_CR_fields
0800f9d8 l     O .rodata	00000050 RCC_CSR_fields
0800fa28 l     O .rodata	000000b0 RCC_PLLCFGR_fields
0800fad8 l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800fae8 l     O .rodata	00000020 RCC_SSCGR_fields
0800fc48 l     O .rodata	00000070 RTC_ALRMAR_fields
0800fcb8 l     O .rodata	00000010 RTC_ALRMASSR_fields
0800fcc8 l     O .rodata	00000070 RTC_ALRMBR_fields
0800fd38 l     O .rodata	00000010 RTC_ALRMBSSR_fields
0800fd48 l     O .rodata	00000008 RTC_BKP0R_fields
0800fd50 l     O .rodata	00000008 RTC_BKP10R_fields
0800fd58 l     O .rodata	00000008 RTC_BKP11R_fields
0800fd60 l     O .rodata	00000008 RTC_BKP12R_fields
0800fd68 l     O .rodata	00000008 RTC_BKP13R_fields
0800fd70 l     O .rodata	00000008 RTC_BKP14R_fields
0800fd78 l     O .rodata	00000008 RTC_BKP15R_fields
0800fd80 l     O .rodata	00000008 RTC_BKP16R_fields
0800fd88 l     O .rodata	00000008 RTC_BKP17R_fields
0800fd90 l     O .rodata	00000008 RTC_BKP18R_fields
0800fd98 l     O .rodata	00000008 RTC_BKP19R_fields
0800fda0 l     O .rodata	00000008 RTC_BKP1R_fields
0800fda8 l     O .rodata	00000008 RTC_BKP2R_fields
0800fdb0 l     O .rodata	00000008 RTC_BKP3R_fields
0800fdb8 l     O .rodata	00000008 RTC_BKP4R_fields
0800fdc0 l     O .rodata	00000008 RTC_BKP5R_fields
0800fdc8 l     O .rodata	00000008 RTC_BKP6R_fields
0800fdd0 l     O .rodata	00000008 RTC_BKP7R_fields
0800fdd8 l     O .rodata	00000008 RTC_BKP8R_fields
0800fde0 l     O .rodata	00000008 RTC_BKP9R_fields
0800fde8 l     O .rodata	00000010 RTC_CALIBR_fields
0800fdf8 l     O .rodata	00000020 RTC_CALR_fields
0800fe18 l     O .rodata	000000a8 RTC_CR_fields
0800fec0 l     O .rodata	00000038 RTC_DR_fields
0800fef8 l     O .rodata	00000080 RTC_ISR_fields
0800ff78 l     O .rodata	00000010 RTC_PRER_fields
0800ff88 l     O .rodata	00000010 RTC_SHIFTR_fields
0800ff98 l     O .rodata	00000008 RTC_SSR_fields
0800ffa0 l     O .rodata	00000068 RTC_TAFCR_fields
08010008 l     O .rodata	00000038 RTC_TR_fields
08010040 l     O .rodata	00000028 RTC_TSDR_fields
08010068 l     O .rodata	00000008 RTC_TSSSR_fields
08010070 l     O .rodata	00000038 RTC_TSTR_fields
080100a8 l     O .rodata	00000008 RTC_WPR_fields
080100b0 l     O .rodata	00000008 RTC_WUTR_fields
08010328 l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
08010360 l     O .rodata	00000008 SCB_AFSR_fields
08010368 l     O .rodata	00000030 SCB_AIRCR_fields
08010398 l     O .rodata	00000008 SCB_BFAR_fields
080103a0 l     O .rodata	00000030 SCB_CCR_fields
080103d0 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
08010460 l     O .rodata	00000028 SCB_CPUID_fields
08010488 l     O .rodata	00000018 SCB_HFSR_fields
080104a0 l     O .rodata	00000048 SCB_ICSR_fields
080104e8 l     O .rodata	00000008 SCB_MMFAR_fields
080104f0 l     O .rodata	00000018 SCB_SCR_fields
08010508 l     O .rodata	00000070 SCB_SHCRS_fields
08010578 l     O .rodata	00000018 SCB_SHPR1_fields
08010590 l     O .rodata	00000008 SCB_SHPR2_fields
08010598 l     O .rodata	00000010 SCB_SHPR3_fields
080105a8 l     O .rodata	00000008 SCB_VTOR_fields
080106a0 l     O .rodata	00000008 SDIO_ARG_fields
080106a8 l     O .rodata	00000038 SDIO_CLKCR_fields
080106e0 l     O .rodata	00000048 SDIO_CMD_fields
08010728 l     O .rodata	00000008 SDIO_DCOUNT_fields
08010730 l     O .rodata	00000048 SDIO_DCTRL_fields
08010778 l     O .rodata	00000008 SDIO_DLEN_fields
08010780 l     O .rodata	00000008 SDIO_DTIMER_fields
08010788 l     O .rodata	00000008 SDIO_FIFOCNT_fields
08010790 l     O .rodata	00000008 SDIO_FIFO_fields
08010798 l     O .rodata	00000068 SDIO_ICR_fields
08010800 l     O .rodata	000000c0 SDIO_MASK_fields
080108c0 l     O .rodata	00000008 SDIO_POWER_fields
080108c8 l     O .rodata	00000008 SDIO_RESP1_fields
080108d0 l     O .rodata	00000008 SDIO_RESP2_fields
080108d8 l     O .rodata	00000008 SDIO_RESP3_fields
080108e0 l     O .rodata	00000008 SDIO_RESP4_fields
080108e8 l     O .rodata	00000008 SDIO_RESPCMD_fields
080108f0 l     O .rodata	000000c0 SDIO_STA_fields
08010ad0 l     O .rodata	00000018 STK_CALIB_fields
08010ae8 l     O .rodata	00000020 STK_CTRL_fields
08010b08 l     O .rodata	00000008 STK_LOAD_fields
08010b10 l     O .rodata	00000008 STK_VAL_fields
08010b58 l     O .rodata	00000010 SYSCFG_CMPCR_fields
08010b68 l     O .rodata	00000020 SYSCFG_EXTICR1_fields
08010b88 l     O .rodata	00000020 SYSCFG_EXTICR2_fields
08010ba8 l     O .rodata	00000020 SYSCFG_EXTICR3_fields
08010bc8 l     O .rodata	00000020 SYSCFG_EXTICR4_fields
08010be8 l     O .rodata	00000008 SYSCFG_MEMRM_fields
08010bf0 l     O .rodata	00000008 SYSCFG_PMC_fields
08010c68 l     O .rodata	00000008 TIM10_ARR_fields
08010c70 l     O .rodata	00000018 TIM10_CCER_fields
08010c88 l     O .rodata	00000018 TIM10_CCMR1_Input_fields
08010ca0 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
08010cc0 l     O .rodata	00000008 TIM10_CCR1_fields
08010cc8 l     O .rodata	00000008 TIM10_CNT_fields
08010cd0 l     O .rodata	00000028 TIM10_CR1_fields
08010cf8 l     O .rodata	00000010 TIM10_DIER_fields
08010d08 l     O .rodata	00000010 TIM10_EGR_fields
08010d18 l     O .rodata	00000008 TIM10_PSC_fields
08010d20 l     O .rodata	00000018 TIM10_SR_fields
08010de8 l     O .rodata	00000008 TIM11_ARR_fields
08010df0 l     O .rodata	00000018 TIM11_CCER_fields
08010e08 l     O .rodata	00000018 TIM11_CCMR1_Input_fields
08010e20 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
08010e40 l     O .rodata	00000008 TIM11_CCR1_fields
08010e48 l     O .rodata	00000008 TIM11_CNT_fields
08010e50 l     O .rodata	00000028 TIM11_CR1_fields
08010e78 l     O .rodata	00000010 TIM11_DIER_fields
08010e88 l     O .rodata	00000010 TIM11_EGR_fields
08010e98 l     O .rodata	00000008 TIM11_OR_fields
08010ea0 l     O .rodata	00000008 TIM11_PSC_fields
08010ea8 l     O .rodata	00000018 TIM11_SR_fields
08010f80 l     O .rodata	00000008 TIM1_ARR_fields
08010f88 l     O .rodata	00000040 TIM1_BDTR_fields
08010fc8 l     O .rodata	00000070 TIM1_CCER_fields
08011038 l     O .rodata	00000030 TIM1_CCMR1_Input_fields
08011068 l     O .rodata	00000050 TIM1_CCMR1_Output_fields
080110b8 l     O .rodata	00000030 TIM1_CCMR2_Input_fields
080110e8 l     O .rodata	00000050 TIM1_CCMR2_Output_fields
08011138 l     O .rodata	00000008 TIM1_CCR1_fields
08011140 l     O .rodata	00000008 TIM1_CCR2_fields
08011148 l     O .rodata	00000008 TIM1_CCR3_fields
08011150 l     O .rodata	00000008 TIM1_CCR4_fields
08011158 l     O .rodata	00000008 TIM1_CNT_fields
08011160 l     O .rodata	00000040 TIM1_CR1_fields
080111a0 l     O .rodata	00000060 TIM1_CR2_fields
08011200 l     O .rodata	00000010 TIM1_DCR_fields
08011210 l     O .rodata	00000078 TIM1_DIER_fields
08011288 l     O .rodata	00000008 TIM1_DMAR_fields
08011290 l     O .rodata	00000040 TIM1_EGR_fields
080112d0 l     O .rodata	00000008 TIM1_PSC_fields
080112d8 l     O .rodata	00000008 TIM1_RCR_fields
080112e0 l     O .rodata	00000038 TIM1_SMCR_fields
08011318 l     O .rodata	00000060 TIM1_SR_fields
080114d8 l     O .rodata	00000010 TIM2_ARR_fields
080114e8 l     O .rodata	00000060 TIM2_CCER_fields
08011548 l     O .rodata	00000030 TIM2_CCMR1_Input_fields
08011578 l     O .rodata	00000050 TIM2_CCMR1_Output_fields
080115c8 l     O .rodata	00000030 TIM2_CCMR2_Input_fields
080115f8 l     O .rodata	00000050 TIM2_CCMR2_Output_fields
08011648 l     O .rodata	00000010 TIM2_CCR1_fields
08011658 l     O .rodata	00000010 TIM2_CCR2_fields
08011668 l     O .rodata	00000010 TIM2_CCR3_fields
08011678 l     O .rodata	00000010 TIM2_CCR4_fields
08011688 l     O .rodata	00000010 TIM2_CNT_fields
08011698 l     O .rodata	00000040 TIM2_CR1_fields
080116d8 l     O .rodata	00000018 TIM2_CR2_fields
080116f0 l     O .rodata	00000010 TIM2_DCR_fields
08011700 l     O .rodata	00000060 TIM2_DIER_fields
08011760 l     O .rodata	00000008 TIM2_DMAR_fields
08011768 l     O .rodata	00000030 TIM2_EGR_fields
08011798 l     O .rodata	00000008 TIM2_OR_fields
080117a0 l     O .rodata	00000008 TIM2_PSC_fields
080117a8 l     O .rodata	00000038 TIM2_SMCR_fields
080117e0 l     O .rodata	00000050 TIM2_SR_fields
08011980 l     O .rodata	00000010 TIM3_ARR_fields
08011990 l     O .rodata	00000060 TIM3_CCER_fields
080119f0 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
08011a20 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
08011a70 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
08011aa0 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
08011af0 l     O .rodata	00000010 TIM3_CCR1_fields
08011b00 l     O .rodata	00000010 TIM3_CCR2_fields
08011b10 l     O .rodata	00000010 TIM3_CCR3_fields
08011b20 l     O .rodata	00000010 TIM3_CCR4_fields
08011b30 l     O .rodata	00000010 TIM3_CNT_fields
08011b40 l     O .rodata	00000040 TIM3_CR1_fields
08011b80 l     O .rodata	00000018 TIM3_CR2_fields
08011b98 l     O .rodata	00000010 TIM3_DCR_fields
08011ba8 l     O .rodata	00000060 TIM3_DIER_fields
08011c08 l     O .rodata	00000008 TIM3_DMAR_fields
08011c10 l     O .rodata	00000030 TIM3_EGR_fields
08011c40 l     O .rodata	00000008 TIM3_PSC_fields
08011c48 l     O .rodata	00000038 TIM3_SMCR_fields
08011c80 l     O .rodata	00000050 TIM3_SR_fields
08011e10 l     O .rodata	00000010 TIM5_ARR_fields
08011e20 l     O .rodata	00000060 TIM5_CCER_fields
08011e80 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
08011eb0 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
08011f00 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
08011f30 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
08011f80 l     O .rodata	00000010 TIM5_CCR1_fields
08011f90 l     O .rodata	00000010 TIM5_CCR2_fields
08011fa0 l     O .rodata	00000010 TIM5_CCR3_fields
08011fb0 l     O .rodata	00000010 TIM5_CCR4_fields
08011fc0 l     O .rodata	00000010 TIM5_CNT_fields
08011fd0 l     O .rodata	00000040 TIM5_CR1_fields
08012010 l     O .rodata	00000018 TIM5_CR2_fields
08012028 l     O .rodata	00000010 TIM5_DCR_fields
08012038 l     O .rodata	00000060 TIM5_DIER_fields
08012098 l     O .rodata	00000008 TIM5_DMAR_fields
080120a0 l     O .rodata	00000030 TIM5_EGR_fields
080120d0 l     O .rodata	00000008 TIM5_OR_fields
080120d8 l     O .rodata	00000008 TIM5_PSC_fields
080120e0 l     O .rodata	00000038 TIM5_SMCR_fields
08012118 l     O .rodata	00000050 TIM5_SR_fields
080122b8 l     O .rodata	00000008 TIM9_ARR_fields
080122c0 l     O .rodata	00000030 TIM9_CCER_fields
080122f0 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
08012320 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
08012360 l     O .rodata	00000008 TIM9_CCR1_fields
08012368 l     O .rodata	00000008 TIM9_CCR2_fields
08012370 l     O .rodata	00000008 TIM9_CNT_fields
08012378 l     O .rodata	00000030 TIM9_CR1_fields
080123a8 l     O .rodata	00000008 TIM9_CR2_fields
080123b0 l     O .rodata	00000020 TIM9_DIER_fields
080123d0 l     O .rodata	00000020 TIM9_EGR_fields
080123f0 l     O .rodata	00000008 TIM9_PSC_fields
080123f8 l     O .rodata	00000018 TIM9_SMCR_fields
08012410 l     O .rodata	00000030 TIM9_SR_fields
08012520 l     O .rodata	00000010 TerminalInfo
08012530 l     O .rodata	00000010 USART1_BRR_fields
08012540 l     O .rodata	00000078 USART1_CR1_fields
080125b8 l     O .rodata	00000048 USART1_CR2_fields
08012600 l     O .rodata	00000060 USART1_CR3_fields
08012660 l     O .rodata	00000008 USART1_DR_fields
08012668 l     O .rodata	00000010 USART1_GTPR_fields
08012678 l     O .rodata	00000050 USART1_SR_fields
08012738 l     O .rodata	00000019 VersionBuildDateString
08012751 l     O .rodata	00000006 VersionBuildUser
08012758 l     O .rodata	00000020 WWDG_CFR_fields
08012778 l     O .rodata	00000010 WWDG_CR_fields
08012788 l     O .rodata	00000008 WWDG_SR_fields
080127c0 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
080127c6 l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003f90 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
080040c4 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004f40 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012c58 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005aec l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
2000001c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00005bc5 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00005e1e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00005f9d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00006eae l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00007e0a l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
0000a0ab l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
0000ad02 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
0000aecb l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
0000b4c0 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
0000b758 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
0000c7cf l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
0000cb88 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
0000ce79 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
0000d145 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
0000d6b9 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
0000e24b l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
0000e2f7 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
0000f0fa l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
0000f601 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
0000fe4c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
000105bf l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
000110ec l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
000126e0 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00012db2 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00012f61 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
000151e3 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
0001635a l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012d68 l       .init_array	00000000 __init_array_end
08012d64 l       .init_array	00000000 __preinit_array_end
08012d64 l       .init_array	00000000 __init_array_start
08012d64 l       .init_array	00000000 __preinit_array_start
0800340c  w    F .text	00000006 RTC_Alarm_IRQHandler
080060f4 g     F .text	00000010 _malloc_usable_size_r
08003478 g     F .text	000000c4 __cvt
0800340c  w    F .text	00000006 EXTI2_IRQHandler
08006134 g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
08002b56 g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
08006280 g     F .text	00000010 strcpy
08002bb0 g     F .text	00000004 _getpid
08006160 g     F .text	000000dc _puts_r
000126e0  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.b36020d7
08000a7c g     F .text	0000007a .hidden __cmpdf2
08002b5a g     F .text	00000004 _lseek_r
08003384 g     F .text	00000002 DebugMon_Handler
08012ca8 g     O .rodata	0000000c CmdTestE
0800340c  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
080005ec g     F .text	0000005a .hidden __floatdidf
080060cc g     F .text	00000024 _kill_r
0000cb88  w      .debug_info	00000000 .hidden tasking.c.3c1ff15a
08006104 g     F .text	00000030 printf
0000fe4c  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.0fc8201d
0800340c  w    F .text	00000006 TIM1_CC_IRQHandler
08005dfa g     F .text	00000024 __sseek
08004ff0 g     F .text	00000070 __sinit
0800340c  w    F .text	00000006 DMA2_Stream5_IRQHandler
08005e28 g     F .text	000000a4 __swbuf_r
0800337a g     F .text	00000002 HardFault_Handler
08004f94 g     F .text	0000002c __sfmoreglue
0800340c  w    F .text	00000006 DMA1_Stream5_IRQHandler
08006014 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08003388 g     F .text	00000020 SysTick_Handler
08012cd8 g     O .rodata	0000000c CmdLedE
0800340c  w    F .text	00000006 PVD_IRQHandler
0800340c  w    F .text	00000006 SDIO_IRQHandler
08005fd2 g     F .text	00000034 memmove
0800340c  w    F .text	00000006 TAMP_STAMP_IRQHandler
08012d6c g       *ABS*	00000000 _sidata
08003386 g     F .text	00000002 PendSV_Handler
08003378 g     F .text	00000002 NMI_Handler
08005278 g     F .text	00000080 _Balloc
08012d64 g       .ARM	00000000 __exidx_end
08003f40 g     F .text	00000050 __strtok_r
0800340c  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
08012d5c g       .rodata	00000000 _parsetable_end
08003414 g     F .text	0000000c __errno
08012d44 g     O .rodata	0000000c CmdWE
0800340c  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
08002b4c g     F .text	0000000a _fstat_r
20000ca0 g     O .bss	00000004 errno
08006664 g       .text	00000000 _etext
200001ec g       .bss	00000000 _sbss
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
00005e1e  w      .debug_info	00000000 .hidden mytest.c.674274e8
0800340c  w    F .text	00000006 I2C3_ER_IRQHandler
08012c90 g     O .rodata	0000000c CmdDC2E
0800525c g     F .text	0000001c memcpy
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08003d4c g     F .text	0000018c setvbuf
08004f88 g     F .text	0000000c _cleanup_r
080063bc g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
000151e3  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim_ex.c.2bc70310
0800340c  w    F .text	00000006 EXTI0_IRQHandler
0800340c  w    F .text	00000006 I2C2_EV_IRQHandler
08000bf8 g     F .text	00000000 .hidden __aeabi_uldivmod
0800623c g     F .text	00000010 puts
0000aecb  w      .debug_info	00000000 .hidden parser.c.825010af
0800340c  w    F .text	00000006 DMA1_Stream2_IRQHandler
0800340c  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
08002aec g     F .text	00000014 USR_LED_Toggle
08005228 g     F .text	00000010 malloc
08012c90 g       .rodata	00000000 _tasktable_end
0800606c g     F .text	00000050 _raise_r
08004088 g     F .text	0000003c __assert_func
08012b90 g     O .rodata	000000c8 __mprec_tens
08003380 g     F .text	00000002 UsageFault_Handler
080062e8 g     F .text	0000001c vsnprintf
08012c9c g     O .rodata	0000000c CmdDCE
0800340c  w    F .text	00000006 DMA2_Stream2_IRQHandler
080060f0 g     F .text	00000004 _getpid_r
200001ec g       .bss	00000000 __bss_start__
08004074 g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
08005150 g     F .text	00000008 _localeconv_r
08005468 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
0800340c  w    F .text	00000006 SPI1_IRQHandler
08000c28 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
08002b18 g     F .text	00000030 _sbrk_r
00005f9d  w      .debug_info	00000000 .hidden example_dc.c.a36d7024
08002b5e g     F .text	0000000a _read_r
0000a0ab  w      .debug_info	00000000 .hidden syscall.c.4e500076
0800340c  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
0000b758  w      .debug_info	00000000 .hidden terminal.c.06c1db49
08012d5c g       .ARM	00000000 __exidx_start
08000648 g     F .text	00000254 .hidden __aeabi_dmul
0800340c  w    F .text	00000006 DMA2_Stream3_IRQHandler
08012d38 g     O .rodata	0000000c CmdVersionE
20000c96 g     O .bss	00000001 __lock___sinit_recursive_mutex
080128dc g     O .rodata	00000004 _global_impure_ptr
08006020 g     F .text	0000004c _realloc_r
00012f61  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.594f5834
08003420 g     F .text	00000048 __libc_init_array
08012b68 g     O .rodata	00000028 __mprec_bigtens
08005fc4 g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
0800577c g     F .text	00000038 __mcmp
200001e8 g     O .data	00000004 TaskInputTaskState
0800340c  w    F .text	00000006 USART6_IRQHandler
0800664c g     F .text	00000000 _init
08012c90 g       .rodata	00000000 _parsetable_start
08012c78 g       .rodata	00000000 _tasktable_start
08012cf0 g     O .rodata	0000000c CmdRE
20000ca4 g       .bss	00000000 _ebss
080033bc  w    F .text	00000038 Reset_Handler
080062e8 g     F .text	0000001c vsniprintf
080053c8 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
20000c94 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800340c  w    F .text	00000006 DMA2_Stream0_IRQHandler
080065bc g     F .text	00000090 _putc_r
080050ec g     F .text	00000024 fprintf
0800340c  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
0000d145  w      .debug_info	00000000 .hidden decoder.c.18ea236f
080055e8 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
080001e0 g     F .text	00000014 mytest
08012a80 g     O .rodata	00000020 __sf_fake_stderr
20000ca8 g       ._user_heap_stack	00000000 end
0800340c  w    F .text	00000006 I2C1_EV_IRQHandler
0800515c g     F .text	00000002 __retarget_lock_release_recursive
0800340c  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001e8 g       .data	00000000 _taskstate_start
08006304 g     F .text	000000b6 __ssputs_r
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800340c  w    F .text	00000006 DMA1_Stream1_IRQHandler
08005b1a g     F .text	00000024 __sfputs_r
08004fc0 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
080035b8  w    F .text	0000046c _printf_float
20000ca4 g       .bss	00000000 __bss_end__
080059a0 g     F .text	00000098 _free_r
08002b0c g     F .text	0000000c TIM3_IRQHandler
0800340c  w    F .text	00000006 RCC_IRQHandler
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
0800340c g       .text	00000006 Default_Handler
0000e2f7  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.167a7f62
080005dc g     F .text	0000006a .hidden __floatundidf
000105bf  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.2b93ffaa
0800569c g     F .text	000000e0 __lshift
00006eae  w      .debug_info	00000000 .hidden example_encoder.c.eed0c59d
0800340c  w    F .text	00000006 EXTI15_10_IRQHandler
0800340c  w    F .text	00000006 ADC_IRQHandler
08005494 g     F .text	00000154 __multiply
080058c8 g     F .text	000000b8 __d2b
0800624c g     F .text	00000034 strcasecmp
0000f0fa  w      .debug_info	00000000 .hidden system_stm32f4xx.c.f0a82be1
0800340c  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
0800340c  w    F .text	00000006 SPI5_IRQHandler
08012cfc g     O .rodata	0000000c CmdReceiveE
08002b48 g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
0800340c  w    F .text	00000006 TIM5_IRQHandler
08003ed8 g     F .text	00000068 strtok
08012c78 g     O .rodata	00000018 TaskInputTask
0800340c  w    F .text	00000006 DMA2_Stream7_IRQHandler
0800340c  w    F .text	00000006 I2C3_EV_IRQHandler
00012db2  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.7d27ddf2
08005ee8 g     F .text	000000dc __swsetup_r
08000ef8  w    F .text	00000002 .hidden __aeabi_ldiv0
0800340c  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08005060 g     F .text	0000008c __sfp
0800340c  w    F .text	00000006 RTC_WKUP_IRQHandler
08004fe4 g     F .text	0000000c __sinit_lock_release
08006290 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
08005da0 g     F .text	00000022 __sread
08006008 g     F .text	0000000c __malloc_lock
08004ec8 g     F .text	00000078 _fflush_r
08005980 g     F .text	0000001e _calloc_r
0800340c  w    F .text	00000006 SPI2_IRQHandler
08012aa0 g     O .rodata	00000020 __sf_fake_stdin
0800515a g     F .text	00000002 __retarget_lock_acquire_recursive
08003468 g     F .text	00000010 memset
0800337c g     F .text	00000002 MemManage_Handler
08002cf4 g     F .text	00000684 main
0800340c  w    F .text	00000006 DMA1_Stream0_IRQHandler
08005158 g     F .text	00000002 __retarget_lock_init_recursive
08003382 g     F .text	00000002 SVC_Handler
08005e1e g     F .text	00000008 __sclose
080041e0 g     F .text	00000bdc _dtoa_r
08005a38 g     F .text	000000b4 _malloc_r
08005ecc g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
0800340c  w    F .text	00000006 EXTI4_IRQHandler
0000b4c0  w      .debug_info	00000000 .hidden dump.c.80a332ec
080033a8 g     F .text	00000014 SystemInit
08000a7c g     F .text	0000007a .hidden __nedf2
08006658 g     F .text	00000000 _fini
08006104 g     F .text	00000030 iprintf
200001ec g       .data	00000000 _taskstate_end
0800353c g     F .text	0000007c __exponent
08002b68 g     F .text	00000040 _write_r
00007e0a  w      .debug_info	00000000 .hidden STM32F411.c.c8ef9f14
08003a24 g     F .text	000000da _printf_common
20000018 g     O .data	00000004 _impure_ptr
08012ccc g     O .rodata	0000000c EncoderInitE
0001635a  w      .debug_info	00000000 .hidden version.c.e0804c9a
08004dbc g     F .text	0000010c __sflush_r
080063bc g     F .text	00000200 _svfiprintf_r
0800340c  w    F .text	00000006 WWDG_IRQHandler
08002c9c g     F .text	00000058 Default_IRQHandler
08005238 g     F .text	00000024 __ascii_mbtowc
08012d2c g     O .rodata	0000000c CmdTransparentE
0800340c  w    F .text	00000006 TIM2_IRQHandler
08000208 g     F .text	00000004 my_Loop
08012cc0 g     O .rodata	0000000c CmdDecodeE
08006290 g     F .text	00000056 _vsniprintf_r
20000000 g       .data	00000000 myTickCount
0800340c  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
08002b00 g     F .text	0000000c TIM1_TRG_COM_TIM11_IRQHandler
0800515e g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
0800340c  w    F .text	00000006 EXTI1_IRQHandler
08012ce4 g     O .rodata	0000000c CmdEncoder2E
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
0000d6b9  w      .debug_info	00000000 .hidden main.c.2c6e82a5
200001ec g       .data	00000000 _edata
0000c7cf  w      .debug_info	00000000 .hidden wdog.c.16db08df
0000f601  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.11893d14
00005bc5  w      .debug_info	00000000 .hidden my_main.c.1913d6b0
08002bb4 g     F .text	000000e8 USART2_IRQHandler
08005dc2 g     F .text	00000038 __swrite
080050ec g     F .text	00000024 fiprintf
08005b40 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0000e24b  w      .debug_info	00000000 .hidden stm32f4xx_it.c.9b5bb718
08005110 g     F .text	0000003e _fwalk_reent
080057b4 g     F .text	00000114 __mdiff
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002ba8 g     F .text	00000006 _kill
0800340c  w    F .text	00000006 I2C2_ER_IRQHandler
08004fcc g     F .text	0000000c __sfp_lock_release
000110ec  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.ecd62046
08012ac0 g     O .rodata	00000020 __sf_fake_stdout
08012cb4 g     O .rodata	0000000c CmdDumpE
0800340c  w    F .text	00000006 DMA2_Stream1_IRQHandler
080127d9 g     O .rodata	00000101 _ctype_
08000ef8  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
08012d20 g     O .rodata	0000000c CmdStatsE
0800340c  w    F .text	00000006 FLASH_IRQHandler
08002bae g     F .text	00000002 _exit
08012d14 g     O .rodata	0000000c CmdTasksE
0800340c  w    F .text	00000006 DMA2_Stream4_IRQHandler
0800337e g     F .text	00000002 BusFault_Handler
0800340c  w    F .text	00000006 USART1_IRQHandler
080051a8 g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
0800340c  w    F .text	00000006 OTG_FS_IRQHandler
08003b00 g     F .text	0000024c _printf_i
0800340c  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
0800340c  w    F .text	00000006 DMA1_Stream4_IRQHandler
20000c9c g     O .bss	00000004 __malloc_sbrk_start
0800340c  w    F .text	00000006 I2C1_ER_IRQHandler
08012d08 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000c98 g     O .bss	00000004 __malloc_free_list
080002d8 g     F .text	0000027a .hidden __subdf3
08005b40 g     F .text	00000260 _vfprintf_r
0000ce79  w      .debug_info	00000000 .hidden default.c.f4ae2258
08005408 g     F .text	0000005e __lo0bits
0000ad02  w      .debug_info	00000000 .hidden monitor.c.8a4174bc
0800340c  w    F .text	00000006 DMA2_Stream6_IRQHandler
2000007c g     O .data	0000016c __global_locale
0800340c  w    F .text	00000006 DMA1_Stream3_IRQHandler
20000c95 g     O .bss	00000001 __lock___sfp_recursive_mutex
080060bc g     F .text	00000010 raise
08004fd8 g     F .text	0000000c __sinit_lock_acquire
0800533c g     F .text	0000008c __multadd
080052f8 g     F .text	00000044 _Bfree



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800664c 	.word	0x0800664c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800664c 	.word	0x0800664c

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f002 fc81 	bl	8002aec <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_TIM_IC_CaptureCallback>:
//         
// RETURNS       :void
//   
  
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
   if(htim->Instance == TIM3){ 
 8000efc:	6801      	ldr	r1, [r0, #0]
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x20>)
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d109      	bne.n	8000f18 <HAL_TIM_IC_CaptureCallback+0x1c>
     count++;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	3201      	adds	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  
     if (count == 60){
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2a3c      	cmp	r2, #60	; 0x3c
       count  = 0;
 8000f10:	bf02      	ittt	eq
 8000f12:	2200      	moveq	r2, #0
 8000f14:	601a      	streq	r2, [r3, #0]
       TIM3->CNT = 0;
 8000f16:	624a      	streq	r2, [r1, #36]	; 0x24
       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); 
      }
  
     }
   
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40000400 	.word	0x40000400
 8000f20:	20000a60 	.word	0x20000a60

08000f24 <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 8000f24:	b530      	push	{r4, r5, lr}
 8000f26:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000f2a:	4c10      	ldr	r4, [pc, #64]	; (8000f6c <TerminalRead+0x48>)
 8000f2c:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8000f30:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 8000f32:	fb05 4303 	mla	r3, r5, r3, r4
 8000f36:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	b10c      	cbz	r4, 8000f42 <TerminalRead+0x1e>
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d101      	bne.n	8000f46 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 8000f44:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8000f46:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8000f4a:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000f4c:	5d1d      	ldrb	r5, [r3, r4]
 8000f4e:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000f50:	3401      	adds	r4, #1
 8000f52:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8000f56:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8000f5a:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000f5e:	3c01      	subs	r4, #1
 8000f60:	b2a4      	uxth	r4, r4
 8000f62:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 8000f66:	3001      	adds	r0, #1
 8000f68:	e7e5      	b.n	8000f36 <TerminalRead+0x12>
 8000f6a:	bf00      	nop
 8000f6c:	20000210 	.word	0x20000210

08000f70 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8000f70:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <Uncompress+0x74>)
{
 8000f74:	b08a      	sub	sp, #40	; 0x28
 8000f76:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000f78:	466c      	mov	r4, sp
 8000f7a:	f102 0620 	add.w	r6, r2, #32
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	6851      	ldr	r1, [r2, #4]
 8000f82:	4625      	mov	r5, r4
 8000f84:	c503      	stmia	r5!, {r0, r1}
 8000f86:	3208      	adds	r2, #8
 8000f88:	42b2      	cmp	r2, r6
 8000f8a:	462c      	mov	r4, r5
 8000f8c:	d1f7      	bne.n	8000f7e <Uncompress+0xe>
 8000f8e:	6810      	ldr	r0, [r2, #0]
 8000f90:	6028      	str	r0, [r5, #0]
 8000f92:	8892      	ldrh	r2, [r2, #4]
 8000f94:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8000f96:	4618      	mov	r0, r3
 8000f98:	4d13      	ldr	r5, [pc, #76]	; (8000fe8 <Uncompress+0x78>)
 8000f9a:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	ba5b      	rev16	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
  i = 0;
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8000fa8:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8000fac:	d103      	bne.n	8000fb6 <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <Uncompress+0x78>)
  buf[i]='\0';
 8000fb0:	5532      	strb	r2, [r6, r4]
}
 8000fb2:	b00a      	add	sp, #40	; 0x28
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8000fb6:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8000fb8:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8000fbc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8000fc0:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8000fc4:	4462      	add	r2, ip
    buf[i++] = c;
 8000fc6:	3401      	adds	r4, #1
 8000fc8:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8000fcc:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8000fd0:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8000fd2:	2a07      	cmp	r2, #7
      bits -= 8;
 8000fd4:	bf81      	itttt	hi
 8000fd6:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8000fd8:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8000fdc:	4091      	lslhi	r1, r2
 8000fde:	430b      	orrhi	r3, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	e7e1      	b.n	8000fa8 <Uncompress+0x38>
 8000fe4:	08006aa8 	.word	0x08006aa8
 8000fe8:	20000a48 	.word	0x20000a48

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001178 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4a5e      	ldr	r2, [pc, #376]	; (8001170 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000ffa:	2401      	movs	r4, #1
 8000ffc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001002:	43ac      	bics	r4, r5
 8001004:	f040 80a5 	bne.w	8001152 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001008:	684d      	ldr	r5, [r1, #4]
 800100a:	f005 0403 	and.w	r4, r5, #3
 800100e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001012:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001014:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001016:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001020:	d834      	bhi.n	800108c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001022:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001028:	68cf      	ldr	r7, [r1, #12]
 800102a:	fa07 f708 	lsl.w	r7, r7, r8
 800102e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001032:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001034:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800103e:	409f      	lsls	r7, r3
 8001040:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001044:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001046:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001048:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	688f      	ldr	r7, [r1, #8]
 800104e:	fa07 f708 	lsl.w	r7, r7, r8
 8001052:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001058:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	d119      	bne.n	8001090 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800105c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001060:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001064:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001068:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001070:	f04f 0e0f 	mov.w	lr, #15
 8001074:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001078:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	690f      	ldr	r7, [r1, #16]
 800107e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001082:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	f8ca 7020 	str.w	r7, [sl, #32]
 800108a:	e001      	b.n	8001090 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	2c03      	cmp	r4, #3
 800108e:	d1da      	bne.n	8001046 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001090:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001092:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800109e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a0:	d057      	beq.n	8001152 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	f04f 0a00 	mov.w	sl, #0
 80010a6:	f8cd a004 	str.w	sl, [sp, #4]
 80010aa:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	4c31      	ldr	r4, [pc, #196]	; (8001174 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80010b4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80010b8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80010bc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80010c0:	9601      	str	r6, [sp, #4]
 80010c2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80010c4:	f023 0603 	bic.w	r6, r3, #3
 80010c8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80010cc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80010d4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010dc:	270f      	movs	r7, #15
 80010de:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e8:	d03a      	beq.n	8001160 <HAL_GPIO_Init+0x174>
 80010ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010ee:	42a0      	cmp	r0, r4
 80010f0:	d038      	beq.n	8001164 <HAL_GPIO_Init+0x178>
 80010f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010f6:	42a0      	cmp	r0, r4
 80010f8:	d036      	beq.n	8001168 <HAL_GPIO_Init+0x17c>
 80010fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010fe:	42a0      	cmp	r0, r4
 8001100:	d034      	beq.n	800116c <HAL_GPIO_Init+0x180>
 8001102:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001106:	42a0      	cmp	r0, r4
 8001108:	bf0c      	ite	eq
 800110a:	2404      	moveq	r4, #4
 800110c:	2407      	movne	r4, #7
 800110e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001112:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001114:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001116:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001118:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111c:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800111e:	bf54      	ite	pl
 8001120:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001122:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001126:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001128:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800112c:	bf54      	ite	pl
 800112e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001130:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001134:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001138:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800113a:	bf54      	ite	pl
 800113c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800113e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001142:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001146:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001148:	bf54      	ite	pl
 800114a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800114c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001150:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	3301      	adds	r3, #1
 8001154:	2b10      	cmp	r3, #16
 8001156:	f47f af4f 	bne.w	8000ff8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800115a:	b003      	add	sp, #12
 800115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001160:	4654      	mov	r4, sl
 8001162:	e7d4      	b.n	800110e <HAL_GPIO_Init+0x122>
 8001164:	2401      	movs	r4, #1
 8001166:	e7d2      	b.n	800110e <HAL_GPIO_Init+0x122>
 8001168:	2402      	movs	r4, #2
 800116a:	e7d0      	b.n	800110e <HAL_GPIO_Init+0x122>
 800116c:	2403      	movs	r4, #3
 800116e:	e7ce      	b.n	800110e <HAL_GPIO_Init+0x122>
 8001170:	40013c00 	.word	0x40013c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40023800 	.word	0x40023800

0800117c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800117c:	6803      	ldr	r3, [r0, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	0791      	lsls	r1, r2, #30
{
 8001182:	b510      	push	{r4, lr}
 8001184:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001186:	d50e      	bpl.n	80011a6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	0792      	lsls	r2, r2, #30
 800118c:	d50b      	bpl.n	80011a6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800118e:	f06f 0202 	mvn.w	r2, #2
 8001192:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001194:	2201      	movs	r2, #1
 8001196:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	0799      	lsls	r1, r3, #30
 800119c:	d001      	beq.n	80011a2 <HAL_TIM_IRQHandler+0x26>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800119e:	f7ff fead 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011a2:	2300      	movs	r3, #0
 80011a4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	0752      	lsls	r2, r2, #29
 80011ac:	d510      	bpl.n	80011d0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	0750      	lsls	r0, r2, #29
 80011b2:	d50d      	bpl.n	80011d0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011b4:	f06f 0204 	mvn.w	r2, #4
 80011b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011ba:	2202      	movs	r2, #2
 80011bc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80011c4:	d002      	beq.n	80011cc <HAL_TIM_IRQHandler+0x50>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff fe98 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	0711      	lsls	r1, r2, #28
 80011d6:	d50f      	bpl.n	80011f8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	0712      	lsls	r2, r2, #28
 80011dc:	d50c      	bpl.n	80011f8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011de:	f06f 0208 	mvn.w	r2, #8
 80011e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011e4:	2204      	movs	r2, #4
 80011e6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	0798      	lsls	r0, r3, #30
 80011ec:	d002      	beq.n	80011f4 <HAL_TIM_IRQHandler+0x78>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fe84 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011f4:	2300      	movs	r3, #0
 80011f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	06d1      	lsls	r1, r2, #27
 80011fe:	d510      	bpl.n	8001222 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	06d2      	lsls	r2, r2, #27
 8001204:	d50d      	bpl.n	8001222 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001206:	f06f 0210 	mvn.w	r2, #16
 800120a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800120c:	2208      	movs	r2, #8
 800120e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001216:	d002      	beq.n	800121e <HAL_TIM_IRQHandler+0xa2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe6f 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800121e:	2300      	movs	r3, #0
 8001220:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	07d4      	lsls	r4, r2, #31
 8001228:	d522      	bpl.n	8001270 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	07d0      	lsls	r0, r2, #31
 800122e:	d51f      	bpl.n	8001270 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001230:	f06f 0201 	mvn.w	r2, #1
 8001234:	611a      	str	r2, [r3, #16]
//         
// RETURNS       :void
//   
  
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
   if(htim->Instance == TIM11){  
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_TIM_IRQHandler+0x12c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d119      	bne.n	8001270 <HAL_TIM_IRQHandler+0xf4>
     if(counterStart == 1){
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <HAL_TIM_IRQHandler+0x130>)
 800123e:	491c      	ldr	r1, [pc, #112]	; (80012b0 <HAL_TIM_IRQHandler+0x134>)
 8001240:	8812      	ldrh	r2, [r2, #0]
       ++oneSecondCount;
      }
     if (oneSecondCount == setTime){
 8001242:	481c      	ldr	r0, [pc, #112]	; (80012b4 <HAL_TIM_IRQHandler+0x138>)
     if(counterStart == 1){
 8001244:	b292      	uxth	r2, r2
 8001246:	2a01      	cmp	r2, #1
       ++oneSecondCount;
 8001248:	bf08      	it	eq
 800124a:	880a      	ldrheq	r2, [r1, #0]
     if (oneSecondCount == setTime){
 800124c:	6800      	ldr	r0, [r0, #0]
       ++oneSecondCount;
 800124e:	bf02      	ittt	eq
 8001250:	3201      	addeq	r2, #1
 8001252:	b292      	uxtheq	r2, r2
 8001254:	800a      	strheq	r2, [r1, #0]
     if (oneSecondCount == setTime){
 8001256:	880a      	ldrh	r2, [r1, #0]
 8001258:	b292      	uxth	r2, r2
 800125a:	4282      	cmp	r2, r0
 800125c:	d108      	bne.n	8001270 <HAL_TIM_IRQHandler+0xf4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_TIM_IRQHandler+0x13c>)
 8001260:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001264:	6190      	str	r0, [r2, #24]
 8001266:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800126a:	6190      	str	r0, [r2, #24]
      
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
      oneSecondCount =0;
 800126c:	2200      	movs	r2, #0
 800126e:	800a      	strh	r2, [r1, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	0611      	lsls	r1, r2, #24
 8001274:	d505      	bpl.n	8001282 <HAL_TIM_IRQHandler+0x106>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	0612      	lsls	r2, r2, #24
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800127a:	bf44      	itt	mi
 800127c:	f06f 0280 	mvnmi.w	r2, #128	; 0x80
 8001280:	611a      	strmi	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	0654      	lsls	r4, r2, #25
 8001286:	d505      	bpl.n	8001294 <HAL_TIM_IRQHandler+0x118>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	0650      	lsls	r0, r2, #25
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800128c:	bf44      	itt	mi
 800128e:	f06f 0240 	mvnmi.w	r2, #64	; 0x40
 8001292:	611a      	strmi	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	0691      	lsls	r1, r2, #26
 8001298:	d505      	bpl.n	80012a6 <HAL_TIM_IRQHandler+0x12a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	0692      	lsls	r2, r2, #26
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800129e:	bf44      	itt	mi
 80012a0:	f06f 0220 	mvnmi.w	r2, #32
 80012a4:	611a      	strmi	r2, [r3, #16]
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012a6:	bd10      	pop	{r4, pc}
 80012a8:	40014800 	.word	0x40014800
 80012ac:	20000a68 	.word	0x20000a68
 80012b0:	20000c84 	.word	0x20000c84
 80012b4:	20000c8c 	.word	0x20000c8c
 80012b8:	40020000 	.word	0x40020000

080012bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012bc:	4a24      	ldr	r2, [pc, #144]	; (8001350 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80012be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c0:	4290      	cmp	r0, r2
 80012c2:	d00e      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012c8:	d00b      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012ce:	4290      	cmp	r0, r2
 80012d0:	d007      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d6:	4290      	cmp	r0, r2
 80012d8:	d003      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012de:	4290      	cmp	r0, r2
 80012e0:	d115      	bne.n	800130e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012e2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012e8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <TIM_Base_SetConfig+0x94>)
 80012ec:	4290      	cmp	r0, r2
 80012ee:	d019      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 80012f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012f4:	d016      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 80012f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012fa:	4290      	cmp	r0, r2
 80012fc:	d012      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 80012fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001302:	4290      	cmp	r0, r2
 8001304:	d00e      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 8001306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800130a:	4290      	cmp	r0, r2
 800130c:	d00a      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 800130e:	4a11      	ldr	r2, [pc, #68]	; (8001354 <TIM_Base_SetConfig+0x98>)
 8001310:	4290      	cmp	r0, r2
 8001312:	d007      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 8001314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001318:	4290      	cmp	r0, r2
 800131a:	d003      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 800131c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001320:	4290      	cmp	r0, r2
 8001322:	d103      	bne.n	800132c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001324:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800132a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800132c:	694a      	ldr	r2, [r1, #20]
 800132e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001332:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001334:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001336:	688b      	ldr	r3, [r1, #8]
 8001338:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800133a:	680b      	ldr	r3, [r1, #0]
 800133c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <TIM_Base_SetConfig+0x94>)
 8001340:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001342:	bf04      	itt	eq
 8001344:	690b      	ldreq	r3, [r1, #16]
 8001346:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001348:	2301      	movs	r3, #1
 800134a:	6143      	str	r3, [r0, #20]
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40010000 	.word	0x40010000
 8001354:	40014000 	.word	0x40014000

08001358 <HAL_TIM_OC_Init>:
{
 8001358:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800135a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800135e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001364:	b90b      	cbnz	r3, 800136a <HAL_TIM_OC_Init+0x12>
    htim->Lock = HAL_UNLOCKED;
 8001366:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800136a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800136c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800136e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001372:	1d21      	adds	r1, r4, #4
 8001374:	f7ff ffa2 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001378:	2301      	movs	r3, #1
 800137a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 800137e:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001384:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001388:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800138c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001398:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800139c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80013a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80013a4:	bd10      	pop	{r4, pc}
	...

080013a8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013a8:	6a03      	ldr	r3, [r0, #32]
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013b0:	6a03      	ldr	r3, [r0, #32]
{
 80013b2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013b6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80013c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80013c2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80013c6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013c8:	4d0a      	ldr	r5, [pc, #40]	; (80013f4 <TIM_OC1_SetConfig+0x4c>)
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	d10b      	bne.n	80013e6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80013ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80013d0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80013d4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80013d6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80013da:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80013de:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80013e0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80013e4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013e8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80013ea:	684a      	ldr	r2, [r1, #4]
 80013ec:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013ee:	6203      	str	r3, [r0, #32]
}
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80013fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013fe:	2b01      	cmp	r3, #1
{
 8001400:	4605      	mov	r5, r0
 8001402:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8001404:	f000 8086 	beq.w	8001514 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8001408:	2001      	movs	r0, #1
  switch (Channel)
 800140a:	2a04      	cmp	r2, #4
  __HAL_LOCK(htim);
 800140c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8001410:	d017      	beq.n	8001442 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001412:	2a08      	cmp	r2, #8
 8001414:	d04a      	beq.n	80014ac <HAL_TIM_PWM_ConfigChannel+0xb4>
 8001416:	b982      	cbnz	r2, 800143a <HAL_TIM_PWM_ConfigChannel+0x42>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001418:	6828      	ldr	r0, [r5, #0]
 800141a:	f7ff ffc5 	bl	80013a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800141e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001420:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	f042 0208 	orr.w	r2, r2, #8
 8001428:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	f022 0204 	bic.w	r2, r2, #4
 8001430:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001436:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800143a:	2300      	movs	r3, #0
 800143c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8001440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001442:	682b      	ldr	r3, [r5, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001444:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	f022 0210 	bic.w	r2, r2, #16
 800144c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800144e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001450:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001452:	6999      	ldr	r1, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001454:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001458:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800145c:	68a6      	ldr	r6, [r4, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800145e:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001462:	ea42 1206 	orr.w	r2, r2, r6, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001466:	4e2c      	ldr	r6, [pc, #176]	; (8001518 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8001468:	42b3      	cmp	r3, r6
 800146a:	d10d      	bne.n	8001488 <HAL_TIM_PWM_ConfigChannel+0x90>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800146c:	68e6      	ldr	r6, [r4, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800146e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001472:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001476:	e9d4 6705 	ldrd	r6, r7, [r4, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800147a:	f420 6040 	bic.w	r0, r0, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800147e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8001480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001484:	ea40 0086 	orr.w	r0, r0, r6, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001488:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800148a:	6199      	str	r1, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800148c:	6861      	ldr	r1, [r4, #4]
 800148e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001490:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001492:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001494:	6921      	ldr	r1, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800149a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014aa:	e7c4      	b.n	8001436 <HAL_TIM_PWM_ConfigChannel+0x3e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014ac:	682b      	ldr	r3, [r5, #0]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014ae:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014b0:	6a1a      	ldr	r2, [r3, #32]
 80014b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80014b8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80014ba:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80014bc:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80014be:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014c2:	4331      	orrs	r1, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014c4:	68a6      	ldr	r6, [r4, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80014c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014ca:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014ce:	4e12      	ldr	r6, [pc, #72]	; (8001518 <HAL_TIM_PWM_ConfigChannel+0x120>)
 80014d0:	42b3      	cmp	r3, r6
 80014d2:	d10d      	bne.n	80014f0 <HAL_TIM_PWM_ConfigChannel+0xf8>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014d4:	68e6      	ldr	r6, [r4, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80014d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014da:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014de:	e9d4 6705 	ldrd	r6, r7, [r4, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80014e2:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014e6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80014e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014ec:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014f0:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014f2:	61d9      	str	r1, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80014f4:	6861      	ldr	r1, [r4, #4]
 80014f6:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014f8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014fa:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014fc:	6921      	ldr	r1, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	f022 0204 	bic.w	r2, r2, #4
 800150a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800150c:	69da      	ldr	r2, [r3, #28]
 800150e:	430a      	orrs	r2, r1
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	e791      	b.n	8001438 <HAL_TIM_PWM_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 8001514:	2002      	movs	r0, #2
 8001516:	e793      	b.n	8001440 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001518:	40010000 	.word	0x40010000

0800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800151c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001520:	2b01      	cmp	r3, #1
 8001522:	f04f 0302 	mov.w	r3, #2
 8001526:	d026      	beq.n	8001576 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001528:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800152c:	6803      	ldr	r3, [r0, #0]
 800152e:	6859      	ldr	r1, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001530:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001532:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001536:	6059      	str	r1, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001538:	4910      	ldr	r1, [pc, #64]	; (800157c <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x60>)
 800153a:	428b      	cmp	r3, r1
 800153c:	d012      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800153e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001542:	d00f      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001544:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8001548:	428b      	cmp	r3, r1
 800154a:	d00b      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800154c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001550:	428b      	cmp	r3, r1
 8001552:	d007      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001554:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001558:	428b      	cmp	r3, r1
 800155a:	d003      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800155c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001560:	428b      	cmp	r3, r1
 8001562:	d102      	bne.n	800156a <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800156a:	2301      	movs	r3, #1
 800156c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001570:	2300      	movs	r3, #0
 8001572:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001576:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000

08001580 <HAL_TIM_Base_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001580:	b513      	push	{r0, r1, r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001582:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001586:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001588:	f002 03ff 	and.w	r3, r2, #255	; 0xff
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800158c:	6800      	ldr	r0, [r0, #0]
 800158e:	b97a      	cbnz	r2, 80015b0 <HAL_TIM_Base_Init.constprop.0+0x30>
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_TIM_Base_Init.constprop.0+0x6c>)
    htim->Lock = HAL_UNLOCKED;
 8001592:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001596:	4290      	cmp	r0, r2
 8001598:	d10a      	bne.n	80015b0 <HAL_TIM_Base_Init.constprop.0+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_TIM_Base_Init.constprop.0+0x70>)
 800159e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	9b01      	ldr	r3, [sp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b6:	1d21      	adds	r1, r4, #4
 80015b8:	f7ff fe80 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80015c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80015cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80015d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80015e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80015e8:	b002      	add	sp, #8
 80015ea:	bd10      	pop	{r4, pc}
 80015ec:	40014800 	.word	0x40014800
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  * @param  SubPriority the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 80015fc:	b510      	push	{r4, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fe:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	2c04      	cmp	r4, #4
 8001606:	bf28      	it	cs
 8001608:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001610:	fa02 f204 	lsl.w	r2, r2, r4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001614:	bf8c      	ite	hi
 8001616:	3b03      	subhi	r3, #3
 8001618:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161a:	ea21 0102 	bic.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800161e:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	bf18      	it	ne
 8001622:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	bf08      	it	eq
 800162c:	4a06      	ldreq	r2, [pc, #24]	; (8001648 <HAL_NVIC_SetPriority.constprop.0+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001632:	bf18      	it	ne
 8001634:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 8001638:	b2db      	uxtb	r3, r3
 800163a:	bf14      	ite	ne
 800163c:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001644:	bd10      	pop	{r4, pc}
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x80>)
 800164e:	2202      	movs	r2, #2
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001650:	b9c8      	cbnz	r0, 8001686 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x3a>
 8001652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001656:	681b      	ldr	r3, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f000 	lsl.w	r0, r2, r0

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	ea22 0200 	bic.w	r2, r2, r0
 8001664:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	4310      	orrs	r0, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x84>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800166c:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800166e:	4293      	cmp	r3, r2
 8001670:	d115      	bne.n	800169e <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8001672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001680:	2a06      	cmp	r2, #6
 8001682:	d11e      	bne.n	80016c2 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x76>
}
 8001684:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001686:	2804      	cmp	r0, #4
 8001688:	d102      	bne.n	8001690 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x44>
 800168a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800168e:	e7e2      	b.n	8001656 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0xa>
 8001690:	2808      	cmp	r0, #8
 8001692:	bf0c      	ite	eq
 8001694:	f883 2040 	strbeq.w	r2, [r3, #64]	; 0x40
 8001698:	f883 2041 	strbne.w	r2, [r3, #65]	; 0x41
 800169c:	e7db      	b.n	8001656 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0xa>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800169e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a2:	d0ea      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x88>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d0e7      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d0e3      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d0df      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016ba:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80016be:	4293      	cmp	r3, r2
 80016c0:	d0db      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
    __HAL_TIM_ENABLE(htim);
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4770      	bx	lr
 80016cc:	20000a80 	.word	0x20000a80
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_InitTick.isra.0>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_InitTick.isra.0+0x44>)
 80016da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	3b01      	subs	r3, #1
 80016e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80016ea:	b510      	push	{r4, lr}
 80016ec:	4604      	mov	r4, r0
 80016ee:	d214      	bcs.n	800171a <HAL_InitTick.isra.0+0x42>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_InitTick.isra.0+0x48>)
 80016fa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fe:	2300      	movs	r3, #0
 8001700:	6193      	str	r3, [r2, #24]
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	280f      	cmp	r0, #15
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001704:	f04f 0307 	mov.w	r3, #7
 8001708:	6113      	str	r3, [r2, #16]
 800170a:	d806      	bhi.n	800171a <HAL_InitTick.isra.0+0x42>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	4601      	mov	r1, r0
 800170e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001712:	f7ff ff6f 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_InitTick.isra.0+0x4c>)
 8001718:	601c      	str	r4, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800171a:	bd10      	pop	{r4, pc}
 800171c:	20000004 	.word	0x20000004
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	20000014 	.word	0x20000014

08001728 <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 8001728:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	4c2e      	ldr	r4, [pc, #184]	; (80017e8 <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 8001730:	d30a      	bcc.n	8001748 <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001732:	f640 0334 	movw	r3, #2100	; 0x834
 8001736:	fb03 4300 	mla	r3, r3, r0, r4
 800173a:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800173e:	3201      	adds	r2, #1
 8001740:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001748:	f640 0334 	movw	r3, #2100	; 0x834
 800174c:	fb03 4300 	mla	r3, r3, r0, r4
 8001750:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001754:	fa12 f585 	uxtah	r5, r2, r5
 8001758:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800175c:	d220      	bcs.n	80017a0 <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 800175e:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001760:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001764:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001766:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 800176a:	42b2      	cmp	r2, r6
 800176c:	d005      	beq.n	800177a <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800176e:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001772:	b2ad      	uxth	r5, r5
 8001774:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001778:	d320      	bcc.n	80017bc <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 800177a:	f640 0334 	movw	r3, #2100	; 0x834
 800177e:	fb03 4400 	mla	r4, r3, r0, r4
 8001782:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001786:	4433      	add	r3, r6
 8001788:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <TerminalOutputBufferWrite.isra.0+0xc4>)
 800178e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001792:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001794:	68d3      	ldr	r3, [r2, #12]
 8001796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800179c:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 80017a0:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 80017a4:	3501      	adds	r5, #1
 80017a6:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80017aa:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80017ae:	fa12 f585 	uxtah	r5, r2, r5
 80017b2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017b6:	d3d2      	bcc.n	800175e <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 80017b8:	bf00      	nop
 80017ba:	e7f6      	b.n	80017aa <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 80017bc:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 80017c0:	f811 c006 	ldrb.w	ip, [r1, r6]
 80017c4:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 80017c8:	3501      	adds	r5, #1
 80017ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80017ce:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 80017d2:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 80017d6:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 80017da:	3501      	adds	r5, #1
 80017dc:	b2ad      	uxth	r5, r5
 80017de:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 80017e2:	3601      	adds	r6, #1
 80017e4:	e7c1      	b.n	800176a <TerminalOutputBufferWrite.isra.0+0x42>
 80017e6:	bf00      	nop
 80017e8:	20000210 	.word	0x20000210
 80017ec:	08012520 	.word	0x08012520

080017f0 <CmdEncoder2>:
{
 80017f0:	b508      	push	{r3, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80017f2:	b948      	cbnz	r0, 8001808 <CmdEncoder2+0x18>
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <CmdEncoder2+0x1c>)
     printf("POS: %i º \n", position);
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <CmdEncoder2+0x20>)
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 80017f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017fa:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 80017fe:	fa03 f181 	sxtah	r1, r3, r1
     printf("POS: %i º \n", position);
 8001802:	1049      	asrs	r1, r1, #1
 8001804:	f004 fc7e 	bl	8006104 <iprintf>
 }    
 8001808:	2000      	movs	r0, #0
 800180a:	bd08      	pop	{r3, pc}
 800180c:	40000400 	.word	0x40000400
 8001810:	08006ace 	.word	0x08006ace

08001814 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001816:	4604      	mov	r4, r0
 8001818:	b938      	cbnz	r0, 800182a <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 800181a:	480b      	ldr	r0, [pc, #44]	; (8001848 <CmdTasks+0x34>)
  p = _tasktable_start;
 800181c:	4d0b      	ldr	r5, [pc, #44]	; (800184c <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 800181e:	4e0c      	ldr	r6, [pc, #48]	; (8001850 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001820:	4f0c      	ldr	r7, [pc, #48]	; (8001854 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001822:	f004 fd0b 	bl	800623c <puts>
  while(p != _tasktable_end) {
 8001826:	42b5      	cmp	r5, r6
 8001828:	d102      	bne.n	8001830 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 800182a:	2000      	movs	r0, #0
 800182c:	b003      	add	sp, #12
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001830:	696b      	ldr	r3, [r5, #20]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4621      	mov	r1, r4
 8001836:	692b      	ldr	r3, [r5, #16]
 8001838:	f855 2b18 	ldr.w	r2, [r5], #24
 800183c:	4638      	mov	r0, r7
 800183e:	f004 fc61 	bl	8006104 <iprintf>
    i++;
 8001842:	3401      	adds	r4, #1
 8001844:	e7ef      	b.n	8001826 <CmdTasks+0x12>
 8001846:	bf00      	nop
 8001848:	08006adb 	.word	0x08006adb
 800184c:	08012c78 	.word	0x08012c78
 8001850:	08012c90 	.word	0x08012c90
 8001854:	08006af4 	.word	0x08006af4

08001858 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 800185c:	b1f9      	cbz	r1, 800189e <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800185e:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001860:	888a      	ldrh	r2, [r1, #4]
 8001862:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001864:	2d10      	cmp	r5, #16
 8001866:	d005      	beq.n	8001874 <DecodeReadRegister+0x1c>
 8001868:	2d20      	cmp	r5, #32
 800186a:	d005      	beq.n	8001878 <DecodeReadRegister+0x20>
 800186c:	2d08      	cmp	r5, #8
 800186e:	d105      	bne.n	800187c <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 8001870:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001872:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001874:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001876:	e7fc      	b.n	8001872 <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 8001878:	58d0      	ldr	r0, [r2, r3]
    break;
 800187a:	e7fa      	b.n	8001872 <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 800187c:	6808      	ldr	r0, [r1, #0]
 800187e:	f7ff fb77 	bl	8000f70 <Uncompress>
 8001882:	4629      	mov	r1, r5
 8001884:	4602      	mov	r2, r0
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <DecodeReadRegister+0x4c>)
 8001888:	f004 fc3c 	bl	8006104 <iprintf>
    printf(" in periphral %s!\n",
 800188c:	6820      	ldr	r0, [r4, #0]
 800188e:	f7ff fb6f 	bl	8000f70 <Uncompress>
 8001892:	4601      	mov	r1, r0
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <DecodeReadRegister+0x50>)
 8001896:	f004 fc35 	bl	8006104 <iprintf>
    return 0;
 800189a:	2000      	movs	r0, #0
 800189c:	e7e9      	b.n	8001872 <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 800189e:	4608      	mov	r0, r1
 80018a0:	e7e7      	b.n	8001872 <DecodeReadRegister+0x1a>
 80018a2:	bf00      	nop
 80018a4:	08006b0c 	.word	0x08006b0c
 80018a8:	08006b2e 	.word	0x08006b2e

080018ac <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 80018ac:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018ae:	b920      	cbnz	r0, 80018ba <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <CmdVersion+0x14>)
 80018b2:	4904      	ldr	r1, [pc, #16]	; (80018c4 <CmdVersion+0x18>)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <CmdVersion+0x1c>)
 80018b6:	f004 fc25 	bl	8006104 <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 80018ba:	2000      	movs	r0, #0
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop
 80018c0:	08012751 	.word	0x08012751
 80018c4:	08012738 	.word	0x08012738
 80018c8:	08006b41 	.word	0x08006b41

080018cc <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 80018d0:	b149      	cbz	r1, 80018e6 <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80018d2:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80018d4:	8888      	ldrh	r0, [r1, #4]
 80018d6:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 80018d8:	2d10      	cmp	r5, #16
 80018da:	d005      	beq.n	80018e8 <DecodeWriteRegister.isra.0+0x1c>
 80018dc:	2d20      	cmp	r5, #32
 80018de:	d005      	beq.n	80018ec <DecodeWriteRegister.isra.0+0x20>
 80018e0:	2d08      	cmp	r5, #8
 80018e2:	d105      	bne.n	80018f0 <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 80018e4:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 80018e8:	52c2      	strh	r2, [r0, r3]
    break;  
 80018ea:	e7fc      	b.n	80018e6 <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 80018ec:	50c2      	str	r2, [r0, r3]
    break;
 80018ee:	e7fa      	b.n	80018e6 <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 80018f0:	6808      	ldr	r0, [r1, #0]
 80018f2:	f7ff fb3d 	bl	8000f70 <Uncompress>
 80018f6:	4629      	mov	r1, r5
 80018f8:	4602      	mov	r2, r0
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <DecodeWriteRegister.isra.0+0x48>)
 80018fc:	f004 fc02 	bl	8006104 <iprintf>
    printf(" in periphral %s!\n",
 8001900:	6820      	ldr	r0, [r4, #0]
 8001902:	f7ff fb35 	bl	8000f70 <Uncompress>
}
 8001906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 800190a:	4601      	mov	r1, r0
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DecodeWriteRegister.isra.0+0x4c>)
 800190e:	f004 bbf9 	b.w	8006104 <iprintf>
 8001912:	bf00      	nop
 8001914:	08006b0c 	.word	0x08006b0c
 8001918:	08006b2e 	.word	0x08006b2e

0800191c <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800191c:	2801      	cmp	r0, #1
{
 800191e:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001920:	d004      	beq.n	800192c <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8001922:	2802      	cmp	r0, #2
 8001924:	d104      	bne.n	8001930 <CmdTest+0x14>
    printf("testasm\n\n"
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <CmdTest+0x24>)
 8001928:	f004 fc88 	bl	800623c <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 800192c:	2000      	movs	r0, #0
 800192e:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8001930:	204d      	movs	r0, #77	; 0x4d
 8001932:	f7fe fc55 	bl	80001e0 <mytest>
 8001936:	4601      	mov	r1, r0
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <CmdTest+0x28>)
 800193a:	f004 fbe3 	bl	8006104 <iprintf>
  return CmdReturnOk;
 800193e:	e7f5      	b.n	800192c <CmdTest+0x10>
 8001940:	08006b51 	.word	0x08006b51
 8001944:	08006b8a 	.word	0x08006b8a

08001948 <CmdDC>:
{
 8001948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800194c:	4604      	mov	r4, r0
{
 800194e:	b092      	sub	sp, #72	; 0x48
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001950:	2800      	cmp	r0, #0
 8001952:	f040 8125 	bne.w	8001ba0 <CmdDC+0x258>
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001956:	4b9d      	ldr	r3, [pc, #628]	; (8001bcc <CmdDC+0x284>)
 8001958:	9003      	str	r0, [sp, #12]
 800195a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  htim11.Instance = TIM11;
 800195c:	4d9c      	ldr	r5, [pc, #624]	; (8001bd0 <CmdDC+0x288>)
  __HAL_RCC_TIM11_CLK_ENABLE();
 800195e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
 8001964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001966:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800196a:	9203      	str	r2, [sp, #12]
 800196c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	9002      	str	r0, [sp, #8]
 8001970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800197e:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001980:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001982:	201a      	movs	r0, #26
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001984:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001986:	f7ff fe35 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <CmdDC+0x28c>)
 800198c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001990:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	4621      	mov	r1, r4
 8001994:	221c      	movs	r2, #28
 8001996:	a80b      	add	r0, sp, #44	; 0x2c
 8001998:	f001 fd66 	bl	8003468 <memset>
  htim11.Init.Prescaler = 49999;     // interrupt time period of 1000 msec
 800199c:	488e      	ldr	r0, [pc, #568]	; (8001bd8 <CmdDC+0x290>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	60ac      	str	r4, [r5, #8]
  htim11.Init.Prescaler = 49999;     // interrupt time period of 1000 msec
 80019a0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80019a4:	e9c5 0300 	strd	r0, r3, [r5]
  htim11.Init.Period = 1999;   // interrupt time period of 1000 msec
 80019a8:	f240 73cf 	movw	r3, #1999	; 0x7cf
  rc = HAL_TIM_Base_Init(&htim11) != HAL_OK;
 80019ac:	4628      	mov	r0, r5
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	61ac      	str	r4, [r5, #24]
  rc = HAL_TIM_Base_Init(&htim11) != HAL_OK;
 80019b4:	f7ff fde4 	bl	8001580 <HAL_TIM_Base_Init.constprop.0>
  if(rc != HAL_OK) {
 80019b8:	b110      	cbz	r0, 80019c0 <CmdDC+0x78>
    printf("TIM 11 initialization failed \n");
 80019ba:	4888      	ldr	r0, [pc, #544]	; (8001bdc <CmdDC+0x294>)
 80019bc:	f004 fc3e 	bl	800623c <puts>
  rc = HAL_TIM_OC_Init(&htim11) != HAL_OK;
 80019c0:	4883      	ldr	r0, [pc, #524]	; (8001bd0 <CmdDC+0x288>)
 80019c2:	f7ff fcc9 	bl	8001358 <HAL_TIM_OC_Init>
  if(rc != HAL_OK) {
 80019c6:	b110      	cbz	r0, 80019ce <CmdDC+0x86>
    printf("TIM 11 initialization failed \n");
 80019c8:	4884      	ldr	r0, [pc, #528]	; (8001bdc <CmdDC+0x294>)
 80019ca:	f004 fc37 	bl	800623c <puts>
  __HAL_LOCK(htim);
 80019ce:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019d2:	2400      	movs	r4, #0
 80019d4:	2b01      	cmp	r3, #1
  sConfigOC.Pulse = 0;
 80019d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019da:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80019de:	f040 80e3 	bne.w	8001ba8 <CmdDC+0x260>
    printf("TIM 11 channel configuration failed \n");
 80019e2:	487f      	ldr	r0, [pc, #508]	; (8001be0 <CmdDC+0x298>)
 80019e4:	f004 fc2a 	bl	800623c <puts>
  htim1.Instance = TIM1;
 80019e8:	4c7e      	ldr	r4, [pc, #504]	; (8001be4 <CmdDC+0x29c>)
  htim1.Init.Prescaler = 49;
 80019ea:	497f      	ldr	r1, [pc, #508]	; (8001be8 <CmdDC+0x2a0>)
 80019ec:	2231      	movs	r2, #49	; 0x31
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 49;
 80019f0:	e9c4 1200 	strd	r1, r2, [r4]
  rc= HAL_TIM_Base_Init(&htim1);
 80019f4:	4620      	mov	r0, r4
  htim1.Init.Period = 199;
 80019f6:	22c7      	movs	r2, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	e9c4 2303 	strd	r2, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	e9c4 3305 	strd	r3, r3, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	60a3      	str	r3, [r4, #8]
  rc= HAL_TIM_Base_Init(&htim1);
 8001a06:	f7ff fdbb 	bl	8001580 <HAL_TIM_Base_Init.constprop.0>
   if(rc!= HAL_OK)
 8001a0a:	b110      	cbz	r0, 8001a12 <CmdDC+0xca>
    printf("Error");
 8001a0c:	4877      	ldr	r0, [pc, #476]	; (8001bec <CmdDC+0x2a4>)
 8001a0e:	f004 fb79 	bl	8006104 <iprintf>
  __HAL_LOCK(htim);
 8001a12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f000 80d0 	beq.w	8001bbc <CmdDC+0x274>
  tmpsmcr = htim->Instance->SMCR;
 8001a1c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a24:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a2e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a36:	2300      	movs	r3, #0
 8001a38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  rc = HAL_TIM_PWM_Init(&htim1) != HAL_OK;
 8001a3c:	4869      	ldr	r0, [pc, #420]	; (8001be4 <CmdDC+0x29c>)
 8001a3e:	f7ff fc8b 	bl	8001358 <HAL_TIM_OC_Init>
  if(rc!= HAL_OK)
 8001a42:	b110      	cbz	r0, 8001a4a <CmdDC+0x102>
    printf("Error");
 8001a44:	4869      	ldr	r0, [pc, #420]	; (8001bec <CmdDC+0x2a4>)
 8001a46:	f004 fb5d 	bl	8006104 <iprintf>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
  rc = HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8001a4c:	4865      	ldr	r0, [pc, #404]	; (8001be4 <CmdDC+0x29c>)
 8001a4e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	e9cd 3304 	strd	r3, r3, [sp, #16]
  rc = HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8001a54:	f7ff fd62 	bl	800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
  if(rc!= HAL_OK)
 8001a58:	b110      	cbz	r0, 8001a60 <CmdDC+0x118>
    printf("Error");
 8001a5a:	4864      	ldr	r0, [pc, #400]	; (8001bec <CmdDC+0x2a4>)
 8001a5c:	f004 fb52 	bl	8006104 <iprintf>
  sConfigOC.Pulse = 0;
 8001a60:	2200      	movs	r2, #0
 8001a62:	2360      	movs	r3, #96	; 0x60
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a64:	485f      	ldr	r0, [pc, #380]	; (8001be4 <CmdDC+0x29c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a66:	9211      	str	r2, [sp, #68]	; 0x44
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a68:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 0;
 8001a6a:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6e:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a72:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a76:	f7ff fcbf 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rc!= HAL_OK)
 8001a7a:	b110      	cbz	r0, 8001a82 <CmdDC+0x13a>
    printf("Error");
 8001a7c:	485b      	ldr	r0, [pc, #364]	; (8001bec <CmdDC+0x2a4>)
 8001a7e:	f004 fb41 	bl	8006104 <iprintf>
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8001a82:	4858      	ldr	r0, [pc, #352]	; (8001be4 <CmdDC+0x29c>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	a90b      	add	r1, sp, #44	; 0x2c
 8001a88:	f7ff fcb6 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rc!= HAL_OK)
 8001a8c:	b110      	cbz	r0, 8001a94 <CmdDC+0x14c>
    printf("Error");
 8001a8e:	4857      	ldr	r0, [pc, #348]	; (8001bec <CmdDC+0x2a4>)
 8001a90:	f004 fb38 	bl	8006104 <iprintf>
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001a94:	4853      	ldr	r0, [pc, #332]	; (8001be4 <CmdDC+0x29c>)
 8001a96:	2208      	movs	r2, #8
 8001a98:	a90b      	add	r1, sp, #44	; 0x2c
 8001a9a:	f7ff fcad 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rc!= HAL_OK)
 8001a9e:	b110      	cbz	r0, 8001aa6 <CmdDC+0x15e>
    printf("Error");
 8001aa0:	4852      	ldr	r0, [pc, #328]	; (8001bec <CmdDC+0x2a4>)
 8001aa2:	f004 fb2f 	bl	8006104 <iprintf>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001aa6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f000 808a 	beq.w	8001bc4 <CmdDC+0x27c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <CmdDC+0x284>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	484b      	ldr	r0, [pc, #300]	; (8001bf0 <CmdDC+0x2a8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2600      	movs	r6, #0
 8001ac4:	9601      	str	r6, [sp, #4]
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	f002 0201 	and.w	r2, r2, #1
 8001ad4:	9201      	str	r2, [sp, #4]
 8001ad6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	9600      	str	r6, [sp, #0]
 8001ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aea:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af0:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001af6:	f04f 0802 	mov.w	r8, #2
 8001afa:	e9cd 3806 	strd	r3, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 8001afe:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f7ff fa73 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001b06:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f7ff fa6c 	bl	8000fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	e9cd 7706 	strd	r7, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f7ff fa64 	bl	8000fec <HAL_GPIO_Init>
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001b28:	42bb      	cmp	r3, r7
 8001b2a:	d124      	bne.n	8001b76 <CmdDC+0x22e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b2c:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2e:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	433a      	orrs	r2, r7
 8001b36:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <CmdDC+0x2a0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d012      	beq.n	8001b64 <CmdDC+0x21c>
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	d00f      	beq.n	8001b64 <CmdDC+0x21c>
 8001b44:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00b      	beq.n	8001b64 <CmdDC+0x21c>
 8001b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <CmdDC+0x21c>
 8001b54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <CmdDC+0x21c>
 8001b5c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d104      	bne.n	8001b6e <CmdDC+0x226>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6a:	2a06      	cmp	r2, #6
 8001b6c:	d003      	beq.n	8001b76 <CmdDC+0x22e>
    __HAL_TIM_ENABLE(htim);
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b76:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <CmdDC+0x23c>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fd64 	bl	800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
 8001b84:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d102      	bne.n	8001b92 <CmdDC+0x24a>
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	f7ff fd5d 	bl	800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
 8001b92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <CmdDC+0x258>
 8001b9a:	2008      	movs	r0, #8
 8001b9c:	f7ff fd56 	bl	800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
}
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	b012      	add	sp, #72	; 0x48
 8001ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(htim);
 8001ba8:	2301      	movs	r3, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001baa:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 8001bac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bb0:	a90b      	add	r1, sp, #44	; 0x2c
 8001bb2:	f7ff fbf9 	bl	80013a8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001bb6:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if(rc != HAL_OK) {
 8001bba:	e715      	b.n	80019e8 <CmdDC+0xa0>
    printf("Error");
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <CmdDC+0x2a4>)
 8001bbe:	f004 faa1 	bl	8006104 <iprintf>
 8001bc2:	e73b      	b.n	8001a3c <CmdDC+0xf4>
    printf("Error");
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <CmdDC+0x2a4>)
 8001bc6:	f004 fa9d 	bl	8006104 <iprintf>
 8001bca:	e778      	b.n	8001abe <CmdDC+0x176>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	20000ac8 	.word	0x20000ac8
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	40014800 	.word	0x40014800
 8001bdc:	08006b98 	.word	0x08006b98
 8001be0:	08006bb6 	.word	0x08006bb6
 8001be4:	20000a80 	.word	0x20000a80
 8001be8:	40010000 	.word	0x40010000
 8001bec:	08006bdb 	.word	0x08006bdb
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <EncoderInit>:
{
 8001bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bf8:	4605      	mov	r5, r0
{
 8001bfa:	b092      	sub	sp, #72	; 0x48
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	f040 814e 	bne.w	8001e9e <EncoderInit+0x2aa>
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c02:	4ba9      	ldr	r3, [pc, #676]	; (8001ea8 <EncoderInit+0x2b4>)
 8001c04:	9003      	str	r0, [sp, #12]
 8001c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  htim2.Instance = TIM1;
 8001c08:	4ca8      	ldr	r4, [pc, #672]	; (8001eac <EncoderInit+0x2b8>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c16:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c18:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c1a:	201d      	movs	r0, #29
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c1c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c1e:	f7ff fce9 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
 8001c22:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <EncoderInit+0x2bc>)
 8001c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c28:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	221c      	movs	r2, #28
 8001c2e:	a80b      	add	r0, sp, #44	; 0x2c
 8001c30:	f001 fc1a 	bl	8003468 <memset>
  htim2.Init.Prescaler = 49;
 8001c34:	4a9f      	ldr	r2, [pc, #636]	; (8001eb4 <EncoderInit+0x2c0>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	60a5      	str	r5, [r4, #8]
  htim2.Init.Prescaler = 49;
 8001c38:	2331      	movs	r3, #49	; 0x31
 8001c3a:	e9c4 2300 	strd	r2, r3, [r4]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8001c3e:	4620      	mov	r0, r4
  htim2.Init.Period = 199;
 8001c40:	23c7      	movs	r3, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	e9c4 5505 	strd	r5, r5, [r4, #20]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8001c4e:	f7ff fc97 	bl	8001580 <HAL_TIM_Base_Init.constprop.0>
   if(rcOne!= HAL_OK)
 8001c52:	b110      	cbz	r0, 8001c5a <EncoderInit+0x66>
    printf("Error");
 8001c54:	4898      	ldr	r0, [pc, #608]	; (8001eb8 <EncoderInit+0x2c4>)
 8001c56:	f004 fa55 	bl	8006104 <iprintf>
  __HAL_LOCK(htim);
 8001c5a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 8098 	bne.w	8001d94 <EncoderInit+0x1a0>
    printf("Error");
 8001c64:	4894      	ldr	r0, [pc, #592]	; (8001eb8 <EncoderInit+0x2c4>)
 8001c66:	f004 fa4d 	bl	8006104 <iprintf>
  rcOne = HAL_TIM_PWM_Init(&htim2) != HAL_OK;
 8001c6a:	4890      	ldr	r0, [pc, #576]	; (8001eac <EncoderInit+0x2b8>)
 8001c6c:	f7ff fb74 	bl	8001358 <HAL_TIM_OC_Init>
  if(rcOne != HAL_OK)
 8001c70:	b110      	cbz	r0, 8001c78 <EncoderInit+0x84>
    printf("Error");
 8001c72:	4891      	ldr	r0, [pc, #580]	; (8001eb8 <EncoderInit+0x2c4>)
 8001c74:	f004 fa46 	bl	8006104 <iprintf>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001c7a:	488c      	ldr	r0, [pc, #560]	; (8001eac <EncoderInit+0x2b8>)
 8001c7c:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001c82:	f7ff fc4b 	bl	800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
  if(rcOne!= HAL_OK)
 8001c86:	b110      	cbz	r0, 8001c8e <EncoderInit+0x9a>
    printf("Error");
 8001c88:	488b      	ldr	r0, [pc, #556]	; (8001eb8 <EncoderInit+0x2c4>)
 8001c8a:	f004 fa3b 	bl	8006104 <iprintf>
  sConfigOC.Pulse = 0;
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2360      	movs	r3, #96	; 0x60
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001c92:	4886      	ldr	r0, [pc, #536]	; (8001eac <EncoderInit+0x2b8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c94:	9211      	str	r2, [sp, #68]	; 0x44
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001c96:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 0;
 8001c98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c9c:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ca0:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001ca4:	f7ff fba8 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 8001ca8:	b110      	cbz	r0, 8001cb0 <EncoderInit+0xbc>
    printf("Error");
 8001caa:	4883      	ldr	r0, [pc, #524]	; (8001eb8 <EncoderInit+0x2c4>)
 8001cac:	f004 fa2a 	bl	8006104 <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8001cb0:	487e      	ldr	r0, [pc, #504]	; (8001eac <EncoderInit+0x2b8>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	a90b      	add	r1, sp, #44	; 0x2c
 8001cb6:	f7ff fb9f 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 8001cba:	b110      	cbz	r0, 8001cc2 <EncoderInit+0xce>
    printf("Error");
 8001cbc:	487e      	ldr	r0, [pc, #504]	; (8001eb8 <EncoderInit+0x2c4>)
 8001cbe:	f004 fa21 	bl	8006104 <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8001cc2:	487a      	ldr	r0, [pc, #488]	; (8001eac <EncoderInit+0x2b8>)
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	a90b      	add	r1, sp, #44	; 0x2c
 8001cc8:	f7ff fb96 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 8001ccc:	b110      	cbz	r0, 8001cd4 <EncoderInit+0xe0>
    printf("Error");
 8001cce:	487a      	ldr	r0, [pc, #488]	; (8001eb8 <EncoderInit+0x2c4>)
 8001cd0:	f004 fa18 	bl	8006104 <iprintf>
  __HAL_LOCK(htim);
 8001cd4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d06c      	beq.n	8001db6 <EncoderInit+0x1c2>
  htim->Instance->BDTR = tmpbdtr;
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   __HAL_RCC_TIM3_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <EncoderInit+0x2b4>)
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	6c11      	ldr	r1, [r2, #64]	; 0x40
  htim3.Instance = TIM3;
 8001cf2:	4c72      	ldr	r4, [pc, #456]	; (8001ebc <EncoderInit+0x2c8>)
   __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf4:	f041 0102 	orr.w	r1, r1, #2
 8001cf8:	6411      	str	r1, [r2, #64]	; 0x40
 8001cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	60a3      	str	r3, [r4, #8]
   __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfe:	f002 0202 	and.w	r2, r2, #2
 8001d02:	9202      	str	r2, [sp, #8]
 8001d04:	9a02      	ldr	r2, [sp, #8]
  htim3.Instance = TIM3;
 8001d06:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <EncoderInit+0x2cc>)
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	61a3      	str	r3, [r4, #24]
  htim3.Init.Period = 65535;
 8001d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	e9c4 1303 	strd	r1, r3, [r4, #12]
  htim3.Init.Prescaler = 0;
 8001d12:	e9c4 2300 	strd	r2, r3, [r4]
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d16:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d1a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001d1e:	b90b      	cbnz	r3, 8001d24 <EncoderInit+0x130>
    htim->Lock = HAL_UNLOCKED;
 8001d20:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	2702      	movs	r7, #2
 8001d26:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d2a:	6893      	ldr	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <EncoderInit+0x2d0>)
 8001d2e:	4864      	ldr	r0, [pc, #400]	; (8001ec0 <EncoderInit+0x2cc>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d34:	f023 0307 	bic.w	r3, r3, #7
 8001d38:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3a:	f7ff fabf 	bl	80012bc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	6890      	ldr	r0, [r2, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001d42:	6993      	ldr	r3, [r2, #24]
  tmpccer = htim->Instance->CCER;
 8001d44:	6a11      	ldr	r1, [r2, #32]
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	041b      	lsls	r3, r3, #16
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001d4e:	f021 01aa 	bic.w	r1, r1, #170	; 0xaa
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d52:	2601      	movs	r6, #1
  tmpsmcr |= sConfig->EncoderMode;
 8001d54:	f040 0003 	orr.w	r0, r0, #3
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d58:	f043 0301 	orr.w	r3, r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001d5c:	f041 0122 	orr.w	r1, r1, #34	; 0x22
  htim->Instance->SMCR = tmpsmcr;
 8001d60:	6090      	str	r0, [r2, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001d62:	6193      	str	r3, [r2, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d64:	4855      	ldr	r0, [pc, #340]	; (8001ebc <EncoderInit+0x2c8>)
  htim->Instance->CCER = tmpccer;
 8001d66:	6211      	str	r1, [r2, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6a:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6e:	a904      	add	r1, sp, #16
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d70:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	e9cd 3304 	strd	r3, r3, [sp, #16]
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d88:	f7ff fbc8 	bl	800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	b1b0      	cbz	r0, 8001dbe <EncoderInit+0x1ca>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <EncoderInit+0x19e>
  tmpsmcr = htim->Instance->SMCR;
 8001d94:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d9c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001da6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001dae:	2300      	movs	r3, #0
 8001db0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if(rcOne!= HAL_OK)
 8001db4:	e759      	b.n	8001c6a <EncoderInit+0x76>
    printf("Error");
 8001db6:	4840      	ldr	r0, [pc, #256]	; (8001eb8 <EncoderInit+0x2c4>)
 8001db8:	f004 f9a4 	bl	8006104 <iprintf>
 8001dbc:	e795      	b.n	8001cea <EncoderInit+0xf6>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <EncoderInit+0x2b4>)
 8001dc0:	9001      	str	r0, [sp, #4]
 8001dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8001ec8 <EncoderInit+0x2d4>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd0:	960a      	str	r6, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 8001dda:	e9cd 0008 	strd	r0, r0, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001de2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	e9cd 3706 	strd	r3, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f7ff f8ff 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001dee:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	e9cd 5508 	strd	r5, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f7ff f8f8 	bl	8000fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f508 6080 	add.w	r0, r8, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	e9cd 6606 	strd	r6, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	e9cd 5508 	strd	r5, r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f7ff f8f0 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;  // encoder pin configuration
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8001e0e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e18:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8001e1a:	f7ff f8e7 	bl	8000fec <HAL_GPIO_Init>
 8001e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e22:	f8c8 3018 	str.w	r3, [r8, #24]
 8001e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2a:	f8c8 3018 	str.w	r3, [r8, #24]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001e2e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001e32:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001e36:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e3e:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001e40:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001e42:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001e44:	b2db      	uxtb	r3, r3
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e46:	d12a      	bne.n	8001e9e <EncoderInit+0x2aa>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e48:	2901      	cmp	r1, #1
 8001e4a:	d128      	bne.n	8001e9e <EncoderInit+0x2aa>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e4c:	2a01      	cmp	r2, #1
 8001e4e:	d126      	bne.n	8001e9e <EncoderInit+0x2aa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d124      	bne.n	8001e9e <EncoderInit+0x2aa>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001e54:	6823      	ldr	r3, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e56:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5a:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e62:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e6e:	6a1a      	ldr	r2, [r3, #32]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	f042 0210 	orr.w	r2, r2, #16
 8001e84:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	f042 0202 	orr.w	r2, r2, #2
 8001e8c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	b012      	add	sp, #72	; 0x48
 8001ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	20000b10 	.word	0x20000b10
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	08006bdb 	.word	0x08006bdb
 8001ebc:	20000b58 	.word	0x20000b58
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	20000b5c 	.word	0x20000b5c
 8001ec8:	40020000 	.word	0x40020000

08001ecc <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	4616      	mov	r6, r2
 8001ed6:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001ed8:	4605      	mov	r5, r0
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d046      	beq.n	8001f6c <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ede:	6800      	ldr	r0, [r0, #0]
 8001ee0:	f7ff f846 	bl	8000f70 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001ee4:	88aa      	ldrh	r2, [r5, #4]
 8001ee6:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	79ab      	ldrb	r3, [r5, #6]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	4601      	mov	r1, r0
 8001ef0:	4633      	mov	r3, r6
 8001ef2:	4820      	ldr	r0, [pc, #128]	; (8001f74 <DecodeRegister+0xa8>)
 8001ef4:	4632      	mov	r2, r6
 8001ef6:	f004 f905 	bl	8006104 <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001efa:	68ac      	ldr	r4, [r5, #8]
 8001efc:	b3a4      	cbz	r4, 8001f68 <DecodeRegister+0x9c>
 8001efe:	b3af      	cbz	r7, 8001f6c <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f00:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001f78 <DecodeRegister+0xac>
 8001f04:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001f7c <DecodeRegister+0xb0>
 8001f08:	f8df a074 	ldr.w	sl, [pc, #116]	; 8001f80 <DecodeRegister+0xb4>
 8001f0c:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001f0e:	2700      	movs	r7, #0
 8001f10:	89ab      	ldrh	r3, [r5, #12]
 8001f12:	429f      	cmp	r7, r3
 8001f14:	d305      	bcc.n	8001f22 <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001f16:	200a      	movs	r0, #10
  }

}
 8001f18:	b006      	add	sp, #24
 8001f1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 8001f1e:	f004 b909 	b.w	8006134 <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001f22:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f26:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	fa26 f202 	lsr.w	r2, r6, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f3c:	f7ff f818 	bl	8000f70 <Uncompress>
	 (unsigned int)(f->width),
 8001f40:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f44:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 8001f48:	9b05      	ldr	r3, [sp, #20]
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	bf8c      	ite	hi
 8001f52:	4640      	movhi	r0, r8
 8001f54:	4648      	movls	r0, r9
 8001f56:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4650      	mov	r0, sl
 8001f5e:	f004 f8d1 	bl	8006104 <iprintf>
    for(i=0; i<r->numFields; i++) {
 8001f62:	3701      	adds	r7, #1
 8001f64:	3408      	adds	r4, #8
 8001f66:	e7d3      	b.n	8001f10 <DecodeRegister+0x44>
  if(decodeFields) {
 8001f68:	2f00      	cmp	r7, #0
 8001f6a:	d1d4      	bne.n	8001f16 <DecodeRegister+0x4a>
}
 8001f6c:	b006      	add	sp, #24
 8001f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f72:	bf00      	nop
 8001f74:	08006bed 	.word	0x08006bed
 8001f78:	08006be1 	.word	0x08006be1
 8001f7c:	08006be7 	.word	0x08006be7
 8001f80:	08006c28 	.word	0x08006c28

08001f84 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f88:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001f8a:	6800      	ldr	r0, [r0, #0]
{
 8001f8c:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001f8e:	f7fe ffef 	bl	8000f70 <Uncompress>
 8001f92:	6862      	ldr	r2, [r4, #4]
 8001f94:	4601      	mov	r1, r0
 8001f96:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <DecodePeripheral+0x4c>)
 8001f98:	f004 f8b4 	bl	8006104 <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001f9c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001fa0:	f1b8 0f00 	cmp.w	r8, #0
 8001fa4:	d112      	bne.n	8001fcc <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001faa:	4639      	mov	r1, r7
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff fc53 	bl	8001858 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001fb2:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001fb4:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001fb6:	4633      	mov	r3, r6
 8001fb8:	4638      	mov	r0, r7
 8001fba:	f7ff ff87 	bl	8001ecc <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001fbe:	3501      	adds	r5, #1
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	429d      	cmp	r5, r3
 8001fc4:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001fc8:	d3ef      	bcc.n	8001faa <DecodePeripheral+0x26>
 8001fca:	e7ec      	b.n	8001fa6 <DecodePeripheral+0x22>
 8001fcc:	2500      	movs	r5, #0
 8001fce:	e7f7      	b.n	8001fc0 <DecodePeripheral+0x3c>
 8001fd0:	08006c51 	.word	0x08006c51

08001fd4 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd8:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001fda:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001fdc:	460e      	mov	r6, r1
  printf("\t");
 8001fde:	f004 f8a9 	bl	8006134 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001fe2:	4f11      	ldr	r7, [pc, #68]	; (8002028 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8001fe4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800202c <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001fe8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002030 <DecodePrintRegisters+0x5c>
 8001fec:	3510      	adds	r5, #16
  col = 8;
 8001fee:	2408      	movs	r4, #8
  while(count--) {
 8001ff0:	3e01      	subs	r6, #1
 8001ff2:	d201      	bcs.n	8001ff8 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8001ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001ff8:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8001ffc:	f7fe ffb8 	bl	8000f70 <Uncompress>
 8002000:	4601      	mov	r1, r0
 8002002:	4638      	mov	r0, r7
 8002004:	f004 f87e 	bl	8006104 <iprintf>
 8002008:	4420      	add	r0, r4
 800200a:	b2c4      	uxtb	r4, r0
    if(count) {
 800200c:	b156      	cbz	r6, 8002024 <DecodePrintRegisters+0x50>
      col += printf(", ");
 800200e:	4640      	mov	r0, r8
 8002010:	f004 f878 	bl	8006104 <iprintf>
 8002014:	4420      	add	r0, r4
 8002016:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8002018:	2c46      	cmp	r4, #70	; 0x46
 800201a:	d903      	bls.n	8002024 <DecodePrintRegisters+0x50>
	printf("\n\t");
 800201c:	4648      	mov	r0, r9
 800201e:	f004 f871 	bl	8006104 <iprintf>
	col = 8;
 8002022:	2408      	movs	r4, #8
    r++;
 8002024:	3510      	adds	r5, #16
 8002026:	e7e3      	b.n	8001ff0 <DecodePrintRegisters+0x1c>
 8002028:	08006b2b 	.word	0x08006b2b
 800202c:	08006bea 	.word	0x08006bea
 8002030:	08006c79 	.word	0x08006c79

08002034 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 8002034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 8002038:	2009      	movs	r0, #9
 800203a:	f004 f87b 	bl	8006134 <putchar>
  for(; p->name != NULL; p++) {
 800203e:	4d0f      	ldr	r5, [pc, #60]	; (800207c <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 8002040:	4e0f      	ldr	r6, [pc, #60]	; (8002080 <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 8002042:	4f10      	ldr	r7, [pc, #64]	; (8002084 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 8002044:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8002088 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 8002048:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 800204a:	6828      	ldr	r0, [r5, #0]
 800204c:	b908      	cbnz	r0, 8002052 <DecodePrintPeripherals.constprop.0+0x1e>
}
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8002052:	f7fe ff8d 	bl	8000f70 <Uncompress>
 8002056:	4601      	mov	r1, r0
 8002058:	4630      	mov	r0, r6
 800205a:	f004 f853 	bl	8006104 <iprintf>
    if((p+1)->name != NULL) {
 800205e:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8002060:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8002062:	b14b      	cbz	r3, 8002078 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 8002064:	4638      	mov	r0, r7
 8002066:	f004 f84d 	bl	8006104 <iprintf>
 800206a:	4404      	add	r4, r0
      if(col > 70) {
 800206c:	2c46      	cmp	r4, #70	; 0x46
 800206e:	d903      	bls.n	8002078 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 8002070:	4640      	mov	r0, r8
 8002072:	f004 f847 	bl	8006104 <iprintf>
	col = 8;
 8002076:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8002078:	3510      	adds	r5, #16
 800207a:	e7e6      	b.n	800204a <DecodePrintPeripherals.constprop.0+0x16>
 800207c:	0800f198 	.word	0x0800f198
 8002080:	08006b2b 	.word	0x08006b2b
 8002084:	08006bea 	.word	0x08006bea
 8002088:	08006c79 	.word	0x08006c79

0800208c <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 800208c:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800208e:	4909      	ldr	r1, [pc, #36]	; (80020b4 <fetch_string_arg+0x28>)
{
 8002090:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8002092:	2000      	movs	r0, #0
 8002094:	f001 ff20 	bl	8003ed8 <strtok>
  if(p == NULL) {
 8002098:	4604      	mov	r4, r0
 800209a:	b140      	cbz	r0, 80020ae <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800209c:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800209e:	f7fe f8b9 	bl	8000214 <strlen>
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <fetch_string_arg+0x2c>)
 80020a4:	3001      	adds	r0, #1
 80020a6:	4404      	add	r4, r0
 80020a8:	601c      	str	r4, [r3, #0]
  return 0;
 80020aa:	2000      	movs	r0, #0
}
 80020ac:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b2:	e7fb      	b.n	80020ac <fetch_string_arg+0x20>
 80020b4:	08006c7c 	.word	0x08006c7c
 80020b8:	20000a5c 	.word	0x20000a5c

080020bc <TaskInput>:
{
 80020bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 80020c0:	4d6b      	ldr	r5, [pc, #428]	; (8002270 <TaskInput+0x1b4>)
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	b123      	cbz	r3, 80020d0 <TaskInput+0x14>
    printf("ARMON>");
 80020c6:	486b      	ldr	r0, [pc, #428]	; (8002274 <TaskInput+0x1b8>)
 80020c8:	f004 f81c 	bl	8006104 <iprintf>
    printPrompt = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	f10d 010f 	add.w	r1, sp, #15
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe ff24 	bl	8000f24 <TerminalRead>
  if(rc) goto ProcessCharacter;
 80020dc:	2800      	cmp	r0, #0
 80020de:	d054      	beq.n	800218a <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 80020e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d001      	beq.n	80020ec <TaskInput+0x30>
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d115      	bne.n	8002118 <TaskInput+0x5c>
 80020ec:	4c62      	ldr	r4, [pc, #392]	; (8002278 <TaskInput+0x1bc>)
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	b192      	cbz	r2, 8002118 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 80020f2:	4862      	ldr	r0, [pc, #392]	; (800227c <TaskInput+0x1c0>)
 80020f4:	f004 f806 	bl	8006104 <iprintf>
    buf--;     /* Then remove it from the buffer */
 80020f8:	4a61      	ldr	r2, [pc, #388]	; (8002280 <TaskInput+0x1c4>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8002106:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800210a:	f1a3 020d 	sub.w	r2, r3, #13
 800210e:	4253      	negs	r3, r2
 8002110:	4153      	adcs	r3, r2
 8002112:	4a5c      	ldr	r2, [pc, #368]	; (8002284 <TaskInput+0x1c8>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e038      	b.n	800218a <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8002118:	2b21      	cmp	r3, #33	; 0x21
 800211a:	d12a      	bne.n	8002172 <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 800211c:	4b5a      	ldr	r3, [pc, #360]	; (8002288 <TaskInput+0x1cc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8002124:	4c59      	ldr	r4, [pc, #356]	; (800228c <TaskInput+0x1d0>)
 8002126:	495a      	ldr	r1, [pc, #360]	; (8002290 <TaskInput+0x1d4>)
 8002128:	4620      	mov	r0, r4
 800212a:	f004 f8a9 	bl	8006280 <strcpy>
      printf("%s",input);
 800212e:	4621      	mov	r1, r4
 8002130:	4858      	ldr	r0, [pc, #352]	; (8002294 <TaskInput+0x1d8>)
 8002132:	f003 ffe7 	bl	8006104 <iprintf>
      count = strlen(input);
 8002136:	4620      	mov	r0, r4
 8002138:	f7fe f86c 	bl	8000214 <strlen>
 800213c:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <TaskInput+0x1bc>)
 800213e:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8002140:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <TaskInput+0x1c4>)
 8002142:	4404      	add	r4, r0
 8002144:	601c      	str	r4, [r3, #0]
    printf("\n");
 8002146:	200a      	movs	r0, #10
 8002148:	f003 fff4 	bl	8006134 <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 800214c:	494f      	ldr	r1, [pc, #316]	; (800228c <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800214e:	4c52      	ldr	r4, [pc, #328]	; (8002298 <TaskInput+0x1dc>)
  i = len;
 8002150:	2350      	movs	r3, #80	; 0x50
 8002152:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8002154:	3b01      	subs	r3, #1
 8002156:	1c5f      	adds	r7, r3, #1
 8002158:	780a      	ldrb	r2, [r1, #0]
 800215a:	4608      	mov	r0, r1
 800215c:	f101 0101 	add.w	r1, r1, #1
 8002160:	d036      	beq.n	80021d0 <TaskInput+0x114>
 8002162:	2a00      	cmp	r2, #0
 8002164:	d060      	beq.n	8002228 <TaskInput+0x16c>
 8002166:	5d12      	ldrb	r2, [r2, r4]
 8002168:	0717      	lsls	r7, r2, #28
 800216a:	d4f3      	bmi.n	8002154 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 800216c:	2b00      	cmp	r3, #0
 800216e:	d130      	bne.n	80021d2 <TaskInput+0x116>
 8002170:	e05a      	b.n	8002228 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 8002172:	4a49      	ldr	r2, [pc, #292]	; (8002298 <TaskInput+0x1dc>)
 8002174:	5c9a      	ldrb	r2, [r3, r2]
 8002176:	f012 0f97 	tst.w	r2, #151	; 0x97
 800217a:	d015      	beq.n	80021a8 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 800217c:	493e      	ldr	r1, [pc, #248]	; (8002278 <TaskInput+0x1bc>)
 800217e:	680a      	ldr	r2, [r1, #0]
 8002180:	2a4f      	cmp	r2, #79	; 0x4f
 8002182:	d905      	bls.n	8002190 <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 8002184:	2007      	movs	r0, #7
 8002186:	f003 ffd5 	bl	8006134 <putchar>
}
 800218a:	b004      	add	sp, #16
 800218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 8002190:	4c3b      	ldr	r4, [pc, #236]	; (8002280 <TaskInput+0x1c4>)
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	7003      	strb	r3, [r0, #0]
 8002196:	1c45      	adds	r5, r0, #1
      count++;
 8002198:	3201      	adds	r2, #1
      printf("%c",c);
 800219a:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 800219e:	6025      	str	r5, [r4, #0]
      count++;
 80021a0:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 80021a2:	f003 ffc7 	bl	8006134 <putchar>
 80021a6:	e7ae      	b.n	8002106 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 80021a8:	2b0d      	cmp	r3, #13
 80021aa:	d005      	beq.n	80021b8 <TaskInput+0xfc>
 80021ac:	2b0a      	cmp	r3, #10
 80021ae:	d1aa      	bne.n	8002106 <TaskInput+0x4a>
 80021b0:	4b34      	ldr	r3, [pc, #208]	; (8002284 <TaskInput+0x1c8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1a6      	bne.n	8002106 <TaskInput+0x4a>
    *buf = '\0';
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <TaskInput+0x1c4>)
    strcpy(input_b,input);
 80021ba:	4934      	ldr	r1, [pc, #208]	; (800228c <TaskInput+0x1d0>)
    *buf = '\0';
 80021bc:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80021be:	4834      	ldr	r0, [pc, #208]	; (8002290 <TaskInput+0x1d4>)
    *buf = '\0';
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80021c4:	f004 f85c 	bl	8006280 <strcpy>
    saved = 1;
 80021c8:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <TaskInput+0x1cc>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e7ba      	b.n	8002146 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 80021d0:	b352      	cbz	r2, 8002228 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 80021d2:	4932      	ldr	r1, [pc, #200]	; (800229c <TaskInput+0x1e0>)
 80021d4:	f001 fe80 	bl	8003ed8 <strtok>
  if(p==NULL) {
 80021d8:	4604      	mov	r4, r0
 80021da:	b920      	cbnz	r0, 80021e6 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80021dc:	4930      	ldr	r1, [pc, #192]	; (80022a0 <TaskInput+0x1e4>)
 80021de:	4831      	ldr	r0, [pc, #196]	; (80022a4 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 80021e0:	f003 ff90 	bl	8006104 <iprintf>
  return CmdReturnNotFound;
 80021e4:	e020      	b.n	8002228 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 80021e6:	4930      	ldr	r1, [pc, #192]	; (80022a8 <TaskInput+0x1ec>)
 80021e8:	f004 f830 	bl	800624c <strcasecmp>
 80021ec:	bb58      	cbnz	r0, 8002246 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 80021ee:	492b      	ldr	r1, [pc, #172]	; (800229c <TaskInput+0x1e0>)
 80021f0:	f001 fe72 	bl	8003ed8 <strtok>
    if(p == NULL) {
 80021f4:	4604      	mov	r4, r0
 80021f6:	b318      	cbz	r0, 8002240 <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 80021f8:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fe f809 	bl	8000214 <strlen>
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8002204:	4f2a      	ldr	r7, [pc, #168]	; (80022b0 <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8002206:	3001      	adds	r0, #1
 8002208:	4420      	add	r0, r4
 800220a:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	b9e9      	cbnz	r1, 800224c <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8002210:	4828      	ldr	r0, [pc, #160]	; (80022b4 <TaskInput+0x1f8>)
 8002212:	4621      	mov	r1, r4
 8002214:	e7e4      	b.n	80021e0 <TaskInput+0x124>
	if(t->help != NULL) {
 8002216:	68a2      	ldr	r2, [r4, #8]
 8002218:	b172      	cbz	r2, 8002238 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800221a:	4638      	mov	r0, r7
 800221c:	f003 ff72 	bl	8006104 <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8002220:	340c      	adds	r4, #12
 8002222:	6821      	ldr	r1, [r4, #0]
 8002224:	2900      	cmp	r1, #0
 8002226:	d1f6      	bne.n	8002216 <TaskInput+0x15a>
    printPrompt = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	602b      	str	r3, [r5, #0]
    buf = input;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <TaskInput+0x1c4>)
 800222e:	601e      	str	r6, [r3, #0]
    count = 0;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <TaskInput+0x1bc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e766      	b.n	8002106 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	2001      	movs	r0, #1
 800223c:	4798      	blx	r3
 800223e:	e7ef      	b.n	8002220 <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 8002240:	4c1b      	ldr	r4, [pc, #108]	; (80022b0 <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8002242:	4f1d      	ldr	r7, [pc, #116]	; (80022b8 <TaskInput+0x1fc>)
 8002244:	e7ed      	b.n	8002222 <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8002246:	f04f 0800 	mov.w	r8, #0
 800224a:	e7d7      	b.n	80021fc <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 800224c:	4620      	mov	r0, r4
 800224e:	9101      	str	r1, [sp, #4]
 8002250:	f003 fffc 	bl	800624c <strcasecmp>
 8002254:	9901      	ldr	r1, [sp, #4]
 8002256:	b948      	cbnz	r0, 800226c <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 8002258:	f1b8 0f00 	cmp.w	r8, #0
 800225c:	d002      	beq.n	8002264 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 800225e:	4817      	ldr	r0, [pc, #92]	; (80022bc <TaskInput+0x200>)
 8002260:	f003 ff50 	bl	8006104 <iprintf>
      return t->func(arg);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4640      	mov	r0, r8
 8002268:	4798      	blx	r3
 800226a:	e7dd      	b.n	8002228 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 800226c:	370c      	adds	r7, #12
 800226e:	e7cd      	b.n	800220c <TaskInput+0x150>
 8002270:	20000010 	.word	0x20000010
 8002274:	08006c83 	.word	0x08006c83
 8002278:	20000a64 	.word	0x20000a64
 800227c:	08006c8a 	.word	0x08006c8a
 8002280:	20000008 	.word	0x20000008
 8002284:	20000a6c 	.word	0x20000a6c
 8002288:	20000c88 	.word	0x20000c88
 800228c:	20000be4 	.word	0x20000be4
 8002290:	20000c34 	.word	0x20000c34
 8002294:	08006b2b 	.word	0x08006b2b
 8002298:	080127da 	.word	0x080127da
 800229c:	08006c7c 	.word	0x08006c7c
 80022a0:	080127c0 	.word	0x080127c0
 80022a4:	08006c8e 	.word	0x08006c8e
 80022a8:	08006cbe 	.word	0x08006cbe
 80022ac:	20000a5c 	.word	0x20000a5c
 80022b0:	08012c90 	.word	0x08012c90
 80022b4:	08006cd4 	.word	0x08006cd4
 80022b8:	08006cc3 	.word	0x08006cc3
 80022bc:	08006ccf 	.word	0x08006ccf

080022c0 <fetch_uint32_arg>:
{
 80022c0:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 80022c2:	490c      	ldr	r1, [pc, #48]	; (80022f4 <fetch_uint32_arg+0x34>)
{
 80022c4:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f001 fe06 	bl	8003ed8 <strtok>
  if(p == NULL) {
 80022cc:	4604      	mov	r4, r0
 80022ce:	b168      	cbz	r0, 80022ec <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	4611      	mov	r1, r2
 80022d4:	f001 fece 	bl	8004074 <strtoul>
 80022d8:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fd ff9a 	bl	8000214 <strlen>
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <fetch_uint32_arg+0x38>)
 80022e2:	3001      	adds	r0, #1
 80022e4:	4404      	add	r4, r0
 80022e6:	601c      	str	r4, [r3, #0]
  return 0;
 80022e8:	2000      	movs	r0, #0
}
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f0:	e7fb      	b.n	80022ea <fetch_uint32_arg+0x2a>
 80022f2:	bf00      	nop
 80022f4:	08006c7c 	.word	0x08006c7c
 80022f8:	20000a5c 	.word	0x20000a5c

080022fc <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 80022fc:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80022fe:	b9d8      	cbnz	r0, 8002338 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8002300:	a801      	add	r0, sp, #4
 8002302:	f7ff ffdd 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002306:	b128      	cbz	r0, 8002314 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8002308:	480e      	ldr	r0, [pc, #56]	; (8002344 <CmdLed+0x48>)
 800230a:	f003 ff97 	bl	800623c <puts>
    return CmdReturnBadParameter1;
 800230e:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8002310:	b002      	add	sp, #8
 8002312:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8002314:	9901      	ldr	r1, [sp, #4]
 8002316:	480c      	ldr	r0, [pc, #48]	; (8002348 <CmdLed+0x4c>)
 8002318:	f003 fef4 	bl	8006104 <iprintf>
  val = val ? 1 : 0;
 800231c:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 800231e:	480b      	ldr	r0, [pc, #44]	; (800234c <CmdLed+0x50>)
  val = val ? 1 : 0;
 8002320:	3b00      	subs	r3, #0
 8002322:	bf18      	it	ne
 8002324:	2301      	movne	r3, #1
 8002326:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8002328:	f003 ff88 	bl	800623c <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 800232c:	f89d 0004 	ldrb.w	r0, [sp, #4]
  if(PinState != GPIO_PIN_RESET)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <CmdLed+0x54>)
 8002332:	b118      	cbz	r0, 800233c <CmdLed+0x40>
    GPIOx->BSRR = GPIO_Pin;
 8002334:	2220      	movs	r2, #32
 8002336:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002338:	2000      	movs	r0, #0
 800233a:	e7e9      	b.n	8002310 <CmdLed+0x14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	e7e5      	b.n	8002310 <CmdLed+0x14>
 8002344:	08006d09 	.word	0x08006d09
 8002348:	08006d37 	.word	0x08006d37
 800234c:	08006d53 	.word	0x08006d53
 8002350:	40020000 	.word	0x40020000

08002354 <CmdDC2>:
{
 8002354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002356:	2800      	cmp	r0, #0
 8002358:	f040 808e 	bne.w	8002478 <CmdDC2+0x124>
  uint32_t Motor_2_Dir = 0;
 800235c:	e9cd 0000 	strd	r0, r0, [sp]
  uint32_t Motor_2_Speed = 0;
 8002360:	e9cd 0002 	strd	r0, r0, [sp, #8]
  rc = fetch_uint32_arg(&Motor_1_Dir);
 8002364:	4668      	mov	r0, sp
 8002366:	f7ff ffab 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 800236a:	b110      	cbz	r0, 8002372 <CmdDC2+0x1e>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 800236c:	4862      	ldr	r0, [pc, #392]	; (80024f8 <CmdDC2+0x1a4>)
 800236e:	f003 ff65 	bl	800623c <puts>
  rc = fetch_uint32_arg(&Motor_1_Speed);
 8002372:	a802      	add	r0, sp, #8
 8002374:	f7ff ffa4 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002378:	2800      	cmp	r0, #0
 800237a:	f000 8081 	beq.w	8002480 <CmdDC2+0x12c>
   printf("Please Enter speed in percentage between 0 and 100 \n");
 800237e:	485f      	ldr	r0, [pc, #380]	; (80024fc <CmdDC2+0x1a8>)
 8002380:	f003 ff5c 	bl	800623c <puts>
  rc = fetch_uint32_arg(&Motor_2_Dir);
 8002384:	a801      	add	r0, sp, #4
 8002386:	f7ff ff9b 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 800238a:	b110      	cbz	r0, 8002392 <CmdDC2+0x3e>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 800238c:	485a      	ldr	r0, [pc, #360]	; (80024f8 <CmdDC2+0x1a4>)
 800238e:	f003 ff55 	bl	800623c <puts>
  rc = fetch_uint32_arg(&Motor_2_Speed);
 8002392:	a803      	add	r0, sp, #12
 8002394:	f7ff ff94 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002398:	2800      	cmp	r0, #0
 800239a:	d076      	beq.n	800248a <CmdDC2+0x136>
   printf("Please Enter speed in percentage between 0 and 100 \n");
 800239c:	4857      	ldr	r0, [pc, #348]	; (80024fc <CmdDC2+0x1a8>)
 800239e:	f003 ff4d 	bl	800623c <puts>
  rc = fetch_uint32_arg(&setTime);
 80023a2:	4857      	ldr	r0, [pc, #348]	; (8002500 <CmdDC2+0x1ac>)
 80023a4:	f7ff ff8c 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 80023a8:	b110      	cbz	r0, 80023b0 <CmdDC2+0x5c>
   printf("Please Enter time in seconds\n");
 80023aa:	4856      	ldr	r0, [pc, #344]	; (8002504 <CmdDC2+0x1b0>)
 80023ac:	f003 ff46 	bl	800623c <puts>
//                 - checkResult value returned 1 if data within range and 0 if data
//                   is out of range.   
//  
uint8_t checkValues(uint32_t Motor_1_Speed, uint32_t Motor_2_Speed){
for (int i =0; i<3; i++){
  if(Motor_1_Speed < 0 || Motor_1_Speed > 100){
 80023b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80023b4:	2a64      	cmp	r2, #100	; 0x64
 80023b6:	d850      	bhi.n	800245a <CmdDC2+0x106>
    return checkResult = 0;
  }
   else if(Motor_2_Speed < 0 || Motor_2_Speed > 100){
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d84e      	bhi.n	800245a <CmdDC2+0x106>
  printf("all ok");
 80023bc:	4852      	ldr	r0, [pc, #328]	; (8002508 <CmdDC2+0x1b4>)
 80023be:	f003 fea1 	bl	8006104 <iprintf>
   switch (Motor_1_Dir) {
 80023c2:	9b00      	ldr	r3, [sp, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d064      	beq.n	8002492 <CmdDC2+0x13e>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d06e      	beq.n	80024aa <CmdDC2+0x156>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d172      	bne.n	80024b6 <CmdDC2+0x162>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023d0:	494e      	ldr	r1, [pc, #312]	; (800250c <CmdDC2+0x1b8>)
 80023d2:	680b      	ldr	r3, [r1, #0]
  TIMx->CCER &= ~tmp;
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023dc:	6a1a      	ldr	r2, [r3, #32]
 80023de:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023e0:	4a4b      	ldr	r2, [pc, #300]	; (8002510 <CmdDC2+0x1bc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10d      	bne.n	8002402 <CmdDC2+0xae>
    __HAL_TIM_MOE_DISABLE(htim);
 80023e6:	6a18      	ldr	r0, [r3, #32]
 80023e8:	f241 1211 	movw	r2, #4369	; 0x1111
 80023ec:	4210      	tst	r0, r2
 80023ee:	d108      	bne.n	8002402 <CmdDC2+0xae>
 80023f0:	6a18      	ldr	r0, [r3, #32]
 80023f2:	f240 4244 	movw	r2, #1092	; 0x444
 80023f6:	4210      	tst	r0, r2
 80023f8:	bf02      	ittt	eq
 80023fa:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80023fc:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8002400:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002402:	6a18      	ldr	r0, [r3, #32]
 8002404:	f241 1211 	movw	r2, #4369	; 0x1111
 8002408:	4210      	tst	r0, r2
 800240a:	d108      	bne.n	800241e <CmdDC2+0xca>
 800240c:	6a18      	ldr	r0, [r3, #32]
 800240e:	f240 4244 	movw	r2, #1092	; 0x444
 8002412:	4210      	tst	r0, r2
 8002414:	bf02      	ittt	eq
 8002416:	681a      	ldreq	r2, [r3, #0]
 8002418:	f022 0201 	biceq.w	r2, r2, #1
 800241c:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800241e:	2301      	movs	r3, #1
 8002420:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <CmdDC2+0x1c0>)
 8002426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800242a:	619a      	str	r2, [r3, #24]
 800242c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002430:	619a      	str	r2, [r3, #24]
      oneSecondCount = 0;
 8002432:	4b39      	ldr	r3, [pc, #228]	; (8002518 <CmdDC2+0x1c4>)
 8002434:	2200      	movs	r2, #0
 8002436:	801a      	strh	r2, [r3, #0]
   switch (Motor_2_Dir){
 8002438:	9b01      	ldr	r3, [sp, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d03f      	beq.n	80024be <CmdDC2+0x16a>
 800243e:	2b02      	cmp	r3, #2
 8002440:	d048      	beq.n	80024d4 <CmdDC2+0x180>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d154      	bne.n	80024f0 <CmdDC2+0x19c>
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <CmdDC2+0x1c0>)
 8002448:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800244c:	6191      	str	r1, [r2, #24]
 800244e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002452:	f8c2 1418 	str.w	r1, [r2, #1048]	; 0x418
      oneSecondCount = 0;
 8002456:	4a30      	ldr	r2, [pc, #192]	; (8002518 <CmdDC2+0x1c4>)
     counterStart = 1;
 8002458:	8013      	strh	r3, [r2, #0]
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 800245a:	9b02      	ldr	r3, [sp, #8]
 800245c:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <CmdDC2+0x1bc>)
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 800245e:	2096      	movs	r0, #150	; 0x96
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 8002460:	f103 0163 	add.w	r1, r3, #99	; 0x63
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 8002464:	4343      	muls	r3, r0
 8002466:	2064      	movs	r0, #100	; 0x64
 8002468:	fbb3 f3f0 	udiv	r3, r3, r0
 800246c:	3331      	adds	r3, #49	; 0x31
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 800246e:	6351      	str	r1, [r2, #52]	; 0x34
   printf("%li",(100 +(Motor_1_Speed))-1);
 8002470:	482a      	ldr	r0, [pc, #168]	; (800251c <CmdDC2+0x1c8>)
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 8002472:	6393      	str	r3, [r2, #56]	; 0x38
   printf("%li",(100 +(Motor_1_Speed))-1);
 8002474:	f003 fe46 	bl	8006104 <iprintf>
 }    
 8002478:	2000      	movs	r0, #0
 800247a:	b005      	add	sp, #20
 800247c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(Motor_1_Speed < 0 || Motor_1_Speed > 100) {
 8002480:	9b02      	ldr	r3, [sp, #8]
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	f67f af7e 	bls.w	8002384 <CmdDC2+0x30>
 8002488:	e779      	b.n	800237e <CmdDC2+0x2a>
  else if(Motor_2_Speed < 0 || Motor_2_Speed > 100) {
 800248a:	9b03      	ldr	r3, [sp, #12]
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d988      	bls.n	80023a2 <CmdDC2+0x4e>
 8002490:	e784      	b.n	800239c <CmdDC2+0x48>
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <CmdDC2+0x1c0>)
 8002494:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002498:	6191      	str	r1, [r2, #24]
    GPIOx->BSRR = GPIO_Pin;
 800249a:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249c:	6191      	str	r1, [r2, #24]
     oneSecondCount = 0;
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <CmdDC2+0x1c4>)
 80024a0:	2100      	movs	r1, #0
 80024a2:	8011      	strh	r1, [r2, #0]
     counterStart = 1;
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <CmdDC2+0x1cc>)
 80024a6:	8013      	strh	r3, [r2, #0]
     break;
 80024a8:	e7c6      	b.n	8002438 <CmdDC2+0xe4>
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <CmdDC2+0x1c0>)
 80024ac:	2301      	movs	r3, #1
 80024ae:	6193      	str	r3, [r2, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80024b4:	e7f2      	b.n	800249c <CmdDC2+0x148>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 80024b6:	4810      	ldr	r0, [pc, #64]	; (80024f8 <CmdDC2+0x1a4>)
 80024b8:	f003 fec0 	bl	800623c <puts>
   break;
 80024bc:	e7bc      	b.n	8002438 <CmdDC2+0xe4>
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <CmdDC2+0x1c0>)
 80024c0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80024c4:	6191      	str	r1, [r2, #24]
    GPIOx->BSRR = GPIO_Pin;
 80024c6:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
     oneSecondCount = 0;
 80024ca:	4a13      	ldr	r2, [pc, #76]	; (8002518 <CmdDC2+0x1c4>)
 80024cc:	2100      	movs	r1, #0
 80024ce:	8011      	strh	r1, [r2, #0]
     counterStart = 1;
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <CmdDC2+0x1cc>)
 80024d2:	e7c1      	b.n	8002458 <CmdDC2+0x104>
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <CmdDC2+0x1c0>)
 80024d6:	2210      	movs	r2, #16
 80024d8:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024de:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
     oneSecondCount = 0;
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <CmdDC2+0x1c4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	801a      	strh	r2, [r3, #0]
     counterStart = 1;
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <CmdDC2+0x1cc>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	801a      	strh	r2, [r3, #0]
     break;
 80024ee:	e7b4      	b.n	800245a <CmdDC2+0x106>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 80024f0:	4801      	ldr	r0, [pc, #4]	; (80024f8 <CmdDC2+0x1a4>)
 80024f2:	f003 fea3 	bl	800623c <puts>
   break;
 80024f6:	e7b0      	b.n	800245a <CmdDC2+0x106>
 80024f8:	08006d63 	.word	0x08006d63
 80024fc:	08006d96 	.word	0x08006d96
 8002500:	20000c8c 	.word	0x20000c8c
 8002504:	08006dca 	.word	0x08006dca
 8002508:	08006de7 	.word	0x08006de7
 800250c:	20000a80 	.word	0x20000a80
 8002510:	40010000 	.word	0x40010000
 8002514:	40020000 	.word	0x40020000
 8002518:	20000c84 	.word	0x20000c84
 800251c:	08006dee 	.word	0x08006dee
 8002520:	20000a68 	.word	0x20000a68

08002524 <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 8002524:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002528:	4604      	mov	r4, r0
 800252a:	b9f0      	cbnz	r0, 800256a <CmdR+0x46>

  fetch_uint32_arg(&addr);
 800252c:	a801      	add	r0, sp, #4
 800252e:	f7ff fec7 	bl	80022c0 <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 8002532:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8002534:	4812      	ldr	r0, [pc, #72]	; (8002580 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 8002536:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 8002538:	4e12      	ldr	r6, [pc, #72]	; (8002584 <CmdR+0x60>)
 800253a:	4f13      	ldr	r7, [pc, #76]	; (8002588 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 800253c:	462a      	mov	r2, r5
 800253e:	f003 fde1 	bl	8006104 <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 8002542:	4812      	ldr	r0, [pc, #72]	; (800258c <CmdR+0x68>)
 8002544:	f003 fdde 	bl	8006104 <iprintf>
    printf("%s%c",
 8002548:	4911      	ldr	r1, [pc, #68]	; (8002590 <CmdR+0x6c>)
 800254a:	4688      	mov	r8, r1
 800254c:	2d00      	cmp	r5, #0
 800254e:	bfb4      	ite	lt
 8002550:	2231      	movlt	r2, #49	; 0x31
 8002552:	2230      	movge	r2, #48	; 0x30
 8002554:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 8002556:	3401      	adds	r4, #1
    printf("%s%c",
 8002558:	f003 fdd4 	bl	8006104 <iprintf>
  for(i=0; i<32; i++) {
 800255c:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 800255e:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 8002562:	d106      	bne.n	8002572 <CmdR+0x4e>
  }
  printf("\n");
 8002564:	200a      	movs	r0, #10
 8002566:	f003 fde5 	bl	8006134 <putchar>
  return CmdReturnOk;
}
 800256a:	2000      	movs	r0, #0
 800256c:	b002      	add	sp, #8
 800256e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 8002572:	f014 0f03 	tst.w	r4, #3
 8002576:	bf14      	ite	ne
 8002578:	4639      	movne	r1, r7
 800257a:	4641      	moveq	r1, r8
 800257c:	e7e6      	b.n	800254c <CmdR+0x28>
 800257e:	bf00      	nop
 8002580:	08006df2 	.word	0x08006df2
 8002584:	08006eac 	.word	0x08006eac
 8002588:	08009284 	.word	0x08009284
 800258c:	08006e04 	.word	0x08006e04
 8002590:	08009228 	.word	0x08009228

08002594 <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 8002594:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002596:	b940      	cbnz	r0, 80025aa <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8002598:	4668      	mov	r0, sp
 800259a:	f7ff fe91 	bl	80022c0 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800259e:	a801      	add	r0, sp, #4
 80025a0:	f7ff fe8e 	bl	80022c0 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80025a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80025a8:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 80025aa:	2000      	movs	r0, #0
 80025ac:	b003      	add	sp, #12
 80025ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080025b4 <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80025b8:	2801      	cmp	r0, #1
{
 80025ba:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80025bc:	d00b      	beq.n	80025d6 <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 80025be:	2802      	cmp	r0, #2
 80025c0:	4f31      	ldr	r7, [pc, #196]	; (8002688 <CmdDump+0xd4>)
 80025c2:	4e32      	ldr	r6, [pc, #200]	; (800268c <CmdDump+0xd8>)
 80025c4:	d10b      	bne.n	80025de <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 80025c6:	4832      	ldr	r0, [pc, #200]	; (8002690 <CmdDump+0xdc>)
 80025c8:	f003 fe38 	bl	800623c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	6831      	ldr	r1, [r6, #0]
 80025d0:	4830      	ldr	r0, [pc, #192]	; (8002694 <CmdDump+0xe0>)
 80025d2:	f003 fd97 	bl	8006104 <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 80025d6:	2000      	movs	r0, #0
 80025d8:	b00b      	add	sp, #44	; 0x2c
 80025da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 80025de:	4630      	mov	r0, r6
 80025e0:	f7ff fe6e 	bl	80022c0 <fetch_uint32_arg>
  if(rc == 0) {
 80025e4:	b910      	cbnz	r0, 80025ec <CmdDump+0x38>
    fetch_uint32_arg(&count);
 80025e6:	4638      	mov	r0, r7
 80025e8:	f7ff fe6a 	bl	80022c0 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 80025ec:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d043      	beq.n	800267a <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 80025f2:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 80025f4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80026a4 <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 80025f8:	9301      	str	r3, [sp, #4]
  bufp = buf;
 80025fa:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 80025fe:	2500      	movs	r5, #0
 8002600:	46c8      	mov	r8, r9
 8002602:	9b01      	ldr	r3, [sp, #4]
 8002604:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 8002606:	f015 030f 	ands.w	r3, r5, #15
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	d13a      	bne.n	8002684 <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 800260e:	4822      	ldr	r0, [pc, #136]	; (8002698 <CmdDump+0xe4>)
 8002610:	9103      	str	r1, [sp, #12]
 8002612:	f003 fd77 	bl	8006104 <iprintf>
      bufp = buf;
 8002616:	9903      	ldr	r1, [sp, #12]
 8002618:	46c3      	mov	fp, r8
    c = *p++;
 800261a:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <CmdDump+0xe8>)
 800261e:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8002622:	46d9      	mov	r9, fp
      *bufp++ = '.';
 8002624:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8002628:	4601      	mov	r1, r0
      *bufp++ = '.';
 800262a:	bf08      	it	eq
 800262c:	202e      	moveq	r0, #46	; 0x2e
 800262e:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8002632:	4650      	mov	r0, sl
 8002634:	f003 fd66 	bl	8006104 <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8002638:	9b02      	ldr	r3, [sp, #8]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d106      	bne.n	800264c <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 800263e:	2100      	movs	r1, #0
 8002640:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 8002644:	4816      	ldr	r0, [pc, #88]	; (80026a0 <CmdDump+0xec>)
 8002646:	4641      	mov	r1, r8
 8002648:	f003 fd5c 	bl	8006104 <iprintf>
  for(i=0; i<count; i++) {
 800264c:	3501      	adds	r5, #1
 800264e:	42ac      	cmp	r4, r5
 8002650:	d1d7      	bne.n	8002602 <CmdDump+0x4e>
  *bufp='\0';
 8002652:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8002654:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8002658:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 800265c:	d00d      	beq.n	800267a <CmdDump+0xc6>
      printf("   ");
 800265e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80026a8 <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8002662:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8002666:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8002668:	3501      	adds	r5, #1
      printf("   ");
 800266a:	f003 fd4b 	bl	8006104 <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800266e:	42a5      	cmp	r5, r4
 8002670:	d3f9      	bcc.n	8002666 <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 8002672:	480b      	ldr	r0, [pc, #44]	; (80026a0 <CmdDump+0xec>)
 8002674:	4641      	mov	r1, r8
 8002676:	f003 fd45 	bl	8006104 <iprintf>
  address = address+count;
 800267a:	6833      	ldr	r3, [r6, #0]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	4413      	add	r3, r2
 8002680:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 8002682:	e7a8      	b.n	80025d6 <CmdDump+0x22>
 8002684:	46cb      	mov	fp, r9
 8002686:	e7c8      	b.n	800261a <CmdDump+0x66>
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000a44 	.word	0x20000a44
 8002690:	08006eb1 	.word	0x08006eb1
 8002694:	08007049 	.word	0x08007049
 8002698:	0800707b 	.word	0x0800707b
 800269c:	080127da 	.word	0x080127da
 80026a0:	08007088 	.word	0x08007088
 80026a4:	08007082 	.word	0x08007082
 80026a8:	08006ea8 	.word	0x08006ea8

080026ac <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 80026ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80026ae:	4604      	mov	r4, r0
 80026b0:	bb50      	cbnz	r0, 8002708 <CmdSend+0x5c>

  index = 0;
 80026b2:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 80026b4:	a803      	add	r0, sp, #12
 80026b6:	f7ff fe03 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 80026ba:	4602      	mov	r2, r0
 80026bc:	b130      	cbz	r0, 80026cc <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80026be:	4813      	ldr	r0, [pc, #76]	; (800270c <CmdSend+0x60>)
 80026c0:	4621      	mov	r1, r4
 80026c2:	f003 fd1f 	bl	8006104 <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 80026c6:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 80026c8:	b004      	add	sp, #16
 80026ca:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80026cc:	9c03      	ldr	r4, [sp, #12]
 80026ce:	b124      	cbz	r4, 80026da <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80026d0:	4621      	mov	r1, r4
 80026d2:	480f      	ldr	r0, [pc, #60]	; (8002710 <CmdSend+0x64>)
 80026d4:	f003 fd16 	bl	8006104 <iprintf>
 80026d8:	e7f5      	b.n	80026c6 <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <CmdSend+0x68>)
 80026dc:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 80026de:	9101      	str	r1, [sp, #4]
 80026e0:	4608      	mov	r0, r1
 80026e2:	f7fd fd97 	bl	8000214 <strlen>
  if(len==0) {
 80026e6:	9901      	ldr	r1, [sp, #4]
 80026e8:	4602      	mov	r2, r0
 80026ea:	b920      	cbnz	r0, 80026f6 <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <CmdSend+0x6c>)
 80026ee:	f003 fda5 	bl	800623c <puts>
    return CmdReturnBadParameter2;
 80026f2:	2005      	movs	r0, #5
 80026f4:	e7e8      	b.n	80026c8 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff f816 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <CmdSend+0x70>)
 80026fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	f7ff f810 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002708:	2000      	movs	r0, #0
 800270a:	e7dd      	b.n	80026c8 <CmdSend+0x1c>
 800270c:	08007090 	.word	0x08007090
 8002710:	080070be 	.word	0x080070be
 8002714:	20000a5c 	.word	0x20000a5c
 8002718:	080070f4 	.word	0x080070f4
 800271c:	08007682 	.word	0x08007682

08002720 <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 8002720:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002722:	4604      	mov	r4, r0
 8002724:	bb18      	cbnz	r0, 800276e <CmdReceive+0x4e>

  index = 0;
 8002726:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002728:	a801      	add	r0, sp, #4
 800272a:	f7ff fdc9 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 800272e:	4602      	mov	r2, r0
 8002730:	b130      	cbz	r0, 8002740 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002732:	4810      	ldr	r0, [pc, #64]	; (8002774 <CmdReceive+0x54>)
 8002734:	4621      	mov	r1, r4
 8002736:	f003 fce5 	bl	8006104 <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 800273a:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 800273c:	b002      	add	sp, #8
 800273e:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002740:	9901      	ldr	r1, [sp, #4]
 8002742:	b119      	cbz	r1, 800274c <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <CmdReceive+0x58>)
 8002746:	f003 fcdd 	bl	8006104 <iprintf>
 800274a:	e7f6      	b.n	800273a <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <CmdReceive+0x5c>)
 800274e:	f003 fcd9 	bl	8006104 <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 8002752:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f10d 0103 	add.w	r1, sp, #3
 800275c:	f7fe fbe2 	bl	8000f24 <TerminalRead>
 8002760:	2800      	cmp	r0, #0
 8002762:	d0eb      	beq.n	800273c <CmdReceive+0x1c>
    printf("%c",c);
 8002764:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002768:	f003 fce4 	bl	8006134 <putchar>
 800276c:	e7f1      	b.n	8002752 <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800276e:	2000      	movs	r0, #0
 8002770:	e7e4      	b.n	800273c <CmdReceive+0x1c>
 8002772:	bf00      	nop
 8002774:	08007090 	.word	0x08007090
 8002778:	080070be 	.word	0x080070be
 800277c:	0800711e 	.word	0x0800711e

08002780 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 8002780:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002782:	4604      	mov	r4, r0
 8002784:	b9b0      	cbnz	r0, 80027b4 <CmdTransparent+0x34>

  index = 0;
 8002786:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002788:	a801      	add	r0, sp, #4
 800278a:	f7ff fd99 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 800278e:	4602      	mov	r2, r0
 8002790:	b130      	cbz	r0, 80027a0 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002792:	4809      	ldr	r0, [pc, #36]	; (80027b8 <CmdTransparent+0x38>)
 8002794:	4621      	mov	r1, r4
 8002796:	f003 fcb5 	bl	8006104 <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 800279a:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 800279c:	b002      	add	sp, #8
 800279e:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80027a0:	9901      	ldr	r1, [sp, #4]
 80027a2:	b119      	cbz	r1, 80027ac <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80027a4:	4805      	ldr	r0, [pc, #20]	; (80027bc <CmdTransparent+0x3c>)
 80027a6:	f003 fcad 	bl	8006104 <iprintf>
    return CmdReturnBadParameter1;
 80027aa:	e7f6      	b.n	800279a <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <CmdTransparent+0x40>)
 80027ae:	f003 fd45 	bl	800623c <puts>
 80027b2:	e7f2      	b.n	800279a <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80027b4:	2000      	movs	r0, #0
 80027b6:	e7f1      	b.n	800279c <CmdTransparent+0x1c>
 80027b8:	08007090 	.word	0x08007090
 80027bc:	080070be 	.word	0x080070be
 80027c0:	08007139 	.word	0x08007139

080027c4 <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 80027c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 80027c8:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 80027ca:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 80027cc:	d132      	bne.n	8002834 <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 80027ce:	f7ff fc5d 	bl	800208c <fetch_string_arg>
    if(rc) {
 80027d2:	b160      	cbz	r0, 80027ee <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 80027d4:	488b      	ldr	r0, [pc, #556]	; (8002a04 <CmdDecode+0x240>)
 80027d6:	f003 fd31 	bl	800623c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 80027da:	f7ff fc2b 	bl	8002034 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 80027de:	488a      	ldr	r0, [pc, #552]	; (8002a08 <CmdDecode+0x244>)
 80027e0:	f003 fd2c 	bl	800623c <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 80027e4:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 80027e6:	4620      	mov	r0, r4
 80027e8:	b004      	add	sp, #16
 80027ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 80027ee:	4d87      	ldr	r5, [pc, #540]	; (8002a0c <CmdDecode+0x248>)
 80027f0:	e008      	b.n	8002804 <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80027f2:	9c03      	ldr	r4, [sp, #12]
 80027f4:	f7fe fbbc 	bl	8000f70 <Uncompress>
 80027f8:	4601      	mov	r1, r0
 80027fa:	4620      	mov	r0, r4
 80027fc:	f003 fd26 	bl	800624c <strcasecmp>
 8002800:	b118      	cbz	r0, 800280a <CmdDecode+0x46>
	p++;
 8002802:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002804:	6828      	ldr	r0, [r5, #0]
 8002806:	2800      	cmp	r0, #0
 8002808:	d1f3      	bne.n	80027f2 <CmdDecode+0x2e>
      if(p->name == NULL) {
 800280a:	682c      	ldr	r4, [r5, #0]
 800280c:	b934      	cbnz	r4, 800281c <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 800280e:	9903      	ldr	r1, [sp, #12]
 8002810:	487f      	ldr	r0, [pc, #508]	; (8002a10 <CmdDecode+0x24c>)
 8002812:	f003 fc77 	bl	8006104 <iprintf>
	DecodePrintPeripherals(Peripherals);
 8002816:	f7ff fc0d 	bl	8002034 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 800281a:	e7e4      	b.n	80027e6 <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 800281c:	4620      	mov	r0, r4
 800281e:	f7fe fba7 	bl	8000f70 <Uncompress>
 8002822:	4601      	mov	r1, r0
 8002824:	487b      	ldr	r0, [pc, #492]	; (8002a14 <CmdDecode+0x250>)
 8002826:	f003 fc6d 	bl	8006104 <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 800282a:	89a9      	ldrh	r1, [r5, #12]
 800282c:	68a8      	ldr	r0, [r5, #8]
 800282e:	f7ff fbd1 	bl	8001fd4 <DecodePrintRegisters>
    printf("\n\n");
 8002832:	e007      	b.n	8002844 <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 8002834:	f7ff fc2a 	bl	800208c <fetch_string_arg>
  if(rc) {
 8002838:	b178      	cbz	r0, 800285a <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 800283a:	4877      	ldr	r0, [pc, #476]	; (8002a18 <CmdDecode+0x254>)
 800283c:	f003 fcfe 	bl	800623c <puts>
    DecodePrintPeripherals(Peripherals);
 8002840:	f7ff fbf8 	bl	8002034 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 8002844:	4875      	ldr	r0, [pc, #468]	; (8002a1c <CmdDecode+0x258>)
 8002846:	e7cb      	b.n	80027e0 <CmdDecode+0x1c>
    p++;
 8002848:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800284a:	6828      	ldr	r0, [r5, #0]
 800284c:	9c03      	ldr	r4, [sp, #12]
 800284e:	b930      	cbnz	r0, 800285e <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8002850:	9903      	ldr	r1, [sp, #12]
 8002852:	4873      	ldr	r0, [pc, #460]	; (8002a20 <CmdDecode+0x25c>)
 8002854:	f003 fc56 	bl	8006104 <iprintf>
    DecodePrintPeripherals(Peripherals);
 8002858:	e7f2      	b.n	8002840 <CmdDecode+0x7c>
  p = Peripherals;
 800285a:	4d6c      	ldr	r5, [pc, #432]	; (8002a0c <CmdDecode+0x248>)
 800285c:	e7f5      	b.n	800284a <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800285e:	f7fe fb87 	bl	8000f70 <Uncompress>
 8002862:	4601      	mov	r1, r0
 8002864:	4620      	mov	r0, r4
 8002866:	f003 fcf1 	bl	800624c <strcasecmp>
 800286a:	4604      	mov	r4, r0
 800286c:	2800      	cmp	r0, #0
 800286e:	d1eb      	bne.n	8002848 <CmdDecode+0x84>
  if(p->name == NULL) {
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ec      	beq.n	8002850 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8002876:	a802      	add	r0, sp, #8
 8002878:	f7ff fc08 	bl	800208c <fetch_string_arg>
  if(rc) {
 800287c:	b120      	cbz	r0, 8002888 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 800287e:	4621      	mov	r1, r4
 8002880:	4628      	mov	r0, r5
 8002882:	f7ff fb7f 	bl	8001f84 <DecodePeripheral>
    return CmdReturnOk;
 8002886:	e7ae      	b.n	80027e6 <CmdDecode+0x22>
  r = p->registers;
 8002888:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 800288a:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800288c:	9c02      	ldr	r4, [sp, #8]
 800288e:	2f00      	cmp	r7, #0
 8002890:	f000 80a8 	beq.w	80029e4 <CmdDecode+0x220>
 8002894:	6830      	ldr	r0, [r6, #0]
 8002896:	f7fe fb6b 	bl	8000f70 <Uncompress>
 800289a:	4601      	mov	r1, r0
 800289c:	4620      	mov	r0, r4
 800289e:	f003 fcd5 	bl	800624c <strcasecmp>
 80028a2:	3f01      	subs	r7, #1
 80028a4:	4604      	mov	r4, r0
 80028a6:	b958      	cbnz	r0, 80028c0 <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 80028a8:	a801      	add	r0, sp, #4
 80028aa:	f7ff fbef 	bl	800208c <fetch_string_arg>
  if(rc == 0) {
 80028ae:	b170      	cbz	r0, 80028ce <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 80028b0:	4631      	mov	r1, r6
 80028b2:	4628      	mov	r0, r5
 80028b4:	f7fe ffd0 	bl	8001858 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80028b8:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80028ba:	4602      	mov	r2, r0
 80028bc:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 80028be:	e017      	b.n	80028f0 <CmdDecode+0x12c>
    r++;
 80028c0:	3610      	adds	r6, #16
 80028c2:	e7e3      	b.n	800288c <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 80028c4:	2101      	movs	r1, #1
 80028c6:	4628      	mov	r0, r5
 80028c8:	f7ff fb5c 	bl	8001f84 <DecodePeripheral>
      return CmdReturnOk;
 80028cc:	e78a      	b.n	80027e4 <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 80028ce:	4955      	ldr	r1, [pc, #340]	; (8002a24 <CmdDecode+0x260>)
 80028d0:	9801      	ldr	r0, [sp, #4]
 80028d2:	f003 fcbb 	bl	800624c <strcasecmp>
 80028d6:	b980      	cbnz	r0, 80028fa <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 80028d8:	4668      	mov	r0, sp
 80028da:	f7ff fcf1 	bl	80022c0 <fetch_uint32_arg>
      if(rc) {
 80028de:	4604      	mov	r4, r0
 80028e0:	b120      	cbz	r0, 80028ec <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 80028e2:	4851      	ldr	r0, [pc, #324]	; (8002a28 <CmdDecode+0x264>)
 80028e4:	f003 fcaa 	bl	800623c <puts>
	return CmdReturnBadParameter4;
 80028e8:	2407      	movs	r4, #7
 80028ea:	e77c      	b.n	80027e6 <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 80028ec:	9a00      	ldr	r2, [sp, #0]
 80028ee:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 80028f0:	6869      	ldr	r1, [r5, #4]
 80028f2:	4630      	mov	r0, r6
 80028f4:	f7ff faea 	bl	8001ecc <DecodeRegister>
  return CmdReturnOk;
 80028f8:	e775      	b.n	80027e6 <CmdDecode+0x22>
    f = r->fields;
 80028fa:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 80028fc:	b15f      	cbz	r7, 8002916 <CmdDecode+0x152>
	  && (f->name != NULL)
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	b148      	cbz	r0, 8002916 <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 8002902:	9c01      	ldr	r4, [sp, #4]
 8002904:	f7fe fb34 	bl	8000f70 <Uncompress>
 8002908:	4601      	mov	r1, r0
 800290a:	4620      	mov	r0, r4
 800290c:	f003 fc9e 	bl	800624c <strcasecmp>
 8002910:	b998      	cbnz	r0, 800293a <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b99b      	cbnz	r3, 800293e <CmdDecode+0x17a>
    errno = 0;
 8002916:	f000 fd7d 	bl	8003414 <__errno>
 800291a:	2700      	movs	r7, #0
 800291c:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 800291e:	463a      	mov	r2, r7
 8002920:	4639      	mov	r1, r7
 8002922:	9801      	ldr	r0, [sp, #4]
 8002924:	f001 fba6 	bl	8004074 <strtoul>
 8002928:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 800292a:	f000 fd73 	bl	8003414 <__errno>
 800292e:	6804      	ldr	r4, [r0, #0]
 8002930:	2c00      	cmp	r4, #0
 8002932:	d042      	beq.n	80029ba <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 8002934:	9901      	ldr	r1, [sp, #4]
 8002936:	483d      	ldr	r0, [pc, #244]	; (8002a2c <CmdDecode+0x268>)
 8002938:	e00b      	b.n	8002952 <CmdDecode+0x18e>
      f++;
 800293a:	3708      	adds	r7, #8
 800293c:	e7de      	b.n	80028fc <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 800293e:	4668      	mov	r0, sp
 8002940:	f7ff fcbe 	bl	80022c0 <fetch_uint32_arg>
      if(rc) {
 8002944:	4604      	mov	r4, r0
 8002946:	b138      	cbz	r0, 8002958 <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 8002948:	6830      	ldr	r0, [r6, #0]
 800294a:	f7fe fb11 	bl	8000f70 <Uncompress>
 800294e:	4601      	mov	r1, r0
 8002950:	4837      	ldr	r0, [pc, #220]	; (8002a30 <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 8002952:	f003 fbd7 	bl	8006104 <iprintf>
      return CmdReturnOk;
 8002956:	e745      	b.n	80027e4 <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 8002958:	4631      	mov	r1, r6
 800295a:	4628      	mov	r0, r5
 800295c:	f7fe ff7c 	bl	8001858 <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002960:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 8002962:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 8002964:	2301      	movs	r3, #1
 8002966:	4093      	lsls	r3, r2
 8002968:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 800296a:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 800296e:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 8002972:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8002976:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 8002978:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 800297c:	4003      	ands	r3, r0
 800297e:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002980:	431a      	orrs	r2, r3
 8002982:	4631      	mov	r1, r6
 8002984:	4628      	mov	r0, r5
 8002986:	f7fe ffa1 	bl	80018cc <DecodeWriteRegister.isra.0>
      printf("%s.",
 800298a:	6828      	ldr	r0, [r5, #0]
 800298c:	f7fe faf0 	bl	8000f70 <Uncompress>
 8002990:	4601      	mov	r1, r0
 8002992:	4828      	ldr	r0, [pc, #160]	; (8002a34 <CmdDecode+0x270>)
 8002994:	f003 fbb6 	bl	8006104 <iprintf>
      printf("%s.",
 8002998:	6830      	ldr	r0, [r6, #0]
 800299a:	f7fe fae9 	bl	8000f70 <Uncompress>
 800299e:	4601      	mov	r1, r0
 80029a0:	4824      	ldr	r0, [pc, #144]	; (8002a34 <CmdDecode+0x270>)
 80029a2:	f003 fbaf 	bl	8006104 <iprintf>
      printf("%s (%d) -> (%d)\n",
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f7fe fae2 	bl	8000f70 <Uncompress>
 80029ac:	9b00      	ldr	r3, [sp, #0]
 80029ae:	4601      	mov	r1, r0
 80029b0:	4642      	mov	r2, r8
 80029b2:	4821      	ldr	r0, [pc, #132]	; (8002a38 <CmdDecode+0x274>)
 80029b4:	f003 fba6 	bl	8006104 <iprintf>
      return CmdReturnOk;
 80029b8:	e715      	b.n	80027e6 <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 80029ba:	9a00      	ldr	r2, [sp, #0]
 80029bc:	4631      	mov	r1, r6
 80029be:	4628      	mov	r0, r5
 80029c0:	f7fe ff84 	bl	80018cc <DecodeWriteRegister.isra.0>
    printf("%s.",
 80029c4:	6828      	ldr	r0, [r5, #0]
 80029c6:	f7fe fad3 	bl	8000f70 <Uncompress>
 80029ca:	4601      	mov	r1, r0
 80029cc:	4819      	ldr	r0, [pc, #100]	; (8002a34 <CmdDecode+0x270>)
 80029ce:	f003 fb99 	bl	8006104 <iprintf>
    printf("%s = 0x%08x\n",
 80029d2:	6830      	ldr	r0, [r6, #0]
 80029d4:	f7fe facc 	bl	8000f70 <Uncompress>
 80029d8:	9a00      	ldr	r2, [sp, #0]
 80029da:	4601      	mov	r1, r0
 80029dc:	4817      	ldr	r0, [pc, #92]	; (8002a3c <CmdDecode+0x278>)
 80029de:	f003 fb91 	bl	8006104 <iprintf>
    return CmdReturnOk;
 80029e2:	e700      	b.n	80027e6 <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 80029e4:	4916      	ldr	r1, [pc, #88]	; (8002a40 <CmdDecode+0x27c>)
 80029e6:	4620      	mov	r0, r4
 80029e8:	f003 fc30 	bl	800624c <strcasecmp>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	f43f af69 	beq.w	80028c4 <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80029f2:	6828      	ldr	r0, [r5, #0]
 80029f4:	f7fe fabc 	bl	8000f70 <Uncompress>
 80029f8:	4621      	mov	r1, r4
 80029fa:	4602      	mov	r2, r0
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <CmdDecode+0x280>)
 80029fe:	f003 fb81 	bl	8006104 <iprintf>
 8002a02:	e712      	b.n	800282a <CmdDecode+0x66>
 8002a04:	0800715e 	.word	0x0800715e
 8002a08:	08007371 	.word	0x08007371
 8002a0c:	0800f198 	.word	0x0800f198
 8002a10:	080073c6 	.word	0x080073c6
 8002a14:	08007401 	.word	0x08007401
 8002a18:	08007426 	.word	0x08007426
 8002a1c:	0800748f 	.word	0x0800748f
 8002a20:	08007455 	.word	0x08007455
 8002a24:	080074ce 	.word	0x080074ce
 8002a28:	080074d2 	.word	0x080074d2
 8002a2c:	08007531 	.word	0x08007531
 8002a30:	080074f1 	.word	0x080074f1
 8002a34:	0800751c 	.word	0x0800751c
 8002a38:	08007520 	.word	0x08007520
 8002a3c:	0800754f 	.word	0x0800754f
 8002a40:	0800755c 	.word	0x0800755c
 8002a44:	08007491 	.word	0x08007491

08002a48 <PolledPrintf>:
{
 8002a48:	b40f      	push	{r0, r1, r2, r3}
 8002a4a:	b500      	push	{lr}
 8002a4c:	b097      	sub	sp, #92	; 0x5c
 8002a4e:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002a50:	2150      	movs	r1, #80	; 0x50
{
 8002a52:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8002a56:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002a58:	a802      	add	r0, sp, #8
 8002a5a:	f003 fc45 	bl	80062e8 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <PolledPrintf+0x38>)
  while(len) {
 8002a60:	ab02      	add	r3, sp, #8
 8002a62:	b928      	cbnz	r0, 8002a70 <PolledPrintf+0x28>
}
 8002a64:	b017      	add	sp, #92	; 0x5c
 8002a66:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a6a:	b004      	add	sp, #16
 8002a6c:	4770      	bx	lr
      asm volatile ("nop");
 8002a6e:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 8002a70:	6811      	ldr	r1, [r2, #0]
 8002a72:	0609      	lsls	r1, r1, #24
 8002a74:	d5fb      	bpl.n	8002a6e <PolledPrintf+0x26>
    uart->DR = *p;
 8002a76:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002a7a:	6051      	str	r1, [r2, #4]
    len--;
 8002a7c:	3801      	subs	r0, #1
 8002a7e:	e7f0      	b.n	8002a62 <PolledPrintf+0x1a>
 8002a80:	40004400 	.word	0x40004400

08002a84 <CmdStats>:
{
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a88:	4601      	mov	r1, r0
{
 8002a8a:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a8c:	bb10      	cbnz	r0, 8002ad4 <CmdStats+0x50>
 8002a8e:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 8002a90:	4812      	ldr	r0, [pc, #72]	; (8002adc <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002a92:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8002a94:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8002a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a9a:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 8002a9e:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8002aa8:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8002aaa:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002aae:	f000 fcdb 	bl	8003468 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab2:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 8002ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <CmdStats+0x5c>)
 8002ab8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002aba:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <CmdStats+0x60>)
 8002abc:	9400      	str	r4, [sp, #0]
 8002abe:	e9cd b307 	strd	fp, r3, [sp, #28]
 8002ac2:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8002ac6:	e9cd 7803 	strd	r7, r8, [sp, #12]
 8002aca:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <CmdStats+0x64>)
 8002ad0:	f003 fb18 	bl	8006104 <iprintf>
}
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	b00d      	add	sp, #52	; 0x34
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002adc:	20000210 	.word	0x20000210
 8002ae0:	08007569 	.word	0x08007569
 8002ae4:	08007571 	.word	0x08007571
 8002ae8:	08007561 	.word	0x08007561

08002aec <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <USR_LED_Toggle+0x10>)
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	2000020c 	.word	0x2000020c

08002b00 <TIM1_TRG_COM_TIM11_IRQHandler>:
   HAL_TIM_IRQHandler(&htim11);
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8002b02:	f7fe bb3b 	b.w	800117c <HAL_TIM_IRQHandler>
 8002b06:	bf00      	nop
 8002b08:	20000ac8 	.word	0x20000ac8

08002b0c <TIM3_IRQHandler>:
  HAL_TIM_IRQHandler(&htim3);
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <TIM3_IRQHandler+0x8>)
 8002b0e:	f7fe bb35 	b.w	800117c <HAL_TIM_IRQHandler>
 8002b12:	bf00      	nop
 8002b14:	20000b58 	.word	0x20000b58

08002b18 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8002b18:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <_sbrk_r+0x28>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	b90a      	cbnz	r2, 8002b24 <_sbrk_r+0xc>
    heap_end = &end;
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <_sbrk_r+0x2c>)
 8002b22:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8002b24:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 8002b26:	466a      	mov	r2, sp
 8002b28:	4401      	add	r1, r0
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	d906      	bls.n	8002b3c <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8002b2e:	f000 fc71 	bl	8003414 <__errno>
 8002b32:	230c      	movs	r3, #12
 8002b34:	6003      	str	r3, [r0, #0]
 8002b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8002b3a:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8002b3c:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8002b3e:	e7fc      	b.n	8002b3a <_sbrk_r+0x22>
 8002b40:	20000a70 	.word	0x20000a70
 8002b44:	20000ca8 	.word	0x20000ca8

08002b48 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 8002b48:	2000      	movs	r0, #0
 8002b4a:	4770      	bx	lr

08002b4c <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8002b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b50:	6053      	str	r3, [r2, #4]
   return 0;
}
 8002b52:	2000      	movs	r0, #0
 8002b54:	4770      	bx	lr

08002b56 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002b56:	2001      	movs	r0, #1
 8002b58:	4770      	bx	lr

08002b5a <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	4770      	bx	lr

08002b5e <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8002b5e:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8002b60:	2000      	movs	r0, #0
 8002b62:	461a      	mov	r2, r3
 8002b64:	f7fe b9de 	b.w	8000f24 <TerminalRead>

08002b68 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002b6c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002ba4 <_write_r+0x3c>
{
 8002b70:	461d      	mov	r5, r3
 8002b72:	4614      	mov	r4, r2
 8002b74:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8002b76:	42bc      	cmp	r4, r7
 8002b78:	4626      	mov	r6, r4
 8002b7a:	d102      	bne.n	8002b82 <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8002b82:	7833      	ldrb	r3, [r6, #0]
 8002b84:	2b0a      	cmp	r3, #10
 8002b86:	f104 0401 	add.w	r4, r4, #1
 8002b8a:	d104      	bne.n	8002b96 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4641      	mov	r1, r8
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fdc9 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	4631      	mov	r1, r6
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fe fdc4 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
    count--;
 8002ba0:	e7e9      	b.n	8002b76 <_write_r+0xe>
 8002ba2:	bf00      	nop
 8002ba4:	08007c97 	.word	0x08007c97

08002ba8 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bac:	4770      	bx	lr

08002bae <_exit>:

void _exit(int status)
{
  while(1) {}
 8002bae:	e7fe      	b.n	8002bae <_exit>

08002bb0 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	4770      	bx	lr

08002bb4 <USART2_IRQHandler>:
  isr = uart->SR;
 8002bb4:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <USART2_IRQHandler+0xe0>)
 8002bb6:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002bb8:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	d50d      	bpl.n	8002bda <USART2_IRQHandler+0x26>
    c = uart->DR;
 8002bbe:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <USART2_IRQHandler+0xe4>)
 8002bc2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	3201      	adds	r2, #1
 8002bca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002bce:	d339      	bcc.n	8002c44 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 8002bd0:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002bd4:	3201      	adds	r2, #1
 8002bd6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 8002bda:	060a      	lsls	r2, r1, #24
 8002bdc:	d50a      	bpl.n	8002bf4 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <USART2_IRQHandler+0xe4>)
 8002be0:	482c      	ldr	r0, [pc, #176]	; (8002c94 <USART2_IRQHandler+0xe0>)
 8002be2:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002be6:	b292      	uxth	r2, r2
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d140      	bne.n	8002c6e <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8002bec:	68c3      	ldr	r3, [r0, #12]
 8002bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf2:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 8002bf4:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8002bf6:	bf41      	itttt	mi
 8002bf8:	4a26      	ldrmi	r2, [pc, #152]	; (8002c94 <USART2_IRQHandler+0xe0>)
 8002bfa:	68d3      	ldrmi	r3, [r2, #12]
 8002bfc:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8002c00:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 8002c02:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 8002c04:	bf41      	itttt	mi
 8002c06:	4a24      	ldrmi	r2, [pc, #144]	; (8002c98 <USART2_IRQHandler+0xe4>)
 8002c08:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 8002c0c:	3301      	addmi	r3, #1
 8002c0e:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8002c12:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 8002c14:	bf41      	itttt	mi
 8002c16:	4a20      	ldrmi	r2, [pc, #128]	; (8002c98 <USART2_IRQHandler+0xe4>)
 8002c18:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 8002c1c:	3301      	addmi	r3, #1
 8002c1e:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8002c22:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 8002c24:	bf41      	itttt	mi
 8002c26:	4a1c      	ldrmi	r2, [pc, #112]	; (8002c98 <USART2_IRQHandler+0xe4>)
 8002c28:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 8002c2c:	3301      	addmi	r3, #1
 8002c2e:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8002c32:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 8002c34:	bf41      	itttt	mi
 8002c36:	4a18      	ldrmi	r2, [pc, #96]	; (8002c98 <USART2_IRQHandler+0xe4>)
 8002c38:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 8002c3c:	3301      	addmi	r3, #1
 8002c3e:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 8002c42:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8002c44:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 8002c48:	3201      	adds	r2, #1
 8002c4a:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 8002c4e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002c52:	b292      	uxth	r2, r2
    c = uart->DR;
 8002c54:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002c56:	3201      	adds	r2, #1
 8002c58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c5c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 8002c60:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002c64:	3201      	adds	r2, #1
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002c6c:	e7b5      	b.n	8002bda <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 8002c6e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8002c72:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 8002c76:	3201      	adds	r2, #1
      uart->DR = c;
 8002c78:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 8002c7c:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 8002c7e:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 8002c82:	3801      	subs	r0, #1
 8002c84:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 8002c86:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8002c8a:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8002c8e:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8002c92:	e7af      	b.n	8002bf4 <USART2_IRQHandler+0x40>
 8002c94:	40004400 	.word	0x40004400
 8002c98:	20000210 	.word	0x20000210

08002c9c <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 8002c9c:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002ca0:	490d      	ldr	r1, [pc, #52]	; (8002cd8 <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 8002ca2:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <Default_IRQHandler+0x40>)
 8002ca6:	f7ff fecf 	bl	8002a48 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8002caa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <Default_IRQHandler+0x44>)
 8002cb0:	f7ff feca 	bl	8002a48 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8002cb4:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <Default_IRQHandler+0x48>)
 8002cb6:	f1a4 0110 	sub.w	r1, r4, #16
 8002cba:	f7ff fec5 	bl	8002a48 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <Default_IRQHandler+0x4c>)
 8002cc0:	480a      	ldr	r0, [pc, #40]	; (8002cec <Default_IRQHandler+0x50>)
 8002cc2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002cc6:	f7ff febf 	bl	8002a48 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8002cca:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <Default_IRQHandler+0x54>)
 8002ccc:	f7ff febc 	bl	8002a48 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8002cd0:	e7fe      	b.n	8002cd0 <Default_IRQHandler+0x34>
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00
 8002cd8:	080127c6 	.word	0x080127c6
 8002cdc:	0800764e 	.word	0x0800764e
 8002ce0:	08007685 	.word	0x08007685
 8002ce4:	080076c1 	.word	0x080076c1
 8002ce8:	0800d05c 	.word	0x0800d05c
 8002cec:	080076ea 	.word	0x080076ea
 8002cf0:	08007705 	.word	0x08007705

08002cf4 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf4:	4b69      	ldr	r3, [pc, #420]	; (8002e9c <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf6:	4c6a      	ldr	r4, [pc, #424]	; (8002ea0 <main+0x1ac>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8002cfe:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002d02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4f67      	ldr	r7, [pc, #412]	; (8002ea4 <main+0x1b0>)
 8002d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d0c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002d18:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 8002d1e:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8002d20:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8002d22:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d24:	2000      	movs	r0, #0
 8002d26:	b093      	sub	sp, #76	; 0x4c
 8002d28:	f7fe fcd6 	bl	80016d8 <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	; (8002eac <main+0x1b8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	920a      	str	r2, [sp, #40]	; 0x28
 8002d32:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d34:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002d38:	6459      	str	r1, [r3, #68]	; 0x44
 8002d3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d3c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002d40:	910a      	str	r1, [sp, #40]	; 0x28
 8002d42:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	9209      	str	r2, [sp, #36]	; 0x24
 8002d46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d48:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d4c:	6419      	str	r1, [r3, #64]	; 0x40
 8002d4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d50:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002d54:	9109      	str	r1, [sp, #36]	; 0x24
 8002d56:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002d5a:	4955      	ldr	r1, [pc, #340]	; (8002eb0 <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5c:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 8002d5e:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 8002d60:	60e1      	str	r1, [r4, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	9208      	str	r2, [sp, #32]
 8002d64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d66:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d6a:	6419      	str	r1, [r3, #64]	; 0x40
 8002d6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d6e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002d72:	9108      	str	r1, [sp, #32]
 8002d74:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d76:	9207      	str	r2, [sp, #28]
 8002d78:	4a4e      	ldr	r2, [pc, #312]	; (8002eb4 <main+0x1c0>)
 8002d7a:	6811      	ldr	r1, [r2, #0]
 8002d7c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002d88:	9207      	str	r2, [sp, #28]
 8002d8a:	9a07      	ldr	r2, [sp, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	f002 020c 	and.w	r2, r2, #12
 8002d92:	2a04      	cmp	r2, #4
 8002d94:	d007      	beq.n	8002da6 <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9c:	2a08      	cmp	r2, #8
 8002d9e:	d13c      	bne.n	8002e1a <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	0254      	lsls	r4, r2, #9
 8002da4:	d539      	bpl.n	8002e1a <main+0x126>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <main+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <main+0x1c4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002db2:	6839      	ldr	r1, [r7, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db4:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <main+0x1b8>)
 8002db6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002db8:	0792      	lsls	r2, r2, #30
 8002dba:	d541      	bpl.n	8002e40 <main+0x14c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	f002 020c 	and.w	r2, r2, #12
 8002dc2:	2a08      	cmp	r2, #8
 8002dc4:	d04b      	beq.n	8002e5e <main+0x16a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <main+0x1c4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
 8002dcc:	6839      	ldr	r1, [r7, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4a37      	ldr	r2, [pc, #220]	; (8002eac <main+0x1b8>)
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	019e      	lsls	r6, r3, #6
 8002dd4:	d439      	bmi.n	8002e4a <main+0x156>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <main+0x1c8>)
 8002dd8:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <main+0x1c4>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
 8002de0:	6839      	ldr	r1, [r7, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4a32      	ldr	r2, [pc, #200]	; (8002eac <main+0x1b8>)
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	019d      	lsls	r5, r3, #6
 8002de8:	d534      	bpl.n	8002e54 <main+0x160>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <main+0x1a8>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f002 0207 	and.w	r2, r2, #7
 8002df2:	2a02      	cmp	r2, #2
 8002df4:	d949      	bls.n	8002e8a <main+0x196>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df6:	492d      	ldr	r1, [pc, #180]	; (8002eac <main+0x1b8>)
 8002df8:	688b      	ldr	r3, [r1, #8]
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfe:	608b      	str	r3, [r1, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e00:	688b      	ldr	r3, [r1, #8]
 8002e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e06:	608b      	str	r3, [r1, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	688b      	ldr	r3, [r1, #8]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0e:	608b      	str	r3, [r1, #8]
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	680b      	ldr	r3, [r1, #0]
 8002e12:	0198      	lsls	r0, r3, #6
 8002e14:	d454      	bmi.n	8002ec0 <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e16:	b672      	cpsid	i
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <main+0x1b8>)
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	0398      	lsls	r0, r3, #14
 8002e32:	d4ba      	bmi.n	8002daa <main+0xb6>
 8002e34:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e36:	1a5b      	subs	r3, r3, r1
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d9f8      	bls.n	8002e2e <main+0x13a>
 8002e3c:	b672      	cpsid	i
 8002e3e:	e7fe      	b.n	8002e3e <main+0x14a>
 8002e40:	683a      	ldr	r2, [r7, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	1a52      	subs	r2, r2, r1
 8002e44:	2a02      	cmp	r2, #2
 8002e46:	d9b6      	bls.n	8002db6 <main+0xc2>
 8002e48:	e7f8      	b.n	8002e3c <main+0x148>
 8002e4a:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	1a5b      	subs	r3, r3, r1
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d9be      	bls.n	8002dd0 <main+0xdc>
 8002e52:	e7f3      	b.n	8002e3c <main+0x148>
 8002e54:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e56:	1a5b      	subs	r3, r3, r1
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d9c3      	bls.n	8002de4 <main+0xf0>
 8002e5c:	e7ee      	b.n	8002e3c <main+0x148>
        pll_config = RCC->PLLCFGR;
 8002e5e:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e60:	025c      	lsls	r4, r3, #9
 8002e62:	d5eb      	bpl.n	8002e3c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	2a04      	cmp	r2, #4
 8002e6a:	d1e7      	bne.n	8002e3c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002e70:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e72:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 8002e76:	d1e1      	bne.n	8002e3c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e78:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002e7c:	d1de      	bne.n	8002e3c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e7e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e86:	d1d9      	bne.n	8002e3c <main+0x148>
 8002e88:	e7af      	b.n	8002dea <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d1be      	bne.n	8002e16 <main+0x122>
 8002e98:	e7ad      	b.n	8002df6 <main+0x102>
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	e000ed00 	.word	0xe000ed00
 8002ea4:	20000c90 	.word	0x20000c90
 8002ea8:	05fa0300 	.word	0x05fa0300
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	05fa0700 	.word	0x05fa0700
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42470000 	.word	0x42470000
 8002ebc:	04401904 	.word	0x04401904
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec0:	688b      	ldr	r3, [r1, #8]
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	608b      	str	r3, [r1, #8]
 8002ecc:	683a      	ldr	r2, [r7, #0]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	688b      	ldr	r3, [r1, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f040 81c9 	bne.w	8003270 <main+0x57c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ede:	4bb5      	ldr	r3, [pc, #724]	; (80031b4 <main+0x4c0>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	0752      	lsls	r2, r2, #29
 8002ee4:	f100 81ca 	bmi.w	800327c <main+0x588>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee8:	688b      	ldr	r3, [r1, #8]
 8002eea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef2:	608b      	str	r3, [r1, #8]

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef4:	688b      	ldr	r3, [r1, #8]
 8002ef6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002efa:	608b      	str	r3, [r1, #8]
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efc:	688b      	ldr	r3, [r1, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	f000 81de 	beq.w	80032c4 <main+0x5d0>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f000 81c0 	beq.w	800328e <main+0x59a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f0e:	4daa      	ldr	r5, [pc, #680]	; (80031b8 <main+0x4c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f10:	4eaa      	ldr	r6, [pc, #680]	; (80031bc <main+0x4c8>)
 8002f12:	4aab      	ldr	r2, [pc, #684]	; (80031c0 <main+0x4cc>)
 8002f14:	68b3      	ldr	r3, [r6, #8]
 8002f16:	4cab      	ldr	r4, [pc, #684]	; (80031c4 <main+0x4d0>)
  huart2.Init.BaudRate = 115200;
 8002f18:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 80031f4 <main+0x500>
 8002f1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f04f 0800 	mov.w	r8, #0
 8002f24:	5cd0      	ldrb	r0, [r2, r3]
 8002f26:	4ba8      	ldr	r3, [pc, #672]	; (80031c8 <main+0x4d4>)
 8002f28:	40c5      	lsrs	r5, r0
 8002f2a:	601d      	str	r5, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002f2c:	4ba7      	ldr	r3, [pc, #668]	; (80031cc <main+0x4d8>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f7fe fbd2 	bl	80016d8 <HAL_InitTick.isra.0>
 8002f34:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f38:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f40:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f42:	48a3      	ldr	r0, [pc, #652]	; (80031d0 <main+0x4dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6333      	str	r3, [r6, #48]	; 0x30
 8002f4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	9306      	str	r3, [sp, #24]
 8002f52:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f54:	f8cd 8014 	str.w	r8, [sp, #20]
 8002f58:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	6333      	str	r3, [r6, #48]	; 0x30
 8002f60:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	9305      	str	r3, [sp, #20]
 8002f68:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8002f6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6333      	str	r3, [r6, #48]	; 0x30
 8002f76:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	9304      	str	r3, [sp, #16]
 8002f7e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	6333      	str	r3, [r6, #48]	; 0x30
 8002f8c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	9303      	str	r3, [sp, #12]
 8002f94:	9b03      	ldr	r3, [sp, #12]
 8002f96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f9a:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f9c:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8002fa0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fa6:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002faa:	f7fe f81f 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 8002fb6:	4c87      	ldr	r4, [pc, #540]	; (80031d4 <main+0x4e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb8:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fc0:	f7fe f814 	bl	8000fec <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002fc4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fc8:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fcc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fd0:	f8c4 8010 	str.w	r8, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fd6:	e9c4 8802 	strd	r8, r8, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	e9c4 2805 	strd	r2, r8, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fde:	f8c4 801c 	str.w	r8, [r4, #28]
 8002fe2:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002fe6:	bb4b      	cbnz	r3, 800303c <main+0x348>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fe8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fec:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ff4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffa:	6433      	str	r3, [r6, #64]	; 0x40
 8002ffc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	930c      	str	r3, [sp, #48]	; 0x30
 8003004:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800300a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6333      	str	r3, [r6, #48]	; 0x30
 8003012:	6b33      	ldr	r3, [r6, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003014:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	930b      	str	r3, [sp, #44]	; 0x2c
 800301c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003022:	2603      	movs	r6, #3
 8003024:	2307      	movs	r3, #7
 8003026:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f7fd ffdf 	bl	8000fec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800302e:	4641      	mov	r1, r8
 8003030:	2026      	movs	r0, #38	; 0x26
 8003032:	f7fe fadf 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <main+0x4e4>)
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	605a      	str	r2, [r3, #4]
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800303c:	6826      	ldr	r6, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303e:	68e2      	ldr	r2, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	2324      	movs	r3, #36	; 0x24
 8003042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003046:	68f3      	ldr	r3, [r6, #12]
 8003048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800304c:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304e:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003050:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003056:	4313      	orrs	r3, r2
 8003058:	6133      	str	r3, [r6, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800305c:	68f1      	ldr	r1, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305e:	69e2      	ldr	r2, [r4, #28]
 8003060:	4303      	orrs	r3, r0
 8003062:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003064:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003068:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800306a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800306e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8003070:	430b      	orrs	r3, r1
 8003072:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003074:	6973      	ldr	r3, [r6, #20]
 8003076:	69a1      	ldr	r1, [r4, #24]
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	430b      	orrs	r3, r1
 800307e:	6173      	str	r3, [r6, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003080:	4b56      	ldr	r3, [pc, #344]	; (80031dc <main+0x4e8>)
 8003082:	4957      	ldr	r1, [pc, #348]	; (80031e0 <main+0x4ec>)
 8003084:	429e      	cmp	r6, r3
 8003086:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	d003      	beq.n	8003096 <main+0x3a2>
 800308e:	4855      	ldr	r0, [pc, #340]	; (80031e4 <main+0x4f0>)
 8003090:	4286      	cmp	r6, r0
 8003092:	f040 8119 	bne.w	80032c8 <main+0x5d4>
 8003096:	f3c3 3342 	ubfx	r3, r3, #13, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800309a:	5cc9      	ldrb	r1, [r1, r3]
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	40cd      	lsrs	r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030a4:	f04f 0119 	mov.w	r1, #25
 80030a8:	fba5 0101 	umull	r0, r1, r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ac:	f040 810f 	bne.w	80032ce <main+0x5da>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b0:	18da      	adds	r2, r3, r3
 80030b2:	f04f 0500 	mov.w	r5, #0
 80030b6:	eb45 0305 	adc.w	r3, r5, r5
 80030ba:	f7fd fd9d 	bl	8000bf8 <__aeabi_uldivmod>
 80030be:	2164      	movs	r1, #100	; 0x64
 80030c0:	fbb0 f5f1 	udiv	r5, r0, r1
 80030c4:	fb01 0315 	mls	r3, r1, r5, r0
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	3332      	adds	r3, #50	; 0x32
 80030cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80030da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030de:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e0:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e2:	6933      	ldr	r3, [r6, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80030e4:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <main+0x4f4>)
 80030e6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030ea:	6133      	str	r3, [r6, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ec:	6973      	ldr	r3, [r6, #20]
 80030ee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80030f2:	6173      	str	r3, [r6, #20]
  __HAL_UART_ENABLE(huart);
 80030f4:	68f3      	ldr	r3, [r6, #12]
 80030f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030fa:	60f3      	str	r3, [r6, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	6423      	str	r3, [r4, #64]	; 0x40
  hiwdg.Instance = IWDG;
 8003100:	4e3a      	ldr	r6, [pc, #232]	; (80031ec <main+0x4f8>)
  huart->gState = HAL_UART_STATE_READY;
 8003102:	2320      	movs	r3, #32
 8003104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003108:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800310e:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 8003112:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003116:	e9c6 2100 	strd	r2, r1, [r6]
  hiwdg.Init.Reload = 4095;
 800311a:	60b3      	str	r3, [r6, #8]
 800311c:	6010      	str	r0, [r2, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800311e:	f245 5055 	movw	r0, #21845	; 0x5555
 8003122:	6010      	str	r0, [r2, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003124:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	6839      	ldr	r1, [r7, #0]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800312a:	68d3      	ldr	r3, [r2, #12]
 800312c:	f013 0303 	ands.w	r3, r3, #3
 8003130:	f040 80dd 	bne.w	80032ee <main+0x5fa>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003134:	4c2e      	ldr	r4, [pc, #184]	; (80031f0 <main+0x4fc>)
 8003136:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003138:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	6840      	ldr	r0, [r0, #4]
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	4619      	mov	r1, r3
 8003144:	2202      	movs	r2, #2
 8003146:	f000 fe01 	bl	8003d4c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800314a:	6820      	ldr	r0, [r4, #0]
 800314c:	9b01      	ldr	r3, [sp, #4]
 800314e:	6880      	ldr	r0, [r0, #8]
 8003150:	4619      	mov	r1, r3
 8003152:	2202      	movs	r2, #2
 8003154:	f000 fdfa 	bl	8003d4c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	68c0      	ldr	r0, [r0, #12]
 800315e:	2202      	movs	r2, #2
 8003160:	4619      	mov	r1, r3
 8003162:	f000 fdf3 	bl	8003d4c <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <main+0x500>)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800316e:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8003178:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800317c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 800317e:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8003182:	d052      	beq.n	800322a <main+0x536>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8003184:	481c      	ldr	r0, [pc, #112]	; (80031f8 <main+0x504>)
 8003186:	f003 f859 	bl	800623c <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 800318a:	2c00      	cmp	r4, #0
 800318c:	da02      	bge.n	8003194 <main+0x4a0>
 800318e:	481b      	ldr	r0, [pc, #108]	; (80031fc <main+0x508>)
 8003190:	f003 f854 	bl	800623c <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8003194:	0067      	lsls	r7, r4, #1
 8003196:	d502      	bpl.n	800319e <main+0x4aa>
 8003198:	4819      	ldr	r0, [pc, #100]	; (8003200 <main+0x50c>)
 800319a:	f003 f84f 	bl	800623c <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 800319e:	00a5      	lsls	r5, r4, #2
 80031a0:	d502      	bpl.n	80031a8 <main+0x4b4>
 80031a2:	4818      	ldr	r0, [pc, #96]	; (8003204 <main+0x510>)
 80031a4:	f003 f84a 	bl	800623c <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 80031a8:	00e0      	lsls	r0, r4, #3
 80031aa:	d52f      	bpl.n	800320c <main+0x518>
 80031ac:	4816      	ldr	r0, [pc, #88]	; (8003208 <main+0x514>)
 80031ae:	f003 f845 	bl	800623c <puts>
 80031b2:	e02b      	b.n	800320c <main+0x518>
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	40023800 	.word	0x40023800
 80031c0:	0800a5b4 	.word	0x0800a5b4
 80031c4:	40020000 	.word	0x40020000
 80031c8:	20000004 	.word	0x20000004
 80031cc:	20000014 	.word	0x20000014
 80031d0:	40020800 	.word	0x40020800
 80031d4:	20000ba0 	.word	0x20000ba0
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	40011000 	.word	0x40011000
 80031e0:	0800a5c4 	.word	0x0800a5c4
 80031e4:	40011400 	.word	0x40011400
 80031e8:	40003000 	.word	0x40003000
 80031ec:	20000a74 	.word	0x20000a74
 80031f0:	20000018 	.word	0x20000018
 80031f4:	40004400 	.word	0x40004400
 80031f8:	0800772f 	.word	0x0800772f
 80031fc:	08007767 	.word	0x08007767
 8003200:	08007772 	.word	0x08007772
 8003204:	08007785 	.word	0x08007785
 8003208:	080077a4 	.word	0x080077a4
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 800320c:	01a1      	lsls	r1, r4, #6
 800320e:	d502      	bpl.n	8003216 <main+0x522>
 8003210:	484f      	ldr	r0, [pc, #316]	; (8003350 <main+0x65c>)
 8003212:	f003 f813 	bl	800623c <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8003216:	0162      	lsls	r2, r4, #5
 8003218:	d502      	bpl.n	8003220 <main+0x52c>
 800321a:	484e      	ldr	r0, [pc, #312]	; (8003354 <main+0x660>)
 800321c:	f003 f80e 	bl	800623c <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8003220:	0123      	lsls	r3, r4, #4
 8003222:	d502      	bpl.n	800322a <main+0x536>
 8003224:	484c      	ldr	r0, [pc, #304]	; (8003358 <main+0x664>)
 8003226:	f003 f809 	bl	800623c <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 800322a:	4b4c      	ldr	r3, [pc, #304]	; (800335c <main+0x668>)
 800322c:	4d4c      	ldr	r5, [pc, #304]	; (8003360 <main+0x66c>)
  p = _tasktable_start;
 800322e:	4c4d      	ldr	r4, [pc, #308]	; (8003364 <main+0x670>)
  while(p != _tasktable_end) {
 8003230:	4f4d      	ldr	r7, [pc, #308]	; (8003368 <main+0x674>)
 8003232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003236:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 8003238:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 800323c:	42bc      	cmp	r4, r7
 800323e:	d161      	bne.n	8003304 <main+0x610>
  my_Init();
 8003240:	f7fc ffe4 	bl	800020c <my_Init>
  ticks = AccumTicks;
 8003244:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003374 <main+0x680>
  AccumTicks = 0;
 8003248:	f04f 0a00 	mov.w	sl, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800324c:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 8003250:	b672      	cpsid	i
  ticks = AccumTicks;
 8003252:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 8003256:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 800325a:	b662      	cpsie	i
  s = _taskstate_start;
 800325c:	4d40      	ldr	r5, [pc, #256]	; (8003360 <main+0x66c>)
  p = _tasktable_start;
 800325e:	4c41      	ldr	r4, [pc, #260]	; (8003364 <main+0x670>)
  while(p != _tasktable_end) {
 8003260:	42bc      	cmp	r4, r7
 8003262:	d157      	bne.n	8003314 <main+0x620>
  my_Loop();
 8003264:	f7fc ffd0 	bl	8000208 <my_Loop>
 8003268:	6833      	ldr	r3, [r6, #0]
 800326a:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 800326e:	e7ef      	b.n	8003250 <main+0x55c>
 8003270:	683b      	ldr	r3, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	4283      	cmp	r3, r0
 8003276:	f67f ae2c 	bls.w	8002ed2 <main+0x1de>
 800327a:	e5cc      	b.n	8002e16 <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327c:	2203      	movs	r2, #3
 800327e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	4293      	cmp	r3, r2
 8003288:	f47f adc5 	bne.w	8002e16 <main+0x122>
 800328c:	e62c      	b.n	8002ee8 <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800328e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003290:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003294:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003298:	bf14      	ite	ne
 800329a:	4834      	ldrne	r0, [pc, #208]	; (800336c <main+0x678>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329c:	4834      	ldreq	r0, [pc, #208]	; (8003370 <main+0x67c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80032a2:	bf18      	it	ne
 80032a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032aa:	fba1 0100 	umull	r0, r1, r1, r0
 80032ae:	f7fd fca3 	bl	8000bf8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b2:	4b2a      	ldr	r3, [pc, #168]	; (800335c <main+0x668>)
 80032b4:	685d      	ldr	r5, [r3, #4]
 80032b6:	f3c5 4501 	ubfx	r5, r5, #16, #2
 80032ba:	3501      	adds	r5, #1
 80032bc:	006d      	lsls	r5, r5, #1
      sysclockfreq = pllvco/pllp;
 80032be:	fbb0 f5f5 	udiv	r5, r0, r5
  return sysclockfreq;
 80032c2:	e625      	b.n	8002f10 <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c4:	4d29      	ldr	r5, [pc, #164]	; (800336c <main+0x678>)
 80032c6:	e623      	b.n	8002f10 <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80032cc:	e6e5      	b.n	800309a <main+0x3a6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ce:	009a      	lsls	r2, r3, #2
 80032d0:	0f9b      	lsrs	r3, r3, #30
 80032d2:	f7fd fc91 	bl	8000bf8 <__aeabi_uldivmod>
 80032d6:	2264      	movs	r2, #100	; 0x64
 80032d8:	fbb0 f1f2 	udiv	r1, r0, r2
 80032dc:	fb02 0311 	mls	r3, r2, r1, r0
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80032ec:	e6f8      	b.n	80030e0 <main+0x3ec>
 80032ee:	683b      	ldr	r3, [r7, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80032f0:	1a5b      	subs	r3, r3, r1
 80032f2:	2b31      	cmp	r3, #49	; 0x31
 80032f4:	f67f af19 	bls.w	800312a <main+0x436>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80032f8:	68d3      	ldr	r3, [r2, #12]
 80032fa:	079b      	lsls	r3, r3, #30
 80032fc:	f43f af15 	beq.w	800312a <main+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 8003300:	b672      	cpsid	i
  while (1)
 8003302:	e7fe      	b.n	8003302 <main+0x60e>
    if(p->initFunc != NULL) {
 8003304:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8003306:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 800330a:	b10b      	cbz	r3, 8003310 <main+0x61c>
      p->initFunc(p->data);
 800330c:	68e0      	ldr	r0, [r4, #12]
 800330e:	4798      	blx	r3
    p++;
 8003310:	3418      	adds	r4, #24
    s++;
 8003312:	e793      	b.n	800323c <main+0x548>
    if(p->func != NULL) {
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	b11b      	cbz	r3, 8003320 <main+0x62c>
      if(p->interval == 0) {
 8003318:	6922      	ldr	r2, [r4, #16]
 800331a:	b9b2      	cbnz	r2, 800334a <main+0x656>
	p->func(p->data);
 800331c:	68e0      	ldr	r0, [r4, #12]
 800331e:	4798      	blx	r3
    p++;
 8003320:	3418      	adds	r4, #24
    s++;
 8003322:	3504      	adds	r5, #4
 8003324:	e79c      	b.n	8003260 <main+0x56c>
	  if(s->interval) {
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	b953      	cbnz	r3, 8003340 <main+0x64c>
	    p->func(p->data);
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	68e0      	ldr	r0, [r4, #12]
 800332e:	9201      	str	r2, [sp, #4]
 8003330:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	9a01      	ldr	r2, [sp, #4]
 8003336:	602b      	str	r3, [r5, #0]
 8003338:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 800333a:	2a00      	cmp	r2, #0
 800333c:	d1f3      	bne.n	8003326 <main+0x632>
 800333e:	e7ef      	b.n	8003320 <main+0x62c>
	    s->interval--;
 8003340:	3b01      	subs	r3, #1
 8003342:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f7      	bne.n	8003338 <main+0x644>
 8003348:	e7ef      	b.n	800332a <main+0x636>
 800334a:	465a      	mov	r2, fp
 800334c:	e7f5      	b.n	800333a <main+0x646>
 800334e:	bf00      	nop
 8003350:	080077ae 	.word	0x080077ae
 8003354:	080077b8 	.word	0x080077b8
 8003358:	080077c2 	.word	0x080077c2
 800335c:	40023800 	.word	0x40023800
 8003360:	200001e8 	.word	0x200001e8
 8003364:	08012c78 	.word	0x08012c78
 8003368:	08012c90 	.word	0x08012c90
 800336c:	007a1200 	.word	0x007a1200
 8003370:	00f42400 	.word	0x00f42400
 8003374:	20000208 	.word	0x20000208

08003378 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <NMI_Handler>

0800337a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337a:	e7fe      	b.n	800337a <HardFault_Handler>

0800337c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <MemManage_Handler>

0800337e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337e:	e7fe      	b.n	800337e <BusFault_Handler>

08003380 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003380:	e7fe      	b.n	8003380 <UsageFault_Handler>

08003382 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003382:	4770      	bx	lr

08003384 <DebugMon_Handler>:
 8003384:	4770      	bx	lr

08003386 <PendSV_Handler>:
 8003386:	4770      	bx	lr

08003388 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8003388:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338a:	b508      	push	{r3, lr}
 800338c:	6813      	ldr	r3, [r2, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 8003392:	f7fc ff2f 	bl	80001f4 <my_Tick>
  AccumTicks++;
 8003396:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <SysTick_Handler+0x1c>)
 8003398:	6813      	ldr	r3, [r2, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 800339e:	bd08      	pop	{r3, pc}
 80033a0:	20000c90 	.word	0x20000c90
 80033a4:	20000208 	.word	0x20000208

080033a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a8:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <SystemInit+0x10>)
 80033aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033c2:	490e      	ldr	r1, [pc, #56]	; (80033fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c8:	e002      	b.n	80033d0 <LoopCopyDataInit>

080033ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ce:	3304      	adds	r3, #4

080033d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d4:	d3f9      	bcc.n	80033ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033d8:	4c0b      	ldr	r4, [pc, #44]	; (8003408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033dc:	e001      	b.n	80033e2 <LoopFillZerobss>

080033de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e0:	3204      	adds	r2, #4

080033e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e4:	d3fb      	bcc.n	80033de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033e6:	f7ff ffdf 	bl	80033a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ea:	f000 f819 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7ff fc81 	bl	8002cf4 <main>
  bx  lr    
 80033f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003400:	08012d6c 	.word	0x08012d6c
  ldr r2, =_sbss
 8003404:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003408:	20000ca4 	.word	0x20000ca4

0800340c <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 800340c:	f7ff fc46 	bl	8002c9c <Default_IRQHandler>
  b  Infinite_Loop
 8003410:	e7fc      	b.n	800340c <ADC_IRQHandler>
	...

08003414 <__errno>:
 8003414:	4b01      	ldr	r3, [pc, #4]	; (800341c <__errno+0x8>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000018 	.word	0x20000018

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4d0d      	ldr	r5, [pc, #52]	; (8003458 <__libc_init_array+0x38>)
 8003424:	4c0d      	ldr	r4, [pc, #52]	; (800345c <__libc_init_array+0x3c>)
 8003426:	1b64      	subs	r4, r4, r5
 8003428:	10a4      	asrs	r4, r4, #2
 800342a:	2600      	movs	r6, #0
 800342c:	42a6      	cmp	r6, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	4d0b      	ldr	r5, [pc, #44]	; (8003460 <__libc_init_array+0x40>)
 8003432:	4c0c      	ldr	r4, [pc, #48]	; (8003464 <__libc_init_array+0x44>)
 8003434:	f003 f90a 	bl	800664c <_init>
 8003438:	1b64      	subs	r4, r4, r5
 800343a:	10a4      	asrs	r4, r4, #2
 800343c:	2600      	movs	r6, #0
 800343e:	42a6      	cmp	r6, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f855 3b04 	ldr.w	r3, [r5], #4
 8003448:	4798      	blx	r3
 800344a:	3601      	adds	r6, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003452:	4798      	blx	r3
 8003454:	3601      	adds	r6, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	08012d64 	.word	0x08012d64
 800345c:	08012d64 	.word	0x08012d64
 8003460:	08012d64 	.word	0x08012d64
 8003464:	08012d68 	.word	0x08012d68

08003468 <memset>:
 8003468:	4402      	add	r2, r0
 800346a:	4603      	mov	r3, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	d100      	bne.n	8003472 <memset+0xa>
 8003470:	4770      	bx	lr
 8003472:	f803 1b01 	strb.w	r1, [r3], #1
 8003476:	e7f9      	b.n	800346c <memset+0x4>

08003478 <__cvt>:
 8003478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800347c:	ec55 4b10 	vmov	r4, r5, d0
 8003480:	2d00      	cmp	r5, #0
 8003482:	460e      	mov	r6, r1
 8003484:	4619      	mov	r1, r3
 8003486:	462b      	mov	r3, r5
 8003488:	bfbb      	ittet	lt
 800348a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800348e:	461d      	movlt	r5, r3
 8003490:	2300      	movge	r3, #0
 8003492:	232d      	movlt	r3, #45	; 0x2d
 8003494:	700b      	strb	r3, [r1, #0]
 8003496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003498:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800349c:	4691      	mov	r9, r2
 800349e:	f023 0820 	bic.w	r8, r3, #32
 80034a2:	bfbc      	itt	lt
 80034a4:	4622      	movlt	r2, r4
 80034a6:	4614      	movlt	r4, r2
 80034a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034ac:	d005      	beq.n	80034ba <__cvt+0x42>
 80034ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80034b2:	d100      	bne.n	80034b6 <__cvt+0x3e>
 80034b4:	3601      	adds	r6, #1
 80034b6:	2102      	movs	r1, #2
 80034b8:	e000      	b.n	80034bc <__cvt+0x44>
 80034ba:	2103      	movs	r1, #3
 80034bc:	ab03      	add	r3, sp, #12
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	ab02      	add	r3, sp, #8
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	ec45 4b10 	vmov	d0, r4, r5
 80034c8:	4653      	mov	r3, sl
 80034ca:	4632      	mov	r2, r6
 80034cc:	f000 fe88 	bl	80041e0 <_dtoa_r>
 80034d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034d4:	4607      	mov	r7, r0
 80034d6:	d102      	bne.n	80034de <__cvt+0x66>
 80034d8:	f019 0f01 	tst.w	r9, #1
 80034dc:	d022      	beq.n	8003524 <__cvt+0xac>
 80034de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034e2:	eb07 0906 	add.w	r9, r7, r6
 80034e6:	d110      	bne.n	800350a <__cvt+0x92>
 80034e8:	783b      	ldrb	r3, [r7, #0]
 80034ea:	2b30      	cmp	r3, #48	; 0x30
 80034ec:	d10a      	bne.n	8003504 <__cvt+0x8c>
 80034ee:	2200      	movs	r2, #0
 80034f0:	2300      	movs	r3, #0
 80034f2:	4620      	mov	r0, r4
 80034f4:	4629      	mov	r1, r5
 80034f6:	f7fd fb0f 	bl	8000b18 <__aeabi_dcmpeq>
 80034fa:	b918      	cbnz	r0, 8003504 <__cvt+0x8c>
 80034fc:	f1c6 0601 	rsb	r6, r6, #1
 8003500:	f8ca 6000 	str.w	r6, [sl]
 8003504:	f8da 3000 	ldr.w	r3, [sl]
 8003508:	4499      	add	r9, r3
 800350a:	2200      	movs	r2, #0
 800350c:	2300      	movs	r3, #0
 800350e:	4620      	mov	r0, r4
 8003510:	4629      	mov	r1, r5
 8003512:	f7fd fb01 	bl	8000b18 <__aeabi_dcmpeq>
 8003516:	b108      	cbz	r0, 800351c <__cvt+0xa4>
 8003518:	f8cd 900c 	str.w	r9, [sp, #12]
 800351c:	2230      	movs	r2, #48	; 0x30
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	454b      	cmp	r3, r9
 8003522:	d307      	bcc.n	8003534 <__cvt+0xbc>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003528:	1bdb      	subs	r3, r3, r7
 800352a:	4638      	mov	r0, r7
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	b004      	add	sp, #16
 8003530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003534:	1c59      	adds	r1, r3, #1
 8003536:	9103      	str	r1, [sp, #12]
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e7f0      	b.n	800351e <__cvt+0xa6>

0800353c <__exponent>:
 800353c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800353e:	4603      	mov	r3, r0
 8003540:	2900      	cmp	r1, #0
 8003542:	bfb8      	it	lt
 8003544:	4249      	neglt	r1, r1
 8003546:	f803 2b02 	strb.w	r2, [r3], #2
 800354a:	bfb4      	ite	lt
 800354c:	222d      	movlt	r2, #45	; 0x2d
 800354e:	222b      	movge	r2, #43	; 0x2b
 8003550:	2909      	cmp	r1, #9
 8003552:	7042      	strb	r2, [r0, #1]
 8003554:	dd2a      	ble.n	80035ac <__exponent+0x70>
 8003556:	f10d 0407 	add.w	r4, sp, #7
 800355a:	46a4      	mov	ip, r4
 800355c:	270a      	movs	r7, #10
 800355e:	46a6      	mov	lr, r4
 8003560:	460a      	mov	r2, r1
 8003562:	fb91 f6f7 	sdiv	r6, r1, r7
 8003566:	fb07 1516 	mls	r5, r7, r6, r1
 800356a:	3530      	adds	r5, #48	; 0x30
 800356c:	2a63      	cmp	r2, #99	; 0x63
 800356e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003572:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003576:	4631      	mov	r1, r6
 8003578:	dcf1      	bgt.n	800355e <__exponent+0x22>
 800357a:	3130      	adds	r1, #48	; 0x30
 800357c:	f1ae 0502 	sub.w	r5, lr, #2
 8003580:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003584:	1c44      	adds	r4, r0, #1
 8003586:	4629      	mov	r1, r5
 8003588:	4561      	cmp	r1, ip
 800358a:	d30a      	bcc.n	80035a2 <__exponent+0x66>
 800358c:	f10d 0209 	add.w	r2, sp, #9
 8003590:	eba2 020e 	sub.w	r2, r2, lr
 8003594:	4565      	cmp	r5, ip
 8003596:	bf88      	it	hi
 8003598:	2200      	movhi	r2, #0
 800359a:	4413      	add	r3, r2
 800359c:	1a18      	subs	r0, r3, r0
 800359e:	b003      	add	sp, #12
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80035aa:	e7ed      	b.n	8003588 <__exponent+0x4c>
 80035ac:	2330      	movs	r3, #48	; 0x30
 80035ae:	3130      	adds	r1, #48	; 0x30
 80035b0:	7083      	strb	r3, [r0, #2]
 80035b2:	70c1      	strb	r1, [r0, #3]
 80035b4:	1d03      	adds	r3, r0, #4
 80035b6:	e7f1      	b.n	800359c <__exponent+0x60>

080035b8 <_printf_float>:
 80035b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035bc:	ed2d 8b02 	vpush	{d8}
 80035c0:	b08d      	sub	sp, #52	; 0x34
 80035c2:	460c      	mov	r4, r1
 80035c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80035c8:	4616      	mov	r6, r2
 80035ca:	461f      	mov	r7, r3
 80035cc:	4605      	mov	r5, r0
 80035ce:	f001 fdbf 	bl	8005150 <_localeconv_r>
 80035d2:	f8d0 a000 	ldr.w	sl, [r0]
 80035d6:	4650      	mov	r0, sl
 80035d8:	f7fc fe1c 	bl	8000214 <strlen>
 80035dc:	2300      	movs	r3, #0
 80035de:	930a      	str	r3, [sp, #40]	; 0x28
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	9305      	str	r3, [sp, #20]
 80035e4:	f8d8 3000 	ldr.w	r3, [r8]
 80035e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80035ec:	3307      	adds	r3, #7
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	f103 0208 	add.w	r2, r3, #8
 80035f6:	f8c8 2000 	str.w	r2, [r8]
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003602:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800360a:	9307      	str	r3, [sp, #28]
 800360c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003610:	ee08 0a10 	vmov	s16, r0
 8003614:	4b9f      	ldr	r3, [pc, #636]	; (8003894 <_printf_float+0x2dc>)
 8003616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800361a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800361e:	f7fd faad 	bl	8000b7c <__aeabi_dcmpun>
 8003622:	bb88      	cbnz	r0, 8003688 <_printf_float+0xd0>
 8003624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003628:	4b9a      	ldr	r3, [pc, #616]	; (8003894 <_printf_float+0x2dc>)
 800362a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362e:	f7fd fa87 	bl	8000b40 <__aeabi_dcmple>
 8003632:	bb48      	cbnz	r0, 8003688 <_printf_float+0xd0>
 8003634:	2200      	movs	r2, #0
 8003636:	2300      	movs	r3, #0
 8003638:	4640      	mov	r0, r8
 800363a:	4649      	mov	r1, r9
 800363c:	f7fd fa76 	bl	8000b2c <__aeabi_dcmplt>
 8003640:	b110      	cbz	r0, 8003648 <_printf_float+0x90>
 8003642:	232d      	movs	r3, #45	; 0x2d
 8003644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003648:	4b93      	ldr	r3, [pc, #588]	; (8003898 <_printf_float+0x2e0>)
 800364a:	4894      	ldr	r0, [pc, #592]	; (800389c <_printf_float+0x2e4>)
 800364c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003650:	bf94      	ite	ls
 8003652:	4698      	movls	r8, r3
 8003654:	4680      	movhi	r8, r0
 8003656:	2303      	movs	r3, #3
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	9b05      	ldr	r3, [sp, #20]
 800365c:	f023 0204 	bic.w	r2, r3, #4
 8003660:	6022      	str	r2, [r4, #0]
 8003662:	f04f 0900 	mov.w	r9, #0
 8003666:	9700      	str	r7, [sp, #0]
 8003668:	4633      	mov	r3, r6
 800366a:	aa0b      	add	r2, sp, #44	; 0x2c
 800366c:	4621      	mov	r1, r4
 800366e:	4628      	mov	r0, r5
 8003670:	f000 f9d8 	bl	8003a24 <_printf_common>
 8003674:	3001      	adds	r0, #1
 8003676:	f040 8090 	bne.w	800379a <_printf_float+0x1e2>
 800367a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367e:	b00d      	add	sp, #52	; 0x34
 8003680:	ecbd 8b02 	vpop	{d8}
 8003684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	4640      	mov	r0, r8
 800368e:	4649      	mov	r1, r9
 8003690:	f7fd fa74 	bl	8000b7c <__aeabi_dcmpun>
 8003694:	b140      	cbz	r0, 80036a8 <_printf_float+0xf0>
 8003696:	464b      	mov	r3, r9
 8003698:	2b00      	cmp	r3, #0
 800369a:	bfbc      	itt	lt
 800369c:	232d      	movlt	r3, #45	; 0x2d
 800369e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80036a2:	487f      	ldr	r0, [pc, #508]	; (80038a0 <_printf_float+0x2e8>)
 80036a4:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <_printf_float+0x2ec>)
 80036a6:	e7d1      	b.n	800364c <_printf_float+0x94>
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80036ae:	9206      	str	r2, [sp, #24]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	d13f      	bne.n	8003734 <_printf_float+0x17c>
 80036b4:	2306      	movs	r3, #6
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	9b05      	ldr	r3, [sp, #20]
 80036ba:	6861      	ldr	r1, [r4, #4]
 80036bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036c0:	2300      	movs	r3, #0
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	ab0a      	add	r3, sp, #40	; 0x28
 80036c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80036ca:	ab09      	add	r3, sp, #36	; 0x24
 80036cc:	ec49 8b10 	vmov	d0, r8, r9
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6022      	str	r2, [r4, #0]
 80036d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80036d8:	4628      	mov	r0, r5
 80036da:	f7ff fecd 	bl	8003478 <__cvt>
 80036de:	9b06      	ldr	r3, [sp, #24]
 80036e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036e2:	2b47      	cmp	r3, #71	; 0x47
 80036e4:	4680      	mov	r8, r0
 80036e6:	d108      	bne.n	80036fa <_printf_float+0x142>
 80036e8:	1cc8      	adds	r0, r1, #3
 80036ea:	db02      	blt.n	80036f2 <_printf_float+0x13a>
 80036ec:	6863      	ldr	r3, [r4, #4]
 80036ee:	4299      	cmp	r1, r3
 80036f0:	dd41      	ble.n	8003776 <_printf_float+0x1be>
 80036f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80036f6:	fa5f fb8b 	uxtb.w	fp, fp
 80036fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80036fe:	d820      	bhi.n	8003742 <_printf_float+0x18a>
 8003700:	3901      	subs	r1, #1
 8003702:	465a      	mov	r2, fp
 8003704:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003708:	9109      	str	r1, [sp, #36]	; 0x24
 800370a:	f7ff ff17 	bl	800353c <__exponent>
 800370e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003710:	1813      	adds	r3, r2, r0
 8003712:	2a01      	cmp	r2, #1
 8003714:	4681      	mov	r9, r0
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	dc02      	bgt.n	8003720 <_printf_float+0x168>
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	07d2      	lsls	r2, r2, #31
 800371e:	d501      	bpl.n	8003724 <_printf_float+0x16c>
 8003720:	3301      	adds	r3, #1
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003728:	2b00      	cmp	r3, #0
 800372a:	d09c      	beq.n	8003666 <_printf_float+0xae>
 800372c:	232d      	movs	r3, #45	; 0x2d
 800372e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003732:	e798      	b.n	8003666 <_printf_float+0xae>
 8003734:	9a06      	ldr	r2, [sp, #24]
 8003736:	2a47      	cmp	r2, #71	; 0x47
 8003738:	d1be      	bne.n	80036b8 <_printf_float+0x100>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1bc      	bne.n	80036b8 <_printf_float+0x100>
 800373e:	2301      	movs	r3, #1
 8003740:	e7b9      	b.n	80036b6 <_printf_float+0xfe>
 8003742:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003746:	d118      	bne.n	800377a <_printf_float+0x1c2>
 8003748:	2900      	cmp	r1, #0
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	dd0b      	ble.n	8003766 <_printf_float+0x1ae>
 800374e:	6121      	str	r1, [r4, #16]
 8003750:	b913      	cbnz	r3, 8003758 <_printf_float+0x1a0>
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	07d0      	lsls	r0, r2, #31
 8003756:	d502      	bpl.n	800375e <_printf_float+0x1a6>
 8003758:	3301      	adds	r3, #1
 800375a:	440b      	add	r3, r1
 800375c:	6123      	str	r3, [r4, #16]
 800375e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003760:	f04f 0900 	mov.w	r9, #0
 8003764:	e7de      	b.n	8003724 <_printf_float+0x16c>
 8003766:	b913      	cbnz	r3, 800376e <_printf_float+0x1b6>
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	07d2      	lsls	r2, r2, #31
 800376c:	d501      	bpl.n	8003772 <_printf_float+0x1ba>
 800376e:	3302      	adds	r3, #2
 8003770:	e7f4      	b.n	800375c <_printf_float+0x1a4>
 8003772:	2301      	movs	r3, #1
 8003774:	e7f2      	b.n	800375c <_printf_float+0x1a4>
 8003776:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800377c:	4299      	cmp	r1, r3
 800377e:	db05      	blt.n	800378c <_printf_float+0x1d4>
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	6121      	str	r1, [r4, #16]
 8003784:	07d8      	lsls	r0, r3, #31
 8003786:	d5ea      	bpl.n	800375e <_printf_float+0x1a6>
 8003788:	1c4b      	adds	r3, r1, #1
 800378a:	e7e7      	b.n	800375c <_printf_float+0x1a4>
 800378c:	2900      	cmp	r1, #0
 800378e:	bfd4      	ite	le
 8003790:	f1c1 0202 	rsble	r2, r1, #2
 8003794:	2201      	movgt	r2, #1
 8003796:	4413      	add	r3, r2
 8003798:	e7e0      	b.n	800375c <_printf_float+0x1a4>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	055a      	lsls	r2, r3, #21
 800379e:	d407      	bmi.n	80037b0 <_printf_float+0x1f8>
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	4642      	mov	r2, r8
 80037a4:	4631      	mov	r1, r6
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	d12c      	bne.n	8003808 <_printf_float+0x250>
 80037ae:	e764      	b.n	800367a <_printf_float+0xc2>
 80037b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037b4:	f240 80e0 	bls.w	8003978 <_printf_float+0x3c0>
 80037b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037bc:	2200      	movs	r2, #0
 80037be:	2300      	movs	r3, #0
 80037c0:	f7fd f9aa 	bl	8000b18 <__aeabi_dcmpeq>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d034      	beq.n	8003832 <_printf_float+0x27a>
 80037c8:	4a37      	ldr	r2, [pc, #220]	; (80038a8 <_printf_float+0x2f0>)
 80037ca:	2301      	movs	r3, #1
 80037cc:	4631      	mov	r1, r6
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b8      	blx	r7
 80037d2:	3001      	adds	r0, #1
 80037d4:	f43f af51 	beq.w	800367a <_printf_float+0xc2>
 80037d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037dc:	429a      	cmp	r2, r3
 80037de:	db02      	blt.n	80037e6 <_printf_float+0x22e>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	07d8      	lsls	r0, r3, #31
 80037e4:	d510      	bpl.n	8003808 <_printf_float+0x250>
 80037e6:	ee18 3a10 	vmov	r3, s16
 80037ea:	4652      	mov	r2, sl
 80037ec:	4631      	mov	r1, r6
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	f43f af41 	beq.w	800367a <_printf_float+0xc2>
 80037f8:	f04f 0800 	mov.w	r8, #0
 80037fc:	f104 091a 	add.w	r9, r4, #26
 8003800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	4543      	cmp	r3, r8
 8003806:	dc09      	bgt.n	800381c <_printf_float+0x264>
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	079b      	lsls	r3, r3, #30
 800380c:	f100 8105 	bmi.w	8003a1a <_printf_float+0x462>
 8003810:	68e0      	ldr	r0, [r4, #12]
 8003812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003814:	4298      	cmp	r0, r3
 8003816:	bfb8      	it	lt
 8003818:	4618      	movlt	r0, r3
 800381a:	e730      	b.n	800367e <_printf_float+0xc6>
 800381c:	2301      	movs	r3, #1
 800381e:	464a      	mov	r2, r9
 8003820:	4631      	mov	r1, r6
 8003822:	4628      	mov	r0, r5
 8003824:	47b8      	blx	r7
 8003826:	3001      	adds	r0, #1
 8003828:	f43f af27 	beq.w	800367a <_printf_float+0xc2>
 800382c:	f108 0801 	add.w	r8, r8, #1
 8003830:	e7e6      	b.n	8003800 <_printf_float+0x248>
 8003832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	dc39      	bgt.n	80038ac <_printf_float+0x2f4>
 8003838:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <_printf_float+0x2f0>)
 800383a:	2301      	movs	r3, #1
 800383c:	4631      	mov	r1, r6
 800383e:	4628      	mov	r0, r5
 8003840:	47b8      	blx	r7
 8003842:	3001      	adds	r0, #1
 8003844:	f43f af19 	beq.w	800367a <_printf_float+0xc2>
 8003848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800384c:	4313      	orrs	r3, r2
 800384e:	d102      	bne.n	8003856 <_printf_float+0x29e>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	07d9      	lsls	r1, r3, #31
 8003854:	d5d8      	bpl.n	8003808 <_printf_float+0x250>
 8003856:	ee18 3a10 	vmov	r3, s16
 800385a:	4652      	mov	r2, sl
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	f43f af09 	beq.w	800367a <_printf_float+0xc2>
 8003868:	f04f 0900 	mov.w	r9, #0
 800386c:	f104 0a1a 	add.w	sl, r4, #26
 8003870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003872:	425b      	negs	r3, r3
 8003874:	454b      	cmp	r3, r9
 8003876:	dc01      	bgt.n	800387c <_printf_float+0x2c4>
 8003878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800387a:	e792      	b.n	80037a2 <_printf_float+0x1ea>
 800387c:	2301      	movs	r3, #1
 800387e:	4652      	mov	r2, sl
 8003880:	4631      	mov	r1, r6
 8003882:	4628      	mov	r0, r5
 8003884:	47b8      	blx	r7
 8003886:	3001      	adds	r0, #1
 8003888:	f43f aef7 	beq.w	800367a <_printf_float+0xc2>
 800388c:	f109 0901 	add.w	r9, r9, #1
 8003890:	e7ee      	b.n	8003870 <_printf_float+0x2b8>
 8003892:	bf00      	nop
 8003894:	7fefffff 	.word	0x7fefffff
 8003898:	080128e0 	.word	0x080128e0
 800389c:	080128e4 	.word	0x080128e4
 80038a0:	080128ec 	.word	0x080128ec
 80038a4:	080128e8 	.word	0x080128e8
 80038a8:	08008a1b 	.word	0x08008a1b
 80038ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038b0:	429a      	cmp	r2, r3
 80038b2:	bfa8      	it	ge
 80038b4:	461a      	movge	r2, r3
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	4691      	mov	r9, r2
 80038ba:	dc37      	bgt.n	800392c <_printf_float+0x374>
 80038bc:	f04f 0b00 	mov.w	fp, #0
 80038c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038c4:	f104 021a 	add.w	r2, r4, #26
 80038c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038ca:	9305      	str	r3, [sp, #20]
 80038cc:	eba3 0309 	sub.w	r3, r3, r9
 80038d0:	455b      	cmp	r3, fp
 80038d2:	dc33      	bgt.n	800393c <_printf_float+0x384>
 80038d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038d8:	429a      	cmp	r2, r3
 80038da:	db3b      	blt.n	8003954 <_printf_float+0x39c>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	07da      	lsls	r2, r3, #31
 80038e0:	d438      	bmi.n	8003954 <_printf_float+0x39c>
 80038e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038e4:	9a05      	ldr	r2, [sp, #20]
 80038e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038e8:	1a9a      	subs	r2, r3, r2
 80038ea:	eba3 0901 	sub.w	r9, r3, r1
 80038ee:	4591      	cmp	r9, r2
 80038f0:	bfa8      	it	ge
 80038f2:	4691      	movge	r9, r2
 80038f4:	f1b9 0f00 	cmp.w	r9, #0
 80038f8:	dc35      	bgt.n	8003966 <_printf_float+0x3ae>
 80038fa:	f04f 0800 	mov.w	r8, #0
 80038fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003902:	f104 0a1a 	add.w	sl, r4, #26
 8003906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	eba3 0309 	sub.w	r3, r3, r9
 8003910:	4543      	cmp	r3, r8
 8003912:	f77f af79 	ble.w	8003808 <_printf_float+0x250>
 8003916:	2301      	movs	r3, #1
 8003918:	4652      	mov	r2, sl
 800391a:	4631      	mov	r1, r6
 800391c:	4628      	mov	r0, r5
 800391e:	47b8      	blx	r7
 8003920:	3001      	adds	r0, #1
 8003922:	f43f aeaa 	beq.w	800367a <_printf_float+0xc2>
 8003926:	f108 0801 	add.w	r8, r8, #1
 800392a:	e7ec      	b.n	8003906 <_printf_float+0x34e>
 800392c:	4613      	mov	r3, r2
 800392e:	4631      	mov	r1, r6
 8003930:	4642      	mov	r2, r8
 8003932:	4628      	mov	r0, r5
 8003934:	47b8      	blx	r7
 8003936:	3001      	adds	r0, #1
 8003938:	d1c0      	bne.n	80038bc <_printf_float+0x304>
 800393a:	e69e      	b.n	800367a <_printf_float+0xc2>
 800393c:	2301      	movs	r3, #1
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	9205      	str	r2, [sp, #20]
 8003944:	47b8      	blx	r7
 8003946:	3001      	adds	r0, #1
 8003948:	f43f ae97 	beq.w	800367a <_printf_float+0xc2>
 800394c:	9a05      	ldr	r2, [sp, #20]
 800394e:	f10b 0b01 	add.w	fp, fp, #1
 8003952:	e7b9      	b.n	80038c8 <_printf_float+0x310>
 8003954:	ee18 3a10 	vmov	r3, s16
 8003958:	4652      	mov	r2, sl
 800395a:	4631      	mov	r1, r6
 800395c:	4628      	mov	r0, r5
 800395e:	47b8      	blx	r7
 8003960:	3001      	adds	r0, #1
 8003962:	d1be      	bne.n	80038e2 <_printf_float+0x32a>
 8003964:	e689      	b.n	800367a <_printf_float+0xc2>
 8003966:	9a05      	ldr	r2, [sp, #20]
 8003968:	464b      	mov	r3, r9
 800396a:	4442      	add	r2, r8
 800396c:	4631      	mov	r1, r6
 800396e:	4628      	mov	r0, r5
 8003970:	47b8      	blx	r7
 8003972:	3001      	adds	r0, #1
 8003974:	d1c1      	bne.n	80038fa <_printf_float+0x342>
 8003976:	e680      	b.n	800367a <_printf_float+0xc2>
 8003978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800397a:	2a01      	cmp	r2, #1
 800397c:	dc01      	bgt.n	8003982 <_printf_float+0x3ca>
 800397e:	07db      	lsls	r3, r3, #31
 8003980:	d538      	bpl.n	80039f4 <_printf_float+0x43c>
 8003982:	2301      	movs	r3, #1
 8003984:	4642      	mov	r2, r8
 8003986:	4631      	mov	r1, r6
 8003988:	4628      	mov	r0, r5
 800398a:	47b8      	blx	r7
 800398c:	3001      	adds	r0, #1
 800398e:	f43f ae74 	beq.w	800367a <_printf_float+0xc2>
 8003992:	ee18 3a10 	vmov	r3, s16
 8003996:	4652      	mov	r2, sl
 8003998:	4631      	mov	r1, r6
 800399a:	4628      	mov	r0, r5
 800399c:	47b8      	blx	r7
 800399e:	3001      	adds	r0, #1
 80039a0:	f43f ae6b 	beq.w	800367a <_printf_float+0xc2>
 80039a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039a8:	2200      	movs	r2, #0
 80039aa:	2300      	movs	r3, #0
 80039ac:	f7fd f8b4 	bl	8000b18 <__aeabi_dcmpeq>
 80039b0:	b9d8      	cbnz	r0, 80039ea <_printf_float+0x432>
 80039b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039b4:	f108 0201 	add.w	r2, r8, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	d10e      	bne.n	80039e2 <_printf_float+0x42a>
 80039c4:	e659      	b.n	800367a <_printf_float+0xc2>
 80039c6:	2301      	movs	r3, #1
 80039c8:	4652      	mov	r2, sl
 80039ca:	4631      	mov	r1, r6
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b8      	blx	r7
 80039d0:	3001      	adds	r0, #1
 80039d2:	f43f ae52 	beq.w	800367a <_printf_float+0xc2>
 80039d6:	f108 0801 	add.w	r8, r8, #1
 80039da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	4543      	cmp	r3, r8
 80039e0:	dcf1      	bgt.n	80039c6 <_printf_float+0x40e>
 80039e2:	464b      	mov	r3, r9
 80039e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039e8:	e6dc      	b.n	80037a4 <_printf_float+0x1ec>
 80039ea:	f04f 0800 	mov.w	r8, #0
 80039ee:	f104 0a1a 	add.w	sl, r4, #26
 80039f2:	e7f2      	b.n	80039da <_printf_float+0x422>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4642      	mov	r2, r8
 80039f8:	e7df      	b.n	80039ba <_printf_float+0x402>
 80039fa:	2301      	movs	r3, #1
 80039fc:	464a      	mov	r2, r9
 80039fe:	4631      	mov	r1, r6
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b8      	blx	r7
 8003a04:	3001      	adds	r0, #1
 8003a06:	f43f ae38 	beq.w	800367a <_printf_float+0xc2>
 8003a0a:	f108 0801 	add.w	r8, r8, #1
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a12:	1a5b      	subs	r3, r3, r1
 8003a14:	4543      	cmp	r3, r8
 8003a16:	dcf0      	bgt.n	80039fa <_printf_float+0x442>
 8003a18:	e6fa      	b.n	8003810 <_printf_float+0x258>
 8003a1a:	f04f 0800 	mov.w	r8, #0
 8003a1e:	f104 0919 	add.w	r9, r4, #25
 8003a22:	e7f4      	b.n	8003a0e <_printf_float+0x456>

08003a24 <_printf_common>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	4616      	mov	r6, r2
 8003a2a:	4699      	mov	r9, r3
 8003a2c:	688a      	ldr	r2, [r1, #8]
 8003a2e:	690b      	ldr	r3, [r1, #16]
 8003a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bfb8      	it	lt
 8003a38:	4613      	movlt	r3, r2
 8003a3a:	6033      	str	r3, [r6, #0]
 8003a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a40:	4607      	mov	r7, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	b10a      	cbz	r2, 8003a4a <_printf_common+0x26>
 8003a46:	3301      	adds	r3, #1
 8003a48:	6033      	str	r3, [r6, #0]
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	0699      	lsls	r1, r3, #26
 8003a4e:	bf42      	ittt	mi
 8003a50:	6833      	ldrmi	r3, [r6, #0]
 8003a52:	3302      	addmi	r3, #2
 8003a54:	6033      	strmi	r3, [r6, #0]
 8003a56:	6825      	ldr	r5, [r4, #0]
 8003a58:	f015 0506 	ands.w	r5, r5, #6
 8003a5c:	d106      	bne.n	8003a6c <_printf_common+0x48>
 8003a5e:	f104 0a19 	add.w	sl, r4, #25
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	6832      	ldr	r2, [r6, #0]
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dc26      	bgt.n	8003aba <_printf_common+0x96>
 8003a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a70:	1e13      	subs	r3, r2, #0
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	bf18      	it	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	0692      	lsls	r2, r2, #26
 8003a7a:	d42b      	bmi.n	8003ad4 <_printf_common+0xb0>
 8003a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a80:	4649      	mov	r1, r9
 8003a82:	4638      	mov	r0, r7
 8003a84:	47c0      	blx	r8
 8003a86:	3001      	adds	r0, #1
 8003a88:	d01e      	beq.n	8003ac8 <_printf_common+0xa4>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	68e5      	ldr	r5, [r4, #12]
 8003a8e:	6832      	ldr	r2, [r6, #0]
 8003a90:	f003 0306 	and.w	r3, r3, #6
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	bf08      	it	eq
 8003a98:	1aad      	subeq	r5, r5, r2
 8003a9a:	68a3      	ldr	r3, [r4, #8]
 8003a9c:	6922      	ldr	r2, [r4, #16]
 8003a9e:	bf0c      	ite	eq
 8003aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aa4:	2500      	movne	r5, #0
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	bfc4      	itt	gt
 8003aaa:	1a9b      	subgt	r3, r3, r2
 8003aac:	18ed      	addgt	r5, r5, r3
 8003aae:	2600      	movs	r6, #0
 8003ab0:	341a      	adds	r4, #26
 8003ab2:	42b5      	cmp	r5, r6
 8003ab4:	d11a      	bne.n	8003aec <_printf_common+0xc8>
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e008      	b.n	8003acc <_printf_common+0xa8>
 8003aba:	2301      	movs	r3, #1
 8003abc:	4652      	mov	r2, sl
 8003abe:	4649      	mov	r1, r9
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	47c0      	blx	r8
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d103      	bne.n	8003ad0 <_printf_common+0xac>
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	e7c6      	b.n	8003a62 <_printf_common+0x3e>
 8003ad4:	18e1      	adds	r1, r4, r3
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	2030      	movs	r0, #48	; 0x30
 8003ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ade:	4422      	add	r2, r4
 8003ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ae8:	3302      	adds	r3, #2
 8003aea:	e7c7      	b.n	8003a7c <_printf_common+0x58>
 8003aec:	2301      	movs	r3, #1
 8003aee:	4622      	mov	r2, r4
 8003af0:	4649      	mov	r1, r9
 8003af2:	4638      	mov	r0, r7
 8003af4:	47c0      	blx	r8
 8003af6:	3001      	adds	r0, #1
 8003af8:	d0e6      	beq.n	8003ac8 <_printf_common+0xa4>
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7d9      	b.n	8003ab2 <_printf_common+0x8e>
	...

08003b00 <_printf_i>:
 8003b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b04:	7e0f      	ldrb	r7, [r1, #24]
 8003b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b08:	2f78      	cmp	r7, #120	; 0x78
 8003b0a:	4691      	mov	r9, r2
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	469a      	mov	sl, r3
 8003b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b16:	d807      	bhi.n	8003b28 <_printf_i+0x28>
 8003b18:	2f62      	cmp	r7, #98	; 0x62
 8003b1a:	d80a      	bhi.n	8003b32 <_printf_i+0x32>
 8003b1c:	2f00      	cmp	r7, #0
 8003b1e:	f000 80d8 	beq.w	8003cd2 <_printf_i+0x1d2>
 8003b22:	2f58      	cmp	r7, #88	; 0x58
 8003b24:	f000 80a3 	beq.w	8003c6e <_printf_i+0x16e>
 8003b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b30:	e03a      	b.n	8003ba8 <_printf_i+0xa8>
 8003b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b36:	2b15      	cmp	r3, #21
 8003b38:	d8f6      	bhi.n	8003b28 <_printf_i+0x28>
 8003b3a:	a101      	add	r1, pc, #4	; (adr r1, 8003b40 <_printf_i+0x40>)
 8003b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b40:	08003b99 	.word	0x08003b99
 8003b44:	08003bad 	.word	0x08003bad
 8003b48:	08003b29 	.word	0x08003b29
 8003b4c:	08003b29 	.word	0x08003b29
 8003b50:	08003b29 	.word	0x08003b29
 8003b54:	08003b29 	.word	0x08003b29
 8003b58:	08003bad 	.word	0x08003bad
 8003b5c:	08003b29 	.word	0x08003b29
 8003b60:	08003b29 	.word	0x08003b29
 8003b64:	08003b29 	.word	0x08003b29
 8003b68:	08003b29 	.word	0x08003b29
 8003b6c:	08003cb9 	.word	0x08003cb9
 8003b70:	08003bdd 	.word	0x08003bdd
 8003b74:	08003c9b 	.word	0x08003c9b
 8003b78:	08003b29 	.word	0x08003b29
 8003b7c:	08003b29 	.word	0x08003b29
 8003b80:	08003cdb 	.word	0x08003cdb
 8003b84:	08003b29 	.word	0x08003b29
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003b29 	.word	0x08003b29
 8003b90:	08003b29 	.word	0x08003b29
 8003b94:	08003ca3 	.word	0x08003ca3
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	1d1a      	adds	r2, r3, #4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	602a      	str	r2, [r5, #0]
 8003ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0a3      	b.n	8003cf4 <_printf_i+0x1f4>
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	6829      	ldr	r1, [r5, #0]
 8003bb0:	0606      	lsls	r6, r0, #24
 8003bb2:	f101 0304 	add.w	r3, r1, #4
 8003bb6:	d50a      	bpl.n	8003bce <_printf_i+0xce>
 8003bb8:	680e      	ldr	r6, [r1, #0]
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	2e00      	cmp	r6, #0
 8003bbe:	da03      	bge.n	8003bc8 <_printf_i+0xc8>
 8003bc0:	232d      	movs	r3, #45	; 0x2d
 8003bc2:	4276      	negs	r6, r6
 8003bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc8:	485e      	ldr	r0, [pc, #376]	; (8003d44 <_printf_i+0x244>)
 8003bca:	230a      	movs	r3, #10
 8003bcc:	e019      	b.n	8003c02 <_printf_i+0x102>
 8003bce:	680e      	ldr	r6, [r1, #0]
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bd6:	bf18      	it	ne
 8003bd8:	b236      	sxthne	r6, r6
 8003bda:	e7ef      	b.n	8003bbc <_printf_i+0xbc>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	1d19      	adds	r1, r3, #4
 8003be2:	6029      	str	r1, [r5, #0]
 8003be4:	0601      	lsls	r1, r0, #24
 8003be6:	d501      	bpl.n	8003bec <_printf_i+0xec>
 8003be8:	681e      	ldr	r6, [r3, #0]
 8003bea:	e002      	b.n	8003bf2 <_printf_i+0xf2>
 8003bec:	0646      	lsls	r6, r0, #25
 8003bee:	d5fb      	bpl.n	8003be8 <_printf_i+0xe8>
 8003bf0:	881e      	ldrh	r6, [r3, #0]
 8003bf2:	4854      	ldr	r0, [pc, #336]	; (8003d44 <_printf_i+0x244>)
 8003bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2308      	moveq	r3, #8
 8003bfa:	230a      	movne	r3, #10
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c02:	6865      	ldr	r5, [r4, #4]
 8003c04:	60a5      	str	r5, [r4, #8]
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	bfa2      	ittt	ge
 8003c0a:	6821      	ldrge	r1, [r4, #0]
 8003c0c:	f021 0104 	bicge.w	r1, r1, #4
 8003c10:	6021      	strge	r1, [r4, #0]
 8003c12:	b90e      	cbnz	r6, 8003c18 <_printf_i+0x118>
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	d04d      	beq.n	8003cb4 <_printf_i+0x1b4>
 8003c18:	4615      	mov	r5, r2
 8003c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8003c22:	5dc7      	ldrb	r7, [r0, r7]
 8003c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c28:	4637      	mov	r7, r6
 8003c2a:	42bb      	cmp	r3, r7
 8003c2c:	460e      	mov	r6, r1
 8003c2e:	d9f4      	bls.n	8003c1a <_printf_i+0x11a>
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d10b      	bne.n	8003c4c <_printf_i+0x14c>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	07de      	lsls	r6, r3, #31
 8003c38:	d508      	bpl.n	8003c4c <_printf_i+0x14c>
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	6861      	ldr	r1, [r4, #4]
 8003c3e:	4299      	cmp	r1, r3
 8003c40:	bfde      	ittt	le
 8003c42:	2330      	movle	r3, #48	; 0x30
 8003c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c4c:	1b52      	subs	r2, r2, r5
 8003c4e:	6122      	str	r2, [r4, #16]
 8003c50:	f8cd a000 	str.w	sl, [sp]
 8003c54:	464b      	mov	r3, r9
 8003c56:	aa03      	add	r2, sp, #12
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f7ff fee2 	bl	8003a24 <_printf_common>
 8003c60:	3001      	adds	r0, #1
 8003c62:	d14c      	bne.n	8003cfe <_printf_i+0x1fe>
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c68:	b004      	add	sp, #16
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	4835      	ldr	r0, [pc, #212]	; (8003d44 <_printf_i+0x244>)
 8003c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c74:	6829      	ldr	r1, [r5, #0]
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c7c:	6029      	str	r1, [r5, #0]
 8003c7e:	061d      	lsls	r5, r3, #24
 8003c80:	d514      	bpl.n	8003cac <_printf_i+0x1ac>
 8003c82:	07df      	lsls	r7, r3, #31
 8003c84:	bf44      	itt	mi
 8003c86:	f043 0320 	orrmi.w	r3, r3, #32
 8003c8a:	6023      	strmi	r3, [r4, #0]
 8003c8c:	b91e      	cbnz	r6, 8003c96 <_printf_i+0x196>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	f023 0320 	bic.w	r3, r3, #32
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	2310      	movs	r3, #16
 8003c98:	e7b0      	b.n	8003bfc <_printf_i+0xfc>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	f043 0320 	orr.w	r3, r3, #32
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	2378      	movs	r3, #120	; 0x78
 8003ca4:	4828      	ldr	r0, [pc, #160]	; (8003d48 <_printf_i+0x248>)
 8003ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003caa:	e7e3      	b.n	8003c74 <_printf_i+0x174>
 8003cac:	0659      	lsls	r1, r3, #25
 8003cae:	bf48      	it	mi
 8003cb0:	b2b6      	uxthmi	r6, r6
 8003cb2:	e7e6      	b.n	8003c82 <_printf_i+0x182>
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	e7bb      	b.n	8003c30 <_printf_i+0x130>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	6826      	ldr	r6, [r4, #0]
 8003cbc:	6961      	ldr	r1, [r4, #20]
 8003cbe:	1d18      	adds	r0, r3, #4
 8003cc0:	6028      	str	r0, [r5, #0]
 8003cc2:	0635      	lsls	r5, r6, #24
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	d501      	bpl.n	8003ccc <_printf_i+0x1cc>
 8003cc8:	6019      	str	r1, [r3, #0]
 8003cca:	e002      	b.n	8003cd2 <_printf_i+0x1d2>
 8003ccc:	0670      	lsls	r0, r6, #25
 8003cce:	d5fb      	bpl.n	8003cc8 <_printf_i+0x1c8>
 8003cd0:	8019      	strh	r1, [r3, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6123      	str	r3, [r4, #16]
 8003cd6:	4615      	mov	r5, r2
 8003cd8:	e7ba      	b.n	8003c50 <_printf_i+0x150>
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	602a      	str	r2, [r5, #0]
 8003ce0:	681d      	ldr	r5, [r3, #0]
 8003ce2:	6862      	ldr	r2, [r4, #4]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f7fc faa2 	bl	8000230 <memchr>
 8003cec:	b108      	cbz	r0, 8003cf2 <_printf_i+0x1f2>
 8003cee:	1b40      	subs	r0, r0, r5
 8003cf0:	6060      	str	r0, [r4, #4]
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	6123      	str	r3, [r4, #16]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cfc:	e7a8      	b.n	8003c50 <_printf_i+0x150>
 8003cfe:	6923      	ldr	r3, [r4, #16]
 8003d00:	462a      	mov	r2, r5
 8003d02:	4649      	mov	r1, r9
 8003d04:	4640      	mov	r0, r8
 8003d06:	47d0      	blx	sl
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d0ab      	beq.n	8003c64 <_printf_i+0x164>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	079b      	lsls	r3, r3, #30
 8003d10:	d413      	bmi.n	8003d3a <_printf_i+0x23a>
 8003d12:	68e0      	ldr	r0, [r4, #12]
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	4298      	cmp	r0, r3
 8003d18:	bfb8      	it	lt
 8003d1a:	4618      	movlt	r0, r3
 8003d1c:	e7a4      	b.n	8003c68 <_printf_i+0x168>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4632      	mov	r2, r6
 8003d22:	4649      	mov	r1, r9
 8003d24:	4640      	mov	r0, r8
 8003d26:	47d0      	blx	sl
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d09b      	beq.n	8003c64 <_printf_i+0x164>
 8003d2c:	3501      	adds	r5, #1
 8003d2e:	68e3      	ldr	r3, [r4, #12]
 8003d30:	9903      	ldr	r1, [sp, #12]
 8003d32:	1a5b      	subs	r3, r3, r1
 8003d34:	42ab      	cmp	r3, r5
 8003d36:	dcf2      	bgt.n	8003d1e <_printf_i+0x21e>
 8003d38:	e7eb      	b.n	8003d12 <_printf_i+0x212>
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	f104 0619 	add.w	r6, r4, #25
 8003d40:	e7f5      	b.n	8003d2e <_printf_i+0x22e>
 8003d42:	bf00      	nop
 8003d44:	080128f0 	.word	0x080128f0
 8003d48:	08012901 	.word	0x08012901

08003d4c <setvbuf>:
 8003d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d50:	461d      	mov	r5, r3
 8003d52:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <setvbuf+0x17c>)
 8003d54:	681f      	ldr	r7, [r3, #0]
 8003d56:	4604      	mov	r4, r0
 8003d58:	460e      	mov	r6, r1
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	b127      	cbz	r7, 8003d68 <setvbuf+0x1c>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	b913      	cbnz	r3, 8003d68 <setvbuf+0x1c>
 8003d62:	4638      	mov	r0, r7
 8003d64:	f001 f944 	bl	8004ff0 <__sinit>
 8003d68:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <setvbuf+0x180>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d167      	bne.n	8003e3e <setvbuf+0xf2>
 8003d6e:	687c      	ldr	r4, [r7, #4]
 8003d70:	f1b8 0f02 	cmp.w	r8, #2
 8003d74:	d006      	beq.n	8003d84 <setvbuf+0x38>
 8003d76:	f1b8 0f01 	cmp.w	r8, #1
 8003d7a:	f200 809f 	bhi.w	8003ebc <setvbuf+0x170>
 8003d7e:	2d00      	cmp	r5, #0
 8003d80:	f2c0 809c 	blt.w	8003ebc <setvbuf+0x170>
 8003d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d86:	07db      	lsls	r3, r3, #31
 8003d88:	d405      	bmi.n	8003d96 <setvbuf+0x4a>
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	0598      	lsls	r0, r3, #22
 8003d8e:	d402      	bmi.n	8003d96 <setvbuf+0x4a>
 8003d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d92:	f001 f9e2 	bl	800515a <__retarget_lock_acquire_recursive>
 8003d96:	4621      	mov	r1, r4
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f001 f895 	bl	8004ec8 <_fflush_r>
 8003d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003da0:	b141      	cbz	r1, 8003db4 <setvbuf+0x68>
 8003da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003da6:	4299      	cmp	r1, r3
 8003da8:	d002      	beq.n	8003db0 <setvbuf+0x64>
 8003daa:	4638      	mov	r0, r7
 8003dac:	f001 fdf8 	bl	80059a0 <_free_r>
 8003db0:	2300      	movs	r3, #0
 8003db2:	6363      	str	r3, [r4, #52]	; 0x34
 8003db4:	2300      	movs	r3, #0
 8003db6:	61a3      	str	r3, [r4, #24]
 8003db8:	6063      	str	r3, [r4, #4]
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	0619      	lsls	r1, r3, #24
 8003dbe:	d503      	bpl.n	8003dc8 <setvbuf+0x7c>
 8003dc0:	6921      	ldr	r1, [r4, #16]
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f001 fdec 	bl	80059a0 <_free_r>
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	f1b8 0f02 	cmp.w	r8, #2
 8003dd6:	81a3      	strh	r3, [r4, #12]
 8003dd8:	d06c      	beq.n	8003eb4 <setvbuf+0x168>
 8003dda:	ab01      	add	r3, sp, #4
 8003ddc:	466a      	mov	r2, sp
 8003dde:	4621      	mov	r1, r4
 8003de0:	4638      	mov	r0, r7
 8003de2:	f001 f9bc 	bl	800515e <__swhatbuf_r>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	4318      	orrs	r0, r3
 8003dea:	81a0      	strh	r0, [r4, #12]
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	d130      	bne.n	8003e52 <setvbuf+0x106>
 8003df0:	9d00      	ldr	r5, [sp, #0]
 8003df2:	4628      	mov	r0, r5
 8003df4:	f001 fa18 	bl	8005228 <malloc>
 8003df8:	4606      	mov	r6, r0
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d155      	bne.n	8003eaa <setvbuf+0x15e>
 8003dfe:	f8dd 9000 	ldr.w	r9, [sp]
 8003e02:	45a9      	cmp	r9, r5
 8003e04:	d14a      	bne.n	8003e9c <setvbuf+0x150>
 8003e06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60a2      	str	r2, [r4, #8]
 8003e0e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	6122      	str	r2, [r4, #16]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e1c:	6162      	str	r2, [r4, #20]
 8003e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	07d2      	lsls	r2, r2, #31
 8003e26:	81a3      	strh	r3, [r4, #12]
 8003e28:	d405      	bmi.n	8003e36 <setvbuf+0xea>
 8003e2a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e2e:	d102      	bne.n	8003e36 <setvbuf+0xea>
 8003e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e32:	f001 f993 	bl	800515c <__retarget_lock_release_recursive>
 8003e36:	4628      	mov	r0, r5
 8003e38:	b003      	add	sp, #12
 8003e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <setvbuf+0x184>)
 8003e40:	429c      	cmp	r4, r3
 8003e42:	d101      	bne.n	8003e48 <setvbuf+0xfc>
 8003e44:	68bc      	ldr	r4, [r7, #8]
 8003e46:	e793      	b.n	8003d70 <setvbuf+0x24>
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <setvbuf+0x188>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	bf08      	it	eq
 8003e4e:	68fc      	ldreq	r4, [r7, #12]
 8003e50:	e78e      	b.n	8003d70 <setvbuf+0x24>
 8003e52:	2e00      	cmp	r6, #0
 8003e54:	d0cd      	beq.n	8003df2 <setvbuf+0xa6>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	b913      	cbnz	r3, 8003e60 <setvbuf+0x114>
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f001 f8c8 	bl	8004ff0 <__sinit>
 8003e60:	f1b8 0f01 	cmp.w	r8, #1
 8003e64:	bf08      	it	eq
 8003e66:	89a3      	ldrheq	r3, [r4, #12]
 8003e68:	6026      	str	r6, [r4, #0]
 8003e6a:	bf04      	itt	eq
 8003e6c:	f043 0301 	orreq.w	r3, r3, #1
 8003e70:	81a3      	strheq	r3, [r4, #12]
 8003e72:	89a2      	ldrh	r2, [r4, #12]
 8003e74:	f012 0308 	ands.w	r3, r2, #8
 8003e78:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e7c:	d01c      	beq.n	8003eb8 <setvbuf+0x16c>
 8003e7e:	07d3      	lsls	r3, r2, #31
 8003e80:	bf41      	itttt	mi
 8003e82:	2300      	movmi	r3, #0
 8003e84:	426d      	negmi	r5, r5
 8003e86:	60a3      	strmi	r3, [r4, #8]
 8003e88:	61a5      	strmi	r5, [r4, #24]
 8003e8a:	bf58      	it	pl
 8003e8c:	60a5      	strpl	r5, [r4, #8]
 8003e8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e90:	f015 0501 	ands.w	r5, r5, #1
 8003e94:	d115      	bne.n	8003ec2 <setvbuf+0x176>
 8003e96:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e9a:	e7c8      	b.n	8003e2e <setvbuf+0xe2>
 8003e9c:	4648      	mov	r0, r9
 8003e9e:	f001 f9c3 	bl	8005228 <malloc>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d0ae      	beq.n	8003e06 <setvbuf+0xba>
 8003ea8:	464d      	mov	r5, r9
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	e7d0      	b.n	8003e56 <setvbuf+0x10a>
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	e7a8      	b.n	8003e0a <setvbuf+0xbe>
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	e7e8      	b.n	8003e8e <setvbuf+0x142>
 8003ebc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ec0:	e7b9      	b.n	8003e36 <setvbuf+0xea>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	e7b7      	b.n	8003e36 <setvbuf+0xea>
 8003ec6:	bf00      	nop
 8003ec8:	20000018 	.word	0x20000018
 8003ecc:	08012aa0 	.word	0x08012aa0
 8003ed0:	08012ac0 	.word	0x08012ac0
 8003ed4:	08012a80 	.word	0x08012a80

08003ed8 <strtok>:
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <strtok+0x5c>)
 8003eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003edc:	681e      	ldr	r6, [r3, #0]
 8003ede:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	b9fc      	cbnz	r4, 8003f24 <strtok+0x4c>
 8003ee4:	2050      	movs	r0, #80	; 0x50
 8003ee6:	9101      	str	r1, [sp, #4]
 8003ee8:	f001 f99e 	bl	8005228 <malloc>
 8003eec:	9901      	ldr	r1, [sp, #4]
 8003eee:	65b0      	str	r0, [r6, #88]	; 0x58
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	b920      	cbnz	r0, 8003efe <strtok+0x26>
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <strtok+0x60>)
 8003ef6:	4811      	ldr	r0, [pc, #68]	; (8003f3c <strtok+0x64>)
 8003ef8:	2157      	movs	r1, #87	; 0x57
 8003efa:	f000 f8c5 	bl	8004088 <__assert_func>
 8003efe:	e9c0 4400 	strd	r4, r4, [r0]
 8003f02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003f06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003f0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003f0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003f12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003f16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003f1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003f1e:	6184      	str	r4, [r0, #24]
 8003f20:	7704      	strb	r4, [r0, #28]
 8003f22:	6244      	str	r4, [r0, #36]	; 0x24
 8003f24:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003f26:	2301      	movs	r3, #1
 8003f28:	4628      	mov	r0, r5
 8003f2a:	b002      	add	sp, #8
 8003f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f30:	f000 b806 	b.w	8003f40 <__strtok_r>
 8003f34:	20000018 	.word	0x20000018
 8003f38:	08012912 	.word	0x08012912
 8003f3c:	08012929 	.word	0x08012929

08003f40 <__strtok_r>:
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b908      	cbnz	r0, 8003f48 <__strtok_r+0x8>
 8003f44:	6810      	ldr	r0, [r2, #0]
 8003f46:	b188      	cbz	r0, 8003f6c <__strtok_r+0x2c>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f50:	460f      	mov	r7, r1
 8003f52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f56:	b91e      	cbnz	r6, 8003f60 <__strtok_r+0x20>
 8003f58:	b965      	cbnz	r5, 8003f74 <__strtok_r+0x34>
 8003f5a:	6015      	str	r5, [r2, #0]
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	e005      	b.n	8003f6c <__strtok_r+0x2c>
 8003f60:	42b5      	cmp	r5, r6
 8003f62:	d1f6      	bne.n	8003f52 <__strtok_r+0x12>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <__strtok_r+0xa>
 8003f68:	6014      	str	r4, [r2, #0]
 8003f6a:	7003      	strb	r3, [r0, #0]
 8003f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6e:	461c      	mov	r4, r3
 8003f70:	e00c      	b.n	8003f8c <__strtok_r+0x4c>
 8003f72:	b915      	cbnz	r5, 8003f7a <__strtok_r+0x3a>
 8003f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f78:	460e      	mov	r6, r1
 8003f7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	d1f7      	bne.n	8003f72 <__strtok_r+0x32>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f3      	beq.n	8003f6e <__strtok_r+0x2e>
 8003f86:	2300      	movs	r3, #0
 8003f88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f8c:	6014      	str	r4, [r2, #0]
 8003f8e:	e7ed      	b.n	8003f6c <__strtok_r+0x2c>

08003f90 <_strtoul_l.constprop.0>:
 8003f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f94:	4f36      	ldr	r7, [pc, #216]	; (8004070 <_strtoul_l.constprop.0+0xe0>)
 8003f96:	4686      	mov	lr, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fa0:	5de6      	ldrb	r6, [r4, r7]
 8003fa2:	f016 0608 	ands.w	r6, r6, #8
 8003fa6:	d1f8      	bne.n	8003f9a <_strtoul_l.constprop.0+0xa>
 8003fa8:	2c2d      	cmp	r4, #45	; 0x2d
 8003faa:	d12f      	bne.n	800400c <_strtoul_l.constprop.0+0x7c>
 8003fac:	782c      	ldrb	r4, [r5, #0]
 8003fae:	2601      	movs	r6, #1
 8003fb0:	1c85      	adds	r5, r0, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d057      	beq.n	8004066 <_strtoul_l.constprop.0+0xd6>
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d109      	bne.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8003fba:	2c30      	cmp	r4, #48	; 0x30
 8003fbc:	d107      	bne.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8003fbe:	7828      	ldrb	r0, [r5, #0]
 8003fc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003fc4:	2858      	cmp	r0, #88	; 0x58
 8003fc6:	d149      	bne.n	800405c <_strtoul_l.constprop.0+0xcc>
 8003fc8:	786c      	ldrb	r4, [r5, #1]
 8003fca:	2310      	movs	r3, #16
 8003fcc:	3502      	adds	r5, #2
 8003fce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003fd2:	2700      	movs	r7, #0
 8003fd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8003fd8:	fb03 f908 	mul.w	r9, r3, r8
 8003fdc:	ea6f 0909 	mvn.w	r9, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003fe6:	f1bc 0f09 	cmp.w	ip, #9
 8003fea:	d814      	bhi.n	8004016 <_strtoul_l.constprop.0+0x86>
 8003fec:	4664      	mov	r4, ip
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	dd22      	ble.n	8004038 <_strtoul_l.constprop.0+0xa8>
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	db1d      	blt.n	8004032 <_strtoul_l.constprop.0+0xa2>
 8003ff6:	4580      	cmp	r8, r0
 8003ff8:	d31b      	bcc.n	8004032 <_strtoul_l.constprop.0+0xa2>
 8003ffa:	d101      	bne.n	8004000 <_strtoul_l.constprop.0+0x70>
 8003ffc:	45a1      	cmp	r9, r4
 8003ffe:	db18      	blt.n	8004032 <_strtoul_l.constprop.0+0xa2>
 8004000:	fb00 4003 	mla	r0, r0, r3, r4
 8004004:	2701      	movs	r7, #1
 8004006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800400a:	e7ea      	b.n	8003fe2 <_strtoul_l.constprop.0+0x52>
 800400c:	2c2b      	cmp	r4, #43	; 0x2b
 800400e:	bf04      	itt	eq
 8004010:	782c      	ldrbeq	r4, [r5, #0]
 8004012:	1c85      	addeq	r5, r0, #2
 8004014:	e7cd      	b.n	8003fb2 <_strtoul_l.constprop.0+0x22>
 8004016:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800401a:	f1bc 0f19 	cmp.w	ip, #25
 800401e:	d801      	bhi.n	8004024 <_strtoul_l.constprop.0+0x94>
 8004020:	3c37      	subs	r4, #55	; 0x37
 8004022:	e7e4      	b.n	8003fee <_strtoul_l.constprop.0+0x5e>
 8004024:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004028:	f1bc 0f19 	cmp.w	ip, #25
 800402c:	d804      	bhi.n	8004038 <_strtoul_l.constprop.0+0xa8>
 800402e:	3c57      	subs	r4, #87	; 0x57
 8004030:	e7dd      	b.n	8003fee <_strtoul_l.constprop.0+0x5e>
 8004032:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004036:	e7e6      	b.n	8004006 <_strtoul_l.constprop.0+0x76>
 8004038:	2f00      	cmp	r7, #0
 800403a:	da07      	bge.n	800404c <_strtoul_l.constprop.0+0xbc>
 800403c:	2322      	movs	r3, #34	; 0x22
 800403e:	f8ce 3000 	str.w	r3, [lr]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004046:	b932      	cbnz	r2, 8004056 <_strtoul_l.constprop.0+0xc6>
 8004048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404c:	b106      	cbz	r6, 8004050 <_strtoul_l.constprop.0+0xc0>
 800404e:	4240      	negs	r0, r0
 8004050:	2a00      	cmp	r2, #0
 8004052:	d0f9      	beq.n	8004048 <_strtoul_l.constprop.0+0xb8>
 8004054:	b107      	cbz	r7, 8004058 <_strtoul_l.constprop.0+0xc8>
 8004056:	1e69      	subs	r1, r5, #1
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	e7f5      	b.n	8004048 <_strtoul_l.constprop.0+0xb8>
 800405c:	2430      	movs	r4, #48	; 0x30
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1b5      	bne.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8004062:	2308      	movs	r3, #8
 8004064:	e7b3      	b.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8004066:	2c30      	cmp	r4, #48	; 0x30
 8004068:	d0a9      	beq.n	8003fbe <_strtoul_l.constprop.0+0x2e>
 800406a:	230a      	movs	r3, #10
 800406c:	e7af      	b.n	8003fce <_strtoul_l.constprop.0+0x3e>
 800406e:	bf00      	nop
 8004070:	080127da 	.word	0x080127da

08004074 <strtoul>:
 8004074:	4613      	mov	r3, r2
 8004076:	460a      	mov	r2, r1
 8004078:	4601      	mov	r1, r0
 800407a:	4802      	ldr	r0, [pc, #8]	; (8004084 <strtoul+0x10>)
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f7ff bf87 	b.w	8003f90 <_strtoul_l.constprop.0>
 8004082:	bf00      	nop
 8004084:	20000018 	.word	0x20000018

08004088 <__assert_func>:
 8004088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800408a:	4614      	mov	r4, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <__assert_func+0x2c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4605      	mov	r5, r0
 8004094:	68d8      	ldr	r0, [r3, #12]
 8004096:	b14c      	cbz	r4, 80040ac <__assert_func+0x24>
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <__assert_func+0x30>)
 800409a:	9100      	str	r1, [sp, #0]
 800409c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040a0:	4906      	ldr	r1, [pc, #24]	; (80040bc <__assert_func+0x34>)
 80040a2:	462b      	mov	r3, r5
 80040a4:	f001 f822 	bl	80050ec <fiprintf>
 80040a8:	f001 ff8c 	bl	8005fc4 <abort>
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <__assert_func+0x38>)
 80040ae:	461c      	mov	r4, r3
 80040b0:	e7f3      	b.n	800409a <__assert_func+0x12>
 80040b2:	bf00      	nop
 80040b4:	20000018 	.word	0x20000018
 80040b8:	080129a8 	.word	0x080129a8
 80040bc:	080129b5 	.word	0x080129b5
 80040c0:	08009284 	.word	0x08009284

080040c4 <quorem>:
 80040c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	6903      	ldr	r3, [r0, #16]
 80040ca:	690c      	ldr	r4, [r1, #16]
 80040cc:	42a3      	cmp	r3, r4
 80040ce:	4607      	mov	r7, r0
 80040d0:	f2c0 8081 	blt.w	80041d6 <quorem+0x112>
 80040d4:	3c01      	subs	r4, #1
 80040d6:	f101 0814 	add.w	r8, r1, #20
 80040da:	f100 0514 	add.w	r5, r0, #20
 80040de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040ec:	3301      	adds	r3, #1
 80040ee:	429a      	cmp	r2, r3
 80040f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80040fc:	d331      	bcc.n	8004162 <quorem+0x9e>
 80040fe:	f04f 0e00 	mov.w	lr, #0
 8004102:	4640      	mov	r0, r8
 8004104:	46ac      	mov	ip, r5
 8004106:	46f2      	mov	sl, lr
 8004108:	f850 2b04 	ldr.w	r2, [r0], #4
 800410c:	b293      	uxth	r3, r2
 800410e:	fb06 e303 	mla	r3, r6, r3, lr
 8004112:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004116:	b29b      	uxth	r3, r3
 8004118:	ebaa 0303 	sub.w	r3, sl, r3
 800411c:	0c12      	lsrs	r2, r2, #16
 800411e:	f8dc a000 	ldr.w	sl, [ip]
 8004122:	fb06 e202 	mla	r2, r6, r2, lr
 8004126:	fa13 f38a 	uxtah	r3, r3, sl
 800412a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800412e:	fa1f fa82 	uxth.w	sl, r2
 8004132:	f8dc 2000 	ldr.w	r2, [ip]
 8004136:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800413a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800413e:	b29b      	uxth	r3, r3
 8004140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004144:	4581      	cmp	r9, r0
 8004146:	f84c 3b04 	str.w	r3, [ip], #4
 800414a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800414e:	d2db      	bcs.n	8004108 <quorem+0x44>
 8004150:	f855 300b 	ldr.w	r3, [r5, fp]
 8004154:	b92b      	cbnz	r3, 8004162 <quorem+0x9e>
 8004156:	9b01      	ldr	r3, [sp, #4]
 8004158:	3b04      	subs	r3, #4
 800415a:	429d      	cmp	r5, r3
 800415c:	461a      	mov	r2, r3
 800415e:	d32e      	bcc.n	80041be <quorem+0xfa>
 8004160:	613c      	str	r4, [r7, #16]
 8004162:	4638      	mov	r0, r7
 8004164:	f001 fb0a 	bl	800577c <__mcmp>
 8004168:	2800      	cmp	r0, #0
 800416a:	db24      	blt.n	80041b6 <quorem+0xf2>
 800416c:	3601      	adds	r6, #1
 800416e:	4628      	mov	r0, r5
 8004170:	f04f 0c00 	mov.w	ip, #0
 8004174:	f858 2b04 	ldr.w	r2, [r8], #4
 8004178:	f8d0 e000 	ldr.w	lr, [r0]
 800417c:	b293      	uxth	r3, r2
 800417e:	ebac 0303 	sub.w	r3, ip, r3
 8004182:	0c12      	lsrs	r2, r2, #16
 8004184:	fa13 f38e 	uxtah	r3, r3, lr
 8004188:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800418c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004190:	b29b      	uxth	r3, r3
 8004192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004196:	45c1      	cmp	r9, r8
 8004198:	f840 3b04 	str.w	r3, [r0], #4
 800419c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041a0:	d2e8      	bcs.n	8004174 <quorem+0xb0>
 80041a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041aa:	b922      	cbnz	r2, 80041b6 <quorem+0xf2>
 80041ac:	3b04      	subs	r3, #4
 80041ae:	429d      	cmp	r5, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	d30a      	bcc.n	80041ca <quorem+0x106>
 80041b4:	613c      	str	r4, [r7, #16]
 80041b6:	4630      	mov	r0, r6
 80041b8:	b003      	add	sp, #12
 80041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	d1cc      	bne.n	8004160 <quorem+0x9c>
 80041c6:	3c01      	subs	r4, #1
 80041c8:	e7c7      	b.n	800415a <quorem+0x96>
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d1f0      	bne.n	80041b4 <quorem+0xf0>
 80041d2:	3c01      	subs	r4, #1
 80041d4:	e7eb      	b.n	80041ae <quorem+0xea>
 80041d6:	2000      	movs	r0, #0
 80041d8:	e7ee      	b.n	80041b8 <quorem+0xf4>
 80041da:	0000      	movs	r0, r0
 80041dc:	0000      	movs	r0, r0
	...

080041e0 <_dtoa_r>:
 80041e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e4:	ed2d 8b04 	vpush	{d8-d9}
 80041e8:	ec57 6b10 	vmov	r6, r7, d0
 80041ec:	b093      	sub	sp, #76	; 0x4c
 80041ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80041f4:	9106      	str	r1, [sp, #24]
 80041f6:	ee10 aa10 	vmov	sl, s0
 80041fa:	4604      	mov	r4, r0
 80041fc:	9209      	str	r2, [sp, #36]	; 0x24
 80041fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004200:	46bb      	mov	fp, r7
 8004202:	b975      	cbnz	r5, 8004222 <_dtoa_r+0x42>
 8004204:	2010      	movs	r0, #16
 8004206:	f001 f80f 	bl	8005228 <malloc>
 800420a:	4602      	mov	r2, r0
 800420c:	6260      	str	r0, [r4, #36]	; 0x24
 800420e:	b920      	cbnz	r0, 800421a <_dtoa_r+0x3a>
 8004210:	4ba7      	ldr	r3, [pc, #668]	; (80044b0 <_dtoa_r+0x2d0>)
 8004212:	21ea      	movs	r1, #234	; 0xea
 8004214:	48a7      	ldr	r0, [pc, #668]	; (80044b4 <_dtoa_r+0x2d4>)
 8004216:	f7ff ff37 	bl	8004088 <__assert_func>
 800421a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800421e:	6005      	str	r5, [r0, #0]
 8004220:	60c5      	str	r5, [r0, #12]
 8004222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	b151      	cbz	r1, 800423e <_dtoa_r+0x5e>
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	604a      	str	r2, [r1, #4]
 800422c:	2301      	movs	r3, #1
 800422e:	4093      	lsls	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
 8004232:	4620      	mov	r0, r4
 8004234:	f001 f860 	bl	80052f8 <_Bfree>
 8004238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	1e3b      	subs	r3, r7, #0
 8004240:	bfaa      	itet	ge
 8004242:	2300      	movge	r3, #0
 8004244:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004248:	f8c8 3000 	strge.w	r3, [r8]
 800424c:	4b9a      	ldr	r3, [pc, #616]	; (80044b8 <_dtoa_r+0x2d8>)
 800424e:	bfbc      	itt	lt
 8004250:	2201      	movlt	r2, #1
 8004252:	f8c8 2000 	strlt.w	r2, [r8]
 8004256:	ea33 030b 	bics.w	r3, r3, fp
 800425a:	d11b      	bne.n	8004294 <_dtoa_r+0xb4>
 800425c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800425e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004268:	4333      	orrs	r3, r6
 800426a:	f000 8592 	beq.w	8004d92 <_dtoa_r+0xbb2>
 800426e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004270:	b963      	cbnz	r3, 800428c <_dtoa_r+0xac>
 8004272:	4b92      	ldr	r3, [pc, #584]	; (80044bc <_dtoa_r+0x2dc>)
 8004274:	e022      	b.n	80042bc <_dtoa_r+0xdc>
 8004276:	4b92      	ldr	r3, [pc, #584]	; (80044c0 <_dtoa_r+0x2e0>)
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	3308      	adds	r3, #8
 800427c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	9801      	ldr	r0, [sp, #4]
 8004282:	b013      	add	sp, #76	; 0x4c
 8004284:	ecbd 8b04 	vpop	{d8-d9}
 8004288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428c:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <_dtoa_r+0x2dc>)
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	3303      	adds	r3, #3
 8004292:	e7f3      	b.n	800427c <_dtoa_r+0x9c>
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	4650      	mov	r0, sl
 800429a:	4659      	mov	r1, fp
 800429c:	f7fc fc3c 	bl	8000b18 <__aeabi_dcmpeq>
 80042a0:	ec4b ab19 	vmov	d9, sl, fp
 80042a4:	4680      	mov	r8, r0
 80042a6:	b158      	cbz	r0, 80042c0 <_dtoa_r+0xe0>
 80042a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042aa:	2301      	movs	r3, #1
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 856b 	beq.w	8004d8c <_dtoa_r+0xbac>
 80042b6:	4883      	ldr	r0, [pc, #524]	; (80044c4 <_dtoa_r+0x2e4>)
 80042b8:	6018      	str	r0, [r3, #0]
 80042ba:	1e43      	subs	r3, r0, #1
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	e7df      	b.n	8004280 <_dtoa_r+0xa0>
 80042c0:	ec4b ab10 	vmov	d0, sl, fp
 80042c4:	aa10      	add	r2, sp, #64	; 0x40
 80042c6:	a911      	add	r1, sp, #68	; 0x44
 80042c8:	4620      	mov	r0, r4
 80042ca:	f001 fafd 	bl	80058c8 <__d2b>
 80042ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80042d2:	ee08 0a10 	vmov	s16, r0
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	f000 8084 	beq.w	80043e4 <_dtoa_r+0x204>
 80042dc:	ee19 3a90 	vmov	r3, s19
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80042e8:	4656      	mov	r6, sl
 80042ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80042ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80042f6:	4b74      	ldr	r3, [pc, #464]	; (80044c8 <_dtoa_r+0x2e8>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fb ffeb 	bl	80002d8 <__aeabi_dsub>
 8004302:	a365      	add	r3, pc, #404	; (adr r3, 8004498 <_dtoa_r+0x2b8>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fc f99e 	bl	8000648 <__aeabi_dmul>
 800430c:	a364      	add	r3, pc, #400	; (adr r3, 80044a0 <_dtoa_r+0x2c0>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fb ffe3 	bl	80002dc <__adddf3>
 8004316:	4606      	mov	r6, r0
 8004318:	4628      	mov	r0, r5
 800431a:	460f      	mov	r7, r1
 800431c:	f7fc f92a 	bl	8000574 <__aeabi_i2d>
 8004320:	a361      	add	r3, pc, #388	; (adr r3, 80044a8 <_dtoa_r+0x2c8>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f98f 	bl	8000648 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4630      	mov	r0, r6
 8004330:	4639      	mov	r1, r7
 8004332:	f7fb ffd3 	bl	80002dc <__adddf3>
 8004336:	4606      	mov	r6, r0
 8004338:	460f      	mov	r7, r1
 800433a:	f7fc fc35 	bl	8000ba8 <__aeabi_d2iz>
 800433e:	2200      	movs	r2, #0
 8004340:	9000      	str	r0, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	4630      	mov	r0, r6
 8004346:	4639      	mov	r1, r7
 8004348:	f7fc fbf0 	bl	8000b2c <__aeabi_dcmplt>
 800434c:	b150      	cbz	r0, 8004364 <_dtoa_r+0x184>
 800434e:	9800      	ldr	r0, [sp, #0]
 8004350:	f7fc f910 	bl	8000574 <__aeabi_i2d>
 8004354:	4632      	mov	r2, r6
 8004356:	463b      	mov	r3, r7
 8004358:	f7fc fbde 	bl	8000b18 <__aeabi_dcmpeq>
 800435c:	b910      	cbnz	r0, 8004364 <_dtoa_r+0x184>
 800435e:	9b00      	ldr	r3, [sp, #0]
 8004360:	3b01      	subs	r3, #1
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	9b00      	ldr	r3, [sp, #0]
 8004366:	2b16      	cmp	r3, #22
 8004368:	d85a      	bhi.n	8004420 <_dtoa_r+0x240>
 800436a:	9a00      	ldr	r2, [sp, #0]
 800436c:	4b57      	ldr	r3, [pc, #348]	; (80044cc <_dtoa_r+0x2ec>)
 800436e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	ec51 0b19 	vmov	r0, r1, d9
 800437a:	f7fc fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800437e:	2800      	cmp	r0, #0
 8004380:	d050      	beq.n	8004424 <_dtoa_r+0x244>
 8004382:	9b00      	ldr	r3, [sp, #0]
 8004384:	3b01      	subs	r3, #1
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2300      	movs	r3, #0
 800438a:	930b      	str	r3, [sp, #44]	; 0x2c
 800438c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800438e:	1b5d      	subs	r5, r3, r5
 8004390:	1e6b      	subs	r3, r5, #1
 8004392:	9305      	str	r3, [sp, #20]
 8004394:	bf45      	ittet	mi
 8004396:	f1c5 0301 	rsbmi	r3, r5, #1
 800439a:	9304      	strmi	r3, [sp, #16]
 800439c:	2300      	movpl	r3, #0
 800439e:	2300      	movmi	r3, #0
 80043a0:	bf4c      	ite	mi
 80043a2:	9305      	strmi	r3, [sp, #20]
 80043a4:	9304      	strpl	r3, [sp, #16]
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	db3d      	blt.n	8004428 <_dtoa_r+0x248>
 80043ac:	9b05      	ldr	r3, [sp, #20]
 80043ae:	9a00      	ldr	r2, [sp, #0]
 80043b0:	920a      	str	r2, [sp, #40]	; 0x28
 80043b2:	4413      	add	r3, r2
 80043b4:	9305      	str	r3, [sp, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9307      	str	r3, [sp, #28]
 80043ba:	9b06      	ldr	r3, [sp, #24]
 80043bc:	2b09      	cmp	r3, #9
 80043be:	f200 8089 	bhi.w	80044d4 <_dtoa_r+0x2f4>
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	bfc4      	itt	gt
 80043c6:	3b04      	subgt	r3, #4
 80043c8:	9306      	strgt	r3, [sp, #24]
 80043ca:	9b06      	ldr	r3, [sp, #24]
 80043cc:	f1a3 0302 	sub.w	r3, r3, #2
 80043d0:	bfcc      	ite	gt
 80043d2:	2500      	movgt	r5, #0
 80043d4:	2501      	movle	r5, #1
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	f200 8087 	bhi.w	80044ea <_dtoa_r+0x30a>
 80043dc:	e8df f003 	tbb	[pc, r3]
 80043e0:	59383a2d 	.word	0x59383a2d
 80043e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80043e8:	441d      	add	r5, r3
 80043ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	bfc1      	itttt	gt
 80043f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80043fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80043fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004402:	bfda      	itte	le
 8004404:	f1c3 0320 	rsble	r3, r3, #32
 8004408:	fa06 f003 	lslle.w	r0, r6, r3
 800440c:	4318      	orrgt	r0, r3
 800440e:	f7fc f8a1 	bl	8000554 <__aeabi_ui2d>
 8004412:	2301      	movs	r3, #1
 8004414:	4606      	mov	r6, r0
 8004416:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800441a:	3d01      	subs	r5, #1
 800441c:	930e      	str	r3, [sp, #56]	; 0x38
 800441e:	e76a      	b.n	80042f6 <_dtoa_r+0x116>
 8004420:	2301      	movs	r3, #1
 8004422:	e7b2      	b.n	800438a <_dtoa_r+0x1aa>
 8004424:	900b      	str	r0, [sp, #44]	; 0x2c
 8004426:	e7b1      	b.n	800438c <_dtoa_r+0x1ac>
 8004428:	9b04      	ldr	r3, [sp, #16]
 800442a:	9a00      	ldr	r2, [sp, #0]
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	4253      	negs	r3, r2
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	2300      	movs	r3, #0
 8004436:	930a      	str	r3, [sp, #40]	; 0x28
 8004438:	e7bf      	b.n	80043ba <_dtoa_r+0x1da>
 800443a:	2300      	movs	r3, #0
 800443c:	9308      	str	r3, [sp, #32]
 800443e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	dc55      	bgt.n	80044f0 <_dtoa_r+0x310>
 8004444:	2301      	movs	r3, #1
 8004446:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800444a:	461a      	mov	r2, r3
 800444c:	9209      	str	r2, [sp, #36]	; 0x24
 800444e:	e00c      	b.n	800446a <_dtoa_r+0x28a>
 8004450:	2301      	movs	r3, #1
 8004452:	e7f3      	b.n	800443c <_dtoa_r+0x25c>
 8004454:	2300      	movs	r3, #0
 8004456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004458:	9308      	str	r3, [sp, #32]
 800445a:	9b00      	ldr	r3, [sp, #0]
 800445c:	4413      	add	r3, r2
 800445e:	9302      	str	r3, [sp, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	9303      	str	r3, [sp, #12]
 8004466:	bfb8      	it	lt
 8004468:	2301      	movlt	r3, #1
 800446a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800446c:	2200      	movs	r2, #0
 800446e:	6042      	str	r2, [r0, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	f102 0614 	add.w	r6, r2, #20
 8004476:	429e      	cmp	r6, r3
 8004478:	6841      	ldr	r1, [r0, #4]
 800447a:	d93d      	bls.n	80044f8 <_dtoa_r+0x318>
 800447c:	4620      	mov	r0, r4
 800447e:	f000 fefb 	bl	8005278 <_Balloc>
 8004482:	9001      	str	r0, [sp, #4]
 8004484:	2800      	cmp	r0, #0
 8004486:	d13b      	bne.n	8004500 <_dtoa_r+0x320>
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <_dtoa_r+0x2f0>)
 800448a:	4602      	mov	r2, r0
 800448c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004490:	e6c0      	b.n	8004214 <_dtoa_r+0x34>
 8004492:	2301      	movs	r3, #1
 8004494:	e7df      	b.n	8004456 <_dtoa_r+0x276>
 8004496:	bf00      	nop
 8004498:	636f4361 	.word	0x636f4361
 800449c:	3fd287a7 	.word	0x3fd287a7
 80044a0:	8b60c8b3 	.word	0x8b60c8b3
 80044a4:	3fc68a28 	.word	0x3fc68a28
 80044a8:	509f79fb 	.word	0x509f79fb
 80044ac:	3fd34413 	.word	0x3fd34413
 80044b0:	08012912 	.word	0x08012912
 80044b4:	080129f1 	.word	0x080129f1
 80044b8:	7ff00000 	.word	0x7ff00000
 80044bc:	080129ed 	.word	0x080129ed
 80044c0:	080129e4 	.word	0x080129e4
 80044c4:	08008a1c 	.word	0x08008a1c
 80044c8:	3ff80000 	.word	0x3ff80000
 80044cc:	08012b90 	.word	0x08012b90
 80044d0:	08012a6e 	.word	0x08012a6e
 80044d4:	2501      	movs	r5, #1
 80044d6:	2300      	movs	r3, #0
 80044d8:	9306      	str	r3, [sp, #24]
 80044da:	9508      	str	r5, [sp, #32]
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2312      	movs	r3, #18
 80044e8:	e7b0      	b.n	800444c <_dtoa_r+0x26c>
 80044ea:	2301      	movs	r3, #1
 80044ec:	9308      	str	r3, [sp, #32]
 80044ee:	e7f5      	b.n	80044dc <_dtoa_r+0x2fc>
 80044f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044f6:	e7b8      	b.n	800446a <_dtoa_r+0x28a>
 80044f8:	3101      	adds	r1, #1
 80044fa:	6041      	str	r1, [r0, #4]
 80044fc:	0052      	lsls	r2, r2, #1
 80044fe:	e7b8      	b.n	8004472 <_dtoa_r+0x292>
 8004500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004502:	9a01      	ldr	r2, [sp, #4]
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	2b0e      	cmp	r3, #14
 800450a:	f200 809d 	bhi.w	8004648 <_dtoa_r+0x468>
 800450e:	2d00      	cmp	r5, #0
 8004510:	f000 809a 	beq.w	8004648 <_dtoa_r+0x468>
 8004514:	9b00      	ldr	r3, [sp, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	dd32      	ble.n	8004580 <_dtoa_r+0x3a0>
 800451a:	4ab7      	ldr	r2, [pc, #732]	; (80047f8 <_dtoa_r+0x618>)
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004524:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004528:	9b00      	ldr	r3, [sp, #0]
 800452a:	05d8      	lsls	r0, r3, #23
 800452c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004530:	d516      	bpl.n	8004560 <_dtoa_r+0x380>
 8004532:	4bb2      	ldr	r3, [pc, #712]	; (80047fc <_dtoa_r+0x61c>)
 8004534:	ec51 0b19 	vmov	r0, r1, d9
 8004538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800453c:	f7fc f9ae 	bl	800089c <__aeabi_ddiv>
 8004540:	f007 070f 	and.w	r7, r7, #15
 8004544:	4682      	mov	sl, r0
 8004546:	468b      	mov	fp, r1
 8004548:	2503      	movs	r5, #3
 800454a:	4eac      	ldr	r6, [pc, #688]	; (80047fc <_dtoa_r+0x61c>)
 800454c:	b957      	cbnz	r7, 8004564 <_dtoa_r+0x384>
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	4650      	mov	r0, sl
 8004554:	4659      	mov	r1, fp
 8004556:	f7fc f9a1 	bl	800089c <__aeabi_ddiv>
 800455a:	4682      	mov	sl, r0
 800455c:	468b      	mov	fp, r1
 800455e:	e028      	b.n	80045b2 <_dtoa_r+0x3d2>
 8004560:	2502      	movs	r5, #2
 8004562:	e7f2      	b.n	800454a <_dtoa_r+0x36a>
 8004564:	07f9      	lsls	r1, r7, #31
 8004566:	d508      	bpl.n	800457a <_dtoa_r+0x39a>
 8004568:	4640      	mov	r0, r8
 800456a:	4649      	mov	r1, r9
 800456c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004570:	f7fc f86a 	bl	8000648 <__aeabi_dmul>
 8004574:	3501      	adds	r5, #1
 8004576:	4680      	mov	r8, r0
 8004578:	4689      	mov	r9, r1
 800457a:	107f      	asrs	r7, r7, #1
 800457c:	3608      	adds	r6, #8
 800457e:	e7e5      	b.n	800454c <_dtoa_r+0x36c>
 8004580:	f000 809b 	beq.w	80046ba <_dtoa_r+0x4da>
 8004584:	9b00      	ldr	r3, [sp, #0]
 8004586:	4f9d      	ldr	r7, [pc, #628]	; (80047fc <_dtoa_r+0x61c>)
 8004588:	425e      	negs	r6, r3
 800458a:	4b9b      	ldr	r3, [pc, #620]	; (80047f8 <_dtoa_r+0x618>)
 800458c:	f006 020f 	and.w	r2, r6, #15
 8004590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	ec51 0b19 	vmov	r0, r1, d9
 800459c:	f7fc f854 	bl	8000648 <__aeabi_dmul>
 80045a0:	1136      	asrs	r6, r6, #4
 80045a2:	4682      	mov	sl, r0
 80045a4:	468b      	mov	fp, r1
 80045a6:	2300      	movs	r3, #0
 80045a8:	2502      	movs	r5, #2
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	d17a      	bne.n	80046a4 <_dtoa_r+0x4c4>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1d3      	bne.n	800455a <_dtoa_r+0x37a>
 80045b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8082 	beq.w	80046be <_dtoa_r+0x4de>
 80045ba:	4b91      	ldr	r3, [pc, #580]	; (8004800 <_dtoa_r+0x620>)
 80045bc:	2200      	movs	r2, #0
 80045be:	4650      	mov	r0, sl
 80045c0:	4659      	mov	r1, fp
 80045c2:	f7fc fab3 	bl	8000b2c <__aeabi_dcmplt>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d079      	beq.n	80046be <_dtoa_r+0x4de>
 80045ca:	9b03      	ldr	r3, [sp, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d076      	beq.n	80046be <_dtoa_r+0x4de>
 80045d0:	9b02      	ldr	r3, [sp, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	dd36      	ble.n	8004644 <_dtoa_r+0x464>
 80045d6:	9b00      	ldr	r3, [sp, #0]
 80045d8:	4650      	mov	r0, sl
 80045da:	4659      	mov	r1, fp
 80045dc:	1e5f      	subs	r7, r3, #1
 80045de:	2200      	movs	r2, #0
 80045e0:	4b88      	ldr	r3, [pc, #544]	; (8004804 <_dtoa_r+0x624>)
 80045e2:	f7fc f831 	bl	8000648 <__aeabi_dmul>
 80045e6:	9e02      	ldr	r6, [sp, #8]
 80045e8:	4682      	mov	sl, r0
 80045ea:	468b      	mov	fp, r1
 80045ec:	3501      	adds	r5, #1
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7fb ffc0 	bl	8000574 <__aeabi_i2d>
 80045f4:	4652      	mov	r2, sl
 80045f6:	465b      	mov	r3, fp
 80045f8:	f7fc f826 	bl	8000648 <__aeabi_dmul>
 80045fc:	4b82      	ldr	r3, [pc, #520]	; (8004808 <_dtoa_r+0x628>)
 80045fe:	2200      	movs	r2, #0
 8004600:	f7fb fe6c 	bl	80002dc <__adddf3>
 8004604:	46d0      	mov	r8, sl
 8004606:	46d9      	mov	r9, fp
 8004608:	4682      	mov	sl, r0
 800460a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800460e:	2e00      	cmp	r6, #0
 8004610:	d158      	bne.n	80046c4 <_dtoa_r+0x4e4>
 8004612:	4b7e      	ldr	r3, [pc, #504]	; (800480c <_dtoa_r+0x62c>)
 8004614:	2200      	movs	r2, #0
 8004616:	4640      	mov	r0, r8
 8004618:	4649      	mov	r1, r9
 800461a:	f7fb fe5d 	bl	80002d8 <__aeabi_dsub>
 800461e:	4652      	mov	r2, sl
 8004620:	465b      	mov	r3, fp
 8004622:	4680      	mov	r8, r0
 8004624:	4689      	mov	r9, r1
 8004626:	f7fc fa9f 	bl	8000b68 <__aeabi_dcmpgt>
 800462a:	2800      	cmp	r0, #0
 800462c:	f040 8295 	bne.w	8004b5a <_dtoa_r+0x97a>
 8004630:	4652      	mov	r2, sl
 8004632:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	f7fc fa77 	bl	8000b2c <__aeabi_dcmplt>
 800463e:	2800      	cmp	r0, #0
 8004640:	f040 8289 	bne.w	8004b56 <_dtoa_r+0x976>
 8004644:	ec5b ab19 	vmov	sl, fp, d9
 8004648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800464a:	2b00      	cmp	r3, #0
 800464c:	f2c0 8148 	blt.w	80048e0 <_dtoa_r+0x700>
 8004650:	9a00      	ldr	r2, [sp, #0]
 8004652:	2a0e      	cmp	r2, #14
 8004654:	f300 8144 	bgt.w	80048e0 <_dtoa_r+0x700>
 8004658:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <_dtoa_r+0x618>)
 800465a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800465e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	f280 80d5 	bge.w	8004814 <_dtoa_r+0x634>
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f300 80d1 	bgt.w	8004814 <_dtoa_r+0x634>
 8004672:	f040 826f 	bne.w	8004b54 <_dtoa_r+0x974>
 8004676:	4b65      	ldr	r3, [pc, #404]	; (800480c <_dtoa_r+0x62c>)
 8004678:	2200      	movs	r2, #0
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fb ffe3 	bl	8000648 <__aeabi_dmul>
 8004682:	4652      	mov	r2, sl
 8004684:	465b      	mov	r3, fp
 8004686:	f7fc fa65 	bl	8000b54 <__aeabi_dcmpge>
 800468a:	9e03      	ldr	r6, [sp, #12]
 800468c:	4637      	mov	r7, r6
 800468e:	2800      	cmp	r0, #0
 8004690:	f040 8245 	bne.w	8004b1e <_dtoa_r+0x93e>
 8004694:	9d01      	ldr	r5, [sp, #4]
 8004696:	2331      	movs	r3, #49	; 0x31
 8004698:	f805 3b01 	strb.w	r3, [r5], #1
 800469c:	9b00      	ldr	r3, [sp, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	e240      	b.n	8004b26 <_dtoa_r+0x946>
 80046a4:	07f2      	lsls	r2, r6, #31
 80046a6:	d505      	bpl.n	80046b4 <_dtoa_r+0x4d4>
 80046a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ac:	f7fb ffcc 	bl	8000648 <__aeabi_dmul>
 80046b0:	3501      	adds	r5, #1
 80046b2:	2301      	movs	r3, #1
 80046b4:	1076      	asrs	r6, r6, #1
 80046b6:	3708      	adds	r7, #8
 80046b8:	e777      	b.n	80045aa <_dtoa_r+0x3ca>
 80046ba:	2502      	movs	r5, #2
 80046bc:	e779      	b.n	80045b2 <_dtoa_r+0x3d2>
 80046be:	9f00      	ldr	r7, [sp, #0]
 80046c0:	9e03      	ldr	r6, [sp, #12]
 80046c2:	e794      	b.n	80045ee <_dtoa_r+0x40e>
 80046c4:	9901      	ldr	r1, [sp, #4]
 80046c6:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <_dtoa_r+0x618>)
 80046c8:	4431      	add	r1, r6
 80046ca:	910d      	str	r1, [sp, #52]	; 0x34
 80046cc:	9908      	ldr	r1, [sp, #32]
 80046ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046d6:	2900      	cmp	r1, #0
 80046d8:	d043      	beq.n	8004762 <_dtoa_r+0x582>
 80046da:	494d      	ldr	r1, [pc, #308]	; (8004810 <_dtoa_r+0x630>)
 80046dc:	2000      	movs	r0, #0
 80046de:	f7fc f8dd 	bl	800089c <__aeabi_ddiv>
 80046e2:	4652      	mov	r2, sl
 80046e4:	465b      	mov	r3, fp
 80046e6:	f7fb fdf7 	bl	80002d8 <__aeabi_dsub>
 80046ea:	9d01      	ldr	r5, [sp, #4]
 80046ec:	4682      	mov	sl, r0
 80046ee:	468b      	mov	fp, r1
 80046f0:	4649      	mov	r1, r9
 80046f2:	4640      	mov	r0, r8
 80046f4:	f7fc fa58 	bl	8000ba8 <__aeabi_d2iz>
 80046f8:	4606      	mov	r6, r0
 80046fa:	f7fb ff3b 	bl	8000574 <__aeabi_i2d>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4640      	mov	r0, r8
 8004704:	4649      	mov	r1, r9
 8004706:	f7fb fde7 	bl	80002d8 <__aeabi_dsub>
 800470a:	3630      	adds	r6, #48	; 0x30
 800470c:	f805 6b01 	strb.w	r6, [r5], #1
 8004710:	4652      	mov	r2, sl
 8004712:	465b      	mov	r3, fp
 8004714:	4680      	mov	r8, r0
 8004716:	4689      	mov	r9, r1
 8004718:	f7fc fa08 	bl	8000b2c <__aeabi_dcmplt>
 800471c:	2800      	cmp	r0, #0
 800471e:	d163      	bne.n	80047e8 <_dtoa_r+0x608>
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	4936      	ldr	r1, [pc, #216]	; (8004800 <_dtoa_r+0x620>)
 8004726:	2000      	movs	r0, #0
 8004728:	f7fb fdd6 	bl	80002d8 <__aeabi_dsub>
 800472c:	4652      	mov	r2, sl
 800472e:	465b      	mov	r3, fp
 8004730:	f7fc f9fc 	bl	8000b2c <__aeabi_dcmplt>
 8004734:	2800      	cmp	r0, #0
 8004736:	f040 80b5 	bne.w	80048a4 <_dtoa_r+0x6c4>
 800473a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800473c:	429d      	cmp	r5, r3
 800473e:	d081      	beq.n	8004644 <_dtoa_r+0x464>
 8004740:	4b30      	ldr	r3, [pc, #192]	; (8004804 <_dtoa_r+0x624>)
 8004742:	2200      	movs	r2, #0
 8004744:	4650      	mov	r0, sl
 8004746:	4659      	mov	r1, fp
 8004748:	f7fb ff7e 	bl	8000648 <__aeabi_dmul>
 800474c:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <_dtoa_r+0x624>)
 800474e:	4682      	mov	sl, r0
 8004750:	468b      	mov	fp, r1
 8004752:	4640      	mov	r0, r8
 8004754:	4649      	mov	r1, r9
 8004756:	2200      	movs	r2, #0
 8004758:	f7fb ff76 	bl	8000648 <__aeabi_dmul>
 800475c:	4680      	mov	r8, r0
 800475e:	4689      	mov	r9, r1
 8004760:	e7c6      	b.n	80046f0 <_dtoa_r+0x510>
 8004762:	4650      	mov	r0, sl
 8004764:	4659      	mov	r1, fp
 8004766:	f7fb ff6f 	bl	8000648 <__aeabi_dmul>
 800476a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800476c:	9d01      	ldr	r5, [sp, #4]
 800476e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004770:	4682      	mov	sl, r0
 8004772:	468b      	mov	fp, r1
 8004774:	4649      	mov	r1, r9
 8004776:	4640      	mov	r0, r8
 8004778:	f7fc fa16 	bl	8000ba8 <__aeabi_d2iz>
 800477c:	4606      	mov	r6, r0
 800477e:	f7fb fef9 	bl	8000574 <__aeabi_i2d>
 8004782:	3630      	adds	r6, #48	; 0x30
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4640      	mov	r0, r8
 800478a:	4649      	mov	r1, r9
 800478c:	f7fb fda4 	bl	80002d8 <__aeabi_dsub>
 8004790:	f805 6b01 	strb.w	r6, [r5], #1
 8004794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004796:	429d      	cmp	r5, r3
 8004798:	4680      	mov	r8, r0
 800479a:	4689      	mov	r9, r1
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	d124      	bne.n	80047ec <_dtoa_r+0x60c>
 80047a2:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <_dtoa_r+0x630>)
 80047a4:	4650      	mov	r0, sl
 80047a6:	4659      	mov	r1, fp
 80047a8:	f7fb fd98 	bl	80002dc <__adddf3>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4640      	mov	r0, r8
 80047b2:	4649      	mov	r1, r9
 80047b4:	f7fc f9d8 	bl	8000b68 <__aeabi_dcmpgt>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d173      	bne.n	80048a4 <_dtoa_r+0x6c4>
 80047bc:	4652      	mov	r2, sl
 80047be:	465b      	mov	r3, fp
 80047c0:	4913      	ldr	r1, [pc, #76]	; (8004810 <_dtoa_r+0x630>)
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7fb fd88 	bl	80002d8 <__aeabi_dsub>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4640      	mov	r0, r8
 80047ce:	4649      	mov	r1, r9
 80047d0:	f7fc f9ac 	bl	8000b2c <__aeabi_dcmplt>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f43f af35 	beq.w	8004644 <_dtoa_r+0x464>
 80047da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80047dc:	1e6b      	subs	r3, r5, #1
 80047de:	930f      	str	r3, [sp, #60]	; 0x3c
 80047e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047e4:	2b30      	cmp	r3, #48	; 0x30
 80047e6:	d0f8      	beq.n	80047da <_dtoa_r+0x5fa>
 80047e8:	9700      	str	r7, [sp, #0]
 80047ea:	e049      	b.n	8004880 <_dtoa_r+0x6a0>
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_dtoa_r+0x624>)
 80047ee:	f7fb ff2b 	bl	8000648 <__aeabi_dmul>
 80047f2:	4680      	mov	r8, r0
 80047f4:	4689      	mov	r9, r1
 80047f6:	e7bd      	b.n	8004774 <_dtoa_r+0x594>
 80047f8:	08012b90 	.word	0x08012b90
 80047fc:	08012b68 	.word	0x08012b68
 8004800:	3ff00000 	.word	0x3ff00000
 8004804:	40240000 	.word	0x40240000
 8004808:	401c0000 	.word	0x401c0000
 800480c:	40140000 	.word	0x40140000
 8004810:	3fe00000 	.word	0x3fe00000
 8004814:	9d01      	ldr	r5, [sp, #4]
 8004816:	4656      	mov	r6, sl
 8004818:	465f      	mov	r7, fp
 800481a:	4642      	mov	r2, r8
 800481c:	464b      	mov	r3, r9
 800481e:	4630      	mov	r0, r6
 8004820:	4639      	mov	r1, r7
 8004822:	f7fc f83b 	bl	800089c <__aeabi_ddiv>
 8004826:	f7fc f9bf 	bl	8000ba8 <__aeabi_d2iz>
 800482a:	4682      	mov	sl, r0
 800482c:	f7fb fea2 	bl	8000574 <__aeabi_i2d>
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	f7fb ff08 	bl	8000648 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4630      	mov	r0, r6
 800483e:	4639      	mov	r1, r7
 8004840:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004844:	f7fb fd48 	bl	80002d8 <__aeabi_dsub>
 8004848:	f805 6b01 	strb.w	r6, [r5], #1
 800484c:	9e01      	ldr	r6, [sp, #4]
 800484e:	9f03      	ldr	r7, [sp, #12]
 8004850:	1bae      	subs	r6, r5, r6
 8004852:	42b7      	cmp	r7, r6
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	d135      	bne.n	80048c6 <_dtoa_r+0x6e6>
 800485a:	f7fb fd3f 	bl	80002dc <__adddf3>
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	4606      	mov	r6, r0
 8004864:	460f      	mov	r7, r1
 8004866:	f7fc f97f 	bl	8000b68 <__aeabi_dcmpgt>
 800486a:	b9d0      	cbnz	r0, 80048a2 <_dtoa_r+0x6c2>
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	4630      	mov	r0, r6
 8004872:	4639      	mov	r1, r7
 8004874:	f7fc f950 	bl	8000b18 <__aeabi_dcmpeq>
 8004878:	b110      	cbz	r0, 8004880 <_dtoa_r+0x6a0>
 800487a:	f01a 0f01 	tst.w	sl, #1
 800487e:	d110      	bne.n	80048a2 <_dtoa_r+0x6c2>
 8004880:	4620      	mov	r0, r4
 8004882:	ee18 1a10 	vmov	r1, s16
 8004886:	f000 fd37 	bl	80052f8 <_Bfree>
 800488a:	2300      	movs	r3, #0
 800488c:	9800      	ldr	r0, [sp, #0]
 800488e:	702b      	strb	r3, [r5, #0]
 8004890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004892:	3001      	adds	r0, #1
 8004894:	6018      	str	r0, [r3, #0]
 8004896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004898:	2b00      	cmp	r3, #0
 800489a:	f43f acf1 	beq.w	8004280 <_dtoa_r+0xa0>
 800489e:	601d      	str	r5, [r3, #0]
 80048a0:	e4ee      	b.n	8004280 <_dtoa_r+0xa0>
 80048a2:	9f00      	ldr	r7, [sp, #0]
 80048a4:	462b      	mov	r3, r5
 80048a6:	461d      	mov	r5, r3
 80048a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048ac:	2a39      	cmp	r2, #57	; 0x39
 80048ae:	d106      	bne.n	80048be <_dtoa_r+0x6de>
 80048b0:	9a01      	ldr	r2, [sp, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d1f7      	bne.n	80048a6 <_dtoa_r+0x6c6>
 80048b6:	9901      	ldr	r1, [sp, #4]
 80048b8:	2230      	movs	r2, #48	; 0x30
 80048ba:	3701      	adds	r7, #1
 80048bc:	700a      	strb	r2, [r1, #0]
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	3201      	adds	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e790      	b.n	80047e8 <_dtoa_r+0x608>
 80048c6:	4ba6      	ldr	r3, [pc, #664]	; (8004b60 <_dtoa_r+0x980>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	f7fb febd 	bl	8000648 <__aeabi_dmul>
 80048ce:	2200      	movs	r2, #0
 80048d0:	2300      	movs	r3, #0
 80048d2:	4606      	mov	r6, r0
 80048d4:	460f      	mov	r7, r1
 80048d6:	f7fc f91f 	bl	8000b18 <__aeabi_dcmpeq>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d09d      	beq.n	800481a <_dtoa_r+0x63a>
 80048de:	e7cf      	b.n	8004880 <_dtoa_r+0x6a0>
 80048e0:	9a08      	ldr	r2, [sp, #32]
 80048e2:	2a00      	cmp	r2, #0
 80048e4:	f000 80d7 	beq.w	8004a96 <_dtoa_r+0x8b6>
 80048e8:	9a06      	ldr	r2, [sp, #24]
 80048ea:	2a01      	cmp	r2, #1
 80048ec:	f300 80ba 	bgt.w	8004a64 <_dtoa_r+0x884>
 80048f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	f000 80b2 	beq.w	8004a5c <_dtoa_r+0x87c>
 80048f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048fc:	9e07      	ldr	r6, [sp, #28]
 80048fe:	9d04      	ldr	r5, [sp, #16]
 8004900:	9a04      	ldr	r2, [sp, #16]
 8004902:	441a      	add	r2, r3
 8004904:	9204      	str	r2, [sp, #16]
 8004906:	9a05      	ldr	r2, [sp, #20]
 8004908:	2101      	movs	r1, #1
 800490a:	441a      	add	r2, r3
 800490c:	4620      	mov	r0, r4
 800490e:	9205      	str	r2, [sp, #20]
 8004910:	f000 fdaa 	bl	8005468 <__i2b>
 8004914:	4607      	mov	r7, r0
 8004916:	2d00      	cmp	r5, #0
 8004918:	dd0c      	ble.n	8004934 <_dtoa_r+0x754>
 800491a:	9b05      	ldr	r3, [sp, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	dd09      	ble.n	8004934 <_dtoa_r+0x754>
 8004920:	42ab      	cmp	r3, r5
 8004922:	9a04      	ldr	r2, [sp, #16]
 8004924:	bfa8      	it	ge
 8004926:	462b      	movge	r3, r5
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	9204      	str	r2, [sp, #16]
 800492c:	9a05      	ldr	r2, [sp, #20]
 800492e:	1aed      	subs	r5, r5, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	9305      	str	r3, [sp, #20]
 8004934:	9b07      	ldr	r3, [sp, #28]
 8004936:	b31b      	cbz	r3, 8004980 <_dtoa_r+0x7a0>
 8004938:	9b08      	ldr	r3, [sp, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80af 	beq.w	8004a9e <_dtoa_r+0x8be>
 8004940:	2e00      	cmp	r6, #0
 8004942:	dd13      	ble.n	800496c <_dtoa_r+0x78c>
 8004944:	4639      	mov	r1, r7
 8004946:	4632      	mov	r2, r6
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fe4d 	bl	80055e8 <__pow5mult>
 800494e:	ee18 2a10 	vmov	r2, s16
 8004952:	4601      	mov	r1, r0
 8004954:	4607      	mov	r7, r0
 8004956:	4620      	mov	r0, r4
 8004958:	f000 fd9c 	bl	8005494 <__multiply>
 800495c:	ee18 1a10 	vmov	r1, s16
 8004960:	4680      	mov	r8, r0
 8004962:	4620      	mov	r0, r4
 8004964:	f000 fcc8 	bl	80052f8 <_Bfree>
 8004968:	ee08 8a10 	vmov	s16, r8
 800496c:	9b07      	ldr	r3, [sp, #28]
 800496e:	1b9a      	subs	r2, r3, r6
 8004970:	d006      	beq.n	8004980 <_dtoa_r+0x7a0>
 8004972:	ee18 1a10 	vmov	r1, s16
 8004976:	4620      	mov	r0, r4
 8004978:	f000 fe36 	bl	80055e8 <__pow5mult>
 800497c:	ee08 0a10 	vmov	s16, r0
 8004980:	2101      	movs	r1, #1
 8004982:	4620      	mov	r0, r4
 8004984:	f000 fd70 	bl	8005468 <__i2b>
 8004988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	4606      	mov	r6, r0
 800498e:	f340 8088 	ble.w	8004aa2 <_dtoa_r+0x8c2>
 8004992:	461a      	mov	r2, r3
 8004994:	4601      	mov	r1, r0
 8004996:	4620      	mov	r0, r4
 8004998:	f000 fe26 	bl	80055e8 <__pow5mult>
 800499c:	9b06      	ldr	r3, [sp, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	4606      	mov	r6, r0
 80049a2:	f340 8081 	ble.w	8004aa8 <_dtoa_r+0x8c8>
 80049a6:	f04f 0800 	mov.w	r8, #0
 80049aa:	6933      	ldr	r3, [r6, #16]
 80049ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80049b0:	6918      	ldr	r0, [r3, #16]
 80049b2:	f000 fd09 	bl	80053c8 <__hi0bits>
 80049b6:	f1c0 0020 	rsb	r0, r0, #32
 80049ba:	9b05      	ldr	r3, [sp, #20]
 80049bc:	4418      	add	r0, r3
 80049be:	f010 001f 	ands.w	r0, r0, #31
 80049c2:	f000 8092 	beq.w	8004aea <_dtoa_r+0x90a>
 80049c6:	f1c0 0320 	rsb	r3, r0, #32
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	f340 808a 	ble.w	8004ae4 <_dtoa_r+0x904>
 80049d0:	f1c0 001c 	rsb	r0, r0, #28
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	4403      	add	r3, r0
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	9b05      	ldr	r3, [sp, #20]
 80049dc:	4403      	add	r3, r0
 80049de:	4405      	add	r5, r0
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	9b04      	ldr	r3, [sp, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	dd07      	ble.n	80049f8 <_dtoa_r+0x818>
 80049e8:	ee18 1a10 	vmov	r1, s16
 80049ec:	461a      	mov	r2, r3
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 fe54 	bl	800569c <__lshift>
 80049f4:	ee08 0a10 	vmov	s16, r0
 80049f8:	9b05      	ldr	r3, [sp, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dd05      	ble.n	8004a0a <_dtoa_r+0x82a>
 80049fe:	4631      	mov	r1, r6
 8004a00:	461a      	mov	r2, r3
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 fe4a 	bl	800569c <__lshift>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d06e      	beq.n	8004aee <_dtoa_r+0x90e>
 8004a10:	ee18 0a10 	vmov	r0, s16
 8004a14:	4631      	mov	r1, r6
 8004a16:	f000 feb1 	bl	800577c <__mcmp>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	da67      	bge.n	8004aee <_dtoa_r+0x90e>
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	ee18 1a10 	vmov	r1, s16
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	220a      	movs	r2, #10
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fc85 	bl	800533c <__multadd>
 8004a32:	9b08      	ldr	r3, [sp, #32]
 8004a34:	ee08 0a10 	vmov	s16, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 81b1 	beq.w	8004da0 <_dtoa_r+0xbc0>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	4639      	mov	r1, r7
 8004a42:	220a      	movs	r2, #10
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fc79 	bl	800533c <__multadd>
 8004a4a:	9b02      	ldr	r3, [sp, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	4607      	mov	r7, r0
 8004a50:	f300 808e 	bgt.w	8004b70 <_dtoa_r+0x990>
 8004a54:	9b06      	ldr	r3, [sp, #24]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	dc51      	bgt.n	8004afe <_dtoa_r+0x91e>
 8004a5a:	e089      	b.n	8004b70 <_dtoa_r+0x990>
 8004a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a62:	e74b      	b.n	80048fc <_dtoa_r+0x71c>
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	1e5e      	subs	r6, r3, #1
 8004a68:	9b07      	ldr	r3, [sp, #28]
 8004a6a:	42b3      	cmp	r3, r6
 8004a6c:	bfbf      	itttt	lt
 8004a6e:	9b07      	ldrlt	r3, [sp, #28]
 8004a70:	9607      	strlt	r6, [sp, #28]
 8004a72:	1af2      	sublt	r2, r6, r3
 8004a74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a76:	bfb6      	itet	lt
 8004a78:	189b      	addlt	r3, r3, r2
 8004a7a:	1b9e      	subge	r6, r3, r6
 8004a7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	bfb8      	it	lt
 8004a82:	2600      	movlt	r6, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bfb7      	itett	lt
 8004a88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004a8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004a90:	1a9d      	sublt	r5, r3, r2
 8004a92:	2300      	movlt	r3, #0
 8004a94:	e734      	b.n	8004900 <_dtoa_r+0x720>
 8004a96:	9e07      	ldr	r6, [sp, #28]
 8004a98:	9d04      	ldr	r5, [sp, #16]
 8004a9a:	9f08      	ldr	r7, [sp, #32]
 8004a9c:	e73b      	b.n	8004916 <_dtoa_r+0x736>
 8004a9e:	9a07      	ldr	r2, [sp, #28]
 8004aa0:	e767      	b.n	8004972 <_dtoa_r+0x792>
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	dc18      	bgt.n	8004ada <_dtoa_r+0x8fa>
 8004aa8:	f1ba 0f00 	cmp.w	sl, #0
 8004aac:	d115      	bne.n	8004ada <_dtoa_r+0x8fa>
 8004aae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ab2:	b993      	cbnz	r3, 8004ada <_dtoa_r+0x8fa>
 8004ab4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ab8:	0d1b      	lsrs	r3, r3, #20
 8004aba:	051b      	lsls	r3, r3, #20
 8004abc:	b183      	cbz	r3, 8004ae0 <_dtoa_r+0x900>
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	9b05      	ldr	r3, [sp, #20]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	f04f 0801 	mov.w	r8, #1
 8004ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f af6a 	bne.w	80049aa <_dtoa_r+0x7ca>
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	e76f      	b.n	80049ba <_dtoa_r+0x7da>
 8004ada:	f04f 0800 	mov.w	r8, #0
 8004ade:	e7f6      	b.n	8004ace <_dtoa_r+0x8ee>
 8004ae0:	4698      	mov	r8, r3
 8004ae2:	e7f4      	b.n	8004ace <_dtoa_r+0x8ee>
 8004ae4:	f43f af7d 	beq.w	80049e2 <_dtoa_r+0x802>
 8004ae8:	4618      	mov	r0, r3
 8004aea:	301c      	adds	r0, #28
 8004aec:	e772      	b.n	80049d4 <_dtoa_r+0x7f4>
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	dc37      	bgt.n	8004b64 <_dtoa_r+0x984>
 8004af4:	9b06      	ldr	r3, [sp, #24]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	dd34      	ble.n	8004b64 <_dtoa_r+0x984>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	9302      	str	r3, [sp, #8]
 8004afe:	9b02      	ldr	r3, [sp, #8]
 8004b00:	b96b      	cbnz	r3, 8004b1e <_dtoa_r+0x93e>
 8004b02:	4631      	mov	r1, r6
 8004b04:	2205      	movs	r2, #5
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 fc18 	bl	800533c <__multadd>
 8004b0c:	4601      	mov	r1, r0
 8004b0e:	4606      	mov	r6, r0
 8004b10:	ee18 0a10 	vmov	r0, s16
 8004b14:	f000 fe32 	bl	800577c <__mcmp>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f73f adbb 	bgt.w	8004694 <_dtoa_r+0x4b4>
 8004b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b20:	9d01      	ldr	r5, [sp, #4]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	f04f 0800 	mov.w	r8, #0
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 fbe3 	bl	80052f8 <_Bfree>
 8004b32:	2f00      	cmp	r7, #0
 8004b34:	f43f aea4 	beq.w	8004880 <_dtoa_r+0x6a0>
 8004b38:	f1b8 0f00 	cmp.w	r8, #0
 8004b3c:	d005      	beq.n	8004b4a <_dtoa_r+0x96a>
 8004b3e:	45b8      	cmp	r8, r7
 8004b40:	d003      	beq.n	8004b4a <_dtoa_r+0x96a>
 8004b42:	4641      	mov	r1, r8
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 fbd7 	bl	80052f8 <_Bfree>
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 fbd3 	bl	80052f8 <_Bfree>
 8004b52:	e695      	b.n	8004880 <_dtoa_r+0x6a0>
 8004b54:	2600      	movs	r6, #0
 8004b56:	4637      	mov	r7, r6
 8004b58:	e7e1      	b.n	8004b1e <_dtoa_r+0x93e>
 8004b5a:	9700      	str	r7, [sp, #0]
 8004b5c:	4637      	mov	r7, r6
 8004b5e:	e599      	b.n	8004694 <_dtoa_r+0x4b4>
 8004b60:	40240000 	.word	0x40240000
 8004b64:	9b08      	ldr	r3, [sp, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 80ca 	beq.w	8004d00 <_dtoa_r+0xb20>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	dd05      	ble.n	8004b80 <_dtoa_r+0x9a0>
 8004b74:	4639      	mov	r1, r7
 8004b76:	462a      	mov	r2, r5
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 fd8f 	bl	800569c <__lshift>
 8004b7e:	4607      	mov	r7, r0
 8004b80:	f1b8 0f00 	cmp.w	r8, #0
 8004b84:	d05b      	beq.n	8004c3e <_dtoa_r+0xa5e>
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f000 fb75 	bl	8005278 <_Balloc>
 8004b8e:	4605      	mov	r5, r0
 8004b90:	b928      	cbnz	r0, 8004b9e <_dtoa_r+0x9be>
 8004b92:	4b87      	ldr	r3, [pc, #540]	; (8004db0 <_dtoa_r+0xbd0>)
 8004b94:	4602      	mov	r2, r0
 8004b96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b9a:	f7ff bb3b 	b.w	8004214 <_dtoa_r+0x34>
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	3202      	adds	r2, #2
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	f107 010c 	add.w	r1, r7, #12
 8004ba8:	300c      	adds	r0, #12
 8004baa:	f000 fb57 	bl	800525c <memcpy>
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 fd72 	bl	800569c <__lshift>
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	f103 0901 	add.w	r9, r3, #1
 8004bbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	f00a 0301 	and.w	r3, sl, #1
 8004bca:	46b8      	mov	r8, r7
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	4607      	mov	r7, r0
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	ee18 0a10 	vmov	r0, s16
 8004bd6:	f7ff fa75 	bl	80040c4 <quorem>
 8004bda:	4641      	mov	r1, r8
 8004bdc:	9002      	str	r0, [sp, #8]
 8004bde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004be2:	ee18 0a10 	vmov	r0, s16
 8004be6:	f000 fdc9 	bl	800577c <__mcmp>
 8004bea:	463a      	mov	r2, r7
 8004bec:	9003      	str	r0, [sp, #12]
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 fddf 	bl	80057b4 <__mdiff>
 8004bf6:	68c2      	ldr	r2, [r0, #12]
 8004bf8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	bb02      	cbnz	r2, 8004c42 <_dtoa_r+0xa62>
 8004c00:	4601      	mov	r1, r0
 8004c02:	ee18 0a10 	vmov	r0, s16
 8004c06:	f000 fdb9 	bl	800577c <__mcmp>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	4620      	mov	r0, r4
 8004c10:	9207      	str	r2, [sp, #28]
 8004c12:	f000 fb71 	bl	80052f8 <_Bfree>
 8004c16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004c1a:	ea43 0102 	orr.w	r1, r3, r2
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	464d      	mov	r5, r9
 8004c24:	d10f      	bne.n	8004c46 <_dtoa_r+0xa66>
 8004c26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c2a:	d02a      	beq.n	8004c82 <_dtoa_r+0xaa2>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dd02      	ble.n	8004c38 <_dtoa_r+0xa58>
 8004c32:	9b02      	ldr	r3, [sp, #8]
 8004c34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004c38:	f88b a000 	strb.w	sl, [fp]
 8004c3c:	e775      	b.n	8004b2a <_dtoa_r+0x94a>
 8004c3e:	4638      	mov	r0, r7
 8004c40:	e7ba      	b.n	8004bb8 <_dtoa_r+0x9d8>
 8004c42:	2201      	movs	r2, #1
 8004c44:	e7e2      	b.n	8004c0c <_dtoa_r+0xa2c>
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db04      	blt.n	8004c56 <_dtoa_r+0xa76>
 8004c4c:	9906      	ldr	r1, [sp, #24]
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	9904      	ldr	r1, [sp, #16]
 8004c52:	430b      	orrs	r3, r1
 8004c54:	d122      	bne.n	8004c9c <_dtoa_r+0xabc>
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	ddee      	ble.n	8004c38 <_dtoa_r+0xa58>
 8004c5a:	ee18 1a10 	vmov	r1, s16
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fd1b 	bl	800569c <__lshift>
 8004c66:	4631      	mov	r1, r6
 8004c68:	ee08 0a10 	vmov	s16, r0
 8004c6c:	f000 fd86 	bl	800577c <__mcmp>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	dc03      	bgt.n	8004c7c <_dtoa_r+0xa9c>
 8004c74:	d1e0      	bne.n	8004c38 <_dtoa_r+0xa58>
 8004c76:	f01a 0f01 	tst.w	sl, #1
 8004c7a:	d0dd      	beq.n	8004c38 <_dtoa_r+0xa58>
 8004c7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c80:	d1d7      	bne.n	8004c32 <_dtoa_r+0xa52>
 8004c82:	2339      	movs	r3, #57	; 0x39
 8004c84:	f88b 3000 	strb.w	r3, [fp]
 8004c88:	462b      	mov	r3, r5
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c92:	2a39      	cmp	r2, #57	; 0x39
 8004c94:	d071      	beq.n	8004d7a <_dtoa_r+0xb9a>
 8004c96:	3201      	adds	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e746      	b.n	8004b2a <_dtoa_r+0x94a>
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	dd07      	ble.n	8004cb0 <_dtoa_r+0xad0>
 8004ca0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ca4:	d0ed      	beq.n	8004c82 <_dtoa_r+0xaa2>
 8004ca6:	f10a 0301 	add.w	r3, sl, #1
 8004caa:	f88b 3000 	strb.w	r3, [fp]
 8004cae:	e73c      	b.n	8004b2a <_dtoa_r+0x94a>
 8004cb0:	9b05      	ldr	r3, [sp, #20]
 8004cb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004cb6:	4599      	cmp	r9, r3
 8004cb8:	d047      	beq.n	8004d4a <_dtoa_r+0xb6a>
 8004cba:	ee18 1a10 	vmov	r1, s16
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	220a      	movs	r2, #10
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 fb3a 	bl	800533c <__multadd>
 8004cc8:	45b8      	cmp	r8, r7
 8004cca:	ee08 0a10 	vmov	s16, r0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	f04f 020a 	mov.w	r2, #10
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	4620      	mov	r0, r4
 8004cda:	d106      	bne.n	8004cea <_dtoa_r+0xb0a>
 8004cdc:	f000 fb2e 	bl	800533c <__multadd>
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	f109 0901 	add.w	r9, r9, #1
 8004ce8:	e772      	b.n	8004bd0 <_dtoa_r+0x9f0>
 8004cea:	f000 fb27 	bl	800533c <__multadd>
 8004cee:	4639      	mov	r1, r7
 8004cf0:	4680      	mov	r8, r0
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	220a      	movs	r2, #10
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f000 fb20 	bl	800533c <__multadd>
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	e7f1      	b.n	8004ce4 <_dtoa_r+0xb04>
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	9d01      	ldr	r5, [sp, #4]
 8004d06:	ee18 0a10 	vmov	r0, s16
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	f7ff f9da 	bl	80040c4 <quorem>
 8004d10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004d14:	9b01      	ldr	r3, [sp, #4]
 8004d16:	f805 ab01 	strb.w	sl, [r5], #1
 8004d1a:	1aea      	subs	r2, r5, r3
 8004d1c:	9b02      	ldr	r3, [sp, #8]
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	dd09      	ble.n	8004d36 <_dtoa_r+0xb56>
 8004d22:	ee18 1a10 	vmov	r1, s16
 8004d26:	2300      	movs	r3, #0
 8004d28:	220a      	movs	r2, #10
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f000 fb06 	bl	800533c <__multadd>
 8004d30:	ee08 0a10 	vmov	s16, r0
 8004d34:	e7e7      	b.n	8004d06 <_dtoa_r+0xb26>
 8004d36:	9b02      	ldr	r3, [sp, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bfc8      	it	gt
 8004d3c:	461d      	movgt	r5, r3
 8004d3e:	9b01      	ldr	r3, [sp, #4]
 8004d40:	bfd8      	it	le
 8004d42:	2501      	movle	r5, #1
 8004d44:	441d      	add	r5, r3
 8004d46:	f04f 0800 	mov.w	r8, #0
 8004d4a:	ee18 1a10 	vmov	r1, s16
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fca3 	bl	800569c <__lshift>
 8004d56:	4631      	mov	r1, r6
 8004d58:	ee08 0a10 	vmov	s16, r0
 8004d5c:	f000 fd0e 	bl	800577c <__mcmp>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	dc91      	bgt.n	8004c88 <_dtoa_r+0xaa8>
 8004d64:	d102      	bne.n	8004d6c <_dtoa_r+0xb8c>
 8004d66:	f01a 0f01 	tst.w	sl, #1
 8004d6a:	d18d      	bne.n	8004c88 <_dtoa_r+0xaa8>
 8004d6c:	462b      	mov	r3, r5
 8004d6e:	461d      	mov	r5, r3
 8004d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d74:	2a30      	cmp	r2, #48	; 0x30
 8004d76:	d0fa      	beq.n	8004d6e <_dtoa_r+0xb8e>
 8004d78:	e6d7      	b.n	8004b2a <_dtoa_r+0x94a>
 8004d7a:	9a01      	ldr	r2, [sp, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d184      	bne.n	8004c8a <_dtoa_r+0xaaa>
 8004d80:	9b00      	ldr	r3, [sp, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	2331      	movs	r3, #49	; 0x31
 8004d88:	7013      	strb	r3, [r2, #0]
 8004d8a:	e6ce      	b.n	8004b2a <_dtoa_r+0x94a>
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <_dtoa_r+0xbd4>)
 8004d8e:	f7ff ba95 	b.w	80042bc <_dtoa_r+0xdc>
 8004d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f aa6e 	bne.w	8004276 <_dtoa_r+0x96>
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <_dtoa_r+0xbd8>)
 8004d9c:	f7ff ba8e 	b.w	80042bc <_dtoa_r+0xdc>
 8004da0:	9b02      	ldr	r3, [sp, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dcae      	bgt.n	8004d04 <_dtoa_r+0xb24>
 8004da6:	9b06      	ldr	r3, [sp, #24]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f73f aea8 	bgt.w	8004afe <_dtoa_r+0x91e>
 8004dae:	e7a9      	b.n	8004d04 <_dtoa_r+0xb24>
 8004db0:	08012a6e 	.word	0x08012a6e
 8004db4:	08008a1b 	.word	0x08008a1b
 8004db8:	080129e4 	.word	0x080129e4

08004dbc <__sflush_r>:
 8004dbc:	898a      	ldrh	r2, [r1, #12]
 8004dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	0710      	lsls	r0, r2, #28
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	d458      	bmi.n	8004e7c <__sflush_r+0xc0>
 8004dca:	684b      	ldr	r3, [r1, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dc05      	bgt.n	8004ddc <__sflush_r+0x20>
 8004dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dc02      	bgt.n	8004ddc <__sflush_r+0x20>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d0f9      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004de2:	2300      	movs	r3, #0
 8004de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004de8:	682f      	ldr	r7, [r5, #0]
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	d032      	beq.n	8004e54 <__sflush_r+0x98>
 8004dee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	075a      	lsls	r2, r3, #29
 8004df4:	d505      	bpl.n	8004e02 <__sflush_r+0x46>
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	1ac0      	subs	r0, r0, r3
 8004dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dfc:	b10b      	cbz	r3, 8004e02 <__sflush_r+0x46>
 8004dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e00:	1ac0      	subs	r0, r0, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	4602      	mov	r2, r0
 8004e06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e08:	6a21      	ldr	r1, [r4, #32]
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b0      	blx	r6
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	d106      	bne.n	8004e22 <__sflush_r+0x66>
 8004e14:	6829      	ldr	r1, [r5, #0]
 8004e16:	291d      	cmp	r1, #29
 8004e18:	d82c      	bhi.n	8004e74 <__sflush_r+0xb8>
 8004e1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <__sflush_r+0x108>)
 8004e1c:	40ca      	lsrs	r2, r1
 8004e1e:	07d6      	lsls	r6, r2, #31
 8004e20:	d528      	bpl.n	8004e74 <__sflush_r+0xb8>
 8004e22:	2200      	movs	r2, #0
 8004e24:	6062      	str	r2, [r4, #4]
 8004e26:	04d9      	lsls	r1, r3, #19
 8004e28:	6922      	ldr	r2, [r4, #16]
 8004e2a:	6022      	str	r2, [r4, #0]
 8004e2c:	d504      	bpl.n	8004e38 <__sflush_r+0x7c>
 8004e2e:	1c42      	adds	r2, r0, #1
 8004e30:	d101      	bne.n	8004e36 <__sflush_r+0x7a>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	b903      	cbnz	r3, 8004e38 <__sflush_r+0x7c>
 8004e36:	6560      	str	r0, [r4, #84]	; 0x54
 8004e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e3a:	602f      	str	r7, [r5, #0]
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d0ca      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d002      	beq.n	8004e4e <__sflush_r+0x92>
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 fda9 	bl	80059a0 <_free_r>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	6360      	str	r0, [r4, #52]	; 0x34
 8004e52:	e7c1      	b.n	8004dd8 <__sflush_r+0x1c>
 8004e54:	6a21      	ldr	r1, [r4, #32]
 8004e56:	2301      	movs	r3, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b0      	blx	r6
 8004e5c:	1c41      	adds	r1, r0, #1
 8004e5e:	d1c7      	bne.n	8004df0 <__sflush_r+0x34>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0c4      	beq.n	8004df0 <__sflush_r+0x34>
 8004e66:	2b1d      	cmp	r3, #29
 8004e68:	d001      	beq.n	8004e6e <__sflush_r+0xb2>
 8004e6a:	2b16      	cmp	r3, #22
 8004e6c:	d101      	bne.n	8004e72 <__sflush_r+0xb6>
 8004e6e:	602f      	str	r7, [r5, #0]
 8004e70:	e7b1      	b.n	8004dd6 <__sflush_r+0x1a>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	e7ad      	b.n	8004dd8 <__sflush_r+0x1c>
 8004e7c:	690f      	ldr	r7, [r1, #16]
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	d0a9      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004e82:	0793      	lsls	r3, r2, #30
 8004e84:	680e      	ldr	r6, [r1, #0]
 8004e86:	bf08      	it	eq
 8004e88:	694b      	ldreq	r3, [r1, #20]
 8004e8a:	600f      	str	r7, [r1, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	2300      	movne	r3, #0
 8004e90:	eba6 0807 	sub.w	r8, r6, r7
 8004e94:	608b      	str	r3, [r1, #8]
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	dd9c      	ble.n	8004dd6 <__sflush_r+0x1a>
 8004e9c:	6a21      	ldr	r1, [r4, #32]
 8004e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ea0:	4643      	mov	r3, r8
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b0      	blx	r6
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	dc06      	bgt.n	8004eba <__sflush_r+0xfe>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eb8:	e78e      	b.n	8004dd8 <__sflush_r+0x1c>
 8004eba:	4407      	add	r7, r0
 8004ebc:	eba8 0800 	sub.w	r8, r8, r0
 8004ec0:	e7e9      	b.n	8004e96 <__sflush_r+0xda>
 8004ec2:	bf00      	nop
 8004ec4:	20400001 	.word	0x20400001

08004ec8 <_fflush_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	b913      	cbnz	r3, 8004ed8 <_fflush_r+0x10>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	b118      	cbz	r0, 8004ee2 <_fflush_r+0x1a>
 8004eda:	6983      	ldr	r3, [r0, #24]
 8004edc:	b90b      	cbnz	r3, 8004ee2 <_fflush_r+0x1a>
 8004ede:	f000 f887 	bl	8004ff0 <__sinit>
 8004ee2:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <_fflush_r+0x6c>)
 8004ee4:	429c      	cmp	r4, r3
 8004ee6:	d11b      	bne.n	8004f20 <_fflush_r+0x58>
 8004ee8:	686c      	ldr	r4, [r5, #4]
 8004eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ef      	beq.n	8004ed2 <_fflush_r+0xa>
 8004ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ef4:	07d0      	lsls	r0, r2, #31
 8004ef6:	d404      	bmi.n	8004f02 <_fflush_r+0x3a>
 8004ef8:	0599      	lsls	r1, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_fflush_r+0x3a>
 8004efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efe:	f000 f92c 	bl	800515a <__retarget_lock_acquire_recursive>
 8004f02:	4628      	mov	r0, r5
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7ff ff59 	bl	8004dbc <__sflush_r>
 8004f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0c:	07da      	lsls	r2, r3, #31
 8004f0e:	4605      	mov	r5, r0
 8004f10:	d4e0      	bmi.n	8004ed4 <_fflush_r+0xc>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	059b      	lsls	r3, r3, #22
 8004f16:	d4dd      	bmi.n	8004ed4 <_fflush_r+0xc>
 8004f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1a:	f000 f91f 	bl	800515c <__retarget_lock_release_recursive>
 8004f1e:	e7d9      	b.n	8004ed4 <_fflush_r+0xc>
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <_fflush_r+0x70>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d101      	bne.n	8004f2a <_fflush_r+0x62>
 8004f26:	68ac      	ldr	r4, [r5, #8]
 8004f28:	e7df      	b.n	8004eea <_fflush_r+0x22>
 8004f2a:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <_fflush_r+0x74>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	bf08      	it	eq
 8004f30:	68ec      	ldreq	r4, [r5, #12]
 8004f32:	e7da      	b.n	8004eea <_fflush_r+0x22>
 8004f34:	08012aa0 	.word	0x08012aa0
 8004f38:	08012ac0 	.word	0x08012ac0
 8004f3c:	08012a80 	.word	0x08012a80

08004f40 <std>:
 8004f40:	2300      	movs	r3, #0
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	e9c0 3300 	strd	r3, r3, [r0]
 8004f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f4e:	6083      	str	r3, [r0, #8]
 8004f50:	8181      	strh	r1, [r0, #12]
 8004f52:	6643      	str	r3, [r0, #100]	; 0x64
 8004f54:	81c2      	strh	r2, [r0, #14]
 8004f56:	6183      	str	r3, [r0, #24]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	305c      	adds	r0, #92	; 0x5c
 8004f5e:	f7fe fa83 	bl	8003468 <memset>
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <std+0x38>)
 8004f64:	6263      	str	r3, [r4, #36]	; 0x24
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <std+0x3c>)
 8004f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <std+0x40>)
 8004f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <std+0x44>)
 8004f70:	6224      	str	r4, [r4, #32]
 8004f72:	6323      	str	r3, [r4, #48]	; 0x30
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	08005da1 	.word	0x08005da1
 8004f7c:	08005dc3 	.word	0x08005dc3
 8004f80:	08005dfb 	.word	0x08005dfb
 8004f84:	08005e1f 	.word	0x08005e1f

08004f88 <_cleanup_r>:
 8004f88:	4901      	ldr	r1, [pc, #4]	; (8004f90 <_cleanup_r+0x8>)
 8004f8a:	f000 b8c1 	b.w	8005110 <_fwalk_reent>
 8004f8e:	bf00      	nop
 8004f90:	08004ec9 	.word	0x08004ec9

08004f94 <__sfmoreglue>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	2268      	movs	r2, #104	; 0x68
 8004f98:	1e4d      	subs	r5, r1, #1
 8004f9a:	4355      	muls	r5, r2
 8004f9c:	460e      	mov	r6, r1
 8004f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fa2:	f000 fd49 	bl	8005a38 <_malloc_r>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	b140      	cbz	r0, 8004fbc <__sfmoreglue+0x28>
 8004faa:	2100      	movs	r1, #0
 8004fac:	e9c0 1600 	strd	r1, r6, [r0]
 8004fb0:	300c      	adds	r0, #12
 8004fb2:	60a0      	str	r0, [r4, #8]
 8004fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fb8:	f7fe fa56 	bl	8003468 <memset>
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <__sfp_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sfp_lock_acquire+0x8>)
 8004fc2:	f000 b8ca 	b.w	800515a <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000c95 	.word	0x20000c95

08004fcc <__sfp_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sfp_lock_release+0x8>)
 8004fce:	f000 b8c5 	b.w	800515c <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000c95 	.word	0x20000c95

08004fd8 <__sinit_lock_acquire>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sinit_lock_acquire+0x8>)
 8004fda:	f000 b8be 	b.w	800515a <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20000c96 	.word	0x20000c96

08004fe4 <__sinit_lock_release>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__sinit_lock_release+0x8>)
 8004fe6:	f000 b8b9 	b.w	800515c <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	20000c96 	.word	0x20000c96

08004ff0 <__sinit>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	f7ff fff0 	bl	8004fd8 <__sinit_lock_acquire>
 8004ff8:	69a3      	ldr	r3, [r4, #24]
 8004ffa:	b11b      	cbz	r3, 8005004 <__sinit+0x14>
 8004ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005000:	f7ff bff0 	b.w	8004fe4 <__sinit_lock_release>
 8005004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005008:	6523      	str	r3, [r4, #80]	; 0x50
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <__sinit+0x68>)
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <__sinit+0x6c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	62a2      	str	r2, [r4, #40]	; 0x28
 8005012:	42a3      	cmp	r3, r4
 8005014:	bf04      	itt	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	61a3      	streq	r3, [r4, #24]
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f820 	bl	8005060 <__sfp>
 8005020:	6060      	str	r0, [r4, #4]
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f81c 	bl	8005060 <__sfp>
 8005028:	60a0      	str	r0, [r4, #8]
 800502a:	4620      	mov	r0, r4
 800502c:	f000 f818 	bl	8005060 <__sfp>
 8005030:	2200      	movs	r2, #0
 8005032:	60e0      	str	r0, [r4, #12]
 8005034:	2104      	movs	r1, #4
 8005036:	6860      	ldr	r0, [r4, #4]
 8005038:	f7ff ff82 	bl	8004f40 <std>
 800503c:	68a0      	ldr	r0, [r4, #8]
 800503e:	2201      	movs	r2, #1
 8005040:	2109      	movs	r1, #9
 8005042:	f7ff ff7d 	bl	8004f40 <std>
 8005046:	68e0      	ldr	r0, [r4, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	2112      	movs	r1, #18
 800504c:	f7ff ff78 	bl	8004f40 <std>
 8005050:	2301      	movs	r3, #1
 8005052:	61a3      	str	r3, [r4, #24]
 8005054:	e7d2      	b.n	8004ffc <__sinit+0xc>
 8005056:	bf00      	nop
 8005058:	080128dc 	.word	0x080128dc
 800505c:	08004f89 	.word	0x08004f89

08005060 <__sfp>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	4607      	mov	r7, r0
 8005064:	f7ff ffac 	bl	8004fc0 <__sfp_lock_acquire>
 8005068:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <__sfp+0x84>)
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	69b3      	ldr	r3, [r6, #24]
 800506e:	b913      	cbnz	r3, 8005076 <__sfp+0x16>
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff ffbd 	bl	8004ff0 <__sinit>
 8005076:	3648      	adds	r6, #72	; 0x48
 8005078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800507c:	3b01      	subs	r3, #1
 800507e:	d503      	bpl.n	8005088 <__sfp+0x28>
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	b30b      	cbz	r3, 80050c8 <__sfp+0x68>
 8005084:	6836      	ldr	r6, [r6, #0]
 8005086:	e7f7      	b.n	8005078 <__sfp+0x18>
 8005088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800508c:	b9d5      	cbnz	r5, 80050c4 <__sfp+0x64>
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <__sfp+0x88>)
 8005090:	60e3      	str	r3, [r4, #12]
 8005092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005096:	6665      	str	r5, [r4, #100]	; 0x64
 8005098:	f000 f85e 	bl	8005158 <__retarget_lock_init_recursive>
 800509c:	f7ff ff96 	bl	8004fcc <__sfp_lock_release>
 80050a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050a8:	6025      	str	r5, [r4, #0]
 80050aa:	61a5      	str	r5, [r4, #24]
 80050ac:	2208      	movs	r2, #8
 80050ae:	4629      	mov	r1, r5
 80050b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050b4:	f7fe f9d8 	bl	8003468 <memset>
 80050b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050c0:	4620      	mov	r0, r4
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c4:	3468      	adds	r4, #104	; 0x68
 80050c6:	e7d9      	b.n	800507c <__sfp+0x1c>
 80050c8:	2104      	movs	r1, #4
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff ff62 	bl	8004f94 <__sfmoreglue>
 80050d0:	4604      	mov	r4, r0
 80050d2:	6030      	str	r0, [r6, #0]
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1d5      	bne.n	8005084 <__sfp+0x24>
 80050d8:	f7ff ff78 	bl	8004fcc <__sfp_lock_release>
 80050dc:	230c      	movs	r3, #12
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	e7ee      	b.n	80050c0 <__sfp+0x60>
 80050e2:	bf00      	nop
 80050e4:	080128dc 	.word	0x080128dc
 80050e8:	ffff0001 	.word	0xffff0001

080050ec <fiprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b503      	push	{r0, r1, lr}
 80050f0:	4601      	mov	r1, r0
 80050f2:	ab03      	add	r3, sp, #12
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <fiprintf+0x20>)
 80050f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	f000 fd1f 	bl	8005b40 <_vfiprintf_r>
 8005102:	b002      	add	sp, #8
 8005104:	f85d eb04 	ldr.w	lr, [sp], #4
 8005108:	b003      	add	sp, #12
 800510a:	4770      	bx	lr
 800510c:	20000018 	.word	0x20000018

08005110 <_fwalk_reent>:
 8005110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005114:	4606      	mov	r6, r0
 8005116:	4688      	mov	r8, r1
 8005118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800511c:	2700      	movs	r7, #0
 800511e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005122:	f1b9 0901 	subs.w	r9, r9, #1
 8005126:	d505      	bpl.n	8005134 <_fwalk_reent+0x24>
 8005128:	6824      	ldr	r4, [r4, #0]
 800512a:	2c00      	cmp	r4, #0
 800512c:	d1f7      	bne.n	800511e <_fwalk_reent+0xe>
 800512e:	4638      	mov	r0, r7
 8005130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005134:	89ab      	ldrh	r3, [r5, #12]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d907      	bls.n	800514a <_fwalk_reent+0x3a>
 800513a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800513e:	3301      	adds	r3, #1
 8005140:	d003      	beq.n	800514a <_fwalk_reent+0x3a>
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	47c0      	blx	r8
 8005148:	4307      	orrs	r7, r0
 800514a:	3568      	adds	r5, #104	; 0x68
 800514c:	e7e9      	b.n	8005122 <_fwalk_reent+0x12>
	...

08005150 <_localeconv_r>:
 8005150:	4800      	ldr	r0, [pc, #0]	; (8005154 <_localeconv_r+0x4>)
 8005152:	4770      	bx	lr
 8005154:	2000016c 	.word	0x2000016c

08005158 <__retarget_lock_init_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_acquire_recursive>:
 800515a:	4770      	bx	lr

0800515c <__retarget_lock_release_recursive>:
 800515c:	4770      	bx	lr

0800515e <__swhatbuf_r>:
 800515e:	b570      	push	{r4, r5, r6, lr}
 8005160:	460e      	mov	r6, r1
 8005162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005166:	2900      	cmp	r1, #0
 8005168:	b096      	sub	sp, #88	; 0x58
 800516a:	4614      	mov	r4, r2
 800516c:	461d      	mov	r5, r3
 800516e:	da08      	bge.n	8005182 <__swhatbuf_r+0x24>
 8005170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	061a      	lsls	r2, r3, #24
 800517a:	d410      	bmi.n	800519e <__swhatbuf_r+0x40>
 800517c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005180:	e00e      	b.n	80051a0 <__swhatbuf_r+0x42>
 8005182:	466a      	mov	r2, sp
 8005184:	f7fd fce2 	bl	8002b4c <_fstat_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	dbf1      	blt.n	8005170 <__swhatbuf_r+0x12>
 800518c:	9a01      	ldr	r2, [sp, #4]
 800518e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005196:	425a      	negs	r2, r3
 8005198:	415a      	adcs	r2, r3
 800519a:	602a      	str	r2, [r5, #0]
 800519c:	e7ee      	b.n	800517c <__swhatbuf_r+0x1e>
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	2000      	movs	r0, #0
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	b016      	add	sp, #88	; 0x58
 80051a6:	bd70      	pop	{r4, r5, r6, pc}

080051a8 <__smakebuf_r>:
 80051a8:	898b      	ldrh	r3, [r1, #12]
 80051aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051ac:	079d      	lsls	r5, r3, #30
 80051ae:	4606      	mov	r6, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	d507      	bpl.n	80051c4 <__smakebuf_r+0x1c>
 80051b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	2301      	movs	r3, #1
 80051be:	6163      	str	r3, [r4, #20]
 80051c0:	b002      	add	sp, #8
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	ab01      	add	r3, sp, #4
 80051c6:	466a      	mov	r2, sp
 80051c8:	f7ff ffc9 	bl	800515e <__swhatbuf_r>
 80051cc:	9900      	ldr	r1, [sp, #0]
 80051ce:	4605      	mov	r5, r0
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 fc31 	bl	8005a38 <_malloc_r>
 80051d6:	b948      	cbnz	r0, 80051ec <__smakebuf_r+0x44>
 80051d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051dc:	059a      	lsls	r2, r3, #22
 80051de:	d4ef      	bmi.n	80051c0 <__smakebuf_r+0x18>
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	e7e3      	b.n	80051b4 <__smakebuf_r+0xc>
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <__smakebuf_r+0x7c>)
 80051ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	6020      	str	r0, [r4, #0]
 80051f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	6163      	str	r3, [r4, #20]
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	6120      	str	r0, [r4, #16]
 8005202:	b15b      	cbz	r3, 800521c <__smakebuf_r+0x74>
 8005204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005208:	4630      	mov	r0, r6
 800520a:	f7fd fca4 	bl	8002b56 <_isatty_r>
 800520e:	b128      	cbz	r0, 800521c <__smakebuf_r+0x74>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	81a3      	strh	r3, [r4, #12]
 800521c:	89a0      	ldrh	r0, [r4, #12]
 800521e:	4305      	orrs	r5, r0
 8005220:	81a5      	strh	r5, [r4, #12]
 8005222:	e7cd      	b.n	80051c0 <__smakebuf_r+0x18>
 8005224:	08004f89 	.word	0x08004f89

08005228 <malloc>:
 8005228:	4b02      	ldr	r3, [pc, #8]	; (8005234 <malloc+0xc>)
 800522a:	4601      	mov	r1, r0
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	f000 bc03 	b.w	8005a38 <_malloc_r>
 8005232:	bf00      	nop
 8005234:	20000018 	.word	0x20000018

08005238 <__ascii_mbtowc>:
 8005238:	b082      	sub	sp, #8
 800523a:	b901      	cbnz	r1, 800523e <__ascii_mbtowc+0x6>
 800523c:	a901      	add	r1, sp, #4
 800523e:	b142      	cbz	r2, 8005252 <__ascii_mbtowc+0x1a>
 8005240:	b14b      	cbz	r3, 8005256 <__ascii_mbtowc+0x1e>
 8005242:	7813      	ldrb	r3, [r2, #0]
 8005244:	600b      	str	r3, [r1, #0]
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	1e10      	subs	r0, r2, #0
 800524a:	bf18      	it	ne
 800524c:	2001      	movne	r0, #1
 800524e:	b002      	add	sp, #8
 8005250:	4770      	bx	lr
 8005252:	4610      	mov	r0, r2
 8005254:	e7fb      	b.n	800524e <__ascii_mbtowc+0x16>
 8005256:	f06f 0001 	mvn.w	r0, #1
 800525a:	e7f8      	b.n	800524e <__ascii_mbtowc+0x16>

0800525c <memcpy>:
 800525c:	440a      	add	r2, r1
 800525e:	4291      	cmp	r1, r2
 8005260:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005264:	d100      	bne.n	8005268 <memcpy+0xc>
 8005266:	4770      	bx	lr
 8005268:	b510      	push	{r4, lr}
 800526a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005272:	4291      	cmp	r1, r2
 8005274:	d1f9      	bne.n	800526a <memcpy+0xe>
 8005276:	bd10      	pop	{r4, pc}

08005278 <_Balloc>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800527c:	4604      	mov	r4, r0
 800527e:	460d      	mov	r5, r1
 8005280:	b976      	cbnz	r6, 80052a0 <_Balloc+0x28>
 8005282:	2010      	movs	r0, #16
 8005284:	f7ff ffd0 	bl	8005228 <malloc>
 8005288:	4602      	mov	r2, r0
 800528a:	6260      	str	r0, [r4, #36]	; 0x24
 800528c:	b920      	cbnz	r0, 8005298 <_Balloc+0x20>
 800528e:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <_Balloc+0x78>)
 8005290:	4818      	ldr	r0, [pc, #96]	; (80052f4 <_Balloc+0x7c>)
 8005292:	2166      	movs	r1, #102	; 0x66
 8005294:	f7fe fef8 	bl	8004088 <__assert_func>
 8005298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800529c:	6006      	str	r6, [r0, #0]
 800529e:	60c6      	str	r6, [r0, #12]
 80052a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80052a2:	68f3      	ldr	r3, [r6, #12]
 80052a4:	b183      	cbz	r3, 80052c8 <_Balloc+0x50>
 80052a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052ae:	b9b8      	cbnz	r0, 80052e0 <_Balloc+0x68>
 80052b0:	2101      	movs	r1, #1
 80052b2:	fa01 f605 	lsl.w	r6, r1, r5
 80052b6:	1d72      	adds	r2, r6, #5
 80052b8:	0092      	lsls	r2, r2, #2
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fb60 	bl	8005980 <_calloc_r>
 80052c0:	b160      	cbz	r0, 80052dc <_Balloc+0x64>
 80052c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052c6:	e00e      	b.n	80052e6 <_Balloc+0x6e>
 80052c8:	2221      	movs	r2, #33	; 0x21
 80052ca:	2104      	movs	r1, #4
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 fb57 	bl	8005980 <_calloc_r>
 80052d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d4:	60f0      	str	r0, [r6, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e4      	bne.n	80052a6 <_Balloc+0x2e>
 80052dc:	2000      	movs	r0, #0
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	6802      	ldr	r2, [r0, #0]
 80052e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052e6:	2300      	movs	r3, #0
 80052e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052ec:	e7f7      	b.n	80052de <_Balloc+0x66>
 80052ee:	bf00      	nop
 80052f0:	08012912 	.word	0x08012912
 80052f4:	08012ae6 	.word	0x08012ae6

080052f8 <_Bfree>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80052fc:	4605      	mov	r5, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	b976      	cbnz	r6, 8005320 <_Bfree+0x28>
 8005302:	2010      	movs	r0, #16
 8005304:	f7ff ff90 	bl	8005228 <malloc>
 8005308:	4602      	mov	r2, r0
 800530a:	6268      	str	r0, [r5, #36]	; 0x24
 800530c:	b920      	cbnz	r0, 8005318 <_Bfree+0x20>
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <_Bfree+0x3c>)
 8005310:	4809      	ldr	r0, [pc, #36]	; (8005338 <_Bfree+0x40>)
 8005312:	218a      	movs	r1, #138	; 0x8a
 8005314:	f7fe feb8 	bl	8004088 <__assert_func>
 8005318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800531c:	6006      	str	r6, [r0, #0]
 800531e:	60c6      	str	r6, [r0, #12]
 8005320:	b13c      	cbz	r4, 8005332 <_Bfree+0x3a>
 8005322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005324:	6862      	ldr	r2, [r4, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800532c:	6021      	str	r1, [r4, #0]
 800532e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	08012912 	.word	0x08012912
 8005338:	08012ae6 	.word	0x08012ae6

0800533c <__multadd>:
 800533c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005340:	690d      	ldr	r5, [r1, #16]
 8005342:	4607      	mov	r7, r0
 8005344:	460c      	mov	r4, r1
 8005346:	461e      	mov	r6, r3
 8005348:	f101 0c14 	add.w	ip, r1, #20
 800534c:	2000      	movs	r0, #0
 800534e:	f8dc 3000 	ldr.w	r3, [ip]
 8005352:	b299      	uxth	r1, r3
 8005354:	fb02 6101 	mla	r1, r2, r1, r6
 8005358:	0c1e      	lsrs	r6, r3, #16
 800535a:	0c0b      	lsrs	r3, r1, #16
 800535c:	fb02 3306 	mla	r3, r2, r6, r3
 8005360:	b289      	uxth	r1, r1
 8005362:	3001      	adds	r0, #1
 8005364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005368:	4285      	cmp	r5, r0
 800536a:	f84c 1b04 	str.w	r1, [ip], #4
 800536e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005372:	dcec      	bgt.n	800534e <__multadd+0x12>
 8005374:	b30e      	cbz	r6, 80053ba <__multadd+0x7e>
 8005376:	68a3      	ldr	r3, [r4, #8]
 8005378:	42ab      	cmp	r3, r5
 800537a:	dc19      	bgt.n	80053b0 <__multadd+0x74>
 800537c:	6861      	ldr	r1, [r4, #4]
 800537e:	4638      	mov	r0, r7
 8005380:	3101      	adds	r1, #1
 8005382:	f7ff ff79 	bl	8005278 <_Balloc>
 8005386:	4680      	mov	r8, r0
 8005388:	b928      	cbnz	r0, 8005396 <__multadd+0x5a>
 800538a:	4602      	mov	r2, r0
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <__multadd+0x84>)
 800538e:	480d      	ldr	r0, [pc, #52]	; (80053c4 <__multadd+0x88>)
 8005390:	21b5      	movs	r1, #181	; 0xb5
 8005392:	f7fe fe79 	bl	8004088 <__assert_func>
 8005396:	6922      	ldr	r2, [r4, #16]
 8005398:	3202      	adds	r2, #2
 800539a:	f104 010c 	add.w	r1, r4, #12
 800539e:	0092      	lsls	r2, r2, #2
 80053a0:	300c      	adds	r0, #12
 80053a2:	f7ff ff5b 	bl	800525c <memcpy>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ffa5 	bl	80052f8 <_Bfree>
 80053ae:	4644      	mov	r4, r8
 80053b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053b4:	3501      	adds	r5, #1
 80053b6:	615e      	str	r6, [r3, #20]
 80053b8:	6125      	str	r5, [r4, #16]
 80053ba:	4620      	mov	r0, r4
 80053bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c0:	08012a6e 	.word	0x08012a6e
 80053c4:	08012ae6 	.word	0x08012ae6

080053c8 <__hi0bits>:
 80053c8:	0c03      	lsrs	r3, r0, #16
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	b9d3      	cbnz	r3, 8005404 <__hi0bits+0x3c>
 80053ce:	0400      	lsls	r0, r0, #16
 80053d0:	2310      	movs	r3, #16
 80053d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80053d6:	bf04      	itt	eq
 80053d8:	0200      	lsleq	r0, r0, #8
 80053da:	3308      	addeq	r3, #8
 80053dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80053e0:	bf04      	itt	eq
 80053e2:	0100      	lsleq	r0, r0, #4
 80053e4:	3304      	addeq	r3, #4
 80053e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80053ea:	bf04      	itt	eq
 80053ec:	0080      	lsleq	r0, r0, #2
 80053ee:	3302      	addeq	r3, #2
 80053f0:	2800      	cmp	r0, #0
 80053f2:	db05      	blt.n	8005400 <__hi0bits+0x38>
 80053f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80053f8:	f103 0301 	add.w	r3, r3, #1
 80053fc:	bf08      	it	eq
 80053fe:	2320      	moveq	r3, #32
 8005400:	4618      	mov	r0, r3
 8005402:	4770      	bx	lr
 8005404:	2300      	movs	r3, #0
 8005406:	e7e4      	b.n	80053d2 <__hi0bits+0xa>

08005408 <__lo0bits>:
 8005408:	6803      	ldr	r3, [r0, #0]
 800540a:	f013 0207 	ands.w	r2, r3, #7
 800540e:	4601      	mov	r1, r0
 8005410:	d00b      	beq.n	800542a <__lo0bits+0x22>
 8005412:	07da      	lsls	r2, r3, #31
 8005414:	d423      	bmi.n	800545e <__lo0bits+0x56>
 8005416:	0798      	lsls	r0, r3, #30
 8005418:	bf49      	itett	mi
 800541a:	085b      	lsrmi	r3, r3, #1
 800541c:	089b      	lsrpl	r3, r3, #2
 800541e:	2001      	movmi	r0, #1
 8005420:	600b      	strmi	r3, [r1, #0]
 8005422:	bf5c      	itt	pl
 8005424:	600b      	strpl	r3, [r1, #0]
 8005426:	2002      	movpl	r0, #2
 8005428:	4770      	bx	lr
 800542a:	b298      	uxth	r0, r3
 800542c:	b9a8      	cbnz	r0, 800545a <__lo0bits+0x52>
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	2010      	movs	r0, #16
 8005432:	b2da      	uxtb	r2, r3
 8005434:	b90a      	cbnz	r2, 800543a <__lo0bits+0x32>
 8005436:	3008      	adds	r0, #8
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	071a      	lsls	r2, r3, #28
 800543c:	bf04      	itt	eq
 800543e:	091b      	lsreq	r3, r3, #4
 8005440:	3004      	addeq	r0, #4
 8005442:	079a      	lsls	r2, r3, #30
 8005444:	bf04      	itt	eq
 8005446:	089b      	lsreq	r3, r3, #2
 8005448:	3002      	addeq	r0, #2
 800544a:	07da      	lsls	r2, r3, #31
 800544c:	d403      	bmi.n	8005456 <__lo0bits+0x4e>
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	f100 0001 	add.w	r0, r0, #1
 8005454:	d005      	beq.n	8005462 <__lo0bits+0x5a>
 8005456:	600b      	str	r3, [r1, #0]
 8005458:	4770      	bx	lr
 800545a:	4610      	mov	r0, r2
 800545c:	e7e9      	b.n	8005432 <__lo0bits+0x2a>
 800545e:	2000      	movs	r0, #0
 8005460:	4770      	bx	lr
 8005462:	2020      	movs	r0, #32
 8005464:	4770      	bx	lr
	...

08005468 <__i2b>:
 8005468:	b510      	push	{r4, lr}
 800546a:	460c      	mov	r4, r1
 800546c:	2101      	movs	r1, #1
 800546e:	f7ff ff03 	bl	8005278 <_Balloc>
 8005472:	4602      	mov	r2, r0
 8005474:	b928      	cbnz	r0, 8005482 <__i2b+0x1a>
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <__i2b+0x24>)
 8005478:	4805      	ldr	r0, [pc, #20]	; (8005490 <__i2b+0x28>)
 800547a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800547e:	f7fe fe03 	bl	8004088 <__assert_func>
 8005482:	2301      	movs	r3, #1
 8005484:	6144      	str	r4, [r0, #20]
 8005486:	6103      	str	r3, [r0, #16]
 8005488:	bd10      	pop	{r4, pc}
 800548a:	bf00      	nop
 800548c:	08012a6e 	.word	0x08012a6e
 8005490:	08012ae6 	.word	0x08012ae6

08005494 <__multiply>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	4691      	mov	r9, r2
 800549a:	690a      	ldr	r2, [r1, #16]
 800549c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	bfb8      	it	lt
 80054a4:	460b      	movlt	r3, r1
 80054a6:	460c      	mov	r4, r1
 80054a8:	bfbc      	itt	lt
 80054aa:	464c      	movlt	r4, r9
 80054ac:	4699      	movlt	r9, r3
 80054ae:	6927      	ldr	r7, [r4, #16]
 80054b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	6861      	ldr	r1, [r4, #4]
 80054b8:	eb07 060a 	add.w	r6, r7, sl
 80054bc:	42b3      	cmp	r3, r6
 80054be:	b085      	sub	sp, #20
 80054c0:	bfb8      	it	lt
 80054c2:	3101      	addlt	r1, #1
 80054c4:	f7ff fed8 	bl	8005278 <_Balloc>
 80054c8:	b930      	cbnz	r0, 80054d8 <__multiply+0x44>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b44      	ldr	r3, [pc, #272]	; (80055e0 <__multiply+0x14c>)
 80054ce:	4845      	ldr	r0, [pc, #276]	; (80055e4 <__multiply+0x150>)
 80054d0:	f240 115d 	movw	r1, #349	; 0x15d
 80054d4:	f7fe fdd8 	bl	8004088 <__assert_func>
 80054d8:	f100 0514 	add.w	r5, r0, #20
 80054dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054e0:	462b      	mov	r3, r5
 80054e2:	2200      	movs	r2, #0
 80054e4:	4543      	cmp	r3, r8
 80054e6:	d321      	bcc.n	800552c <__multiply+0x98>
 80054e8:	f104 0314 	add.w	r3, r4, #20
 80054ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80054f0:	f109 0314 	add.w	r3, r9, #20
 80054f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	1b3a      	subs	r2, r7, r4
 80054fc:	3a15      	subs	r2, #21
 80054fe:	f022 0203 	bic.w	r2, r2, #3
 8005502:	3204      	adds	r2, #4
 8005504:	f104 0115 	add.w	r1, r4, #21
 8005508:	428f      	cmp	r7, r1
 800550a:	bf38      	it	cc
 800550c:	2204      	movcc	r2, #4
 800550e:	9201      	str	r2, [sp, #4]
 8005510:	9a02      	ldr	r2, [sp, #8]
 8005512:	9303      	str	r3, [sp, #12]
 8005514:	429a      	cmp	r2, r3
 8005516:	d80c      	bhi.n	8005532 <__multiply+0x9e>
 8005518:	2e00      	cmp	r6, #0
 800551a:	dd03      	ble.n	8005524 <__multiply+0x90>
 800551c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05a      	beq.n	80055da <__multiply+0x146>
 8005524:	6106      	str	r6, [r0, #16]
 8005526:	b005      	add	sp, #20
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	f843 2b04 	str.w	r2, [r3], #4
 8005530:	e7d8      	b.n	80054e4 <__multiply+0x50>
 8005532:	f8b3 a000 	ldrh.w	sl, [r3]
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	d024      	beq.n	8005586 <__multiply+0xf2>
 800553c:	f104 0e14 	add.w	lr, r4, #20
 8005540:	46a9      	mov	r9, r5
 8005542:	f04f 0c00 	mov.w	ip, #0
 8005546:	f85e 2b04 	ldr.w	r2, [lr], #4
 800554a:	f8d9 1000 	ldr.w	r1, [r9]
 800554e:	fa1f fb82 	uxth.w	fp, r2
 8005552:	b289      	uxth	r1, r1
 8005554:	fb0a 110b 	mla	r1, sl, fp, r1
 8005558:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800555c:	f8d9 2000 	ldr.w	r2, [r9]
 8005560:	4461      	add	r1, ip
 8005562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005566:	fb0a c20b 	mla	r2, sl, fp, ip
 800556a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800556e:	b289      	uxth	r1, r1
 8005570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005574:	4577      	cmp	r7, lr
 8005576:	f849 1b04 	str.w	r1, [r9], #4
 800557a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800557e:	d8e2      	bhi.n	8005546 <__multiply+0xb2>
 8005580:	9a01      	ldr	r2, [sp, #4]
 8005582:	f845 c002 	str.w	ip, [r5, r2]
 8005586:	9a03      	ldr	r2, [sp, #12]
 8005588:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800558c:	3304      	adds	r3, #4
 800558e:	f1b9 0f00 	cmp.w	r9, #0
 8005592:	d020      	beq.n	80055d6 <__multiply+0x142>
 8005594:	6829      	ldr	r1, [r5, #0]
 8005596:	f104 0c14 	add.w	ip, r4, #20
 800559a:	46ae      	mov	lr, r5
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	f8bc b000 	ldrh.w	fp, [ip]
 80055a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80055a8:	fb09 220b 	mla	r2, r9, fp, r2
 80055ac:	4492      	add	sl, r2
 80055ae:	b289      	uxth	r1, r1
 80055b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80055b4:	f84e 1b04 	str.w	r1, [lr], #4
 80055b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80055bc:	f8be 1000 	ldrh.w	r1, [lr]
 80055c0:	0c12      	lsrs	r2, r2, #16
 80055c2:	fb09 1102 	mla	r1, r9, r2, r1
 80055c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80055ca:	4567      	cmp	r7, ip
 80055cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055d0:	d8e6      	bhi.n	80055a0 <__multiply+0x10c>
 80055d2:	9a01      	ldr	r2, [sp, #4]
 80055d4:	50a9      	str	r1, [r5, r2]
 80055d6:	3504      	adds	r5, #4
 80055d8:	e79a      	b.n	8005510 <__multiply+0x7c>
 80055da:	3e01      	subs	r6, #1
 80055dc:	e79c      	b.n	8005518 <__multiply+0x84>
 80055de:	bf00      	nop
 80055e0:	08012a6e 	.word	0x08012a6e
 80055e4:	08012ae6 	.word	0x08012ae6

080055e8 <__pow5mult>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4615      	mov	r5, r2
 80055ee:	f012 0203 	ands.w	r2, r2, #3
 80055f2:	4606      	mov	r6, r0
 80055f4:	460f      	mov	r7, r1
 80055f6:	d007      	beq.n	8005608 <__pow5mult+0x20>
 80055f8:	4c25      	ldr	r4, [pc, #148]	; (8005690 <__pow5mult+0xa8>)
 80055fa:	3a01      	subs	r2, #1
 80055fc:	2300      	movs	r3, #0
 80055fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005602:	f7ff fe9b 	bl	800533c <__multadd>
 8005606:	4607      	mov	r7, r0
 8005608:	10ad      	asrs	r5, r5, #2
 800560a:	d03d      	beq.n	8005688 <__pow5mult+0xa0>
 800560c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800560e:	b97c      	cbnz	r4, 8005630 <__pow5mult+0x48>
 8005610:	2010      	movs	r0, #16
 8005612:	f7ff fe09 	bl	8005228 <malloc>
 8005616:	4602      	mov	r2, r0
 8005618:	6270      	str	r0, [r6, #36]	; 0x24
 800561a:	b928      	cbnz	r0, 8005628 <__pow5mult+0x40>
 800561c:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <__pow5mult+0xac>)
 800561e:	481e      	ldr	r0, [pc, #120]	; (8005698 <__pow5mult+0xb0>)
 8005620:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005624:	f7fe fd30 	bl	8004088 <__assert_func>
 8005628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800562c:	6004      	str	r4, [r0, #0]
 800562e:	60c4      	str	r4, [r0, #12]
 8005630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005638:	b94c      	cbnz	r4, 800564e <__pow5mult+0x66>
 800563a:	f240 2171 	movw	r1, #625	; 0x271
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff ff12 	bl	8005468 <__i2b>
 8005644:	2300      	movs	r3, #0
 8005646:	f8c8 0008 	str.w	r0, [r8, #8]
 800564a:	4604      	mov	r4, r0
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	f04f 0900 	mov.w	r9, #0
 8005652:	07eb      	lsls	r3, r5, #31
 8005654:	d50a      	bpl.n	800566c <__pow5mult+0x84>
 8005656:	4639      	mov	r1, r7
 8005658:	4622      	mov	r2, r4
 800565a:	4630      	mov	r0, r6
 800565c:	f7ff ff1a 	bl	8005494 <__multiply>
 8005660:	4639      	mov	r1, r7
 8005662:	4680      	mov	r8, r0
 8005664:	4630      	mov	r0, r6
 8005666:	f7ff fe47 	bl	80052f8 <_Bfree>
 800566a:	4647      	mov	r7, r8
 800566c:	106d      	asrs	r5, r5, #1
 800566e:	d00b      	beq.n	8005688 <__pow5mult+0xa0>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	b938      	cbnz	r0, 8005684 <__pow5mult+0x9c>
 8005674:	4622      	mov	r2, r4
 8005676:	4621      	mov	r1, r4
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff ff0b 	bl	8005494 <__multiply>
 800567e:	6020      	str	r0, [r4, #0]
 8005680:	f8c0 9000 	str.w	r9, [r0]
 8005684:	4604      	mov	r4, r0
 8005686:	e7e4      	b.n	8005652 <__pow5mult+0x6a>
 8005688:	4638      	mov	r0, r7
 800568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568e:	bf00      	nop
 8005690:	08012c58 	.word	0x08012c58
 8005694:	08012912 	.word	0x08012912
 8005698:	08012ae6 	.word	0x08012ae6

0800569c <__lshift>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	6849      	ldr	r1, [r1, #4]
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	4607      	mov	r7, r0
 80056ae:	4691      	mov	r9, r2
 80056b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056b4:	f108 0601 	add.w	r6, r8, #1
 80056b8:	42b3      	cmp	r3, r6
 80056ba:	db0b      	blt.n	80056d4 <__lshift+0x38>
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff fddb 	bl	8005278 <_Balloc>
 80056c2:	4605      	mov	r5, r0
 80056c4:	b948      	cbnz	r0, 80056da <__lshift+0x3e>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <__lshift+0xd8>)
 80056ca:	482b      	ldr	r0, [pc, #172]	; (8005778 <__lshift+0xdc>)
 80056cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80056d0:	f7fe fcda 	bl	8004088 <__assert_func>
 80056d4:	3101      	adds	r1, #1
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	e7ee      	b.n	80056b8 <__lshift+0x1c>
 80056da:	2300      	movs	r3, #0
 80056dc:	f100 0114 	add.w	r1, r0, #20
 80056e0:	f100 0210 	add.w	r2, r0, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	4553      	cmp	r3, sl
 80056e8:	db37      	blt.n	800575a <__lshift+0xbe>
 80056ea:	6920      	ldr	r0, [r4, #16]
 80056ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056f0:	f104 0314 	add.w	r3, r4, #20
 80056f4:	f019 091f 	ands.w	r9, r9, #31
 80056f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005700:	d02f      	beq.n	8005762 <__lshift+0xc6>
 8005702:	f1c9 0e20 	rsb	lr, r9, #32
 8005706:	468a      	mov	sl, r1
 8005708:	f04f 0c00 	mov.w	ip, #0
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	fa02 f209 	lsl.w	r2, r2, r9
 8005712:	ea42 020c 	orr.w	r2, r2, ip
 8005716:	f84a 2b04 	str.w	r2, [sl], #4
 800571a:	f853 2b04 	ldr.w	r2, [r3], #4
 800571e:	4298      	cmp	r0, r3
 8005720:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005724:	d8f2      	bhi.n	800570c <__lshift+0x70>
 8005726:	1b03      	subs	r3, r0, r4
 8005728:	3b15      	subs	r3, #21
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	3304      	adds	r3, #4
 8005730:	f104 0215 	add.w	r2, r4, #21
 8005734:	4290      	cmp	r0, r2
 8005736:	bf38      	it	cc
 8005738:	2304      	movcc	r3, #4
 800573a:	f841 c003 	str.w	ip, [r1, r3]
 800573e:	f1bc 0f00 	cmp.w	ip, #0
 8005742:	d001      	beq.n	8005748 <__lshift+0xac>
 8005744:	f108 0602 	add.w	r6, r8, #2
 8005748:	3e01      	subs	r6, #1
 800574a:	4638      	mov	r0, r7
 800574c:	612e      	str	r6, [r5, #16]
 800574e:	4621      	mov	r1, r4
 8005750:	f7ff fdd2 	bl	80052f8 <_Bfree>
 8005754:	4628      	mov	r0, r5
 8005756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575a:	f842 0f04 	str.w	r0, [r2, #4]!
 800575e:	3301      	adds	r3, #1
 8005760:	e7c1      	b.n	80056e6 <__lshift+0x4a>
 8005762:	3904      	subs	r1, #4
 8005764:	f853 2b04 	ldr.w	r2, [r3], #4
 8005768:	f841 2f04 	str.w	r2, [r1, #4]!
 800576c:	4298      	cmp	r0, r3
 800576e:	d8f9      	bhi.n	8005764 <__lshift+0xc8>
 8005770:	e7ea      	b.n	8005748 <__lshift+0xac>
 8005772:	bf00      	nop
 8005774:	08012a6e 	.word	0x08012a6e
 8005778:	08012ae6 	.word	0x08012ae6

0800577c <__mcmp>:
 800577c:	b530      	push	{r4, r5, lr}
 800577e:	6902      	ldr	r2, [r0, #16]
 8005780:	690c      	ldr	r4, [r1, #16]
 8005782:	1b12      	subs	r2, r2, r4
 8005784:	d10e      	bne.n	80057a4 <__mcmp+0x28>
 8005786:	f100 0314 	add.w	r3, r0, #20
 800578a:	3114      	adds	r1, #20
 800578c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005790:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005794:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800579c:	42a5      	cmp	r5, r4
 800579e:	d003      	beq.n	80057a8 <__mcmp+0x2c>
 80057a0:	d305      	bcc.n	80057ae <__mcmp+0x32>
 80057a2:	2201      	movs	r2, #1
 80057a4:	4610      	mov	r0, r2
 80057a6:	bd30      	pop	{r4, r5, pc}
 80057a8:	4283      	cmp	r3, r0
 80057aa:	d3f3      	bcc.n	8005794 <__mcmp+0x18>
 80057ac:	e7fa      	b.n	80057a4 <__mcmp+0x28>
 80057ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b2:	e7f7      	b.n	80057a4 <__mcmp+0x28>

080057b4 <__mdiff>:
 80057b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	460c      	mov	r4, r1
 80057ba:	4606      	mov	r6, r0
 80057bc:	4611      	mov	r1, r2
 80057be:	4620      	mov	r0, r4
 80057c0:	4690      	mov	r8, r2
 80057c2:	f7ff ffdb 	bl	800577c <__mcmp>
 80057c6:	1e05      	subs	r5, r0, #0
 80057c8:	d110      	bne.n	80057ec <__mdiff+0x38>
 80057ca:	4629      	mov	r1, r5
 80057cc:	4630      	mov	r0, r6
 80057ce:	f7ff fd53 	bl	8005278 <_Balloc>
 80057d2:	b930      	cbnz	r0, 80057e2 <__mdiff+0x2e>
 80057d4:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <__mdiff+0x10c>)
 80057d6:	4602      	mov	r2, r0
 80057d8:	f240 2132 	movw	r1, #562	; 0x232
 80057dc:	4839      	ldr	r0, [pc, #228]	; (80058c4 <__mdiff+0x110>)
 80057de:	f7fe fc53 	bl	8004088 <__assert_func>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	bfa4      	itt	ge
 80057ee:	4643      	movge	r3, r8
 80057f0:	46a0      	movge	r8, r4
 80057f2:	4630      	mov	r0, r6
 80057f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057f8:	bfa6      	itte	ge
 80057fa:	461c      	movge	r4, r3
 80057fc:	2500      	movge	r5, #0
 80057fe:	2501      	movlt	r5, #1
 8005800:	f7ff fd3a 	bl	8005278 <_Balloc>
 8005804:	b920      	cbnz	r0, 8005810 <__mdiff+0x5c>
 8005806:	4b2e      	ldr	r3, [pc, #184]	; (80058c0 <__mdiff+0x10c>)
 8005808:	4602      	mov	r2, r0
 800580a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800580e:	e7e5      	b.n	80057dc <__mdiff+0x28>
 8005810:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005814:	6926      	ldr	r6, [r4, #16]
 8005816:	60c5      	str	r5, [r0, #12]
 8005818:	f104 0914 	add.w	r9, r4, #20
 800581c:	f108 0514 	add.w	r5, r8, #20
 8005820:	f100 0e14 	add.w	lr, r0, #20
 8005824:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800582c:	f108 0210 	add.w	r2, r8, #16
 8005830:	46f2      	mov	sl, lr
 8005832:	2100      	movs	r1, #0
 8005834:	f859 3b04 	ldr.w	r3, [r9], #4
 8005838:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800583c:	fa1f f883 	uxth.w	r8, r3
 8005840:	fa11 f18b 	uxtah	r1, r1, fp
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	eba1 0808 	sub.w	r8, r1, r8
 800584a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800584e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005852:	fa1f f888 	uxth.w	r8, r8
 8005856:	1419      	asrs	r1, r3, #16
 8005858:	454e      	cmp	r6, r9
 800585a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800585e:	f84a 3b04 	str.w	r3, [sl], #4
 8005862:	d8e7      	bhi.n	8005834 <__mdiff+0x80>
 8005864:	1b33      	subs	r3, r6, r4
 8005866:	3b15      	subs	r3, #21
 8005868:	f023 0303 	bic.w	r3, r3, #3
 800586c:	3304      	adds	r3, #4
 800586e:	3415      	adds	r4, #21
 8005870:	42a6      	cmp	r6, r4
 8005872:	bf38      	it	cc
 8005874:	2304      	movcc	r3, #4
 8005876:	441d      	add	r5, r3
 8005878:	4473      	add	r3, lr
 800587a:	469e      	mov	lr, r3
 800587c:	462e      	mov	r6, r5
 800587e:	4566      	cmp	r6, ip
 8005880:	d30e      	bcc.n	80058a0 <__mdiff+0xec>
 8005882:	f10c 0203 	add.w	r2, ip, #3
 8005886:	1b52      	subs	r2, r2, r5
 8005888:	f022 0203 	bic.w	r2, r2, #3
 800588c:	3d03      	subs	r5, #3
 800588e:	45ac      	cmp	ip, r5
 8005890:	bf38      	it	cc
 8005892:	2200      	movcc	r2, #0
 8005894:	441a      	add	r2, r3
 8005896:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800589a:	b17b      	cbz	r3, 80058bc <__mdiff+0x108>
 800589c:	6107      	str	r7, [r0, #16]
 800589e:	e7a3      	b.n	80057e8 <__mdiff+0x34>
 80058a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80058a4:	fa11 f288 	uxtah	r2, r1, r8
 80058a8:	1414      	asrs	r4, r2, #16
 80058aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80058ae:	b292      	uxth	r2, r2
 80058b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80058b4:	f84e 2b04 	str.w	r2, [lr], #4
 80058b8:	1421      	asrs	r1, r4, #16
 80058ba:	e7e0      	b.n	800587e <__mdiff+0xca>
 80058bc:	3f01      	subs	r7, #1
 80058be:	e7ea      	b.n	8005896 <__mdiff+0xe2>
 80058c0:	08012a6e 	.word	0x08012a6e
 80058c4:	08012ae6 	.word	0x08012ae6

080058c8 <__d2b>:
 80058c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058cc:	4689      	mov	r9, r1
 80058ce:	2101      	movs	r1, #1
 80058d0:	ec57 6b10 	vmov	r6, r7, d0
 80058d4:	4690      	mov	r8, r2
 80058d6:	f7ff fccf 	bl	8005278 <_Balloc>
 80058da:	4604      	mov	r4, r0
 80058dc:	b930      	cbnz	r0, 80058ec <__d2b+0x24>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b25      	ldr	r3, [pc, #148]	; (8005978 <__d2b+0xb0>)
 80058e2:	4826      	ldr	r0, [pc, #152]	; (800597c <__d2b+0xb4>)
 80058e4:	f240 310a 	movw	r1, #778	; 0x30a
 80058e8:	f7fe fbce 	bl	8004088 <__assert_func>
 80058ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80058f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058f4:	bb35      	cbnz	r5, 8005944 <__d2b+0x7c>
 80058f6:	2e00      	cmp	r6, #0
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	d028      	beq.n	800594e <__d2b+0x86>
 80058fc:	4668      	mov	r0, sp
 80058fe:	9600      	str	r6, [sp, #0]
 8005900:	f7ff fd82 	bl	8005408 <__lo0bits>
 8005904:	9900      	ldr	r1, [sp, #0]
 8005906:	b300      	cbz	r0, 800594a <__d2b+0x82>
 8005908:	9a01      	ldr	r2, [sp, #4]
 800590a:	f1c0 0320 	rsb	r3, r0, #32
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	430b      	orrs	r3, r1
 8005914:	40c2      	lsrs	r2, r0
 8005916:	6163      	str	r3, [r4, #20]
 8005918:	9201      	str	r2, [sp, #4]
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	61a3      	str	r3, [r4, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf14      	ite	ne
 8005922:	2202      	movne	r2, #2
 8005924:	2201      	moveq	r2, #1
 8005926:	6122      	str	r2, [r4, #16]
 8005928:	b1d5      	cbz	r5, 8005960 <__d2b+0x98>
 800592a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800592e:	4405      	add	r5, r0
 8005930:	f8c9 5000 	str.w	r5, [r9]
 8005934:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005938:	f8c8 0000 	str.w	r0, [r8]
 800593c:	4620      	mov	r0, r4
 800593e:	b003      	add	sp, #12
 8005940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005948:	e7d5      	b.n	80058f6 <__d2b+0x2e>
 800594a:	6161      	str	r1, [r4, #20]
 800594c:	e7e5      	b.n	800591a <__d2b+0x52>
 800594e:	a801      	add	r0, sp, #4
 8005950:	f7ff fd5a 	bl	8005408 <__lo0bits>
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	6163      	str	r3, [r4, #20]
 8005958:	2201      	movs	r2, #1
 800595a:	6122      	str	r2, [r4, #16]
 800595c:	3020      	adds	r0, #32
 800595e:	e7e3      	b.n	8005928 <__d2b+0x60>
 8005960:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005964:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005968:	f8c9 0000 	str.w	r0, [r9]
 800596c:	6918      	ldr	r0, [r3, #16]
 800596e:	f7ff fd2b 	bl	80053c8 <__hi0bits>
 8005972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005976:	e7df      	b.n	8005938 <__d2b+0x70>
 8005978:	08012a6e 	.word	0x08012a6e
 800597c:	08012ae6 	.word	0x08012ae6

08005980 <_calloc_r>:
 8005980:	b513      	push	{r0, r1, r4, lr}
 8005982:	434a      	muls	r2, r1
 8005984:	4611      	mov	r1, r2
 8005986:	9201      	str	r2, [sp, #4]
 8005988:	f000 f856 	bl	8005a38 <_malloc_r>
 800598c:	4604      	mov	r4, r0
 800598e:	b118      	cbz	r0, 8005998 <_calloc_r+0x18>
 8005990:	9a01      	ldr	r2, [sp, #4]
 8005992:	2100      	movs	r1, #0
 8005994:	f7fd fd68 	bl	8003468 <memset>
 8005998:	4620      	mov	r0, r4
 800599a:	b002      	add	sp, #8
 800599c:	bd10      	pop	{r4, pc}
	...

080059a0 <_free_r>:
 80059a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d044      	beq.n	8005a30 <_free_r+0x90>
 80059a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059aa:	9001      	str	r0, [sp, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f1a1 0404 	sub.w	r4, r1, #4
 80059b2:	bfb8      	it	lt
 80059b4:	18e4      	addlt	r4, r4, r3
 80059b6:	f000 fb27 	bl	8006008 <__malloc_lock>
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <_free_r+0x94>)
 80059bc:	9801      	ldr	r0, [sp, #4]
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	b933      	cbnz	r3, 80059d0 <_free_r+0x30>
 80059c2:	6063      	str	r3, [r4, #4]
 80059c4:	6014      	str	r4, [r2, #0]
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059cc:	f000 bb22 	b.w	8006014 <__malloc_unlock>
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d908      	bls.n	80059e6 <_free_r+0x46>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf01      	itttt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	1949      	addeq	r1, r1, r5
 80059e2:	6021      	streq	r1, [r4, #0]
 80059e4:	e7ed      	b.n	80059c2 <_free_r+0x22>
 80059e6:	461a      	mov	r2, r3
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b10b      	cbz	r3, 80059f0 <_free_r+0x50>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d9fa      	bls.n	80059e6 <_free_r+0x46>
 80059f0:	6811      	ldr	r1, [r2, #0]
 80059f2:	1855      	adds	r5, r2, r1
 80059f4:	42a5      	cmp	r5, r4
 80059f6:	d10b      	bne.n	8005a10 <_free_r+0x70>
 80059f8:	6824      	ldr	r4, [r4, #0]
 80059fa:	4421      	add	r1, r4
 80059fc:	1854      	adds	r4, r2, r1
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	d1e0      	bne.n	80059c6 <_free_r+0x26>
 8005a04:	681c      	ldr	r4, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	6053      	str	r3, [r2, #4]
 8005a0a:	4421      	add	r1, r4
 8005a0c:	6011      	str	r1, [r2, #0]
 8005a0e:	e7da      	b.n	80059c6 <_free_r+0x26>
 8005a10:	d902      	bls.n	8005a18 <_free_r+0x78>
 8005a12:	230c      	movs	r3, #12
 8005a14:	6003      	str	r3, [r0, #0]
 8005a16:	e7d6      	b.n	80059c6 <_free_r+0x26>
 8005a18:	6825      	ldr	r5, [r4, #0]
 8005a1a:	1961      	adds	r1, r4, r5
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf04      	itt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	6063      	str	r3, [r4, #4]
 8005a26:	bf04      	itt	eq
 8005a28:	1949      	addeq	r1, r1, r5
 8005a2a:	6021      	streq	r1, [r4, #0]
 8005a2c:	6054      	str	r4, [r2, #4]
 8005a2e:	e7ca      	b.n	80059c6 <_free_r+0x26>
 8005a30:	b003      	add	sp, #12
 8005a32:	bd30      	pop	{r4, r5, pc}
 8005a34:	20000c98 	.word	0x20000c98

08005a38 <_malloc_r>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	1ccd      	adds	r5, r1, #3
 8005a3c:	f025 0503 	bic.w	r5, r5, #3
 8005a40:	3508      	adds	r5, #8
 8005a42:	2d0c      	cmp	r5, #12
 8005a44:	bf38      	it	cc
 8005a46:	250c      	movcc	r5, #12
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	db01      	blt.n	8005a52 <_malloc_r+0x1a>
 8005a4e:	42a9      	cmp	r1, r5
 8005a50:	d903      	bls.n	8005a5a <_malloc_r+0x22>
 8005a52:	230c      	movs	r3, #12
 8005a54:	6033      	str	r3, [r6, #0]
 8005a56:	2000      	movs	r0, #0
 8005a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a5a:	f000 fad5 	bl	8006008 <__malloc_lock>
 8005a5e:	4921      	ldr	r1, [pc, #132]	; (8005ae4 <_malloc_r+0xac>)
 8005a60:	680a      	ldr	r2, [r1, #0]
 8005a62:	4614      	mov	r4, r2
 8005a64:	b99c      	cbnz	r4, 8005a8e <_malloc_r+0x56>
 8005a66:	4f20      	ldr	r7, [pc, #128]	; (8005ae8 <_malloc_r+0xb0>)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	b923      	cbnz	r3, 8005a76 <_malloc_r+0x3e>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f7fd f852 	bl	8002b18 <_sbrk_r>
 8005a74:	6038      	str	r0, [r7, #0]
 8005a76:	4629      	mov	r1, r5
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f7fd f84d 	bl	8002b18 <_sbrk_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d123      	bne.n	8005aca <_malloc_r+0x92>
 8005a82:	230c      	movs	r3, #12
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 fac4 	bl	8006014 <__malloc_unlock>
 8005a8c:	e7e3      	b.n	8005a56 <_malloc_r+0x1e>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	1b5b      	subs	r3, r3, r5
 8005a92:	d417      	bmi.n	8005ac4 <_malloc_r+0x8c>
 8005a94:	2b0b      	cmp	r3, #11
 8005a96:	d903      	bls.n	8005aa0 <_malloc_r+0x68>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	441c      	add	r4, r3
 8005a9c:	6025      	str	r5, [r4, #0]
 8005a9e:	e004      	b.n	8005aaa <_malloc_r+0x72>
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	42a2      	cmp	r2, r4
 8005aa4:	bf0c      	ite	eq
 8005aa6:	600b      	streq	r3, [r1, #0]
 8005aa8:	6053      	strne	r3, [r2, #4]
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f000 fab2 	bl	8006014 <__malloc_unlock>
 8005ab0:	f104 000b 	add.w	r0, r4, #11
 8005ab4:	1d23      	adds	r3, r4, #4
 8005ab6:	f020 0007 	bic.w	r0, r0, #7
 8005aba:	1ac2      	subs	r2, r0, r3
 8005abc:	d0cc      	beq.n	8005a58 <_malloc_r+0x20>
 8005abe:	1a1b      	subs	r3, r3, r0
 8005ac0:	50a3      	str	r3, [r4, r2]
 8005ac2:	e7c9      	b.n	8005a58 <_malloc_r+0x20>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	6864      	ldr	r4, [r4, #4]
 8005ac8:	e7cc      	b.n	8005a64 <_malloc_r+0x2c>
 8005aca:	1cc4      	adds	r4, r0, #3
 8005acc:	f024 0403 	bic.w	r4, r4, #3
 8005ad0:	42a0      	cmp	r0, r4
 8005ad2:	d0e3      	beq.n	8005a9c <_malloc_r+0x64>
 8005ad4:	1a21      	subs	r1, r4, r0
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7fd f81e 	bl	8002b18 <_sbrk_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	d1dd      	bne.n	8005a9c <_malloc_r+0x64>
 8005ae0:	e7cf      	b.n	8005a82 <_malloc_r+0x4a>
 8005ae2:	bf00      	nop
 8005ae4:	20000c98 	.word	0x20000c98
 8005ae8:	20000c9c 	.word	0x20000c9c

08005aec <__sfputc_r>:
 8005aec:	6893      	ldr	r3, [r2, #8]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	b410      	push	{r4}
 8005af4:	6093      	str	r3, [r2, #8]
 8005af6:	da08      	bge.n	8005b0a <__sfputc_r+0x1e>
 8005af8:	6994      	ldr	r4, [r2, #24]
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	db01      	blt.n	8005b02 <__sfputc_r+0x16>
 8005afe:	290a      	cmp	r1, #10
 8005b00:	d103      	bne.n	8005b0a <__sfputc_r+0x1e>
 8005b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b06:	f000 b98f 	b.w	8005e28 <__swbuf_r>
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	1c58      	adds	r0, r3, #1
 8005b0e:	6010      	str	r0, [r2, #0]
 8005b10:	7019      	strb	r1, [r3, #0]
 8005b12:	4608      	mov	r0, r1
 8005b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <__sfputs_r>:
 8005b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460f      	mov	r7, r1
 8005b20:	4614      	mov	r4, r2
 8005b22:	18d5      	adds	r5, r2, r3
 8005b24:	42ac      	cmp	r4, r5
 8005b26:	d101      	bne.n	8005b2c <__sfputs_r+0x12>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e007      	b.n	8005b3c <__sfputs_r+0x22>
 8005b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b30:	463a      	mov	r2, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff ffda 	bl	8005aec <__sfputc_r>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d1f3      	bne.n	8005b24 <__sfputs_r+0xa>
 8005b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b40 <_vfiprintf_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	460d      	mov	r5, r1
 8005b46:	b09d      	sub	sp, #116	; 0x74
 8005b48:	4614      	mov	r4, r2
 8005b4a:	4698      	mov	r8, r3
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	b118      	cbz	r0, 8005b58 <_vfiprintf_r+0x18>
 8005b50:	6983      	ldr	r3, [r0, #24]
 8005b52:	b90b      	cbnz	r3, 8005b58 <_vfiprintf_r+0x18>
 8005b54:	f7ff fa4c 	bl	8004ff0 <__sinit>
 8005b58:	4b89      	ldr	r3, [pc, #548]	; (8005d80 <_vfiprintf_r+0x240>)
 8005b5a:	429d      	cmp	r5, r3
 8005b5c:	d11b      	bne.n	8005b96 <_vfiprintf_r+0x56>
 8005b5e:	6875      	ldr	r5, [r6, #4]
 8005b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b62:	07d9      	lsls	r1, r3, #31
 8005b64:	d405      	bmi.n	8005b72 <_vfiprintf_r+0x32>
 8005b66:	89ab      	ldrh	r3, [r5, #12]
 8005b68:	059a      	lsls	r2, r3, #22
 8005b6a:	d402      	bmi.n	8005b72 <_vfiprintf_r+0x32>
 8005b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b6e:	f7ff faf4 	bl	800515a <__retarget_lock_acquire_recursive>
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	071b      	lsls	r3, r3, #28
 8005b76:	d501      	bpl.n	8005b7c <_vfiprintf_r+0x3c>
 8005b78:	692b      	ldr	r3, [r5, #16]
 8005b7a:	b9eb      	cbnz	r3, 8005bb8 <_vfiprintf_r+0x78>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 f9b2 	bl	8005ee8 <__swsetup_r>
 8005b84:	b1c0      	cbz	r0, 8005bb8 <_vfiprintf_r+0x78>
 8005b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b88:	07dc      	lsls	r4, r3, #31
 8005b8a:	d50e      	bpl.n	8005baa <_vfiprintf_r+0x6a>
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b90:	b01d      	add	sp, #116	; 0x74
 8005b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b96:	4b7b      	ldr	r3, [pc, #492]	; (8005d84 <_vfiprintf_r+0x244>)
 8005b98:	429d      	cmp	r5, r3
 8005b9a:	d101      	bne.n	8005ba0 <_vfiprintf_r+0x60>
 8005b9c:	68b5      	ldr	r5, [r6, #8]
 8005b9e:	e7df      	b.n	8005b60 <_vfiprintf_r+0x20>
 8005ba0:	4b79      	ldr	r3, [pc, #484]	; (8005d88 <_vfiprintf_r+0x248>)
 8005ba2:	429d      	cmp	r5, r3
 8005ba4:	bf08      	it	eq
 8005ba6:	68f5      	ldreq	r5, [r6, #12]
 8005ba8:	e7da      	b.n	8005b60 <_vfiprintf_r+0x20>
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	0598      	lsls	r0, r3, #22
 8005bae:	d4ed      	bmi.n	8005b8c <_vfiprintf_r+0x4c>
 8005bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bb2:	f7ff fad3 	bl	800515c <__retarget_lock_release_recursive>
 8005bb6:	e7e9      	b.n	8005b8c <_vfiprintf_r+0x4c>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9309      	str	r3, [sp, #36]	; 0x24
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc6:	2330      	movs	r3, #48	; 0x30
 8005bc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d8c <_vfiprintf_r+0x24c>
 8005bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bd0:	f04f 0901 	mov.w	r9, #1
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	469a      	mov	sl, r3
 8005bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bdc:	b10a      	cbz	r2, 8005be2 <_vfiprintf_r+0xa2>
 8005bde:	2a25      	cmp	r2, #37	; 0x25
 8005be0:	d1f9      	bne.n	8005bd6 <_vfiprintf_r+0x96>
 8005be2:	ebba 0b04 	subs.w	fp, sl, r4
 8005be6:	d00b      	beq.n	8005c00 <_vfiprintf_r+0xc0>
 8005be8:	465b      	mov	r3, fp
 8005bea:	4622      	mov	r2, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f7ff ff93 	bl	8005b1a <__sfputs_r>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	f000 80aa 	beq.w	8005d4e <_vfiprintf_r+0x20e>
 8005bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bfc:	445a      	add	r2, fp
 8005bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8005c00:	f89a 3000 	ldrb.w	r3, [sl]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a2 	beq.w	8005d4e <_vfiprintf_r+0x20e>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c14:	f10a 0a01 	add.w	sl, sl, #1
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	9307      	str	r3, [sp, #28]
 8005c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c20:	931a      	str	r3, [sp, #104]	; 0x68
 8005c22:	4654      	mov	r4, sl
 8005c24:	2205      	movs	r2, #5
 8005c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2a:	4858      	ldr	r0, [pc, #352]	; (8005d8c <_vfiprintf_r+0x24c>)
 8005c2c:	f7fa fb00 	bl	8000230 <memchr>
 8005c30:	9a04      	ldr	r2, [sp, #16]
 8005c32:	b9d8      	cbnz	r0, 8005c6c <_vfiprintf_r+0x12c>
 8005c34:	06d1      	lsls	r1, r2, #27
 8005c36:	bf44      	itt	mi
 8005c38:	2320      	movmi	r3, #32
 8005c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c3e:	0713      	lsls	r3, r2, #28
 8005c40:	bf44      	itt	mi
 8005c42:	232b      	movmi	r3, #43	; 0x2b
 8005c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c48:	f89a 3000 	ldrb.w	r3, [sl]
 8005c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c4e:	d015      	beq.n	8005c7c <_vfiprintf_r+0x13c>
 8005c50:	9a07      	ldr	r2, [sp, #28]
 8005c52:	4654      	mov	r4, sl
 8005c54:	2000      	movs	r0, #0
 8005c56:	f04f 0c0a 	mov.w	ip, #10
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c60:	3b30      	subs	r3, #48	; 0x30
 8005c62:	2b09      	cmp	r3, #9
 8005c64:	d94e      	bls.n	8005d04 <_vfiprintf_r+0x1c4>
 8005c66:	b1b0      	cbz	r0, 8005c96 <_vfiprintf_r+0x156>
 8005c68:	9207      	str	r2, [sp, #28]
 8005c6a:	e014      	b.n	8005c96 <_vfiprintf_r+0x156>
 8005c6c:	eba0 0308 	sub.w	r3, r0, r8
 8005c70:	fa09 f303 	lsl.w	r3, r9, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	46a2      	mov	sl, r4
 8005c7a:	e7d2      	b.n	8005c22 <_vfiprintf_r+0xe2>
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	1d19      	adds	r1, r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	9103      	str	r1, [sp, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfbb      	ittet	lt
 8005c88:	425b      	neglt	r3, r3
 8005c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c8e:	9307      	strge	r3, [sp, #28]
 8005c90:	9307      	strlt	r3, [sp, #28]
 8005c92:	bfb8      	it	lt
 8005c94:	9204      	strlt	r2, [sp, #16]
 8005c96:	7823      	ldrb	r3, [r4, #0]
 8005c98:	2b2e      	cmp	r3, #46	; 0x2e
 8005c9a:	d10c      	bne.n	8005cb6 <_vfiprintf_r+0x176>
 8005c9c:	7863      	ldrb	r3, [r4, #1]
 8005c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca0:	d135      	bne.n	8005d0e <_vfiprintf_r+0x1ce>
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	1d1a      	adds	r2, r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	9203      	str	r2, [sp, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfb8      	it	lt
 8005cae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cb2:	3402      	adds	r4, #2
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d9c <_vfiprintf_r+0x25c>
 8005cba:	7821      	ldrb	r1, [r4, #0]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	f7fa fab6 	bl	8000230 <memchr>
 8005cc4:	b140      	cbz	r0, 8005cd8 <_vfiprintf_r+0x198>
 8005cc6:	2340      	movs	r3, #64	; 0x40
 8005cc8:	eba0 000a 	sub.w	r0, r0, sl
 8005ccc:	fa03 f000 	lsl.w	r0, r3, r0
 8005cd0:	9b04      	ldr	r3, [sp, #16]
 8005cd2:	4303      	orrs	r3, r0
 8005cd4:	3401      	adds	r4, #1
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cdc:	482c      	ldr	r0, [pc, #176]	; (8005d90 <_vfiprintf_r+0x250>)
 8005cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ce2:	2206      	movs	r2, #6
 8005ce4:	f7fa faa4 	bl	8000230 <memchr>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d03f      	beq.n	8005d6c <_vfiprintf_r+0x22c>
 8005cec:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <_vfiprintf_r+0x254>)
 8005cee:	bb1b      	cbnz	r3, 8005d38 <_vfiprintf_r+0x1f8>
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	3307      	adds	r3, #7
 8005cf4:	f023 0307 	bic.w	r3, r3, #7
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	9303      	str	r3, [sp, #12]
 8005cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfe:	443b      	add	r3, r7
 8005d00:	9309      	str	r3, [sp, #36]	; 0x24
 8005d02:	e767      	b.n	8005bd4 <_vfiprintf_r+0x94>
 8005d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d08:	460c      	mov	r4, r1
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	e7a5      	b.n	8005c5a <_vfiprintf_r+0x11a>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	3401      	adds	r4, #1
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	4619      	mov	r1, r3
 8005d16:	f04f 0c0a 	mov.w	ip, #10
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d20:	3a30      	subs	r2, #48	; 0x30
 8005d22:	2a09      	cmp	r2, #9
 8005d24:	d903      	bls.n	8005d2e <_vfiprintf_r+0x1ee>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0c5      	beq.n	8005cb6 <_vfiprintf_r+0x176>
 8005d2a:	9105      	str	r1, [sp, #20]
 8005d2c:	e7c3      	b.n	8005cb6 <_vfiprintf_r+0x176>
 8005d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d32:	4604      	mov	r4, r0
 8005d34:	2301      	movs	r3, #1
 8005d36:	e7f0      	b.n	8005d1a <_vfiprintf_r+0x1da>
 8005d38:	ab03      	add	r3, sp, #12
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <_vfiprintf_r+0x258>)
 8005d40:	a904      	add	r1, sp, #16
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7fd fc38 	bl	80035b8 <_printf_float>
 8005d48:	4607      	mov	r7, r0
 8005d4a:	1c78      	adds	r0, r7, #1
 8005d4c:	d1d6      	bne.n	8005cfc <_vfiprintf_r+0x1bc>
 8005d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d50:	07d9      	lsls	r1, r3, #31
 8005d52:	d405      	bmi.n	8005d60 <_vfiprintf_r+0x220>
 8005d54:	89ab      	ldrh	r3, [r5, #12]
 8005d56:	059a      	lsls	r2, r3, #22
 8005d58:	d402      	bmi.n	8005d60 <_vfiprintf_r+0x220>
 8005d5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d5c:	f7ff f9fe 	bl	800515c <__retarget_lock_release_recursive>
 8005d60:	89ab      	ldrh	r3, [r5, #12]
 8005d62:	065b      	lsls	r3, r3, #25
 8005d64:	f53f af12 	bmi.w	8005b8c <_vfiprintf_r+0x4c>
 8005d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d6a:	e711      	b.n	8005b90 <_vfiprintf_r+0x50>
 8005d6c:	ab03      	add	r3, sp, #12
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	462a      	mov	r2, r5
 8005d72:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <_vfiprintf_r+0x258>)
 8005d74:	a904      	add	r1, sp, #16
 8005d76:	4630      	mov	r0, r6
 8005d78:	f7fd fec2 	bl	8003b00 <_printf_i>
 8005d7c:	e7e4      	b.n	8005d48 <_vfiprintf_r+0x208>
 8005d7e:	bf00      	nop
 8005d80:	08012aa0 	.word	0x08012aa0
 8005d84:	08012ac0 	.word	0x08012ac0
 8005d88:	08012a80 	.word	0x08012a80
 8005d8c:	08012c64 	.word	0x08012c64
 8005d90:	08012c6e 	.word	0x08012c6e
 8005d94:	080035b9 	.word	0x080035b9
 8005d98:	08005b1b 	.word	0x08005b1b
 8005d9c:	08012c6a 	.word	0x08012c6a

08005da0 <__sread>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	460c      	mov	r4, r1
 8005da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da8:	f7fc fed9 	bl	8002b5e <_read_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	bfab      	itete	ge
 8005db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005db2:	89a3      	ldrhlt	r3, [r4, #12]
 8005db4:	181b      	addge	r3, r3, r0
 8005db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dba:	bfac      	ite	ge
 8005dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dbe:	81a3      	strhlt	r3, [r4, #12]
 8005dc0:	bd10      	pop	{r4, pc}

08005dc2 <__swrite>:
 8005dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	461f      	mov	r7, r3
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	05db      	lsls	r3, r3, #23
 8005dcc:	4605      	mov	r5, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	d505      	bpl.n	8005de0 <__swrite+0x1e>
 8005dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd8:	2302      	movs	r3, #2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7fc febd 	bl	8002b5a <_lseek_r>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	4632      	mov	r2, r6
 8005dee:	463b      	mov	r3, r7
 8005df0:	4628      	mov	r0, r5
 8005df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005df6:	f7fc beb7 	b.w	8002b68 <_write_r>

08005dfa <__sseek>:
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e02:	f7fc feaa 	bl	8002b5a <_lseek_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	bf15      	itete	ne
 8005e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e16:	81a3      	strheq	r3, [r4, #12]
 8005e18:	bf18      	it	ne
 8005e1a:	81a3      	strhne	r3, [r4, #12]
 8005e1c:	bd10      	pop	{r4, pc}

08005e1e <__sclose>:
 8005e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e22:	f7fc be91 	b.w	8002b48 <_close_r>
	...

08005e28 <__swbuf_r>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	460e      	mov	r6, r1
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	4605      	mov	r5, r0
 8005e30:	b118      	cbz	r0, 8005e3a <__swbuf_r+0x12>
 8005e32:	6983      	ldr	r3, [r0, #24]
 8005e34:	b90b      	cbnz	r3, 8005e3a <__swbuf_r+0x12>
 8005e36:	f7ff f8db 	bl	8004ff0 <__sinit>
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <__swbuf_r+0x98>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	d12b      	bne.n	8005e98 <__swbuf_r+0x70>
 8005e40:	686c      	ldr	r4, [r5, #4]
 8005e42:	69a3      	ldr	r3, [r4, #24]
 8005e44:	60a3      	str	r3, [r4, #8]
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	071a      	lsls	r2, r3, #28
 8005e4a:	d52f      	bpl.n	8005eac <__swbuf_r+0x84>
 8005e4c:	6923      	ldr	r3, [r4, #16]
 8005e4e:	b36b      	cbz	r3, 8005eac <__swbuf_r+0x84>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	1ac0      	subs	r0, r0, r3
 8005e56:	6963      	ldr	r3, [r4, #20]
 8005e58:	b2f6      	uxtb	r6, r6
 8005e5a:	4283      	cmp	r3, r0
 8005e5c:	4637      	mov	r7, r6
 8005e5e:	dc04      	bgt.n	8005e6a <__swbuf_r+0x42>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7ff f830 	bl	8004ec8 <_fflush_r>
 8005e68:	bb30      	cbnz	r0, 8005eb8 <__swbuf_r+0x90>
 8005e6a:	68a3      	ldr	r3, [r4, #8]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	60a3      	str	r3, [r4, #8]
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	6022      	str	r2, [r4, #0]
 8005e76:	701e      	strb	r6, [r3, #0]
 8005e78:	6963      	ldr	r3, [r4, #20]
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	4283      	cmp	r3, r0
 8005e7e:	d004      	beq.n	8005e8a <__swbuf_r+0x62>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	07db      	lsls	r3, r3, #31
 8005e84:	d506      	bpl.n	8005e94 <__swbuf_r+0x6c>
 8005e86:	2e0a      	cmp	r6, #10
 8005e88:	d104      	bne.n	8005e94 <__swbuf_r+0x6c>
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7ff f81b 	bl	8004ec8 <_fflush_r>
 8005e92:	b988      	cbnz	r0, 8005eb8 <__swbuf_r+0x90>
 8005e94:	4638      	mov	r0, r7
 8005e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <__swbuf_r+0x9c>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d101      	bne.n	8005ea2 <__swbuf_r+0x7a>
 8005e9e:	68ac      	ldr	r4, [r5, #8]
 8005ea0:	e7cf      	b.n	8005e42 <__swbuf_r+0x1a>
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <__swbuf_r+0xa0>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	bf08      	it	eq
 8005ea8:	68ec      	ldreq	r4, [r5, #12]
 8005eaa:	e7ca      	b.n	8005e42 <__swbuf_r+0x1a>
 8005eac:	4621      	mov	r1, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 f81a 	bl	8005ee8 <__swsetup_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0cb      	beq.n	8005e50 <__swbuf_r+0x28>
 8005eb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ebc:	e7ea      	b.n	8005e94 <__swbuf_r+0x6c>
 8005ebe:	bf00      	nop
 8005ec0:	08012aa0 	.word	0x08012aa0
 8005ec4:	08012ac0 	.word	0x08012ac0
 8005ec8:	08012a80 	.word	0x08012a80

08005ecc <__ascii_wctomb>:
 8005ecc:	b149      	cbz	r1, 8005ee2 <__ascii_wctomb+0x16>
 8005ece:	2aff      	cmp	r2, #255	; 0xff
 8005ed0:	bf85      	ittet	hi
 8005ed2:	238a      	movhi	r3, #138	; 0x8a
 8005ed4:	6003      	strhi	r3, [r0, #0]
 8005ed6:	700a      	strbls	r2, [r1, #0]
 8005ed8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005edc:	bf98      	it	ls
 8005ede:	2001      	movls	r0, #1
 8005ee0:	4770      	bx	lr
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	4770      	bx	lr
	...

08005ee8 <__swsetup_r>:
 8005ee8:	4b32      	ldr	r3, [pc, #200]	; (8005fb4 <__swsetup_r+0xcc>)
 8005eea:	b570      	push	{r4, r5, r6, lr}
 8005eec:	681d      	ldr	r5, [r3, #0]
 8005eee:	4606      	mov	r6, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	b125      	cbz	r5, 8005efe <__swsetup_r+0x16>
 8005ef4:	69ab      	ldr	r3, [r5, #24]
 8005ef6:	b913      	cbnz	r3, 8005efe <__swsetup_r+0x16>
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f7ff f879 	bl	8004ff0 <__sinit>
 8005efe:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <__swsetup_r+0xd0>)
 8005f00:	429c      	cmp	r4, r3
 8005f02:	d10f      	bne.n	8005f24 <__swsetup_r+0x3c>
 8005f04:	686c      	ldr	r4, [r5, #4]
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f0c:	0719      	lsls	r1, r3, #28
 8005f0e:	d42c      	bmi.n	8005f6a <__swsetup_r+0x82>
 8005f10:	06dd      	lsls	r5, r3, #27
 8005f12:	d411      	bmi.n	8005f38 <__swsetup_r+0x50>
 8005f14:	2309      	movs	r3, #9
 8005f16:	6033      	str	r3, [r6, #0]
 8005f18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f22:	e03e      	b.n	8005fa2 <__swsetup_r+0xba>
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <__swsetup_r+0xd4>)
 8005f26:	429c      	cmp	r4, r3
 8005f28:	d101      	bne.n	8005f2e <__swsetup_r+0x46>
 8005f2a:	68ac      	ldr	r4, [r5, #8]
 8005f2c:	e7eb      	b.n	8005f06 <__swsetup_r+0x1e>
 8005f2e:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <__swsetup_r+0xd8>)
 8005f30:	429c      	cmp	r4, r3
 8005f32:	bf08      	it	eq
 8005f34:	68ec      	ldreq	r4, [r5, #12]
 8005f36:	e7e6      	b.n	8005f06 <__swsetup_r+0x1e>
 8005f38:	0758      	lsls	r0, r3, #29
 8005f3a:	d512      	bpl.n	8005f62 <__swsetup_r+0x7a>
 8005f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f3e:	b141      	cbz	r1, 8005f52 <__swsetup_r+0x6a>
 8005f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d002      	beq.n	8005f4e <__swsetup_r+0x66>
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff fd29 	bl	80059a0 <_free_r>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6363      	str	r3, [r4, #52]	; 0x34
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f043 0308 	orr.w	r3, r3, #8
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	b94b      	cbnz	r3, 8005f82 <__swsetup_r+0x9a>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f78:	d003      	beq.n	8005f82 <__swsetup_r+0x9a>
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f7ff f913 	bl	80051a8 <__smakebuf_r>
 8005f82:	89a0      	ldrh	r0, [r4, #12]
 8005f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f88:	f010 0301 	ands.w	r3, r0, #1
 8005f8c:	d00a      	beq.n	8005fa4 <__swsetup_r+0xbc>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60a3      	str	r3, [r4, #8]
 8005f92:	6963      	ldr	r3, [r4, #20]
 8005f94:	425b      	negs	r3, r3
 8005f96:	61a3      	str	r3, [r4, #24]
 8005f98:	6923      	ldr	r3, [r4, #16]
 8005f9a:	b943      	cbnz	r3, 8005fae <__swsetup_r+0xc6>
 8005f9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fa0:	d1ba      	bne.n	8005f18 <__swsetup_r+0x30>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	0781      	lsls	r1, r0, #30
 8005fa6:	bf58      	it	pl
 8005fa8:	6963      	ldrpl	r3, [r4, #20]
 8005faa:	60a3      	str	r3, [r4, #8]
 8005fac:	e7f4      	b.n	8005f98 <__swsetup_r+0xb0>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e7f7      	b.n	8005fa2 <__swsetup_r+0xba>
 8005fb2:	bf00      	nop
 8005fb4:	20000018 	.word	0x20000018
 8005fb8:	08012aa0 	.word	0x08012aa0
 8005fbc:	08012ac0 	.word	0x08012ac0
 8005fc0:	08012a80 	.word	0x08012a80

08005fc4 <abort>:
 8005fc4:	b508      	push	{r3, lr}
 8005fc6:	2006      	movs	r0, #6
 8005fc8:	f000 f878 	bl	80060bc <raise>
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7fc fdee 	bl	8002bae <_exit>

08005fd2 <memmove>:
 8005fd2:	4288      	cmp	r0, r1
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	eb01 0402 	add.w	r4, r1, r2
 8005fda:	d902      	bls.n	8005fe2 <memmove+0x10>
 8005fdc:	4284      	cmp	r4, r0
 8005fde:	4623      	mov	r3, r4
 8005fe0:	d807      	bhi.n	8005ff2 <memmove+0x20>
 8005fe2:	1e43      	subs	r3, r0, #1
 8005fe4:	42a1      	cmp	r1, r4
 8005fe6:	d008      	beq.n	8005ffa <memmove+0x28>
 8005fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ff0:	e7f8      	b.n	8005fe4 <memmove+0x12>
 8005ff2:	4402      	add	r2, r0
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	428a      	cmp	r2, r1
 8005ff8:	d100      	bne.n	8005ffc <memmove+0x2a>
 8005ffa:	bd10      	pop	{r4, pc}
 8005ffc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006000:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006004:	e7f7      	b.n	8005ff6 <memmove+0x24>
	...

08006008 <__malloc_lock>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__malloc_lock+0x8>)
 800600a:	f7ff b8a6 	b.w	800515a <__retarget_lock_acquire_recursive>
 800600e:	bf00      	nop
 8006010:	20000c94 	.word	0x20000c94

08006014 <__malloc_unlock>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__malloc_unlock+0x8>)
 8006016:	f7ff b8a1 	b.w	800515c <__retarget_lock_release_recursive>
 800601a:	bf00      	nop
 800601c:	20000c94 	.word	0x20000c94

08006020 <_realloc_r>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	4607      	mov	r7, r0
 8006024:	4614      	mov	r4, r2
 8006026:	460e      	mov	r6, r1
 8006028:	b921      	cbnz	r1, 8006034 <_realloc_r+0x14>
 800602a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800602e:	4611      	mov	r1, r2
 8006030:	f7ff bd02 	b.w	8005a38 <_malloc_r>
 8006034:	b922      	cbnz	r2, 8006040 <_realloc_r+0x20>
 8006036:	f7ff fcb3 	bl	80059a0 <_free_r>
 800603a:	4625      	mov	r5, r4
 800603c:	4628      	mov	r0, r5
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006040:	f000 f858 	bl	80060f4 <_malloc_usable_size_r>
 8006044:	42a0      	cmp	r0, r4
 8006046:	d20f      	bcs.n	8006068 <_realloc_r+0x48>
 8006048:	4621      	mov	r1, r4
 800604a:	4638      	mov	r0, r7
 800604c:	f7ff fcf4 	bl	8005a38 <_malloc_r>
 8006050:	4605      	mov	r5, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d0f2      	beq.n	800603c <_realloc_r+0x1c>
 8006056:	4631      	mov	r1, r6
 8006058:	4622      	mov	r2, r4
 800605a:	f7ff f8ff 	bl	800525c <memcpy>
 800605e:	4631      	mov	r1, r6
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff fc9d 	bl	80059a0 <_free_r>
 8006066:	e7e9      	b.n	800603c <_realloc_r+0x1c>
 8006068:	4635      	mov	r5, r6
 800606a:	e7e7      	b.n	800603c <_realloc_r+0x1c>

0800606c <_raise_r>:
 800606c:	291f      	cmp	r1, #31
 800606e:	b538      	push	{r3, r4, r5, lr}
 8006070:	4604      	mov	r4, r0
 8006072:	460d      	mov	r5, r1
 8006074:	d904      	bls.n	8006080 <_raise_r+0x14>
 8006076:	2316      	movs	r3, #22
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006082:	b112      	cbz	r2, 800608a <_raise_r+0x1e>
 8006084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006088:	b94b      	cbnz	r3, 800609e <_raise_r+0x32>
 800608a:	4620      	mov	r0, r4
 800608c:	f000 f830 	bl	80060f0 <_getpid_r>
 8006090:	462a      	mov	r2, r5
 8006092:	4601      	mov	r1, r0
 8006094:	4620      	mov	r0, r4
 8006096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609a:	f000 b817 	b.w	80060cc <_kill_r>
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d00a      	beq.n	80060b8 <_raise_r+0x4c>
 80060a2:	1c59      	adds	r1, r3, #1
 80060a4:	d103      	bne.n	80060ae <_raise_r+0x42>
 80060a6:	2316      	movs	r3, #22
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	2001      	movs	r0, #1
 80060ac:	e7e7      	b.n	800607e <_raise_r+0x12>
 80060ae:	2400      	movs	r4, #0
 80060b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060b4:	4628      	mov	r0, r5
 80060b6:	4798      	blx	r3
 80060b8:	2000      	movs	r0, #0
 80060ba:	e7e0      	b.n	800607e <_raise_r+0x12>

080060bc <raise>:
 80060bc:	4b02      	ldr	r3, [pc, #8]	; (80060c8 <raise+0xc>)
 80060be:	4601      	mov	r1, r0
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f7ff bfd3 	b.w	800606c <_raise_r>
 80060c6:	bf00      	nop
 80060c8:	20000018 	.word	0x20000018

080060cc <_kill_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d07      	ldr	r5, [pc, #28]	; (80060ec <_kill_r+0x20>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	602b      	str	r3, [r5, #0]
 80060da:	f7fc fd65 	bl	8002ba8 <_kill>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d102      	bne.n	80060e8 <_kill_r+0x1c>
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	b103      	cbz	r3, 80060e8 <_kill_r+0x1c>
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	bf00      	nop
 80060ec:	20000ca0 	.word	0x20000ca0

080060f0 <_getpid_r>:
 80060f0:	f7fc bd5e 	b.w	8002bb0 <_getpid>

080060f4 <_malloc_usable_size_r>:
 80060f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f8:	1f18      	subs	r0, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bfbc      	itt	lt
 80060fe:	580b      	ldrlt	r3, [r1, r0]
 8006100:	18c0      	addlt	r0, r0, r3
 8006102:	4770      	bx	lr

08006104 <iprintf>:
 8006104:	b40f      	push	{r0, r1, r2, r3}
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <iprintf+0x2c>)
 8006108:	b513      	push	{r0, r1, r4, lr}
 800610a:	681c      	ldr	r4, [r3, #0]
 800610c:	b124      	cbz	r4, 8006118 <iprintf+0x14>
 800610e:	69a3      	ldr	r3, [r4, #24]
 8006110:	b913      	cbnz	r3, 8006118 <iprintf+0x14>
 8006112:	4620      	mov	r0, r4
 8006114:	f7fe ff6c 	bl	8004ff0 <__sinit>
 8006118:	ab05      	add	r3, sp, #20
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	68a1      	ldr	r1, [r4, #8]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff fd0d 	bl	8005b40 <_vfiprintf_r>
 8006126:	b002      	add	sp, #8
 8006128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612c:	b004      	add	sp, #16
 800612e:	4770      	bx	lr
 8006130:	20000018 	.word	0x20000018

08006134 <putchar>:
 8006134:	4b09      	ldr	r3, [pc, #36]	; (800615c <putchar+0x28>)
 8006136:	b513      	push	{r0, r1, r4, lr}
 8006138:	681c      	ldr	r4, [r3, #0]
 800613a:	4601      	mov	r1, r0
 800613c:	b134      	cbz	r4, 800614c <putchar+0x18>
 800613e:	69a3      	ldr	r3, [r4, #24]
 8006140:	b923      	cbnz	r3, 800614c <putchar+0x18>
 8006142:	9001      	str	r0, [sp, #4]
 8006144:	4620      	mov	r0, r4
 8006146:	f7fe ff53 	bl	8004ff0 <__sinit>
 800614a:	9901      	ldr	r1, [sp, #4]
 800614c:	68a2      	ldr	r2, [r4, #8]
 800614e:	4620      	mov	r0, r4
 8006150:	b002      	add	sp, #8
 8006152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006156:	f000 ba31 	b.w	80065bc <_putc_r>
 800615a:	bf00      	nop
 800615c:	20000018 	.word	0x20000018

08006160 <_puts_r>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	460e      	mov	r6, r1
 8006164:	4605      	mov	r5, r0
 8006166:	b118      	cbz	r0, 8006170 <_puts_r+0x10>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_puts_r+0x10>
 800616c:	f7fe ff40 	bl	8004ff0 <__sinit>
 8006170:	69ab      	ldr	r3, [r5, #24]
 8006172:	68ac      	ldr	r4, [r5, #8]
 8006174:	b913      	cbnz	r3, 800617c <_puts_r+0x1c>
 8006176:	4628      	mov	r0, r5
 8006178:	f7fe ff3a 	bl	8004ff0 <__sinit>
 800617c:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <_puts_r+0xd0>)
 800617e:	429c      	cmp	r4, r3
 8006180:	d120      	bne.n	80061c4 <_puts_r+0x64>
 8006182:	686c      	ldr	r4, [r5, #4]
 8006184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006186:	07db      	lsls	r3, r3, #31
 8006188:	d405      	bmi.n	8006196 <_puts_r+0x36>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	0598      	lsls	r0, r3, #22
 800618e:	d402      	bmi.n	8006196 <_puts_r+0x36>
 8006190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006192:	f7fe ffe2 	bl	800515a <__retarget_lock_acquire_recursive>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	0719      	lsls	r1, r3, #28
 800619a:	d51d      	bpl.n	80061d8 <_puts_r+0x78>
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	b1db      	cbz	r3, 80061d8 <_puts_r+0x78>
 80061a0:	3e01      	subs	r6, #1
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061a8:	3b01      	subs	r3, #1
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	bb39      	cbnz	r1, 80061fe <_puts_r+0x9e>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da38      	bge.n	8006224 <_puts_r+0xc4>
 80061b2:	4622      	mov	r2, r4
 80061b4:	210a      	movs	r1, #10
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7ff fe36 	bl	8005e28 <__swbuf_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d011      	beq.n	80061e4 <_puts_r+0x84>
 80061c0:	250a      	movs	r5, #10
 80061c2:	e011      	b.n	80061e8 <_puts_r+0x88>
 80061c4:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <_puts_r+0xd4>)
 80061c6:	429c      	cmp	r4, r3
 80061c8:	d101      	bne.n	80061ce <_puts_r+0x6e>
 80061ca:	68ac      	ldr	r4, [r5, #8]
 80061cc:	e7da      	b.n	8006184 <_puts_r+0x24>
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <_puts_r+0xd8>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	bf08      	it	eq
 80061d4:	68ec      	ldreq	r4, [r5, #12]
 80061d6:	e7d5      	b.n	8006184 <_puts_r+0x24>
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	f7ff fe84 	bl	8005ee8 <__swsetup_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d0dd      	beq.n	80061a0 <_puts_r+0x40>
 80061e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80061e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ea:	07da      	lsls	r2, r3, #31
 80061ec:	d405      	bmi.n	80061fa <_puts_r+0x9a>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	059b      	lsls	r3, r3, #22
 80061f2:	d402      	bmi.n	80061fa <_puts_r+0x9a>
 80061f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f6:	f7fe ffb1 	bl	800515c <__retarget_lock_release_recursive>
 80061fa:	4628      	mov	r0, r5
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da04      	bge.n	800620c <_puts_r+0xac>
 8006202:	69a2      	ldr	r2, [r4, #24]
 8006204:	429a      	cmp	r2, r3
 8006206:	dc06      	bgt.n	8006216 <_puts_r+0xb6>
 8006208:	290a      	cmp	r1, #10
 800620a:	d004      	beq.n	8006216 <_puts_r+0xb6>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	6022      	str	r2, [r4, #0]
 8006212:	7019      	strb	r1, [r3, #0]
 8006214:	e7c5      	b.n	80061a2 <_puts_r+0x42>
 8006216:	4622      	mov	r2, r4
 8006218:	4628      	mov	r0, r5
 800621a:	f7ff fe05 	bl	8005e28 <__swbuf_r>
 800621e:	3001      	adds	r0, #1
 8006220:	d1bf      	bne.n	80061a2 <_puts_r+0x42>
 8006222:	e7df      	b.n	80061e4 <_puts_r+0x84>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	250a      	movs	r5, #10
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	701d      	strb	r5, [r3, #0]
 800622e:	e7db      	b.n	80061e8 <_puts_r+0x88>
 8006230:	08012aa0 	.word	0x08012aa0
 8006234:	08012ac0 	.word	0x08012ac0
 8006238:	08012a80 	.word	0x08012a80

0800623c <puts>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <puts+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f7ff bf8d 	b.w	8006160 <_puts_r>
 8006246:	bf00      	nop
 8006248:	20000018 	.word	0x20000018

0800624c <strcasecmp>:
 800624c:	b530      	push	{r4, r5, lr}
 800624e:	4d0b      	ldr	r5, [pc, #44]	; (800627c <strcasecmp+0x30>)
 8006250:	4604      	mov	r4, r0
 8006252:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006256:	5d5a      	ldrb	r2, [r3, r5]
 8006258:	f002 0203 	and.w	r2, r2, #3
 800625c:	2a01      	cmp	r2, #1
 800625e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006262:	5ca8      	ldrb	r0, [r5, r2]
 8006264:	f000 0003 	and.w	r0, r0, #3
 8006268:	bf08      	it	eq
 800626a:	3320      	addeq	r3, #32
 800626c:	2801      	cmp	r0, #1
 800626e:	bf08      	it	eq
 8006270:	3220      	addeq	r2, #32
 8006272:	1a98      	subs	r0, r3, r2
 8006274:	d101      	bne.n	800627a <strcasecmp+0x2e>
 8006276:	2a00      	cmp	r2, #0
 8006278:	d1eb      	bne.n	8006252 <strcasecmp+0x6>
 800627a:	bd30      	pop	{r4, r5, pc}
 800627c:	080127da 	.word	0x080127da

08006280 <strcpy>:
 8006280:	4603      	mov	r3, r0
 8006282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006286:	f803 2b01 	strb.w	r2, [r3], #1
 800628a:	2a00      	cmp	r2, #0
 800628c:	d1f9      	bne.n	8006282 <strcpy+0x2>
 800628e:	4770      	bx	lr

08006290 <_vsniprintf_r>:
 8006290:	b530      	push	{r4, r5, lr}
 8006292:	4614      	mov	r4, r2
 8006294:	2c00      	cmp	r4, #0
 8006296:	b09b      	sub	sp, #108	; 0x6c
 8006298:	4605      	mov	r5, r0
 800629a:	461a      	mov	r2, r3
 800629c:	da05      	bge.n	80062aa <_vsniprintf_r+0x1a>
 800629e:	238b      	movs	r3, #139	; 0x8b
 80062a0:	6003      	str	r3, [r0, #0]
 80062a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a6:	b01b      	add	sp, #108	; 0x6c
 80062a8:	bd30      	pop	{r4, r5, pc}
 80062aa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 80062b2:	bf14      	ite	ne
 80062b4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80062b8:	4623      	moveq	r3, r4
 80062ba:	9302      	str	r3, [sp, #8]
 80062bc:	9305      	str	r3, [sp, #20]
 80062be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062c2:	9100      	str	r1, [sp, #0]
 80062c4:	9104      	str	r1, [sp, #16]
 80062c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80062ca:	4669      	mov	r1, sp
 80062cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062ce:	f000 f875 	bl	80063bc <_svfiprintf_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	bfbc      	itt	lt
 80062d6:	238b      	movlt	r3, #139	; 0x8b
 80062d8:	602b      	strlt	r3, [r5, #0]
 80062da:	2c00      	cmp	r4, #0
 80062dc:	d0e3      	beq.n	80062a6 <_vsniprintf_r+0x16>
 80062de:	9b00      	ldr	r3, [sp, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e7df      	b.n	80062a6 <_vsniprintf_r+0x16>
	...

080062e8 <vsniprintf>:
 80062e8:	b507      	push	{r0, r1, r2, lr}
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	460a      	mov	r2, r1
 80062f0:	4601      	mov	r1, r0
 80062f2:	4803      	ldr	r0, [pc, #12]	; (8006300 <vsniprintf+0x18>)
 80062f4:	6800      	ldr	r0, [r0, #0]
 80062f6:	f7ff ffcb 	bl	8006290 <_vsniprintf_r>
 80062fa:	b003      	add	sp, #12
 80062fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006300:	20000018 	.word	0x20000018

08006304 <__ssputs_r>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	688e      	ldr	r6, [r1, #8]
 800630a:	429e      	cmp	r6, r3
 800630c:	4682      	mov	sl, r0
 800630e:	460c      	mov	r4, r1
 8006310:	4690      	mov	r8, r2
 8006312:	461f      	mov	r7, r3
 8006314:	d838      	bhi.n	8006388 <__ssputs_r+0x84>
 8006316:	898a      	ldrh	r2, [r1, #12]
 8006318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800631c:	d032      	beq.n	8006384 <__ssputs_r+0x80>
 800631e:	6825      	ldr	r5, [r4, #0]
 8006320:	6909      	ldr	r1, [r1, #16]
 8006322:	eba5 0901 	sub.w	r9, r5, r1
 8006326:	6965      	ldr	r5, [r4, #20]
 8006328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800632c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006330:	3301      	adds	r3, #1
 8006332:	444b      	add	r3, r9
 8006334:	106d      	asrs	r5, r5, #1
 8006336:	429d      	cmp	r5, r3
 8006338:	bf38      	it	cc
 800633a:	461d      	movcc	r5, r3
 800633c:	0553      	lsls	r3, r2, #21
 800633e:	d531      	bpl.n	80063a4 <__ssputs_r+0xa0>
 8006340:	4629      	mov	r1, r5
 8006342:	f7ff fb79 	bl	8005a38 <_malloc_r>
 8006346:	4606      	mov	r6, r0
 8006348:	b950      	cbnz	r0, 8006360 <__ssputs_r+0x5c>
 800634a:	230c      	movs	r3, #12
 800634c:	f8ca 3000 	str.w	r3, [sl]
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006360:	6921      	ldr	r1, [r4, #16]
 8006362:	464a      	mov	r2, r9
 8006364:	f7fe ff7a 	bl	800525c <memcpy>
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	6126      	str	r6, [r4, #16]
 8006376:	6165      	str	r5, [r4, #20]
 8006378:	444e      	add	r6, r9
 800637a:	eba5 0509 	sub.w	r5, r5, r9
 800637e:	6026      	str	r6, [r4, #0]
 8006380:	60a5      	str	r5, [r4, #8]
 8006382:	463e      	mov	r6, r7
 8006384:	42be      	cmp	r6, r7
 8006386:	d900      	bls.n	800638a <__ssputs_r+0x86>
 8006388:	463e      	mov	r6, r7
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	4632      	mov	r2, r6
 800638e:	4641      	mov	r1, r8
 8006390:	f7ff fe1f 	bl	8005fd2 <memmove>
 8006394:	68a3      	ldr	r3, [r4, #8]
 8006396:	1b9b      	subs	r3, r3, r6
 8006398:	60a3      	str	r3, [r4, #8]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	4433      	add	r3, r6
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	2000      	movs	r0, #0
 80063a2:	e7db      	b.n	800635c <__ssputs_r+0x58>
 80063a4:	462a      	mov	r2, r5
 80063a6:	f7ff fe3b 	bl	8006020 <_realloc_r>
 80063aa:	4606      	mov	r6, r0
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d1e1      	bne.n	8006374 <__ssputs_r+0x70>
 80063b0:	6921      	ldr	r1, [r4, #16]
 80063b2:	4650      	mov	r0, sl
 80063b4:	f7ff faf4 	bl	80059a0 <_free_r>
 80063b8:	e7c7      	b.n	800634a <__ssputs_r+0x46>
	...

080063bc <_svfiprintf_r>:
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	4698      	mov	r8, r3
 80063c2:	898b      	ldrh	r3, [r1, #12]
 80063c4:	061b      	lsls	r3, r3, #24
 80063c6:	b09d      	sub	sp, #116	; 0x74
 80063c8:	4607      	mov	r7, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	4614      	mov	r4, r2
 80063ce:	d50e      	bpl.n	80063ee <_svfiprintf_r+0x32>
 80063d0:	690b      	ldr	r3, [r1, #16]
 80063d2:	b963      	cbnz	r3, 80063ee <_svfiprintf_r+0x32>
 80063d4:	2140      	movs	r1, #64	; 0x40
 80063d6:	f7ff fb2f 	bl	8005a38 <_malloc_r>
 80063da:	6028      	str	r0, [r5, #0]
 80063dc:	6128      	str	r0, [r5, #16]
 80063de:	b920      	cbnz	r0, 80063ea <_svfiprintf_r+0x2e>
 80063e0:	230c      	movs	r3, #12
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063e8:	e0d1      	b.n	800658e <_svfiprintf_r+0x1d2>
 80063ea:	2340      	movs	r3, #64	; 0x40
 80063ec:	616b      	str	r3, [r5, #20]
 80063ee:	2300      	movs	r3, #0
 80063f0:	9309      	str	r3, [sp, #36]	; 0x24
 80063f2:	2320      	movs	r3, #32
 80063f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80063fc:	2330      	movs	r3, #48	; 0x30
 80063fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80065a8 <_svfiprintf_r+0x1ec>
 8006402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006406:	f04f 0901 	mov.w	r9, #1
 800640a:	4623      	mov	r3, r4
 800640c:	469a      	mov	sl, r3
 800640e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006412:	b10a      	cbz	r2, 8006418 <_svfiprintf_r+0x5c>
 8006414:	2a25      	cmp	r2, #37	; 0x25
 8006416:	d1f9      	bne.n	800640c <_svfiprintf_r+0x50>
 8006418:	ebba 0b04 	subs.w	fp, sl, r4
 800641c:	d00b      	beq.n	8006436 <_svfiprintf_r+0x7a>
 800641e:	465b      	mov	r3, fp
 8006420:	4622      	mov	r2, r4
 8006422:	4629      	mov	r1, r5
 8006424:	4638      	mov	r0, r7
 8006426:	f7ff ff6d 	bl	8006304 <__ssputs_r>
 800642a:	3001      	adds	r0, #1
 800642c:	f000 80aa 	beq.w	8006584 <_svfiprintf_r+0x1c8>
 8006430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006432:	445a      	add	r2, fp
 8006434:	9209      	str	r2, [sp, #36]	; 0x24
 8006436:	f89a 3000 	ldrb.w	r3, [sl]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80a2 	beq.w	8006584 <_svfiprintf_r+0x1c8>
 8006440:	2300      	movs	r3, #0
 8006442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800644a:	f10a 0a01 	add.w	sl, sl, #1
 800644e:	9304      	str	r3, [sp, #16]
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006456:	931a      	str	r3, [sp, #104]	; 0x68
 8006458:	4654      	mov	r4, sl
 800645a:	2205      	movs	r2, #5
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	4851      	ldr	r0, [pc, #324]	; (80065a8 <_svfiprintf_r+0x1ec>)
 8006462:	f7f9 fee5 	bl	8000230 <memchr>
 8006466:	9a04      	ldr	r2, [sp, #16]
 8006468:	b9d8      	cbnz	r0, 80064a2 <_svfiprintf_r+0xe6>
 800646a:	06d0      	lsls	r0, r2, #27
 800646c:	bf44      	itt	mi
 800646e:	2320      	movmi	r3, #32
 8006470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006474:	0711      	lsls	r1, r2, #28
 8006476:	bf44      	itt	mi
 8006478:	232b      	movmi	r3, #43	; 0x2b
 800647a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800647e:	f89a 3000 	ldrb.w	r3, [sl]
 8006482:	2b2a      	cmp	r3, #42	; 0x2a
 8006484:	d015      	beq.n	80064b2 <_svfiprintf_r+0xf6>
 8006486:	9a07      	ldr	r2, [sp, #28]
 8006488:	4654      	mov	r4, sl
 800648a:	2000      	movs	r0, #0
 800648c:	f04f 0c0a 	mov.w	ip, #10
 8006490:	4621      	mov	r1, r4
 8006492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006496:	3b30      	subs	r3, #48	; 0x30
 8006498:	2b09      	cmp	r3, #9
 800649a:	d94e      	bls.n	800653a <_svfiprintf_r+0x17e>
 800649c:	b1b0      	cbz	r0, 80064cc <_svfiprintf_r+0x110>
 800649e:	9207      	str	r2, [sp, #28]
 80064a0:	e014      	b.n	80064cc <_svfiprintf_r+0x110>
 80064a2:	eba0 0308 	sub.w	r3, r0, r8
 80064a6:	fa09 f303 	lsl.w	r3, r9, r3
 80064aa:	4313      	orrs	r3, r2
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	46a2      	mov	sl, r4
 80064b0:	e7d2      	b.n	8006458 <_svfiprintf_r+0x9c>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	1d19      	adds	r1, r3, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	9103      	str	r1, [sp, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfbb      	ittet	lt
 80064be:	425b      	neglt	r3, r3
 80064c0:	f042 0202 	orrlt.w	r2, r2, #2
 80064c4:	9307      	strge	r3, [sp, #28]
 80064c6:	9307      	strlt	r3, [sp, #28]
 80064c8:	bfb8      	it	lt
 80064ca:	9204      	strlt	r2, [sp, #16]
 80064cc:	7823      	ldrb	r3, [r4, #0]
 80064ce:	2b2e      	cmp	r3, #46	; 0x2e
 80064d0:	d10c      	bne.n	80064ec <_svfiprintf_r+0x130>
 80064d2:	7863      	ldrb	r3, [r4, #1]
 80064d4:	2b2a      	cmp	r3, #42	; 0x2a
 80064d6:	d135      	bne.n	8006544 <_svfiprintf_r+0x188>
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	1d1a      	adds	r2, r3, #4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	9203      	str	r2, [sp, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bfb8      	it	lt
 80064e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064e8:	3402      	adds	r4, #2
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065b8 <_svfiprintf_r+0x1fc>
 80064f0:	7821      	ldrb	r1, [r4, #0]
 80064f2:	2203      	movs	r2, #3
 80064f4:	4650      	mov	r0, sl
 80064f6:	f7f9 fe9b 	bl	8000230 <memchr>
 80064fa:	b140      	cbz	r0, 800650e <_svfiprintf_r+0x152>
 80064fc:	2340      	movs	r3, #64	; 0x40
 80064fe:	eba0 000a 	sub.w	r0, r0, sl
 8006502:	fa03 f000 	lsl.w	r0, r3, r0
 8006506:	9b04      	ldr	r3, [sp, #16]
 8006508:	4303      	orrs	r3, r0
 800650a:	3401      	adds	r4, #1
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006512:	4826      	ldr	r0, [pc, #152]	; (80065ac <_svfiprintf_r+0x1f0>)
 8006514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006518:	2206      	movs	r2, #6
 800651a:	f7f9 fe89 	bl	8000230 <memchr>
 800651e:	2800      	cmp	r0, #0
 8006520:	d038      	beq.n	8006594 <_svfiprintf_r+0x1d8>
 8006522:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <_svfiprintf_r+0x1f4>)
 8006524:	bb1b      	cbnz	r3, 800656e <_svfiprintf_r+0x1b2>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	3307      	adds	r3, #7
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	3308      	adds	r3, #8
 8006530:	9303      	str	r3, [sp, #12]
 8006532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006534:	4433      	add	r3, r6
 8006536:	9309      	str	r3, [sp, #36]	; 0x24
 8006538:	e767      	b.n	800640a <_svfiprintf_r+0x4e>
 800653a:	fb0c 3202 	mla	r2, ip, r2, r3
 800653e:	460c      	mov	r4, r1
 8006540:	2001      	movs	r0, #1
 8006542:	e7a5      	b.n	8006490 <_svfiprintf_r+0xd4>
 8006544:	2300      	movs	r3, #0
 8006546:	3401      	adds	r4, #1
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	4619      	mov	r1, r3
 800654c:	f04f 0c0a 	mov.w	ip, #10
 8006550:	4620      	mov	r0, r4
 8006552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006556:	3a30      	subs	r2, #48	; 0x30
 8006558:	2a09      	cmp	r2, #9
 800655a:	d903      	bls.n	8006564 <_svfiprintf_r+0x1a8>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0c5      	beq.n	80064ec <_svfiprintf_r+0x130>
 8006560:	9105      	str	r1, [sp, #20]
 8006562:	e7c3      	b.n	80064ec <_svfiprintf_r+0x130>
 8006564:	fb0c 2101 	mla	r1, ip, r1, r2
 8006568:	4604      	mov	r4, r0
 800656a:	2301      	movs	r3, #1
 800656c:	e7f0      	b.n	8006550 <_svfiprintf_r+0x194>
 800656e:	ab03      	add	r3, sp, #12
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	462a      	mov	r2, r5
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <_svfiprintf_r+0x1f8>)
 8006576:	a904      	add	r1, sp, #16
 8006578:	4638      	mov	r0, r7
 800657a:	f7fd f81d 	bl	80035b8 <_printf_float>
 800657e:	1c42      	adds	r2, r0, #1
 8006580:	4606      	mov	r6, r0
 8006582:	d1d6      	bne.n	8006532 <_svfiprintf_r+0x176>
 8006584:	89ab      	ldrh	r3, [r5, #12]
 8006586:	065b      	lsls	r3, r3, #25
 8006588:	f53f af2c 	bmi.w	80063e4 <_svfiprintf_r+0x28>
 800658c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800658e:	b01d      	add	sp, #116	; 0x74
 8006590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006594:	ab03      	add	r3, sp, #12
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	462a      	mov	r2, r5
 800659a:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <_svfiprintf_r+0x1f8>)
 800659c:	a904      	add	r1, sp, #16
 800659e:	4638      	mov	r0, r7
 80065a0:	f7fd faae 	bl	8003b00 <_printf_i>
 80065a4:	e7eb      	b.n	800657e <_svfiprintf_r+0x1c2>
 80065a6:	bf00      	nop
 80065a8:	08012c64 	.word	0x08012c64
 80065ac:	08012c6e 	.word	0x08012c6e
 80065b0:	080035b9 	.word	0x080035b9
 80065b4:	08006305 	.word	0x08006305
 80065b8:	08012c6a 	.word	0x08012c6a

080065bc <_putc_r>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	460d      	mov	r5, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	4606      	mov	r6, r0
 80065c4:	b118      	cbz	r0, 80065ce <_putc_r+0x12>
 80065c6:	6983      	ldr	r3, [r0, #24]
 80065c8:	b90b      	cbnz	r3, 80065ce <_putc_r+0x12>
 80065ca:	f7fe fd11 	bl	8004ff0 <__sinit>
 80065ce:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <_putc_r+0x84>)
 80065d0:	429c      	cmp	r4, r3
 80065d2:	d124      	bne.n	800661e <_putc_r+0x62>
 80065d4:	6874      	ldr	r4, [r6, #4]
 80065d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d8:	07d8      	lsls	r0, r3, #31
 80065da:	d405      	bmi.n	80065e8 <_putc_r+0x2c>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	0599      	lsls	r1, r3, #22
 80065e0:	d402      	bmi.n	80065e8 <_putc_r+0x2c>
 80065e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e4:	f7fe fdb9 	bl	800515a <__retarget_lock_acquire_recursive>
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	da05      	bge.n	80065fe <_putc_r+0x42>
 80065f2:	69a2      	ldr	r2, [r4, #24]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	db1c      	blt.n	8006632 <_putc_r+0x76>
 80065f8:	b2eb      	uxtb	r3, r5
 80065fa:	2b0a      	cmp	r3, #10
 80065fc:	d019      	beq.n	8006632 <_putc_r+0x76>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	6022      	str	r2, [r4, #0]
 8006604:	701d      	strb	r5, [r3, #0]
 8006606:	b2ed      	uxtb	r5, r5
 8006608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d405      	bmi.n	800661a <_putc_r+0x5e>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	059b      	lsls	r3, r3, #22
 8006612:	d402      	bmi.n	800661a <_putc_r+0x5e>
 8006614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006616:	f7fe fda1 	bl	800515c <__retarget_lock_release_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <_putc_r+0x88>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d101      	bne.n	8006628 <_putc_r+0x6c>
 8006624:	68b4      	ldr	r4, [r6, #8]
 8006626:	e7d6      	b.n	80065d6 <_putc_r+0x1a>
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <_putc_r+0x8c>)
 800662a:	429c      	cmp	r4, r3
 800662c:	bf08      	it	eq
 800662e:	68f4      	ldreq	r4, [r6, #12]
 8006630:	e7d1      	b.n	80065d6 <_putc_r+0x1a>
 8006632:	4629      	mov	r1, r5
 8006634:	4622      	mov	r2, r4
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff fbf6 	bl	8005e28 <__swbuf_r>
 800663c:	4605      	mov	r5, r0
 800663e:	e7e3      	b.n	8006608 <_putc_r+0x4c>
 8006640:	08012aa0 	.word	0x08012aa0
 8006644:	08012ac0 	.word	0x08012ac0
 8006648:	08012a80 	.word	0x08012a80

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
