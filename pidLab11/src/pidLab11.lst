
pidLab11.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08007f88 l    d  .rodata	00000000 .rodata
080148c8 l    d  .ARM	00000000 .ARM
080148d0 l    d  .init_array	00000000 .init_array
080148d4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001f8 l    d  .bss	00000000 .bss
20000cf4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
08003704 l       .text	00000000 LoopCopyDataInit
080036fe l       .text	00000000 CopyDataInit
08003716 l       .text	00000000 LoopFillZerobss
08003712 l       .text	00000000 FillZerobss
08003740 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08007f6c l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001f8 l       .bss	00000001 completed.1
080148d4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001fc l       .bss	00000018 object.0
080148d0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000fa8 l     F .text	0000008c StopMotor
08001034 l     F .text	00000028 HAL_TIM_IC_CaptureCallback
0800105c l     F .text	0000004c TerminalRead
080010a8 l     F .text	0000007c Uncompress
08001124 l     F .text	0000005c HAL_NVIC_SetPriority
08001180 l     F .text	00000190 HAL_GPIO_Init
08001310 l     F .text	000002cc HAL_TIM_IRQHandler
080015dc l     F .text	00000164 HAL_TIM_PWM_ConfigChannel
08001740 l     F .text	0000009c TIM_Base_SetConfig
080017dc l     F .text	00000064 HAL_TIMEx_MasterConfigSynchronization.constprop.0
08001840 l     F .text	00000074 HAL_TIM_Base_Init.constprop.0
080018b4 l     F .text	0000009e HAL_TIM_Encoder_Init.constprop.0
08001954 l     F .text	00000054 HAL_InitTick.isra.0
080019a8 l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
08001a70 l     F .text	0000001c GetEncoderValue
08001a90 l     F .text	00000054 GetSpeed
08001ae4 l     F .text	00000024 CmdEncoder2
08001b08 l     F .text	00000044 CmdTasks
08001b4c l     F .text	00000054 DecodeReadRegister
08001ba0 l     F .text	00000020 CmdVersion
08001bc0 l     F .text	00000050 DecodeWriteRegister.isra.0
08001c10 l     F .text	0000002c CmdTest
08001c3c l     F .text	000003ac LoopInit
08001fe8 l     F .text	000002dc EncoderInit
080022c4 l     F .text	00000108 SetSpeed
080023cc l     F .text	00000030 fetch_string_arg
080023fc l     F .text	000000b8 DecodeRegister
080024b4 l     F .text	00000050 DecodePeripheral
08002504 l     F .text	00000060 DecodePrintRegisters
08002564 l     F .text	00000058 DecodePrintPeripherals.constprop.0
080025bc l     F .text	00000204 TaskInput
080027c0 l     F .text	0000003c fetch_uint32_arg
080027fc l     F .text	00000058 CmdLed
08002854 l     F .text	00000070 CmdR
080028c4 l     F .text	0000001e CmdW
080028e4 l     F .text	000000f8 CmdDump
080029dc l     F .text	00000074 CmdSend
08002a50 l     F .text	00000060 CmdReceive
08002ab0 l     F .text	00000044 CmdTransparent
08002af4 l     F .text	00000284 CmdDecode
08002d78 l     F .text	0000003c PolledPrintf
08002db4 l     F .text	00000068 CmdStats
20000214 l     O .bss	00000004 AccumTicks
20000218 l     O .bss	00000008 D
20000220 l     O .bss	00000008 I
20000228 l     O .bss	00000004 LedState.0
20000230 l     O .bss	00000008 P
20000238 l     O .bss	00000834 TerminalState
20000a6c l     O .bss	00000004 address.1
20000a70 l     O .bss	00000014 buf.0
20000a84 l     O .bss	00000004 cmdArgs
20000a88 l     O .bss	00000004 count
20000a8c l     O .bss	00000004 count.3
20000a90 l     O .bss	00000004 crReceived
20000a94 l     O .bss	00000004 encoderCurrent
20000a98 l     O .bss	00000004 encoderPrevious
20000aa0 l     O .bss	00000008 errorCurrent
20000aa8 l     O .bss	00000008 errorD
20000ab0 l     O .bss	00000008 errorI
20000ab8 l     O .bss	00000004 heap_end.0
20000abc l     O .bss	0000000c hiwdg
20000ac8 l     O .bss	00000048 htim2
20000b10 l     O .bss	00000048 htim3
20000b58 l     O .bss	00000044 huart2
20000b9c l     O .bss	00000050 input
20000bec l     O .bss	00000050 input_b
20000c3c l     O .bss	00000004 pwmStatus
20000c40 l     O .bss	00000004 saved.1
20000c48 l     O .bss	00000008 targetRPM
20000c50 l     O .bss	00000048 tim1
20000c98 l     O .bss	00000048 tim3
20000ce0 l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000002 currentPWM
20000014 l     O .data	00000004 printPrompt.4
20000018 l     O .data	00000004 uwTickPrio
0800bbe0 l     O .rodata	00000070 ADC1_CR1_fields
0800bc50 l     O .rodata	00000060 ADC1_CR2_fields
0800bcb0 l     O .rodata	00000008 ADC1_DR_fields
0800bcb8 l     O .rodata	00000008 ADC1_HTR_fields
0800bcc0 l     O .rodata	00000008 ADC1_JDR1_fields
0800bcc8 l     O .rodata	00000008 ADC1_JDR2_fields
0800bcd0 l     O .rodata	00000008 ADC1_JDR3_fields
0800bcd8 l     O .rodata	00000008 ADC1_JDR4_fields
0800bce0 l     O .rodata	00000008 ADC1_JOFR1_fields
0800bce8 l     O .rodata	00000008 ADC1_JOFR2_fields
0800bcf0 l     O .rodata	00000008 ADC1_JOFR3_fields
0800bcf8 l     O .rodata	00000008 ADC1_JOFR4_fields
0800bd00 l     O .rodata	00000028 ADC1_JSQR_fields
0800bd28 l     O .rodata	00000008 ADC1_LTR_fields
0800bd30 l     O .rodata	00000008 ADC1_SMPR1_fields
0800bd38 l     O .rodata	00000008 ADC1_SMPR2_fields
0800bd40 l     O .rodata	00000028 ADC1_SQR1_fields
0800bd68 l     O .rodata	00000030 ADC1_SQR2_fields
0800bd98 l     O .rodata	00000030 ADC1_SQR3_fields
0800bdc8 l     O .rodata	00000030 ADC1_SR_fields
0800bdf8 l     O .rodata	00000140 ADC1_registers
0800bf38 l     O .rodata	00000030 ADC_Common_CCR_fields
0800bf68 l     O .rodata	00000090 ADC_Common_CSR_fields
0800bff8 l     O .rodata	00000020 ADC_Common_registers
0800c018 l     O .rodata	00000010 AHBPrescTable
0800c028 l     O .rodata	00000008 APBPrescTable
0800c030 l     O .rodata	00000008 CRC_CR_fields
0800c038 l     O .rodata	00000008 CRC_DR_fields
0800c040 l     O .rodata	00000008 CRC_IDR_fields
0800c048 l     O .rodata	00000030 CRC_registers
0800c078 l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
0800c0c8 l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800c0e8 l     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800c110 l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
0800c120 l     O .rodata	00000040 DBG_registers
0800c160 l     O .rodata	000000a0 DMA2_HIFCR_fields
0800c200 l     O .rodata	000000a0 DMA2_HISR_fields
0800c2a0 l     O .rodata	000000a0 DMA2_LIFCR_fields
0800c340 l     O .rodata	000000a0 DMA2_LISR_fields
0800c3e0 l     O .rodata	00000098 DMA2_S0CR_fields
0800c478 l     O .rodata	00000020 DMA2_S0FCR_fields
0800c498 l     O .rodata	00000008 DMA2_S0M0AR_fields
0800c4a0 l     O .rodata	00000008 DMA2_S0M1AR_fields
0800c4a8 l     O .rodata	00000008 DMA2_S0NDTR_fields
0800c4b0 l     O .rodata	00000008 DMA2_S0PAR_fields
0800c4b8 l     O .rodata	000000a0 DMA2_S1CR_fields
0800c558 l     O .rodata	00000020 DMA2_S1FCR_fields
0800c578 l     O .rodata	00000008 DMA2_S1M0AR_fields
0800c580 l     O .rodata	00000008 DMA2_S1M1AR_fields
0800c588 l     O .rodata	00000008 DMA2_S1NDTR_fields
0800c590 l     O .rodata	00000008 DMA2_S1PAR_fields
0800c598 l     O .rodata	000000a0 DMA2_S2CR_fields
0800c638 l     O .rodata	00000020 DMA2_S2FCR_fields
0800c658 l     O .rodata	00000008 DMA2_S2M0AR_fields
0800c660 l     O .rodata	00000008 DMA2_S2M1AR_fields
0800c668 l     O .rodata	00000008 DMA2_S2NDTR_fields
0800c670 l     O .rodata	00000008 DMA2_S2PAR_fields
0800c678 l     O .rodata	000000a0 DMA2_S3CR_fields
0800c718 l     O .rodata	00000020 DMA2_S3FCR_fields
0800c738 l     O .rodata	00000008 DMA2_S3M0AR_fields
0800c740 l     O .rodata	00000008 DMA2_S3M1AR_fields
0800c748 l     O .rodata	00000008 DMA2_S3NDTR_fields
0800c750 l     O .rodata	00000008 DMA2_S3PAR_fields
0800c758 l     O .rodata	000000a0 DMA2_S4CR_fields
0800c7f8 l     O .rodata	00000020 DMA2_S4FCR_fields
0800c818 l     O .rodata	00000008 DMA2_S4M0AR_fields
0800c820 l     O .rodata	00000008 DMA2_S4M1AR_fields
0800c828 l     O .rodata	00000008 DMA2_S4NDTR_fields
0800c830 l     O .rodata	00000008 DMA2_S4PAR_fields
0800c838 l     O .rodata	000000a0 DMA2_S5CR_fields
0800c8d8 l     O .rodata	00000020 DMA2_S5FCR_fields
0800c8f8 l     O .rodata	00000008 DMA2_S5M0AR_fields
0800c900 l     O .rodata	00000008 DMA2_S5M1AR_fields
0800c908 l     O .rodata	00000008 DMA2_S5NDTR_fields
0800c910 l     O .rodata	00000008 DMA2_S5PAR_fields
0800c918 l     O .rodata	000000a0 DMA2_S6CR_fields
0800c9b8 l     O .rodata	00000020 DMA2_S6FCR_fields
0800c9d8 l     O .rodata	00000008 DMA2_S6M0AR_fields
0800c9e0 l     O .rodata	00000008 DMA2_S6M1AR_fields
0800c9e8 l     O .rodata	00000008 DMA2_S6NDTR_fields
0800c9f0 l     O .rodata	00000008 DMA2_S6PAR_fields
0800c9f8 l     O .rodata	000000a0 DMA2_S7CR_fields
0800ca98 l     O .rodata	00000020 DMA2_S7FCR_fields
0800cab8 l     O .rodata	00000008 DMA2_S7M0AR_fields
0800cac0 l     O .rodata	00000008 DMA2_S7M1AR_fields
0800cac8 l     O .rodata	00000008 DMA2_S7NDTR_fields
0800cad0 l     O .rodata	00000008 DMA2_S7PAR_fields
0800cad8 l     O .rodata	00000340 DMA2_registers
0800ce18 l     O .rodata	000000b8 EXTI_EMR_fields
0800ced0 l     O .rodata	000000b8 EXTI_FTSR_fields
0800cf88 l     O .rodata	000000b8 EXTI_IMR_fields
0800d040 l     O .rodata	000000b8 EXTI_PR_fields
0800d0f8 l     O .rodata	000000b8 EXTI_RTSR_fields
0800d1b0 l     O .rodata	000000b8 EXTI_SWIER_fields
0800d268 l     O .rodata	00000060 EXTI_registers
0800d2c8 l     O .rodata	00000030 FLASH_ACR_fields
0800d2f8 l     O .rodata	00000048 FLASH_CR_fields
0800d340 l     O .rodata	00000008 FLASH_KEYR_fields
0800d348 l     O .rodata	00000040 FLASH_OPTCR_fields
0800d388 l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800d390 l     O .rodata	00000038 FLASH_SR_fields
0800d3c8 l     O .rodata	00000060 FLASH_registers
0800d428 l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800d430 l     O .rodata	00000010 FPU_CPACR_registers
0800d440 l     O .rodata	00000008 FPU_FPCAR_fields
0800d448 l     O .rodata	00000048 FPU_FPCCR_fields
0800d490 l     O .rodata	00000070 FPU_FPSCR_fields
0800d500 l     O .rodata	00000030 FPU_registers
0800d530 l     O .rodata	00000040 GPIOA_AFRH_fields
0800d570 l     O .rodata	00000040 GPIOA_AFRL_fields
0800d5b0 l     O .rodata	00000100 GPIOA_BSRR_fields
0800d6b0 l     O .rodata	00000080 GPIOA_IDR_fields
0800d730 l     O .rodata	00000088 GPIOA_LCKR_fields
0800d7b8 l     O .rodata	00000080 GPIOA_MODER_fields
0800d838 l     O .rodata	00000080 GPIOA_ODR_fields
0800d8b8 l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800d938 l     O .rodata	00000080 GPIOA_OTYPER_fields
0800d9b8 l     O .rodata	00000080 GPIOA_PUPDR_fields
0800da38 l     O .rodata	000000a0 GPIOA_registers
0800dad8 l     O .rodata	00000040 GPIOB_AFRH_fields
0800db18 l     O .rodata	00000040 GPIOB_AFRL_fields
0800db58 l     O .rodata	00000100 GPIOB_BSRR_fields
0800dc58 l     O .rodata	00000080 GPIOB_IDR_fields
0800dcd8 l     O .rodata	00000088 GPIOB_LCKR_fields
0800dd60 l     O .rodata	00000080 GPIOB_MODER_fields
0800dde0 l     O .rodata	00000080 GPIOB_ODR_fields
0800de60 l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800dee0 l     O .rodata	00000080 GPIOB_OTYPER_fields
0800df60 l     O .rodata	00000080 GPIOB_PUPDR_fields
0800dfe0 l     O .rodata	000000a0 GPIOB_registers
0800e080 l     O .rodata	00000040 GPIOH_AFRH_fields
0800e0c0 l     O .rodata	00000040 GPIOH_AFRL_fields
0800e100 l     O .rodata	00000100 GPIOH_BSRR_fields
0800e200 l     O .rodata	00000080 GPIOH_IDR_fields
0800e280 l     O .rodata	00000088 GPIOH_LCKR_fields
0800e308 l     O .rodata	00000080 GPIOH_MODER_fields
0800e388 l     O .rodata	00000080 GPIOH_ODR_fields
0800e408 l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800e488 l     O .rodata	00000080 GPIOH_OTYPER_fields
0800e508 l     O .rodata	00000080 GPIOH_PUPDR_fields
0800e588 l     O .rodata	000000a0 GPIOH_registers
0800e628 l     O .rodata	00000018 I2C3_CCR_fields
0800e640 l     O .rodata	00000070 I2C3_CR1_fields
0800e6b0 l     O .rodata	00000030 I2C3_CR2_fields
0800e6e0 l     O .rodata	00000008 I2C3_DR_fields
0800e6e8 l     O .rodata	00000020 I2C3_OAR1_fields
0800e708 l     O .rodata	00000010 I2C3_OAR2_fields
0800e718 l     O .rodata	00000070 I2C3_SR1_fields
0800e788 l     O .rodata	00000040 I2C3_SR2_fields
0800e7c8 l     O .rodata	00000008 I2C3_TRISE_fields
0800e7d0 l     O .rodata	00000090 I2C3_registers
0800e860 l     O .rodata	00000070 I2S2ext_CR1_fields
0800e8d0 l     O .rodata	00000038 I2S2ext_CR2_fields
0800e908 l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800e910 l     O .rodata	00000008 I2S2ext_DR_fields
0800e918 l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800e958 l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800e970 l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800e978 l     O .rodata	00000048 I2S2ext_SR_fields
0800e9c0 l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800e9c8 l     O .rodata	00000090 I2S2ext_registers
0800ea58 l     O .rodata	00000008 IWDG_KR_fields
0800ea60 l     O .rodata	00000008 IWDG_PR_fields
0800ea68 l     O .rodata	00000008 IWDG_RLR_fields
0800ea70 l     O .rodata	00000010 IWDG_SR_fields
0800ea80 l     O .rodata	00000040 IWDG_registers
0800eac0 l     O .rodata	00000194 InterruptNames
0800ec54 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800ec6c l     O .rodata	00000048 MPU_MPU_RASR_fields
0800ecb4 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800eccc l     O .rodata	00000008 MPU_MPU_RNR_fields
0800ecd4 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800ecec l     O .rodata	00000050 MPU_registers
0800ed3c l     O .rodata	00000008 NVIC_IABR0_fields
0800ed44 l     O .rodata	00000008 NVIC_IABR1_fields
0800ed4c l     O .rodata	00000008 NVIC_IABR2_fields
0800ed54 l     O .rodata	00000008 NVIC_ICER0_fields
0800ed5c l     O .rodata	00000008 NVIC_ICER1_fields
0800ed64 l     O .rodata	00000008 NVIC_ICER2_fields
0800ed6c l     O .rodata	00000008 NVIC_ICPR0_fields
0800ed74 l     O .rodata	00000008 NVIC_ICPR1_fields
0800ed7c l     O .rodata	00000008 NVIC_ICPR2_fields
0800ed84 l     O .rodata	00000020 NVIC_IPR0_fields
0800eda4 l     O .rodata	00000020 NVIC_IPR10_fields
0800edc4 l     O .rodata	00000020 NVIC_IPR11_fields
0800ede4 l     O .rodata	00000020 NVIC_IPR12_fields
0800ee04 l     O .rodata	00000020 NVIC_IPR13_fields
0800ee24 l     O .rodata	00000020 NVIC_IPR14_fields
0800ee44 l     O .rodata	00000020 NVIC_IPR15_fields
0800ee64 l     O .rodata	00000020 NVIC_IPR16_fields
0800ee84 l     O .rodata	00000020 NVIC_IPR17_fields
0800eea4 l     O .rodata	00000020 NVIC_IPR18_fields
0800eec4 l     O .rodata	00000020 NVIC_IPR19_fields
0800eee4 l     O .rodata	00000020 NVIC_IPR1_fields
0800ef04 l     O .rodata	00000020 NVIC_IPR2_fields
0800ef24 l     O .rodata	00000020 NVIC_IPR3_fields
0800ef44 l     O .rodata	00000020 NVIC_IPR4_fields
0800ef64 l     O .rodata	00000020 NVIC_IPR5_fields
0800ef84 l     O .rodata	00000020 NVIC_IPR6_fields
0800efa4 l     O .rodata	00000020 NVIC_IPR7_fields
0800efc4 l     O .rodata	00000020 NVIC_IPR8_fields
0800efe4 l     O .rodata	00000020 NVIC_IPR9_fields
0800f004 l     O .rodata	00000008 NVIC_ISER0_fields
0800f00c l     O .rodata	00000008 NVIC_ISER1_fields
0800f014 l     O .rodata	00000008 NVIC_ISER2_fields
0800f01c l     O .rodata	00000008 NVIC_ISPR0_fields
0800f024 l     O .rodata	00000008 NVIC_ISPR1_fields
0800f02c l     O .rodata	00000008 NVIC_ISPR2_fields
0800f034 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800f03c l     O .rodata	00000010 NVIC_STIR_registers
0800f04c l     O .rodata	00000230 NVIC_registers
0800f27c l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800f2e4 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800f34c l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800f3b4 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800f3bc l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800f3ec l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800f41c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800f44c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800f47c l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800f48c l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800f4a4 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800f4bc l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800f4d4 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800f524 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800f58c l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800f5f4 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800f65c l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800f684 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800f6ac l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800f6d4 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800f6fc l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800f714 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800f72c l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800f744 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800f75c l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800f764 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800f76c l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800f774 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800f77c l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800f784 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800f78c l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800f79c l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800f7ac l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800f7cc l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800f81c l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800f86c l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800f89c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800f8bc l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800f8dc l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800fb3c l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800fb44 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800fb54 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800fb64 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800fb74 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800fb8c l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800fbac l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800fc74 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800fd3c l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800fd4c l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800fd5c l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800fd74 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800fdc4 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800fdf4 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800fe2c l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800fe34 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800fe5c l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800fe84 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800fec4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800fed4 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
08010004 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
08010054 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
080100a4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
080100f4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
08010144 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
08010194 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
080101e4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
08010234 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
08010284 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
08010294 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
080102dc l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
08010324 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
0801036c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
080103b4 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
080103fc l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
08010444 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0801048c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
080104d4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
08010524 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
08010574 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
080105c4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
08010614 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
08010664 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
080106b4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
08010704 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
08010754 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
0801076c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
08010784 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0801079c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
080107b4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
080107cc l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
080107e4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
080107fc l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
08010814 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
08010824 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
0801088c l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
080108a4 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
080108ac l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
080108b4 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
080108bc l     O .rodata	00000270 OTG_FS_HOST_registers
08010b2c l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
08010b44 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
08010b54 l     O .rodata	00000050 PWR_CR_fields
08010ba4 l     O .rodata	00000038 PWR_CSR_fields
08010bdc l     O .rodata	00000020 PWR_registers
08010bfc l     O .rodata	00000380 Peripherals
08013294 l     O .rodata	00000150 TIM2_registers
08013734 l     O .rodata	00000140 TIM3_registers
08013bcc l     O .rodata	00000150 TIM5_registers
08011b1c l     O .rodata	00000270 RTC_registers
080141f4 l     O .rodata	00000030 WWDG_registers
0801412c l     O .rodata	00000070 USART1_registers
08012ddc l     O .rodata	00000160 TIM1_registers
08012414 l     O .rodata	00000120 SDIO_registers
0801265c l     O .rodata	00000070 SYSCFG_registers
08013ea4 l     O .rodata	000000e0 TIM9_registers
0801279c l     O .rodata	000000b0 TIM10_registers
08012924 l     O .rodata	000000c0 TIM11_registers
0801156c l     O .rodata	00000140 RCC_registers
08011db4 l     O .rodata	00000010 SCB_ACTRL_registers
0801257c l     O .rodata	00000040 STK_registers
08012014 l     O .rodata	000000f0 SCB_registers
08010f7c l     O .rodata	00000048 RCC_AHB1ENR_fields
08010fc4 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0801101c l     O .rodata	00000048 RCC_AHB1RSTR_fields
08011064 l     O .rodata	00000008 RCC_AHB2ENR_fields
0801106c l     O .rodata	00000008 RCC_AHB2LPENR_fields
08011074 l     O .rodata	00000008 RCC_AHB2RSTR_fields
0801107c l     O .rodata	00000060 RCC_APB1ENR_fields
080110dc l     O .rodata	00000060 RCC_APB1LPENR_fields
0801113c l     O .rodata	00000060 RCC_APB1RSTR_fields
0801119c l     O .rodata	00000058 RCC_APB2ENR_fields
080111f4 l     O .rodata	00000058 RCC_APB2LPENR_fields
0801124c l     O .rodata	00000050 RCC_APB2RSTR_fields
0801129c l     O .rodata	00000038 RCC_BDCR_fields
080112d4 l     O .rodata	00000068 RCC_CFGR_fields
0801133c l     O .rodata	000000a0 RCC_CIR_fields
080113dc l     O .rodata	00000060 RCC_CR_fields
0801143c l     O .rodata	00000050 RCC_CSR_fields
0801148c l     O .rodata	000000b0 RCC_PLLCFGR_fields
0801153c l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0801154c l     O .rodata	00000020 RCC_SSCGR_fields
080116ac l     O .rodata	00000070 RTC_ALRMAR_fields
0801171c l     O .rodata	00000010 RTC_ALRMASSR_fields
0801172c l     O .rodata	00000070 RTC_ALRMBR_fields
0801179c l     O .rodata	00000010 RTC_ALRMBSSR_fields
080117ac l     O .rodata	00000008 RTC_BKP0R_fields
080117b4 l     O .rodata	00000008 RTC_BKP10R_fields
080117bc l     O .rodata	00000008 RTC_BKP11R_fields
080117c4 l     O .rodata	00000008 RTC_BKP12R_fields
080117cc l     O .rodata	00000008 RTC_BKP13R_fields
080117d4 l     O .rodata	00000008 RTC_BKP14R_fields
080117dc l     O .rodata	00000008 RTC_BKP15R_fields
080117e4 l     O .rodata	00000008 RTC_BKP16R_fields
080117ec l     O .rodata	00000008 RTC_BKP17R_fields
080117f4 l     O .rodata	00000008 RTC_BKP18R_fields
080117fc l     O .rodata	00000008 RTC_BKP19R_fields
08011804 l     O .rodata	00000008 RTC_BKP1R_fields
0801180c l     O .rodata	00000008 RTC_BKP2R_fields
08011814 l     O .rodata	00000008 RTC_BKP3R_fields
0801181c l     O .rodata	00000008 RTC_BKP4R_fields
08011824 l     O .rodata	00000008 RTC_BKP5R_fields
0801182c l     O .rodata	00000008 RTC_BKP6R_fields
08011834 l     O .rodata	00000008 RTC_BKP7R_fields
0801183c l     O .rodata	00000008 RTC_BKP8R_fields
08011844 l     O .rodata	00000008 RTC_BKP9R_fields
0801184c l     O .rodata	00000010 RTC_CALIBR_fields
0801185c l     O .rodata	00000020 RTC_CALR_fields
0801187c l     O .rodata	000000a8 RTC_CR_fields
08011924 l     O .rodata	00000038 RTC_DR_fields
0801195c l     O .rodata	00000080 RTC_ISR_fields
080119dc l     O .rodata	00000010 RTC_PRER_fields
080119ec l     O .rodata	00000010 RTC_SHIFTR_fields
080119fc l     O .rodata	00000008 RTC_SSR_fields
08011a04 l     O .rodata	00000068 RTC_TAFCR_fields
08011a6c l     O .rodata	00000038 RTC_TR_fields
08011aa4 l     O .rodata	00000028 RTC_TSDR_fields
08011acc l     O .rodata	00000008 RTC_TSSSR_fields
08011ad4 l     O .rodata	00000038 RTC_TSTR_fields
08011b0c l     O .rodata	00000008 RTC_WPR_fields
08011b14 l     O .rodata	00000008 RTC_WUTR_fields
08011d8c l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
08011dc4 l     O .rodata	00000008 SCB_AFSR_fields
08011dcc l     O .rodata	00000030 SCB_AIRCR_fields
08011dfc l     O .rodata	00000008 SCB_BFAR_fields
08011e04 l     O .rodata	00000030 SCB_CCR_fields
08011e34 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
08011ec4 l     O .rodata	00000028 SCB_CPUID_fields
08011eec l     O .rodata	00000018 SCB_HFSR_fields
08011f04 l     O .rodata	00000048 SCB_ICSR_fields
08011f4c l     O .rodata	00000008 SCB_MMFAR_fields
08011f54 l     O .rodata	00000018 SCB_SCR_fields
08011f6c l     O .rodata	00000070 SCB_SHCRS_fields
08011fdc l     O .rodata	00000018 SCB_SHPR1_fields
08011ff4 l     O .rodata	00000008 SCB_SHPR2_fields
08011ffc l     O .rodata	00000010 SCB_SHPR3_fields
0801200c l     O .rodata	00000008 SCB_VTOR_fields
08012104 l     O .rodata	00000008 SDIO_ARG_fields
0801210c l     O .rodata	00000038 SDIO_CLKCR_fields
08012144 l     O .rodata	00000048 SDIO_CMD_fields
0801218c l     O .rodata	00000008 SDIO_DCOUNT_fields
08012194 l     O .rodata	00000048 SDIO_DCTRL_fields
080121dc l     O .rodata	00000008 SDIO_DLEN_fields
080121e4 l     O .rodata	00000008 SDIO_DTIMER_fields
080121ec l     O .rodata	00000008 SDIO_FIFOCNT_fields
080121f4 l     O .rodata	00000008 SDIO_FIFO_fields
080121fc l     O .rodata	00000068 SDIO_ICR_fields
08012264 l     O .rodata	000000c0 SDIO_MASK_fields
08012324 l     O .rodata	00000008 SDIO_POWER_fields
0801232c l     O .rodata	00000008 SDIO_RESP1_fields
08012334 l     O .rodata	00000008 SDIO_RESP2_fields
0801233c l     O .rodata	00000008 SDIO_RESP3_fields
08012344 l     O .rodata	00000008 SDIO_RESP4_fields
0801234c l     O .rodata	00000008 SDIO_RESPCMD_fields
08012354 l     O .rodata	000000c0 SDIO_STA_fields
08012534 l     O .rodata	00000018 STK_CALIB_fields
0801254c l     O .rodata	00000020 STK_CTRL_fields
0801256c l     O .rodata	00000008 STK_LOAD_fields
08012574 l     O .rodata	00000008 STK_VAL_fields
080125bc l     O .rodata	00000010 SYSCFG_CMPCR_fields
080125cc l     O .rodata	00000020 SYSCFG_EXTICR1_fields
080125ec l     O .rodata	00000020 SYSCFG_EXTICR2_fields
0801260c l     O .rodata	00000020 SYSCFG_EXTICR3_fields
0801262c l     O .rodata	00000020 SYSCFG_EXTICR4_fields
0801264c l     O .rodata	00000008 SYSCFG_MEMRM_fields
08012654 l     O .rodata	00000008 SYSCFG_PMC_fields
080126cc l     O .rodata	00000008 TIM10_ARR_fields
080126d4 l     O .rodata	00000018 TIM10_CCER_fields
080126ec l     O .rodata	00000018 TIM10_CCMR1_Input_fields
08012704 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
08012724 l     O .rodata	00000008 TIM10_CCR1_fields
0801272c l     O .rodata	00000008 TIM10_CNT_fields
08012734 l     O .rodata	00000028 TIM10_CR1_fields
0801275c l     O .rodata	00000010 TIM10_DIER_fields
0801276c l     O .rodata	00000010 TIM10_EGR_fields
0801277c l     O .rodata	00000008 TIM10_PSC_fields
08012784 l     O .rodata	00000018 TIM10_SR_fields
0801284c l     O .rodata	00000008 TIM11_ARR_fields
08012854 l     O .rodata	00000018 TIM11_CCER_fields
0801286c l     O .rodata	00000018 TIM11_CCMR1_Input_fields
08012884 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
080128a4 l     O .rodata	00000008 TIM11_CCR1_fields
080128ac l     O .rodata	00000008 TIM11_CNT_fields
080128b4 l     O .rodata	00000028 TIM11_CR1_fields
080128dc l     O .rodata	00000010 TIM11_DIER_fields
080128ec l     O .rodata	00000010 TIM11_EGR_fields
080128fc l     O .rodata	00000008 TIM11_OR_fields
08012904 l     O .rodata	00000008 TIM11_PSC_fields
0801290c l     O .rodata	00000018 TIM11_SR_fields
080129e4 l     O .rodata	00000008 TIM1_ARR_fields
080129ec l     O .rodata	00000040 TIM1_BDTR_fields
08012a2c l     O .rodata	00000070 TIM1_CCER_fields
08012a9c l     O .rodata	00000030 TIM1_CCMR1_Input_fields
08012acc l     O .rodata	00000050 TIM1_CCMR1_Output_fields
08012b1c l     O .rodata	00000030 TIM1_CCMR2_Input_fields
08012b4c l     O .rodata	00000050 TIM1_CCMR2_Output_fields
08012b9c l     O .rodata	00000008 TIM1_CCR1_fields
08012ba4 l     O .rodata	00000008 TIM1_CCR2_fields
08012bac l     O .rodata	00000008 TIM1_CCR3_fields
08012bb4 l     O .rodata	00000008 TIM1_CCR4_fields
08012bbc l     O .rodata	00000008 TIM1_CNT_fields
08012bc4 l     O .rodata	00000040 TIM1_CR1_fields
08012c04 l     O .rodata	00000060 TIM1_CR2_fields
08012c64 l     O .rodata	00000010 TIM1_DCR_fields
08012c74 l     O .rodata	00000078 TIM1_DIER_fields
08012cec l     O .rodata	00000008 TIM1_DMAR_fields
08012cf4 l     O .rodata	00000040 TIM1_EGR_fields
08012d34 l     O .rodata	00000008 TIM1_PSC_fields
08012d3c l     O .rodata	00000008 TIM1_RCR_fields
08012d44 l     O .rodata	00000038 TIM1_SMCR_fields
08012d7c l     O .rodata	00000060 TIM1_SR_fields
08012f3c l     O .rodata	00000010 TIM2_ARR_fields
08012f4c l     O .rodata	00000060 TIM2_CCER_fields
08012fac l     O .rodata	00000030 TIM2_CCMR1_Input_fields
08012fdc l     O .rodata	00000050 TIM2_CCMR1_Output_fields
0801302c l     O .rodata	00000030 TIM2_CCMR2_Input_fields
0801305c l     O .rodata	00000050 TIM2_CCMR2_Output_fields
080130ac l     O .rodata	00000010 TIM2_CCR1_fields
080130bc l     O .rodata	00000010 TIM2_CCR2_fields
080130cc l     O .rodata	00000010 TIM2_CCR3_fields
080130dc l     O .rodata	00000010 TIM2_CCR4_fields
080130ec l     O .rodata	00000010 TIM2_CNT_fields
080130fc l     O .rodata	00000040 TIM2_CR1_fields
0801313c l     O .rodata	00000018 TIM2_CR2_fields
08013154 l     O .rodata	00000010 TIM2_DCR_fields
08013164 l     O .rodata	00000060 TIM2_DIER_fields
080131c4 l     O .rodata	00000008 TIM2_DMAR_fields
080131cc l     O .rodata	00000030 TIM2_EGR_fields
080131fc l     O .rodata	00000008 TIM2_OR_fields
08013204 l     O .rodata	00000008 TIM2_PSC_fields
0801320c l     O .rodata	00000038 TIM2_SMCR_fields
08013244 l     O .rodata	00000050 TIM2_SR_fields
080133e4 l     O .rodata	00000010 TIM3_ARR_fields
080133f4 l     O .rodata	00000060 TIM3_CCER_fields
08013454 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
08013484 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
080134d4 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
08013504 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
08013554 l     O .rodata	00000010 TIM3_CCR1_fields
08013564 l     O .rodata	00000010 TIM3_CCR2_fields
08013574 l     O .rodata	00000010 TIM3_CCR3_fields
08013584 l     O .rodata	00000010 TIM3_CCR4_fields
08013594 l     O .rodata	00000010 TIM3_CNT_fields
080135a4 l     O .rodata	00000040 TIM3_CR1_fields
080135e4 l     O .rodata	00000018 TIM3_CR2_fields
080135fc l     O .rodata	00000010 TIM3_DCR_fields
0801360c l     O .rodata	00000060 TIM3_DIER_fields
0801366c l     O .rodata	00000008 TIM3_DMAR_fields
08013674 l     O .rodata	00000030 TIM3_EGR_fields
080136a4 l     O .rodata	00000008 TIM3_PSC_fields
080136ac l     O .rodata	00000038 TIM3_SMCR_fields
080136e4 l     O .rodata	00000050 TIM3_SR_fields
08013874 l     O .rodata	00000010 TIM5_ARR_fields
08013884 l     O .rodata	00000060 TIM5_CCER_fields
080138e4 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
08013914 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
08013964 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
08013994 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
080139e4 l     O .rodata	00000010 TIM5_CCR1_fields
080139f4 l     O .rodata	00000010 TIM5_CCR2_fields
08013a04 l     O .rodata	00000010 TIM5_CCR3_fields
08013a14 l     O .rodata	00000010 TIM5_CCR4_fields
08013a24 l     O .rodata	00000010 TIM5_CNT_fields
08013a34 l     O .rodata	00000040 TIM5_CR1_fields
08013a74 l     O .rodata	00000018 TIM5_CR2_fields
08013a8c l     O .rodata	00000010 TIM5_DCR_fields
08013a9c l     O .rodata	00000060 TIM5_DIER_fields
08013afc l     O .rodata	00000008 TIM5_DMAR_fields
08013b04 l     O .rodata	00000030 TIM5_EGR_fields
08013b34 l     O .rodata	00000008 TIM5_OR_fields
08013b3c l     O .rodata	00000008 TIM5_PSC_fields
08013b44 l     O .rodata	00000038 TIM5_SMCR_fields
08013b7c l     O .rodata	00000050 TIM5_SR_fields
08013d1c l     O .rodata	00000008 TIM9_ARR_fields
08013d24 l     O .rodata	00000030 TIM9_CCER_fields
08013d54 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
08013d84 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
08013dc4 l     O .rodata	00000008 TIM9_CCR1_fields
08013dcc l     O .rodata	00000008 TIM9_CCR2_fields
08013dd4 l     O .rodata	00000008 TIM9_CNT_fields
08013ddc l     O .rodata	00000030 TIM9_CR1_fields
08013e0c l     O .rodata	00000008 TIM9_CR2_fields
08013e14 l     O .rodata	00000020 TIM9_DIER_fields
08013e34 l     O .rodata	00000020 TIM9_EGR_fields
08013e54 l     O .rodata	00000008 TIM9_PSC_fields
08013e5c l     O .rodata	00000018 TIM9_SMCR_fields
08013e74 l     O .rodata	00000030 TIM9_SR_fields
08013f84 l     O .rodata	00000010 TerminalInfo
08013f94 l     O .rodata	00000010 USART1_BRR_fields
08013fa4 l     O .rodata	00000078 USART1_CR1_fields
0801401c l     O .rodata	00000048 USART1_CR2_fields
08014064 l     O .rodata	00000060 USART1_CR3_fields
080140c4 l     O .rodata	00000008 USART1_DR_fields
080140cc l     O .rodata	00000010 USART1_GTPR_fields
080140dc l     O .rodata	00000050 USART1_SR_fields
0801419c l     O .rodata	00000019 VersionBuildDateString
080141b5 l     O .rodata	00000006 VersionBuildUser
080141bc l     O .rodata	00000020 WWDG_CFR_fields
080141dc l     O .rodata	00000010 WWDG_CR_fields
080141ec l     O .rodata	00000008 WWDG_SR_fields
08014224 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
0801422a l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtod.c
0800420c l     F .text	00000038 sulp
08014378 l     O .rodata	00000014 fpi.1
0801438c l     O .rodata	00000014 fpinan.0
080143a0 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08004f24 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
08005058 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005ed0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
080060de l     F .text	000000a4 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
08006638 l     F .text	00000024 L_shift
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
080147a0 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080073d0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000020 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 lnumeric.c
20000080 l     O .data	00000002 numempty
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00005bb6 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00005e0f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00005f8e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
0000704a l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00007fa6 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
0000a247 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
0000ae9e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
0000b067 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
0000b65c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
0000b8f4 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
0000c96b l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
0000cd24 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
0000d015 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
0000d2e1 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
0000d855 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
0000e3e7 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
0000e493 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
0000f296 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
0000f79d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
0000ffe8 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
0001075b l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00011288 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
0001287c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00012f4e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
000130fd l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
0001537f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
000164f6 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080148d4 l       .init_array	00000000 __init_array_end
080148d0 l       .init_array	00000000 __preinit_array_end
080148d0 l       .init_array	00000000 __init_array_start
080148d0 l       .init_array	00000000 __preinit_array_start
08003740  w    F .text	00000006 RTC_Alarm_IRQHandler
08007a14 g     F .text	00000010 _malloc_usable_size_r
080037ac g     F .text	000000c4 __cvt
08003740  w    F .text	00000006 EXTI2_IRQHandler
08007a54 g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
08007224 g     F .text	00000042 __any_on
08002e86 g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
08007ba0 g     F .text	00000010 strcpy
08002ee0 g     F .text	00000004 _getpid
08007a80 g     F .text	000000dc _puts_r
08000a7c g     F .text	0000007a .hidden __cmpdf2
08002e8a g     F .text	00000004 _lseek_r
080036b8 g     F .text	00000002 DebugMon_Handler
080147d8 g     O .rodata	0000000c CmdTestE
08003740  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
0001075b  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.cd8737a5
080005ec g     F .text	0000005a .hidden __floatdidf
080079ec g     F .text	00000024 _kill_r
08007a24 g     F .text	00000030 printf
00005bb6  w      .debug_info	00000000 .hidden my_main.c.85f1cdb9
08003740  w    F .text	00000006 TIM1_CC_IRQHandler
080076f2 g     F .text	00000024 __sseek
08005f80 g     F .text	00000070 __sinit
08003740  w    F .text	00000006 DMA2_Stream5_IRQHandler
08007748 g     F .text	000000a4 __swbuf_r
080036ae g     F .text	00000002 HardFault_Handler
0000a247  w      .debug_info	00000000 .hidden syscall.c.10048c04
08005f24 g     F .text	0000002c __sfmoreglue
08003740  w    F .text	00000006 DMA1_Stream5_IRQHandler
08007934 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
0000ffe8  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.1f01c39f
080036bc g     F .text	00000020 SysTick_Handler
08006182 g     F .text	0000002a __hexdig_fun
08014814 g     O .rodata	0000000c CmdLedE
08003740  w    F .text	00000006 PVD_IRQHandler
08003740  w    F .text	00000006 SDIO_IRQHandler
080078f2 g     F .text	00000034 memmove
08003740  w    F .text	00000006 TAMP_STAMP_IRQHandler
080148d8 g       *ABS*	00000000 _sidata
080036ba g     F .text	00000002 PendSV_Handler
080036ac g     F .text	00000002 NMI_Handler
080068e4 g     F .text	00000080 _Balloc
080148d0 g       .ARM	00000000 __exidx_end
08004ed4 g     F .text	00000050 __strtok_r
08003740  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
080148c8 g       .rodata	00000000 _parsetable_end
08003748 g     F .text	0000000c __errno
00007fa6  w      .debug_info	00000000 .hidden STM32F411.c.1d942d48
000130fd  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.bf8e33b8
080148b0 g     O .rodata	0000000c CmdWE
08000c38 g     F .text	0000002e .hidden __aeabi_d2lz
08002e30 g     F .text	0000000c TIM1_UP_TIM10_IRQHandler
08002e7c g     F .text	0000000a _fstat_r
20000cf0 g     O .bss	00000004 errno
08007f84 g       .text	00000000 _etext
200001f8 g       .bss	00000000 _sbss
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
08003740  w    F .text	00000006 I2C3_ER_IRQHandler
0801485c g     O .rodata	0000000c GetSpeedE
0000f296  w      .debug_info	00000000 .hidden system_stm32f4xx.c.39c12e35
0000e493  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.17b9ea48
080068c8 g     F .text	0000001c memcpy
08006684 g     F .text	00000138 __hexnan
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08004080 g     F .text	0000018c setvbuf
08005f18 g     F .text	0000000c _cleanup_r
08007cdc g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
08003740  w    F .text	00000006 EXTI0_IRQHandler
08003740  w    F .text	00000006 I2C2_EV_IRQHandler
08000ca4 g     F .text	00000000 .hidden __aeabi_uldivmod
08007b5c g     F .text	00000010 puts
08003740  w    F .text	00000006 DMA1_Stream2_IRQHandler
08003740  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
08002e1c g     F .text	00000014 USR_LED_Toggle
08007178 g     F .text	00000066 __ratio
08006894 g     F .text	00000010 malloc
080147d8 g       .rodata	00000000 _tasktable_end
0800798c g     F .text	00000050 _raise_r
0800501c g     F .text	0000003c __assert_func
080146d8 g     O .rodata	000000c8 __mprec_tens
080036b4 g     F .text	00000002 UsageFault_Handler
08007c08 g     F .text	0000001c vsnprintf
08000bf8 g     F .text	00000040 .hidden __fixunsdfsi
08003740  w    F .text	00000006 DMA2_Stream2_IRQHandler
08007a10 g     F .text	00000004 _getpid_r
200001f8 g       .bss	00000000 __bss_start__
08005008 g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
080067bc g     F .text	00000008 _localeconv_r
08006b68 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
08003740  w    F .text	00000006 SPI1_IRQHandler
08000cd4 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
08002e48 g     F .text	00000030 _sbrk_r
08002e8e g     F .text	0000000a _read_r
00005f8e  w      .debug_info	00000000 .hidden example_dc.c.ca5efa4c
08003740  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
0000f79d  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.c4b4aca6
08014820 g     O .rodata	0000000c LoopInitE
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
08007020 g     F .text	000000a0 __b2d
080148c8 g       .ARM	00000000 __exidx_start
08000648 g     F .text	00000254 .hidden __aeabi_dmul
08003740  w    F .text	00000006 DMA2_Stream3_IRQHandler
080148a4 g     O .rodata	0000000c CmdVersionE
20000ce6 g     O .bss	00000001 __lock___sinit_recursive_mutex
08014340 g     O .rodata	00000004 _global_impure_ptr
08007940 g     F .text	0000004c _realloc_r
08003754 g     F .text	00000048 __libc_init_array
0001287c  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.6f222ff0
080146b0 g     O .rodata	00000028 __mprec_bigtens
08006a34 g     F .text	00000094 __s2b
080078e4 g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
08006e7c g     F .text	00000038 __mcmp
200001f0 g     O .data	00000004 TaskInputTaskState
08003740  w    F .text	00000006 USART6_IRQHandler
08007f6c g     F .text	00000000 _init
080147d8 g       .rodata	00000000 _parsetable_start
080147c0 g       .rodata	00000000 _tasktable_start
08014838 g     O .rodata	0000000c CmdRE
08000c68 g     F .text	0000003c .hidden __aeabi_d2ulz
08014808 g     O .rodata	0000000c GetEncoderValueE
08004248 g     F .text	00000c0c _strtod_l
0800665c g     F .text	00000028 __match
20000cf4 g       .bss	00000000 _ebss
080036f0  w    F .text	00000038 Reset_Handler
08007c08 g     F .text	0000001c vsniprintf
08006ac8 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
20000ce4 g     O .bss	00000001 __lock___malloc_recursive_mutex
08004e54 g     F .text	00000018 strtod
08003740  w    F .text	00000006 DMA2_Stream0_IRQHandler
08007edc g     F .text	00000090 _putc_r
0800607c g     F .text	00000024 fprintf
08003740  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
08006ce8 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
08014868 g     O .rodata	0000000c SetSpeedE
080001e0 g     F .text	00000014 mytest
08014538 g     O .rodata	00000020 __sf_fake_stderr
20000cf8 g       ._user_heap_stack	00000000 end
08003740  w    F .text	00000006 I2C1_EV_IRQHandler
080067c8 g     F .text	00000002 __retarget_lock_release_recursive
08003740  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001f0 g       .data	00000000 _taskstate_start
08007c24 g     F .text	000000b6 __ssputs_r
0000cd24  w      .debug_info	00000000 .hidden tasking.c.997edab1
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08003740  w    F .text	00000006 DMA1_Stream1_IRQHandler
080073fe g     F .text	00000024 __sfputs_r
0000704a  w      .debug_info	00000000 .hidden example_encoder.c.70ef96b1
08005f50 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
080038ec  w    F .text	0000046c _printf_float
20000cf4 g       .bss	00000000 __bss_end__
08007284 g     F .text	00000098 _free_r
08002e3c g     F .text	0000000c TIM3_IRQHandler
08003740  w    F .text	00000006 RCC_IRQHandler
08014874 g     O .rodata	0000000c StopMotorE
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
08003740 g       .text	00000006 Default_Handler
080005dc g     F .text	0000006a .hidden __floatundidf
08006d9c g     F .text	000000e0 __lshift
08003740  w    F .text	00000006 EXTI15_10_IRQHandler
0800771e g     F .text	00000028 strncmp
08003740  w    F .text	00000006 ADC_IRQHandler
08006b94 g     F .text	00000154 __multiply
080070c0 g     F .text	000000b8 __d2b
08007b6c g     F .text	00000034 strcasecmp
08003740  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
08003740  w    F .text	00000006 SPI5_IRQHandler
08014844 g     O .rodata	0000000c CmdReceiveE
08002e78 g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
08003740  w    F .text	00000006 TIM5_IRQHandler
08004e6c g     F .text	00000068 strtok
0001537f  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim_ex.c.29137660
00011288  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.45dc7b07
080147c0 g     O .rodata	00000018 TaskInputTask
08003740  w    F .text	00000006 DMA2_Stream7_IRQHandler
08003740  w    F .text	00000006 I2C3_EV_IRQHandler
0000ae9e  w      .debug_info	00000000 .hidden monitor.c.a676ff46
08007808 g     F .text	000000dc __swsetup_r
08000fa4  w    F .text	00000002 .hidden __aeabi_ldiv0
08003740  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08005ff0 g     F .text	0000008c __sfp
080071de g     F .text	00000046 __copybits
08003740  w    F .text	00000006 RTC_WKUP_IRQHandler
08005f74 g     F .text	0000000c __sinit_lock_release
08007bb0 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
08007698 g     F .text	00000022 __sread
08007928 g     F .text	0000000c __malloc_lock
08005e58 g     F .text	00000078 _fflush_r
08007266 g     F .text	0000001e _calloc_r
08003740  w    F .text	00000006 SPI2_IRQHandler
08014558 g     O .rodata	00000020 __sf_fake_stdin
080067c6 g     F .text	00000002 __retarget_lock_acquire_recursive
0800379c g     F .text	00000010 memset
080036b0 g     F .text	00000002 MemManage_Handler
08003024 g     F .text	00000688 main
08003740  w    F .text	00000006 DMA1_Stream0_IRQHandler
080067c4 g     F .text	00000002 __retarget_lock_init_recursive
080036b6 g     F .text	00000002 SVC_Handler
08007716 g     F .text	00000008 __sclose
08005170 g     F .text	00000bdc _dtoa_r
0800731c g     F .text	000000b4 _malloc_r
080077ec g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
08003740  w    F .text	00000006 EXTI4_IRQHandler
00005e0f  w      .debug_info	00000000 .hidden mytest.c.953917ec
080036dc g     F .text	00000014 SystemInit
0000e3e7  w      .debug_info	00000000 .hidden stm32f4xx_it.c.7cd92984
08000c68 g     F .text	0000003c .hidden __fixunsdfdi
08000a7c g     F .text	0000007a .hidden __nedf2
0000c96b  w      .debug_info	00000000 .hidden wdog.c.bd444c09
08007f78 g     F .text	00000000 _fini
08007a24 g     F .text	00000030 iprintf
0000d2e1  w      .debug_info	00000000 .hidden decoder.c.3b030309
200001f4 g       .data	00000000 _taskstate_end
08003870 g     F .text	0000007c __exponent
08000c38 g     F .text	0000002e .hidden __fixdfdi
08002e98 g     F .text	00000040 _write_r
0000b8f4  w      .debug_info	00000000 .hidden terminal.c.ff46b730
08003d58 g     F .text	000000da _printf_common
2000001c g     O .data	00000004 _impure_ptr
080147fc g     O .rodata	0000000c EncoderInitE
08005d4c g     F .text	0000010c __sflush_r
08007cdc g     F .text	00000200 _svfiprintf_r
08003740  w    F .text	00000006 WWDG_IRQHandler
08002fcc g     F .text	00000058 Default_IRQHandler
080068a4 g     F .text	00000024 __ascii_mbtowc
08014898 g     O .rodata	0000000c CmdTransparentE
08006fc8 g     F .text	00000058 __ulp
08014620 g     O .rodata	0000000c _C_numeric_locale
08003740  w    F .text	00000006 TIM2_IRQHandler
08000208 g     F .text	00000004 my_Loop
080147f0 g     O .rodata	0000000c CmdDecodeE
08007bb0 g     F .text	00000056 _vsniprintf_r
08000bf8 g     F .text	00000040 .hidden __aeabi_d2uiz
20000000 g       .data	00000000 myTickCount
08007688 g     F .text	00000010 nan
08003740  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
08003740  w    F .text	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0000d015  w      .debug_info	00000000 .hidden default.c.72277f79
080067ca g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
08003740  w    F .text	00000006 EXTI1_IRQHandler
0801482c g     O .rodata	0000000c CmdEncoder2E
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
200001f4 g       .data	00000000 _edata
08002ee4 g     F .text	000000e8 USART2_IRQHandler
080076ba g     F .text	00000038 __swrite
0800607c g     F .text	00000024 fiprintf
08007424 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080060a0 g     F .text	0000003e _fwalk_reent
08006eb4 g     F .text	00000114 __mdiff
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002ed8 g     F .text	00000006 _kill
08003740  w    F .text	00000006 I2C2_ER_IRQHandler
08005f5c g     F .text	0000000c __sfp_lock_release
08014578 g     O .rodata	00000020 __sf_fake_stdout
080147e4 g     O .rodata	0000000c CmdDumpE
08003740  w    F .text	00000006 DMA2_Stream1_IRQHandler
0801423d g     O .rodata	00000101 _ctype_
08000fa4  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
0801488c g     O .rodata	0000000c CmdStatsE
08003740  w    F .text	00000006 FLASH_IRQHandler
08002ede g     F .text	00000002 _exit
08014880 g     O .rodata	0000000c CmdTasksE
08003740  w    F .text	00000006 DMA2_Stream4_IRQHandler
080036b2 g     F .text	00000002 BusFault_Handler
08003740  w    F .text	00000006 USART1_IRQHandler
08006814 g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
08003740  w    F .text	00000006 OTG_FS_IRQHandler
08003e34 g     F .text	0000024c _printf_i
08003740  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
0000d855  w      .debug_info	00000000 .hidden main.c.9061392f
08003740  w    F .text	00000006 DMA1_Stream4_IRQHandler
080061ac g     F .text	0000048c __gethex
20000cec g     O .bss	00000004 __malloc_sbrk_start
000164f6  w      .debug_info	00000000 .hidden version.c.a5dccde6
08003740  w    F .text	00000006 I2C1_ER_IRQHandler
08014850 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000ce8 g     O .bss	00000004 __malloc_free_list
080002d8 g     F .text	0000027a .hidden __subdf3
08007424 g     F .text	00000260 _vfprintf_r
08006b08 g     F .text	0000005e __lo0bits
08003740  w    F .text	00000006 DMA2_Stream6_IRQHandler
0000b067  w      .debug_info	00000000 .hidden parser.c.e951cb40
20000084 g     O .data	0000016c __global_locale
08003740  w    F .text	00000006 DMA1_Stream3_IRQHandler
0000b65c  w      .debug_info	00000000 .hidden dump.c.89b97077
00012f4e  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.a60bd6e7
20000ce5 g     O .bss	00000001 __lock___sfp_recursive_mutex
080079dc g     F .text	00000010 raise
08005f68 g     F .text	0000000c __sinit_lock_acquire
080069a8 g     F .text	0000008c __multadd
08006964 g     F .text	00000044 _Bfree



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f6c 	.word	0x08007f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08007f6c 	.word	0x08007f6c

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f002 fe19 	bl	8002e1c <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff73 	bl	8000b2c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fce9 	bl	8000648 <__aeabi_dmul>
 8000c76:	f7ff ffbf 	bl	8000bf8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc6a 	bl	8000554 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fce0 	bl	8000648 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb22 	bl	80002d8 <__aeabi_dsub>
 8000c94:	f7ff ffb0 	bl	8000bf8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f000 b974 	b.w	8000fa4 <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f806 	bl	8000cd4 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <StopMotor>:
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <StopMotor+0x78>)
 8000faa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb4:	619a      	str	r2, [r3, #24]
  */
ParserReturnVal_t StopMotor()
{ 
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  targetRPM = 0;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <StopMotor+0x7c>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	e9c3 0100 	strd	r0, r1, [r3]
  pwmStatus = 0;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <StopMotor+0x80>)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8000fc2:	491a      	ldr	r1, [pc, #104]	; (800102c <StopMotor+0x84>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <StopMotor+0x88>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d10d      	bne.n	8000ff8 <StopMotor+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8000fdc:	6a18      	ldr	r0, [r3, #32]
 8000fde:	f241 1211 	movw	r2, #4369	; 0x1111
 8000fe2:	4210      	tst	r0, r2
 8000fe4:	d108      	bne.n	8000ff8 <StopMotor+0x50>
 8000fe6:	6a18      	ldr	r0, [r3, #32]
 8000fe8:	f240 4244 	movw	r2, #1092	; 0x444
 8000fec:	4210      	tst	r0, r2
 8000fee:	bf02      	ittt	eq
 8000ff0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000ff2:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8000ff6:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8000ff8:	6a18      	ldr	r0, [r3, #32]
 8000ffa:	f241 1211 	movw	r2, #4369	; 0x1111
 8000ffe:	4210      	tst	r0, r2
 8001000:	d108      	bne.n	8001014 <StopMotor+0x6c>
 8001002:	6a18      	ldr	r0, [r3, #32]
 8001004:	f240 4244 	movw	r2, #1092	; 0x444
 8001008:	4210      	tst	r0, r2
 800100a:	bf02      	ittt	eq
 800100c:	681a      	ldreq	r2, [r3, #0]
 800100e:	f022 0201 	biceq.w	r2, r2, #1
 8001012:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001014:	2201      	movs	r2, #1
  HAL_TIM_PWM_Stop(&tim1, TIM_CHANNEL_1);
  __HAL_TIM_SET_COMPARE(&tim1, TIM_CHANNEL_1, 0);
 8001016:	2000      	movs	r0, #0
 8001018:	f881 203e 	strb.w	r2, [r1, #62]	; 0x3e
 800101c:	6358      	str	r0, [r3, #52]	; 0x34

  return CmdReturnOk;
}
 800101e:	4770      	bx	lr
 8001020:	40020000 	.word	0x40020000
 8001024:	20000c48 	.word	0x20000c48
 8001028:	20000c3c 	.word	0x20000c3c
 800102c:	20000c50 	.word	0x20000c50
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_TIM_IC_CaptureCallback>:
//         
// RETURNS       :void
//   
  
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
   if(htim->Instance == TIM3){ 
 8001034:	6801      	ldr	r1, [r0, #0]
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001038:	4299      	cmp	r1, r3
 800103a:	d109      	bne.n	8001050 <HAL_TIM_IC_CaptureCallback+0x1c>
     count++;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_TIM_IC_CaptureCallback+0x24>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	3201      	adds	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
  
     if (count == 60){
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2a3c      	cmp	r2, #60	; 0x3c
       count  = 0;
 8001048:	bf02      	ittt	eq
 800104a:	2200      	moveq	r2, #0
 800104c:	601a      	streq	r2, [r3, #0]
       TIM3->CNT = 0;
 800104e:	624a      	streq	r2, [r1, #36]	; 0x24
       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); 
      }
  
     }
   
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40000400 	.word	0x40000400
 8001058:	20000a88 	.word	0x20000a88

0800105c <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 800105c:	b530      	push	{r4, r5, lr}
 800105e:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8001062:	4c10      	ldr	r4, [pc, #64]	; (80010a4 <TerminalRead+0x48>)
 8001064:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8001068:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 800106a:	fb05 4303 	mla	r3, r5, r3, r4
 800106e:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001072:	b2a4      	uxth	r4, r4
 8001074:	b10c      	cbz	r4, 800107a <TerminalRead+0x1e>
 8001076:	4290      	cmp	r0, r2
 8001078:	d101      	bne.n	800107e <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800107a:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 800107c:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 800107e:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8001082:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001084:	5d1d      	ldrb	r5, [r3, r4]
 8001086:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001088:	3401      	adds	r4, #1
 800108a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800108e:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8001092:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001096:	3c01      	subs	r4, #1
 8001098:	b2a4      	uxth	r4, r4
 800109a:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 800109e:	3001      	adds	r0, #1
 80010a0:	e7e5      	b.n	800106e <TerminalRead+0x12>
 80010a2:	bf00      	nop
 80010a4:	20000238 	.word	0x20000238

080010a8 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 80010a8:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <Uncompress+0x74>)
{
 80010ac:	b08a      	sub	sp, #40	; 0x28
 80010ae:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80010b0:	466c      	mov	r4, sp
 80010b2:	f102 0620 	add.w	r6, r2, #32
 80010b6:	6810      	ldr	r0, [r2, #0]
 80010b8:	6851      	ldr	r1, [r2, #4]
 80010ba:	4625      	mov	r5, r4
 80010bc:	c503      	stmia	r5!, {r0, r1}
 80010be:	3208      	adds	r2, #8
 80010c0:	42b2      	cmp	r2, r6
 80010c2:	462c      	mov	r4, r5
 80010c4:	d1f7      	bne.n	80010b6 <Uncompress+0xe>
 80010c6:	6810      	ldr	r0, [r2, #0]
 80010c8:	6028      	str	r0, [r5, #0]
 80010ca:	8892      	ldrh	r2, [r2, #4]
 80010cc:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 80010ce:	4618      	mov	r0, r3
 80010d0:	4d13      	ldr	r5, [pc, #76]	; (8001120 <Uncompress+0x78>)
 80010d2:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 80010d6:	2100      	movs	r1, #0
 80010d8:	ba5b      	rev16	r3, r3
 80010da:	b29b      	uxth	r3, r3
  i = 0;
 80010dc:	460c      	mov	r4, r1
 80010de:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 80010e0:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 80010e4:	d103      	bne.n	80010ee <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <Uncompress+0x78>)
  buf[i]='\0';
 80010e8:	5532      	strb	r2, [r6, r4]
}
 80010ea:	b00a      	add	sp, #40	; 0x28
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 80010ee:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 80010f0:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 80010f4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80010f8:	f3c2 4205 	ubfx	r2, r2, #16, #6
 80010fc:	4462      	add	r2, ip
    buf[i++] = c;
 80010fe:	3401      	adds	r4, #1
 8001100:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001104:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001108:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 800110a:	2a07      	cmp	r2, #7
      bits -= 8;
 800110c:	bf81      	itttt	hi
 800110e:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001110:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001114:	4091      	lslhi	r1, r2
 8001116:	430b      	orrhi	r3, r1
 8001118:	4611      	mov	r1, r2
 800111a:	e7e1      	b.n	80010e0 <Uncompress+0x38>
 800111c:	080083c8 	.word	0x080083c8
 8001120:	20000a70 	.word	0x20000a70

08001124 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b530      	push	{r4, r5, lr}
 8001128:	68dc      	ldr	r4, [r3, #12]
 800112a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	2d04      	cmp	r5, #4
 8001136:	bf28      	it	cs
 8001138:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001140:	bf8c      	ite	hi
 8001142:	3c03      	subhi	r4, #3
 8001144:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001146:	fa03 f505 	lsl.w	r5, r3, r5
 800114a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114e:	40a3      	lsls	r3, r4
 8001150:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	40a1      	lsls	r1, r4
 8001156:	ea41 0302 	orr.w	r3, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800115a:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	bf14      	ite	ne
 800115e:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	4a06      	ldreq	r2, [pc, #24]	; (800117c <HAL_NVIC_SetPriority+0x58>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001168:	bf18      	it	ne
 800116a:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 800116e:	b2db      	uxtb	r3, r3
 8001170:	bf14      	ite	ne
 8001172:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800117a:	bd30      	pop	{r4, r5, pc}
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_GPIO_Init>:
{
 8001180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800130c <HAL_GPIO_Init+0x18c>
        temp = EXTI->IMR;
 8001188:	4a5e      	ldr	r2, [pc, #376]	; (8001304 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800118e:	2401      	movs	r4, #1
 8001190:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001196:	43ac      	bics	r4, r5
 8001198:	f040 80a5 	bne.w	80012e6 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119c:	684d      	ldr	r5, [r1, #4]
 800119e:	f005 0403 	and.w	r4, r5, #3
 80011a2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011aa:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b4:	d834      	bhi.n	8001220 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80011b6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	68cf      	ldr	r7, [r1, #12]
 80011be:	fa07 f708 	lsl.w	r7, r7, r8
 80011c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80011c6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011c8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ca:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80011d2:	409f      	lsls	r7, r3
 80011d4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011d8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80011da:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011dc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	688f      	ldr	r7, [r1, #8]
 80011e2:	fa07 f708 	lsl.w	r7, r7, r8
 80011e6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80011ec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	d119      	bne.n	8001224 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80011f4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001200:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001204:	f04f 0e0f 	mov.w	lr, #15
 8001208:	fa0e fe0b 	lsl.w	lr, lr, fp
 800120c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	690f      	ldr	r7, [r1, #16]
 8001212:	fa07 f70b 	lsl.w	r7, r7, fp
 8001216:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	f8ca 7020 	str.w	r7, [sl, #32]
 800121e:	e001      	b.n	8001224 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	2c03      	cmp	r4, #3
 8001222:	d1da      	bne.n	80011da <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001224:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001226:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001232:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	d057      	beq.n	80012e6 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	f04f 0a00 	mov.w	sl, #0
 800123a:	f8cd a004 	str.w	sl, [sp, #4]
 800123e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	4c31      	ldr	r4, [pc, #196]	; (8001308 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001248:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800124c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001250:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001254:	9601      	str	r6, [sp, #4]
 8001256:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001258:	f023 0603 	bic.w	r6, r3, #3
 800125c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001260:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001268:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001270:	270f      	movs	r7, #15
 8001272:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127c:	d03a      	beq.n	80012f4 <HAL_GPIO_Init+0x174>
 800127e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001282:	42a0      	cmp	r0, r4
 8001284:	d038      	beq.n	80012f8 <HAL_GPIO_Init+0x178>
 8001286:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800128a:	42a0      	cmp	r0, r4
 800128c:	d036      	beq.n	80012fc <HAL_GPIO_Init+0x17c>
 800128e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001292:	42a0      	cmp	r0, r4
 8001294:	d034      	beq.n	8001300 <HAL_GPIO_Init+0x180>
 8001296:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800129a:	42a0      	cmp	r0, r4
 800129c:	bf0c      	ite	eq
 800129e:	2404      	moveq	r4, #4
 80012a0:	2407      	movne	r4, #7
 80012a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80012a6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80012aa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b0:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80012b2:	bf54      	ite	pl
 80012b4:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012b6:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->IMR = temp;
 80012ba:	6014      	str	r4, [r2, #0]
        temp = EXTI->EMR;
 80012bc:	6854      	ldr	r4, [r2, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80012c0:	bf54      	ite	pl
 80012c2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012c4:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;
 80012c8:	6054      	str	r4, [r2, #4]
        temp = EXTI->RTSR;
 80012ca:	6894      	ldr	r4, [r2, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012cc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80012ce:	bf54      	ite	pl
 80012d0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->RTSR = temp;
 80012d6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80012d8:	68d4      	ldr	r4, [r2, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012da:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80012dc:	bf54      	ite	pl
 80012de:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->FTSR = temp;
 80012e4:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	3301      	adds	r3, #1
 80012e8:	2b10      	cmp	r3, #16
 80012ea:	f47f af4f 	bne.w	800118c <HAL_GPIO_Init+0xc>
}
 80012ee:	b003      	add	sp, #12
 80012f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f4:	4654      	mov	r4, sl
 80012f6:	e7d4      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 80012f8:	2401      	movs	r4, #1
 80012fa:	e7d2      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 80012fc:	2402      	movs	r4, #2
 80012fe:	e7d0      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 8001300:	2403      	movs	r4, #3
 8001302:	e7ce      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 8001304:	40013c00 	.word	0x40013c00
 8001308:	40020000 	.word	0x40020000
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_TIM_IRQHandler>:
{
 8001310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001314:	6803      	ldr	r3, [r0, #0]
{
 8001316:	ed2d 8b02 	vpush	{d8}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	0796      	lsls	r6, r2, #30
{
 800131e:	b083      	sub	sp, #12
 8001320:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001322:	d50e      	bpl.n	8001342 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	0795      	lsls	r5, r2, #30
 8001328:	d50b      	bpl.n	8001342 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800132a:	f06f 0202 	mvn.w	r2, #2
 800132e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001330:	2201      	movs	r2, #1
 8001332:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	0799      	lsls	r1, r3, #30
 8001338:	d001      	beq.n	800133e <HAL_TIM_IRQHandler+0x2e>
          HAL_TIM_IC_CaptureCallback(htim);
 800133a:	f7ff fe7b 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133e:	2300      	movs	r3, #0
 8001340:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	0752      	lsls	r2, r2, #29
 8001348:	d510      	bpl.n	800136c <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	0757      	lsls	r7, r2, #29
 800134e:	d50d      	bpl.n	800136c <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001350:	f06f 0204 	mvn.w	r2, #4
 8001354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001356:	2202      	movs	r2, #2
 8001358:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001360:	d002      	beq.n	8001368 <HAL_TIM_IRQHandler+0x58>
        HAL_TIM_IC_CaptureCallback(htim);
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff fe66 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001368:	2300      	movs	r3, #0
 800136a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	0716      	lsls	r6, r2, #28
 8001372:	d50f      	bpl.n	8001394 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	0715      	lsls	r5, r2, #28
 8001378:	d50c      	bpl.n	8001394 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800137a:	f06f 0208 	mvn.w	r2, #8
 800137e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001380:	2204      	movs	r2, #4
 8001382:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	0798      	lsls	r0, r3, #30
 8001388:	d002      	beq.n	8001390 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_IC_CaptureCallback(htim);
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fe52 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001390:	2300      	movs	r3, #0
 8001392:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	06d1      	lsls	r1, r2, #27
 800139a:	d510      	bpl.n	80013be <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	06d2      	lsls	r2, r2, #27
 80013a0:	d50d      	bpl.n	80013be <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013a2:	f06f 0210 	mvn.w	r2, #16
 80013a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013a8:	2208      	movs	r2, #8
 80013aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80013b2:	d002      	beq.n	80013ba <HAL_TIM_IRQHandler+0xaa>
        HAL_TIM_IC_CaptureCallback(htim);
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff fe3d 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ba:	2300      	movs	r3, #0
 80013bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013be:	6824      	ldr	r4, [r4, #0]
 80013c0:	6923      	ldr	r3, [r4, #16]
 80013c2:	07db      	lsls	r3, r3, #31
 80013c4:	f140 80b4 	bpl.w	8001530 <HAL_TIM_IRQHandler+0x220>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013c8:	68e3      	ldr	r3, [r4, #12]
 80013ca:	07df      	lsls	r7, r3, #31
 80013cc:	f140 80b0 	bpl.w	8001530 <HAL_TIM_IRQHandler+0x220>

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d0:	4971      	ldr	r1, [pc, #452]	; (8001598 <HAL_TIM_IRQHandler+0x288>)
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013d2:	f06f 0301 	mvn.w	r3, #1
 80013d6:	6123      	str	r3, [r4, #16]
 80013d8:	694b      	ldr	r3, [r1, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	041a      	lsls	r2, r3, #16
 80013dc:	43db      	mvns	r3, r3
 80013de:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	4313      	orrs	r3, r2
 80013e8:	618b      	str	r3, [r1, #24]
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  if (pwmStatus == 1){
 80013ea:	4b6c      	ldr	r3, [pc, #432]	; (800159c <HAL_TIM_IRQHandler+0x28c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 809e 	bne.w	8001530 <HAL_TIM_IRQHandler+0x220>

    encoderPrevious = encoderCurrent;
 80013f4:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <HAL_TIM_IRQHandler+0x290>)
 80013f6:	496b      	ldr	r1, [pc, #428]	; (80015a4 <HAL_TIM_IRQHandler+0x294>)
 80013f8:	6813      	ldr	r3, [r2, #0]
 80013fa:	600b      	str	r3, [r1, #0]
    encoderCurrent = (int32_t)__HAL_TIM_GET_COUNTER(&tim3); 
 80013fc:	496a      	ldr	r1, [pc, #424]	; (80015a8 <HAL_TIM_IRQHandler+0x298>)
  errorPrevious = errorCurrent;
 80013fe:	4d6b      	ldr	r5, [pc, #428]	; (80015ac <HAL_TIM_IRQHandler+0x29c>)
    encoderCurrent = (int32_t)__HAL_TIM_GET_COUNTER(&tim3); 
 8001400:	6809      	ldr	r1, [r1, #0]
 8001402:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001404:	6010      	str	r0, [r2, #0]
  double RPSDelta = (double)encoderDelta / encoderFullTurn;
 8001406:	1ac0      	subs	r0, r0, r3
 8001408:	f7ff f8b4 	bl	8000574 <__aeabi_i2d>
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_TIM_IRQHandler+0x2a0>)
 800140e:	2200      	movs	r2, #0
 8001410:	f7ff fa44 	bl	800089c <__aeabi_ddiv>
  double RPM = (RPSDelta / timebase)*60;
 8001414:	a35e      	add	r3, pc, #376	; (adr r3, 8001590 <HAL_TIM_IRQHandler+0x280>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff fa3f 	bl	800089c <__aeabi_ddiv>
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_TIM_IRQHandler+0x2a4>)
 8001420:	2200      	movs	r2, #0
 8001422:	f7ff f911 	bl	8000648 <__aeabi_dmul>
 8001426:	460b      	mov	r3, r1
  errorCurrent = targetRPM - RPM;
 8001428:	4963      	ldr	r1, [pc, #396]	; (80015b8 <HAL_TIM_IRQHandler+0x2a8>)
  double RPM = (RPSDelta / timebase)*60;
 800142a:	4602      	mov	r2, r0
  errorCurrent = targetRPM - RPM;
 800142c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001430:	f7fe ff52 	bl	80002d8 <__aeabi_dsub>
  errorPrevious = errorCurrent;
 8001434:	e9d5 8900 	ldrd	r8, r9, [r5]
  errorCurrent = targetRPM - RPM;
 8001438:	4682      	mov	sl, r0
 800143a:	468b      	mov	fp, r1
 800143c:	e9c5 ab00 	strd	sl, fp, [r5]
  double errorDelta = (errorCurrent - errorPrevious);
 8001440:	4642      	mov	r2, r8
 8001442:	464b      	mov	r3, r9
 8001444:	f7fe ff48 	bl	80002d8 <__aeabi_dsub>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 8001448:	4d5c      	ldr	r5, [pc, #368]	; (80015bc <HAL_TIM_IRQHandler+0x2ac>)
  errorD = errorDelta / timebase;
 800144a:	a351      	add	r3, pc, #324	; (adr r3, 8001590 <HAL_TIM_IRQHandler+0x280>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
  double errorDelta = (errorCurrent - errorPrevious);
 8001450:	4606      	mov	r6, r0
 8001452:	460f      	mov	r7, r1
  errorD = errorDelta / timebase;
 8001454:	f7ff fa22 	bl	800089c <__aeabi_ddiv>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 8001458:	ed95 7b00 	vldr	d7, [r5]
  errorD = errorDelta / timebase;
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_TIM_IRQHandler+0x2b0>)
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 800145e:	eeb0 8a47 	vmov.f32	s16, s14
 8001462:	eef0 8a67 	vmov.f32	s17, s15
  errorD = errorDelta / timebase;
 8001466:	e9c3 0100 	strd	r0, r1, [r3]
 800146a:	e9cd 0100 	strd	r0, r1, [sp]
  if(fabs(errorCurrent) > fabs(errorPrevious)){
 800146e:	4642      	mov	r2, r8
 8001470:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001474:	4650      	mov	r0, sl
 8001476:	f02b 4100 	bic.w	r1, fp, #2147483648	; 0x80000000
 800147a:	f7ff fb75 	bl	8000b68 <__aeabi_dcmpgt>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 800147e:	a344      	add	r3, pc, #272	; (adr r3, 8001590 <HAL_TIM_IRQHandler+0x280>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
  if(fabs(errorCurrent) > fabs(errorPrevious)){
 8001484:	2800      	cmp	r0, #0
 8001486:	d073      	beq.n	8001570 <HAL_TIM_IRQHandler+0x260>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 8001488:	4630      	mov	r0, r6
 800148a:	4639      	mov	r1, r7
 800148c:	f7ff f8dc 	bl	8000648 <__aeabi_dmul>
 8001490:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <HAL_TIM_IRQHandler+0x2b4>)
 8001492:	2200      	movs	r2, #0
 8001494:	f7ff f8d8 	bl	8000648 <__aeabi_dmul>
 8001498:	a33d      	add	r3, pc, #244	; (adr r3, 8001590 <HAL_TIM_IRQHandler+0x280>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	4606      	mov	r6, r0
 80014a0:	460f      	mov	r7, r1
 80014a2:	4640      	mov	r0, r8
 80014a4:	4649      	mov	r1, r9
    errorI += (timebase * errorCurrent) + (errorDelta * timebase)/2;
 80014a6:	f7ff f8cf 	bl	8000648 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4630      	mov	r0, r6
 80014b0:	4639      	mov	r1, r7
 80014b2:	f7fe ff13 	bl	80002dc <__adddf3>
 80014b6:	ec53 2b18 	vmov	r2, r3, d8
 80014ba:	f7fe ff0f 	bl	80002dc <__adddf3>
    CalculateSpeedsAndErrors();
    PIDResult = (P * errorCurrent) + (I * errorI) + (D * errorD);
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <HAL_TIM_IRQHandler+0x2b8>)
    errorI += (timebase * errorCurrent) + (errorDelta * timebase)/2;
 80014c0:	4606      	mov	r6, r0
 80014c2:	460f      	mov	r7, r1
 80014c4:	e9c5 6700 	strd	r6, r7, [r5]
    PIDResult = (P * errorCurrent) + (I * errorI) + (D * errorD);
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	4650      	mov	r0, sl
 80014ce:	4659      	mov	r1, fp
 80014d0:	f7ff f8ba 	bl	8000648 <__aeabi_dmul>
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_TIM_IRQHandler+0x2bc>)
 80014d6:	4680      	mov	r8, r0
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	4689      	mov	r9, r1
 80014de:	4630      	mov	r0, r6
 80014e0:	4639      	mov	r1, r7
 80014e2:	f7ff f8b1 	bl	8000648 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4640      	mov	r0, r8
 80014ec:	4649      	mov	r1, r9
 80014ee:	f7fe fef5 	bl	80002dc <__adddf3>
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_TIM_IRQHandler+0x2c0>)
 80014f4:	4606      	mov	r6, r0
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	460f      	mov	r7, r1
 80014fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001500:	f7ff f8a2 	bl	8000648 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4630      	mov	r0, r6
 800150a:	4639      	mov	r1, r7
 800150c:	f7fe fee6 	bl	80002dc <__adddf3>
    currentPWM = __HAL_TIM_GET_COUNTER(&tim1); 
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_TIM_IRQHandler+0x2c4>)
 8001512:	4e31      	ldr	r6, [pc, #196]	; (80015d8 <HAL_TIM_IRQHandler+0x2c8>)
 8001514:	681f      	ldr	r7, [r3, #0]
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	b29b      	uxth	r3, r3
 800151a:	8033      	strh	r3, [r6, #0]
    currentPWM += ((uint16_t)(PIDResult * pid2pwm));
 800151c:	f7ff fb6c 	bl	8000bf8 <__aeabi_d2uiz>
 8001520:	8835      	ldrh	r5, [r6, #0]
 8001522:	b2ad      	uxth	r5, r5
 8001524:	4428      	add	r0, r5
 8001526:	b280      	uxth	r0, r0
 8001528:	8030      	strh	r0, [r6, #0]
    __HAL_TIM_SET_COMPARE(&tim1, TIM_CHANNEL_1, currentPWM);
 800152a:	8833      	ldrh	r3, [r6, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001530:	6923      	ldr	r3, [r4, #16]
 8001532:	061e      	lsls	r6, r3, #24
 8001534:	d505      	bpl.n	8001542 <HAL_TIM_IRQHandler+0x232>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001536:	68e3      	ldr	r3, [r4, #12]
 8001538:	061d      	lsls	r5, r3, #24
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800153a:	bf44      	itt	mi
 800153c:	f06f 0380 	mvnmi.w	r3, #128	; 0x80
 8001540:	6123      	strmi	r3, [r4, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	0658      	lsls	r0, r3, #25
 8001546:	d505      	bpl.n	8001554 <HAL_TIM_IRQHandler+0x244>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001548:	68e3      	ldr	r3, [r4, #12]
 800154a:	0659      	lsls	r1, r3, #25
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800154c:	bf44      	itt	mi
 800154e:	f06f 0340 	mvnmi.w	r3, #64	; 0x40
 8001552:	6123      	strmi	r3, [r4, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001554:	6923      	ldr	r3, [r4, #16]
 8001556:	069a      	lsls	r2, r3, #26
 8001558:	d505      	bpl.n	8001566 <HAL_TIM_IRQHandler+0x256>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800155a:	68e3      	ldr	r3, [r4, #12]
 800155c:	069b      	lsls	r3, r3, #26
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800155e:	bf44      	itt	mi
 8001560:	f06f 0320 	mvnmi.w	r3, #32
 8001564:	6123      	strmi	r3, [r4, #16]
}
 8001566:	b003      	add	sp, #12
 8001568:	ecbd 8b02 	vpop	{d8}
 800156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorI += (timebase * errorCurrent) + (errorDelta * timebase)/2;
 8001570:	4630      	mov	r0, r6
 8001572:	4639      	mov	r1, r7
 8001574:	f7ff f868 	bl	8000648 <__aeabi_dmul>
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_TIM_IRQHandler+0x2b4>)
 800157a:	2200      	movs	r2, #0
 800157c:	f7ff f864 	bl	8000648 <__aeabi_dmul>
 8001580:	a303      	add	r3, pc, #12	; (adr r3, 8001590 <HAL_TIM_IRQHandler+0x280>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	4606      	mov	r6, r0
 8001588:	460f      	mov	r7, r1
 800158a:	4650      	mov	r0, sl
 800158c:	4659      	mov	r1, fp
 800158e:	e78a      	b.n	80014a6 <HAL_TIM_IRQHandler+0x196>
 8001590:	9999999a 	.word	0x9999999a
 8001594:	3fc99999 	.word	0x3fc99999
 8001598:	40020000 	.word	0x40020000
 800159c:	20000c3c 	.word	0x20000c3c
 80015a0:	20000a94 	.word	0x20000a94
 80015a4:	20000a98 	.word	0x20000a98
 80015a8:	20000c98 	.word	0x20000c98
 80015ac:	20000aa0 	.word	0x20000aa0
 80015b0:	40790000 	.word	0x40790000
 80015b4:	404e0000 	.word	0x404e0000
 80015b8:	20000c48 	.word	0x20000c48
 80015bc:	20000ab0 	.word	0x20000ab0
 80015c0:	20000aa8 	.word	0x20000aa8
 80015c4:	3fe00000 	.word	0x3fe00000
 80015c8:	20000230 	.word	0x20000230
 80015cc:	20000220 	.word	0x20000220
 80015d0:	20000218 	.word	0x20000218
 80015d4:	20000c50 	.word	0x20000c50
 80015d8:	20000010 	.word	0x20000010

080015dc <HAL_TIM_PWM_ConfigChannel>:
{
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80015de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	f000 80a8 	beq.w	8001738 <HAL_TIM_PWM_ConfigChannel+0x15c>
 80015e8:	2301      	movs	r3, #1
  switch (Channel)
 80015ea:	2a04      	cmp	r2, #4
  __HAL_LOCK(htim);
 80015ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80015f0:	d039      	beq.n	8001666 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80015f2:	2a08      	cmp	r2, #8
 80015f4:	d06c      	beq.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0xf4>
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d130      	bne.n	800165c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015fa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80015fc:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001606:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001608:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800160a:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800160c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001610:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8001612:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001614:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8001618:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800161a:	4e48      	ldr	r6, [pc, #288]	; (800173c <HAL_TIM_PWM_ConfigChannel+0x160>)
 800161c:	42b3      	cmp	r3, r6
 800161e:	d10b      	bne.n	8001638 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpccer |= OC_Config->OCNPolarity;
 8001620:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001622:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001626:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8001628:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800162c:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001630:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8001632:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001636:	4335      	orrs	r5, r6
  TIMx->CR2 = tmpcr2;
 8001638:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800163a:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800163c:	684c      	ldr	r4, [r1, #4]
 800163e:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001640:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001642:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001644:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001646:	f042 0208 	orr.w	r2, r2, #8
 800164a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	f022 0204 	bic.w	r2, r2, #4
 8001652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001654:	699a      	ldr	r2, [r3, #24]
 8001656:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001658:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800165c:	2200      	movs	r2, #0
 800165e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8001662:	4618      	mov	r0, r3
 8001664:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001666:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001668:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	f022 0210 	bic.w	r2, r2, #16
 8001670:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001672:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001674:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001676:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001678:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800167c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001680:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001682:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001686:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800168a:	4e2c      	ldr	r6, [pc, #176]	; (800173c <HAL_TIM_PWM_ConfigChannel+0x160>)
 800168c:	42b3      	cmp	r3, r6
 800168e:	d10d      	bne.n	80016ac <HAL_TIM_PWM_ConfigChannel+0xd0>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001690:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001696:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800169a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800169e:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016a2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80016a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016a8:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CR2 = tmpcr2;
 80016ac:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80016ae:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80016b0:	684c      	ldr	r4, [r1, #4]
 80016b2:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80016b4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016b6:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016b8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016c8:	699a      	ldr	r2, [r3, #24]
 80016ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016ce:	e7c3      	b.n	8001658 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016d0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80016d2:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016da:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80016dc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80016de:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80016e0:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80016e2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80016e6:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016e8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80016ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016ee:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80016f2:	4e12      	ldr	r6, [pc, #72]	; (800173c <HAL_TIM_PWM_ConfigChannel+0x160>)
 80016f4:	42b3      	cmp	r3, r6
 80016f6:	d10d      	bne.n	8001714 <HAL_TIM_PWM_ConfigChannel+0x138>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016f8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016fe:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001702:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001706:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800170a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800170c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001710:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CR2 = tmpcr2;
 8001714:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001716:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001718:	684c      	ldr	r4, [r1, #4]
 800171a:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800171c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800171e:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001720:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001722:	f042 0208 	orr.w	r2, r2, #8
 8001726:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	430a      	orrs	r2, r1
 8001734:	61da      	str	r2, [r3, #28]
 8001736:	e790      	b.n	800165a <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8001738:	2302      	movs	r3, #2
 800173a:	e792      	b.n	8001662 <HAL_TIM_PWM_ConfigChannel+0x86>
 800173c:	40010000 	.word	0x40010000

08001740 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001742:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001744:	4290      	cmp	r0, r2
 8001746:	d00e      	beq.n	8001766 <TIM_Base_SetConfig+0x26>
 8001748:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800174c:	d00b      	beq.n	8001766 <TIM_Base_SetConfig+0x26>
 800174e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001752:	4290      	cmp	r0, r2
 8001754:	d007      	beq.n	8001766 <TIM_Base_SetConfig+0x26>
 8001756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175a:	4290      	cmp	r0, r2
 800175c:	d003      	beq.n	8001766 <TIM_Base_SetConfig+0x26>
 800175e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001762:	4290      	cmp	r0, r2
 8001764:	d115      	bne.n	8001792 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001766:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800176c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <TIM_Base_SetConfig+0x94>)
 8001770:	4290      	cmp	r0, r2
 8001772:	d019      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 8001774:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001778:	d016      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 800177a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800177e:	4290      	cmp	r0, r2
 8001780:	d012      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 8001782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001786:	4290      	cmp	r0, r2
 8001788:	d00e      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 800178a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800178e:	4290      	cmp	r0, r2
 8001790:	d00a      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <TIM_Base_SetConfig+0x98>)
 8001794:	4290      	cmp	r0, r2
 8001796:	d007      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 8001798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179c:	4290      	cmp	r0, r2
 800179e:	d003      	beq.n	80017a8 <TIM_Base_SetConfig+0x68>
 80017a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a4:	4290      	cmp	r0, r2
 80017a6:	d103      	bne.n	80017b0 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017a8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017b0:	694a      	ldr	r2, [r1, #20]
 80017b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017b6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80017b8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ba:	688b      	ldr	r3, [r1, #8]
 80017bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017be:	680b      	ldr	r3, [r1, #0]
 80017c0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <TIM_Base_SetConfig+0x94>)
 80017c4:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80017c6:	bf04      	itt	eq
 80017c8:	690b      	ldreq	r3, [r1, #16]
 80017ca:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80017cc:	2301      	movs	r3, #1
 80017ce:	6143      	str	r3, [r0, #20]
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40014000 	.word	0x40014000

080017dc <HAL_TIMEx_MasterConfigSynchronization.constprop.0>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f04f 0302 	mov.w	r3, #2
 80017e6:	d026      	beq.n	8001836 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017ec:	6803      	ldr	r3, [r0, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017f0:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017f2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80017f6:	6059      	str	r1, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017f8:	4910      	ldr	r1, [pc, #64]	; (800183c <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x60>)
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d012      	beq.n	8001824 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001802:	d00f      	beq.n	8001824 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001804:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8001808:	428b      	cmp	r3, r1
 800180a:	d00b      	beq.n	8001824 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800180c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001810:	428b      	cmp	r3, r1
 8001812:	d007      	beq.n	8001824 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001814:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001818:	428b      	cmp	r3, r1
 800181a:	d003      	beq.n	8001824 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800181c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001820:	428b      	cmp	r3, r1
 8001822:	d102      	bne.n	800182a <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800182a:	2301      	movs	r3, #1
 800182c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001830:	2300      	movs	r3, #0
 8001832:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001836:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40010000 	.word	0x40010000

08001840 <HAL_TIM_Base_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001840:	b513      	push	{r0, r1, r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001846:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001848:	f002 03ff 	and.w	r3, r2, #255	; 0xff
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800184c:	6800      	ldr	r0, [r0, #0]
 800184e:	b97a      	cbnz	r2, 8001870 <HAL_TIM_Base_Init.constprop.0+0x30>
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_TIM_Base_Init.constprop.0+0x6c>)
    htim->Lock = HAL_UNLOCKED;
 8001852:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001856:	4290      	cmp	r0, r2
 8001858:	d10a      	bne.n	8001870 <HAL_TIM_Base_Init.constprop.0+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_TIM_Base_Init.constprop.0+0x70>)
 800185e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001860:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001864:	645a      	str	r2, [r3, #68]	; 0x44
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	9b01      	ldr	r3, [sp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001870:	2302      	movs	r3, #2
 8001872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001876:	1d21      	adds	r1, r4, #4
 8001878:	f7ff ff62 	bl	8001740 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187c:	2301      	movs	r3, #1
}
 800187e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001880:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001884:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001888:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800188c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001890:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800189c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80018a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80018a8:	b002      	add	sp, #8
 80018aa:	bd10      	pop	{r4, pc}
 80018ac:	40014800 	.word	0x40014800
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_TIM_Encoder_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80018b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
 80018ba:	4604      	mov	r4, r0
 80018bc:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 80018be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018c2:	b90b      	cbnz	r3, 80018c8 <HAL_TIM_Encoder_Init.constprop.0+0x14>
    htim->Lock = HAL_UNLOCKED;
 80018c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80018c8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80018d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80018d4:	6883      	ldr	r3, [r0, #8]
 80018d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018da:	f023 0307 	bic.w	r3, r3, #7
 80018de:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e0:	f7ff ff2e 	bl	8001740 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80018e4:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80018e6:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80018e8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80018ea:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80018ec:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 80018ee:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80018f0:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80018f2:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80018f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80018f8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80018fc:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001900:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001902:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001906:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001908:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001910:	68e9      	ldr	r1, [r5, #12]
 8001912:	430b      	orrs	r3, r1
 8001914:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001916:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800191a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800191e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001920:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001922:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001926:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001928:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800192a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800192e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001930:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001932:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001934:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001936:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 800193a:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800193c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800194c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001954 <HAL_InitTick.isra.0>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_InitTick.isra.0+0x48>)
 8001956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	3b01      	subs	r3, #1
 8001962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001966:	b510      	push	{r4, lr}
 8001968:	4604      	mov	r4, r0
 800196a:	d215      	bcs.n	8001998 <HAL_InitTick.isra.0+0x44>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	22f0      	movs	r2, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	614b      	str	r3, [r1, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_InitTick.isra.0+0x4c>)
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	280f      	cmp	r0, #15
 8001978:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	f04f 0200 	mov.w	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001980:	f04f 0307 	mov.w	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	618a      	str	r2, [r1, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	610b      	str	r3, [r1, #16]
 8001988:	d806      	bhi.n	8001998 <HAL_InitTick.isra.0+0x44>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198a:	4601      	mov	r1, r0
 800198c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001990:	f7ff fbc8 	bl	8001124 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_InitTick.isra.0+0x50>)
 8001996:	601c      	str	r4, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	20000004 	.word	0x20000004
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	20000018 	.word	0x20000018

080019a8 <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 80019a8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	4c2e      	ldr	r4, [pc, #184]	; (8001a68 <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 80019b0:	d30a      	bcc.n	80019c8 <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 80019b2:	f640 0334 	movw	r3, #2100	; 0x834
 80019b6:	fb03 4300 	mla	r3, r3, r0, r4
 80019ba:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80019be:	3201      	adds	r2, #1
 80019c0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80019c8:	f640 0334 	movw	r3, #2100	; 0x834
 80019cc:	fb03 4300 	mla	r3, r3, r0, r4
 80019d0:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80019d4:	fa12 f585 	uxtah	r5, r2, r5
 80019d8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80019dc:	d220      	bcs.n	8001a20 <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 80019de:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80019e0:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 80019e4:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80019e6:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 80019ea:	42b2      	cmp	r2, r6
 80019ec:	d005      	beq.n	80019fa <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80019ee:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80019f2:	b2ad      	uxth	r5, r5
 80019f4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80019f8:	d320      	bcc.n	8001a3c <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 80019fa:	f640 0334 	movw	r3, #2100	; 0x834
 80019fe:	fb03 4400 	mla	r4, r3, r0, r4
 8001a02:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001a06:	4433      	add	r3, r6
 8001a08:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <TerminalOutputBufferWrite.isra.0+0xc4>)
 8001a0e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001a12:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001a14:	68d3      	ldr	r3, [r2, #12]
 8001a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a1c:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 8001a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 8001a20:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001a24:	3501      	adds	r5, #1
 8001a26:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001a2a:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001a2e:	fa12 f585 	uxtah	r5, r2, r5
 8001a32:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001a36:	d3d2      	bcc.n	80019de <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 8001a38:	bf00      	nop
 8001a3a:	e7f6      	b.n	8001a2a <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 8001a3c:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 8001a40:	f811 c006 	ldrb.w	ip, [r1, r6]
 8001a44:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8001a48:	3501      	adds	r5, #1
 8001a4a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001a4e:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001a52:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001a56:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 8001a5a:	3501      	adds	r5, #1
 8001a5c:	b2ad      	uxth	r5, r5
 8001a5e:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 8001a62:	3601      	adds	r6, #1
 8001a64:	e7c1      	b.n	80019ea <TerminalOutputBufferWrite.isra.0+0x42>
 8001a66:	bf00      	nop
 8001a68:	20000238 	.word	0x20000238
 8001a6c:	08013f84 	.word	0x08013f84

08001a70 <GetEncoderValue>:
{ 
 8001a70:	b508      	push	{r3, lr}
  uint16_t currentEnc = __HAL_TIM_GET_COUNTER(&tim3); 
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <GetEncoderValue+0x14>)
  printf("%d\n", currentEnc);
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <GetEncoderValue+0x18>)
  uint16_t currentEnc = __HAL_TIM_GET_COUNTER(&tim3); 
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a59      	ldr	r1, [r3, #36]	; 0x24
  printf("%d\n", currentEnc);
 8001a7a:	b289      	uxth	r1, r1
 8001a7c:	f005 ffd2 	bl	8007a24 <iprintf>
}
 8001a80:	2000      	movs	r0, #0
 8001a82:	bd08      	pop	{r3, pc}
 8001a84:	20000c98 	.word	0x20000c98
 8001a88:	080084c0 	.word	0x080084c0
 8001a8c:	00000000 	.word	0x00000000

08001a90 <GetSpeed>:
{ 
 8001a90:	b508      	push	{r3, lr}
  int32_t encoderDelta = encoderCurrent - encoderPrevious;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <GetSpeed+0x40>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <GetSpeed+0x44>)
 8001a98:	681b      	ldr	r3, [r3, #0]
  double turnsDelta = (double)encoderDelta / encoderFullTurn;
 8001a9a:	1ac0      	subs	r0, r0, r3
 8001a9c:	f7fe fd6a 	bl	8000574 <__aeabi_i2d>
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <GetSpeed+0x48>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f7fe fefa 	bl	800089c <__aeabi_ddiv>
  double speedTurns = turnsDelta / timebase;
 8001aa8:	a307      	add	r3, pc, #28	; (adr r3, 8001ac8 <GetSpeed+0x38>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fef5 	bl	800089c <__aeabi_ddiv>
  double rpms = speedTurns * 60;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <GetSpeed+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f7fe fdc7 	bl	8000648 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
  printf("RPM: %.2lf\n", rpms);
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <GetSpeed+0x50>)
 8001ac0:	f005 ffb0 	bl	8007a24 <iprintf>
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	bd08      	pop	{r3, pc}
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3fc99999 	.word	0x3fc99999
 8001ad0:	20000a94 	.word	0x20000a94
 8001ad4:	20000a98 	.word	0x20000a98
 8001ad8:	40790000 	.word	0x40790000
 8001adc:	404e0000 	.word	0x404e0000
 8001ae0:	080083ee 	.word	0x080083ee

08001ae4 <CmdEncoder2>:
{
 8001ae4:	b508      	push	{r3, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001ae6:	b948      	cbnz	r0, 8001afc <CmdEncoder2+0x18>
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <CmdEncoder2+0x1c>)
     printf("POS: %i º \n", position);
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <CmdEncoder2+0x20>)
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 8001aec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aee:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8001af2:	fa03 f181 	sxtah	r1, r3, r1
     printf("POS: %i º \n", position);
 8001af6:	1049      	asrs	r1, r1, #1
 8001af8:	f005 ff94 	bl	8007a24 <iprintf>
 }    
 8001afc:	2000      	movs	r0, #0
 8001afe:	bd08      	pop	{r3, pc}
 8001b00:	40000400 	.word	0x40000400
 8001b04:	080083fa 	.word	0x080083fa

08001b08 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	b938      	cbnz	r0, 8001b1e <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <CmdTasks+0x34>)
  p = _tasktable_start;
 8001b10:	4d0b      	ldr	r5, [pc, #44]	; (8001b40 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001b12:	4e0c      	ldr	r6, [pc, #48]	; (8001b44 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001b14:	4f0c      	ldr	r7, [pc, #48]	; (8001b48 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001b16:	f006 f821 	bl	8007b5c <puts>
  while(p != _tasktable_end) {
 8001b1a:	42b5      	cmp	r5, r6
 8001b1c:	d102      	bne.n	8001b24 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 8001b1e:	2000      	movs	r0, #0
 8001b20:	b003      	add	sp, #12
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001b24:	696b      	ldr	r3, [r5, #20]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4621      	mov	r1, r4
 8001b2a:	692b      	ldr	r3, [r5, #16]
 8001b2c:	f855 2b18 	ldr.w	r2, [r5], #24
 8001b30:	4638      	mov	r0, r7
 8001b32:	f005 ff77 	bl	8007a24 <iprintf>
    i++;
 8001b36:	3401      	adds	r4, #1
 8001b38:	e7ef      	b.n	8001b1a <CmdTasks+0x12>
 8001b3a:	bf00      	nop
 8001b3c:	08008407 	.word	0x08008407
 8001b40:	080147c0 	.word	0x080147c0
 8001b44:	080147d8 	.word	0x080147d8
 8001b48:	08008420 	.word	0x08008420

08001b4c <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 8001b50:	b1f9      	cbz	r1, 8001b92 <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001b52:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001b54:	888a      	ldrh	r2, [r1, #4]
 8001b56:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001b58:	2d10      	cmp	r5, #16
 8001b5a:	d005      	beq.n	8001b68 <DecodeReadRegister+0x1c>
 8001b5c:	2d20      	cmp	r5, #32
 8001b5e:	d005      	beq.n	8001b6c <DecodeReadRegister+0x20>
 8001b60:	2d08      	cmp	r5, #8
 8001b62:	d105      	bne.n	8001b70 <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 8001b64:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001b66:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001b68:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001b6a:	e7fc      	b.n	8001b66 <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 8001b6c:	58d0      	ldr	r0, [r2, r3]
    break;
 8001b6e:	e7fa      	b.n	8001b66 <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001b70:	6808      	ldr	r0, [r1, #0]
 8001b72:	f7ff fa99 	bl	80010a8 <Uncompress>
 8001b76:	4629      	mov	r1, r5
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <DecodeReadRegister+0x4c>)
 8001b7c:	f005 ff52 	bl	8007a24 <iprintf>
    printf(" in periphral %s!\n",
 8001b80:	6820      	ldr	r0, [r4, #0]
 8001b82:	f7ff fa91 	bl	80010a8 <Uncompress>
 8001b86:	4601      	mov	r1, r0
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <DecodeReadRegister+0x50>)
 8001b8a:	f005 ff4b 	bl	8007a24 <iprintf>
    return 0;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e7e9      	b.n	8001b66 <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 8001b92:	4608      	mov	r0, r1
 8001b94:	e7e7      	b.n	8001b66 <DecodeReadRegister+0x1a>
 8001b96:	bf00      	nop
 8001b98:	08008438 	.word	0x08008438
 8001b9c:	0800845a 	.word	0x0800845a

08001ba0 <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 8001ba0:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001ba2:	b920      	cbnz	r0, 8001bae <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <CmdVersion+0x14>)
 8001ba6:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <CmdVersion+0x18>)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <CmdVersion+0x1c>)
 8001baa:	f005 ff3b 	bl	8007a24 <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 8001bae:	2000      	movs	r0, #0
 8001bb0:	bd08      	pop	{r3, pc}
 8001bb2:	bf00      	nop
 8001bb4:	080141b5 	.word	0x080141b5
 8001bb8:	0801419c 	.word	0x0801419c
 8001bbc:	0800846d 	.word	0x0800846d

08001bc0 <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 8001bc4:	b149      	cbz	r1, 8001bda <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001bc6:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001bc8:	8888      	ldrh	r0, [r1, #4]
 8001bca:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001bcc:	2d10      	cmp	r5, #16
 8001bce:	d005      	beq.n	8001bdc <DecodeWriteRegister.isra.0+0x1c>
 8001bd0:	2d20      	cmp	r5, #32
 8001bd2:	d005      	beq.n	8001be0 <DecodeWriteRegister.isra.0+0x20>
 8001bd4:	2d08      	cmp	r5, #8
 8001bd6:	d105      	bne.n	8001be4 <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 8001bd8:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001bdc:	52c2      	strh	r2, [r0, r3]
    break;  
 8001bde:	e7fc      	b.n	8001bda <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 8001be0:	50c2      	str	r2, [r0, r3]
    break;
 8001be2:	e7fa      	b.n	8001bda <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001be4:	6808      	ldr	r0, [r1, #0]
 8001be6:	f7ff fa5f 	bl	80010a8 <Uncompress>
 8001bea:	4629      	mov	r1, r5
 8001bec:	4602      	mov	r2, r0
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <DecodeWriteRegister.isra.0+0x48>)
 8001bf0:	f005 ff18 	bl	8007a24 <iprintf>
    printf(" in periphral %s!\n",
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	f7ff fa57 	bl	80010a8 <Uncompress>
}
 8001bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 8001bfe:	4601      	mov	r1, r0
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DecodeWriteRegister.isra.0+0x4c>)
 8001c02:	f005 bf0f 	b.w	8007a24 <iprintf>
 8001c06:	bf00      	nop
 8001c08:	08008438 	.word	0x08008438
 8001c0c:	0800845a 	.word	0x0800845a

08001c10 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001c10:	2801      	cmp	r0, #1
{
 8001c12:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001c14:	d004      	beq.n	8001c20 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8001c16:	2802      	cmp	r0, #2
 8001c18:	d104      	bne.n	8001c24 <CmdTest+0x14>
    printf("testasm\n\n"
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <CmdTest+0x24>)
 8001c1c:	f005 ff9e 	bl	8007b5c <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8001c20:	2000      	movs	r0, #0
 8001c22:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8001c24:	204d      	movs	r0, #77	; 0x4d
 8001c26:	f7fe fadb 	bl	80001e0 <mytest>
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <CmdTest+0x28>)
 8001c2e:	f005 fef9 	bl	8007a24 <iprintf>
  return CmdReturnOk;
 8001c32:	e7f5      	b.n	8001c20 <CmdTest+0x10>
 8001c34:	0800847d 	.word	0x0800847d
 8001c38:	080084b6 	.word	0x080084b6

08001c3c <LoopInit>:
  P = pidP;
 8001c3c:	49aa      	ldr	r1, [pc, #680]	; (8001ee8 <LoopInit+0x2ac>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8001c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  P = pidP;
 8001c48:	e9c1 2300 	strd	r2, r3, [r1]
  D = pidD;
 8001c4c:	4da7      	ldr	r5, [pc, #668]	; (8001eec <LoopInit+0x2b0>)
 8001c4e:	49a8      	ldr	r1, [pc, #672]	; (8001ef0 <LoopInit+0x2b4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4ea8      	ldr	r6, [pc, #672]	; (8001ef4 <LoopInit+0x2b8>)
  D = pidD;
 8001c52:	2400      	movs	r4, #0
 8001c54:	e9c1 4500 	strd	r4, r5, [r1]
  I = pidI;
 8001c58:	49a7      	ldr	r1, [pc, #668]	; (8001ef8 <LoopInit+0x2bc>)
 8001c5a:	e9c1 2300 	strd	r2, r3, [r1]
  encoderCurrent = 0;
 8001c5e:	4ba7      	ldr	r3, [pc, #668]	; (8001efc <LoopInit+0x2c0>)
  errorCurrent = 0;
 8001c60:	49a7      	ldr	r1, [pc, #668]	; (8001f00 <LoopInit+0x2c4>)
  encoderCurrent = 0;
 8001c62:	2400      	movs	r4, #0
 8001c64:	601c      	str	r4, [r3, #0]
  encoderPrevious = 0;
 8001c66:	4ba7      	ldr	r3, [pc, #668]	; (8001f04 <LoopInit+0x2c8>)
  errorCurrent = 0;
 8001c68:	2200      	movs	r2, #0
  encoderPrevious = 0;
 8001c6a:	601c      	str	r4, [r3, #0]
  errorCurrent = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e9c1 2300 	strd	r2, r3, [r1]
  errorI = 0; 
 8001c72:	49a5      	ldr	r1, [pc, #660]	; (8001f08 <LoopInit+0x2cc>)
 8001c74:	e9c1 2300 	strd	r2, r3, [r1]
  errorD = 0;
 8001c78:	49a4      	ldr	r1, [pc, #656]	; (8001f0c <LoopInit+0x2d0>)
 8001c7a:	e9c1 2300 	strd	r2, r3, [r1]
  targetRPM = 0;
 8001c7e:	49a4      	ldr	r1, [pc, #656]	; (8001f10 <LoopInit+0x2d4>)
{
 8001c80:	b0ae      	sub	sp, #184	; 0xb8
  targetRPM = 0;
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
  pwmStatus = 0;
 8001c86:	4ba3      	ldr	r3, [pc, #652]	; (8001f14 <LoopInit+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	2214      	movs	r2, #20
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	a819      	add	r0, sp, #100	; 0x64
  pwmStatus = 0;
 8001c8e:	601c      	str	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f001 fd84 	bl	800379c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	9400      	str	r4, [sp, #0]
 8001c96:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6333      	str	r3, [r6, #48]	; 0x30
 8001c9e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitTypeDef gpioInitStructA = {0};
 8001ca0:	9416      	str	r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef gpioInitStructureB = {0};
 8001ca8:	2214      	movs	r2, #20
 8001caa:	4621      	mov	r1, r4
 8001cac:	a80f      	add	r0, sp, #60	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitTypeDef gpioInitStructA = {0};
 8001cb0:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitTypeDef gpioInitStructureB = {0};
 8001cb2:	f001 fd73 	bl	800379c <memset>
  GPIO_InitTypeDef gpioInitiStructureC = {0};  
 8001cb6:	2214      	movs	r2, #20
 8001cb8:	4621      	mov	r1, r4
 8001cba:	a80a      	add	r0, sp, #40	; 0x28
 8001cbc:	f001 fd6e 	bl	800379c <memset>
    HAL_GPIO_Init(GPIOA, &gpioInitStructA);
 8001cc0:	4895      	ldr	r0, [pc, #596]	; (8001f18 <LoopInit+0x2dc>)
    gpioInitStructA.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc2:	2502      	movs	r5, #2
    gpioInitStructA.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2701      	movs	r7, #1
 8001cc6:	f240 1803 	movw	r8, #259	; 0x103
    HAL_GPIO_Init(GPIOA, &gpioInitStructA);
 8001cca:	a914      	add	r1, sp, #80	; 0x50
    gpioInitStructA.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    gpioInitStructA.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd0:	9517      	str	r5, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &gpioInitStructA);
 8001cd2:	f7ff fa55 	bl	8001180 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &gpioInitStructureB);
 8001cd6:	a90f      	add	r1, sp, #60	; 0x3c
 8001cd8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    gpioInitStructureB.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	e9cd 870f 	strd	r8, r7, [sp, #60]	; 0x3c
    gpioInitStructureB.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce0:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &gpioInitStructureB);
 8001ce4:	f7ff fa4c 	bl	8001180 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &gpioInitiStructureC);
 8001ce8:	a90a      	add	r1, sp, #40	; 0x28
 8001cea:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    gpioInitiStructureC.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
    gpioInitiStructureC.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf2:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001cf6:	27c0      	movs	r7, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &gpioInitiStructureC);
 8001cf8:	f7ff fa42 	bl	8001180 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	a919      	add	r1, sp, #100	; 0x64
 8001cfe:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	e9cd 7519 	strd	r7, r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d06:	e9cd 451b 	strd	r4, r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Alternate = 2;
 8001d0a:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f7ff fa38 	bl	8001180 <HAL_GPIO_Init>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	9401      	str	r4, [sp, #4]
 8001d12:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001d14:	432b      	orrs	r3, r5
 8001d16:	6333      	str	r3, [r6, #48]	; 0x30
 8001d18:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = 2;
 8001d1a:	951d      	str	r5, [sp, #116]	; 0x74
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	402b      	ands	r3, r5
 8001d1e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	e9cd 7519 	strd	r7, r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	e9cd 451b 	strd	r4, r5, [sp, #108]	; 0x6c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	9b01      	ldr	r3, [sp, #4]
    tim1.Instance = TIM1;
 8001d2e:	4d7b      	ldr	r5, [pc, #492]	; (8001f1c <LoopInit+0x2e0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f7ff fa26 	bl	8001180 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d34:	9402      	str	r4, [sp, #8]
 8001d36:	6c73      	ldr	r3, [r6, #68]	; 0x44
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d38:	4a79      	ldr	r2, [pc, #484]	; (8001f20 <LoopInit+0x2e4>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6473      	str	r3, [r6, #68]	; 0x44
 8001d40:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	9b02      	ldr	r3, [sp, #8]
    tim1.Instance = TIM1;
 8001d4a:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <LoopInit+0x2e8>)
 8001d4c:	602b      	str	r3, [r5, #0]
 8001d4e:	68b3      	ldr	r3, [r6, #8]
    tim1.Init.RepetitionCounter = 0;
 8001d50:	616c      	str	r4, [r5, #20]
 8001d52:	f3c3 3342 	ubfx	r3, r3, #13, #3
    if (HAL_TIM_Base_Init(&tim1) != HAL_OK)
 8001d56:	4628      	mov	r0, r5
 8001d58:	5cd2      	ldrb	r2, [r2, r3]
 8001d5a:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <LoopInit+0x2ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	40d3      	lsrs	r3, r2
    tim1.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 100000 - 1;
 8001d60:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <LoopInit+0x2f0>)
 8001d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d66:	3b01      	subs	r3, #1
    tim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	e9c5 3401 	strd	r3, r4, [r5, #4]
    tim1.Init.Period = period;
 8001d6c:	f644 6320 	movw	r3, #20000	; 0x4e20
    tim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	e9c5 3403 	strd	r3, r4, [r5, #12]
    tim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	61ab      	str	r3, [r5, #24]
    if (HAL_TIM_Base_Init(&tim1) != HAL_OK)
 8001d78:	f7ff fd62 	bl	8001840 <HAL_TIM_Base_Init.constprop.0>
 8001d7c:	b110      	cbz	r0, 8001d84 <LoopInit+0x148>
      printf("Couldn't initialize timer1. \n");
 8001d7e:	486c      	ldr	r0, [pc, #432]	; (8001f30 <LoopInit+0x2f4>)
 8001d80:	f005 feec 	bl	8007b5c <puts>
  __HAL_LOCK(htim);
 8001d84:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 8089 	bne.w	8001ea0 <LoopInit+0x264>
      printf("Couldn't apply clock configuration on TIM1. \n");
 8001d8e:	4869      	ldr	r0, [pc, #420]	; (8001f34 <LoopInit+0x2f8>)
 8001d90:	f005 fee4 	bl	8007b5c <puts>
  HAL_NVIC_SetPriority((IRQn_Type) TIM1_UP_TIM10_IRQn, (uint32_t) 0, (uint32_t) 1);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2100      	movs	r1, #0
 8001d98:	2019      	movs	r0, #25
 8001d9a:	f7ff f9c3 	bl	8001124 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <LoopInit+0x2fc>)
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	601a      	str	r2, [r3, #0]
  if (htim->State != HAL_TIM_STATE_READY)
 8001da6:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d126      	bne.n	8001dfc <LoopInit+0x1c0>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dbe:	4a59      	ldr	r2, [pc, #356]	; (8001f24 <LoopInit+0x2e8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d012      	beq.n	8001dea <LoopInit+0x1ae>
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d00f      	beq.n	8001dea <LoopInit+0x1ae>
 8001dca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00b      	beq.n	8001dea <LoopInit+0x1ae>
 8001dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <LoopInit+0x1ae>
 8001dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d003      	beq.n	8001dea <LoopInit+0x1ae>
 8001de2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d104      	bne.n	8001df4 <LoopInit+0x1b8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df0:	2a06      	cmp	r2, #6
 8001df2:	d003      	beq.n	8001dfc <LoopInit+0x1c0>
    __HAL_TIM_ENABLE(htim);
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001dfc:	2500      	movs	r5, #0
  sConfig.Pulse = period/2;
 8001dfe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e02:	2260      	movs	r2, #96	; 0x60
 8001e04:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e08:	2408      	movs	r4, #8
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_1);
 8001e0a:	462a      	mov	r2, r5
 8001e0c:	a91e      	add	r1, sp, #120	; 0x78
 8001e0e:	4843      	ldr	r0, [pc, #268]	; (8001f1c <LoopInit+0x2e0>)
  sConfig.OCNIdleState =TIM_OCNIDLESTATE_RESET;
 8001e10:	9524      	str	r5, [sp, #144]	; 0x90
  sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e12:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
  sConfig.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e16:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_1);
 8001e1a:	f7ff fbdf 	bl	80015dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_2);
 8001e1e:	2204      	movs	r2, #4
 8001e20:	a91e      	add	r1, sp, #120	; 0x78
 8001e22:	483e      	ldr	r0, [pc, #248]	; (8001f1c <LoopInit+0x2e0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e24:	4f3c      	ldr	r7, [pc, #240]	; (8001f18 <LoopInit+0x2dc>)
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_2);
 8001e26:	f7ff fbd9 	bl	80015dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_3);
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	a91e      	add	r1, sp, #120	; 0x78
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4c31      	ldr	r4, [pc, #196]	; (8001ef4 <LoopInit+0x2b8>)
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_3);
 8001e30:	483a      	ldr	r0, [pc, #232]	; (8001f1c <LoopInit+0x2e0>)
 8001e32:	f7ff fbd3 	bl	80015dc <HAL_TIM_PWM_ConfigChannel>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	9503      	str	r5, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStructPWM = {0};
 8001e38:	9507      	str	r5, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6323      	str	r3, [r4, #48]	; 0x30
 8001e42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	9303      	str	r3, [sp, #12]
  GPIO_InitStructPWM.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e4c:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructPWM.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e50:	9608      	str	r6, [sp, #32]
  GPIO_InitStructPWM.Mode = GPIO_MODE_AF_PP;
 8001e52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e56:	4638      	mov	r0, r7
  GPIO_InitStructPWM.Alternate = 1;
 8001e58:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructPWM.Mode = GPIO_MODE_AF_PP;
 8001e5c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStructPWM.Alternate = 1;
 8001e60:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e64:	f7ff f98c 	bl	8001180 <HAL_GPIO_Init>
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e68:	9504      	str	r5, [sp, #16]
 8001e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e6c:	4333      	orrs	r3, r6
 8001e6e:	6423      	str	r3, [r4, #64]	; 0x40
 8001e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
  tim3.Instance = TIM3;
 8001e72:	4c32      	ldr	r4, [pc, #200]	; (8001f3c <LoopInit+0x300>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e74:	4033      	ands	r3, r6
 8001e76:	9304      	str	r3, [sp, #16]
 8001e78:	9b04      	ldr	r3, [sp, #16]
  tim3.Instance = TIM3;
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <LoopInit+0x304>)
  tim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	60a5      	str	r5, [r4, #8]
  tim3.Init.Prescaler = 0;
 8001e7e:	e9c4 3500 	strd	r3, r5, [r4]
  rc = HAL_TIM_Base_Init(&tim3);
 8001e82:	4620      	mov	r0, r4
  tim3.Init.Period = periodEncoder;
 8001e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
  tim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	e9c4 3503 	strd	r3, r5, [r4, #12]
  tim3.Init.RepetitionCounter = 0;
 8001e8c:	6165      	str	r5, [r4, #20]
  rc = HAL_TIM_Base_Init(&tim3);
 8001e8e:	f7ff fcd7 	bl	8001840 <HAL_TIM_Base_Init.constprop.0>
  if (rc != HAL_OK)
 8001e92:	4601      	mov	r1, r0
 8001e94:	b1a8      	cbz	r0, 8001ec2 <LoopInit+0x286>
      printf("Couldn't Initialize TIM3, Error Code=%u\n", rc);
 8001e96:	482b      	ldr	r0, [pc, #172]	; (8001f44 <LoopInit+0x308>)
    printf("Couldn't Start CHANNEL 2 on Encoder, Error Code=%u\n", rc);
 8001e98:	f005 fdc4 	bl	8007a24 <iprintf>
    return CmdReturnBadParameter1;
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	e096      	b.n	8001fce <LoopInit+0x392>
  tmpsmcr = htim->Instance->SMCR;
 8001ea0:	682a      	ldr	r2, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ea8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001eb2:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8001ec0:	e768      	b.n	8001d94 <LoopInit+0x158>
  encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ec2:	2303      	movs	r3, #3
  encoderConfig.IC1Polarity = 0;
 8001ec4:	e9cd 3025 	strd	r3, r0, [sp, #148]	; 0x94
  encoderConfig.IC1Prescaler = 0;
 8001ec8:	e9cd 8027 	strd	r8, r0, [sp, #156]	; 0x9c
  encoderConfig.IC2Polarity = 0;
 8001ecc:	e9cd 3029 	strd	r3, r0, [sp, #164]	; 0xa4
  encoderConfig.IC2Prescaler = 0;
 8001ed0:	e9cd 802b 	strd	r8, r0, [sp, #172]	; 0xac
  rc = HAL_TIM_Encoder_Init(&tim3, &encoderConfig);
 8001ed4:	a925      	add	r1, sp, #148	; 0x94
 8001ed6:	4620      	mov	r0, r4
  encoderConfig.IC2Filter = 3;
 8001ed8:	932d      	str	r3, [sp, #180]	; 0xb4
  rc = HAL_TIM_Encoder_Init(&tim3, &encoderConfig);
 8001eda:	f7ff fceb 	bl	80018b4 <HAL_TIM_Encoder_Init.constprop.0>
  if (rc != HAL_OK)
 8001ede:	b3a8      	cbz	r0, 8001f4c <LoopInit+0x310>
      printf("Couldn't Initialize TIM3 Encoder, Error COde=%u\n",rc);
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	4819      	ldr	r0, [pc, #100]	; (8001f48 <LoopInit+0x30c>)
 8001ee4:	e7d8      	b.n	8001e98 <LoopInit+0x25c>
 8001ee6:	bf00      	nop
 8001ee8:	20000230 	.word	0x20000230
 8001eec:	3ff00000 	.word	0x3ff00000
 8001ef0:	20000218 	.word	0x20000218
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	20000220 	.word	0x20000220
 8001efc:	20000a94 	.word	0x20000a94
 8001f00:	20000aa0 	.word	0x20000aa0
 8001f04:	20000a98 	.word	0x20000a98
 8001f08:	20000ab0 	.word	0x20000ab0
 8001f0c:	20000aa8 	.word	0x20000aa8
 8001f10:	20000c48 	.word	0x20000c48
 8001f14:	20000c3c 	.word	0x20000c3c
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	20000c50 	.word	0x20000c50
 8001f20:	0800c028 	.word	0x0800c028
 8001f24:	40010000 	.word	0x40010000
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	000186a0 	.word	0x000186a0
 8001f30:	080084c4 	.word	0x080084c4
 8001f34:	080084e1 	.word	0x080084e1
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	20000c98 	.word	0x20000c98
 8001f40:	40000400 	.word	0x40000400
 8001f44:	0800850e 	.word	0x0800850e
 8001f48:	08008537 	.word	0x08008537
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f4c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f50:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f54:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f58:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f5c:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f5e:	b2db      	uxtb	r3, r3
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f60:	d138      	bne.n	8001fd4 <LoopInit+0x398>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d136      	bne.n	8001fd4 <LoopInit+0x398>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f66:	6823      	ldr	r3, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f68:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f6c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  TIMx->CCER &= ~tmp;
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f88:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f8c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f90:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f98:	2901      	cmp	r1, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f9a:	b2d2      	uxtb	r2, r2
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f9c:	d11d      	bne.n	8001fda <LoopInit+0x39e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f9e:	2a01      	cmp	r2, #1
 8001fa0:	d11b      	bne.n	8001fda <LoopInit+0x39e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa2:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa6:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	f022 0210 	bic.w	r2, r2, #16
 8001fb0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	f042 0210 	orr.w	r2, r2, #16
 8001fb8:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	61bb      	str	r3, [r7, #24]
}
 8001fce:	b02e      	add	sp, #184	; 0xb8
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printf("Couldn't Start CHANNEL 1 on Encoder, Error Code=%u\n",rc);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <LoopInit+0x3a4>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	e75e      	b.n	8001e98 <LoopInit+0x25c>
    printf("Couldn't Start CHANNEL 2 on Encoder, Error Code=%u\n", rc);
 8001fda:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <LoopInit+0x3a8>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	e75b      	b.n	8001e98 <LoopInit+0x25c>
 8001fe0:	08008568 	.word	0x08008568
 8001fe4:	0800859c 	.word	0x0800859c

08001fe8 <EncoderInit>:
{
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001fec:	4605      	mov	r5, r0
{
 8001fee:	b09a      	sub	sp, #104	; 0x68
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	f040 8150 	bne.w	8002296 <EncoderInit+0x2ae>
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff6:	4baa      	ldr	r3, [pc, #680]	; (80022a0 <EncoderInit+0x2b8>)
 8001ff8:	9002      	str	r0, [sp, #8]
 8001ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  htim2.Instance = TIM1;
 8001ffc:	4ca9      	ldr	r4, [pc, #676]	; (80022a4 <EncoderInit+0x2bc>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800200a:	4602      	mov	r2, r0
 800200c:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002010:	201d      	movs	r0, #29
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002012:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002014:	f7ff f886 	bl	8001124 <HAL_NVIC_SetPriority>
 8002018:	4ba3      	ldr	r3, [pc, #652]	; (80022a8 <EncoderInit+0x2c0>)
 800201a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800201e:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002020:	4629      	mov	r1, r5
 8002022:	221c      	movs	r2, #28
 8002024:	a80a      	add	r0, sp, #40	; 0x28
 8002026:	f001 fbb9 	bl	800379c <memset>
  htim2.Init.Prescaler = 49;
 800202a:	4aa0      	ldr	r2, [pc, #640]	; (80022ac <EncoderInit+0x2c4>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	60a5      	str	r5, [r4, #8]
  htim2.Init.Prescaler = 49;
 800202e:	2331      	movs	r3, #49	; 0x31
 8002030:	e9c4 2300 	strd	r2, r3, [r4]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8002034:	4620      	mov	r0, r4
  htim2.Init.Period = 199;
 8002036:	23c7      	movs	r3, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	e9cd 5503 	strd	r5, r5, [sp, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	e9c4 5505 	strd	r5, r5, [r4, #20]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8002044:	f7ff fbfc 	bl	8001840 <HAL_TIM_Base_Init.constprop.0>
   if(rcOne!= HAL_OK)
 8002048:	b110      	cbz	r0, 8002050 <EncoderInit+0x68>
    printf("Error");
 800204a:	4899      	ldr	r0, [pc, #612]	; (80022b0 <EncoderInit+0x2c8>)
 800204c:	f005 fcea 	bl	8007a24 <iprintf>
  __HAL_LOCK(htim);
 8002050:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	f040 808d 	bne.w	8002174 <EncoderInit+0x18c>
    printf("Error");
 800205a:	4895      	ldr	r0, [pc, #596]	; (80022b0 <EncoderInit+0x2c8>)
 800205c:	f005 fce2 	bl	8007a24 <iprintf>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002060:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002064:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002068:	b90b      	cbnz	r3, 800206e <EncoderInit+0x86>
    htim->Lock = HAL_UNLOCKED;
 800206a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800206e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002070:	4990      	ldr	r1, [pc, #576]	; (80022b4 <EncoderInit+0x2cc>)
 8002072:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002078:	f7ff fb62 	bl	8001740 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207c:	2301      	movs	r3, #1
 800207e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8002082:	4888      	ldr	r0, [pc, #544]	; (80022a4 <EncoderInit+0x2bc>)
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002088:	a903      	add	r1, sp, #12
 800208a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800208e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002092:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002096:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800209a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800209e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80020a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80020a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	e9cd 3303 	strd	r3, r3, [sp, #12]
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80020b0:	f7ff fb94 	bl	80017dc <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
  if(rcOne!= HAL_OK)
 80020b4:	b110      	cbz	r0, 80020bc <EncoderInit+0xd4>
    printf("Error");
 80020b6:	487e      	ldr	r0, [pc, #504]	; (80022b0 <EncoderInit+0x2c8>)
 80020b8:	f005 fcb4 	bl	8007a24 <iprintf>
  sConfigOC.Pulse = 0;
 80020bc:	2200      	movs	r2, #0
 80020be:	2360      	movs	r3, #96	; 0x60
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80020c0:	4878      	ldr	r0, [pc, #480]	; (80022a4 <EncoderInit+0x2bc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020c2:	9210      	str	r2, [sp, #64]	; 0x40
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80020c4:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.Pulse = 0;
 80020c6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ca:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ce:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80020d2:	f7ff fa83 	bl	80015dc <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 80020d6:	b110      	cbz	r0, 80020de <EncoderInit+0xf6>
    printf("Error");
 80020d8:	4875      	ldr	r0, [pc, #468]	; (80022b0 <EncoderInit+0x2c8>)
 80020da:	f005 fca3 	bl	8007a24 <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80020de:	4871      	ldr	r0, [pc, #452]	; (80022a4 <EncoderInit+0x2bc>)
 80020e0:	2204      	movs	r2, #4
 80020e2:	a90a      	add	r1, sp, #40	; 0x28
 80020e4:	f7ff fa7a 	bl	80015dc <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 80020e8:	b110      	cbz	r0, 80020f0 <EncoderInit+0x108>
    printf("Error");
 80020ea:	4871      	ldr	r0, [pc, #452]	; (80022b0 <EncoderInit+0x2c8>)
 80020ec:	f005 fc9a 	bl	8007a24 <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80020f0:	486c      	ldr	r0, [pc, #432]	; (80022a4 <EncoderInit+0x2bc>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	a90a      	add	r1, sp, #40	; 0x28
 80020f6:	f7ff fa71 	bl	80015dc <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 80020fa:	b110      	cbz	r0, 8002102 <EncoderInit+0x11a>
    printf("Error");
 80020fc:	486c      	ldr	r0, [pc, #432]	; (80022b0 <EncoderInit+0x2c8>)
 80020fe:	f005 fc91 	bl	8007a24 <iprintf>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002102:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d045      	beq.n	8002196 <EncoderInit+0x1ae>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002110:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002112:	2300      	movs	r3, #0
 8002114:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   __HAL_RCC_TIM3_CLK_ENABLE();
 8002118:	2500      	movs	r5, #0
 800211a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80022a0 <EncoderInit+0x2b8>
 800211e:	9501      	str	r5, [sp, #4]
 8002120:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
  htim3.Instance = TIM3;
 8002124:	4c64      	ldr	r4, [pc, #400]	; (80022b8 <EncoderInit+0x2d0>)
   __HAL_RCC_TIM3_CLK_ENABLE();
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 800212e:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	9301      	str	r3, [sp, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002138:	4629      	mov	r1, r5
 800213a:	2218      	movs	r2, #24
 800213c:	a814      	add	r0, sp, #80	; 0x50
   __HAL_RCC_TIM3_CLK_ENABLE();
 800213e:	9b01      	ldr	r3, [sp, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002140:	f001 fb2c 	bl	800379c <memset>
  htim3.Instance = TIM3;
 8002144:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <EncoderInit+0x2d4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 0;
 8002148:	e9c4 3500 	strd	r3, r5, [r4]
  htim3.Init.Period = 65535;
 800214c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002150:	2602      	movs	r6, #2
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002152:	2701      	movs	r7, #1
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002158:	a911      	add	r1, sp, #68	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800215a:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800215c:	4620      	mov	r0, r4
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800215e:	e9cd 3611 	strd	r3, r6, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002162:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002166:	61a5      	str	r5, [r4, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002168:	9713      	str	r7, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800216a:	f7ff fba3 	bl	80018b4 <HAL_TIM_Encoder_Init.constprop.0>
 800216e:	b1b0      	cbz	r0, 800219e <EncoderInit+0x1b6>
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002172:	e7fe      	b.n	8002172 <EncoderInit+0x18a>
  tmpsmcr = htim->Instance->SMCR;
 8002174:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800217c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002186:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002188:	2301      	movs	r3, #1
 800218a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800218e:	2300      	movs	r3, #0
 8002190:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if(rcOne!= HAL_OK)
 8002194:	e764      	b.n	8002060 <EncoderInit+0x78>
    printf("Error");
 8002196:	4846      	ldr	r0, [pc, #280]	; (80022b0 <EncoderInit+0x2c8>)
 8002198:	f005 fc44 	bl	8007a24 <iprintf>
 800219c:	e7bc      	b.n	8002118 <EncoderInit+0x130>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219e:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a2:	a903      	add	r1, sp, #12
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff fb19 	bl	80017dc <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
 80021aa:	4605      	mov	r5, r0
 80021ac:	b108      	cbz	r0, 80021b2 <EncoderInit+0x1ca>
 80021ae:	b672      	cpsid	i
 80021b0:	e7fe      	b.n	80021b0 <EncoderInit+0x1c8>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	9000      	str	r0, [sp, #0]
 80021b4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 80021c0:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80022c0 <EncoderInit+0x2d8>
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021c8:	9709      	str	r7, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 80021d2:	e9cd 0007 	strd	r0, r0, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	e9cd 3605 	strd	r3, r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f7fe ffcd 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 80021e6:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f7fe ffc6 	bl	8001180 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f508 6080 	add.w	r0, r8, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	e9cd 7705 	strd	r7, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002200:	f7fe ffbe 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;  // encoder pin configuration
 8002204:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8002206:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002210:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8002212:	f7fe ffb5 	bl	8001180 <HAL_GPIO_Init>
 8002216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221a:	f8c8 3018 	str.w	r3, [r8, #24]
 800221e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002222:	f8c8 3018 	str.w	r3, [r8, #24]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002226:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800222a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800222e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002236:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002238:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800223a:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800223c:	b2db      	uxtb	r3, r3
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800223e:	d12a      	bne.n	8002296 <EncoderInit+0x2ae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002240:	2901      	cmp	r1, #1
 8002242:	d128      	bne.n	8002296 <EncoderInit+0x2ae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002244:	2a01      	cmp	r2, #1
 8002246:	d126      	bne.n	8002296 <EncoderInit+0x2ae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002248:	2b01      	cmp	r3, #1
 800224a:	d124      	bne.n	8002296 <EncoderInit+0x2ae>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800224c:	6823      	ldr	r3, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800224e:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002252:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002256:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800225a:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	f042 0210 	orr.w	r2, r2, #16
 800227c:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	f042 0202 	orr.w	r2, r2, #2
 8002284:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	f042 0204 	orr.w	r2, r2, #4
 800228c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	2000      	movs	r0, #0
 8002298:	b01a      	add	sp, #104	; 0x68
 800229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	20000ac8 	.word	0x20000ac8
 80022a8:	e000e100 	.word	0xe000e100
 80022ac:	40010000 	.word	0x40010000
 80022b0:	080085d0 	.word	0x080085d0
 80022b4:	20000acc 	.word	0x20000acc
 80022b8:	20000b10 	.word	0x20000b10
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40020000 	.word	0x40020000

080022c4 <SetSpeed>:
{
 80022c4:	b5d0      	push	{r4, r6, r7, lr}

/* Fetch an double argument */
int fetch_double_arg(double *dest)
{
  char *p;
  p = strtok(NULL,SEPS);
 80022c6:	4935      	ldr	r1, [pc, #212]	; (800239c <SetSpeed+0xd8>)
 80022c8:	2000      	movs	r0, #0
 80022ca:	f002 fdcf 	bl	8004e6c <strtok>
  if(p == NULL) {
 80022ce:	4604      	mov	r4, r0
 80022d0:	b920      	cbnz	r0, 80022dc <SetSpeed+0x18>
    printf("Please provide speed between 1 and 90.");
 80022d2:	4833      	ldr	r0, [pc, #204]	; (80023a0 <SetSpeed+0xdc>)
 80022d4:	f005 fba6 	bl	8007a24 <iprintf>
  return CmdReturnOk;
 80022d8:	2000      	movs	r0, #0
}
 80022da:	bdd0      	pop	{r4, r6, r7, pc}
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = strtod(p,NULL);
 80022dc:	2100      	movs	r1, #0
 80022de:	f002 fdb9 	bl	8004e54 <strtod>

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 80022e2:	4620      	mov	r0, r4
  *dest = strtod(p,NULL);
 80022e4:	ec57 6b10 	vmov	r6, r7, d0
  cmdArgs = p + strlen(p) + 1;
 80022e8:	f7fd ff94 	bl	8000214 <strlen>
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <SetSpeed+0xe0>)
 80022ee:	3001      	adds	r0, #1
 80022f0:	4420      	add	r0, r4
 80022f2:	6018      	str	r0, [r3, #0]
    if (desiredSpeed > 1.00 && desiredSpeed <= 90.00)
 80022f4:	2200      	movs	r2, #0
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <SetSpeed+0xe4>)
 80022f8:	4630      	mov	r0, r6
 80022fa:	4639      	mov	r1, r7
 80022fc:	f7fe fc34 	bl	8000b68 <__aeabi_dcmpgt>
 8002300:	2800      	cmp	r0, #0
 8002302:	d02f      	beq.n	8002364 <SetSpeed+0xa0>
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <SetSpeed+0xe8>)
 8002306:	2200      	movs	r2, #0
 8002308:	4630      	mov	r0, r6
 800230a:	4639      	mov	r1, r7
 800230c:	f7fe fc18 	bl	8000b40 <__aeabi_dcmple>
 8002310:	b340      	cbz	r0, 8002364 <SetSpeed+0xa0>
      targetRPM = desiredSpeed;
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <SetSpeed+0xec>)
 8002314:	e9c3 6700 	strd	r6, r7, [r3]
      pwmStatus = 1;
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <SetSpeed+0xf0>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    GPIOx->BSRR = GPIO_Pin;
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <SetSpeed+0xf4>)
 8002320:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002326:	619a      	str	r2, [r3, #24]
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002328:	4b24      	ldr	r3, [pc, #144]	; (80023bc <SetSpeed+0xf8>)
 800232a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800232e:	2a01      	cmp	r2, #1
 8002330:	d1d2      	bne.n	80022d8 <SetSpeed+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002338:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~tmp;
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <SetSpeed+0xfc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d10e      	bne.n	800236e <SetSpeed+0xaa>
    __HAL_TIM_MOE_ENABLE(htim);
 8002350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	2a06      	cmp	r2, #6
 8002360:	d117      	bne.n	8002392 <SetSpeed+0xce>
 8002362:	e7b9      	b.n	80022d8 <SetSpeed+0x14>
      printf("Speed can't be more then 90. Please provide in Range 1 to 90.");
 8002364:	4817      	ldr	r0, [pc, #92]	; (80023c4 <SetSpeed+0x100>)
 8002366:	f005 fb5d 	bl	8007a24 <iprintf>
      return CmdReturnBadParameter1;
 800236a:	2004      	movs	r0, #4
 800236c:	e7b5      	b.n	80022da <SetSpeed+0x16>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d0f1      	beq.n	8002358 <SetSpeed+0x94>
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <SetSpeed+0x104>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d0ee      	beq.n	8002358 <SetSpeed+0x94>
 800237a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800237e:	4293      	cmp	r3, r2
 8002380:	d0ea      	beq.n	8002358 <SetSpeed+0x94>
 8002382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002386:	4293      	cmp	r3, r2
 8002388:	d0e6      	beq.n	8002358 <SetSpeed+0x94>
 800238a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800238e:	4293      	cmp	r3, r2
 8002390:	d0e2      	beq.n	8002358 <SetSpeed+0x94>
    __HAL_TIM_ENABLE(htim);
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e79d      	b.n	80022d8 <SetSpeed+0x14>
 800239c:	080085d6 	.word	0x080085d6
 80023a0:	080085dd 	.word	0x080085dd
 80023a4:	20000a84 	.word	0x20000a84
 80023a8:	3ff00000 	.word	0x3ff00000
 80023ac:	40568000 	.word	0x40568000
 80023b0:	20000c48 	.word	0x20000c48
 80023b4:	20000c3c 	.word	0x20000c3c
 80023b8:	40020000 	.word	0x40020000
 80023bc:	20000c50 	.word	0x20000c50
 80023c0:	40010000 	.word	0x40010000
 80023c4:	08008604 	.word	0x08008604
 80023c8:	40000400 	.word	0x40000400

080023cc <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80023cc:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80023ce:	4909      	ldr	r1, [pc, #36]	; (80023f4 <fetch_string_arg+0x28>)
{
 80023d0:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f002 fd4a 	bl	8004e6c <strtok>
  if(p == NULL) {
 80023d8:	4604      	mov	r4, r0
 80023da:	b140      	cbz	r0, 80023ee <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80023dc:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 80023de:	f7fd ff19 	bl	8000214 <strlen>
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <fetch_string_arg+0x2c>)
 80023e4:	3001      	adds	r0, #1
 80023e6:	4404      	add	r4, r0
 80023e8:	601c      	str	r4, [r3, #0]
  return 0;
 80023ea:	2000      	movs	r0, #0
}
 80023ec:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80023ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f2:	e7fb      	b.n	80023ec <fetch_string_arg+0x20>
 80023f4:	080085d6 	.word	0x080085d6
 80023f8:	20000a84 	.word	0x20000a84

080023fc <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002400:	460c      	mov	r4, r1
 8002402:	b086      	sub	sp, #24
 8002404:	4616      	mov	r6, r2
 8002406:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8002408:	4605      	mov	r5, r0
 800240a:	2800      	cmp	r0, #0
 800240c:	d046      	beq.n	800249c <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800240e:	6800      	ldr	r0, [r0, #0]
 8002410:	f7fe fe4a 	bl	80010a8 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8002414:	88aa      	ldrh	r2, [r5, #4]
 8002416:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002418:	9201      	str	r2, [sp, #4]
 800241a:	79ab      	ldrb	r3, [r5, #6]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4601      	mov	r1, r0
 8002420:	4633      	mov	r3, r6
 8002422:	4820      	ldr	r0, [pc, #128]	; (80024a4 <DecodeRegister+0xa8>)
 8002424:	4632      	mov	r2, r6
 8002426:	f005 fafd 	bl	8007a24 <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 800242a:	68ac      	ldr	r4, [r5, #8]
 800242c:	b3a4      	cbz	r4, 8002498 <DecodeRegister+0x9c>
 800242e:	b3af      	cbz	r7, 800249c <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002430:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80024a8 <DecodeRegister+0xac>
 8002434:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80024ac <DecodeRegister+0xb0>
 8002438:	f8df a074 	ldr.w	sl, [pc, #116]	; 80024b0 <DecodeRegister+0xb4>
 800243c:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 800243e:	2700      	movs	r7, #0
 8002440:	89ab      	ldrh	r3, [r5, #12]
 8002442:	429f      	cmp	r7, r3
 8002444:	d305      	bcc.n	8002452 <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8002446:	200a      	movs	r0, #10
  }

}
 8002448:	b006      	add	sp, #24
 800244a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 800244e:	f005 bb01 	b.w	8007a54 <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8002452:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002456:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800245a:	2301      	movs	r3, #1
 800245c:	4093      	lsls	r3, r2
 800245e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8002462:	3b01      	subs	r3, #1
 8002464:	fa26 f202 	lsr.w	r2, r6, r2
 8002468:	4013      	ands	r3, r2
 800246a:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800246c:	f7fe fe1c 	bl	80010a8 <Uncompress>
	 (unsigned int)(f->width),
 8002470:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002474:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 8002478:	9b05      	ldr	r3, [sp, #20]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	4601      	mov	r1, r0
 800247e:	2a01      	cmp	r2, #1
 8002480:	bf8c      	ite	hi
 8002482:	4640      	movhi	r0, r8
 8002484:	4648      	movls	r0, r9
 8002486:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	4650      	mov	r0, sl
 800248e:	f005 fac9 	bl	8007a24 <iprintf>
    for(i=0; i<r->numFields; i++) {
 8002492:	3701      	adds	r7, #1
 8002494:	3408      	adds	r4, #8
 8002496:	e7d3      	b.n	8002440 <DecodeRegister+0x44>
  if(decodeFields) {
 8002498:	2f00      	cmp	r7, #0
 800249a:	d1d4      	bne.n	8002446 <DecodeRegister+0x4a>
}
 800249c:	b006      	add	sp, #24
 800249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a2:	bf00      	nop
 80024a4:	0800864e 	.word	0x0800864e
 80024a8:	08008642 	.word	0x08008642
 80024ac:	08008648 	.word	0x08008648
 80024b0:	08008689 	.word	0x08008689

080024b4 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80024b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b8:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80024ba:	6800      	ldr	r0, [r0, #0]
{
 80024bc:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80024be:	f7fe fdf3 	bl	80010a8 <Uncompress>
 80024c2:	6862      	ldr	r2, [r4, #4]
 80024c4:	4601      	mov	r1, r0
 80024c6:	480e      	ldr	r0, [pc, #56]	; (8002500 <DecodePeripheral+0x4c>)
 80024c8:	f005 faac 	bl	8007a24 <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 80024cc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80024d0:	f1b8 0f00 	cmp.w	r8, #0
 80024d4:	d112      	bne.n	80024fc <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 80024d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 80024da:	4639      	mov	r1, r7
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff fb35 	bl	8001b4c <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 80024e2:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 80024e4:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 80024e6:	4633      	mov	r3, r6
 80024e8:	4638      	mov	r0, r7
 80024ea:	f7ff ff87 	bl	80023fc <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 80024ee:	3501      	adds	r5, #1
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	429d      	cmp	r5, r3
 80024f4:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 80024f8:	d3ef      	bcc.n	80024da <DecodePeripheral+0x26>
 80024fa:	e7ec      	b.n	80024d6 <DecodePeripheral+0x22>
 80024fc:	2500      	movs	r5, #0
 80024fe:	e7f7      	b.n	80024f0 <DecodePeripheral+0x3c>
 8002500:	080086b2 	.word	0x080086b2

08002504 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002508:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 800250a:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 800250c:	460e      	mov	r6, r1
  printf("\t");
 800250e:	f005 faa1 	bl	8007a54 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8002512:	4f11      	ldr	r7, [pc, #68]	; (8002558 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8002514:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800255c <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8002518:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002560 <DecodePrintRegisters+0x5c>
 800251c:	3510      	adds	r5, #16
  col = 8;
 800251e:	2408      	movs	r4, #8
  while(count--) {
 8002520:	3e01      	subs	r6, #1
 8002522:	d201      	bcs.n	8002528 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8002524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8002528:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800252c:	f7fe fdbc 	bl	80010a8 <Uncompress>
 8002530:	4601      	mov	r1, r0
 8002532:	4638      	mov	r0, r7
 8002534:	f005 fa76 	bl	8007a24 <iprintf>
 8002538:	4420      	add	r0, r4
 800253a:	b2c4      	uxtb	r4, r0
    if(count) {
 800253c:	b156      	cbz	r6, 8002554 <DecodePrintRegisters+0x50>
      col += printf(", ");
 800253e:	4640      	mov	r0, r8
 8002540:	f005 fa70 	bl	8007a24 <iprintf>
 8002544:	4420      	add	r0, r4
 8002546:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8002548:	2c46      	cmp	r4, #70	; 0x46
 800254a:	d903      	bls.n	8002554 <DecodePrintRegisters+0x50>
	printf("\n\t");
 800254c:	4648      	mov	r0, r9
 800254e:	f005 fa69 	bl	8007a24 <iprintf>
	col = 8;
 8002552:	2408      	movs	r4, #8
    r++;
 8002554:	3510      	adds	r5, #16
 8002556:	e7e3      	b.n	8002520 <DecodePrintRegisters+0x1c>
 8002558:	08008457 	.word	0x08008457
 800255c:	0800864b 	.word	0x0800864b
 8002560:	080086da 	.word	0x080086da

08002564 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 8002564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 8002568:	2009      	movs	r0, #9
 800256a:	f005 fa73 	bl	8007a54 <putchar>
  for(; p->name != NULL; p++) {
 800256e:	4d0f      	ldr	r5, [pc, #60]	; (80025ac <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 8002570:	4e0f      	ldr	r6, [pc, #60]	; (80025b0 <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 8002572:	4f10      	ldr	r7, [pc, #64]	; (80025b4 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 8002574:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80025b8 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 8002578:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 800257a:	6828      	ldr	r0, [r5, #0]
 800257c:	b908      	cbnz	r0, 8002582 <DecodePrintPeripherals.constprop.0+0x1e>
}
 800257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8002582:	f7fe fd91 	bl	80010a8 <Uncompress>
 8002586:	4601      	mov	r1, r0
 8002588:	4630      	mov	r0, r6
 800258a:	f005 fa4b 	bl	8007a24 <iprintf>
    if((p+1)->name != NULL) {
 800258e:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8002590:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8002592:	b14b      	cbz	r3, 80025a8 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 8002594:	4638      	mov	r0, r7
 8002596:	f005 fa45 	bl	8007a24 <iprintf>
 800259a:	4404      	add	r4, r0
      if(col > 70) {
 800259c:	2c46      	cmp	r4, #70	; 0x46
 800259e:	d903      	bls.n	80025a8 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 80025a0:	4640      	mov	r0, r8
 80025a2:	f005 fa3f 	bl	8007a24 <iprintf>
	col = 8;
 80025a6:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 80025a8:	3510      	adds	r5, #16
 80025aa:	e7e6      	b.n	800257a <DecodePrintPeripherals.constprop.0+0x16>
 80025ac:	08010bfc 	.word	0x08010bfc
 80025b0:	08008457 	.word	0x08008457
 80025b4:	0800864b 	.word	0x0800864b
 80025b8:	080086da 	.word	0x080086da

080025bc <TaskInput>:
{
 80025bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 80025c0:	4d6b      	ldr	r5, [pc, #428]	; (8002770 <TaskInput+0x1b4>)
 80025c2:	682b      	ldr	r3, [r5, #0]
 80025c4:	b123      	cbz	r3, 80025d0 <TaskInput+0x14>
    printf("ARMON>");
 80025c6:	486b      	ldr	r0, [pc, #428]	; (8002774 <TaskInput+0x1b8>)
 80025c8:	f005 fa2c 	bl	8007a24 <iprintf>
    printPrompt = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f10d 010f 	add.w	r1, sp, #15
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fd40 	bl	800105c <TerminalRead>
  if(rc) goto ProcessCharacter;
 80025dc:	2800      	cmp	r0, #0
 80025de:	d054      	beq.n	800268a <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 80025e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d001      	beq.n	80025ec <TaskInput+0x30>
 80025e8:	2b7f      	cmp	r3, #127	; 0x7f
 80025ea:	d115      	bne.n	8002618 <TaskInput+0x5c>
 80025ec:	4c62      	ldr	r4, [pc, #392]	; (8002778 <TaskInput+0x1bc>)
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	b192      	cbz	r2, 8002618 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 80025f2:	4862      	ldr	r0, [pc, #392]	; (800277c <TaskInput+0x1c0>)
 80025f4:	f005 fa16 	bl	8007a24 <iprintf>
    buf--;     /* Then remove it from the buffer */
 80025f8:	4a61      	ldr	r2, [pc, #388]	; (8002780 <TaskInput+0x1c4>)
 80025fa:	6813      	ldr	r3, [r2, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	3b01      	subs	r3, #1
 8002604:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8002606:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800260a:	f1a3 020d 	sub.w	r2, r3, #13
 800260e:	4253      	negs	r3, r2
 8002610:	4153      	adcs	r3, r2
 8002612:	4a5c      	ldr	r2, [pc, #368]	; (8002784 <TaskInput+0x1c8>)
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e038      	b.n	800268a <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8002618:	2b21      	cmp	r3, #33	; 0x21
 800261a:	d12a      	bne.n	8002672 <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 800261c:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <TaskInput+0x1cc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8002624:	4c59      	ldr	r4, [pc, #356]	; (800278c <TaskInput+0x1d0>)
 8002626:	495a      	ldr	r1, [pc, #360]	; (8002790 <TaskInput+0x1d4>)
 8002628:	4620      	mov	r0, r4
 800262a:	f005 fab9 	bl	8007ba0 <strcpy>
      printf("%s",input);
 800262e:	4621      	mov	r1, r4
 8002630:	4858      	ldr	r0, [pc, #352]	; (8002794 <TaskInput+0x1d8>)
 8002632:	f005 f9f7 	bl	8007a24 <iprintf>
      count = strlen(input);
 8002636:	4620      	mov	r0, r4
 8002638:	f7fd fdec 	bl	8000214 <strlen>
 800263c:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <TaskInput+0x1bc>)
 800263e:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <TaskInput+0x1c4>)
 8002642:	4404      	add	r4, r0
 8002644:	601c      	str	r4, [r3, #0]
    printf("\n");
 8002646:	200a      	movs	r0, #10
 8002648:	f005 fa04 	bl	8007a54 <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 800264c:	494f      	ldr	r1, [pc, #316]	; (800278c <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800264e:	4c52      	ldr	r4, [pc, #328]	; (8002798 <TaskInput+0x1dc>)
  i = len;
 8002650:	2350      	movs	r3, #80	; 0x50
 8002652:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8002654:	3b01      	subs	r3, #1
 8002656:	1c5f      	adds	r7, r3, #1
 8002658:	780a      	ldrb	r2, [r1, #0]
 800265a:	4608      	mov	r0, r1
 800265c:	f101 0101 	add.w	r1, r1, #1
 8002660:	d036      	beq.n	80026d0 <TaskInput+0x114>
 8002662:	2a00      	cmp	r2, #0
 8002664:	d060      	beq.n	8002728 <TaskInput+0x16c>
 8002666:	5d12      	ldrb	r2, [r2, r4]
 8002668:	0717      	lsls	r7, r2, #28
 800266a:	d4f3      	bmi.n	8002654 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 800266c:	2b00      	cmp	r3, #0
 800266e:	d130      	bne.n	80026d2 <TaskInput+0x116>
 8002670:	e05a      	b.n	8002728 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 8002672:	4a49      	ldr	r2, [pc, #292]	; (8002798 <TaskInput+0x1dc>)
 8002674:	5c9a      	ldrb	r2, [r3, r2]
 8002676:	f012 0f97 	tst.w	r2, #151	; 0x97
 800267a:	d015      	beq.n	80026a8 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 800267c:	493e      	ldr	r1, [pc, #248]	; (8002778 <TaskInput+0x1bc>)
 800267e:	680a      	ldr	r2, [r1, #0]
 8002680:	2a4f      	cmp	r2, #79	; 0x4f
 8002682:	d905      	bls.n	8002690 <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 8002684:	2007      	movs	r0, #7
 8002686:	f005 f9e5 	bl	8007a54 <putchar>
}
 800268a:	b004      	add	sp, #16
 800268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 8002690:	4c3b      	ldr	r4, [pc, #236]	; (8002780 <TaskInput+0x1c4>)
 8002692:	6820      	ldr	r0, [r4, #0]
 8002694:	7003      	strb	r3, [r0, #0]
 8002696:	1c45      	adds	r5, r0, #1
      count++;
 8002698:	3201      	adds	r2, #1
      printf("%c",c);
 800269a:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 800269e:	6025      	str	r5, [r4, #0]
      count++;
 80026a0:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 80026a2:	f005 f9d7 	bl	8007a54 <putchar>
 80026a6:	e7ae      	b.n	8002606 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 80026a8:	2b0d      	cmp	r3, #13
 80026aa:	d005      	beq.n	80026b8 <TaskInput+0xfc>
 80026ac:	2b0a      	cmp	r3, #10
 80026ae:	d1aa      	bne.n	8002606 <TaskInput+0x4a>
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <TaskInput+0x1c8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1a6      	bne.n	8002606 <TaskInput+0x4a>
    *buf = '\0';
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <TaskInput+0x1c4>)
    strcpy(input_b,input);
 80026ba:	4934      	ldr	r1, [pc, #208]	; (800278c <TaskInput+0x1d0>)
    *buf = '\0';
 80026bc:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80026be:	4834      	ldr	r0, [pc, #208]	; (8002790 <TaskInput+0x1d4>)
    *buf = '\0';
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80026c4:	f005 fa6c 	bl	8007ba0 <strcpy>
    saved = 1;
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <TaskInput+0x1cc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e7ba      	b.n	8002646 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 80026d0:	b352      	cbz	r2, 8002728 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 80026d2:	4932      	ldr	r1, [pc, #200]	; (800279c <TaskInput+0x1e0>)
 80026d4:	f002 fbca 	bl	8004e6c <strtok>
  if(p==NULL) {
 80026d8:	4604      	mov	r4, r0
 80026da:	b920      	cbnz	r0, 80026e6 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80026dc:	4930      	ldr	r1, [pc, #192]	; (80027a0 <TaskInput+0x1e4>)
 80026de:	4831      	ldr	r0, [pc, #196]	; (80027a4 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 80026e0:	f005 f9a0 	bl	8007a24 <iprintf>
  return CmdReturnNotFound;
 80026e4:	e020      	b.n	8002728 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 80026e6:	4930      	ldr	r1, [pc, #192]	; (80027a8 <TaskInput+0x1ec>)
 80026e8:	f005 fa40 	bl	8007b6c <strcasecmp>
 80026ec:	bb58      	cbnz	r0, 8002746 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 80026ee:	492b      	ldr	r1, [pc, #172]	; (800279c <TaskInput+0x1e0>)
 80026f0:	f002 fbbc 	bl	8004e6c <strtok>
    if(p == NULL) {
 80026f4:	4604      	mov	r4, r0
 80026f6:	b318      	cbz	r0, 8002740 <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 80026f8:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7fd fd89 	bl	8000214 <strlen>
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8002704:	4f2a      	ldr	r7, [pc, #168]	; (80027b0 <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8002706:	3001      	adds	r0, #1
 8002708:	4420      	add	r0, r4
 800270a:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	b9e9      	cbnz	r1, 800274c <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8002710:	4828      	ldr	r0, [pc, #160]	; (80027b4 <TaskInput+0x1f8>)
 8002712:	4621      	mov	r1, r4
 8002714:	e7e4      	b.n	80026e0 <TaskInput+0x124>
	if(t->help != NULL) {
 8002716:	68a2      	ldr	r2, [r4, #8]
 8002718:	b172      	cbz	r2, 8002738 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800271a:	4638      	mov	r0, r7
 800271c:	f005 f982 	bl	8007a24 <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8002720:	340c      	adds	r4, #12
 8002722:	6821      	ldr	r1, [r4, #0]
 8002724:	2900      	cmp	r1, #0
 8002726:	d1f6      	bne.n	8002716 <TaskInput+0x15a>
    printPrompt = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	602b      	str	r3, [r5, #0]
    buf = input;
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <TaskInput+0x1c4>)
 800272e:	601e      	str	r6, [r3, #0]
    count = 0;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <TaskInput+0x1bc>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e766      	b.n	8002606 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8002738:	6863      	ldr	r3, [r4, #4]
 800273a:	2001      	movs	r0, #1
 800273c:	4798      	blx	r3
 800273e:	e7ef      	b.n	8002720 <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 8002740:	4c1b      	ldr	r4, [pc, #108]	; (80027b0 <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8002742:	4f1d      	ldr	r7, [pc, #116]	; (80027b8 <TaskInput+0x1fc>)
 8002744:	e7ed      	b.n	8002722 <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8002746:	f04f 0800 	mov.w	r8, #0
 800274a:	e7d7      	b.n	80026fc <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 800274c:	4620      	mov	r0, r4
 800274e:	9101      	str	r1, [sp, #4]
 8002750:	f005 fa0c 	bl	8007b6c <strcasecmp>
 8002754:	9901      	ldr	r1, [sp, #4]
 8002756:	b948      	cbnz	r0, 800276c <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 8002758:	f1b8 0f00 	cmp.w	r8, #0
 800275c:	d002      	beq.n	8002764 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 800275e:	4817      	ldr	r0, [pc, #92]	; (80027bc <TaskInput+0x200>)
 8002760:	f005 f960 	bl	8007a24 <iprintf>
      return t->func(arg);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4640      	mov	r0, r8
 8002768:	4798      	blx	r3
 800276a:	e7dd      	b.n	8002728 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 800276c:	370c      	adds	r7, #12
 800276e:	e7cd      	b.n	800270c <TaskInput+0x150>
 8002770:	20000014 	.word	0x20000014
 8002774:	080086dd 	.word	0x080086dd
 8002778:	20000a8c 	.word	0x20000a8c
 800277c:	080086e4 	.word	0x080086e4
 8002780:	20000008 	.word	0x20000008
 8002784:	20000a90 	.word	0x20000a90
 8002788:	20000c40 	.word	0x20000c40
 800278c:	20000b9c 	.word	0x20000b9c
 8002790:	20000bec 	.word	0x20000bec
 8002794:	08008457 	.word	0x08008457
 8002798:	0801423e 	.word	0x0801423e
 800279c:	080085d6 	.word	0x080085d6
 80027a0:	08014224 	.word	0x08014224
 80027a4:	080086e8 	.word	0x080086e8
 80027a8:	08008718 	.word	0x08008718
 80027ac:	20000a84 	.word	0x20000a84
 80027b0:	080147d8 	.word	0x080147d8
 80027b4:	0800872e 	.word	0x0800872e
 80027b8:	0800871d 	.word	0x0800871d
 80027bc:	08008729 	.word	0x08008729

080027c0 <fetch_uint32_arg>:
{
 80027c0:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 80027c2:	490c      	ldr	r1, [pc, #48]	; (80027f4 <fetch_uint32_arg+0x34>)
{
 80027c4:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f002 fb50 	bl	8004e6c <strtok>
  if(p == NULL) {
 80027cc:	4604      	mov	r4, r0
 80027ce:	b168      	cbz	r0, 80027ec <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	4611      	mov	r1, r2
 80027d4:	f002 fc18 	bl	8005008 <strtoul>
 80027d8:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 80027da:	4620      	mov	r0, r4
 80027dc:	f7fd fd1a 	bl	8000214 <strlen>
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <fetch_uint32_arg+0x38>)
 80027e2:	3001      	adds	r0, #1
 80027e4:	4404      	add	r4, r0
 80027e6:	601c      	str	r4, [r3, #0]
  return 0;
 80027e8:	2000      	movs	r0, #0
}
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f0:	e7fb      	b.n	80027ea <fetch_uint32_arg+0x2a>
 80027f2:	bf00      	nop
 80027f4:	080085d6 	.word	0x080085d6
 80027f8:	20000a84 	.word	0x20000a84

080027fc <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 80027fc:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80027fe:	b9d8      	cbnz	r0, 8002838 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8002800:	a801      	add	r0, sp, #4
 8002802:	f7ff ffdd 	bl	80027c0 <fetch_uint32_arg>
  if(rc) {
 8002806:	b128      	cbz	r0, 8002814 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8002808:	480e      	ldr	r0, [pc, #56]	; (8002844 <CmdLed+0x48>)
 800280a:	f005 f9a7 	bl	8007b5c <puts>
    return CmdReturnBadParameter1;
 800280e:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8002810:	b002      	add	sp, #8
 8002812:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8002814:	9901      	ldr	r1, [sp, #4]
 8002816:	480c      	ldr	r0, [pc, #48]	; (8002848 <CmdLed+0x4c>)
 8002818:	f005 f904 	bl	8007a24 <iprintf>
  val = val ? 1 : 0;
 800281c:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 800281e:	480b      	ldr	r0, [pc, #44]	; (800284c <CmdLed+0x50>)
  val = val ? 1 : 0;
 8002820:	3b00      	subs	r3, #0
 8002822:	bf18      	it	ne
 8002824:	2301      	movne	r3, #1
 8002826:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8002828:	f005 f998 	bl	8007b5c <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 800282c:	f89d 0004 	ldrb.w	r0, [sp, #4]
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <CmdLed+0x54>)
  if(PinState != GPIO_PIN_RESET)
 8002832:	b118      	cbz	r0, 800283c <CmdLed+0x40>
    GPIOx->BSRR = GPIO_Pin;
 8002834:	2220      	movs	r2, #32
 8002836:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002838:	2000      	movs	r0, #0
 800283a:	e7e9      	b.n	8002810 <CmdLed+0x14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002840:	619a      	str	r2, [r3, #24]
 8002842:	e7e5      	b.n	8002810 <CmdLed+0x14>
 8002844:	08008763 	.word	0x08008763
 8002848:	08008791 	.word	0x08008791
 800284c:	080087ad 	.word	0x080087ad
 8002850:	40020000 	.word	0x40020000

08002854 <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 8002854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002858:	4604      	mov	r4, r0
 800285a:	b9f0      	cbnz	r0, 800289a <CmdR+0x46>

  fetch_uint32_arg(&addr);
 800285c:	a801      	add	r0, sp, #4
 800285e:	f7ff ffaf 	bl	80027c0 <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 8002862:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8002864:	4812      	ldr	r0, [pc, #72]	; (80028b0 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 8002866:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 8002868:	4e12      	ldr	r6, [pc, #72]	; (80028b4 <CmdR+0x60>)
 800286a:	4f13      	ldr	r7, [pc, #76]	; (80028b8 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 800286c:	462a      	mov	r2, r5
 800286e:	f005 f8d9 	bl	8007a24 <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 8002872:	4812      	ldr	r0, [pc, #72]	; (80028bc <CmdR+0x68>)
 8002874:	f005 f8d6 	bl	8007a24 <iprintf>
    printf("%s%c",
 8002878:	4911      	ldr	r1, [pc, #68]	; (80028c0 <CmdR+0x6c>)
 800287a:	4688      	mov	r8, r1
 800287c:	2d00      	cmp	r5, #0
 800287e:	bfb4      	ite	lt
 8002880:	2231      	movlt	r2, #49	; 0x31
 8002882:	2230      	movge	r2, #48	; 0x30
 8002884:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 8002886:	3401      	adds	r4, #1
    printf("%s%c",
 8002888:	f005 f8cc 	bl	8007a24 <iprintf>
  for(i=0; i<32; i++) {
 800288c:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 800288e:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 8002892:	d106      	bne.n	80028a2 <CmdR+0x4e>
  }
  printf("\n");
 8002894:	200a      	movs	r0, #10
 8002896:	f005 f8dd 	bl	8007a54 <putchar>
  return CmdReturnOk;
}
 800289a:	2000      	movs	r0, #0
 800289c:	b002      	add	sp, #8
 800289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 80028a2:	f014 0f03 	tst.w	r4, #3
 80028a6:	bf14      	ite	ne
 80028a8:	4639      	movne	r1, r7
 80028aa:	4641      	moveq	r1, r8
 80028ac:	e7e6      	b.n	800287c <CmdR+0x28>
 80028ae:	bf00      	nop
 80028b0:	080087bd 	.word	0x080087bd
 80028b4:	08008877 	.word	0x08008877
 80028b8:	0800ac4f 	.word	0x0800ac4f
 80028bc:	080087cf 	.word	0x080087cf
 80028c0:	0800abf3 	.word	0x0800abf3

080028c4 <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 80028c4:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80028c6:	b940      	cbnz	r0, 80028da <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80028c8:	4668      	mov	r0, sp
 80028ca:	f7ff ff79 	bl	80027c0 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80028ce:	a801      	add	r0, sp, #4
 80028d0:	f7ff ff76 	bl	80027c0 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80028d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80028d8:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 80028da:	2000      	movs	r0, #0
 80028dc:	b003      	add	sp, #12
 80028de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080028e4 <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80028e8:	2801      	cmp	r0, #1
{
 80028ea:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80028ec:	d00b      	beq.n	8002906 <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 80028ee:	2802      	cmp	r0, #2
 80028f0:	4f31      	ldr	r7, [pc, #196]	; (80029b8 <CmdDump+0xd4>)
 80028f2:	4e32      	ldr	r6, [pc, #200]	; (80029bc <CmdDump+0xd8>)
 80028f4:	d10b      	bne.n	800290e <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 80028f6:	4832      	ldr	r0, [pc, #200]	; (80029c0 <CmdDump+0xdc>)
 80028f8:	f005 f930 	bl	8007b5c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	6831      	ldr	r1, [r6, #0]
 8002900:	4830      	ldr	r0, [pc, #192]	; (80029c4 <CmdDump+0xe0>)
 8002902:	f005 f88f 	bl	8007a24 <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 8002906:	2000      	movs	r0, #0
 8002908:	b00b      	add	sp, #44	; 0x2c
 800290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 800290e:	4630      	mov	r0, r6
 8002910:	f7ff ff56 	bl	80027c0 <fetch_uint32_arg>
  if(rc == 0) {
 8002914:	b910      	cbnz	r0, 800291c <CmdDump+0x38>
    fetch_uint32_arg(&count);
 8002916:	4638      	mov	r0, r7
 8002918:	f7ff ff52 	bl	80027c0 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 800291c:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 800291e:	2c00      	cmp	r4, #0
 8002920:	d043      	beq.n	80029aa <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 8002922:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 8002924:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80029d4 <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 8002928:	9301      	str	r3, [sp, #4]
  bufp = buf;
 800292a:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 800292e:	2500      	movs	r5, #0
 8002930:	46c8      	mov	r8, r9
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 8002936:	f015 030f 	ands.w	r3, r5, #15
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	d13a      	bne.n	80029b4 <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 800293e:	4822      	ldr	r0, [pc, #136]	; (80029c8 <CmdDump+0xe4>)
 8002940:	9103      	str	r1, [sp, #12]
 8002942:	f005 f86f 	bl	8007a24 <iprintf>
      bufp = buf;
 8002946:	9903      	ldr	r1, [sp, #12]
 8002948:	46c3      	mov	fp, r8
    c = *p++;
 800294a:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <CmdDump+0xe8>)
 800294e:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8002952:	46d9      	mov	r9, fp
      *bufp++ = '.';
 8002954:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8002958:	4601      	mov	r1, r0
      *bufp++ = '.';
 800295a:	bf08      	it	eq
 800295c:	202e      	moveq	r0, #46	; 0x2e
 800295e:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8002962:	4650      	mov	r0, sl
 8002964:	f005 f85e 	bl	8007a24 <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8002968:	9b02      	ldr	r3, [sp, #8]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	d106      	bne.n	800297c <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 800296e:	2100      	movs	r1, #0
 8002970:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 8002974:	4816      	ldr	r0, [pc, #88]	; (80029d0 <CmdDump+0xec>)
 8002976:	4641      	mov	r1, r8
 8002978:	f005 f854 	bl	8007a24 <iprintf>
  for(i=0; i<count; i++) {
 800297c:	3501      	adds	r5, #1
 800297e:	42ac      	cmp	r4, r5
 8002980:	d1d7      	bne.n	8002932 <CmdDump+0x4e>
  *bufp='\0';
 8002982:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8002984:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8002988:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 800298c:	d00d      	beq.n	80029aa <CmdDump+0xc6>
      printf("   ");
 800298e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80029d8 <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8002992:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8002996:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8002998:	3501      	adds	r5, #1
      printf("   ");
 800299a:	f005 f843 	bl	8007a24 <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800299e:	42a5      	cmp	r5, r4
 80029a0:	d3f9      	bcc.n	8002996 <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 80029a2:	480b      	ldr	r0, [pc, #44]	; (80029d0 <CmdDump+0xec>)
 80029a4:	4641      	mov	r1, r8
 80029a6:	f005 f83d 	bl	8007a24 <iprintf>
  address = address+count;
 80029aa:	6833      	ldr	r3, [r6, #0]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 80029b2:	e7a8      	b.n	8002906 <CmdDump+0x22>
 80029b4:	46cb      	mov	fp, r9
 80029b6:	e7c8      	b.n	800294a <CmdDump+0x66>
 80029b8:	2000000c 	.word	0x2000000c
 80029bc:	20000a6c 	.word	0x20000a6c
 80029c0:	0800887c 	.word	0x0800887c
 80029c4:	08008a14 	.word	0x08008a14
 80029c8:	08008a46 	.word	0x08008a46
 80029cc:	0801423e 	.word	0x0801423e
 80029d0:	08008a53 	.word	0x08008a53
 80029d4:	08008a4d 	.word	0x08008a4d
 80029d8:	08008873 	.word	0x08008873

080029dc <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 80029dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80029de:	4604      	mov	r4, r0
 80029e0:	bb50      	cbnz	r0, 8002a38 <CmdSend+0x5c>

  index = 0;
 80029e2:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 80029e4:	a803      	add	r0, sp, #12
 80029e6:	f7ff feeb 	bl	80027c0 <fetch_uint32_arg>
  if(rc) {
 80029ea:	4602      	mov	r2, r0
 80029ec:	b130      	cbz	r0, 80029fc <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80029ee:	4813      	ldr	r0, [pc, #76]	; (8002a3c <CmdSend+0x60>)
 80029f0:	4621      	mov	r1, r4
 80029f2:	f005 f817 	bl	8007a24 <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 80029f6:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 80029f8:	b004      	add	sp, #16
 80029fa:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80029fc:	9c03      	ldr	r4, [sp, #12]
 80029fe:	b124      	cbz	r4, 8002a0a <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002a00:	4621      	mov	r1, r4
 8002a02:	480f      	ldr	r0, [pc, #60]	; (8002a40 <CmdSend+0x64>)
 8002a04:	f005 f80e 	bl	8007a24 <iprintf>
 8002a08:	e7f5      	b.n	80029f6 <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <CmdSend+0x68>)
 8002a0c:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 8002a0e:	9101      	str	r1, [sp, #4]
 8002a10:	4608      	mov	r0, r1
 8002a12:	f7fd fbff 	bl	8000214 <strlen>
  if(len==0) {
 8002a16:	9901      	ldr	r1, [sp, #4]
 8002a18:	4602      	mov	r2, r0
 8002a1a:	b920      	cbnz	r0, 8002a26 <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 8002a1c:	480a      	ldr	r0, [pc, #40]	; (8002a48 <CmdSend+0x6c>)
 8002a1e:	f005 f89d 	bl	8007b5c <puts>
    return CmdReturnBadParameter2;
 8002a22:	2005      	movs	r0, #5
 8002a24:	e7e8      	b.n	80029f8 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fe ffbe 	bl	80019a8 <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8002a2c:	4907      	ldr	r1, [pc, #28]	; (8002a4c <CmdSend+0x70>)
 8002a2e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f7fe ffb8 	bl	80019a8 <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e7dd      	b.n	80029f8 <CmdSend+0x1c>
 8002a3c:	08008a5b 	.word	0x08008a5b
 8002a40:	08008a89 	.word	0x08008a89
 8002a44:	20000a84 	.word	0x20000a84
 8002a48:	08008abf 	.word	0x08008abf
 8002a4c:	0800904d 	.word	0x0800904d

08002a50 <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 8002a50:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a52:	4604      	mov	r4, r0
 8002a54:	bb18      	cbnz	r0, 8002a9e <CmdReceive+0x4e>

  index = 0;
 8002a56:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002a58:	a801      	add	r0, sp, #4
 8002a5a:	f7ff feb1 	bl	80027c0 <fetch_uint32_arg>
  if(rc) {
 8002a5e:	4602      	mov	r2, r0
 8002a60:	b130      	cbz	r0, 8002a70 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002a62:	4810      	ldr	r0, [pc, #64]	; (8002aa4 <CmdReceive+0x54>)
 8002a64:	4621      	mov	r1, r4
 8002a66:	f004 ffdd 	bl	8007a24 <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 8002a6a:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002a70:	9901      	ldr	r1, [sp, #4]
 8002a72:	b119      	cbz	r1, 8002a7c <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <CmdReceive+0x58>)
 8002a76:	f004 ffd5 	bl	8007a24 <iprintf>
 8002a7a:	e7f6      	b.n	8002a6a <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <CmdReceive+0x5c>)
 8002a7e:	f004 ffd1 	bl	8007a24 <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 8002a82:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f10d 0103 	add.w	r1, sp, #3
 8002a8c:	f7fe fae6 	bl	800105c <TerminalRead>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d0eb      	beq.n	8002a6c <CmdReceive+0x1c>
    printf("%c",c);
 8002a94:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002a98:	f004 ffdc 	bl	8007a54 <putchar>
 8002a9c:	e7f1      	b.n	8002a82 <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e7e4      	b.n	8002a6c <CmdReceive+0x1c>
 8002aa2:	bf00      	nop
 8002aa4:	08008a5b 	.word	0x08008a5b
 8002aa8:	08008a89 	.word	0x08008a89
 8002aac:	08008ae9 	.word	0x08008ae9

08002ab0 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 8002ab0:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	b9b0      	cbnz	r0, 8002ae4 <CmdTransparent+0x34>

  index = 0;
 8002ab6:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002ab8:	a801      	add	r0, sp, #4
 8002aba:	f7ff fe81 	bl	80027c0 <fetch_uint32_arg>
  if(rc) {
 8002abe:	4602      	mov	r2, r0
 8002ac0:	b130      	cbz	r0, 8002ad0 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002ac2:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <CmdTransparent+0x38>)
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	f004 ffad 	bl	8007a24 <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 8002aca:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8002acc:	b002      	add	sp, #8
 8002ace:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002ad0:	9901      	ldr	r1, [sp, #4]
 8002ad2:	b119      	cbz	r1, 8002adc <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <CmdTransparent+0x3c>)
 8002ad6:	f004 ffa5 	bl	8007a24 <iprintf>
    return CmdReturnBadParameter1;
 8002ada:	e7f6      	b.n	8002aca <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <CmdTransparent+0x40>)
 8002ade:	f005 f83d 	bl	8007b5c <puts>
 8002ae2:	e7f2      	b.n	8002aca <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	e7f1      	b.n	8002acc <CmdTransparent+0x1c>
 8002ae8:	08008a5b 	.word	0x08008a5b
 8002aec:	08008a89 	.word	0x08008a89
 8002af0:	08008b04 	.word	0x08008b04

08002af4 <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 8002af4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002af8:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8002afa:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 8002afc:	d132      	bne.n	8002b64 <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 8002afe:	f7ff fc65 	bl	80023cc <fetch_string_arg>
    if(rc) {
 8002b02:	b160      	cbz	r0, 8002b1e <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002b04:	488b      	ldr	r0, [pc, #556]	; (8002d34 <CmdDecode+0x240>)
 8002b06:	f005 f829 	bl	8007b5c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8002b0a:	f7ff fd2b 	bl	8002564 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 8002b0e:	488a      	ldr	r0, [pc, #552]	; (8002d38 <CmdDecode+0x244>)
 8002b10:	f005 f824 	bl	8007b5c <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 8002b14:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 8002b16:	4620      	mov	r0, r4
 8002b18:	b004      	add	sp, #16
 8002b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8002b1e:	4d87      	ldr	r5, [pc, #540]	; (8002d3c <CmdDecode+0x248>)
 8002b20:	e008      	b.n	8002b34 <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002b22:	9c03      	ldr	r4, [sp, #12]
 8002b24:	f7fe fac0 	bl	80010a8 <Uncompress>
 8002b28:	4601      	mov	r1, r0
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f005 f81e 	bl	8007b6c <strcasecmp>
 8002b30:	b118      	cbz	r0, 8002b3a <CmdDecode+0x46>
	p++;
 8002b32:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002b34:	6828      	ldr	r0, [r5, #0]
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d1f3      	bne.n	8002b22 <CmdDecode+0x2e>
      if(p->name == NULL) {
 8002b3a:	682c      	ldr	r4, [r5, #0]
 8002b3c:	b934      	cbnz	r4, 8002b4c <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 8002b3e:	9903      	ldr	r1, [sp, #12]
 8002b40:	487f      	ldr	r0, [pc, #508]	; (8002d40 <CmdDecode+0x24c>)
 8002b42:	f004 ff6f 	bl	8007a24 <iprintf>
	DecodePrintPeripherals(Peripherals);
 8002b46:	f7ff fd0d 	bl	8002564 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 8002b4a:	e7e4      	b.n	8002b16 <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7fe faab 	bl	80010a8 <Uncompress>
 8002b52:	4601      	mov	r1, r0
 8002b54:	487b      	ldr	r0, [pc, #492]	; (8002d44 <CmdDecode+0x250>)
 8002b56:	f004 ff65 	bl	8007a24 <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8002b5a:	89a9      	ldrh	r1, [r5, #12]
 8002b5c:	68a8      	ldr	r0, [r5, #8]
 8002b5e:	f7ff fcd1 	bl	8002504 <DecodePrintRegisters>
    printf("\n\n");
 8002b62:	e007      	b.n	8002b74 <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 8002b64:	f7ff fc32 	bl	80023cc <fetch_string_arg>
  if(rc) {
 8002b68:	b178      	cbz	r0, 8002b8a <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 8002b6a:	4877      	ldr	r0, [pc, #476]	; (8002d48 <CmdDecode+0x254>)
 8002b6c:	f004 fff6 	bl	8007b5c <puts>
    DecodePrintPeripherals(Peripherals);
 8002b70:	f7ff fcf8 	bl	8002564 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 8002b74:	4875      	ldr	r0, [pc, #468]	; (8002d4c <CmdDecode+0x258>)
 8002b76:	e7cb      	b.n	8002b10 <CmdDecode+0x1c>
    p++;
 8002b78:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002b7a:	6828      	ldr	r0, [r5, #0]
 8002b7c:	9c03      	ldr	r4, [sp, #12]
 8002b7e:	b930      	cbnz	r0, 8002b8e <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8002b80:	9903      	ldr	r1, [sp, #12]
 8002b82:	4873      	ldr	r0, [pc, #460]	; (8002d50 <CmdDecode+0x25c>)
 8002b84:	f004 ff4e 	bl	8007a24 <iprintf>
    DecodePrintPeripherals(Peripherals);
 8002b88:	e7f2      	b.n	8002b70 <CmdDecode+0x7c>
  p = Peripherals;
 8002b8a:	4d6c      	ldr	r5, [pc, #432]	; (8002d3c <CmdDecode+0x248>)
 8002b8c:	e7f5      	b.n	8002b7a <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002b8e:	f7fe fa8b 	bl	80010a8 <Uncompress>
 8002b92:	4601      	mov	r1, r0
 8002b94:	4620      	mov	r0, r4
 8002b96:	f004 ffe9 	bl	8007b6c <strcasecmp>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d1eb      	bne.n	8002b78 <CmdDecode+0x84>
  if(p->name == NULL) {
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ec      	beq.n	8002b80 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8002ba6:	a802      	add	r0, sp, #8
 8002ba8:	f7ff fc10 	bl	80023cc <fetch_string_arg>
  if(rc) {
 8002bac:	b120      	cbz	r0, 8002bb8 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 8002bae:	4621      	mov	r1, r4
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7ff fc7f 	bl	80024b4 <DecodePeripheral>
    return CmdReturnOk;
 8002bb6:	e7ae      	b.n	8002b16 <CmdDecode+0x22>
  r = p->registers;
 8002bb8:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 8002bba:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8002bbc:	9c02      	ldr	r4, [sp, #8]
 8002bbe:	2f00      	cmp	r7, #0
 8002bc0:	f000 80a8 	beq.w	8002d14 <CmdDecode+0x220>
 8002bc4:	6830      	ldr	r0, [r6, #0]
 8002bc6:	f7fe fa6f 	bl	80010a8 <Uncompress>
 8002bca:	4601      	mov	r1, r0
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f004 ffcd 	bl	8007b6c <strcasecmp>
 8002bd2:	3f01      	subs	r7, #1
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	b958      	cbnz	r0, 8002bf0 <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 8002bd8:	a801      	add	r0, sp, #4
 8002bda:	f7ff fbf7 	bl	80023cc <fetch_string_arg>
  if(rc == 0) {
 8002bde:	b170      	cbz	r0, 8002bfe <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 8002be0:	4631      	mov	r1, r6
 8002be2:	4628      	mov	r0, r5
 8002be4:	f7fe ffb2 	bl	8001b4c <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002be8:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8002bea:	4602      	mov	r2, r0
 8002bec:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 8002bee:	e017      	b.n	8002c20 <CmdDecode+0x12c>
    r++;
 8002bf0:	3610      	adds	r6, #16
 8002bf2:	e7e3      	b.n	8002bbc <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f7ff fc5c 	bl	80024b4 <DecodePeripheral>
      return CmdReturnOk;
 8002bfc:	e78a      	b.n	8002b14 <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 8002bfe:	4955      	ldr	r1, [pc, #340]	; (8002d54 <CmdDecode+0x260>)
 8002c00:	9801      	ldr	r0, [sp, #4]
 8002c02:	f004 ffb3 	bl	8007b6c <strcasecmp>
 8002c06:	b980      	cbnz	r0, 8002c2a <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 8002c08:	4668      	mov	r0, sp
 8002c0a:	f7ff fdd9 	bl	80027c0 <fetch_uint32_arg>
      if(rc) {
 8002c0e:	4604      	mov	r4, r0
 8002c10:	b120      	cbz	r0, 8002c1c <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 8002c12:	4851      	ldr	r0, [pc, #324]	; (8002d58 <CmdDecode+0x264>)
 8002c14:	f004 ffa2 	bl	8007b5c <puts>
	return CmdReturnBadParameter4;
 8002c18:	2407      	movs	r4, #7
 8002c1a:	e77c      	b.n	8002b16 <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 8002c1c:	9a00      	ldr	r2, [sp, #0]
 8002c1e:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8002c20:	6869      	ldr	r1, [r5, #4]
 8002c22:	4630      	mov	r0, r6
 8002c24:	f7ff fbea 	bl	80023fc <DecodeRegister>
  return CmdReturnOk;
 8002c28:	e775      	b.n	8002b16 <CmdDecode+0x22>
    f = r->fields;
 8002c2a:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8002c2c:	b15f      	cbz	r7, 8002c46 <CmdDecode+0x152>
	  && (f->name != NULL)
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	b148      	cbz	r0, 8002c46 <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 8002c32:	9c01      	ldr	r4, [sp, #4]
 8002c34:	f7fe fa38 	bl	80010a8 <Uncompress>
 8002c38:	4601      	mov	r1, r0
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f004 ff96 	bl	8007b6c <strcasecmp>
 8002c40:	b998      	cbnz	r0, 8002c6a <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b99b      	cbnz	r3, 8002c6e <CmdDecode+0x17a>
    errno = 0;
 8002c46:	f000 fd7f 	bl	8003748 <__errno>
 8002c4a:	2700      	movs	r7, #0
 8002c4c:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002c4e:	463a      	mov	r2, r7
 8002c50:	4639      	mov	r1, r7
 8002c52:	9801      	ldr	r0, [sp, #4]
 8002c54:	f002 f9d8 	bl	8005008 <strtoul>
 8002c58:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 8002c5a:	f000 fd75 	bl	8003748 <__errno>
 8002c5e:	6804      	ldr	r4, [r0, #0]
 8002c60:	2c00      	cmp	r4, #0
 8002c62:	d042      	beq.n	8002cea <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 8002c64:	9901      	ldr	r1, [sp, #4]
 8002c66:	483d      	ldr	r0, [pc, #244]	; (8002d5c <CmdDecode+0x268>)
 8002c68:	e00b      	b.n	8002c82 <CmdDecode+0x18e>
      f++;
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	e7de      	b.n	8002c2c <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 8002c6e:	4668      	mov	r0, sp
 8002c70:	f7ff fda6 	bl	80027c0 <fetch_uint32_arg>
      if(rc) {
 8002c74:	4604      	mov	r4, r0
 8002c76:	b138      	cbz	r0, 8002c88 <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 8002c78:	6830      	ldr	r0, [r6, #0]
 8002c7a:	f7fe fa15 	bl	80010a8 <Uncompress>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4837      	ldr	r0, [pc, #220]	; (8002d60 <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 8002c82:	f004 fecf 	bl	8007a24 <iprintf>
      return CmdReturnOk;
 8002c86:	e745      	b.n	8002b14 <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 8002c88:	4631      	mov	r1, r6
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f7fe ff5e 	bl	8001b4c <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002c90:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 8002c92:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	4093      	lsls	r3, r2
 8002c98:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8002c9a:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 8002c9e:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 8002ca2:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8002ca6:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 8002ca8:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 8002cac:	4003      	ands	r3, r0
 8002cae:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f7fe ff83 	bl	8001bc0 <DecodeWriteRegister.isra.0>
      printf("%s.",
 8002cba:	6828      	ldr	r0, [r5, #0]
 8002cbc:	f7fe f9f4 	bl	80010a8 <Uncompress>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	4828      	ldr	r0, [pc, #160]	; (8002d64 <CmdDecode+0x270>)
 8002cc4:	f004 feae 	bl	8007a24 <iprintf>
      printf("%s.",
 8002cc8:	6830      	ldr	r0, [r6, #0]
 8002cca:	f7fe f9ed 	bl	80010a8 <Uncompress>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4824      	ldr	r0, [pc, #144]	; (8002d64 <CmdDecode+0x270>)
 8002cd2:	f004 fea7 	bl	8007a24 <iprintf>
      printf("%s (%d) -> (%d)\n",
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f7fe f9e6 	bl	80010a8 <Uncompress>
 8002cdc:	9b00      	ldr	r3, [sp, #0]
 8002cde:	4601      	mov	r1, r0
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	4821      	ldr	r0, [pc, #132]	; (8002d68 <CmdDecode+0x274>)
 8002ce4:	f004 fe9e 	bl	8007a24 <iprintf>
      return CmdReturnOk;
 8002ce8:	e715      	b.n	8002b16 <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 8002cea:	9a00      	ldr	r2, [sp, #0]
 8002cec:	4631      	mov	r1, r6
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7fe ff66 	bl	8001bc0 <DecodeWriteRegister.isra.0>
    printf("%s.",
 8002cf4:	6828      	ldr	r0, [r5, #0]
 8002cf6:	f7fe f9d7 	bl	80010a8 <Uncompress>
 8002cfa:	4601      	mov	r1, r0
 8002cfc:	4819      	ldr	r0, [pc, #100]	; (8002d64 <CmdDecode+0x270>)
 8002cfe:	f004 fe91 	bl	8007a24 <iprintf>
    printf("%s = 0x%08x\n",
 8002d02:	6830      	ldr	r0, [r6, #0]
 8002d04:	f7fe f9d0 	bl	80010a8 <Uncompress>
 8002d08:	9a00      	ldr	r2, [sp, #0]
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4817      	ldr	r0, [pc, #92]	; (8002d6c <CmdDecode+0x278>)
 8002d0e:	f004 fe89 	bl	8007a24 <iprintf>
    return CmdReturnOk;
 8002d12:	e700      	b.n	8002b16 <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 8002d14:	4916      	ldr	r1, [pc, #88]	; (8002d70 <CmdDecode+0x27c>)
 8002d16:	4620      	mov	r0, r4
 8002d18:	f004 ff28 	bl	8007b6c <strcasecmp>
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	f43f af69 	beq.w	8002bf4 <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002d22:	6828      	ldr	r0, [r5, #0]
 8002d24:	f7fe f9c0 	bl	80010a8 <Uncompress>
 8002d28:	4621      	mov	r1, r4
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4811      	ldr	r0, [pc, #68]	; (8002d74 <CmdDecode+0x280>)
 8002d2e:	f004 fe79 	bl	8007a24 <iprintf>
 8002d32:	e712      	b.n	8002b5a <CmdDecode+0x66>
 8002d34:	08008b29 	.word	0x08008b29
 8002d38:	08008d3c 	.word	0x08008d3c
 8002d3c:	08010bfc 	.word	0x08010bfc
 8002d40:	08008d91 	.word	0x08008d91
 8002d44:	08008dcc 	.word	0x08008dcc
 8002d48:	08008df1 	.word	0x08008df1
 8002d4c:	08008e5a 	.word	0x08008e5a
 8002d50:	08008e20 	.word	0x08008e20
 8002d54:	08008e99 	.word	0x08008e99
 8002d58:	08008e9d 	.word	0x08008e9d
 8002d5c:	08008efc 	.word	0x08008efc
 8002d60:	08008ebc 	.word	0x08008ebc
 8002d64:	08008ee7 	.word	0x08008ee7
 8002d68:	08008eeb 	.word	0x08008eeb
 8002d6c:	08008f1a 	.word	0x08008f1a
 8002d70:	08008f27 	.word	0x08008f27
 8002d74:	08008e5c 	.word	0x08008e5c

08002d78 <PolledPrintf>:
{
 8002d78:	b40f      	push	{r0, r1, r2, r3}
 8002d7a:	b500      	push	{lr}
 8002d7c:	b097      	sub	sp, #92	; 0x5c
 8002d7e:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002d80:	2150      	movs	r1, #80	; 0x50
{
 8002d82:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8002d86:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002d88:	a802      	add	r0, sp, #8
 8002d8a:	f004 ff3d 	bl	8007c08 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <PolledPrintf+0x38>)
  while(len) {
 8002d90:	ab02      	add	r3, sp, #8
 8002d92:	b928      	cbnz	r0, 8002da0 <PolledPrintf+0x28>
}
 8002d94:	b017      	add	sp, #92	; 0x5c
 8002d96:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d9a:	b004      	add	sp, #16
 8002d9c:	4770      	bx	lr
      asm volatile ("nop");
 8002d9e:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 8002da0:	6811      	ldr	r1, [r2, #0]
 8002da2:	0609      	lsls	r1, r1, #24
 8002da4:	d5fb      	bpl.n	8002d9e <PolledPrintf+0x26>
    uart->DR = *p;
 8002da6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002daa:	6051      	str	r1, [r2, #4]
    len--;
 8002dac:	3801      	subs	r0, #1
 8002dae:	e7f0      	b.n	8002d92 <PolledPrintf+0x1a>
 8002db0:	40004400 	.word	0x40004400

08002db4 <CmdStats>:
{
 8002db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002db8:	4601      	mov	r1, r0
{
 8002dba:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002dbc:	bb10      	cbnz	r0, 8002e04 <CmdStats+0x50>
 8002dbe:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 8002dc0:	4812      	ldr	r0, [pc, #72]	; (8002e0c <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002dc2:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8002dc4:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8002dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dca:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 8002dce:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8002dd8:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8002dda:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002dde:	f000 fcdd 	bl	800379c <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8002de2:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 8002de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <CmdStats+0x5c>)
 8002de8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002dea:	480a      	ldr	r0, [pc, #40]	; (8002e14 <CmdStats+0x60>)
 8002dec:	9400      	str	r4, [sp, #0]
 8002dee:	e9cd b307 	strd	fp, r3, [sp, #28]
 8002df2:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8002df6:	e9cd 7803 	strd	r7, r8, [sp, #12]
 8002dfa:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <CmdStats+0x64>)
 8002e00:	f004 fe10 	bl	8007a24 <iprintf>
}
 8002e04:	2000      	movs	r0, #0
 8002e06:	b00d      	add	sp, #52	; 0x34
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	20000238 	.word	0x20000238
 8002e10:	08008f34 	.word	0x08008f34
 8002e14:	08008f3c 	.word	0x08008f3c
 8002e18:	08008f2c 	.word	0x08008f2c

08002e1c <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8002e1c:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <USR_LED_Toggle+0x10>)
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000228 	.word	0x20000228

08002e30 <TIM1_UP_TIM10_IRQHandler>:
  HAL_TIM_IRQHandler(&tim1);
 8002e30:	4801      	ldr	r0, [pc, #4]	; (8002e38 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002e32:	f7fe ba6d 	b.w	8001310 <HAL_TIM_IRQHandler>
 8002e36:	bf00      	nop
 8002e38:	20000c50 	.word	0x20000c50

08002e3c <TIM3_IRQHandler>:
  HAL_TIM_IRQHandler(&htim3);
 8002e3c:	4801      	ldr	r0, [pc, #4]	; (8002e44 <TIM3_IRQHandler+0x8>)
 8002e3e:	f7fe ba67 	b.w	8001310 <HAL_TIM_IRQHandler>
 8002e42:	bf00      	nop
 8002e44:	20000b10 	.word	0x20000b10

08002e48 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8002e48:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <_sbrk_r+0x28>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	b90a      	cbnz	r2, 8002e54 <_sbrk_r+0xc>
    heap_end = &end;
 8002e50:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <_sbrk_r+0x2c>)
 8002e52:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8002e54:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 8002e56:	466a      	mov	r2, sp
 8002e58:	4401      	add	r1, r0
 8002e5a:	4291      	cmp	r1, r2
 8002e5c:	d906      	bls.n	8002e6c <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8002e5e:	f000 fc73 	bl	8003748 <__errno>
 8002e62:	230c      	movs	r3, #12
 8002e64:	6003      	str	r3, [r0, #0]
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8002e6a:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8002e6c:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8002e6e:	e7fc      	b.n	8002e6a <_sbrk_r+0x22>
 8002e70:	20000ab8 	.word	0x20000ab8
 8002e74:	20000cf8 	.word	0x20000cf8

08002e78 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 8002e78:	2000      	movs	r0, #0
 8002e7a:	4770      	bx	lr

08002e7c <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8002e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e80:	6053      	str	r3, [r2, #4]
   return 0;
}
 8002e82:	2000      	movs	r0, #0
 8002e84:	4770      	bx	lr

08002e86 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002e86:	2001      	movs	r0, #1
 8002e88:	4770      	bx	lr

08002e8a <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	4770      	bx	lr

08002e8e <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8002e8e:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8002e90:	2000      	movs	r0, #0
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7fe b8e2 	b.w	800105c <TerminalRead>

08002e98 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002e9c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002ed4 <_write_r+0x3c>
{
 8002ea0:	461d      	mov	r5, r3
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8002ea6:	42bc      	cmp	r4, r7
 8002ea8:	4626      	mov	r6, r4
 8002eaa:	d102      	bne.n	8002eb2 <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8002eac:	4628      	mov	r0, r5
 8002eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8002eb2:	7833      	ldrb	r3, [r6, #0]
 8002eb4:	2b0a      	cmp	r3, #10
 8002eb6:	f104 0401 	add.w	r4, r4, #1
 8002eba:	d104      	bne.n	8002ec6 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fe fd71 	bl	80019a8 <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4631      	mov	r1, r6
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fe fd6c 	bl	80019a8 <TerminalOutputBufferWrite.isra.0>
    count--;
 8002ed0:	e7e9      	b.n	8002ea6 <_write_r+0xe>
 8002ed2:	bf00      	nop
 8002ed4:	08009662 	.word	0x08009662

08002ed8 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	4770      	bx	lr

08002ede <_exit>:

void _exit(int status)
{
  while(1) {}
 8002ede:	e7fe      	b.n	8002ede <_exit>

08002ee0 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	4770      	bx	lr

08002ee4 <USART2_IRQHandler>:
  isr = uart->SR;
 8002ee4:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <USART2_IRQHandler+0xe0>)
 8002ee6:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002ee8:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8002eea:	b510      	push	{r4, lr}
 8002eec:	d50d      	bpl.n	8002f0a <USART2_IRQHandler+0x26>
    c = uart->DR;
 8002eee:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <USART2_IRQHandler+0xe4>)
 8002ef2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	3201      	adds	r2, #1
 8002efa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002efe:	d339      	bcc.n	8002f74 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 8002f00:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002f04:	3201      	adds	r2, #1
 8002f06:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 8002f0a:	060a      	lsls	r2, r1, #24
 8002f0c:	d50a      	bpl.n	8002f24 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <USART2_IRQHandler+0xe4>)
 8002f10:	482c      	ldr	r0, [pc, #176]	; (8002fc4 <USART2_IRQHandler+0xe0>)
 8002f12:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002f16:	b292      	uxth	r2, r2
 8002f18:	2a00      	cmp	r2, #0
 8002f1a:	d140      	bne.n	8002f9e <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8002f1c:	68c3      	ldr	r3, [r0, #12]
 8002f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f22:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 8002f24:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8002f26:	bf41      	itttt	mi
 8002f28:	4a26      	ldrmi	r2, [pc, #152]	; (8002fc4 <USART2_IRQHandler+0xe0>)
 8002f2a:	68d3      	ldrmi	r3, [r2, #12]
 8002f2c:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8002f30:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 8002f32:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 8002f34:	bf41      	itttt	mi
 8002f36:	4a24      	ldrmi	r2, [pc, #144]	; (8002fc8 <USART2_IRQHandler+0xe4>)
 8002f38:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 8002f3c:	3301      	addmi	r3, #1
 8002f3e:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8002f42:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 8002f44:	bf41      	itttt	mi
 8002f46:	4a20      	ldrmi	r2, [pc, #128]	; (8002fc8 <USART2_IRQHandler+0xe4>)
 8002f48:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 8002f4c:	3301      	addmi	r3, #1
 8002f4e:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8002f52:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 8002f54:	bf41      	itttt	mi
 8002f56:	4a1c      	ldrmi	r2, [pc, #112]	; (8002fc8 <USART2_IRQHandler+0xe4>)
 8002f58:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 8002f5c:	3301      	addmi	r3, #1
 8002f5e:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8002f62:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 8002f64:	bf41      	itttt	mi
 8002f66:	4a18      	ldrmi	r2, [pc, #96]	; (8002fc8 <USART2_IRQHandler+0xe4>)
 8002f68:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 8002f6c:	3301      	addmi	r3, #1
 8002f6e:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 8002f72:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8002f74:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 8002f78:	3201      	adds	r2, #1
 8002f7a:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 8002f7e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002f82:	b292      	uxth	r2, r2
    c = uart->DR;
 8002f84:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002f86:	3201      	adds	r2, #1
 8002f88:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002f8c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 8002f90:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002f94:	3201      	adds	r2, #1
 8002f96:	b292      	uxth	r2, r2
 8002f98:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002f9c:	e7b5      	b.n	8002f0a <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 8002f9e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8002fa2:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 8002fa6:	3201      	adds	r2, #1
      uart->DR = c;
 8002fa8:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 8002fac:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 8002fae:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 8002fb2:	3801      	subs	r0, #1
 8002fb4:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 8002fb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8002fba:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8002fbe:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8002fc2:	e7af      	b.n	8002f24 <USART2_IRQHandler+0x40>
 8002fc4:	40004400 	.word	0x40004400
 8002fc8:	20000238 	.word	0x20000238

08002fcc <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 8002fcc:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002fd0:	490d      	ldr	r1, [pc, #52]	; (8003008 <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 8002fd2:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002fd4:	480d      	ldr	r0, [pc, #52]	; (800300c <Default_IRQHandler+0x40>)
 8002fd6:	f7ff fecf 	bl	8002d78 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8002fda:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <Default_IRQHandler+0x44>)
 8002fe0:	f7ff feca 	bl	8002d78 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <Default_IRQHandler+0x48>)
 8002fe6:	f1a4 0110 	sub.w	r1, r4, #16
 8002fea:	f7ff fec5 	bl	8002d78 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <Default_IRQHandler+0x4c>)
 8002ff0:	480a      	ldr	r0, [pc, #40]	; (800301c <Default_IRQHandler+0x50>)
 8002ff2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002ff6:	f7ff febf 	bl	8002d78 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8002ffa:	4809      	ldr	r0, [pc, #36]	; (8003020 <Default_IRQHandler+0x54>)
 8002ffc:	f7ff febc 	bl	8002d78 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8003000:	e7fe      	b.n	8003000 <Default_IRQHandler+0x34>
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00
 8003008:	0801422a 	.word	0x0801422a
 800300c:	08009019 	.word	0x08009019
 8003010:	08009050 	.word	0x08009050
 8003014:	0800908c 	.word	0x0800908c
 8003018:	0800eac0 	.word	0x0800eac0
 800301c:	080090b5 	.word	0x080090b5
 8003020:	080090d0 	.word	0x080090d0

08003024 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003024:	4b69      	ldr	r3, [pc, #420]	; (80031cc <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003026:	4c6a      	ldr	r4, [pc, #424]	; (80031d0 <main+0x1ac>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800302e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003032:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4f67      	ldr	r7, [pc, #412]	; (80031d4 <main+0x1b0>)
 8003038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800303c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 8003048:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 800304e:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8003050:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8003052:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003054:	2000      	movs	r0, #0
 8003056:	b093      	sub	sp, #76	; 0x4c
 8003058:	f7fe fc7c 	bl	8001954 <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305c:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <main+0x1b8>)
 800305e:	2200      	movs	r2, #0
 8003060:	920a      	str	r2, [sp, #40]	; 0x28
 8003062:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003064:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003068:	6459      	str	r1, [r3, #68]	; 0x44
 800306a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800306c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003070:	910a      	str	r1, [sp, #40]	; 0x28
 8003072:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003074:	9209      	str	r2, [sp, #36]	; 0x24
 8003076:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003078:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800307c:	6419      	str	r1, [r3, #64]	; 0x40
 800307e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003080:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8003084:	9109      	str	r1, [sp, #36]	; 0x24
 8003086:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 800308a:	4955      	ldr	r1, [pc, #340]	; (80031e0 <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308c:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 800308e:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 8003090:	60e1      	str	r1, [r4, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	9208      	str	r2, [sp, #32]
 8003094:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003096:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800309a:	6419      	str	r1, [r3, #64]	; 0x40
 800309c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800309e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80030a2:	9108      	str	r1, [sp, #32]
 80030a4:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a6:	9207      	str	r2, [sp, #28]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	; (80031e4 <main+0x1c0>)
 80030aa:	6811      	ldr	r1, [r2, #0]
 80030ac:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80030b0:	6011      	str	r1, [r2, #0]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80030b8:	9207      	str	r2, [sp, #28]
 80030ba:	9a07      	ldr	r2, [sp, #28]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	f002 020c 	and.w	r2, r2, #12
 80030c2:	2a04      	cmp	r2, #4
 80030c4:	d007      	beq.n	80030d6 <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030cc:	2a08      	cmp	r2, #8
 80030ce:	d13c      	bne.n	800314a <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	0254      	lsls	r4, r2, #9
 80030d4:	d539      	bpl.n	800314a <main+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <main+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <main+0x1c4>)
 80030dc:	2201      	movs	r2, #1
 80030de:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030e2:	6839      	ldr	r1, [r7, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <main+0x1b8>)
 80030e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80030e8:	0792      	lsls	r2, r2, #30
 80030ea:	d541      	bpl.n	8003170 <main+0x14c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	f002 020c 	and.w	r2, r2, #12
 80030f2:	2a08      	cmp	r2, #8
 80030f4:	d04b      	beq.n	800318e <main+0x16a>
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <main+0x1c4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
 80030fc:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <main+0x1b8>)
 8003100:	6813      	ldr	r3, [r2, #0]
 8003102:	019e      	lsls	r6, r3, #6
 8003104:	d439      	bmi.n	800317a <main+0x156>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <main+0x1c8>)
 8003108:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <main+0x1c4>)
 800310c:	2201      	movs	r2, #1
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
 8003110:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4a32      	ldr	r2, [pc, #200]	; (80031dc <main+0x1b8>)
 8003114:	6813      	ldr	r3, [r2, #0]
 8003116:	019d      	lsls	r5, r3, #6
 8003118:	d534      	bpl.n	8003184 <main+0x160>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <main+0x1a8>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f002 0207 	and.w	r2, r2, #7
 8003122:	2a02      	cmp	r2, #2
 8003124:	d949      	bls.n	80031ba <main+0x196>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003126:	492d      	ldr	r1, [pc, #180]	; (80031dc <main+0x1b8>)
 8003128:	688b      	ldr	r3, [r1, #8]
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312e:	608b      	str	r3, [r1, #8]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	688b      	ldr	r3, [r1, #8]
 8003132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003136:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	688b      	ldr	r3, [r1, #8]
 800313a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313e:	608b      	str	r3, [r1, #8]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	680b      	ldr	r3, [r1, #0]
 8003142:	0198      	lsls	r0, r3, #6
 8003144:	d454      	bmi.n	80031f0 <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 8003146:	b672      	cpsid	i
  while (1)
 8003148:	e7fe      	b.n	8003148 <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <main+0x1b8>)
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	0398      	lsls	r0, r3, #14
 8003162:	d4ba      	bmi.n	80030da <main+0xb6>
 8003164:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003166:	1a5b      	subs	r3, r3, r1
 8003168:	2b64      	cmp	r3, #100	; 0x64
 800316a:	d9f8      	bls.n	800315e <main+0x13a>
 800316c:	b672      	cpsid	i
 800316e:	e7fe      	b.n	800316e <main+0x14a>
 8003170:	683a      	ldr	r2, [r7, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003172:	1a52      	subs	r2, r2, r1
 8003174:	2a02      	cmp	r2, #2
 8003176:	d9b6      	bls.n	80030e6 <main+0xc2>
 8003178:	e7f8      	b.n	800316c <main+0x148>
 800317a:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	1a5b      	subs	r3, r3, r1
 800317e:	2b02      	cmp	r3, #2
 8003180:	d9be      	bls.n	8003100 <main+0xdc>
 8003182:	e7f3      	b.n	800316c <main+0x148>
 8003184:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	1a5b      	subs	r3, r3, r1
 8003188:	2b02      	cmp	r3, #2
 800318a:	d9c3      	bls.n	8003114 <main+0xf0>
 800318c:	e7ee      	b.n	800316c <main+0x148>
        pll_config = RCC->PLLCFGR;
 800318e:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	025c      	lsls	r4, r3, #9
 8003192:	d5eb      	bpl.n	800316c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003198:	2a04      	cmp	r2, #4
 800319a:	d1e7      	bne.n	800316c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800319c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80031a0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a2:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 80031a6:	d1e1      	bne.n	800316c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80031ac:	d1de      	bne.n	800316c <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b6:	d1d9      	bne.n	800316c <main+0x148>
 80031b8:	e7af      	b.n	800311a <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	2203      	movs	r2, #3
 80031bc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d1be      	bne.n	8003146 <main+0x122>
 80031c8:	e7ad      	b.n	8003126 <main+0x102>
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	e000ed00 	.word	0xe000ed00
 80031d4:	20000ce0 	.word	0x20000ce0
 80031d8:	05fa0300 	.word	0x05fa0300
 80031dc:	40023800 	.word	0x40023800
 80031e0:	05fa0700 	.word	0x05fa0700
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470000 	.word	0x42470000
 80031ec:	04401904 	.word	0x04401904
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f0:	688b      	ldr	r3, [r1, #8]
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	608b      	str	r3, [r1, #8]
 80031fc:	683a      	ldr	r2, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	688b      	ldr	r3, [r1, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	f040 81cb 	bne.w	80035a4 <main+0x580>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320e:	4bb6      	ldr	r3, [pc, #728]	; (80034e8 <main+0x4c4>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	0752      	lsls	r2, r2, #29
 8003214:	f100 81cc 	bmi.w	80035b0 <main+0x58c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	688b      	ldr	r3, [r1, #8]
 800321a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800321e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003222:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003224:	688b      	ldr	r3, [r1, #8]
 8003226:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800322a:	608b      	str	r3, [r1, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800322c:	688b      	ldr	r3, [r1, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	f000 81e0 	beq.w	80035f8 <main+0x5d4>
 8003238:	2b08      	cmp	r3, #8
 800323a:	f000 81c2 	beq.w	80035c2 <main+0x59e>
      sysclockfreq = HSI_VALUE;
 800323e:	4dab      	ldr	r5, [pc, #684]	; (80034ec <main+0x4c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003240:	4eab      	ldr	r6, [pc, #684]	; (80034f0 <main+0x4cc>)
 8003242:	4aac      	ldr	r2, [pc, #688]	; (80034f4 <main+0x4d0>)
 8003244:	68b3      	ldr	r3, [r6, #8]
 8003246:	4cac      	ldr	r4, [pc, #688]	; (80034f8 <main+0x4d4>)
  huart2.Init.BaudRate = 115200;
 8003248:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8003528 <main+0x504>
 800324c:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f04f 0800 	mov.w	r8, #0
 8003254:	5cd0      	ldrb	r0, [r2, r3]
 8003256:	4ba9      	ldr	r3, [pc, #676]	; (80034fc <main+0x4d8>)
 8003258:	40c5      	lsrs	r5, r0
 800325a:	601d      	str	r5, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800325c:	4ba8      	ldr	r3, [pc, #672]	; (8003500 <main+0x4dc>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	f7fe fb78 	bl	8001954 <HAL_InitTick.isra.0>
 8003264:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003268:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003270:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003272:	48a4      	ldr	r0, [pc, #656]	; (8003504 <main+0x4e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6333      	str	r3, [r6, #48]	; 0x30
 800327a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	9306      	str	r3, [sp, #24]
 8003282:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003284:	f8cd 8014 	str.w	r8, [sp, #20]
 8003288:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	6333      	str	r3, [r6, #48]	; 0x30
 8003290:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	9305      	str	r3, [sp, #20]
 8003298:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	f8cd 8010 	str.w	r8, [sp, #16]
 800329e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6333      	str	r3, [r6, #48]	; 0x30
 80032a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80032b4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	6333      	str	r3, [r6, #48]	; 0x30
 80032bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032ca:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032cc:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 80032d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032d4:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032d6:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032da:	f7fd ff51 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032de:	2301      	movs	r3, #1
 80032e0:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032e4:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 80032e6:	4c88      	ldr	r4, [pc, #544]	; (8003508 <main+0x4e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e8:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f7fd ff46 	bl	8001180 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80032f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80032f8:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 8003300:	f8c4 8010 	str.w	r8, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003304:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003306:	e9c4 8802 	strd	r8, r8, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330a:	e9c4 2805 	strd	r2, r8, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800330e:	f8c4 801c 	str.w	r8, [r4, #28]
 8003312:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003316:	bb53      	cbnz	r3, 800336e <main+0x34a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003318:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331c:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 8003324:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332a:	6433      	str	r3, [r6, #64]	; 0x40
 800332c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	930c      	str	r3, [sp, #48]	; 0x30
 8003334:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003336:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800333a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6333      	str	r3, [r6, #48]	; 0x30
 8003342:	6b33      	ldr	r3, [r6, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003344:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	930b      	str	r3, [sp, #44]	; 0x2c
 800334c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003352:	2603      	movs	r6, #3
 8003354:	2307      	movs	r3, #7
 8003356:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	f7fd ff11 	bl	8001180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800335e:	4642      	mov	r2, r8
 8003360:	4641      	mov	r1, r8
 8003362:	2026      	movs	r0, #38	; 0x26
 8003364:	f7fd fede 	bl	8001124 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <main+0x4e8>)
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	605a      	str	r2, [r3, #4]
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336e:	6826      	ldr	r6, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003370:	68e2      	ldr	r2, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003372:	2324      	movs	r3, #36	; 0x24
 8003374:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003378:	68f3      	ldr	r3, [r6, #12]
 800337a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337e:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003380:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003382:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003388:	4313      	orrs	r3, r2
 800338a:	6133      	str	r3, [r6, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800338c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800338e:	68f1      	ldr	r1, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003390:	69e2      	ldr	r2, [r4, #28]
 8003392:	4303      	orrs	r3, r0
 8003394:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003396:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800339c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033a0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 80033a2:	430b      	orrs	r3, r1
 80033a4:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a6:	6973      	ldr	r3, [r6, #20]
 80033a8:	69a1      	ldr	r1, [r4, #24]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6173      	str	r3, [r6, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <main+0x4ec>)
 80033b4:	4957      	ldr	r1, [pc, #348]	; (8003514 <main+0x4f0>)
 80033b6:	429e      	cmp	r6, r3
 80033b8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	d003      	beq.n	80033c8 <main+0x3a4>
 80033c0:	4855      	ldr	r0, [pc, #340]	; (8003518 <main+0x4f4>)
 80033c2:	4286      	cmp	r6, r0
 80033c4:	f040 811a 	bne.w	80035fc <main+0x5d8>
 80033c8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033cc:	5cc9      	ldrb	r1, [r1, r3]
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	40cd      	lsrs	r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d6:	f04f 0119 	mov.w	r1, #25
 80033da:	fba5 0101 	umull	r0, r1, r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033de:	f040 8110 	bne.w	8003602 <main+0x5de>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e2:	18da      	adds	r2, r3, r3
 80033e4:	f04f 0500 	mov.w	r5, #0
 80033e8:	eb45 0305 	adc.w	r3, r5, r5
 80033ec:	f7fd fc5a 	bl	8000ca4 <__aeabi_uldivmod>
 80033f0:	2164      	movs	r1, #100	; 0x64
 80033f2:	fbb0 f5f1 	udiv	r5, r0, r1
 80033f6:	fb01 0315 	mls	r3, r1, r5, r0
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3332      	adds	r3, #50	; 0x32
 80033fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003402:	f003 0207 	and.w	r2, r3, #7
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800340c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003410:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003412:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003414:	6933      	ldr	r3, [r6, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003416:	4a41      	ldr	r2, [pc, #260]	; (800351c <main+0x4f8>)
 8003418:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800341c:	6133      	str	r3, [r6, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	6973      	ldr	r3, [r6, #20]
 8003420:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003424:	6173      	str	r3, [r6, #20]
  __HAL_UART_ENABLE(huart);
 8003426:	68f3      	ldr	r3, [r6, #12]
 8003428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800342c:	60f3      	str	r3, [r6, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	6423      	str	r3, [r4, #64]	; 0x40
  hiwdg.Instance = IWDG;
 8003432:	4e3b      	ldr	r6, [pc, #236]	; (8003520 <main+0x4fc>)
  huart->gState = HAL_UART_STATE_READY;
 8003434:	2320      	movs	r3, #32
 8003436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800343a:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 800343c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003440:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 8003444:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003448:	e9c6 2100 	strd	r2, r1, [r6]
  hiwdg.Init.Reload = 4095;
 800344c:	60b3      	str	r3, [r6, #8]
 800344e:	6010      	str	r0, [r2, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003450:	f245 5055 	movw	r0, #21845	; 0x5555
 8003454:	6010      	str	r0, [r2, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003456:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003458:	6093      	str	r3, [r2, #8]
 800345a:	6839      	ldr	r1, [r7, #0]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800345c:	68d3      	ldr	r3, [r2, #12]
 800345e:	f013 0303 	ands.w	r3, r3, #3
 8003462:	f040 80de 	bne.w	8003622 <main+0x5fe>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003466:	4c2f      	ldr	r4, [pc, #188]	; (8003524 <main+0x500>)
 8003468:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800346a:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	6840      	ldr	r0, [r0, #4]
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	2202      	movs	r2, #2
 8003478:	f000 fe02 	bl	8004080 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	9b01      	ldr	r3, [sp, #4]
 8003480:	6880      	ldr	r0, [r0, #8]
 8003482:	4619      	mov	r1, r3
 8003484:	2202      	movs	r2, #2
 8003486:	f000 fdfb 	bl	8004080 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	68c0      	ldr	r0, [r0, #12]
 8003490:	2202      	movs	r2, #2
 8003492:	4619      	mov	r1, r3
 8003494:	f000 fdf4 	bl	8004080 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <main+0x504>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80034a0:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 80034aa:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80034ae:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 80034b0:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 80034b4:	d053      	beq.n	800355e <main+0x53a>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 80034b6:	481d      	ldr	r0, [pc, #116]	; (800352c <main+0x508>)
 80034b8:	f004 fb50 	bl	8007b5c <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 80034bc:	2c00      	cmp	r4, #0
 80034be:	da02      	bge.n	80034c6 <main+0x4a2>
 80034c0:	481b      	ldr	r0, [pc, #108]	; (8003530 <main+0x50c>)
 80034c2:	f004 fb4b 	bl	8007b5c <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 80034c6:	0067      	lsls	r7, r4, #1
 80034c8:	d502      	bpl.n	80034d0 <main+0x4ac>
 80034ca:	481a      	ldr	r0, [pc, #104]	; (8003534 <main+0x510>)
 80034cc:	f004 fb46 	bl	8007b5c <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 80034d0:	00a5      	lsls	r5, r4, #2
 80034d2:	d502      	bpl.n	80034da <main+0x4b6>
 80034d4:	4818      	ldr	r0, [pc, #96]	; (8003538 <main+0x514>)
 80034d6:	f004 fb41 	bl	8007b5c <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 80034da:	00e0      	lsls	r0, r4, #3
 80034dc:	d530      	bpl.n	8003540 <main+0x51c>
 80034de:	4817      	ldr	r0, [pc, #92]	; (800353c <main+0x518>)
 80034e0:	f004 fb3c 	bl	8007b5c <puts>
 80034e4:	e02c      	b.n	8003540 <main+0x51c>
 80034e6:	bf00      	nop
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	40023800 	.word	0x40023800
 80034f4:	0800c018 	.word	0x0800c018
 80034f8:	40020000 	.word	0x40020000
 80034fc:	20000004 	.word	0x20000004
 8003500:	20000018 	.word	0x20000018
 8003504:	40020800 	.word	0x40020800
 8003508:	20000b58 	.word	0x20000b58
 800350c:	e000e100 	.word	0xe000e100
 8003510:	40011000 	.word	0x40011000
 8003514:	0800c028 	.word	0x0800c028
 8003518:	40011400 	.word	0x40011400
 800351c:	40003000 	.word	0x40003000
 8003520:	20000abc 	.word	0x20000abc
 8003524:	2000001c 	.word	0x2000001c
 8003528:	40004400 	.word	0x40004400
 800352c:	080090fa 	.word	0x080090fa
 8003530:	08009132 	.word	0x08009132
 8003534:	0800913d 	.word	0x0800913d
 8003538:	08009150 	.word	0x08009150
 800353c:	0800916f 	.word	0x0800916f
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8003540:	01a1      	lsls	r1, r4, #6
 8003542:	d502      	bpl.n	800354a <main+0x526>
 8003544:	484f      	ldr	r0, [pc, #316]	; (8003684 <main+0x660>)
 8003546:	f004 fb09 	bl	8007b5c <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 800354a:	0162      	lsls	r2, r4, #5
 800354c:	d502      	bpl.n	8003554 <main+0x530>
 800354e:	484e      	ldr	r0, [pc, #312]	; (8003688 <main+0x664>)
 8003550:	f004 fb04 	bl	8007b5c <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8003554:	0123      	lsls	r3, r4, #4
 8003556:	d502      	bpl.n	800355e <main+0x53a>
 8003558:	484c      	ldr	r0, [pc, #304]	; (800368c <main+0x668>)
 800355a:	f004 faff 	bl	8007b5c <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 800355e:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <main+0x66c>)
 8003560:	4d4c      	ldr	r5, [pc, #304]	; (8003694 <main+0x670>)
  p = _tasktable_start;
 8003562:	4c4d      	ldr	r4, [pc, #308]	; (8003698 <main+0x674>)
  while(p != _tasktable_end) {
 8003564:	4f4d      	ldr	r7, [pc, #308]	; (800369c <main+0x678>)
 8003566:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800356a:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 800356c:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 8003570:	42bc      	cmp	r4, r7
 8003572:	d161      	bne.n	8003638 <main+0x614>
  my_Init();
 8003574:	f7fc fe4a 	bl	800020c <my_Init>
  ticks = AccumTicks;
 8003578:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80036a8 <main+0x684>
  AccumTicks = 0;
 800357c:	f04f 0a00 	mov.w	sl, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003580:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 8003584:	b672      	cpsid	i
  ticks = AccumTicks;
 8003586:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 800358a:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 800358e:	b662      	cpsie	i
  s = _taskstate_start;
 8003590:	4d40      	ldr	r5, [pc, #256]	; (8003694 <main+0x670>)
  p = _tasktable_start;
 8003592:	4c41      	ldr	r4, [pc, #260]	; (8003698 <main+0x674>)
  while(p != _tasktable_end) {
 8003594:	42bc      	cmp	r4, r7
 8003596:	d157      	bne.n	8003648 <main+0x624>
  my_Loop();
 8003598:	f7fc fe36 	bl	8000208 <my_Loop>
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 80035a2:	e7ef      	b.n	8003584 <main+0x560>
 80035a4:	683b      	ldr	r3, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	4283      	cmp	r3, r0
 80035aa:	f67f ae2a 	bls.w	8003202 <main+0x1de>
 80035ae:	e5ca      	b.n	8003146 <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b0:	2203      	movs	r2, #3
 80035b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f47f adc3 	bne.w	8003146 <main+0x122>
 80035c0:	e62a      	b.n	8003218 <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035cc:	bf14      	ite	ne
 80035ce:	4834      	ldrne	r0, [pc, #208]	; (80036a0 <main+0x67c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d0:	4834      	ldreq	r0, [pc, #208]	; (80036a4 <main+0x680>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80035d6:	bf18      	it	ne
 80035d8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	fba1 0100 	umull	r0, r1, r1, r0
 80035e2:	f7fd fb5f 	bl	8000ca4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <main+0x66c>)
 80035e8:	685d      	ldr	r5, [r3, #4]
 80035ea:	f3c5 4501 	ubfx	r5, r5, #16, #2
 80035ee:	3501      	adds	r5, #1
 80035f0:	006d      	lsls	r5, r5, #1
      sysclockfreq = pllvco/pllp;
 80035f2:	fbb0 f5f5 	udiv	r5, r0, r5
  return sysclockfreq;
 80035f6:	e623      	b.n	8003240 <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	4d29      	ldr	r5, [pc, #164]	; (80036a0 <main+0x67c>)
 80035fa:	e621      	b.n	8003240 <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035fc:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003600:	e6e4      	b.n	80033cc <main+0x3a8>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003602:	009a      	lsls	r2, r3, #2
 8003604:	0f9b      	lsrs	r3, r3, #30
 8003606:	f7fd fb4d 	bl	8000ca4 <__aeabi_uldivmod>
 800360a:	2264      	movs	r2, #100	; 0x64
 800360c:	fbb0 f1f2 	udiv	r1, r0, r2
 8003610:	fb02 0311 	mls	r3, r2, r1, r0
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	3332      	adds	r3, #50	; 0x32
 8003618:	fbb3 f3f2 	udiv	r3, r3, r2
 800361c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003620:	e6f7      	b.n	8003412 <main+0x3ee>
 8003622:	683b      	ldr	r3, [r7, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003624:	1a5b      	subs	r3, r3, r1
 8003626:	2b31      	cmp	r3, #49	; 0x31
 8003628:	f67f af18 	bls.w	800345c <main+0x438>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800362c:	68d3      	ldr	r3, [r2, #12]
 800362e:	079b      	lsls	r3, r3, #30
 8003630:	f43f af14 	beq.w	800345c <main+0x438>
  __ASM volatile ("cpsid i" : : : "memory");
 8003634:	b672      	cpsid	i
  while (1)
 8003636:	e7fe      	b.n	8003636 <main+0x612>
    if(p->initFunc != NULL) {
 8003638:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 800363a:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 800363e:	b10b      	cbz	r3, 8003644 <main+0x620>
      p->initFunc(p->data);
 8003640:	68e0      	ldr	r0, [r4, #12]
 8003642:	4798      	blx	r3
    p++;
 8003644:	3418      	adds	r4, #24
    s++;
 8003646:	e793      	b.n	8003570 <main+0x54c>
    if(p->func != NULL) {
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	b11b      	cbz	r3, 8003654 <main+0x630>
      if(p->interval == 0) {
 800364c:	6922      	ldr	r2, [r4, #16]
 800364e:	b9b2      	cbnz	r2, 800367e <main+0x65a>
	p->func(p->data);
 8003650:	68e0      	ldr	r0, [r4, #12]
 8003652:	4798      	blx	r3
    p++;
 8003654:	3418      	adds	r4, #24
    s++;
 8003656:	3504      	adds	r5, #4
 8003658:	e79c      	b.n	8003594 <main+0x570>
	  if(s->interval) {
 800365a:	682b      	ldr	r3, [r5, #0]
 800365c:	b953      	cbnz	r3, 8003674 <main+0x650>
	    p->func(p->data);
 800365e:	6863      	ldr	r3, [r4, #4]
 8003660:	68e0      	ldr	r0, [r4, #12]
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8003666:	6923      	ldr	r3, [r4, #16]
 8003668:	9a01      	ldr	r2, [sp, #4]
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 800366e:	2a00      	cmp	r2, #0
 8003670:	d1f3      	bne.n	800365a <main+0x636>
 8003672:	e7ef      	b.n	8003654 <main+0x630>
	    s->interval--;
 8003674:	3b01      	subs	r3, #1
 8003676:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f7      	bne.n	800366c <main+0x648>
 800367c:	e7ef      	b.n	800365e <main+0x63a>
 800367e:	465a      	mov	r2, fp
 8003680:	e7f5      	b.n	800366e <main+0x64a>
 8003682:	bf00      	nop
 8003684:	08009179 	.word	0x08009179
 8003688:	08009183 	.word	0x08009183
 800368c:	0800918d 	.word	0x0800918d
 8003690:	40023800 	.word	0x40023800
 8003694:	200001f0 	.word	0x200001f0
 8003698:	080147c0 	.word	0x080147c0
 800369c:	080147d8 	.word	0x080147d8
 80036a0:	007a1200 	.word	0x007a1200
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	20000214 	.word	0x20000214

080036ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <NMI_Handler>

080036ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ae:	e7fe      	b.n	80036ae <HardFault_Handler>

080036b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <MemManage_Handler>

080036b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036b2:	e7fe      	b.n	80036b2 <BusFault_Handler>

080036b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <UsageFault_Handler>

080036b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036b6:	4770      	bx	lr

080036b8 <DebugMon_Handler>:
 80036b8:	4770      	bx	lr

080036ba <PendSV_Handler>:
 80036ba:	4770      	bx	lr

080036bc <SysTick_Handler>:
  uwTick += uwTickFreq;
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036be:	b508      	push	{r3, lr}
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 80036c6:	f7fc fd95 	bl	80001f4 <my_Tick>
  AccumTicks++;
 80036ca:	4a03      	ldr	r2, [pc, #12]	; (80036d8 <SysTick_Handler+0x1c>)
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80036d2:	bd08      	pop	{r3, pc}
 80036d4:	20000ce0 	.word	0x20000ce0
 80036d8:	20000214 	.word	0x20000214

080036dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036dc:	4a03      	ldr	r2, [pc, #12]	; (80036ec <SystemInit+0x10>)
 80036de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036f4:	480d      	ldr	r0, [pc, #52]	; (800372c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036f6:	490e      	ldr	r1, [pc, #56]	; (8003730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036f8:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036fc:	e002      	b.n	8003704 <LoopCopyDataInit>

080036fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003702:	3304      	adds	r3, #4

08003704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003708:	d3f9      	bcc.n	80036fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800370a:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800370c:	4c0b      	ldr	r4, [pc, #44]	; (800373c <LoopFillZerobss+0x26>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003710:	e001      	b.n	8003716 <LoopFillZerobss>

08003712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003714:	3204      	adds	r2, #4

08003716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003718:	d3fb      	bcc.n	8003712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800371a:	f7ff ffdf 	bl	80036dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371e:	f000 f819 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003722:	f7ff fc7f 	bl	8003024 <main>
  bx  lr    
 8003726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800372c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003730:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003734:	080148d8 	.word	0x080148d8
  ldr r2, =_sbss
 8003738:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800373c:	20000cf4 	.word	0x20000cf4

08003740 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 8003740:	f7ff fc44 	bl	8002fcc <Default_IRQHandler>
  b  Infinite_Loop
 8003744:	e7fc      	b.n	8003740 <ADC_IRQHandler>
	...

08003748 <__errno>:
 8003748:	4b01      	ldr	r3, [pc, #4]	; (8003750 <__errno+0x8>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000001c 	.word	0x2000001c

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4d0d      	ldr	r5, [pc, #52]	; (800378c <__libc_init_array+0x38>)
 8003758:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	2600      	movs	r6, #0
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	4d0b      	ldr	r5, [pc, #44]	; (8003794 <__libc_init_array+0x40>)
 8003766:	4c0c      	ldr	r4, [pc, #48]	; (8003798 <__libc_init_array+0x44>)
 8003768:	f004 fc00 	bl	8007f6c <_init>
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	2600      	movs	r6, #0
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f855 3b04 	ldr.w	r3, [r5], #4
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f855 3b04 	ldr.w	r3, [r5], #4
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	080148d0 	.word	0x080148d0
 8003790:	080148d0 	.word	0x080148d0
 8003794:	080148d0 	.word	0x080148d0
 8003798:	080148d4 	.word	0x080148d4

0800379c <memset>:
 800379c:	4402      	add	r2, r0
 800379e:	4603      	mov	r3, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	f803 1b01 	strb.w	r1, [r3], #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <__cvt>:
 80037ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	ec55 4b10 	vmov	r4, r5, d0
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	460e      	mov	r6, r1
 80037b8:	4619      	mov	r1, r3
 80037ba:	462b      	mov	r3, r5
 80037bc:	bfbb      	ittet	lt
 80037be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037c2:	461d      	movlt	r5, r3
 80037c4:	2300      	movge	r3, #0
 80037c6:	232d      	movlt	r3, #45	; 0x2d
 80037c8:	700b      	strb	r3, [r1, #0]
 80037ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037d0:	4691      	mov	r9, r2
 80037d2:	f023 0820 	bic.w	r8, r3, #32
 80037d6:	bfbc      	itt	lt
 80037d8:	4622      	movlt	r2, r4
 80037da:	4614      	movlt	r4, r2
 80037dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037e0:	d005      	beq.n	80037ee <__cvt+0x42>
 80037e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80037e6:	d100      	bne.n	80037ea <__cvt+0x3e>
 80037e8:	3601      	adds	r6, #1
 80037ea:	2102      	movs	r1, #2
 80037ec:	e000      	b.n	80037f0 <__cvt+0x44>
 80037ee:	2103      	movs	r1, #3
 80037f0:	ab03      	add	r3, sp, #12
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	ab02      	add	r3, sp, #8
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	ec45 4b10 	vmov	d0, r4, r5
 80037fc:	4653      	mov	r3, sl
 80037fe:	4632      	mov	r2, r6
 8003800:	f001 fcb6 	bl	8005170 <_dtoa_r>
 8003804:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003808:	4607      	mov	r7, r0
 800380a:	d102      	bne.n	8003812 <__cvt+0x66>
 800380c:	f019 0f01 	tst.w	r9, #1
 8003810:	d022      	beq.n	8003858 <__cvt+0xac>
 8003812:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003816:	eb07 0906 	add.w	r9, r7, r6
 800381a:	d110      	bne.n	800383e <__cvt+0x92>
 800381c:	783b      	ldrb	r3, [r7, #0]
 800381e:	2b30      	cmp	r3, #48	; 0x30
 8003820:	d10a      	bne.n	8003838 <__cvt+0x8c>
 8003822:	2200      	movs	r2, #0
 8003824:	2300      	movs	r3, #0
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fd f975 	bl	8000b18 <__aeabi_dcmpeq>
 800382e:	b918      	cbnz	r0, 8003838 <__cvt+0x8c>
 8003830:	f1c6 0601 	rsb	r6, r6, #1
 8003834:	f8ca 6000 	str.w	r6, [sl]
 8003838:	f8da 3000 	ldr.w	r3, [sl]
 800383c:	4499      	add	r9, r3
 800383e:	2200      	movs	r2, #0
 8003840:	2300      	movs	r3, #0
 8003842:	4620      	mov	r0, r4
 8003844:	4629      	mov	r1, r5
 8003846:	f7fd f967 	bl	8000b18 <__aeabi_dcmpeq>
 800384a:	b108      	cbz	r0, 8003850 <__cvt+0xa4>
 800384c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003850:	2230      	movs	r2, #48	; 0x30
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	454b      	cmp	r3, r9
 8003856:	d307      	bcc.n	8003868 <__cvt+0xbc>
 8003858:	9b03      	ldr	r3, [sp, #12]
 800385a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800385c:	1bdb      	subs	r3, r3, r7
 800385e:	4638      	mov	r0, r7
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	b004      	add	sp, #16
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	9103      	str	r1, [sp, #12]
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	e7f0      	b.n	8003852 <__cvt+0xa6>

08003870 <__exponent>:
 8003870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003872:	4603      	mov	r3, r0
 8003874:	2900      	cmp	r1, #0
 8003876:	bfb8      	it	lt
 8003878:	4249      	neglt	r1, r1
 800387a:	f803 2b02 	strb.w	r2, [r3], #2
 800387e:	bfb4      	ite	lt
 8003880:	222d      	movlt	r2, #45	; 0x2d
 8003882:	222b      	movge	r2, #43	; 0x2b
 8003884:	2909      	cmp	r1, #9
 8003886:	7042      	strb	r2, [r0, #1]
 8003888:	dd2a      	ble.n	80038e0 <__exponent+0x70>
 800388a:	f10d 0407 	add.w	r4, sp, #7
 800388e:	46a4      	mov	ip, r4
 8003890:	270a      	movs	r7, #10
 8003892:	46a6      	mov	lr, r4
 8003894:	460a      	mov	r2, r1
 8003896:	fb91 f6f7 	sdiv	r6, r1, r7
 800389a:	fb07 1516 	mls	r5, r7, r6, r1
 800389e:	3530      	adds	r5, #48	; 0x30
 80038a0:	2a63      	cmp	r2, #99	; 0x63
 80038a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80038a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038aa:	4631      	mov	r1, r6
 80038ac:	dcf1      	bgt.n	8003892 <__exponent+0x22>
 80038ae:	3130      	adds	r1, #48	; 0x30
 80038b0:	f1ae 0502 	sub.w	r5, lr, #2
 80038b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038b8:	1c44      	adds	r4, r0, #1
 80038ba:	4629      	mov	r1, r5
 80038bc:	4561      	cmp	r1, ip
 80038be:	d30a      	bcc.n	80038d6 <__exponent+0x66>
 80038c0:	f10d 0209 	add.w	r2, sp, #9
 80038c4:	eba2 020e 	sub.w	r2, r2, lr
 80038c8:	4565      	cmp	r5, ip
 80038ca:	bf88      	it	hi
 80038cc:	2200      	movhi	r2, #0
 80038ce:	4413      	add	r3, r2
 80038d0:	1a18      	subs	r0, r3, r0
 80038d2:	b003      	add	sp, #12
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80038de:	e7ed      	b.n	80038bc <__exponent+0x4c>
 80038e0:	2330      	movs	r3, #48	; 0x30
 80038e2:	3130      	adds	r1, #48	; 0x30
 80038e4:	7083      	strb	r3, [r0, #2]
 80038e6:	70c1      	strb	r1, [r0, #3]
 80038e8:	1d03      	adds	r3, r0, #4
 80038ea:	e7f1      	b.n	80038d0 <__exponent+0x60>

080038ec <_printf_float>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	ed2d 8b02 	vpush	{d8}
 80038f4:	b08d      	sub	sp, #52	; 0x34
 80038f6:	460c      	mov	r4, r1
 80038f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80038fc:	4616      	mov	r6, r2
 80038fe:	461f      	mov	r7, r3
 8003900:	4605      	mov	r5, r0
 8003902:	f002 ff5b 	bl	80067bc <_localeconv_r>
 8003906:	f8d0 a000 	ldr.w	sl, [r0]
 800390a:	4650      	mov	r0, sl
 800390c:	f7fc fc82 	bl	8000214 <strlen>
 8003910:	2300      	movs	r3, #0
 8003912:	930a      	str	r3, [sp, #40]	; 0x28
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	9305      	str	r3, [sp, #20]
 8003918:	f8d8 3000 	ldr.w	r3, [r8]
 800391c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003920:	3307      	adds	r3, #7
 8003922:	f023 0307 	bic.w	r3, r3, #7
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	f8c8 2000 	str.w	r2, [r8]
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003936:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800393a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800393e:	9307      	str	r3, [sp, #28]
 8003940:	f8cd 8018 	str.w	r8, [sp, #24]
 8003944:	ee08 0a10 	vmov	s16, r0
 8003948:	4b9f      	ldr	r3, [pc, #636]	; (8003bc8 <_printf_float+0x2dc>)
 800394a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800394e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003952:	f7fd f913 	bl	8000b7c <__aeabi_dcmpun>
 8003956:	bb88      	cbnz	r0, 80039bc <_printf_float+0xd0>
 8003958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800395c:	4b9a      	ldr	r3, [pc, #616]	; (8003bc8 <_printf_float+0x2dc>)
 800395e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003962:	f7fd f8ed 	bl	8000b40 <__aeabi_dcmple>
 8003966:	bb48      	cbnz	r0, 80039bc <_printf_float+0xd0>
 8003968:	2200      	movs	r2, #0
 800396a:	2300      	movs	r3, #0
 800396c:	4640      	mov	r0, r8
 800396e:	4649      	mov	r1, r9
 8003970:	f7fd f8dc 	bl	8000b2c <__aeabi_dcmplt>
 8003974:	b110      	cbz	r0, 800397c <_printf_float+0x90>
 8003976:	232d      	movs	r3, #45	; 0x2d
 8003978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800397c:	4b93      	ldr	r3, [pc, #588]	; (8003bcc <_printf_float+0x2e0>)
 800397e:	4894      	ldr	r0, [pc, #592]	; (8003bd0 <_printf_float+0x2e4>)
 8003980:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003984:	bf94      	ite	ls
 8003986:	4698      	movls	r8, r3
 8003988:	4680      	movhi	r8, r0
 800398a:	2303      	movs	r3, #3
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	9b05      	ldr	r3, [sp, #20]
 8003990:	f023 0204 	bic.w	r2, r3, #4
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	f04f 0900 	mov.w	r9, #0
 800399a:	9700      	str	r7, [sp, #0]
 800399c:	4633      	mov	r3, r6
 800399e:	aa0b      	add	r2, sp, #44	; 0x2c
 80039a0:	4621      	mov	r1, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 f9d8 	bl	8003d58 <_printf_common>
 80039a8:	3001      	adds	r0, #1
 80039aa:	f040 8090 	bne.w	8003ace <_printf_float+0x1e2>
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b2:	b00d      	add	sp, #52	; 0x34
 80039b4:	ecbd 8b02 	vpop	{d8}
 80039b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	4640      	mov	r0, r8
 80039c2:	4649      	mov	r1, r9
 80039c4:	f7fd f8da 	bl	8000b7c <__aeabi_dcmpun>
 80039c8:	b140      	cbz	r0, 80039dc <_printf_float+0xf0>
 80039ca:	464b      	mov	r3, r9
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bfbc      	itt	lt
 80039d0:	232d      	movlt	r3, #45	; 0x2d
 80039d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80039d6:	487f      	ldr	r0, [pc, #508]	; (8003bd4 <_printf_float+0x2e8>)
 80039d8:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <_printf_float+0x2ec>)
 80039da:	e7d1      	b.n	8003980 <_printf_float+0x94>
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80039e2:	9206      	str	r2, [sp, #24]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	d13f      	bne.n	8003a68 <_printf_float+0x17c>
 80039e8:	2306      	movs	r3, #6
 80039ea:	6063      	str	r3, [r4, #4]
 80039ec:	9b05      	ldr	r3, [sp, #20]
 80039ee:	6861      	ldr	r1, [r4, #4]
 80039f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039f4:	2300      	movs	r3, #0
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	ab0a      	add	r3, sp, #40	; 0x28
 80039fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80039fe:	ab09      	add	r3, sp, #36	; 0x24
 8003a00:	ec49 8b10 	vmov	d0, r8, r9
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6022      	str	r2, [r4, #0]
 8003a08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f7ff fecd 	bl	80037ac <__cvt>
 8003a12:	9b06      	ldr	r3, [sp, #24]
 8003a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a16:	2b47      	cmp	r3, #71	; 0x47
 8003a18:	4680      	mov	r8, r0
 8003a1a:	d108      	bne.n	8003a2e <_printf_float+0x142>
 8003a1c:	1cc8      	adds	r0, r1, #3
 8003a1e:	db02      	blt.n	8003a26 <_printf_float+0x13a>
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	4299      	cmp	r1, r3
 8003a24:	dd41      	ble.n	8003aaa <_printf_float+0x1be>
 8003a26:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a2a:	fa5f fb8b 	uxtb.w	fp, fp
 8003a2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a32:	d820      	bhi.n	8003a76 <_printf_float+0x18a>
 8003a34:	3901      	subs	r1, #1
 8003a36:	465a      	mov	r2, fp
 8003a38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a3c:	9109      	str	r1, [sp, #36]	; 0x24
 8003a3e:	f7ff ff17 	bl	8003870 <__exponent>
 8003a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a44:	1813      	adds	r3, r2, r0
 8003a46:	2a01      	cmp	r2, #1
 8003a48:	4681      	mov	r9, r0
 8003a4a:	6123      	str	r3, [r4, #16]
 8003a4c:	dc02      	bgt.n	8003a54 <_printf_float+0x168>
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	07d2      	lsls	r2, r2, #31
 8003a52:	d501      	bpl.n	8003a58 <_printf_float+0x16c>
 8003a54:	3301      	adds	r3, #1
 8003a56:	6123      	str	r3, [r4, #16]
 8003a58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d09c      	beq.n	800399a <_printf_float+0xae>
 8003a60:	232d      	movs	r3, #45	; 0x2d
 8003a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a66:	e798      	b.n	800399a <_printf_float+0xae>
 8003a68:	9a06      	ldr	r2, [sp, #24]
 8003a6a:	2a47      	cmp	r2, #71	; 0x47
 8003a6c:	d1be      	bne.n	80039ec <_printf_float+0x100>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1bc      	bne.n	80039ec <_printf_float+0x100>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e7b9      	b.n	80039ea <_printf_float+0xfe>
 8003a76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003a7a:	d118      	bne.n	8003aae <_printf_float+0x1c2>
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	dd0b      	ble.n	8003a9a <_printf_float+0x1ae>
 8003a82:	6121      	str	r1, [r4, #16]
 8003a84:	b913      	cbnz	r3, 8003a8c <_printf_float+0x1a0>
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	07d0      	lsls	r0, r2, #31
 8003a8a:	d502      	bpl.n	8003a92 <_printf_float+0x1a6>
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	440b      	add	r3, r1
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a94:	f04f 0900 	mov.w	r9, #0
 8003a98:	e7de      	b.n	8003a58 <_printf_float+0x16c>
 8003a9a:	b913      	cbnz	r3, 8003aa2 <_printf_float+0x1b6>
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	07d2      	lsls	r2, r2, #31
 8003aa0:	d501      	bpl.n	8003aa6 <_printf_float+0x1ba>
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	e7f4      	b.n	8003a90 <_printf_float+0x1a4>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e7f2      	b.n	8003a90 <_printf_float+0x1a4>
 8003aaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab0:	4299      	cmp	r1, r3
 8003ab2:	db05      	blt.n	8003ac0 <_printf_float+0x1d4>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	6121      	str	r1, [r4, #16]
 8003ab8:	07d8      	lsls	r0, r3, #31
 8003aba:	d5ea      	bpl.n	8003a92 <_printf_float+0x1a6>
 8003abc:	1c4b      	adds	r3, r1, #1
 8003abe:	e7e7      	b.n	8003a90 <_printf_float+0x1a4>
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	bfd4      	ite	le
 8003ac4:	f1c1 0202 	rsble	r2, r1, #2
 8003ac8:	2201      	movgt	r2, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	e7e0      	b.n	8003a90 <_printf_float+0x1a4>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	055a      	lsls	r2, r3, #21
 8003ad2:	d407      	bmi.n	8003ae4 <_printf_float+0x1f8>
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4628      	mov	r0, r5
 8003adc:	47b8      	blx	r7
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d12c      	bne.n	8003b3c <_printf_float+0x250>
 8003ae2:	e764      	b.n	80039ae <_printf_float+0xc2>
 8003ae4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ae8:	f240 80e0 	bls.w	8003cac <_printf_float+0x3c0>
 8003aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003af0:	2200      	movs	r2, #0
 8003af2:	2300      	movs	r3, #0
 8003af4:	f7fd f810 	bl	8000b18 <__aeabi_dcmpeq>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d034      	beq.n	8003b66 <_printf_float+0x27a>
 8003afc:	4a37      	ldr	r2, [pc, #220]	; (8003bdc <_printf_float+0x2f0>)
 8003afe:	2301      	movs	r3, #1
 8003b00:	4631      	mov	r1, r6
 8003b02:	4628      	mov	r0, r5
 8003b04:	47b8      	blx	r7
 8003b06:	3001      	adds	r0, #1
 8003b08:	f43f af51 	beq.w	80039ae <_printf_float+0xc2>
 8003b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b10:	429a      	cmp	r2, r3
 8003b12:	db02      	blt.n	8003b1a <_printf_float+0x22e>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	07d8      	lsls	r0, r3, #31
 8003b18:	d510      	bpl.n	8003b3c <_printf_float+0x250>
 8003b1a:	ee18 3a10 	vmov	r3, s16
 8003b1e:	4652      	mov	r2, sl
 8003b20:	4631      	mov	r1, r6
 8003b22:	4628      	mov	r0, r5
 8003b24:	47b8      	blx	r7
 8003b26:	3001      	adds	r0, #1
 8003b28:	f43f af41 	beq.w	80039ae <_printf_float+0xc2>
 8003b2c:	f04f 0800 	mov.w	r8, #0
 8003b30:	f104 091a 	add.w	r9, r4, #26
 8003b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4543      	cmp	r3, r8
 8003b3a:	dc09      	bgt.n	8003b50 <_printf_float+0x264>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	079b      	lsls	r3, r3, #30
 8003b40:	f100 8105 	bmi.w	8003d4e <_printf_float+0x462>
 8003b44:	68e0      	ldr	r0, [r4, #12]
 8003b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b48:	4298      	cmp	r0, r3
 8003b4a:	bfb8      	it	lt
 8003b4c:	4618      	movlt	r0, r3
 8003b4e:	e730      	b.n	80039b2 <_printf_float+0xc6>
 8003b50:	2301      	movs	r3, #1
 8003b52:	464a      	mov	r2, r9
 8003b54:	4631      	mov	r1, r6
 8003b56:	4628      	mov	r0, r5
 8003b58:	47b8      	blx	r7
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	f43f af27 	beq.w	80039ae <_printf_float+0xc2>
 8003b60:	f108 0801 	add.w	r8, r8, #1
 8003b64:	e7e6      	b.n	8003b34 <_printf_float+0x248>
 8003b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dc39      	bgt.n	8003be0 <_printf_float+0x2f4>
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <_printf_float+0x2f0>)
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4631      	mov	r1, r6
 8003b72:	4628      	mov	r0, r5
 8003b74:	47b8      	blx	r7
 8003b76:	3001      	adds	r0, #1
 8003b78:	f43f af19 	beq.w	80039ae <_printf_float+0xc2>
 8003b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d102      	bne.n	8003b8a <_printf_float+0x29e>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	07d9      	lsls	r1, r3, #31
 8003b88:	d5d8      	bpl.n	8003b3c <_printf_float+0x250>
 8003b8a:	ee18 3a10 	vmov	r3, s16
 8003b8e:	4652      	mov	r2, sl
 8003b90:	4631      	mov	r1, r6
 8003b92:	4628      	mov	r0, r5
 8003b94:	47b8      	blx	r7
 8003b96:	3001      	adds	r0, #1
 8003b98:	f43f af09 	beq.w	80039ae <_printf_float+0xc2>
 8003b9c:	f04f 0900 	mov.w	r9, #0
 8003ba0:	f104 0a1a 	add.w	sl, r4, #26
 8003ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba6:	425b      	negs	r3, r3
 8003ba8:	454b      	cmp	r3, r9
 8003baa:	dc01      	bgt.n	8003bb0 <_printf_float+0x2c4>
 8003bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bae:	e792      	b.n	8003ad6 <_printf_float+0x1ea>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4652      	mov	r2, sl
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	47b8      	blx	r7
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f43f aef7 	beq.w	80039ae <_printf_float+0xc2>
 8003bc0:	f109 0901 	add.w	r9, r9, #1
 8003bc4:	e7ee      	b.n	8003ba4 <_printf_float+0x2b8>
 8003bc6:	bf00      	nop
 8003bc8:	7fefffff 	.word	0x7fefffff
 8003bcc:	08014344 	.word	0x08014344
 8003bd0:	08014348 	.word	0x08014348
 8003bd4:	08014350 	.word	0x08014350
 8003bd8:	0801434c 	.word	0x0801434c
 8003bdc:	0800a3e6 	.word	0x0800a3e6
 8003be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003be4:	429a      	cmp	r2, r3
 8003be6:	bfa8      	it	ge
 8003be8:	461a      	movge	r2, r3
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	4691      	mov	r9, r2
 8003bee:	dc37      	bgt.n	8003c60 <_printf_float+0x374>
 8003bf0:	f04f 0b00 	mov.w	fp, #0
 8003bf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bf8:	f104 021a 	add.w	r2, r4, #26
 8003bfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	eba3 0309 	sub.w	r3, r3, r9
 8003c04:	455b      	cmp	r3, fp
 8003c06:	dc33      	bgt.n	8003c70 <_printf_float+0x384>
 8003c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	db3b      	blt.n	8003c88 <_printf_float+0x39c>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	07da      	lsls	r2, r3, #31
 8003c14:	d438      	bmi.n	8003c88 <_printf_float+0x39c>
 8003c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c18:	9a05      	ldr	r2, [sp, #20]
 8003c1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c1c:	1a9a      	subs	r2, r3, r2
 8003c1e:	eba3 0901 	sub.w	r9, r3, r1
 8003c22:	4591      	cmp	r9, r2
 8003c24:	bfa8      	it	ge
 8003c26:	4691      	movge	r9, r2
 8003c28:	f1b9 0f00 	cmp.w	r9, #0
 8003c2c:	dc35      	bgt.n	8003c9a <_printf_float+0x3ae>
 8003c2e:	f04f 0800 	mov.w	r8, #0
 8003c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c36:	f104 0a1a 	add.w	sl, r4, #26
 8003c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	eba3 0309 	sub.w	r3, r3, r9
 8003c44:	4543      	cmp	r3, r8
 8003c46:	f77f af79 	ble.w	8003b3c <_printf_float+0x250>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4652      	mov	r2, sl
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	47b8      	blx	r7
 8003c54:	3001      	adds	r0, #1
 8003c56:	f43f aeaa 	beq.w	80039ae <_printf_float+0xc2>
 8003c5a:	f108 0801 	add.w	r8, r8, #1
 8003c5e:	e7ec      	b.n	8003c3a <_printf_float+0x34e>
 8003c60:	4613      	mov	r3, r2
 8003c62:	4631      	mov	r1, r6
 8003c64:	4642      	mov	r2, r8
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d1c0      	bne.n	8003bf0 <_printf_float+0x304>
 8003c6e:	e69e      	b.n	80039ae <_printf_float+0xc2>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4631      	mov	r1, r6
 8003c74:	4628      	mov	r0, r5
 8003c76:	9205      	str	r2, [sp, #20]
 8003c78:	47b8      	blx	r7
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	f43f ae97 	beq.w	80039ae <_printf_float+0xc2>
 8003c80:	9a05      	ldr	r2, [sp, #20]
 8003c82:	f10b 0b01 	add.w	fp, fp, #1
 8003c86:	e7b9      	b.n	8003bfc <_printf_float+0x310>
 8003c88:	ee18 3a10 	vmov	r3, s16
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b8      	blx	r7
 8003c94:	3001      	adds	r0, #1
 8003c96:	d1be      	bne.n	8003c16 <_printf_float+0x32a>
 8003c98:	e689      	b.n	80039ae <_printf_float+0xc2>
 8003c9a:	9a05      	ldr	r2, [sp, #20]
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	4442      	add	r2, r8
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d1c1      	bne.n	8003c2e <_printf_float+0x342>
 8003caa:	e680      	b.n	80039ae <_printf_float+0xc2>
 8003cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cae:	2a01      	cmp	r2, #1
 8003cb0:	dc01      	bgt.n	8003cb6 <_printf_float+0x3ca>
 8003cb2:	07db      	lsls	r3, r3, #31
 8003cb4:	d538      	bpl.n	8003d28 <_printf_float+0x43c>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f43f ae74 	beq.w	80039ae <_printf_float+0xc2>
 8003cc6:	ee18 3a10 	vmov	r3, s16
 8003cca:	4652      	mov	r2, sl
 8003ccc:	4631      	mov	r1, r6
 8003cce:	4628      	mov	r0, r5
 8003cd0:	47b8      	blx	r7
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	f43f ae6b 	beq.w	80039ae <_printf_float+0xc2>
 8003cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f7fc ff1a 	bl	8000b18 <__aeabi_dcmpeq>
 8003ce4:	b9d8      	cbnz	r0, 8003d1e <_printf_float+0x432>
 8003ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce8:	f108 0201 	add.w	r2, r8, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	47b8      	blx	r7
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d10e      	bne.n	8003d16 <_printf_float+0x42a>
 8003cf8:	e659      	b.n	80039ae <_printf_float+0xc2>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4652      	mov	r2, sl
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4628      	mov	r0, r5
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	f43f ae52 	beq.w	80039ae <_printf_float+0xc2>
 8003d0a:	f108 0801 	add.w	r8, r8, #1
 8003d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d10:	3b01      	subs	r3, #1
 8003d12:	4543      	cmp	r3, r8
 8003d14:	dcf1      	bgt.n	8003cfa <_printf_float+0x40e>
 8003d16:	464b      	mov	r3, r9
 8003d18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d1c:	e6dc      	b.n	8003ad8 <_printf_float+0x1ec>
 8003d1e:	f04f 0800 	mov.w	r8, #0
 8003d22:	f104 0a1a 	add.w	sl, r4, #26
 8003d26:	e7f2      	b.n	8003d0e <_printf_float+0x422>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	e7df      	b.n	8003cee <_printf_float+0x402>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	464a      	mov	r2, r9
 8003d32:	4631      	mov	r1, r6
 8003d34:	4628      	mov	r0, r5
 8003d36:	47b8      	blx	r7
 8003d38:	3001      	adds	r0, #1
 8003d3a:	f43f ae38 	beq.w	80039ae <_printf_float+0xc2>
 8003d3e:	f108 0801 	add.w	r8, r8, #1
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d46:	1a5b      	subs	r3, r3, r1
 8003d48:	4543      	cmp	r3, r8
 8003d4a:	dcf0      	bgt.n	8003d2e <_printf_float+0x442>
 8003d4c:	e6fa      	b.n	8003b44 <_printf_float+0x258>
 8003d4e:	f04f 0800 	mov.w	r8, #0
 8003d52:	f104 0919 	add.w	r9, r4, #25
 8003d56:	e7f4      	b.n	8003d42 <_printf_float+0x456>

08003d58 <_printf_common>:
 8003d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	4699      	mov	r9, r3
 8003d60:	688a      	ldr	r2, [r1, #8]
 8003d62:	690b      	ldr	r3, [r1, #16]
 8003d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	bfb8      	it	lt
 8003d6c:	4613      	movlt	r3, r2
 8003d6e:	6033      	str	r3, [r6, #0]
 8003d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d74:	4607      	mov	r7, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	b10a      	cbz	r2, 8003d7e <_printf_common+0x26>
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	6033      	str	r3, [r6, #0]
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	0699      	lsls	r1, r3, #26
 8003d82:	bf42      	ittt	mi
 8003d84:	6833      	ldrmi	r3, [r6, #0]
 8003d86:	3302      	addmi	r3, #2
 8003d88:	6033      	strmi	r3, [r6, #0]
 8003d8a:	6825      	ldr	r5, [r4, #0]
 8003d8c:	f015 0506 	ands.w	r5, r5, #6
 8003d90:	d106      	bne.n	8003da0 <_printf_common+0x48>
 8003d92:	f104 0a19 	add.w	sl, r4, #25
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	6832      	ldr	r2, [r6, #0]
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	42ab      	cmp	r3, r5
 8003d9e:	dc26      	bgt.n	8003dee <_printf_common+0x96>
 8003da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da4:	1e13      	subs	r3, r2, #0
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	bf18      	it	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	0692      	lsls	r2, r2, #26
 8003dae:	d42b      	bmi.n	8003e08 <_printf_common+0xb0>
 8003db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db4:	4649      	mov	r1, r9
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d01e      	beq.n	8003dfc <_printf_common+0xa4>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	68e5      	ldr	r5, [r4, #12]
 8003dc2:	6832      	ldr	r2, [r6, #0]
 8003dc4:	f003 0306 	and.w	r3, r3, #6
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	bf08      	it	eq
 8003dcc:	1aad      	subeq	r5, r5, r2
 8003dce:	68a3      	ldr	r3, [r4, #8]
 8003dd0:	6922      	ldr	r2, [r4, #16]
 8003dd2:	bf0c      	ite	eq
 8003dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd8:	2500      	movne	r5, #0
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bfc4      	itt	gt
 8003dde:	1a9b      	subgt	r3, r3, r2
 8003de0:	18ed      	addgt	r5, r5, r3
 8003de2:	2600      	movs	r6, #0
 8003de4:	341a      	adds	r4, #26
 8003de6:	42b5      	cmp	r5, r6
 8003de8:	d11a      	bne.n	8003e20 <_printf_common+0xc8>
 8003dea:	2000      	movs	r0, #0
 8003dec:	e008      	b.n	8003e00 <_printf_common+0xa8>
 8003dee:	2301      	movs	r3, #1
 8003df0:	4652      	mov	r2, sl
 8003df2:	4649      	mov	r1, r9
 8003df4:	4638      	mov	r0, r7
 8003df6:	47c0      	blx	r8
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d103      	bne.n	8003e04 <_printf_common+0xac>
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e04:	3501      	adds	r5, #1
 8003e06:	e7c6      	b.n	8003d96 <_printf_common+0x3e>
 8003e08:	18e1      	adds	r1, r4, r3
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	2030      	movs	r0, #48	; 0x30
 8003e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e12:	4422      	add	r2, r4
 8003e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	e7c7      	b.n	8003db0 <_printf_common+0x58>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4622      	mov	r2, r4
 8003e24:	4649      	mov	r1, r9
 8003e26:	4638      	mov	r0, r7
 8003e28:	47c0      	blx	r8
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d0e6      	beq.n	8003dfc <_printf_common+0xa4>
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7d9      	b.n	8003de6 <_printf_common+0x8e>
	...

08003e34 <_printf_i>:
 8003e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	7e0f      	ldrb	r7, [r1, #24]
 8003e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e3c:	2f78      	cmp	r7, #120	; 0x78
 8003e3e:	4691      	mov	r9, r2
 8003e40:	4680      	mov	r8, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	469a      	mov	sl, r3
 8003e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e4a:	d807      	bhi.n	8003e5c <_printf_i+0x28>
 8003e4c:	2f62      	cmp	r7, #98	; 0x62
 8003e4e:	d80a      	bhi.n	8003e66 <_printf_i+0x32>
 8003e50:	2f00      	cmp	r7, #0
 8003e52:	f000 80d8 	beq.w	8004006 <_printf_i+0x1d2>
 8003e56:	2f58      	cmp	r7, #88	; 0x58
 8003e58:	f000 80a3 	beq.w	8003fa2 <_printf_i+0x16e>
 8003e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e64:	e03a      	b.n	8003edc <_printf_i+0xa8>
 8003e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e6a:	2b15      	cmp	r3, #21
 8003e6c:	d8f6      	bhi.n	8003e5c <_printf_i+0x28>
 8003e6e:	a101      	add	r1, pc, #4	; (adr r1, 8003e74 <_printf_i+0x40>)
 8003e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e74:	08003ecd 	.word	0x08003ecd
 8003e78:	08003ee1 	.word	0x08003ee1
 8003e7c:	08003e5d 	.word	0x08003e5d
 8003e80:	08003e5d 	.word	0x08003e5d
 8003e84:	08003e5d 	.word	0x08003e5d
 8003e88:	08003e5d 	.word	0x08003e5d
 8003e8c:	08003ee1 	.word	0x08003ee1
 8003e90:	08003e5d 	.word	0x08003e5d
 8003e94:	08003e5d 	.word	0x08003e5d
 8003e98:	08003e5d 	.word	0x08003e5d
 8003e9c:	08003e5d 	.word	0x08003e5d
 8003ea0:	08003fed 	.word	0x08003fed
 8003ea4:	08003f11 	.word	0x08003f11
 8003ea8:	08003fcf 	.word	0x08003fcf
 8003eac:	08003e5d 	.word	0x08003e5d
 8003eb0:	08003e5d 	.word	0x08003e5d
 8003eb4:	0800400f 	.word	0x0800400f
 8003eb8:	08003e5d 	.word	0x08003e5d
 8003ebc:	08003f11 	.word	0x08003f11
 8003ec0:	08003e5d 	.word	0x08003e5d
 8003ec4:	08003e5d 	.word	0x08003e5d
 8003ec8:	08003fd7 	.word	0x08003fd7
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	602a      	str	r2, [r5, #0]
 8003ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0a3      	b.n	8004028 <_printf_i+0x1f4>
 8003ee0:	6820      	ldr	r0, [r4, #0]
 8003ee2:	6829      	ldr	r1, [r5, #0]
 8003ee4:	0606      	lsls	r6, r0, #24
 8003ee6:	f101 0304 	add.w	r3, r1, #4
 8003eea:	d50a      	bpl.n	8003f02 <_printf_i+0xce>
 8003eec:	680e      	ldr	r6, [r1, #0]
 8003eee:	602b      	str	r3, [r5, #0]
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	da03      	bge.n	8003efc <_printf_i+0xc8>
 8003ef4:	232d      	movs	r3, #45	; 0x2d
 8003ef6:	4276      	negs	r6, r6
 8003ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003efc:	485e      	ldr	r0, [pc, #376]	; (8004078 <_printf_i+0x244>)
 8003efe:	230a      	movs	r3, #10
 8003f00:	e019      	b.n	8003f36 <_printf_i+0x102>
 8003f02:	680e      	ldr	r6, [r1, #0]
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f0a:	bf18      	it	ne
 8003f0c:	b236      	sxthne	r6, r6
 8003f0e:	e7ef      	b.n	8003ef0 <_printf_i+0xbc>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	6820      	ldr	r0, [r4, #0]
 8003f14:	1d19      	adds	r1, r3, #4
 8003f16:	6029      	str	r1, [r5, #0]
 8003f18:	0601      	lsls	r1, r0, #24
 8003f1a:	d501      	bpl.n	8003f20 <_printf_i+0xec>
 8003f1c:	681e      	ldr	r6, [r3, #0]
 8003f1e:	e002      	b.n	8003f26 <_printf_i+0xf2>
 8003f20:	0646      	lsls	r6, r0, #25
 8003f22:	d5fb      	bpl.n	8003f1c <_printf_i+0xe8>
 8003f24:	881e      	ldrh	r6, [r3, #0]
 8003f26:	4854      	ldr	r0, [pc, #336]	; (8004078 <_printf_i+0x244>)
 8003f28:	2f6f      	cmp	r7, #111	; 0x6f
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2308      	moveq	r3, #8
 8003f2e:	230a      	movne	r3, #10
 8003f30:	2100      	movs	r1, #0
 8003f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f36:	6865      	ldr	r5, [r4, #4]
 8003f38:	60a5      	str	r5, [r4, #8]
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	bfa2      	ittt	ge
 8003f3e:	6821      	ldrge	r1, [r4, #0]
 8003f40:	f021 0104 	bicge.w	r1, r1, #4
 8003f44:	6021      	strge	r1, [r4, #0]
 8003f46:	b90e      	cbnz	r6, 8003f4c <_printf_i+0x118>
 8003f48:	2d00      	cmp	r5, #0
 8003f4a:	d04d      	beq.n	8003fe8 <_printf_i+0x1b4>
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f52:	fb03 6711 	mls	r7, r3, r1, r6
 8003f56:	5dc7      	ldrb	r7, [r0, r7]
 8003f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f5c:	4637      	mov	r7, r6
 8003f5e:	42bb      	cmp	r3, r7
 8003f60:	460e      	mov	r6, r1
 8003f62:	d9f4      	bls.n	8003f4e <_printf_i+0x11a>
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d10b      	bne.n	8003f80 <_printf_i+0x14c>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	07de      	lsls	r6, r3, #31
 8003f6c:	d508      	bpl.n	8003f80 <_printf_i+0x14c>
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	6861      	ldr	r1, [r4, #4]
 8003f72:	4299      	cmp	r1, r3
 8003f74:	bfde      	ittt	le
 8003f76:	2330      	movle	r3, #48	; 0x30
 8003f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f80:	1b52      	subs	r2, r2, r5
 8003f82:	6122      	str	r2, [r4, #16]
 8003f84:	f8cd a000 	str.w	sl, [sp]
 8003f88:	464b      	mov	r3, r9
 8003f8a:	aa03      	add	r2, sp, #12
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f7ff fee2 	bl	8003d58 <_printf_common>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d14c      	bne.n	8004032 <_printf_i+0x1fe>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9c:	b004      	add	sp, #16
 8003f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa2:	4835      	ldr	r0, [pc, #212]	; (8004078 <_printf_i+0x244>)
 8003fa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fa8:	6829      	ldr	r1, [r5, #0]
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fb0:	6029      	str	r1, [r5, #0]
 8003fb2:	061d      	lsls	r5, r3, #24
 8003fb4:	d514      	bpl.n	8003fe0 <_printf_i+0x1ac>
 8003fb6:	07df      	lsls	r7, r3, #31
 8003fb8:	bf44      	itt	mi
 8003fba:	f043 0320 	orrmi.w	r3, r3, #32
 8003fbe:	6023      	strmi	r3, [r4, #0]
 8003fc0:	b91e      	cbnz	r6, 8003fca <_printf_i+0x196>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	f023 0320 	bic.w	r3, r3, #32
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	2310      	movs	r3, #16
 8003fcc:	e7b0      	b.n	8003f30 <_printf_i+0xfc>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f043 0320 	orr.w	r3, r3, #32
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	2378      	movs	r3, #120	; 0x78
 8003fd8:	4828      	ldr	r0, [pc, #160]	; (800407c <_printf_i+0x248>)
 8003fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fde:	e7e3      	b.n	8003fa8 <_printf_i+0x174>
 8003fe0:	0659      	lsls	r1, r3, #25
 8003fe2:	bf48      	it	mi
 8003fe4:	b2b6      	uxthmi	r6, r6
 8003fe6:	e7e6      	b.n	8003fb6 <_printf_i+0x182>
 8003fe8:	4615      	mov	r5, r2
 8003fea:	e7bb      	b.n	8003f64 <_printf_i+0x130>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	6826      	ldr	r6, [r4, #0]
 8003ff0:	6961      	ldr	r1, [r4, #20]
 8003ff2:	1d18      	adds	r0, r3, #4
 8003ff4:	6028      	str	r0, [r5, #0]
 8003ff6:	0635      	lsls	r5, r6, #24
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	d501      	bpl.n	8004000 <_printf_i+0x1cc>
 8003ffc:	6019      	str	r1, [r3, #0]
 8003ffe:	e002      	b.n	8004006 <_printf_i+0x1d2>
 8004000:	0670      	lsls	r0, r6, #25
 8004002:	d5fb      	bpl.n	8003ffc <_printf_i+0x1c8>
 8004004:	8019      	strh	r1, [r3, #0]
 8004006:	2300      	movs	r3, #0
 8004008:	6123      	str	r3, [r4, #16]
 800400a:	4615      	mov	r5, r2
 800400c:	e7ba      	b.n	8003f84 <_printf_i+0x150>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	1d1a      	adds	r2, r3, #4
 8004012:	602a      	str	r2, [r5, #0]
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	2100      	movs	r1, #0
 800401a:	4628      	mov	r0, r5
 800401c:	f7fc f908 	bl	8000230 <memchr>
 8004020:	b108      	cbz	r0, 8004026 <_printf_i+0x1f2>
 8004022:	1b40      	subs	r0, r0, r5
 8004024:	6060      	str	r0, [r4, #4]
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	6123      	str	r3, [r4, #16]
 800402a:	2300      	movs	r3, #0
 800402c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004030:	e7a8      	b.n	8003f84 <_printf_i+0x150>
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	462a      	mov	r2, r5
 8004036:	4649      	mov	r1, r9
 8004038:	4640      	mov	r0, r8
 800403a:	47d0      	blx	sl
 800403c:	3001      	adds	r0, #1
 800403e:	d0ab      	beq.n	8003f98 <_printf_i+0x164>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	079b      	lsls	r3, r3, #30
 8004044:	d413      	bmi.n	800406e <_printf_i+0x23a>
 8004046:	68e0      	ldr	r0, [r4, #12]
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	4298      	cmp	r0, r3
 800404c:	bfb8      	it	lt
 800404e:	4618      	movlt	r0, r3
 8004050:	e7a4      	b.n	8003f9c <_printf_i+0x168>
 8004052:	2301      	movs	r3, #1
 8004054:	4632      	mov	r2, r6
 8004056:	4649      	mov	r1, r9
 8004058:	4640      	mov	r0, r8
 800405a:	47d0      	blx	sl
 800405c:	3001      	adds	r0, #1
 800405e:	d09b      	beq.n	8003f98 <_printf_i+0x164>
 8004060:	3501      	adds	r5, #1
 8004062:	68e3      	ldr	r3, [r4, #12]
 8004064:	9903      	ldr	r1, [sp, #12]
 8004066:	1a5b      	subs	r3, r3, r1
 8004068:	42ab      	cmp	r3, r5
 800406a:	dcf2      	bgt.n	8004052 <_printf_i+0x21e>
 800406c:	e7eb      	b.n	8004046 <_printf_i+0x212>
 800406e:	2500      	movs	r5, #0
 8004070:	f104 0619 	add.w	r6, r4, #25
 8004074:	e7f5      	b.n	8004062 <_printf_i+0x22e>
 8004076:	bf00      	nop
 8004078:	08014354 	.word	0x08014354
 800407c:	08014365 	.word	0x08014365

08004080 <setvbuf>:
 8004080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004084:	461d      	mov	r5, r3
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <setvbuf+0x17c>)
 8004088:	681f      	ldr	r7, [r3, #0]
 800408a:	4604      	mov	r4, r0
 800408c:	460e      	mov	r6, r1
 800408e:	4690      	mov	r8, r2
 8004090:	b127      	cbz	r7, 800409c <setvbuf+0x1c>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	b913      	cbnz	r3, 800409c <setvbuf+0x1c>
 8004096:	4638      	mov	r0, r7
 8004098:	f001 ff72 	bl	8005f80 <__sinit>
 800409c:	4b58      	ldr	r3, [pc, #352]	; (8004200 <setvbuf+0x180>)
 800409e:	429c      	cmp	r4, r3
 80040a0:	d167      	bne.n	8004172 <setvbuf+0xf2>
 80040a2:	687c      	ldr	r4, [r7, #4]
 80040a4:	f1b8 0f02 	cmp.w	r8, #2
 80040a8:	d006      	beq.n	80040b8 <setvbuf+0x38>
 80040aa:	f1b8 0f01 	cmp.w	r8, #1
 80040ae:	f200 809f 	bhi.w	80041f0 <setvbuf+0x170>
 80040b2:	2d00      	cmp	r5, #0
 80040b4:	f2c0 809c 	blt.w	80041f0 <setvbuf+0x170>
 80040b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d405      	bmi.n	80040ca <setvbuf+0x4a>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	0598      	lsls	r0, r3, #22
 80040c2:	d402      	bmi.n	80040ca <setvbuf+0x4a>
 80040c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c6:	f002 fb7e 	bl	80067c6 <__retarget_lock_acquire_recursive>
 80040ca:	4621      	mov	r1, r4
 80040cc:	4638      	mov	r0, r7
 80040ce:	f001 fec3 	bl	8005e58 <_fflush_r>
 80040d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d4:	b141      	cbz	r1, 80040e8 <setvbuf+0x68>
 80040d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040da:	4299      	cmp	r1, r3
 80040dc:	d002      	beq.n	80040e4 <setvbuf+0x64>
 80040de:	4638      	mov	r0, r7
 80040e0:	f003 f8d0 	bl	8007284 <_free_r>
 80040e4:	2300      	movs	r3, #0
 80040e6:	6363      	str	r3, [r4, #52]	; 0x34
 80040e8:	2300      	movs	r3, #0
 80040ea:	61a3      	str	r3, [r4, #24]
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	0619      	lsls	r1, r3, #24
 80040f2:	d503      	bpl.n	80040fc <setvbuf+0x7c>
 80040f4:	6921      	ldr	r1, [r4, #16]
 80040f6:	4638      	mov	r0, r7
 80040f8:	f003 f8c4 	bl	8007284 <_free_r>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	f1b8 0f02 	cmp.w	r8, #2
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	d06c      	beq.n	80041e8 <setvbuf+0x168>
 800410e:	ab01      	add	r3, sp, #4
 8004110:	466a      	mov	r2, sp
 8004112:	4621      	mov	r1, r4
 8004114:	4638      	mov	r0, r7
 8004116:	f002 fb58 	bl	80067ca <__swhatbuf_r>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	4318      	orrs	r0, r3
 800411e:	81a0      	strh	r0, [r4, #12]
 8004120:	2d00      	cmp	r5, #0
 8004122:	d130      	bne.n	8004186 <setvbuf+0x106>
 8004124:	9d00      	ldr	r5, [sp, #0]
 8004126:	4628      	mov	r0, r5
 8004128:	f002 fbb4 	bl	8006894 <malloc>
 800412c:	4606      	mov	r6, r0
 800412e:	2800      	cmp	r0, #0
 8004130:	d155      	bne.n	80041de <setvbuf+0x15e>
 8004132:	f8dd 9000 	ldr.w	r9, [sp]
 8004136:	45a9      	cmp	r9, r5
 8004138:	d14a      	bne.n	80041d0 <setvbuf+0x150>
 800413a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800413e:	2200      	movs	r2, #0
 8004140:	60a2      	str	r2, [r4, #8]
 8004142:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004146:	6022      	str	r2, [r4, #0]
 8004148:	6122      	str	r2, [r4, #16]
 800414a:	2201      	movs	r2, #1
 800414c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004150:	6162      	str	r2, [r4, #20]
 8004152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	07d2      	lsls	r2, r2, #31
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	d405      	bmi.n	800416a <setvbuf+0xea>
 800415e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004162:	d102      	bne.n	800416a <setvbuf+0xea>
 8004164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004166:	f002 fb2f 	bl	80067c8 <__retarget_lock_release_recursive>
 800416a:	4628      	mov	r0, r5
 800416c:	b003      	add	sp, #12
 800416e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <setvbuf+0x184>)
 8004174:	429c      	cmp	r4, r3
 8004176:	d101      	bne.n	800417c <setvbuf+0xfc>
 8004178:	68bc      	ldr	r4, [r7, #8]
 800417a:	e793      	b.n	80040a4 <setvbuf+0x24>
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <setvbuf+0x188>)
 800417e:	429c      	cmp	r4, r3
 8004180:	bf08      	it	eq
 8004182:	68fc      	ldreq	r4, [r7, #12]
 8004184:	e78e      	b.n	80040a4 <setvbuf+0x24>
 8004186:	2e00      	cmp	r6, #0
 8004188:	d0cd      	beq.n	8004126 <setvbuf+0xa6>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	b913      	cbnz	r3, 8004194 <setvbuf+0x114>
 800418e:	4638      	mov	r0, r7
 8004190:	f001 fef6 	bl	8005f80 <__sinit>
 8004194:	f1b8 0f01 	cmp.w	r8, #1
 8004198:	bf08      	it	eq
 800419a:	89a3      	ldrheq	r3, [r4, #12]
 800419c:	6026      	str	r6, [r4, #0]
 800419e:	bf04      	itt	eq
 80041a0:	f043 0301 	orreq.w	r3, r3, #1
 80041a4:	81a3      	strheq	r3, [r4, #12]
 80041a6:	89a2      	ldrh	r2, [r4, #12]
 80041a8:	f012 0308 	ands.w	r3, r2, #8
 80041ac:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80041b0:	d01c      	beq.n	80041ec <setvbuf+0x16c>
 80041b2:	07d3      	lsls	r3, r2, #31
 80041b4:	bf41      	itttt	mi
 80041b6:	2300      	movmi	r3, #0
 80041b8:	426d      	negmi	r5, r5
 80041ba:	60a3      	strmi	r3, [r4, #8]
 80041bc:	61a5      	strmi	r5, [r4, #24]
 80041be:	bf58      	it	pl
 80041c0:	60a5      	strpl	r5, [r4, #8]
 80041c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80041c4:	f015 0501 	ands.w	r5, r5, #1
 80041c8:	d115      	bne.n	80041f6 <setvbuf+0x176>
 80041ca:	f412 7f00 	tst.w	r2, #512	; 0x200
 80041ce:	e7c8      	b.n	8004162 <setvbuf+0xe2>
 80041d0:	4648      	mov	r0, r9
 80041d2:	f002 fb5f 	bl	8006894 <malloc>
 80041d6:	4606      	mov	r6, r0
 80041d8:	2800      	cmp	r0, #0
 80041da:	d0ae      	beq.n	800413a <setvbuf+0xba>
 80041dc:	464d      	mov	r5, r9
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	e7d0      	b.n	800418a <setvbuf+0x10a>
 80041e8:	2500      	movs	r5, #0
 80041ea:	e7a8      	b.n	800413e <setvbuf+0xbe>
 80041ec:	60a3      	str	r3, [r4, #8]
 80041ee:	e7e8      	b.n	80041c2 <setvbuf+0x142>
 80041f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80041f4:	e7b9      	b.n	800416a <setvbuf+0xea>
 80041f6:	2500      	movs	r5, #0
 80041f8:	e7b7      	b.n	800416a <setvbuf+0xea>
 80041fa:	bf00      	nop
 80041fc:	2000001c 	.word	0x2000001c
 8004200:	08014558 	.word	0x08014558
 8004204:	08014578 	.word	0x08014578
 8004208:	08014538 	.word	0x08014538

0800420c <sulp>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4604      	mov	r4, r0
 8004210:	460d      	mov	r5, r1
 8004212:	ec45 4b10 	vmov	d0, r4, r5
 8004216:	4616      	mov	r6, r2
 8004218:	f002 fed6 	bl	8006fc8 <__ulp>
 800421c:	ec51 0b10 	vmov	r0, r1, d0
 8004220:	b17e      	cbz	r6, 8004242 <sulp+0x36>
 8004222:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004226:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800422a:	2b00      	cmp	r3, #0
 800422c:	dd09      	ble.n	8004242 <sulp+0x36>
 800422e:	051b      	lsls	r3, r3, #20
 8004230:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004234:	2400      	movs	r4, #0
 8004236:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	f7fc fa03 	bl	8000648 <__aeabi_dmul>
 8004242:	bd70      	pop	{r4, r5, r6, pc}
 8004244:	0000      	movs	r0, r0
	...

08004248 <_strtod_l>:
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	ed2d 8b02 	vpush	{d8}
 8004250:	b09d      	sub	sp, #116	; 0x74
 8004252:	461f      	mov	r7, r3
 8004254:	2300      	movs	r3, #0
 8004256:	9318      	str	r3, [sp, #96]	; 0x60
 8004258:	4ba2      	ldr	r3, [pc, #648]	; (80044e4 <_strtod_l+0x29c>)
 800425a:	9213      	str	r2, [sp, #76]	; 0x4c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	4604      	mov	r4, r0
 8004262:	4618      	mov	r0, r3
 8004264:	4688      	mov	r8, r1
 8004266:	f7fb ffd5 	bl	8000214 <strlen>
 800426a:	f04f 0a00 	mov.w	sl, #0
 800426e:	4605      	mov	r5, r0
 8004270:	f04f 0b00 	mov.w	fp, #0
 8004274:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	2a2b      	cmp	r2, #43	; 0x2b
 800427e:	d04e      	beq.n	800431e <_strtod_l+0xd6>
 8004280:	d83b      	bhi.n	80042fa <_strtod_l+0xb2>
 8004282:	2a0d      	cmp	r2, #13
 8004284:	d834      	bhi.n	80042f0 <_strtod_l+0xa8>
 8004286:	2a08      	cmp	r2, #8
 8004288:	d834      	bhi.n	80042f4 <_strtod_l+0xac>
 800428a:	2a00      	cmp	r2, #0
 800428c:	d03e      	beq.n	800430c <_strtod_l+0xc4>
 800428e:	2300      	movs	r3, #0
 8004290:	930a      	str	r3, [sp, #40]	; 0x28
 8004292:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004294:	7833      	ldrb	r3, [r6, #0]
 8004296:	2b30      	cmp	r3, #48	; 0x30
 8004298:	f040 80b0 	bne.w	80043fc <_strtod_l+0x1b4>
 800429c:	7873      	ldrb	r3, [r6, #1]
 800429e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042a2:	2b58      	cmp	r3, #88	; 0x58
 80042a4:	d168      	bne.n	8004378 <_strtod_l+0x130>
 80042a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	ab18      	add	r3, sp, #96	; 0x60
 80042ac:	9702      	str	r7, [sp, #8]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	4a8d      	ldr	r2, [pc, #564]	; (80044e8 <_strtod_l+0x2a0>)
 80042b2:	ab19      	add	r3, sp, #100	; 0x64
 80042b4:	a917      	add	r1, sp, #92	; 0x5c
 80042b6:	4620      	mov	r0, r4
 80042b8:	f001 ff78 	bl	80061ac <__gethex>
 80042bc:	f010 0707 	ands.w	r7, r0, #7
 80042c0:	4605      	mov	r5, r0
 80042c2:	d005      	beq.n	80042d0 <_strtod_l+0x88>
 80042c4:	2f06      	cmp	r7, #6
 80042c6:	d12c      	bne.n	8004322 <_strtod_l+0xda>
 80042c8:	3601      	adds	r6, #1
 80042ca:	2300      	movs	r3, #0
 80042cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80042ce:	930a      	str	r3, [sp, #40]	; 0x28
 80042d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 8590 	bne.w	8004df8 <_strtod_l+0xbb0>
 80042d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042da:	b1eb      	cbz	r3, 8004318 <_strtod_l+0xd0>
 80042dc:	4652      	mov	r2, sl
 80042de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80042e2:	ec43 2b10 	vmov	d0, r2, r3
 80042e6:	b01d      	add	sp, #116	; 0x74
 80042e8:	ecbd 8b02 	vpop	{d8}
 80042ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f0:	2a20      	cmp	r2, #32
 80042f2:	d1cc      	bne.n	800428e <_strtod_l+0x46>
 80042f4:	3301      	adds	r3, #1
 80042f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80042f8:	e7be      	b.n	8004278 <_strtod_l+0x30>
 80042fa:	2a2d      	cmp	r2, #45	; 0x2d
 80042fc:	d1c7      	bne.n	800428e <_strtod_l+0x46>
 80042fe:	2201      	movs	r2, #1
 8004300:	920a      	str	r2, [sp, #40]	; 0x28
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	9217      	str	r2, [sp, #92]	; 0x5c
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1c2      	bne.n	8004292 <_strtod_l+0x4a>
 800430c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800430e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 856e 	bne.w	8004df4 <_strtod_l+0xbac>
 8004318:	4652      	mov	r2, sl
 800431a:	465b      	mov	r3, fp
 800431c:	e7e1      	b.n	80042e2 <_strtod_l+0x9a>
 800431e:	2200      	movs	r2, #0
 8004320:	e7ee      	b.n	8004300 <_strtod_l+0xb8>
 8004322:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004324:	b13a      	cbz	r2, 8004336 <_strtod_l+0xee>
 8004326:	2135      	movs	r1, #53	; 0x35
 8004328:	a81a      	add	r0, sp, #104	; 0x68
 800432a:	f002 ff58 	bl	80071de <__copybits>
 800432e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004330:	4620      	mov	r0, r4
 8004332:	f002 fb17 	bl	8006964 <_Bfree>
 8004336:	3f01      	subs	r7, #1
 8004338:	2f04      	cmp	r7, #4
 800433a:	d806      	bhi.n	800434a <_strtod_l+0x102>
 800433c:	e8df f007 	tbb	[pc, r7]
 8004340:	1714030a 	.word	0x1714030a
 8004344:	0a          	.byte	0x0a
 8004345:	00          	.byte	0x00
 8004346:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800434a:	0728      	lsls	r0, r5, #28
 800434c:	d5c0      	bpl.n	80042d0 <_strtod_l+0x88>
 800434e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004352:	e7bd      	b.n	80042d0 <_strtod_l+0x88>
 8004354:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004358:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800435a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800435e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004362:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004366:	e7f0      	b.n	800434a <_strtod_l+0x102>
 8004368:	f8df b180 	ldr.w	fp, [pc, #384]	; 80044ec <_strtod_l+0x2a4>
 800436c:	e7ed      	b.n	800434a <_strtod_l+0x102>
 800436e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004372:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004376:	e7e8      	b.n	800434a <_strtod_l+0x102>
 8004378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	9217      	str	r2, [sp, #92]	; 0x5c
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d0f9      	beq.n	8004378 <_strtod_l+0x130>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0a3      	beq.n	80042d0 <_strtod_l+0x88>
 8004388:	2301      	movs	r3, #1
 800438a:	f04f 0900 	mov.w	r9, #0
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004392:	9308      	str	r3, [sp, #32]
 8004394:	f8cd 901c 	str.w	r9, [sp, #28]
 8004398:	464f      	mov	r7, r9
 800439a:	220a      	movs	r2, #10
 800439c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800439e:	7806      	ldrb	r6, [r0, #0]
 80043a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80043a4:	b2d9      	uxtb	r1, r3
 80043a6:	2909      	cmp	r1, #9
 80043a8:	d92a      	bls.n	8004400 <_strtod_l+0x1b8>
 80043aa:	9905      	ldr	r1, [sp, #20]
 80043ac:	462a      	mov	r2, r5
 80043ae:	f003 f9b6 	bl	800771e <strncmp>
 80043b2:	b398      	cbz	r0, 800441c <_strtod_l+0x1d4>
 80043b4:	2000      	movs	r0, #0
 80043b6:	4632      	mov	r2, r6
 80043b8:	463d      	mov	r5, r7
 80043ba:	9005      	str	r0, [sp, #20]
 80043bc:	4603      	mov	r3, r0
 80043be:	2a65      	cmp	r2, #101	; 0x65
 80043c0:	d001      	beq.n	80043c6 <_strtod_l+0x17e>
 80043c2:	2a45      	cmp	r2, #69	; 0x45
 80043c4:	d118      	bne.n	80043f8 <_strtod_l+0x1b0>
 80043c6:	b91d      	cbnz	r5, 80043d0 <_strtod_l+0x188>
 80043c8:	9a04      	ldr	r2, [sp, #16]
 80043ca:	4302      	orrs	r2, r0
 80043cc:	d09e      	beq.n	800430c <_strtod_l+0xc4>
 80043ce:	2500      	movs	r5, #0
 80043d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80043d4:	f108 0201 	add.w	r2, r8, #1
 80043d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80043da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80043de:	2a2b      	cmp	r2, #43	; 0x2b
 80043e0:	d075      	beq.n	80044ce <_strtod_l+0x286>
 80043e2:	2a2d      	cmp	r2, #45	; 0x2d
 80043e4:	d07b      	beq.n	80044de <_strtod_l+0x296>
 80043e6:	f04f 0c00 	mov.w	ip, #0
 80043ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80043ee:	2909      	cmp	r1, #9
 80043f0:	f240 8082 	bls.w	80044f8 <_strtod_l+0x2b0>
 80043f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80043f8:	2600      	movs	r6, #0
 80043fa:	e09d      	b.n	8004538 <_strtod_l+0x2f0>
 80043fc:	2300      	movs	r3, #0
 80043fe:	e7c4      	b.n	800438a <_strtod_l+0x142>
 8004400:	2f08      	cmp	r7, #8
 8004402:	bfd8      	it	le
 8004404:	9907      	ldrle	r1, [sp, #28]
 8004406:	f100 0001 	add.w	r0, r0, #1
 800440a:	bfda      	itte	le
 800440c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004410:	9307      	strle	r3, [sp, #28]
 8004412:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004416:	3701      	adds	r7, #1
 8004418:	9017      	str	r0, [sp, #92]	; 0x5c
 800441a:	e7bf      	b.n	800439c <_strtod_l+0x154>
 800441c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800441e:	195a      	adds	r2, r3, r5
 8004420:	9217      	str	r2, [sp, #92]	; 0x5c
 8004422:	5d5a      	ldrb	r2, [r3, r5]
 8004424:	2f00      	cmp	r7, #0
 8004426:	d037      	beq.n	8004498 <_strtod_l+0x250>
 8004428:	9005      	str	r0, [sp, #20]
 800442a:	463d      	mov	r5, r7
 800442c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004430:	2b09      	cmp	r3, #9
 8004432:	d912      	bls.n	800445a <_strtod_l+0x212>
 8004434:	2301      	movs	r3, #1
 8004436:	e7c2      	b.n	80043be <_strtod_l+0x176>
 8004438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	9217      	str	r2, [sp, #92]	; 0x5c
 800443e:	785a      	ldrb	r2, [r3, #1]
 8004440:	3001      	adds	r0, #1
 8004442:	2a30      	cmp	r2, #48	; 0x30
 8004444:	d0f8      	beq.n	8004438 <_strtod_l+0x1f0>
 8004446:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800444a:	2b08      	cmp	r3, #8
 800444c:	f200 84d9 	bhi.w	8004e02 <_strtod_l+0xbba>
 8004450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004452:	9005      	str	r0, [sp, #20]
 8004454:	2000      	movs	r0, #0
 8004456:	9308      	str	r3, [sp, #32]
 8004458:	4605      	mov	r5, r0
 800445a:	3a30      	subs	r2, #48	; 0x30
 800445c:	f100 0301 	add.w	r3, r0, #1
 8004460:	d014      	beq.n	800448c <_strtod_l+0x244>
 8004462:	9905      	ldr	r1, [sp, #20]
 8004464:	4419      	add	r1, r3
 8004466:	9105      	str	r1, [sp, #20]
 8004468:	462b      	mov	r3, r5
 800446a:	eb00 0e05 	add.w	lr, r0, r5
 800446e:	210a      	movs	r1, #10
 8004470:	4573      	cmp	r3, lr
 8004472:	d113      	bne.n	800449c <_strtod_l+0x254>
 8004474:	182b      	adds	r3, r5, r0
 8004476:	2b08      	cmp	r3, #8
 8004478:	f105 0501 	add.w	r5, r5, #1
 800447c:	4405      	add	r5, r0
 800447e:	dc1c      	bgt.n	80044ba <_strtod_l+0x272>
 8004480:	9907      	ldr	r1, [sp, #28]
 8004482:	230a      	movs	r3, #10
 8004484:	fb03 2301 	mla	r3, r3, r1, r2
 8004488:	9307      	str	r3, [sp, #28]
 800448a:	2300      	movs	r3, #0
 800448c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800448e:	1c51      	adds	r1, r2, #1
 8004490:	9117      	str	r1, [sp, #92]	; 0x5c
 8004492:	7852      	ldrb	r2, [r2, #1]
 8004494:	4618      	mov	r0, r3
 8004496:	e7c9      	b.n	800442c <_strtod_l+0x1e4>
 8004498:	4638      	mov	r0, r7
 800449a:	e7d2      	b.n	8004442 <_strtod_l+0x1fa>
 800449c:	2b08      	cmp	r3, #8
 800449e:	dc04      	bgt.n	80044aa <_strtod_l+0x262>
 80044a0:	9e07      	ldr	r6, [sp, #28]
 80044a2:	434e      	muls	r6, r1
 80044a4:	9607      	str	r6, [sp, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	e7e2      	b.n	8004470 <_strtod_l+0x228>
 80044aa:	f103 0c01 	add.w	ip, r3, #1
 80044ae:	f1bc 0f10 	cmp.w	ip, #16
 80044b2:	bfd8      	it	le
 80044b4:	fb01 f909 	mulle.w	r9, r1, r9
 80044b8:	e7f5      	b.n	80044a6 <_strtod_l+0x25e>
 80044ba:	2d10      	cmp	r5, #16
 80044bc:	bfdc      	itt	le
 80044be:	230a      	movle	r3, #10
 80044c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80044c4:	e7e1      	b.n	800448a <_strtod_l+0x242>
 80044c6:	2300      	movs	r3, #0
 80044c8:	9305      	str	r3, [sp, #20]
 80044ca:	2301      	movs	r3, #1
 80044cc:	e77c      	b.n	80043c8 <_strtod_l+0x180>
 80044ce:	f04f 0c00 	mov.w	ip, #0
 80044d2:	f108 0202 	add.w	r2, r8, #2
 80044d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80044d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80044dc:	e785      	b.n	80043ea <_strtod_l+0x1a2>
 80044de:	f04f 0c01 	mov.w	ip, #1
 80044e2:	e7f6      	b.n	80044d2 <_strtod_l+0x28a>
 80044e4:	08014620 	.word	0x08014620
 80044e8:	08014378 	.word	0x08014378
 80044ec:	7ff00000 	.word	0x7ff00000
 80044f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044f2:	1c51      	adds	r1, r2, #1
 80044f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80044f6:	7852      	ldrb	r2, [r2, #1]
 80044f8:	2a30      	cmp	r2, #48	; 0x30
 80044fa:	d0f9      	beq.n	80044f0 <_strtod_l+0x2a8>
 80044fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004500:	2908      	cmp	r1, #8
 8004502:	f63f af79 	bhi.w	80043f8 <_strtod_l+0x1b0>
 8004506:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800450a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800450c:	9206      	str	r2, [sp, #24]
 800450e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004510:	1c51      	adds	r1, r2, #1
 8004512:	9117      	str	r1, [sp, #92]	; 0x5c
 8004514:	7852      	ldrb	r2, [r2, #1]
 8004516:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800451a:	2e09      	cmp	r6, #9
 800451c:	d937      	bls.n	800458e <_strtod_l+0x346>
 800451e:	9e06      	ldr	r6, [sp, #24]
 8004520:	1b89      	subs	r1, r1, r6
 8004522:	2908      	cmp	r1, #8
 8004524:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004528:	dc02      	bgt.n	8004530 <_strtod_l+0x2e8>
 800452a:	4576      	cmp	r6, lr
 800452c:	bfa8      	it	ge
 800452e:	4676      	movge	r6, lr
 8004530:	f1bc 0f00 	cmp.w	ip, #0
 8004534:	d000      	beq.n	8004538 <_strtod_l+0x2f0>
 8004536:	4276      	negs	r6, r6
 8004538:	2d00      	cmp	r5, #0
 800453a:	d14d      	bne.n	80045d8 <_strtod_l+0x390>
 800453c:	9904      	ldr	r1, [sp, #16]
 800453e:	4301      	orrs	r1, r0
 8004540:	f47f aec6 	bne.w	80042d0 <_strtod_l+0x88>
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f aee1 	bne.w	800430c <_strtod_l+0xc4>
 800454a:	2a69      	cmp	r2, #105	; 0x69
 800454c:	d027      	beq.n	800459e <_strtod_l+0x356>
 800454e:	dc24      	bgt.n	800459a <_strtod_l+0x352>
 8004550:	2a49      	cmp	r2, #73	; 0x49
 8004552:	d024      	beq.n	800459e <_strtod_l+0x356>
 8004554:	2a4e      	cmp	r2, #78	; 0x4e
 8004556:	f47f aed9 	bne.w	800430c <_strtod_l+0xc4>
 800455a:	499f      	ldr	r1, [pc, #636]	; (80047d8 <_strtod_l+0x590>)
 800455c:	a817      	add	r0, sp, #92	; 0x5c
 800455e:	f002 f87d 	bl	800665c <__match>
 8004562:	2800      	cmp	r0, #0
 8004564:	f43f aed2 	beq.w	800430c <_strtod_l+0xc4>
 8004568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b28      	cmp	r3, #40	; 0x28
 800456e:	d12d      	bne.n	80045cc <_strtod_l+0x384>
 8004570:	499a      	ldr	r1, [pc, #616]	; (80047dc <_strtod_l+0x594>)
 8004572:	aa1a      	add	r2, sp, #104	; 0x68
 8004574:	a817      	add	r0, sp, #92	; 0x5c
 8004576:	f002 f885 	bl	8006684 <__hexnan>
 800457a:	2805      	cmp	r0, #5
 800457c:	d126      	bne.n	80045cc <_strtod_l+0x384>
 800457e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004580:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004584:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004588:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800458c:	e6a0      	b.n	80042d0 <_strtod_l+0x88>
 800458e:	210a      	movs	r1, #10
 8004590:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004594:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004598:	e7b9      	b.n	800450e <_strtod_l+0x2c6>
 800459a:	2a6e      	cmp	r2, #110	; 0x6e
 800459c:	e7db      	b.n	8004556 <_strtod_l+0x30e>
 800459e:	4990      	ldr	r1, [pc, #576]	; (80047e0 <_strtod_l+0x598>)
 80045a0:	a817      	add	r0, sp, #92	; 0x5c
 80045a2:	f002 f85b 	bl	800665c <__match>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f43f aeb0 	beq.w	800430c <_strtod_l+0xc4>
 80045ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045ae:	498d      	ldr	r1, [pc, #564]	; (80047e4 <_strtod_l+0x59c>)
 80045b0:	3b01      	subs	r3, #1
 80045b2:	a817      	add	r0, sp, #92	; 0x5c
 80045b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80045b6:	f002 f851 	bl	800665c <__match>
 80045ba:	b910      	cbnz	r0, 80045c2 <_strtod_l+0x37a>
 80045bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045be:	3301      	adds	r3, #1
 80045c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80045c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80047f4 <_strtod_l+0x5ac>
 80045c6:	f04f 0a00 	mov.w	sl, #0
 80045ca:	e681      	b.n	80042d0 <_strtod_l+0x88>
 80045cc:	4886      	ldr	r0, [pc, #536]	; (80047e8 <_strtod_l+0x5a0>)
 80045ce:	f003 f85b 	bl	8007688 <nan>
 80045d2:	ec5b ab10 	vmov	sl, fp, d0
 80045d6:	e67b      	b.n	80042d0 <_strtod_l+0x88>
 80045d8:	9b05      	ldr	r3, [sp, #20]
 80045da:	9807      	ldr	r0, [sp, #28]
 80045dc:	1af3      	subs	r3, r6, r3
 80045de:	2f00      	cmp	r7, #0
 80045e0:	bf08      	it	eq
 80045e2:	462f      	moveq	r7, r5
 80045e4:	2d10      	cmp	r5, #16
 80045e6:	9306      	str	r3, [sp, #24]
 80045e8:	46a8      	mov	r8, r5
 80045ea:	bfa8      	it	ge
 80045ec:	f04f 0810 	movge.w	r8, #16
 80045f0:	f7fb ffb0 	bl	8000554 <__aeabi_ui2d>
 80045f4:	2d09      	cmp	r5, #9
 80045f6:	4682      	mov	sl, r0
 80045f8:	468b      	mov	fp, r1
 80045fa:	dd13      	ble.n	8004624 <_strtod_l+0x3dc>
 80045fc:	4b7b      	ldr	r3, [pc, #492]	; (80047ec <_strtod_l+0x5a4>)
 80045fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004602:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004606:	f7fc f81f 	bl	8000648 <__aeabi_dmul>
 800460a:	4682      	mov	sl, r0
 800460c:	4648      	mov	r0, r9
 800460e:	468b      	mov	fp, r1
 8004610:	f7fb ffa0 	bl	8000554 <__aeabi_ui2d>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4650      	mov	r0, sl
 800461a:	4659      	mov	r1, fp
 800461c:	f7fb fe5e 	bl	80002dc <__adddf3>
 8004620:	4682      	mov	sl, r0
 8004622:	468b      	mov	fp, r1
 8004624:	2d0f      	cmp	r5, #15
 8004626:	dc38      	bgt.n	800469a <_strtod_l+0x452>
 8004628:	9b06      	ldr	r3, [sp, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f43f ae50 	beq.w	80042d0 <_strtod_l+0x88>
 8004630:	dd24      	ble.n	800467c <_strtod_l+0x434>
 8004632:	2b16      	cmp	r3, #22
 8004634:	dc0b      	bgt.n	800464e <_strtod_l+0x406>
 8004636:	496d      	ldr	r1, [pc, #436]	; (80047ec <_strtod_l+0x5a4>)
 8004638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800463c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004640:	4652      	mov	r2, sl
 8004642:	465b      	mov	r3, fp
 8004644:	f7fc f800 	bl	8000648 <__aeabi_dmul>
 8004648:	4682      	mov	sl, r0
 800464a:	468b      	mov	fp, r1
 800464c:	e640      	b.n	80042d0 <_strtod_l+0x88>
 800464e:	9a06      	ldr	r2, [sp, #24]
 8004650:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004654:	4293      	cmp	r3, r2
 8004656:	db20      	blt.n	800469a <_strtod_l+0x452>
 8004658:	4c64      	ldr	r4, [pc, #400]	; (80047ec <_strtod_l+0x5a4>)
 800465a:	f1c5 050f 	rsb	r5, r5, #15
 800465e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004662:	4652      	mov	r2, sl
 8004664:	465b      	mov	r3, fp
 8004666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800466a:	f7fb ffed 	bl	8000648 <__aeabi_dmul>
 800466e:	9b06      	ldr	r3, [sp, #24]
 8004670:	1b5d      	subs	r5, r3, r5
 8004672:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004676:	e9d4 2300 	ldrd	r2, r3, [r4]
 800467a:	e7e3      	b.n	8004644 <_strtod_l+0x3fc>
 800467c:	9b06      	ldr	r3, [sp, #24]
 800467e:	3316      	adds	r3, #22
 8004680:	db0b      	blt.n	800469a <_strtod_l+0x452>
 8004682:	9b05      	ldr	r3, [sp, #20]
 8004684:	1b9e      	subs	r6, r3, r6
 8004686:	4b59      	ldr	r3, [pc, #356]	; (80047ec <_strtod_l+0x5a4>)
 8004688:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800468c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004690:	4650      	mov	r0, sl
 8004692:	4659      	mov	r1, fp
 8004694:	f7fc f902 	bl	800089c <__aeabi_ddiv>
 8004698:	e7d6      	b.n	8004648 <_strtod_l+0x400>
 800469a:	9b06      	ldr	r3, [sp, #24]
 800469c:	eba5 0808 	sub.w	r8, r5, r8
 80046a0:	4498      	add	r8, r3
 80046a2:	f1b8 0f00 	cmp.w	r8, #0
 80046a6:	dd74      	ble.n	8004792 <_strtod_l+0x54a>
 80046a8:	f018 030f 	ands.w	r3, r8, #15
 80046ac:	d00a      	beq.n	80046c4 <_strtod_l+0x47c>
 80046ae:	494f      	ldr	r1, [pc, #316]	; (80047ec <_strtod_l+0x5a4>)
 80046b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80046b4:	4652      	mov	r2, sl
 80046b6:	465b      	mov	r3, fp
 80046b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046bc:	f7fb ffc4 	bl	8000648 <__aeabi_dmul>
 80046c0:	4682      	mov	sl, r0
 80046c2:	468b      	mov	fp, r1
 80046c4:	f038 080f 	bics.w	r8, r8, #15
 80046c8:	d04f      	beq.n	800476a <_strtod_l+0x522>
 80046ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80046ce:	dd22      	ble.n	8004716 <_strtod_l+0x4ce>
 80046d0:	2500      	movs	r5, #0
 80046d2:	462e      	mov	r6, r5
 80046d4:	9507      	str	r5, [sp, #28]
 80046d6:	9505      	str	r5, [sp, #20]
 80046d8:	2322      	movs	r3, #34	; 0x22
 80046da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80047f4 <_strtod_l+0x5ac>
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	f04f 0a00 	mov.w	sl, #0
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f43f adf2 	beq.w	80042d0 <_strtod_l+0x88>
 80046ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80046ee:	4620      	mov	r0, r4
 80046f0:	f002 f938 	bl	8006964 <_Bfree>
 80046f4:	9905      	ldr	r1, [sp, #20]
 80046f6:	4620      	mov	r0, r4
 80046f8:	f002 f934 	bl	8006964 <_Bfree>
 80046fc:	4631      	mov	r1, r6
 80046fe:	4620      	mov	r0, r4
 8004700:	f002 f930 	bl	8006964 <_Bfree>
 8004704:	9907      	ldr	r1, [sp, #28]
 8004706:	4620      	mov	r0, r4
 8004708:	f002 f92c 	bl	8006964 <_Bfree>
 800470c:	4629      	mov	r1, r5
 800470e:	4620      	mov	r0, r4
 8004710:	f002 f928 	bl	8006964 <_Bfree>
 8004714:	e5dc      	b.n	80042d0 <_strtod_l+0x88>
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <_strtod_l+0x5a8>)
 8004718:	9304      	str	r3, [sp, #16]
 800471a:	2300      	movs	r3, #0
 800471c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004720:	4650      	mov	r0, sl
 8004722:	4659      	mov	r1, fp
 8004724:	4699      	mov	r9, r3
 8004726:	f1b8 0f01 	cmp.w	r8, #1
 800472a:	dc21      	bgt.n	8004770 <_strtod_l+0x528>
 800472c:	b10b      	cbz	r3, 8004732 <_strtod_l+0x4ea>
 800472e:	4682      	mov	sl, r0
 8004730:	468b      	mov	fp, r1
 8004732:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <_strtod_l+0x5a8>)
 8004734:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004738:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800473c:	4652      	mov	r2, sl
 800473e:	465b      	mov	r3, fp
 8004740:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004744:	f7fb ff80 	bl	8000648 <__aeabi_dmul>
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <_strtod_l+0x5ac>)
 800474a:	460a      	mov	r2, r1
 800474c:	400b      	ands	r3, r1
 800474e:	492a      	ldr	r1, [pc, #168]	; (80047f8 <_strtod_l+0x5b0>)
 8004750:	428b      	cmp	r3, r1
 8004752:	4682      	mov	sl, r0
 8004754:	d8bc      	bhi.n	80046d0 <_strtod_l+0x488>
 8004756:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800475a:	428b      	cmp	r3, r1
 800475c:	bf86      	itte	hi
 800475e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80047fc <_strtod_l+0x5b4>
 8004762:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004766:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800476a:	2300      	movs	r3, #0
 800476c:	9304      	str	r3, [sp, #16]
 800476e:	e084      	b.n	800487a <_strtod_l+0x632>
 8004770:	f018 0f01 	tst.w	r8, #1
 8004774:	d005      	beq.n	8004782 <_strtod_l+0x53a>
 8004776:	9b04      	ldr	r3, [sp, #16]
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fb ff64 	bl	8000648 <__aeabi_dmul>
 8004780:	2301      	movs	r3, #1
 8004782:	9a04      	ldr	r2, [sp, #16]
 8004784:	3208      	adds	r2, #8
 8004786:	f109 0901 	add.w	r9, r9, #1
 800478a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800478e:	9204      	str	r2, [sp, #16]
 8004790:	e7c9      	b.n	8004726 <_strtod_l+0x4de>
 8004792:	d0ea      	beq.n	800476a <_strtod_l+0x522>
 8004794:	f1c8 0800 	rsb	r8, r8, #0
 8004798:	f018 020f 	ands.w	r2, r8, #15
 800479c:	d00a      	beq.n	80047b4 <_strtod_l+0x56c>
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <_strtod_l+0x5a4>)
 80047a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047a4:	4650      	mov	r0, sl
 80047a6:	4659      	mov	r1, fp
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f7fc f876 	bl	800089c <__aeabi_ddiv>
 80047b0:	4682      	mov	sl, r0
 80047b2:	468b      	mov	fp, r1
 80047b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80047b8:	d0d7      	beq.n	800476a <_strtod_l+0x522>
 80047ba:	f1b8 0f1f 	cmp.w	r8, #31
 80047be:	dd1f      	ble.n	8004800 <_strtod_l+0x5b8>
 80047c0:	2500      	movs	r5, #0
 80047c2:	462e      	mov	r6, r5
 80047c4:	9507      	str	r5, [sp, #28]
 80047c6:	9505      	str	r5, [sp, #20]
 80047c8:	2322      	movs	r3, #34	; 0x22
 80047ca:	f04f 0a00 	mov.w	sl, #0
 80047ce:	f04f 0b00 	mov.w	fp, #0
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	e786      	b.n	80046e4 <_strtod_l+0x49c>
 80047d6:	bf00      	nop
 80047d8:	08014351 	.word	0x08014351
 80047dc:	0801438c 	.word	0x0801438c
 80047e0:	08014349 	.word	0x08014349
 80047e4:	0801449d 	.word	0x0801449d
 80047e8:	0800ac4f 	.word	0x0800ac4f
 80047ec:	080146d8 	.word	0x080146d8
 80047f0:	080146b0 	.word	0x080146b0
 80047f4:	7ff00000 	.word	0x7ff00000
 80047f8:	7ca00000 	.word	0x7ca00000
 80047fc:	7fefffff 	.word	0x7fefffff
 8004800:	f018 0310 	ands.w	r3, r8, #16
 8004804:	bf18      	it	ne
 8004806:	236a      	movne	r3, #106	; 0x6a
 8004808:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004bb8 <_strtod_l+0x970>
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	4650      	mov	r0, sl
 8004810:	4659      	mov	r1, fp
 8004812:	2300      	movs	r3, #0
 8004814:	f018 0f01 	tst.w	r8, #1
 8004818:	d004      	beq.n	8004824 <_strtod_l+0x5dc>
 800481a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800481e:	f7fb ff13 	bl	8000648 <__aeabi_dmul>
 8004822:	2301      	movs	r3, #1
 8004824:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004828:	f109 0908 	add.w	r9, r9, #8
 800482c:	d1f2      	bne.n	8004814 <_strtod_l+0x5cc>
 800482e:	b10b      	cbz	r3, 8004834 <_strtod_l+0x5ec>
 8004830:	4682      	mov	sl, r0
 8004832:	468b      	mov	fp, r1
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	b1c3      	cbz	r3, 800486a <_strtod_l+0x622>
 8004838:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800483c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004840:	2b00      	cmp	r3, #0
 8004842:	4659      	mov	r1, fp
 8004844:	dd11      	ble.n	800486a <_strtod_l+0x622>
 8004846:	2b1f      	cmp	r3, #31
 8004848:	f340 8124 	ble.w	8004a94 <_strtod_l+0x84c>
 800484c:	2b34      	cmp	r3, #52	; 0x34
 800484e:	bfde      	ittt	le
 8004850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004854:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004858:	fa03 f202 	lslle.w	r2, r3, r2
 800485c:	f04f 0a00 	mov.w	sl, #0
 8004860:	bfcc      	ite	gt
 8004862:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004866:	ea02 0b01 	andle.w	fp, r2, r1
 800486a:	2200      	movs	r2, #0
 800486c:	2300      	movs	r3, #0
 800486e:	4650      	mov	r0, sl
 8004870:	4659      	mov	r1, fp
 8004872:	f7fc f951 	bl	8000b18 <__aeabi_dcmpeq>
 8004876:	2800      	cmp	r0, #0
 8004878:	d1a2      	bne.n	80047c0 <_strtod_l+0x578>
 800487a:	9b07      	ldr	r3, [sp, #28]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	9908      	ldr	r1, [sp, #32]
 8004880:	462b      	mov	r3, r5
 8004882:	463a      	mov	r2, r7
 8004884:	4620      	mov	r0, r4
 8004886:	f002 f8d5 	bl	8006a34 <__s2b>
 800488a:	9007      	str	r0, [sp, #28]
 800488c:	2800      	cmp	r0, #0
 800488e:	f43f af1f 	beq.w	80046d0 <_strtod_l+0x488>
 8004892:	9b05      	ldr	r3, [sp, #20]
 8004894:	1b9e      	subs	r6, r3, r6
 8004896:	9b06      	ldr	r3, [sp, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	bfb4      	ite	lt
 800489c:	4633      	movlt	r3, r6
 800489e:	2300      	movge	r3, #0
 80048a0:	930c      	str	r3, [sp, #48]	; 0x30
 80048a2:	9b06      	ldr	r3, [sp, #24]
 80048a4:	2500      	movs	r5, #0
 80048a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80048aa:	9312      	str	r3, [sp, #72]	; 0x48
 80048ac:	462e      	mov	r6, r5
 80048ae:	9b07      	ldr	r3, [sp, #28]
 80048b0:	4620      	mov	r0, r4
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	f002 f816 	bl	80068e4 <_Balloc>
 80048b8:	9005      	str	r0, [sp, #20]
 80048ba:	2800      	cmp	r0, #0
 80048bc:	f43f af0c 	beq.w	80046d8 <_strtod_l+0x490>
 80048c0:	9b07      	ldr	r3, [sp, #28]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	3202      	adds	r2, #2
 80048c6:	f103 010c 	add.w	r1, r3, #12
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	300c      	adds	r0, #12
 80048ce:	f001 fffb 	bl	80068c8 <memcpy>
 80048d2:	ec4b ab10 	vmov	d0, sl, fp
 80048d6:	aa1a      	add	r2, sp, #104	; 0x68
 80048d8:	a919      	add	r1, sp, #100	; 0x64
 80048da:	4620      	mov	r0, r4
 80048dc:	f002 fbf0 	bl	80070c0 <__d2b>
 80048e0:	ec4b ab18 	vmov	d8, sl, fp
 80048e4:	9018      	str	r0, [sp, #96]	; 0x60
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f43f aef6 	beq.w	80046d8 <_strtod_l+0x490>
 80048ec:	2101      	movs	r1, #1
 80048ee:	4620      	mov	r0, r4
 80048f0:	f002 f93a 	bl	8006b68 <__i2b>
 80048f4:	4606      	mov	r6, r0
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f43f aeee 	beq.w	80046d8 <_strtod_l+0x490>
 80048fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048fe:	9904      	ldr	r1, [sp, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfab      	itete	ge
 8004904:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004906:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004908:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800490a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800490e:	bfac      	ite	ge
 8004910:	eb03 0902 	addge.w	r9, r3, r2
 8004914:	1ad7      	sublt	r7, r2, r3
 8004916:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004918:	eba3 0801 	sub.w	r8, r3, r1
 800491c:	4490      	add	r8, r2
 800491e:	4ba1      	ldr	r3, [pc, #644]	; (8004ba4 <_strtod_l+0x95c>)
 8004920:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004924:	4598      	cmp	r8, r3
 8004926:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800492a:	f280 80c7 	bge.w	8004abc <_strtod_l+0x874>
 800492e:	eba3 0308 	sub.w	r3, r3, r8
 8004932:	2b1f      	cmp	r3, #31
 8004934:	eba2 0203 	sub.w	r2, r2, r3
 8004938:	f04f 0101 	mov.w	r1, #1
 800493c:	f300 80b1 	bgt.w	8004aa2 <_strtod_l+0x85a>
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	930d      	str	r3, [sp, #52]	; 0x34
 8004946:	2300      	movs	r3, #0
 8004948:	9308      	str	r3, [sp, #32]
 800494a:	eb09 0802 	add.w	r8, r9, r2
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	45c1      	cmp	r9, r8
 8004952:	4417      	add	r7, r2
 8004954:	441f      	add	r7, r3
 8004956:	464b      	mov	r3, r9
 8004958:	bfa8      	it	ge
 800495a:	4643      	movge	r3, r8
 800495c:	42bb      	cmp	r3, r7
 800495e:	bfa8      	it	ge
 8004960:	463b      	movge	r3, r7
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfc2      	ittt	gt
 8004966:	eba8 0803 	subgt.w	r8, r8, r3
 800496a:	1aff      	subgt	r7, r7, r3
 800496c:	eba9 0903 	subgt.w	r9, r9, r3
 8004970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd17      	ble.n	80049a6 <_strtod_l+0x75e>
 8004976:	4631      	mov	r1, r6
 8004978:	461a      	mov	r2, r3
 800497a:	4620      	mov	r0, r4
 800497c:	f002 f9b4 	bl	8006ce8 <__pow5mult>
 8004980:	4606      	mov	r6, r0
 8004982:	2800      	cmp	r0, #0
 8004984:	f43f aea8 	beq.w	80046d8 <_strtod_l+0x490>
 8004988:	4601      	mov	r1, r0
 800498a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800498c:	4620      	mov	r0, r4
 800498e:	f002 f901 	bl	8006b94 <__multiply>
 8004992:	900b      	str	r0, [sp, #44]	; 0x2c
 8004994:	2800      	cmp	r0, #0
 8004996:	f43f ae9f 	beq.w	80046d8 <_strtod_l+0x490>
 800499a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800499c:	4620      	mov	r0, r4
 800499e:	f001 ffe1 	bl	8006964 <_Bfree>
 80049a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a4:	9318      	str	r3, [sp, #96]	; 0x60
 80049a6:	f1b8 0f00 	cmp.w	r8, #0
 80049aa:	f300 808c 	bgt.w	8004ac6 <_strtod_l+0x87e>
 80049ae:	9b06      	ldr	r3, [sp, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dd08      	ble.n	80049c6 <_strtod_l+0x77e>
 80049b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049b6:	9905      	ldr	r1, [sp, #20]
 80049b8:	4620      	mov	r0, r4
 80049ba:	f002 f995 	bl	8006ce8 <__pow5mult>
 80049be:	9005      	str	r0, [sp, #20]
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f43f ae89 	beq.w	80046d8 <_strtod_l+0x490>
 80049c6:	2f00      	cmp	r7, #0
 80049c8:	dd08      	ble.n	80049dc <_strtod_l+0x794>
 80049ca:	9905      	ldr	r1, [sp, #20]
 80049cc:	463a      	mov	r2, r7
 80049ce:	4620      	mov	r0, r4
 80049d0:	f002 f9e4 	bl	8006d9c <__lshift>
 80049d4:	9005      	str	r0, [sp, #20]
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f ae7e 	beq.w	80046d8 <_strtod_l+0x490>
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	dd08      	ble.n	80049f4 <_strtod_l+0x7ac>
 80049e2:	4631      	mov	r1, r6
 80049e4:	464a      	mov	r2, r9
 80049e6:	4620      	mov	r0, r4
 80049e8:	f002 f9d8 	bl	8006d9c <__lshift>
 80049ec:	4606      	mov	r6, r0
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f43f ae72 	beq.w	80046d8 <_strtod_l+0x490>
 80049f4:	9a05      	ldr	r2, [sp, #20]
 80049f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049f8:	4620      	mov	r0, r4
 80049fa:	f002 fa5b 	bl	8006eb4 <__mdiff>
 80049fe:	4605      	mov	r5, r0
 8004a00:	2800      	cmp	r0, #0
 8004a02:	f43f ae69 	beq.w	80046d8 <_strtod_l+0x490>
 8004a06:	68c3      	ldr	r3, [r0, #12]
 8004a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60c3      	str	r3, [r0, #12]
 8004a0e:	4631      	mov	r1, r6
 8004a10:	f002 fa34 	bl	8006e7c <__mcmp>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	da60      	bge.n	8004ada <_strtod_l+0x892>
 8004a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a1a:	ea53 030a 	orrs.w	r3, r3, sl
 8004a1e:	f040 8082 	bne.w	8004b26 <_strtod_l+0x8de>
 8004a22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d17d      	bne.n	8004b26 <_strtod_l+0x8de>
 8004a2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a2e:	0d1b      	lsrs	r3, r3, #20
 8004a30:	051b      	lsls	r3, r3, #20
 8004a32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a36:	d976      	bls.n	8004b26 <_strtod_l+0x8de>
 8004a38:	696b      	ldr	r3, [r5, #20]
 8004a3a:	b913      	cbnz	r3, 8004a42 <_strtod_l+0x7fa>
 8004a3c:	692b      	ldr	r3, [r5, #16]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	dd71      	ble.n	8004b26 <_strtod_l+0x8de>
 8004a42:	4629      	mov	r1, r5
 8004a44:	2201      	movs	r2, #1
 8004a46:	4620      	mov	r0, r4
 8004a48:	f002 f9a8 	bl	8006d9c <__lshift>
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4605      	mov	r5, r0
 8004a50:	f002 fa14 	bl	8006e7c <__mcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	dd66      	ble.n	8004b26 <_strtod_l+0x8de>
 8004a58:	9904      	ldr	r1, [sp, #16]
 8004a5a:	4a53      	ldr	r2, [pc, #332]	; (8004ba8 <_strtod_l+0x960>)
 8004a5c:	465b      	mov	r3, fp
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	f000 8081 	beq.w	8004b66 <_strtod_l+0x91e>
 8004a64:	ea02 010b 	and.w	r1, r2, fp
 8004a68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a6c:	dc7b      	bgt.n	8004b66 <_strtod_l+0x91e>
 8004a6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a72:	f77f aea9 	ble.w	80047c8 <_strtod_l+0x580>
 8004a76:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <_strtod_l+0x964>)
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f7fb fde3 	bl	8000648 <__aeabi_dmul>
 8004a82:	460b      	mov	r3, r1
 8004a84:	4303      	orrs	r3, r0
 8004a86:	bf08      	it	eq
 8004a88:	2322      	moveq	r3, #34	; 0x22
 8004a8a:	4682      	mov	sl, r0
 8004a8c:	468b      	mov	fp, r1
 8004a8e:	bf08      	it	eq
 8004a90:	6023      	streq	r3, [r4, #0]
 8004a92:	e62b      	b.n	80046ec <_strtod_l+0x4a4>
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	ea03 0a0a 	and.w	sl, r3, sl
 8004aa0:	e6e3      	b.n	800486a <_strtod_l+0x622>
 8004aa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004aa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004aaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004aae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004ab2:	fa01 f308 	lsl.w	r3, r1, r8
 8004ab6:	9308      	str	r3, [sp, #32]
 8004ab8:	910d      	str	r1, [sp, #52]	; 0x34
 8004aba:	e746      	b.n	800494a <_strtod_l+0x702>
 8004abc:	2300      	movs	r3, #0
 8004abe:	9308      	str	r3, [sp, #32]
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8004ac4:	e741      	b.n	800494a <_strtod_l+0x702>
 8004ac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ac8:	4642      	mov	r2, r8
 8004aca:	4620      	mov	r0, r4
 8004acc:	f002 f966 	bl	8006d9c <__lshift>
 8004ad0:	9018      	str	r0, [sp, #96]	; 0x60
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f47f af6b 	bne.w	80049ae <_strtod_l+0x766>
 8004ad8:	e5fe      	b.n	80046d8 <_strtod_l+0x490>
 8004ada:	465f      	mov	r7, fp
 8004adc:	d16e      	bne.n	8004bbc <_strtod_l+0x974>
 8004ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ae0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ae4:	b342      	cbz	r2, 8004b38 <_strtod_l+0x8f0>
 8004ae6:	4a32      	ldr	r2, [pc, #200]	; (8004bb0 <_strtod_l+0x968>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d128      	bne.n	8004b3e <_strtod_l+0x8f6>
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	4651      	mov	r1, sl
 8004af0:	b1eb      	cbz	r3, 8004b2e <_strtod_l+0x8e6>
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <_strtod_l+0x960>)
 8004af4:	403b      	ands	r3, r7
 8004af6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004afe:	d819      	bhi.n	8004b34 <_strtod_l+0x8ec>
 8004b00:	0d1b      	lsrs	r3, r3, #20
 8004b02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	d117      	bne.n	8004b3e <_strtod_l+0x8f6>
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <_strtod_l+0x96c>)
 8004b10:	429f      	cmp	r7, r3
 8004b12:	d102      	bne.n	8004b1a <_strtod_l+0x8d2>
 8004b14:	3101      	adds	r1, #1
 8004b16:	f43f addf 	beq.w	80046d8 <_strtod_l+0x490>
 8004b1a:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <_strtod_l+0x960>)
 8004b1c:	403b      	ands	r3, r7
 8004b1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004b22:	f04f 0a00 	mov.w	sl, #0
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1a4      	bne.n	8004a76 <_strtod_l+0x82e>
 8004b2c:	e5de      	b.n	80046ec <_strtod_l+0x4a4>
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b32:	e7ea      	b.n	8004b0a <_strtod_l+0x8c2>
 8004b34:	4613      	mov	r3, r2
 8004b36:	e7e8      	b.n	8004b0a <_strtod_l+0x8c2>
 8004b38:	ea53 030a 	orrs.w	r3, r3, sl
 8004b3c:	d08c      	beq.n	8004a58 <_strtod_l+0x810>
 8004b3e:	9b08      	ldr	r3, [sp, #32]
 8004b40:	b1db      	cbz	r3, 8004b7a <_strtod_l+0x932>
 8004b42:	423b      	tst	r3, r7
 8004b44:	d0ef      	beq.n	8004b26 <_strtod_l+0x8de>
 8004b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b48:	9a04      	ldr	r2, [sp, #16]
 8004b4a:	4650      	mov	r0, sl
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	b1c3      	cbz	r3, 8004b82 <_strtod_l+0x93a>
 8004b50:	f7ff fb5c 	bl	800420c <sulp>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	ec51 0b18 	vmov	r0, r1, d8
 8004b5c:	f7fb fbbe 	bl	80002dc <__adddf3>
 8004b60:	4682      	mov	sl, r0
 8004b62:	468b      	mov	fp, r1
 8004b64:	e7df      	b.n	8004b26 <_strtod_l+0x8de>
 8004b66:	4013      	ands	r3, r2
 8004b68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004b70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004b74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004b78:	e7d5      	b.n	8004b26 <_strtod_l+0x8de>
 8004b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b7c:	ea13 0f0a 	tst.w	r3, sl
 8004b80:	e7e0      	b.n	8004b44 <_strtod_l+0x8fc>
 8004b82:	f7ff fb43 	bl	800420c <sulp>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	ec51 0b18 	vmov	r0, r1, d8
 8004b8e:	f7fb fba3 	bl	80002d8 <__aeabi_dsub>
 8004b92:	2200      	movs	r2, #0
 8004b94:	2300      	movs	r3, #0
 8004b96:	4682      	mov	sl, r0
 8004b98:	468b      	mov	fp, r1
 8004b9a:	f7fb ffbd 	bl	8000b18 <__aeabi_dcmpeq>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0c1      	beq.n	8004b26 <_strtod_l+0x8de>
 8004ba2:	e611      	b.n	80047c8 <_strtod_l+0x580>
 8004ba4:	fffffc02 	.word	0xfffffc02
 8004ba8:	7ff00000 	.word	0x7ff00000
 8004bac:	39500000 	.word	0x39500000
 8004bb0:	000fffff 	.word	0x000fffff
 8004bb4:	7fefffff 	.word	0x7fefffff
 8004bb8:	080143a0 	.word	0x080143a0
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f002 fada 	bl	8007178 <__ratio>
 8004bc4:	ec59 8b10 	vmov	r8, r9, d0
 8004bc8:	ee10 0a10 	vmov	r0, s0
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	f7fb ffb4 	bl	8000b40 <__aeabi_dcmple>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d07a      	beq.n	8004cd2 <_strtod_l+0xa8a>
 8004bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04a      	beq.n	8004c78 <_strtod_l+0xa30>
 8004be2:	4b95      	ldr	r3, [pc, #596]	; (8004e38 <_strtod_l+0xbf0>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004bea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004e38 <_strtod_l+0xbf0>
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	4b92      	ldr	r3, [pc, #584]	; (8004e3c <_strtod_l+0xbf4>)
 8004bf4:	403b      	ands	r3, r7
 8004bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8004bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bfa:	4b91      	ldr	r3, [pc, #580]	; (8004e40 <_strtod_l+0xbf8>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	f040 80b0 	bne.w	8004d62 <_strtod_l+0xb1a>
 8004c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004c0a:	ec4b ab10 	vmov	d0, sl, fp
 8004c0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c12:	f002 f9d9 	bl	8006fc8 <__ulp>
 8004c16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c1a:	ec53 2b10 	vmov	r2, r3, d0
 8004c1e:	f7fb fd13 	bl	8000648 <__aeabi_dmul>
 8004c22:	4652      	mov	r2, sl
 8004c24:	465b      	mov	r3, fp
 8004c26:	f7fb fb59 	bl	80002dc <__adddf3>
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4983      	ldr	r1, [pc, #524]	; (8004e3c <_strtod_l+0xbf4>)
 8004c2e:	4a85      	ldr	r2, [pc, #532]	; (8004e44 <_strtod_l+0xbfc>)
 8004c30:	4019      	ands	r1, r3
 8004c32:	4291      	cmp	r1, r2
 8004c34:	4682      	mov	sl, r0
 8004c36:	d960      	bls.n	8004cfa <_strtod_l+0xab2>
 8004c38:	ee18 3a90 	vmov	r3, s17
 8004c3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d104      	bne.n	8004c4e <_strtod_l+0xa06>
 8004c44:	ee18 3a10 	vmov	r3, s16
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f43f ad45 	beq.w	80046d8 <_strtod_l+0x490>
 8004c4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004e50 <_strtod_l+0xc08>
 8004c52:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004c56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f001 fe83 	bl	8006964 <_Bfree>
 8004c5e:	9905      	ldr	r1, [sp, #20]
 8004c60:	4620      	mov	r0, r4
 8004c62:	f001 fe7f 	bl	8006964 <_Bfree>
 8004c66:	4631      	mov	r1, r6
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f001 fe7b 	bl	8006964 <_Bfree>
 8004c6e:	4629      	mov	r1, r5
 8004c70:	4620      	mov	r0, r4
 8004c72:	f001 fe77 	bl	8006964 <_Bfree>
 8004c76:	e61a      	b.n	80048ae <_strtod_l+0x666>
 8004c78:	f1ba 0f00 	cmp.w	sl, #0
 8004c7c:	d11b      	bne.n	8004cb6 <_strtod_l+0xa6e>
 8004c7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c82:	b9f3      	cbnz	r3, 8004cc2 <_strtod_l+0xa7a>
 8004c84:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <_strtod_l+0xbf0>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb ff4e 	bl	8000b2c <__aeabi_dcmplt>
 8004c90:	b9d0      	cbnz	r0, 8004cc8 <_strtod_l+0xa80>
 8004c92:	4640      	mov	r0, r8
 8004c94:	4649      	mov	r1, r9
 8004c96:	4b6c      	ldr	r3, [pc, #432]	; (8004e48 <_strtod_l+0xc00>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f7fb fcd5 	bl	8000648 <__aeabi_dmul>
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	4689      	mov	r9, r1
 8004ca2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ca6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004caa:	9315      	str	r3, [sp, #84]	; 0x54
 8004cac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004cb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cb4:	e79d      	b.n	8004bf2 <_strtod_l+0x9aa>
 8004cb6:	f1ba 0f01 	cmp.w	sl, #1
 8004cba:	d102      	bne.n	8004cc2 <_strtod_l+0xa7a>
 8004cbc:	2f00      	cmp	r7, #0
 8004cbe:	f43f ad83 	beq.w	80047c8 <_strtod_l+0x580>
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <_strtod_l+0xc04>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	e78e      	b.n	8004be6 <_strtod_l+0x99e>
 8004cc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004e48 <_strtod_l+0xc00>
 8004ccc:	f04f 0800 	mov.w	r8, #0
 8004cd0:	e7e7      	b.n	8004ca2 <_strtod_l+0xa5a>
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	; (8004e48 <_strtod_l+0xc00>)
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f7fb fcb5 	bl	8000648 <__aeabi_dmul>
 8004cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4689      	mov	r9, r1
 8004ce4:	b933      	cbnz	r3, 8004cf4 <_strtod_l+0xaac>
 8004ce6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cea:	900e      	str	r0, [sp, #56]	; 0x38
 8004cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004cf2:	e7dd      	b.n	8004cb0 <_strtod_l+0xa68>
 8004cf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004cf8:	e7f9      	b.n	8004cee <_strtod_l+0xaa6>
 8004cfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004cfe:	9b04      	ldr	r3, [sp, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1a8      	bne.n	8004c56 <_strtod_l+0xa0e>
 8004d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d0a:	0d1b      	lsrs	r3, r3, #20
 8004d0c:	051b      	lsls	r3, r3, #20
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d1a1      	bne.n	8004c56 <_strtod_l+0xa0e>
 8004d12:	4640      	mov	r0, r8
 8004d14:	4649      	mov	r1, r9
 8004d16:	f7fb ff8f 	bl	8000c38 <__aeabi_d2lz>
 8004d1a:	f7fb fc67 	bl	80005ec <__aeabi_l2d>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4640      	mov	r0, r8
 8004d24:	4649      	mov	r1, r9
 8004d26:	f7fb fad7 	bl	80002d8 <__aeabi_dsub>
 8004d2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d30:	ea43 030a 	orr.w	r3, r3, sl
 8004d34:	4313      	orrs	r3, r2
 8004d36:	4680      	mov	r8, r0
 8004d38:	4689      	mov	r9, r1
 8004d3a:	d055      	beq.n	8004de8 <_strtod_l+0xba0>
 8004d3c:	a336      	add	r3, pc, #216	; (adr r3, 8004e18 <_strtod_l+0xbd0>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f7fb fef3 	bl	8000b2c <__aeabi_dcmplt>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	f47f acd0 	bne.w	80046ec <_strtod_l+0x4a4>
 8004d4c:	a334      	add	r3, pc, #208	; (adr r3, 8004e20 <_strtod_l+0xbd8>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	4640      	mov	r0, r8
 8004d54:	4649      	mov	r1, r9
 8004d56:	f7fb ff07 	bl	8000b68 <__aeabi_dcmpgt>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f43f af7b 	beq.w	8004c56 <_strtod_l+0xa0e>
 8004d60:	e4c4      	b.n	80046ec <_strtod_l+0x4a4>
 8004d62:	9b04      	ldr	r3, [sp, #16]
 8004d64:	b333      	cbz	r3, 8004db4 <_strtod_l+0xb6c>
 8004d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d6c:	d822      	bhi.n	8004db4 <_strtod_l+0xb6c>
 8004d6e:	a32e      	add	r3, pc, #184	; (adr r3, 8004e28 <_strtod_l+0xbe0>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	4640      	mov	r0, r8
 8004d76:	4649      	mov	r1, r9
 8004d78:	f7fb fee2 	bl	8000b40 <__aeabi_dcmple>
 8004d7c:	b1a0      	cbz	r0, 8004da8 <_strtod_l+0xb60>
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4640      	mov	r0, r8
 8004d82:	f7fb ff39 	bl	8000bf8 <__aeabi_d2uiz>
 8004d86:	2801      	cmp	r0, #1
 8004d88:	bf38      	it	cc
 8004d8a:	2001      	movcc	r0, #1
 8004d8c:	f7fb fbe2 	bl	8000554 <__aeabi_ui2d>
 8004d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d92:	4680      	mov	r8, r0
 8004d94:	4689      	mov	r9, r1
 8004d96:	bb23      	cbnz	r3, 8004de2 <_strtod_l+0xb9a>
 8004d98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d9c:	9010      	str	r0, [sp, #64]	; 0x40
 8004d9e:	9311      	str	r3, [sp, #68]	; 0x44
 8004da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004da4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	9309      	str	r3, [sp, #36]	; 0x24
 8004db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004db8:	eeb0 0a48 	vmov.f32	s0, s16
 8004dbc:	eef0 0a68 	vmov.f32	s1, s17
 8004dc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dc4:	f002 f900 	bl	8006fc8 <__ulp>
 8004dc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004dcc:	ec53 2b10 	vmov	r2, r3, d0
 8004dd0:	f7fb fc3a 	bl	8000648 <__aeabi_dmul>
 8004dd4:	ec53 2b18 	vmov	r2, r3, d8
 8004dd8:	f7fb fa80 	bl	80002dc <__adddf3>
 8004ddc:	4682      	mov	sl, r0
 8004dde:	468b      	mov	fp, r1
 8004de0:	e78d      	b.n	8004cfe <_strtod_l+0xab6>
 8004de2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004de6:	e7db      	b.n	8004da0 <_strtod_l+0xb58>
 8004de8:	a311      	add	r3, pc, #68	; (adr r3, 8004e30 <_strtod_l+0xbe8>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb fe9d 	bl	8000b2c <__aeabi_dcmplt>
 8004df2:	e7b2      	b.n	8004d5a <_strtod_l+0xb12>
 8004df4:	2300      	movs	r3, #0
 8004df6:	930a      	str	r3, [sp, #40]	; 0x28
 8004df8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004dfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	f7ff ba6b 	b.w	80042d8 <_strtod_l+0x90>
 8004e02:	2a65      	cmp	r2, #101	; 0x65
 8004e04:	f43f ab5f 	beq.w	80044c6 <_strtod_l+0x27e>
 8004e08:	2a45      	cmp	r2, #69	; 0x45
 8004e0a:	f43f ab5c 	beq.w	80044c6 <_strtod_l+0x27e>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f7ff bb94 	b.w	800453c <_strtod_l+0x2f4>
 8004e14:	f3af 8000 	nop.w
 8004e18:	94a03595 	.word	0x94a03595
 8004e1c:	3fdfffff 	.word	0x3fdfffff
 8004e20:	35afe535 	.word	0x35afe535
 8004e24:	3fe00000 	.word	0x3fe00000
 8004e28:	ffc00000 	.word	0xffc00000
 8004e2c:	41dfffff 	.word	0x41dfffff
 8004e30:	94a03595 	.word	0x94a03595
 8004e34:	3fcfffff 	.word	0x3fcfffff
 8004e38:	3ff00000 	.word	0x3ff00000
 8004e3c:	7ff00000 	.word	0x7ff00000
 8004e40:	7fe00000 	.word	0x7fe00000
 8004e44:	7c9fffff 	.word	0x7c9fffff
 8004e48:	3fe00000 	.word	0x3fe00000
 8004e4c:	bff00000 	.word	0xbff00000
 8004e50:	7fefffff 	.word	0x7fefffff

08004e54 <strtod>:
 8004e54:	460a      	mov	r2, r1
 8004e56:	4601      	mov	r1, r0
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <strtod+0x10>)
 8004e5a:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <strtod+0x14>)
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f7ff b9f3 	b.w	8004248 <_strtod_l>
 8004e62:	bf00      	nop
 8004e64:	2000001c 	.word	0x2000001c
 8004e68:	20000084 	.word	0x20000084

08004e6c <strtok>:
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <strtok+0x5c>)
 8004e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e70:	681e      	ldr	r6, [r3, #0]
 8004e72:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004e74:	4605      	mov	r5, r0
 8004e76:	b9fc      	cbnz	r4, 8004eb8 <strtok+0x4c>
 8004e78:	2050      	movs	r0, #80	; 0x50
 8004e7a:	9101      	str	r1, [sp, #4]
 8004e7c:	f001 fd0a 	bl	8006894 <malloc>
 8004e80:	9901      	ldr	r1, [sp, #4]
 8004e82:	65b0      	str	r0, [r6, #88]	; 0x58
 8004e84:	4602      	mov	r2, r0
 8004e86:	b920      	cbnz	r0, 8004e92 <strtok+0x26>
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <strtok+0x60>)
 8004e8a:	4811      	ldr	r0, [pc, #68]	; (8004ed0 <strtok+0x64>)
 8004e8c:	2157      	movs	r1, #87	; 0x57
 8004e8e:	f000 f8c5 	bl	800501c <__assert_func>
 8004e92:	e9c0 4400 	strd	r4, r4, [r0]
 8004e96:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e9a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e9e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004ea2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004ea6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004eaa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004eae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004eb2:	6184      	str	r4, [r0, #24]
 8004eb4:	7704      	strb	r4, [r0, #28]
 8004eb6:	6244      	str	r4, [r0, #36]	; 0x24
 8004eb8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	b002      	add	sp, #8
 8004ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ec4:	f000 b806 	b.w	8004ed4 <__strtok_r>
 8004ec8:	2000001c 	.word	0x2000001c
 8004ecc:	080143c8 	.word	0x080143c8
 8004ed0:	080143df 	.word	0x080143df

08004ed4 <__strtok_r>:
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	b908      	cbnz	r0, 8004edc <__strtok_r+0x8>
 8004ed8:	6810      	ldr	r0, [r2, #0]
 8004eda:	b188      	cbz	r0, 8004f00 <__strtok_r+0x2c>
 8004edc:	4604      	mov	r4, r0
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ee4:	460f      	mov	r7, r1
 8004ee6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004eea:	b91e      	cbnz	r6, 8004ef4 <__strtok_r+0x20>
 8004eec:	b965      	cbnz	r5, 8004f08 <__strtok_r+0x34>
 8004eee:	6015      	str	r5, [r2, #0]
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	e005      	b.n	8004f00 <__strtok_r+0x2c>
 8004ef4:	42b5      	cmp	r5, r6
 8004ef6:	d1f6      	bne.n	8004ee6 <__strtok_r+0x12>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <__strtok_r+0xa>
 8004efc:	6014      	str	r4, [r2, #0]
 8004efe:	7003      	strb	r3, [r0, #0]
 8004f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f02:	461c      	mov	r4, r3
 8004f04:	e00c      	b.n	8004f20 <__strtok_r+0x4c>
 8004f06:	b915      	cbnz	r5, 8004f0e <__strtok_r+0x3a>
 8004f08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f0c:	460e      	mov	r6, r1
 8004f0e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f12:	42ab      	cmp	r3, r5
 8004f14:	d1f7      	bne.n	8004f06 <__strtok_r+0x32>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f3      	beq.n	8004f02 <__strtok_r+0x2e>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f20:	6014      	str	r4, [r2, #0]
 8004f22:	e7ed      	b.n	8004f00 <__strtok_r+0x2c>

08004f24 <_strtoul_l.constprop.0>:
 8004f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4f36      	ldr	r7, [pc, #216]	; (8005004 <_strtoul_l.constprop.0+0xe0>)
 8004f2a:	4686      	mov	lr, r0
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f34:	5de6      	ldrb	r6, [r4, r7]
 8004f36:	f016 0608 	ands.w	r6, r6, #8
 8004f3a:	d1f8      	bne.n	8004f2e <_strtoul_l.constprop.0+0xa>
 8004f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8004f3e:	d12f      	bne.n	8004fa0 <_strtoul_l.constprop.0+0x7c>
 8004f40:	782c      	ldrb	r4, [r5, #0]
 8004f42:	2601      	movs	r6, #1
 8004f44:	1c85      	adds	r5, r0, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d057      	beq.n	8004ffa <_strtoul_l.constprop.0+0xd6>
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d109      	bne.n	8004f62 <_strtoul_l.constprop.0+0x3e>
 8004f4e:	2c30      	cmp	r4, #48	; 0x30
 8004f50:	d107      	bne.n	8004f62 <_strtoul_l.constprop.0+0x3e>
 8004f52:	7828      	ldrb	r0, [r5, #0]
 8004f54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f58:	2858      	cmp	r0, #88	; 0x58
 8004f5a:	d149      	bne.n	8004ff0 <_strtoul_l.constprop.0+0xcc>
 8004f5c:	786c      	ldrb	r4, [r5, #1]
 8004f5e:	2310      	movs	r3, #16
 8004f60:	3502      	adds	r5, #2
 8004f62:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004f66:	2700      	movs	r7, #0
 8004f68:	fbb8 f8f3 	udiv	r8, r8, r3
 8004f6c:	fb03 f908 	mul.w	r9, r3, r8
 8004f70:	ea6f 0909 	mvn.w	r9, r9
 8004f74:	4638      	mov	r0, r7
 8004f76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004f7a:	f1bc 0f09 	cmp.w	ip, #9
 8004f7e:	d814      	bhi.n	8004faa <_strtoul_l.constprop.0+0x86>
 8004f80:	4664      	mov	r4, ip
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	dd22      	ble.n	8004fcc <_strtoul_l.constprop.0+0xa8>
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	db1d      	blt.n	8004fc6 <_strtoul_l.constprop.0+0xa2>
 8004f8a:	4580      	cmp	r8, r0
 8004f8c:	d31b      	bcc.n	8004fc6 <_strtoul_l.constprop.0+0xa2>
 8004f8e:	d101      	bne.n	8004f94 <_strtoul_l.constprop.0+0x70>
 8004f90:	45a1      	cmp	r9, r4
 8004f92:	db18      	blt.n	8004fc6 <_strtoul_l.constprop.0+0xa2>
 8004f94:	fb00 4003 	mla	r0, r0, r3, r4
 8004f98:	2701      	movs	r7, #1
 8004f9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f9e:	e7ea      	b.n	8004f76 <_strtoul_l.constprop.0+0x52>
 8004fa0:	2c2b      	cmp	r4, #43	; 0x2b
 8004fa2:	bf04      	itt	eq
 8004fa4:	782c      	ldrbeq	r4, [r5, #0]
 8004fa6:	1c85      	addeq	r5, r0, #2
 8004fa8:	e7cd      	b.n	8004f46 <_strtoul_l.constprop.0+0x22>
 8004faa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004fae:	f1bc 0f19 	cmp.w	ip, #25
 8004fb2:	d801      	bhi.n	8004fb8 <_strtoul_l.constprop.0+0x94>
 8004fb4:	3c37      	subs	r4, #55	; 0x37
 8004fb6:	e7e4      	b.n	8004f82 <_strtoul_l.constprop.0+0x5e>
 8004fb8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004fbc:	f1bc 0f19 	cmp.w	ip, #25
 8004fc0:	d804      	bhi.n	8004fcc <_strtoul_l.constprop.0+0xa8>
 8004fc2:	3c57      	subs	r4, #87	; 0x57
 8004fc4:	e7dd      	b.n	8004f82 <_strtoul_l.constprop.0+0x5e>
 8004fc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004fca:	e7e6      	b.n	8004f9a <_strtoul_l.constprop.0+0x76>
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	da07      	bge.n	8004fe0 <_strtoul_l.constprop.0+0xbc>
 8004fd0:	2322      	movs	r3, #34	; 0x22
 8004fd2:	f8ce 3000 	str.w	r3, [lr]
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fda:	b932      	cbnz	r2, 8004fea <_strtoul_l.constprop.0+0xc6>
 8004fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fe0:	b106      	cbz	r6, 8004fe4 <_strtoul_l.constprop.0+0xc0>
 8004fe2:	4240      	negs	r0, r0
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d0f9      	beq.n	8004fdc <_strtoul_l.constprop.0+0xb8>
 8004fe8:	b107      	cbz	r7, 8004fec <_strtoul_l.constprop.0+0xc8>
 8004fea:	1e69      	subs	r1, r5, #1
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	e7f5      	b.n	8004fdc <_strtoul_l.constprop.0+0xb8>
 8004ff0:	2430      	movs	r4, #48	; 0x30
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1b5      	bne.n	8004f62 <_strtoul_l.constprop.0+0x3e>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	e7b3      	b.n	8004f62 <_strtoul_l.constprop.0+0x3e>
 8004ffa:	2c30      	cmp	r4, #48	; 0x30
 8004ffc:	d0a9      	beq.n	8004f52 <_strtoul_l.constprop.0+0x2e>
 8004ffe:	230a      	movs	r3, #10
 8005000:	e7af      	b.n	8004f62 <_strtoul_l.constprop.0+0x3e>
 8005002:	bf00      	nop
 8005004:	0801423e 	.word	0x0801423e

08005008 <strtoul>:
 8005008:	4613      	mov	r3, r2
 800500a:	460a      	mov	r2, r1
 800500c:	4601      	mov	r1, r0
 800500e:	4802      	ldr	r0, [pc, #8]	; (8005018 <strtoul+0x10>)
 8005010:	6800      	ldr	r0, [r0, #0]
 8005012:	f7ff bf87 	b.w	8004f24 <_strtoul_l.constprop.0>
 8005016:	bf00      	nop
 8005018:	2000001c 	.word	0x2000001c

0800501c <__assert_func>:
 800501c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800501e:	4614      	mov	r4, r2
 8005020:	461a      	mov	r2, r3
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <__assert_func+0x2c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4605      	mov	r5, r0
 8005028:	68d8      	ldr	r0, [r3, #12]
 800502a:	b14c      	cbz	r4, 8005040 <__assert_func+0x24>
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <__assert_func+0x30>)
 800502e:	9100      	str	r1, [sp, #0]
 8005030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005034:	4906      	ldr	r1, [pc, #24]	; (8005050 <__assert_func+0x34>)
 8005036:	462b      	mov	r3, r5
 8005038:	f001 f820 	bl	800607c <fiprintf>
 800503c:	f002 fc52 	bl	80078e4 <abort>
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <__assert_func+0x38>)
 8005042:	461c      	mov	r4, r3
 8005044:	e7f3      	b.n	800502e <__assert_func+0x12>
 8005046:	bf00      	nop
 8005048:	2000001c 	.word	0x2000001c
 800504c:	0801445e 	.word	0x0801445e
 8005050:	0801446b 	.word	0x0801446b
 8005054:	0800ac4f 	.word	0x0800ac4f

08005058 <quorem>:
 8005058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	6903      	ldr	r3, [r0, #16]
 800505e:	690c      	ldr	r4, [r1, #16]
 8005060:	42a3      	cmp	r3, r4
 8005062:	4607      	mov	r7, r0
 8005064:	f2c0 8081 	blt.w	800516a <quorem+0x112>
 8005068:	3c01      	subs	r4, #1
 800506a:	f101 0814 	add.w	r8, r1, #20
 800506e:	f100 0514 	add.w	r5, r0, #20
 8005072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800507c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005080:	3301      	adds	r3, #1
 8005082:	429a      	cmp	r2, r3
 8005084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800508c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005090:	d331      	bcc.n	80050f6 <quorem+0x9e>
 8005092:	f04f 0e00 	mov.w	lr, #0
 8005096:	4640      	mov	r0, r8
 8005098:	46ac      	mov	ip, r5
 800509a:	46f2      	mov	sl, lr
 800509c:	f850 2b04 	ldr.w	r2, [r0], #4
 80050a0:	b293      	uxth	r3, r2
 80050a2:	fb06 e303 	mla	r3, r6, r3, lr
 80050a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	ebaa 0303 	sub.w	r3, sl, r3
 80050b0:	0c12      	lsrs	r2, r2, #16
 80050b2:	f8dc a000 	ldr.w	sl, [ip]
 80050b6:	fb06 e202 	mla	r2, r6, r2, lr
 80050ba:	fa13 f38a 	uxtah	r3, r3, sl
 80050be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050c2:	fa1f fa82 	uxth.w	sl, r2
 80050c6:	f8dc 2000 	ldr.w	r2, [ip]
 80050ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80050ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050d8:	4581      	cmp	r9, r0
 80050da:	f84c 3b04 	str.w	r3, [ip], #4
 80050de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050e2:	d2db      	bcs.n	800509c <quorem+0x44>
 80050e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80050e8:	b92b      	cbnz	r3, 80050f6 <quorem+0x9e>
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	429d      	cmp	r5, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	d32e      	bcc.n	8005152 <quorem+0xfa>
 80050f4:	613c      	str	r4, [r7, #16]
 80050f6:	4638      	mov	r0, r7
 80050f8:	f001 fec0 	bl	8006e7c <__mcmp>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	db24      	blt.n	800514a <quorem+0xf2>
 8005100:	3601      	adds	r6, #1
 8005102:	4628      	mov	r0, r5
 8005104:	f04f 0c00 	mov.w	ip, #0
 8005108:	f858 2b04 	ldr.w	r2, [r8], #4
 800510c:	f8d0 e000 	ldr.w	lr, [r0]
 8005110:	b293      	uxth	r3, r2
 8005112:	ebac 0303 	sub.w	r3, ip, r3
 8005116:	0c12      	lsrs	r2, r2, #16
 8005118:	fa13 f38e 	uxtah	r3, r3, lr
 800511c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005124:	b29b      	uxth	r3, r3
 8005126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800512a:	45c1      	cmp	r9, r8
 800512c:	f840 3b04 	str.w	r3, [r0], #4
 8005130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005134:	d2e8      	bcs.n	8005108 <quorem+0xb0>
 8005136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800513a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800513e:	b922      	cbnz	r2, 800514a <quorem+0xf2>
 8005140:	3b04      	subs	r3, #4
 8005142:	429d      	cmp	r5, r3
 8005144:	461a      	mov	r2, r3
 8005146:	d30a      	bcc.n	800515e <quorem+0x106>
 8005148:	613c      	str	r4, [r7, #16]
 800514a:	4630      	mov	r0, r6
 800514c:	b003      	add	sp, #12
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	3b04      	subs	r3, #4
 8005156:	2a00      	cmp	r2, #0
 8005158:	d1cc      	bne.n	80050f4 <quorem+0x9c>
 800515a:	3c01      	subs	r4, #1
 800515c:	e7c7      	b.n	80050ee <quorem+0x96>
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	3b04      	subs	r3, #4
 8005162:	2a00      	cmp	r2, #0
 8005164:	d1f0      	bne.n	8005148 <quorem+0xf0>
 8005166:	3c01      	subs	r4, #1
 8005168:	e7eb      	b.n	8005142 <quorem+0xea>
 800516a:	2000      	movs	r0, #0
 800516c:	e7ee      	b.n	800514c <quorem+0xf4>
	...

08005170 <_dtoa_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	ed2d 8b04 	vpush	{d8-d9}
 8005178:	ec57 6b10 	vmov	r6, r7, d0
 800517c:	b093      	sub	sp, #76	; 0x4c
 800517e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005184:	9106      	str	r1, [sp, #24]
 8005186:	ee10 aa10 	vmov	sl, s0
 800518a:	4604      	mov	r4, r0
 800518c:	9209      	str	r2, [sp, #36]	; 0x24
 800518e:	930c      	str	r3, [sp, #48]	; 0x30
 8005190:	46bb      	mov	fp, r7
 8005192:	b975      	cbnz	r5, 80051b2 <_dtoa_r+0x42>
 8005194:	2010      	movs	r0, #16
 8005196:	f001 fb7d 	bl	8006894 <malloc>
 800519a:	4602      	mov	r2, r0
 800519c:	6260      	str	r0, [r4, #36]	; 0x24
 800519e:	b920      	cbnz	r0, 80051aa <_dtoa_r+0x3a>
 80051a0:	4ba7      	ldr	r3, [pc, #668]	; (8005440 <_dtoa_r+0x2d0>)
 80051a2:	21ea      	movs	r1, #234	; 0xea
 80051a4:	48a7      	ldr	r0, [pc, #668]	; (8005444 <_dtoa_r+0x2d4>)
 80051a6:	f7ff ff39 	bl	800501c <__assert_func>
 80051aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051ae:	6005      	str	r5, [r0, #0]
 80051b0:	60c5      	str	r5, [r0, #12]
 80051b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	b151      	cbz	r1, 80051ce <_dtoa_r+0x5e>
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	604a      	str	r2, [r1, #4]
 80051bc:	2301      	movs	r3, #1
 80051be:	4093      	lsls	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
 80051c2:	4620      	mov	r0, r4
 80051c4:	f001 fbce 	bl	8006964 <_Bfree>
 80051c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	1e3b      	subs	r3, r7, #0
 80051d0:	bfaa      	itet	ge
 80051d2:	2300      	movge	r3, #0
 80051d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80051d8:	f8c8 3000 	strge.w	r3, [r8]
 80051dc:	4b9a      	ldr	r3, [pc, #616]	; (8005448 <_dtoa_r+0x2d8>)
 80051de:	bfbc      	itt	lt
 80051e0:	2201      	movlt	r2, #1
 80051e2:	f8c8 2000 	strlt.w	r2, [r8]
 80051e6:	ea33 030b 	bics.w	r3, r3, fp
 80051ea:	d11b      	bne.n	8005224 <_dtoa_r+0xb4>
 80051ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051f8:	4333      	orrs	r3, r6
 80051fa:	f000 8592 	beq.w	8005d22 <_dtoa_r+0xbb2>
 80051fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005200:	b963      	cbnz	r3, 800521c <_dtoa_r+0xac>
 8005202:	4b92      	ldr	r3, [pc, #584]	; (800544c <_dtoa_r+0x2dc>)
 8005204:	e022      	b.n	800524c <_dtoa_r+0xdc>
 8005206:	4b92      	ldr	r3, [pc, #584]	; (8005450 <_dtoa_r+0x2e0>)
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	3308      	adds	r3, #8
 800520c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	9801      	ldr	r0, [sp, #4]
 8005212:	b013      	add	sp, #76	; 0x4c
 8005214:	ecbd 8b04 	vpop	{d8-d9}
 8005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521c:	4b8b      	ldr	r3, [pc, #556]	; (800544c <_dtoa_r+0x2dc>)
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	3303      	adds	r3, #3
 8005222:	e7f3      	b.n	800520c <_dtoa_r+0x9c>
 8005224:	2200      	movs	r2, #0
 8005226:	2300      	movs	r3, #0
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	f7fb fc74 	bl	8000b18 <__aeabi_dcmpeq>
 8005230:	ec4b ab19 	vmov	d9, sl, fp
 8005234:	4680      	mov	r8, r0
 8005236:	b158      	cbz	r0, 8005250 <_dtoa_r+0xe0>
 8005238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800523a:	2301      	movs	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 856b 	beq.w	8005d1c <_dtoa_r+0xbac>
 8005246:	4883      	ldr	r0, [pc, #524]	; (8005454 <_dtoa_r+0x2e4>)
 8005248:	6018      	str	r0, [r3, #0]
 800524a:	1e43      	subs	r3, r0, #1
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	e7df      	b.n	8005210 <_dtoa_r+0xa0>
 8005250:	ec4b ab10 	vmov	d0, sl, fp
 8005254:	aa10      	add	r2, sp, #64	; 0x40
 8005256:	a911      	add	r1, sp, #68	; 0x44
 8005258:	4620      	mov	r0, r4
 800525a:	f001 ff31 	bl	80070c0 <__d2b>
 800525e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005262:	ee08 0a10 	vmov	s16, r0
 8005266:	2d00      	cmp	r5, #0
 8005268:	f000 8084 	beq.w	8005374 <_dtoa_r+0x204>
 800526c:	ee19 3a90 	vmov	r3, s19
 8005270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005274:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005278:	4656      	mov	r6, sl
 800527a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800527e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005282:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005286:	4b74      	ldr	r3, [pc, #464]	; (8005458 <_dtoa_r+0x2e8>)
 8005288:	2200      	movs	r2, #0
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb f823 	bl	80002d8 <__aeabi_dsub>
 8005292:	a365      	add	r3, pc, #404	; (adr r3, 8005428 <_dtoa_r+0x2b8>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f9d6 	bl	8000648 <__aeabi_dmul>
 800529c:	a364      	add	r3, pc, #400	; (adr r3, 8005430 <_dtoa_r+0x2c0>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb f81b 	bl	80002dc <__adddf3>
 80052a6:	4606      	mov	r6, r0
 80052a8:	4628      	mov	r0, r5
 80052aa:	460f      	mov	r7, r1
 80052ac:	f7fb f962 	bl	8000574 <__aeabi_i2d>
 80052b0:	a361      	add	r3, pc, #388	; (adr r3, 8005438 <_dtoa_r+0x2c8>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f7fb f9c7 	bl	8000648 <__aeabi_dmul>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb f80b 	bl	80002dc <__adddf3>
 80052c6:	4606      	mov	r6, r0
 80052c8:	460f      	mov	r7, r1
 80052ca:	f7fb fc6d 	bl	8000ba8 <__aeabi_d2iz>
 80052ce:	2200      	movs	r2, #0
 80052d0:	9000      	str	r0, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	4630      	mov	r0, r6
 80052d6:	4639      	mov	r1, r7
 80052d8:	f7fb fc28 	bl	8000b2c <__aeabi_dcmplt>
 80052dc:	b150      	cbz	r0, 80052f4 <_dtoa_r+0x184>
 80052de:	9800      	ldr	r0, [sp, #0]
 80052e0:	f7fb f948 	bl	8000574 <__aeabi_i2d>
 80052e4:	4632      	mov	r2, r6
 80052e6:	463b      	mov	r3, r7
 80052e8:	f7fb fc16 	bl	8000b18 <__aeabi_dcmpeq>
 80052ec:	b910      	cbnz	r0, 80052f4 <_dtoa_r+0x184>
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	9b00      	ldr	r3, [sp, #0]
 80052f6:	2b16      	cmp	r3, #22
 80052f8:	d85a      	bhi.n	80053b0 <_dtoa_r+0x240>
 80052fa:	9a00      	ldr	r2, [sp, #0]
 80052fc:	4b57      	ldr	r3, [pc, #348]	; (800545c <_dtoa_r+0x2ec>)
 80052fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	ec51 0b19 	vmov	r0, r1, d9
 800530a:	f7fb fc0f 	bl	8000b2c <__aeabi_dcmplt>
 800530e:	2800      	cmp	r0, #0
 8005310:	d050      	beq.n	80053b4 <_dtoa_r+0x244>
 8005312:	9b00      	ldr	r3, [sp, #0]
 8005314:	3b01      	subs	r3, #1
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	930b      	str	r3, [sp, #44]	; 0x2c
 800531c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800531e:	1b5d      	subs	r5, r3, r5
 8005320:	1e6b      	subs	r3, r5, #1
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	bf45      	ittet	mi
 8005326:	f1c5 0301 	rsbmi	r3, r5, #1
 800532a:	9304      	strmi	r3, [sp, #16]
 800532c:	2300      	movpl	r3, #0
 800532e:	2300      	movmi	r3, #0
 8005330:	bf4c      	ite	mi
 8005332:	9305      	strmi	r3, [sp, #20]
 8005334:	9304      	strpl	r3, [sp, #16]
 8005336:	9b00      	ldr	r3, [sp, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	db3d      	blt.n	80053b8 <_dtoa_r+0x248>
 800533c:	9b05      	ldr	r3, [sp, #20]
 800533e:	9a00      	ldr	r2, [sp, #0]
 8005340:	920a      	str	r2, [sp, #40]	; 0x28
 8005342:	4413      	add	r3, r2
 8005344:	9305      	str	r3, [sp, #20]
 8005346:	2300      	movs	r3, #0
 8005348:	9307      	str	r3, [sp, #28]
 800534a:	9b06      	ldr	r3, [sp, #24]
 800534c:	2b09      	cmp	r3, #9
 800534e:	f200 8089 	bhi.w	8005464 <_dtoa_r+0x2f4>
 8005352:	2b05      	cmp	r3, #5
 8005354:	bfc4      	itt	gt
 8005356:	3b04      	subgt	r3, #4
 8005358:	9306      	strgt	r3, [sp, #24]
 800535a:	9b06      	ldr	r3, [sp, #24]
 800535c:	f1a3 0302 	sub.w	r3, r3, #2
 8005360:	bfcc      	ite	gt
 8005362:	2500      	movgt	r5, #0
 8005364:	2501      	movle	r5, #1
 8005366:	2b03      	cmp	r3, #3
 8005368:	f200 8087 	bhi.w	800547a <_dtoa_r+0x30a>
 800536c:	e8df f003 	tbb	[pc, r3]
 8005370:	59383a2d 	.word	0x59383a2d
 8005374:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005378:	441d      	add	r5, r3
 800537a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800537e:	2b20      	cmp	r3, #32
 8005380:	bfc1      	itttt	gt
 8005382:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005386:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800538a:	fa0b f303 	lslgt.w	r3, fp, r3
 800538e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005392:	bfda      	itte	le
 8005394:	f1c3 0320 	rsble	r3, r3, #32
 8005398:	fa06 f003 	lslle.w	r0, r6, r3
 800539c:	4318      	orrgt	r0, r3
 800539e:	f7fb f8d9 	bl	8000554 <__aeabi_ui2d>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4606      	mov	r6, r0
 80053a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053aa:	3d01      	subs	r5, #1
 80053ac:	930e      	str	r3, [sp, #56]	; 0x38
 80053ae:	e76a      	b.n	8005286 <_dtoa_r+0x116>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7b2      	b.n	800531a <_dtoa_r+0x1aa>
 80053b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80053b6:	e7b1      	b.n	800531c <_dtoa_r+0x1ac>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	9a00      	ldr	r2, [sp, #0]
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	9304      	str	r3, [sp, #16]
 80053c0:	4253      	negs	r3, r2
 80053c2:	9307      	str	r3, [sp, #28]
 80053c4:	2300      	movs	r3, #0
 80053c6:	930a      	str	r3, [sp, #40]	; 0x28
 80053c8:	e7bf      	b.n	800534a <_dtoa_r+0x1da>
 80053ca:	2300      	movs	r3, #0
 80053cc:	9308      	str	r3, [sp, #32]
 80053ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dc55      	bgt.n	8005480 <_dtoa_r+0x310>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053da:	461a      	mov	r2, r3
 80053dc:	9209      	str	r2, [sp, #36]	; 0x24
 80053de:	e00c      	b.n	80053fa <_dtoa_r+0x28a>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e7f3      	b.n	80053cc <_dtoa_r+0x25c>
 80053e4:	2300      	movs	r3, #0
 80053e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e8:	9308      	str	r3, [sp, #32]
 80053ea:	9b00      	ldr	r3, [sp, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	9302      	str	r3, [sp, #8]
 80053f0:	3301      	adds	r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	9303      	str	r3, [sp, #12]
 80053f6:	bfb8      	it	lt
 80053f8:	2301      	movlt	r3, #1
 80053fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053fc:	2200      	movs	r2, #0
 80053fe:	6042      	str	r2, [r0, #4]
 8005400:	2204      	movs	r2, #4
 8005402:	f102 0614 	add.w	r6, r2, #20
 8005406:	429e      	cmp	r6, r3
 8005408:	6841      	ldr	r1, [r0, #4]
 800540a:	d93d      	bls.n	8005488 <_dtoa_r+0x318>
 800540c:	4620      	mov	r0, r4
 800540e:	f001 fa69 	bl	80068e4 <_Balloc>
 8005412:	9001      	str	r0, [sp, #4]
 8005414:	2800      	cmp	r0, #0
 8005416:	d13b      	bne.n	8005490 <_dtoa_r+0x320>
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <_dtoa_r+0x2f0>)
 800541a:	4602      	mov	r2, r0
 800541c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005420:	e6c0      	b.n	80051a4 <_dtoa_r+0x34>
 8005422:	2301      	movs	r3, #1
 8005424:	e7df      	b.n	80053e6 <_dtoa_r+0x276>
 8005426:	bf00      	nop
 8005428:	636f4361 	.word	0x636f4361
 800542c:	3fd287a7 	.word	0x3fd287a7
 8005430:	8b60c8b3 	.word	0x8b60c8b3
 8005434:	3fc68a28 	.word	0x3fc68a28
 8005438:	509f79fb 	.word	0x509f79fb
 800543c:	3fd34413 	.word	0x3fd34413
 8005440:	080143c8 	.word	0x080143c8
 8005444:	080144a7 	.word	0x080144a7
 8005448:	7ff00000 	.word	0x7ff00000
 800544c:	080144a3 	.word	0x080144a3
 8005450:	0801449a 	.word	0x0801449a
 8005454:	0800a3e7 	.word	0x0800a3e7
 8005458:	3ff80000 	.word	0x3ff80000
 800545c:	080146d8 	.word	0x080146d8
 8005460:	08014524 	.word	0x08014524
 8005464:	2501      	movs	r5, #1
 8005466:	2300      	movs	r3, #0
 8005468:	9306      	str	r3, [sp, #24]
 800546a:	9508      	str	r5, [sp, #32]
 800546c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005470:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	2312      	movs	r3, #18
 8005478:	e7b0      	b.n	80053dc <_dtoa_r+0x26c>
 800547a:	2301      	movs	r3, #1
 800547c:	9308      	str	r3, [sp, #32]
 800547e:	e7f5      	b.n	800546c <_dtoa_r+0x2fc>
 8005480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005482:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005486:	e7b8      	b.n	80053fa <_dtoa_r+0x28a>
 8005488:	3101      	adds	r1, #1
 800548a:	6041      	str	r1, [r0, #4]
 800548c:	0052      	lsls	r2, r2, #1
 800548e:	e7b8      	b.n	8005402 <_dtoa_r+0x292>
 8005490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005492:	9a01      	ldr	r2, [sp, #4]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	2b0e      	cmp	r3, #14
 800549a:	f200 809d 	bhi.w	80055d8 <_dtoa_r+0x468>
 800549e:	2d00      	cmp	r5, #0
 80054a0:	f000 809a 	beq.w	80055d8 <_dtoa_r+0x468>
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	dd32      	ble.n	8005510 <_dtoa_r+0x3a0>
 80054aa:	4ab7      	ldr	r2, [pc, #732]	; (8005788 <_dtoa_r+0x618>)
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054b8:	9b00      	ldr	r3, [sp, #0]
 80054ba:	05d8      	lsls	r0, r3, #23
 80054bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80054c0:	d516      	bpl.n	80054f0 <_dtoa_r+0x380>
 80054c2:	4bb2      	ldr	r3, [pc, #712]	; (800578c <_dtoa_r+0x61c>)
 80054c4:	ec51 0b19 	vmov	r0, r1, d9
 80054c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054cc:	f7fb f9e6 	bl	800089c <__aeabi_ddiv>
 80054d0:	f007 070f 	and.w	r7, r7, #15
 80054d4:	4682      	mov	sl, r0
 80054d6:	468b      	mov	fp, r1
 80054d8:	2503      	movs	r5, #3
 80054da:	4eac      	ldr	r6, [pc, #688]	; (800578c <_dtoa_r+0x61c>)
 80054dc:	b957      	cbnz	r7, 80054f4 <_dtoa_r+0x384>
 80054de:	4642      	mov	r2, r8
 80054e0:	464b      	mov	r3, r9
 80054e2:	4650      	mov	r0, sl
 80054e4:	4659      	mov	r1, fp
 80054e6:	f7fb f9d9 	bl	800089c <__aeabi_ddiv>
 80054ea:	4682      	mov	sl, r0
 80054ec:	468b      	mov	fp, r1
 80054ee:	e028      	b.n	8005542 <_dtoa_r+0x3d2>
 80054f0:	2502      	movs	r5, #2
 80054f2:	e7f2      	b.n	80054da <_dtoa_r+0x36a>
 80054f4:	07f9      	lsls	r1, r7, #31
 80054f6:	d508      	bpl.n	800550a <_dtoa_r+0x39a>
 80054f8:	4640      	mov	r0, r8
 80054fa:	4649      	mov	r1, r9
 80054fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005500:	f7fb f8a2 	bl	8000648 <__aeabi_dmul>
 8005504:	3501      	adds	r5, #1
 8005506:	4680      	mov	r8, r0
 8005508:	4689      	mov	r9, r1
 800550a:	107f      	asrs	r7, r7, #1
 800550c:	3608      	adds	r6, #8
 800550e:	e7e5      	b.n	80054dc <_dtoa_r+0x36c>
 8005510:	f000 809b 	beq.w	800564a <_dtoa_r+0x4da>
 8005514:	9b00      	ldr	r3, [sp, #0]
 8005516:	4f9d      	ldr	r7, [pc, #628]	; (800578c <_dtoa_r+0x61c>)
 8005518:	425e      	negs	r6, r3
 800551a:	4b9b      	ldr	r3, [pc, #620]	; (8005788 <_dtoa_r+0x618>)
 800551c:	f006 020f 	and.w	r2, r6, #15
 8005520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	ec51 0b19 	vmov	r0, r1, d9
 800552c:	f7fb f88c 	bl	8000648 <__aeabi_dmul>
 8005530:	1136      	asrs	r6, r6, #4
 8005532:	4682      	mov	sl, r0
 8005534:	468b      	mov	fp, r1
 8005536:	2300      	movs	r3, #0
 8005538:	2502      	movs	r5, #2
 800553a:	2e00      	cmp	r6, #0
 800553c:	d17a      	bne.n	8005634 <_dtoa_r+0x4c4>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1d3      	bne.n	80054ea <_dtoa_r+0x37a>
 8005542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8082 	beq.w	800564e <_dtoa_r+0x4de>
 800554a:	4b91      	ldr	r3, [pc, #580]	; (8005790 <_dtoa_r+0x620>)
 800554c:	2200      	movs	r2, #0
 800554e:	4650      	mov	r0, sl
 8005550:	4659      	mov	r1, fp
 8005552:	f7fb faeb 	bl	8000b2c <__aeabi_dcmplt>
 8005556:	2800      	cmp	r0, #0
 8005558:	d079      	beq.n	800564e <_dtoa_r+0x4de>
 800555a:	9b03      	ldr	r3, [sp, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d076      	beq.n	800564e <_dtoa_r+0x4de>
 8005560:	9b02      	ldr	r3, [sp, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	dd36      	ble.n	80055d4 <_dtoa_r+0x464>
 8005566:	9b00      	ldr	r3, [sp, #0]
 8005568:	4650      	mov	r0, sl
 800556a:	4659      	mov	r1, fp
 800556c:	1e5f      	subs	r7, r3, #1
 800556e:	2200      	movs	r2, #0
 8005570:	4b88      	ldr	r3, [pc, #544]	; (8005794 <_dtoa_r+0x624>)
 8005572:	f7fb f869 	bl	8000648 <__aeabi_dmul>
 8005576:	9e02      	ldr	r6, [sp, #8]
 8005578:	4682      	mov	sl, r0
 800557a:	468b      	mov	fp, r1
 800557c:	3501      	adds	r5, #1
 800557e:	4628      	mov	r0, r5
 8005580:	f7fa fff8 	bl	8000574 <__aeabi_i2d>
 8005584:	4652      	mov	r2, sl
 8005586:	465b      	mov	r3, fp
 8005588:	f7fb f85e 	bl	8000648 <__aeabi_dmul>
 800558c:	4b82      	ldr	r3, [pc, #520]	; (8005798 <_dtoa_r+0x628>)
 800558e:	2200      	movs	r2, #0
 8005590:	f7fa fea4 	bl	80002dc <__adddf3>
 8005594:	46d0      	mov	r8, sl
 8005596:	46d9      	mov	r9, fp
 8005598:	4682      	mov	sl, r0
 800559a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800559e:	2e00      	cmp	r6, #0
 80055a0:	d158      	bne.n	8005654 <_dtoa_r+0x4e4>
 80055a2:	4b7e      	ldr	r3, [pc, #504]	; (800579c <_dtoa_r+0x62c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	4640      	mov	r0, r8
 80055a8:	4649      	mov	r1, r9
 80055aa:	f7fa fe95 	bl	80002d8 <__aeabi_dsub>
 80055ae:	4652      	mov	r2, sl
 80055b0:	465b      	mov	r3, fp
 80055b2:	4680      	mov	r8, r0
 80055b4:	4689      	mov	r9, r1
 80055b6:	f7fb fad7 	bl	8000b68 <__aeabi_dcmpgt>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f040 8295 	bne.w	8005aea <_dtoa_r+0x97a>
 80055c0:	4652      	mov	r2, sl
 80055c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb faaf 	bl	8000b2c <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8289 	bne.w	8005ae6 <_dtoa_r+0x976>
 80055d4:	ec5b ab19 	vmov	sl, fp, d9
 80055d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f2c0 8148 	blt.w	8005870 <_dtoa_r+0x700>
 80055e0:	9a00      	ldr	r2, [sp, #0]
 80055e2:	2a0e      	cmp	r2, #14
 80055e4:	f300 8144 	bgt.w	8005870 <_dtoa_r+0x700>
 80055e8:	4b67      	ldr	r3, [pc, #412]	; (8005788 <_dtoa_r+0x618>)
 80055ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f280 80d5 	bge.w	80057a4 <_dtoa_r+0x634>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f300 80d1 	bgt.w	80057a4 <_dtoa_r+0x634>
 8005602:	f040 826f 	bne.w	8005ae4 <_dtoa_r+0x974>
 8005606:	4b65      	ldr	r3, [pc, #404]	; (800579c <_dtoa_r+0x62c>)
 8005608:	2200      	movs	r2, #0
 800560a:	4640      	mov	r0, r8
 800560c:	4649      	mov	r1, r9
 800560e:	f7fb f81b 	bl	8000648 <__aeabi_dmul>
 8005612:	4652      	mov	r2, sl
 8005614:	465b      	mov	r3, fp
 8005616:	f7fb fa9d 	bl	8000b54 <__aeabi_dcmpge>
 800561a:	9e03      	ldr	r6, [sp, #12]
 800561c:	4637      	mov	r7, r6
 800561e:	2800      	cmp	r0, #0
 8005620:	f040 8245 	bne.w	8005aae <_dtoa_r+0x93e>
 8005624:	9d01      	ldr	r5, [sp, #4]
 8005626:	2331      	movs	r3, #49	; 0x31
 8005628:	f805 3b01 	strb.w	r3, [r5], #1
 800562c:	9b00      	ldr	r3, [sp, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	e240      	b.n	8005ab6 <_dtoa_r+0x946>
 8005634:	07f2      	lsls	r2, r6, #31
 8005636:	d505      	bpl.n	8005644 <_dtoa_r+0x4d4>
 8005638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800563c:	f7fb f804 	bl	8000648 <__aeabi_dmul>
 8005640:	3501      	adds	r5, #1
 8005642:	2301      	movs	r3, #1
 8005644:	1076      	asrs	r6, r6, #1
 8005646:	3708      	adds	r7, #8
 8005648:	e777      	b.n	800553a <_dtoa_r+0x3ca>
 800564a:	2502      	movs	r5, #2
 800564c:	e779      	b.n	8005542 <_dtoa_r+0x3d2>
 800564e:	9f00      	ldr	r7, [sp, #0]
 8005650:	9e03      	ldr	r6, [sp, #12]
 8005652:	e794      	b.n	800557e <_dtoa_r+0x40e>
 8005654:	9901      	ldr	r1, [sp, #4]
 8005656:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <_dtoa_r+0x618>)
 8005658:	4431      	add	r1, r6
 800565a:	910d      	str	r1, [sp, #52]	; 0x34
 800565c:	9908      	ldr	r1, [sp, #32]
 800565e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005666:	2900      	cmp	r1, #0
 8005668:	d043      	beq.n	80056f2 <_dtoa_r+0x582>
 800566a:	494d      	ldr	r1, [pc, #308]	; (80057a0 <_dtoa_r+0x630>)
 800566c:	2000      	movs	r0, #0
 800566e:	f7fb f915 	bl	800089c <__aeabi_ddiv>
 8005672:	4652      	mov	r2, sl
 8005674:	465b      	mov	r3, fp
 8005676:	f7fa fe2f 	bl	80002d8 <__aeabi_dsub>
 800567a:	9d01      	ldr	r5, [sp, #4]
 800567c:	4682      	mov	sl, r0
 800567e:	468b      	mov	fp, r1
 8005680:	4649      	mov	r1, r9
 8005682:	4640      	mov	r0, r8
 8005684:	f7fb fa90 	bl	8000ba8 <__aeabi_d2iz>
 8005688:	4606      	mov	r6, r0
 800568a:	f7fa ff73 	bl	8000574 <__aeabi_i2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4640      	mov	r0, r8
 8005694:	4649      	mov	r1, r9
 8005696:	f7fa fe1f 	bl	80002d8 <__aeabi_dsub>
 800569a:	3630      	adds	r6, #48	; 0x30
 800569c:	f805 6b01 	strb.w	r6, [r5], #1
 80056a0:	4652      	mov	r2, sl
 80056a2:	465b      	mov	r3, fp
 80056a4:	4680      	mov	r8, r0
 80056a6:	4689      	mov	r9, r1
 80056a8:	f7fb fa40 	bl	8000b2c <__aeabi_dcmplt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d163      	bne.n	8005778 <_dtoa_r+0x608>
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	4936      	ldr	r1, [pc, #216]	; (8005790 <_dtoa_r+0x620>)
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7fa fe0e 	bl	80002d8 <__aeabi_dsub>
 80056bc:	4652      	mov	r2, sl
 80056be:	465b      	mov	r3, fp
 80056c0:	f7fb fa34 	bl	8000b2c <__aeabi_dcmplt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	f040 80b5 	bne.w	8005834 <_dtoa_r+0x6c4>
 80056ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056cc:	429d      	cmp	r5, r3
 80056ce:	d081      	beq.n	80055d4 <_dtoa_r+0x464>
 80056d0:	4b30      	ldr	r3, [pc, #192]	; (8005794 <_dtoa_r+0x624>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	4650      	mov	r0, sl
 80056d6:	4659      	mov	r1, fp
 80056d8:	f7fa ffb6 	bl	8000648 <__aeabi_dmul>
 80056dc:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <_dtoa_r+0x624>)
 80056de:	4682      	mov	sl, r0
 80056e0:	468b      	mov	fp, r1
 80056e2:	4640      	mov	r0, r8
 80056e4:	4649      	mov	r1, r9
 80056e6:	2200      	movs	r2, #0
 80056e8:	f7fa ffae 	bl	8000648 <__aeabi_dmul>
 80056ec:	4680      	mov	r8, r0
 80056ee:	4689      	mov	r9, r1
 80056f0:	e7c6      	b.n	8005680 <_dtoa_r+0x510>
 80056f2:	4650      	mov	r0, sl
 80056f4:	4659      	mov	r1, fp
 80056f6:	f7fa ffa7 	bl	8000648 <__aeabi_dmul>
 80056fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056fc:	9d01      	ldr	r5, [sp, #4]
 80056fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005700:	4682      	mov	sl, r0
 8005702:	468b      	mov	fp, r1
 8005704:	4649      	mov	r1, r9
 8005706:	4640      	mov	r0, r8
 8005708:	f7fb fa4e 	bl	8000ba8 <__aeabi_d2iz>
 800570c:	4606      	mov	r6, r0
 800570e:	f7fa ff31 	bl	8000574 <__aeabi_i2d>
 8005712:	3630      	adds	r6, #48	; 0x30
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	f7fa fddc 	bl	80002d8 <__aeabi_dsub>
 8005720:	f805 6b01 	strb.w	r6, [r5], #1
 8005724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005726:	429d      	cmp	r5, r3
 8005728:	4680      	mov	r8, r0
 800572a:	4689      	mov	r9, r1
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	d124      	bne.n	800577c <_dtoa_r+0x60c>
 8005732:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <_dtoa_r+0x630>)
 8005734:	4650      	mov	r0, sl
 8005736:	4659      	mov	r1, fp
 8005738:	f7fa fdd0 	bl	80002dc <__adddf3>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fb fa10 	bl	8000b68 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	d173      	bne.n	8005834 <_dtoa_r+0x6c4>
 800574c:	4652      	mov	r2, sl
 800574e:	465b      	mov	r3, fp
 8005750:	4913      	ldr	r1, [pc, #76]	; (80057a0 <_dtoa_r+0x630>)
 8005752:	2000      	movs	r0, #0
 8005754:	f7fa fdc0 	bl	80002d8 <__aeabi_dsub>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4640      	mov	r0, r8
 800575e:	4649      	mov	r1, r9
 8005760:	f7fb f9e4 	bl	8000b2c <__aeabi_dcmplt>
 8005764:	2800      	cmp	r0, #0
 8005766:	f43f af35 	beq.w	80055d4 <_dtoa_r+0x464>
 800576a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800576c:	1e6b      	subs	r3, r5, #1
 800576e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d0f8      	beq.n	800576a <_dtoa_r+0x5fa>
 8005778:	9700      	str	r7, [sp, #0]
 800577a:	e049      	b.n	8005810 <_dtoa_r+0x6a0>
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <_dtoa_r+0x624>)
 800577e:	f7fa ff63 	bl	8000648 <__aeabi_dmul>
 8005782:	4680      	mov	r8, r0
 8005784:	4689      	mov	r9, r1
 8005786:	e7bd      	b.n	8005704 <_dtoa_r+0x594>
 8005788:	080146d8 	.word	0x080146d8
 800578c:	080146b0 	.word	0x080146b0
 8005790:	3ff00000 	.word	0x3ff00000
 8005794:	40240000 	.word	0x40240000
 8005798:	401c0000 	.word	0x401c0000
 800579c:	40140000 	.word	0x40140000
 80057a0:	3fe00000 	.word	0x3fe00000
 80057a4:	9d01      	ldr	r5, [sp, #4]
 80057a6:	4656      	mov	r6, sl
 80057a8:	465f      	mov	r7, fp
 80057aa:	4642      	mov	r2, r8
 80057ac:	464b      	mov	r3, r9
 80057ae:	4630      	mov	r0, r6
 80057b0:	4639      	mov	r1, r7
 80057b2:	f7fb f873 	bl	800089c <__aeabi_ddiv>
 80057b6:	f7fb f9f7 	bl	8000ba8 <__aeabi_d2iz>
 80057ba:	4682      	mov	sl, r0
 80057bc:	f7fa feda 	bl	8000574 <__aeabi_i2d>
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	f7fa ff40 	bl	8000648 <__aeabi_dmul>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4630      	mov	r0, r6
 80057ce:	4639      	mov	r1, r7
 80057d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80057d4:	f7fa fd80 	bl	80002d8 <__aeabi_dsub>
 80057d8:	f805 6b01 	strb.w	r6, [r5], #1
 80057dc:	9e01      	ldr	r6, [sp, #4]
 80057de:	9f03      	ldr	r7, [sp, #12]
 80057e0:	1bae      	subs	r6, r5, r6
 80057e2:	42b7      	cmp	r7, r6
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	d135      	bne.n	8005856 <_dtoa_r+0x6e6>
 80057ea:	f7fa fd77 	bl	80002dc <__adddf3>
 80057ee:	4642      	mov	r2, r8
 80057f0:	464b      	mov	r3, r9
 80057f2:	4606      	mov	r6, r0
 80057f4:	460f      	mov	r7, r1
 80057f6:	f7fb f9b7 	bl	8000b68 <__aeabi_dcmpgt>
 80057fa:	b9d0      	cbnz	r0, 8005832 <_dtoa_r+0x6c2>
 80057fc:	4642      	mov	r2, r8
 80057fe:	464b      	mov	r3, r9
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f7fb f988 	bl	8000b18 <__aeabi_dcmpeq>
 8005808:	b110      	cbz	r0, 8005810 <_dtoa_r+0x6a0>
 800580a:	f01a 0f01 	tst.w	sl, #1
 800580e:	d110      	bne.n	8005832 <_dtoa_r+0x6c2>
 8005810:	4620      	mov	r0, r4
 8005812:	ee18 1a10 	vmov	r1, s16
 8005816:	f001 f8a5 	bl	8006964 <_Bfree>
 800581a:	2300      	movs	r3, #0
 800581c:	9800      	ldr	r0, [sp, #0]
 800581e:	702b      	strb	r3, [r5, #0]
 8005820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005822:	3001      	adds	r0, #1
 8005824:	6018      	str	r0, [r3, #0]
 8005826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005828:	2b00      	cmp	r3, #0
 800582a:	f43f acf1 	beq.w	8005210 <_dtoa_r+0xa0>
 800582e:	601d      	str	r5, [r3, #0]
 8005830:	e4ee      	b.n	8005210 <_dtoa_r+0xa0>
 8005832:	9f00      	ldr	r7, [sp, #0]
 8005834:	462b      	mov	r3, r5
 8005836:	461d      	mov	r5, r3
 8005838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800583c:	2a39      	cmp	r2, #57	; 0x39
 800583e:	d106      	bne.n	800584e <_dtoa_r+0x6de>
 8005840:	9a01      	ldr	r2, [sp, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d1f7      	bne.n	8005836 <_dtoa_r+0x6c6>
 8005846:	9901      	ldr	r1, [sp, #4]
 8005848:	2230      	movs	r2, #48	; 0x30
 800584a:	3701      	adds	r7, #1
 800584c:	700a      	strb	r2, [r1, #0]
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	3201      	adds	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e790      	b.n	8005778 <_dtoa_r+0x608>
 8005856:	4ba6      	ldr	r3, [pc, #664]	; (8005af0 <_dtoa_r+0x980>)
 8005858:	2200      	movs	r2, #0
 800585a:	f7fa fef5 	bl	8000648 <__aeabi_dmul>
 800585e:	2200      	movs	r2, #0
 8005860:	2300      	movs	r3, #0
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	f7fb f957 	bl	8000b18 <__aeabi_dcmpeq>
 800586a:	2800      	cmp	r0, #0
 800586c:	d09d      	beq.n	80057aa <_dtoa_r+0x63a>
 800586e:	e7cf      	b.n	8005810 <_dtoa_r+0x6a0>
 8005870:	9a08      	ldr	r2, [sp, #32]
 8005872:	2a00      	cmp	r2, #0
 8005874:	f000 80d7 	beq.w	8005a26 <_dtoa_r+0x8b6>
 8005878:	9a06      	ldr	r2, [sp, #24]
 800587a:	2a01      	cmp	r2, #1
 800587c:	f300 80ba 	bgt.w	80059f4 <_dtoa_r+0x884>
 8005880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005882:	2a00      	cmp	r2, #0
 8005884:	f000 80b2 	beq.w	80059ec <_dtoa_r+0x87c>
 8005888:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800588c:	9e07      	ldr	r6, [sp, #28]
 800588e:	9d04      	ldr	r5, [sp, #16]
 8005890:	9a04      	ldr	r2, [sp, #16]
 8005892:	441a      	add	r2, r3
 8005894:	9204      	str	r2, [sp, #16]
 8005896:	9a05      	ldr	r2, [sp, #20]
 8005898:	2101      	movs	r1, #1
 800589a:	441a      	add	r2, r3
 800589c:	4620      	mov	r0, r4
 800589e:	9205      	str	r2, [sp, #20]
 80058a0:	f001 f962 	bl	8006b68 <__i2b>
 80058a4:	4607      	mov	r7, r0
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	dd0c      	ble.n	80058c4 <_dtoa_r+0x754>
 80058aa:	9b05      	ldr	r3, [sp, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dd09      	ble.n	80058c4 <_dtoa_r+0x754>
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	9a04      	ldr	r2, [sp, #16]
 80058b4:	bfa8      	it	ge
 80058b6:	462b      	movge	r3, r5
 80058b8:	1ad2      	subs	r2, r2, r3
 80058ba:	9204      	str	r2, [sp, #16]
 80058bc:	9a05      	ldr	r2, [sp, #20]
 80058be:	1aed      	subs	r5, r5, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	9305      	str	r3, [sp, #20]
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	b31b      	cbz	r3, 8005910 <_dtoa_r+0x7a0>
 80058c8:	9b08      	ldr	r3, [sp, #32]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80af 	beq.w	8005a2e <_dtoa_r+0x8be>
 80058d0:	2e00      	cmp	r6, #0
 80058d2:	dd13      	ble.n	80058fc <_dtoa_r+0x78c>
 80058d4:	4639      	mov	r1, r7
 80058d6:	4632      	mov	r2, r6
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 fa05 	bl	8006ce8 <__pow5mult>
 80058de:	ee18 2a10 	vmov	r2, s16
 80058e2:	4601      	mov	r1, r0
 80058e4:	4607      	mov	r7, r0
 80058e6:	4620      	mov	r0, r4
 80058e8:	f001 f954 	bl	8006b94 <__multiply>
 80058ec:	ee18 1a10 	vmov	r1, s16
 80058f0:	4680      	mov	r8, r0
 80058f2:	4620      	mov	r0, r4
 80058f4:	f001 f836 	bl	8006964 <_Bfree>
 80058f8:	ee08 8a10 	vmov	s16, r8
 80058fc:	9b07      	ldr	r3, [sp, #28]
 80058fe:	1b9a      	subs	r2, r3, r6
 8005900:	d006      	beq.n	8005910 <_dtoa_r+0x7a0>
 8005902:	ee18 1a10 	vmov	r1, s16
 8005906:	4620      	mov	r0, r4
 8005908:	f001 f9ee 	bl	8006ce8 <__pow5mult>
 800590c:	ee08 0a10 	vmov	s16, r0
 8005910:	2101      	movs	r1, #1
 8005912:	4620      	mov	r0, r4
 8005914:	f001 f928 	bl	8006b68 <__i2b>
 8005918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	4606      	mov	r6, r0
 800591e:	f340 8088 	ble.w	8005a32 <_dtoa_r+0x8c2>
 8005922:	461a      	mov	r2, r3
 8005924:	4601      	mov	r1, r0
 8005926:	4620      	mov	r0, r4
 8005928:	f001 f9de 	bl	8006ce8 <__pow5mult>
 800592c:	9b06      	ldr	r3, [sp, #24]
 800592e:	2b01      	cmp	r3, #1
 8005930:	4606      	mov	r6, r0
 8005932:	f340 8081 	ble.w	8005a38 <_dtoa_r+0x8c8>
 8005936:	f04f 0800 	mov.w	r8, #0
 800593a:	6933      	ldr	r3, [r6, #16]
 800593c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005940:	6918      	ldr	r0, [r3, #16]
 8005942:	f001 f8c1 	bl	8006ac8 <__hi0bits>
 8005946:	f1c0 0020 	rsb	r0, r0, #32
 800594a:	9b05      	ldr	r3, [sp, #20]
 800594c:	4418      	add	r0, r3
 800594e:	f010 001f 	ands.w	r0, r0, #31
 8005952:	f000 8092 	beq.w	8005a7a <_dtoa_r+0x90a>
 8005956:	f1c0 0320 	rsb	r3, r0, #32
 800595a:	2b04      	cmp	r3, #4
 800595c:	f340 808a 	ble.w	8005a74 <_dtoa_r+0x904>
 8005960:	f1c0 001c 	rsb	r0, r0, #28
 8005964:	9b04      	ldr	r3, [sp, #16]
 8005966:	4403      	add	r3, r0
 8005968:	9304      	str	r3, [sp, #16]
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	4403      	add	r3, r0
 800596e:	4405      	add	r5, r0
 8005970:	9305      	str	r3, [sp, #20]
 8005972:	9b04      	ldr	r3, [sp, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dd07      	ble.n	8005988 <_dtoa_r+0x818>
 8005978:	ee18 1a10 	vmov	r1, s16
 800597c:	461a      	mov	r2, r3
 800597e:	4620      	mov	r0, r4
 8005980:	f001 fa0c 	bl	8006d9c <__lshift>
 8005984:	ee08 0a10 	vmov	s16, r0
 8005988:	9b05      	ldr	r3, [sp, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dd05      	ble.n	800599a <_dtoa_r+0x82a>
 800598e:	4631      	mov	r1, r6
 8005990:	461a      	mov	r2, r3
 8005992:	4620      	mov	r0, r4
 8005994:	f001 fa02 	bl	8006d9c <__lshift>
 8005998:	4606      	mov	r6, r0
 800599a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d06e      	beq.n	8005a7e <_dtoa_r+0x90e>
 80059a0:	ee18 0a10 	vmov	r0, s16
 80059a4:	4631      	mov	r1, r6
 80059a6:	f001 fa69 	bl	8006e7c <__mcmp>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	da67      	bge.n	8005a7e <_dtoa_r+0x90e>
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	ee18 1a10 	vmov	r1, s16
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	220a      	movs	r2, #10
 80059ba:	2300      	movs	r3, #0
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fff3 	bl	80069a8 <__multadd>
 80059c2:	9b08      	ldr	r3, [sp, #32]
 80059c4:	ee08 0a10 	vmov	s16, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 81b1 	beq.w	8005d30 <_dtoa_r+0xbc0>
 80059ce:	2300      	movs	r3, #0
 80059d0:	4639      	mov	r1, r7
 80059d2:	220a      	movs	r2, #10
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 ffe7 	bl	80069a8 <__multadd>
 80059da:	9b02      	ldr	r3, [sp, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	4607      	mov	r7, r0
 80059e0:	f300 808e 	bgt.w	8005b00 <_dtoa_r+0x990>
 80059e4:	9b06      	ldr	r3, [sp, #24]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	dc51      	bgt.n	8005a8e <_dtoa_r+0x91e>
 80059ea:	e089      	b.n	8005b00 <_dtoa_r+0x990>
 80059ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059f2:	e74b      	b.n	800588c <_dtoa_r+0x71c>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	1e5e      	subs	r6, r3, #1
 80059f8:	9b07      	ldr	r3, [sp, #28]
 80059fa:	42b3      	cmp	r3, r6
 80059fc:	bfbf      	itttt	lt
 80059fe:	9b07      	ldrlt	r3, [sp, #28]
 8005a00:	9607      	strlt	r6, [sp, #28]
 8005a02:	1af2      	sublt	r2, r6, r3
 8005a04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a06:	bfb6      	itet	lt
 8005a08:	189b      	addlt	r3, r3, r2
 8005a0a:	1b9e      	subge	r6, r3, r6
 8005a0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	bfb8      	it	lt
 8005a12:	2600      	movlt	r6, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfb7      	itett	lt
 8005a18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005a1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005a20:	1a9d      	sublt	r5, r3, r2
 8005a22:	2300      	movlt	r3, #0
 8005a24:	e734      	b.n	8005890 <_dtoa_r+0x720>
 8005a26:	9e07      	ldr	r6, [sp, #28]
 8005a28:	9d04      	ldr	r5, [sp, #16]
 8005a2a:	9f08      	ldr	r7, [sp, #32]
 8005a2c:	e73b      	b.n	80058a6 <_dtoa_r+0x736>
 8005a2e:	9a07      	ldr	r2, [sp, #28]
 8005a30:	e767      	b.n	8005902 <_dtoa_r+0x792>
 8005a32:	9b06      	ldr	r3, [sp, #24]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	dc18      	bgt.n	8005a6a <_dtoa_r+0x8fa>
 8005a38:	f1ba 0f00 	cmp.w	sl, #0
 8005a3c:	d115      	bne.n	8005a6a <_dtoa_r+0x8fa>
 8005a3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a42:	b993      	cbnz	r3, 8005a6a <_dtoa_r+0x8fa>
 8005a44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a48:	0d1b      	lsrs	r3, r3, #20
 8005a4a:	051b      	lsls	r3, r3, #20
 8005a4c:	b183      	cbz	r3, 8005a70 <_dtoa_r+0x900>
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	9b05      	ldr	r3, [sp, #20]
 8005a56:	3301      	adds	r3, #1
 8005a58:	9305      	str	r3, [sp, #20]
 8005a5a:	f04f 0801 	mov.w	r8, #1
 8005a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af6a 	bne.w	800593a <_dtoa_r+0x7ca>
 8005a66:	2001      	movs	r0, #1
 8005a68:	e76f      	b.n	800594a <_dtoa_r+0x7da>
 8005a6a:	f04f 0800 	mov.w	r8, #0
 8005a6e:	e7f6      	b.n	8005a5e <_dtoa_r+0x8ee>
 8005a70:	4698      	mov	r8, r3
 8005a72:	e7f4      	b.n	8005a5e <_dtoa_r+0x8ee>
 8005a74:	f43f af7d 	beq.w	8005972 <_dtoa_r+0x802>
 8005a78:	4618      	mov	r0, r3
 8005a7a:	301c      	adds	r0, #28
 8005a7c:	e772      	b.n	8005964 <_dtoa_r+0x7f4>
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc37      	bgt.n	8005af4 <_dtoa_r+0x984>
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	dd34      	ble.n	8005af4 <_dtoa_r+0x984>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	9302      	str	r3, [sp, #8]
 8005a8e:	9b02      	ldr	r3, [sp, #8]
 8005a90:	b96b      	cbnz	r3, 8005aae <_dtoa_r+0x93e>
 8005a92:	4631      	mov	r1, r6
 8005a94:	2205      	movs	r2, #5
 8005a96:	4620      	mov	r0, r4
 8005a98:	f000 ff86 	bl	80069a8 <__multadd>
 8005a9c:	4601      	mov	r1, r0
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	ee18 0a10 	vmov	r0, s16
 8005aa4:	f001 f9ea 	bl	8006e7c <__mcmp>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f73f adbb 	bgt.w	8005624 <_dtoa_r+0x4b4>
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	9d01      	ldr	r5, [sp, #4]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	4631      	mov	r1, r6
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 ff51 	bl	8006964 <_Bfree>
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	f43f aea4 	beq.w	8005810 <_dtoa_r+0x6a0>
 8005ac8:	f1b8 0f00 	cmp.w	r8, #0
 8005acc:	d005      	beq.n	8005ada <_dtoa_r+0x96a>
 8005ace:	45b8      	cmp	r8, r7
 8005ad0:	d003      	beq.n	8005ada <_dtoa_r+0x96a>
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 ff45 	bl	8006964 <_Bfree>
 8005ada:	4639      	mov	r1, r7
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 ff41 	bl	8006964 <_Bfree>
 8005ae2:	e695      	b.n	8005810 <_dtoa_r+0x6a0>
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	4637      	mov	r7, r6
 8005ae8:	e7e1      	b.n	8005aae <_dtoa_r+0x93e>
 8005aea:	9700      	str	r7, [sp, #0]
 8005aec:	4637      	mov	r7, r6
 8005aee:	e599      	b.n	8005624 <_dtoa_r+0x4b4>
 8005af0:	40240000 	.word	0x40240000
 8005af4:	9b08      	ldr	r3, [sp, #32]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 80ca 	beq.w	8005c90 <_dtoa_r+0xb20>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	dd05      	ble.n	8005b10 <_dtoa_r+0x9a0>
 8005b04:	4639      	mov	r1, r7
 8005b06:	462a      	mov	r2, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f001 f947 	bl	8006d9c <__lshift>
 8005b0e:	4607      	mov	r7, r0
 8005b10:	f1b8 0f00 	cmp.w	r8, #0
 8005b14:	d05b      	beq.n	8005bce <_dtoa_r+0xa5e>
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fee3 	bl	80068e4 <_Balloc>
 8005b1e:	4605      	mov	r5, r0
 8005b20:	b928      	cbnz	r0, 8005b2e <_dtoa_r+0x9be>
 8005b22:	4b87      	ldr	r3, [pc, #540]	; (8005d40 <_dtoa_r+0xbd0>)
 8005b24:	4602      	mov	r2, r0
 8005b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b2a:	f7ff bb3b 	b.w	80051a4 <_dtoa_r+0x34>
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	3202      	adds	r2, #2
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	f107 010c 	add.w	r1, r7, #12
 8005b38:	300c      	adds	r0, #12
 8005b3a:	f000 fec5 	bl	80068c8 <memcpy>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4629      	mov	r1, r5
 8005b42:	4620      	mov	r0, r4
 8005b44:	f001 f92a 	bl	8006d9c <__lshift>
 8005b48:	9b01      	ldr	r3, [sp, #4]
 8005b4a:	f103 0901 	add.w	r9, r3, #1
 8005b4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b52:	4413      	add	r3, r2
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	f00a 0301 	and.w	r3, sl, #1
 8005b5a:	46b8      	mov	r8, r7
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	4607      	mov	r7, r0
 8005b60:	4631      	mov	r1, r6
 8005b62:	ee18 0a10 	vmov	r0, s16
 8005b66:	f7ff fa77 	bl	8005058 <quorem>
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	9002      	str	r0, [sp, #8]
 8005b6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b72:	ee18 0a10 	vmov	r0, s16
 8005b76:	f001 f981 	bl	8006e7c <__mcmp>
 8005b7a:	463a      	mov	r2, r7
 8005b7c:	9003      	str	r0, [sp, #12]
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4620      	mov	r0, r4
 8005b82:	f001 f997 	bl	8006eb4 <__mdiff>
 8005b86:	68c2      	ldr	r2, [r0, #12]
 8005b88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	bb02      	cbnz	r2, 8005bd2 <_dtoa_r+0xa62>
 8005b90:	4601      	mov	r1, r0
 8005b92:	ee18 0a10 	vmov	r0, s16
 8005b96:	f001 f971 	bl	8006e7c <__mcmp>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	9207      	str	r2, [sp, #28]
 8005ba2:	f000 fedf 	bl	8006964 <_Bfree>
 8005ba6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005baa:	ea43 0102 	orr.w	r1, r3, r2
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	464d      	mov	r5, r9
 8005bb4:	d10f      	bne.n	8005bd6 <_dtoa_r+0xa66>
 8005bb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005bba:	d02a      	beq.n	8005c12 <_dtoa_r+0xaa2>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	dd02      	ble.n	8005bc8 <_dtoa_r+0xa58>
 8005bc2:	9b02      	ldr	r3, [sp, #8]
 8005bc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005bc8:	f88b a000 	strb.w	sl, [fp]
 8005bcc:	e775      	b.n	8005aba <_dtoa_r+0x94a>
 8005bce:	4638      	mov	r0, r7
 8005bd0:	e7ba      	b.n	8005b48 <_dtoa_r+0x9d8>
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	e7e2      	b.n	8005b9c <_dtoa_r+0xa2c>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	db04      	blt.n	8005be6 <_dtoa_r+0xa76>
 8005bdc:	9906      	ldr	r1, [sp, #24]
 8005bde:	430b      	orrs	r3, r1
 8005be0:	9904      	ldr	r1, [sp, #16]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	d122      	bne.n	8005c2c <_dtoa_r+0xabc>
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	ddee      	ble.n	8005bc8 <_dtoa_r+0xa58>
 8005bea:	ee18 1a10 	vmov	r1, s16
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f001 f8d3 	bl	8006d9c <__lshift>
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	ee08 0a10 	vmov	s16, r0
 8005bfc:	f001 f93e 	bl	8006e7c <__mcmp>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	dc03      	bgt.n	8005c0c <_dtoa_r+0xa9c>
 8005c04:	d1e0      	bne.n	8005bc8 <_dtoa_r+0xa58>
 8005c06:	f01a 0f01 	tst.w	sl, #1
 8005c0a:	d0dd      	beq.n	8005bc8 <_dtoa_r+0xa58>
 8005c0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c10:	d1d7      	bne.n	8005bc2 <_dtoa_r+0xa52>
 8005c12:	2339      	movs	r3, #57	; 0x39
 8005c14:	f88b 3000 	strb.w	r3, [fp]
 8005c18:	462b      	mov	r3, r5
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c22:	2a39      	cmp	r2, #57	; 0x39
 8005c24:	d071      	beq.n	8005d0a <_dtoa_r+0xb9a>
 8005c26:	3201      	adds	r2, #1
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e746      	b.n	8005aba <_dtoa_r+0x94a>
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	dd07      	ble.n	8005c40 <_dtoa_r+0xad0>
 8005c30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c34:	d0ed      	beq.n	8005c12 <_dtoa_r+0xaa2>
 8005c36:	f10a 0301 	add.w	r3, sl, #1
 8005c3a:	f88b 3000 	strb.w	r3, [fp]
 8005c3e:	e73c      	b.n	8005aba <_dtoa_r+0x94a>
 8005c40:	9b05      	ldr	r3, [sp, #20]
 8005c42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c46:	4599      	cmp	r9, r3
 8005c48:	d047      	beq.n	8005cda <_dtoa_r+0xb6a>
 8005c4a:	ee18 1a10 	vmov	r1, s16
 8005c4e:	2300      	movs	r3, #0
 8005c50:	220a      	movs	r2, #10
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fea8 	bl	80069a8 <__multadd>
 8005c58:	45b8      	cmp	r8, r7
 8005c5a:	ee08 0a10 	vmov	s16, r0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	f04f 020a 	mov.w	r2, #10
 8005c66:	4641      	mov	r1, r8
 8005c68:	4620      	mov	r0, r4
 8005c6a:	d106      	bne.n	8005c7a <_dtoa_r+0xb0a>
 8005c6c:	f000 fe9c 	bl	80069a8 <__multadd>
 8005c70:	4680      	mov	r8, r0
 8005c72:	4607      	mov	r7, r0
 8005c74:	f109 0901 	add.w	r9, r9, #1
 8005c78:	e772      	b.n	8005b60 <_dtoa_r+0x9f0>
 8005c7a:	f000 fe95 	bl	80069a8 <__multadd>
 8005c7e:	4639      	mov	r1, r7
 8005c80:	4680      	mov	r8, r0
 8005c82:	2300      	movs	r3, #0
 8005c84:	220a      	movs	r2, #10
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 fe8e 	bl	80069a8 <__multadd>
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	e7f1      	b.n	8005c74 <_dtoa_r+0xb04>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	9d01      	ldr	r5, [sp, #4]
 8005c96:	ee18 0a10 	vmov	r0, s16
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	f7ff f9dc 	bl	8005058 <quorem>
 8005ca0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	f805 ab01 	strb.w	sl, [r5], #1
 8005caa:	1aea      	subs	r2, r5, r3
 8005cac:	9b02      	ldr	r3, [sp, #8]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	dd09      	ble.n	8005cc6 <_dtoa_r+0xb56>
 8005cb2:	ee18 1a10 	vmov	r1, s16
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fe74 	bl	80069a8 <__multadd>
 8005cc0:	ee08 0a10 	vmov	s16, r0
 8005cc4:	e7e7      	b.n	8005c96 <_dtoa_r+0xb26>
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfc8      	it	gt
 8005ccc:	461d      	movgt	r5, r3
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	bfd8      	it	le
 8005cd2:	2501      	movle	r5, #1
 8005cd4:	441d      	add	r5, r3
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	ee18 1a10 	vmov	r1, s16
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f001 f85b 	bl	8006d9c <__lshift>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	ee08 0a10 	vmov	s16, r0
 8005cec:	f001 f8c6 	bl	8006e7c <__mcmp>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	dc91      	bgt.n	8005c18 <_dtoa_r+0xaa8>
 8005cf4:	d102      	bne.n	8005cfc <_dtoa_r+0xb8c>
 8005cf6:	f01a 0f01 	tst.w	sl, #1
 8005cfa:	d18d      	bne.n	8005c18 <_dtoa_r+0xaa8>
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	461d      	mov	r5, r3
 8005d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d04:	2a30      	cmp	r2, #48	; 0x30
 8005d06:	d0fa      	beq.n	8005cfe <_dtoa_r+0xb8e>
 8005d08:	e6d7      	b.n	8005aba <_dtoa_r+0x94a>
 8005d0a:	9a01      	ldr	r2, [sp, #4]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d184      	bne.n	8005c1a <_dtoa_r+0xaaa>
 8005d10:	9b00      	ldr	r3, [sp, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	2331      	movs	r3, #49	; 0x31
 8005d18:	7013      	strb	r3, [r2, #0]
 8005d1a:	e6ce      	b.n	8005aba <_dtoa_r+0x94a>
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <_dtoa_r+0xbd4>)
 8005d1e:	f7ff ba95 	b.w	800524c <_dtoa_r+0xdc>
 8005d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f47f aa6e 	bne.w	8005206 <_dtoa_r+0x96>
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <_dtoa_r+0xbd8>)
 8005d2c:	f7ff ba8e 	b.w	800524c <_dtoa_r+0xdc>
 8005d30:	9b02      	ldr	r3, [sp, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dcae      	bgt.n	8005c94 <_dtoa_r+0xb24>
 8005d36:	9b06      	ldr	r3, [sp, #24]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	f73f aea8 	bgt.w	8005a8e <_dtoa_r+0x91e>
 8005d3e:	e7a9      	b.n	8005c94 <_dtoa_r+0xb24>
 8005d40:	08014524 	.word	0x08014524
 8005d44:	0800a3e6 	.word	0x0800a3e6
 8005d48:	0801449a 	.word	0x0801449a

08005d4c <__sflush_r>:
 8005d4c:	898a      	ldrh	r2, [r1, #12]
 8005d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	4605      	mov	r5, r0
 8005d54:	0710      	lsls	r0, r2, #28
 8005d56:	460c      	mov	r4, r1
 8005d58:	d458      	bmi.n	8005e0c <__sflush_r+0xc0>
 8005d5a:	684b      	ldr	r3, [r1, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	dc05      	bgt.n	8005d6c <__sflush_r+0x20>
 8005d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dc02      	bgt.n	8005d6c <__sflush_r+0x20>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	d0f9      	beq.n	8005d66 <__sflush_r+0x1a>
 8005d72:	2300      	movs	r3, #0
 8005d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d78:	682f      	ldr	r7, [r5, #0]
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	d032      	beq.n	8005de4 <__sflush_r+0x98>
 8005d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	075a      	lsls	r2, r3, #29
 8005d84:	d505      	bpl.n	8005d92 <__sflush_r+0x46>
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	1ac0      	subs	r0, r0, r3
 8005d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d8c:	b10b      	cbz	r3, 8005d92 <__sflush_r+0x46>
 8005d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d90:	1ac0      	subs	r0, r0, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	4602      	mov	r2, r0
 8005d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d98:	6a21      	ldr	r1, [r4, #32]
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b0      	blx	r6
 8005d9e:	1c43      	adds	r3, r0, #1
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	d106      	bne.n	8005db2 <__sflush_r+0x66>
 8005da4:	6829      	ldr	r1, [r5, #0]
 8005da6:	291d      	cmp	r1, #29
 8005da8:	d82c      	bhi.n	8005e04 <__sflush_r+0xb8>
 8005daa:	4a2a      	ldr	r2, [pc, #168]	; (8005e54 <__sflush_r+0x108>)
 8005dac:	40ca      	lsrs	r2, r1
 8005dae:	07d6      	lsls	r6, r2, #31
 8005db0:	d528      	bpl.n	8005e04 <__sflush_r+0xb8>
 8005db2:	2200      	movs	r2, #0
 8005db4:	6062      	str	r2, [r4, #4]
 8005db6:	04d9      	lsls	r1, r3, #19
 8005db8:	6922      	ldr	r2, [r4, #16]
 8005dba:	6022      	str	r2, [r4, #0]
 8005dbc:	d504      	bpl.n	8005dc8 <__sflush_r+0x7c>
 8005dbe:	1c42      	adds	r2, r0, #1
 8005dc0:	d101      	bne.n	8005dc6 <__sflush_r+0x7a>
 8005dc2:	682b      	ldr	r3, [r5, #0]
 8005dc4:	b903      	cbnz	r3, 8005dc8 <__sflush_r+0x7c>
 8005dc6:	6560      	str	r0, [r4, #84]	; 0x54
 8005dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dca:	602f      	str	r7, [r5, #0]
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d0ca      	beq.n	8005d66 <__sflush_r+0x1a>
 8005dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	d002      	beq.n	8005dde <__sflush_r+0x92>
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f001 fa53 	bl	8007284 <_free_r>
 8005dde:	2000      	movs	r0, #0
 8005de0:	6360      	str	r0, [r4, #52]	; 0x34
 8005de2:	e7c1      	b.n	8005d68 <__sflush_r+0x1c>
 8005de4:	6a21      	ldr	r1, [r4, #32]
 8005de6:	2301      	movs	r3, #1
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b0      	blx	r6
 8005dec:	1c41      	adds	r1, r0, #1
 8005dee:	d1c7      	bne.n	8005d80 <__sflush_r+0x34>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0c4      	beq.n	8005d80 <__sflush_r+0x34>
 8005df6:	2b1d      	cmp	r3, #29
 8005df8:	d001      	beq.n	8005dfe <__sflush_r+0xb2>
 8005dfa:	2b16      	cmp	r3, #22
 8005dfc:	d101      	bne.n	8005e02 <__sflush_r+0xb6>
 8005dfe:	602f      	str	r7, [r5, #0]
 8005e00:	e7b1      	b.n	8005d66 <__sflush_r+0x1a>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	e7ad      	b.n	8005d68 <__sflush_r+0x1c>
 8005e0c:	690f      	ldr	r7, [r1, #16]
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	d0a9      	beq.n	8005d66 <__sflush_r+0x1a>
 8005e12:	0793      	lsls	r3, r2, #30
 8005e14:	680e      	ldr	r6, [r1, #0]
 8005e16:	bf08      	it	eq
 8005e18:	694b      	ldreq	r3, [r1, #20]
 8005e1a:	600f      	str	r7, [r1, #0]
 8005e1c:	bf18      	it	ne
 8005e1e:	2300      	movne	r3, #0
 8005e20:	eba6 0807 	sub.w	r8, r6, r7
 8005e24:	608b      	str	r3, [r1, #8]
 8005e26:	f1b8 0f00 	cmp.w	r8, #0
 8005e2a:	dd9c      	ble.n	8005d66 <__sflush_r+0x1a>
 8005e2c:	6a21      	ldr	r1, [r4, #32]
 8005e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e30:	4643      	mov	r3, r8
 8005e32:	463a      	mov	r2, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b0      	blx	r6
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	dc06      	bgt.n	8005e4a <__sflush_r+0xfe>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e48:	e78e      	b.n	8005d68 <__sflush_r+0x1c>
 8005e4a:	4407      	add	r7, r0
 8005e4c:	eba8 0800 	sub.w	r8, r8, r0
 8005e50:	e7e9      	b.n	8005e26 <__sflush_r+0xda>
 8005e52:	bf00      	nop
 8005e54:	20400001 	.word	0x20400001

08005e58 <_fflush_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	690b      	ldr	r3, [r1, #16]
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	b913      	cbnz	r3, 8005e68 <_fflush_r+0x10>
 8005e62:	2500      	movs	r5, #0
 8005e64:	4628      	mov	r0, r5
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	b118      	cbz	r0, 8005e72 <_fflush_r+0x1a>
 8005e6a:	6983      	ldr	r3, [r0, #24]
 8005e6c:	b90b      	cbnz	r3, 8005e72 <_fflush_r+0x1a>
 8005e6e:	f000 f887 	bl	8005f80 <__sinit>
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <_fflush_r+0x6c>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d11b      	bne.n	8005eb0 <_fflush_r+0x58>
 8005e78:	686c      	ldr	r4, [r5, #4]
 8005e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ef      	beq.n	8005e62 <_fflush_r+0xa>
 8005e82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e84:	07d0      	lsls	r0, r2, #31
 8005e86:	d404      	bmi.n	8005e92 <_fflush_r+0x3a>
 8005e88:	0599      	lsls	r1, r3, #22
 8005e8a:	d402      	bmi.n	8005e92 <_fflush_r+0x3a>
 8005e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e8e:	f000 fc9a 	bl	80067c6 <__retarget_lock_acquire_recursive>
 8005e92:	4628      	mov	r0, r5
 8005e94:	4621      	mov	r1, r4
 8005e96:	f7ff ff59 	bl	8005d4c <__sflush_r>
 8005e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e9c:	07da      	lsls	r2, r3, #31
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	d4e0      	bmi.n	8005e64 <_fflush_r+0xc>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	059b      	lsls	r3, r3, #22
 8005ea6:	d4dd      	bmi.n	8005e64 <_fflush_r+0xc>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eaa:	f000 fc8d 	bl	80067c8 <__retarget_lock_release_recursive>
 8005eae:	e7d9      	b.n	8005e64 <_fflush_r+0xc>
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <_fflush_r+0x70>)
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	d101      	bne.n	8005eba <_fflush_r+0x62>
 8005eb6:	68ac      	ldr	r4, [r5, #8]
 8005eb8:	e7df      	b.n	8005e7a <_fflush_r+0x22>
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <_fflush_r+0x74>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	bf08      	it	eq
 8005ec0:	68ec      	ldreq	r4, [r5, #12]
 8005ec2:	e7da      	b.n	8005e7a <_fflush_r+0x22>
 8005ec4:	08014558 	.word	0x08014558
 8005ec8:	08014578 	.word	0x08014578
 8005ecc:	08014538 	.word	0x08014538

08005ed0 <std>:
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ede:	6083      	str	r3, [r0, #8]
 8005ee0:	8181      	strh	r1, [r0, #12]
 8005ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ee4:	81c2      	strh	r2, [r0, #14]
 8005ee6:	6183      	str	r3, [r0, #24]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2208      	movs	r2, #8
 8005eec:	305c      	adds	r0, #92	; 0x5c
 8005eee:	f7fd fc55 	bl	800379c <memset>
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <std+0x38>)
 8005ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <std+0x3c>)
 8005ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x40>)
 8005efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <std+0x44>)
 8005f00:	6224      	str	r4, [r4, #32]
 8005f02:	6323      	str	r3, [r4, #48]	; 0x30
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	08007699 	.word	0x08007699
 8005f0c:	080076bb 	.word	0x080076bb
 8005f10:	080076f3 	.word	0x080076f3
 8005f14:	08007717 	.word	0x08007717

08005f18 <_cleanup_r>:
 8005f18:	4901      	ldr	r1, [pc, #4]	; (8005f20 <_cleanup_r+0x8>)
 8005f1a:	f000 b8c1 	b.w	80060a0 <_fwalk_reent>
 8005f1e:	bf00      	nop
 8005f20:	08005e59 	.word	0x08005e59

08005f24 <__sfmoreglue>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	2268      	movs	r2, #104	; 0x68
 8005f28:	1e4d      	subs	r5, r1, #1
 8005f2a:	4355      	muls	r5, r2
 8005f2c:	460e      	mov	r6, r1
 8005f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f32:	f001 f9f3 	bl	800731c <_malloc_r>
 8005f36:	4604      	mov	r4, r0
 8005f38:	b140      	cbz	r0, 8005f4c <__sfmoreglue+0x28>
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f40:	300c      	adds	r0, #12
 8005f42:	60a0      	str	r0, [r4, #8]
 8005f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f48:	f7fd fc28 	bl	800379c <memset>
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}

08005f50 <__sfp_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sfp_lock_acquire+0x8>)
 8005f52:	f000 bc38 	b.w	80067c6 <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	20000ce5 	.word	0x20000ce5

08005f5c <__sfp_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__sfp_lock_release+0x8>)
 8005f5e:	f000 bc33 	b.w	80067c8 <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	20000ce5 	.word	0x20000ce5

08005f68 <__sinit_lock_acquire>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__sinit_lock_acquire+0x8>)
 8005f6a:	f000 bc2c 	b.w	80067c6 <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	20000ce6 	.word	0x20000ce6

08005f74 <__sinit_lock_release>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__sinit_lock_release+0x8>)
 8005f76:	f000 bc27 	b.w	80067c8 <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	20000ce6 	.word	0x20000ce6

08005f80 <__sinit>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	f7ff fff0 	bl	8005f68 <__sinit_lock_acquire>
 8005f88:	69a3      	ldr	r3, [r4, #24]
 8005f8a:	b11b      	cbz	r3, 8005f94 <__sinit+0x14>
 8005f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f90:	f7ff bff0 	b.w	8005f74 <__sinit_lock_release>
 8005f94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f98:	6523      	str	r3, [r4, #80]	; 0x50
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <__sinit+0x68>)
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <__sinit+0x6c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	bf04      	itt	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	61a3      	streq	r3, [r4, #24]
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 f820 	bl	8005ff0 <__sfp>
 8005fb0:	6060      	str	r0, [r4, #4]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f81c 	bl	8005ff0 <__sfp>
 8005fb8:	60a0      	str	r0, [r4, #8]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f818 	bl	8005ff0 <__sfp>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	60e0      	str	r0, [r4, #12]
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	6860      	ldr	r0, [r4, #4]
 8005fc8:	f7ff ff82 	bl	8005ed0 <std>
 8005fcc:	68a0      	ldr	r0, [r4, #8]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	2109      	movs	r1, #9
 8005fd2:	f7ff ff7d 	bl	8005ed0 <std>
 8005fd6:	68e0      	ldr	r0, [r4, #12]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	2112      	movs	r1, #18
 8005fdc:	f7ff ff78 	bl	8005ed0 <std>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	61a3      	str	r3, [r4, #24]
 8005fe4:	e7d2      	b.n	8005f8c <__sinit+0xc>
 8005fe6:	bf00      	nop
 8005fe8:	08014340 	.word	0x08014340
 8005fec:	08005f19 	.word	0x08005f19

08005ff0 <__sfp>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	4607      	mov	r7, r0
 8005ff4:	f7ff ffac 	bl	8005f50 <__sfp_lock_acquire>
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <__sfp+0x84>)
 8005ffa:	681e      	ldr	r6, [r3, #0]
 8005ffc:	69b3      	ldr	r3, [r6, #24]
 8005ffe:	b913      	cbnz	r3, 8006006 <__sfp+0x16>
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff ffbd 	bl	8005f80 <__sinit>
 8006006:	3648      	adds	r6, #72	; 0x48
 8006008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800600c:	3b01      	subs	r3, #1
 800600e:	d503      	bpl.n	8006018 <__sfp+0x28>
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	b30b      	cbz	r3, 8006058 <__sfp+0x68>
 8006014:	6836      	ldr	r6, [r6, #0]
 8006016:	e7f7      	b.n	8006008 <__sfp+0x18>
 8006018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800601c:	b9d5      	cbnz	r5, 8006054 <__sfp+0x64>
 800601e:	4b16      	ldr	r3, [pc, #88]	; (8006078 <__sfp+0x88>)
 8006020:	60e3      	str	r3, [r4, #12]
 8006022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006026:	6665      	str	r5, [r4, #100]	; 0x64
 8006028:	f000 fbcc 	bl	80067c4 <__retarget_lock_init_recursive>
 800602c:	f7ff ff96 	bl	8005f5c <__sfp_lock_release>
 8006030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006038:	6025      	str	r5, [r4, #0]
 800603a:	61a5      	str	r5, [r4, #24]
 800603c:	2208      	movs	r2, #8
 800603e:	4629      	mov	r1, r5
 8006040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006044:	f7fd fbaa 	bl	800379c <memset>
 8006048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800604c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006050:	4620      	mov	r0, r4
 8006052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006054:	3468      	adds	r4, #104	; 0x68
 8006056:	e7d9      	b.n	800600c <__sfp+0x1c>
 8006058:	2104      	movs	r1, #4
 800605a:	4638      	mov	r0, r7
 800605c:	f7ff ff62 	bl	8005f24 <__sfmoreglue>
 8006060:	4604      	mov	r4, r0
 8006062:	6030      	str	r0, [r6, #0]
 8006064:	2800      	cmp	r0, #0
 8006066:	d1d5      	bne.n	8006014 <__sfp+0x24>
 8006068:	f7ff ff78 	bl	8005f5c <__sfp_lock_release>
 800606c:	230c      	movs	r3, #12
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	e7ee      	b.n	8006050 <__sfp+0x60>
 8006072:	bf00      	nop
 8006074:	08014340 	.word	0x08014340
 8006078:	ffff0001 	.word	0xffff0001

0800607c <fiprintf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b503      	push	{r0, r1, lr}
 8006080:	4601      	mov	r1, r0
 8006082:	ab03      	add	r3, sp, #12
 8006084:	4805      	ldr	r0, [pc, #20]	; (800609c <fiprintf+0x20>)
 8006086:	f853 2b04 	ldr.w	r2, [r3], #4
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	f001 f9c9 	bl	8007424 <_vfiprintf_r>
 8006092:	b002      	add	sp, #8
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	2000001c 	.word	0x2000001c

080060a0 <_fwalk_reent>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	4606      	mov	r6, r0
 80060a6:	4688      	mov	r8, r1
 80060a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060ac:	2700      	movs	r7, #0
 80060ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060b2:	f1b9 0901 	subs.w	r9, r9, #1
 80060b6:	d505      	bpl.n	80060c4 <_fwalk_reent+0x24>
 80060b8:	6824      	ldr	r4, [r4, #0]
 80060ba:	2c00      	cmp	r4, #0
 80060bc:	d1f7      	bne.n	80060ae <_fwalk_reent+0xe>
 80060be:	4638      	mov	r0, r7
 80060c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c4:	89ab      	ldrh	r3, [r5, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d907      	bls.n	80060da <_fwalk_reent+0x3a>
 80060ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ce:	3301      	adds	r3, #1
 80060d0:	d003      	beq.n	80060da <_fwalk_reent+0x3a>
 80060d2:	4629      	mov	r1, r5
 80060d4:	4630      	mov	r0, r6
 80060d6:	47c0      	blx	r8
 80060d8:	4307      	orrs	r7, r0
 80060da:	3568      	adds	r5, #104	; 0x68
 80060dc:	e7e9      	b.n	80060b2 <_fwalk_reent+0x12>

080060de <rshift>:
 80060de:	6903      	ldr	r3, [r0, #16]
 80060e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060e8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060ec:	f100 0414 	add.w	r4, r0, #20
 80060f0:	dd45      	ble.n	800617e <rshift+0xa0>
 80060f2:	f011 011f 	ands.w	r1, r1, #31
 80060f6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060fa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060fe:	d10c      	bne.n	800611a <rshift+0x3c>
 8006100:	f100 0710 	add.w	r7, r0, #16
 8006104:	4629      	mov	r1, r5
 8006106:	42b1      	cmp	r1, r6
 8006108:	d334      	bcc.n	8006174 <rshift+0x96>
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	1eea      	subs	r2, r5, #3
 8006110:	4296      	cmp	r6, r2
 8006112:	bf38      	it	cc
 8006114:	2300      	movcc	r3, #0
 8006116:	4423      	add	r3, r4
 8006118:	e015      	b.n	8006146 <rshift+0x68>
 800611a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800611e:	f1c1 0820 	rsb	r8, r1, #32
 8006122:	40cf      	lsrs	r7, r1
 8006124:	f105 0e04 	add.w	lr, r5, #4
 8006128:	46a1      	mov	r9, r4
 800612a:	4576      	cmp	r6, lr
 800612c:	46f4      	mov	ip, lr
 800612e:	d815      	bhi.n	800615c <rshift+0x7e>
 8006130:	1a9a      	subs	r2, r3, r2
 8006132:	0092      	lsls	r2, r2, #2
 8006134:	3a04      	subs	r2, #4
 8006136:	3501      	adds	r5, #1
 8006138:	42ae      	cmp	r6, r5
 800613a:	bf38      	it	cc
 800613c:	2200      	movcc	r2, #0
 800613e:	18a3      	adds	r3, r4, r2
 8006140:	50a7      	str	r7, [r4, r2]
 8006142:	b107      	cbz	r7, 8006146 <rshift+0x68>
 8006144:	3304      	adds	r3, #4
 8006146:	1b1a      	subs	r2, r3, r4
 8006148:	42a3      	cmp	r3, r4
 800614a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800614e:	bf08      	it	eq
 8006150:	2300      	moveq	r3, #0
 8006152:	6102      	str	r2, [r0, #16]
 8006154:	bf08      	it	eq
 8006156:	6143      	streq	r3, [r0, #20]
 8006158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800615c:	f8dc c000 	ldr.w	ip, [ip]
 8006160:	fa0c fc08 	lsl.w	ip, ip, r8
 8006164:	ea4c 0707 	orr.w	r7, ip, r7
 8006168:	f849 7b04 	str.w	r7, [r9], #4
 800616c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006170:	40cf      	lsrs	r7, r1
 8006172:	e7da      	b.n	800612a <rshift+0x4c>
 8006174:	f851 cb04 	ldr.w	ip, [r1], #4
 8006178:	f847 cf04 	str.w	ip, [r7, #4]!
 800617c:	e7c3      	b.n	8006106 <rshift+0x28>
 800617e:	4623      	mov	r3, r4
 8006180:	e7e1      	b.n	8006146 <rshift+0x68>

08006182 <__hexdig_fun>:
 8006182:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006186:	2b09      	cmp	r3, #9
 8006188:	d802      	bhi.n	8006190 <__hexdig_fun+0xe>
 800618a:	3820      	subs	r0, #32
 800618c:	b2c0      	uxtb	r0, r0
 800618e:	4770      	bx	lr
 8006190:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006194:	2b05      	cmp	r3, #5
 8006196:	d801      	bhi.n	800619c <__hexdig_fun+0x1a>
 8006198:	3847      	subs	r0, #71	; 0x47
 800619a:	e7f7      	b.n	800618c <__hexdig_fun+0xa>
 800619c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80061a0:	2b05      	cmp	r3, #5
 80061a2:	d801      	bhi.n	80061a8 <__hexdig_fun+0x26>
 80061a4:	3827      	subs	r0, #39	; 0x27
 80061a6:	e7f1      	b.n	800618c <__hexdig_fun+0xa>
 80061a8:	2000      	movs	r0, #0
 80061aa:	4770      	bx	lr

080061ac <__gethex>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	ed2d 8b02 	vpush	{d8}
 80061b4:	b089      	sub	sp, #36	; 0x24
 80061b6:	ee08 0a10 	vmov	s16, r0
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	4bb4      	ldr	r3, [pc, #720]	; (8006490 <__gethex+0x2e4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	468b      	mov	fp, r1
 80061c6:	4690      	mov	r8, r2
 80061c8:	f7fa f824 	bl	8000214 <strlen>
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	f8db 2000 	ldr.w	r2, [fp]
 80061d2:	4403      	add	r3, r0
 80061d4:	4682      	mov	sl, r0
 80061d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	1c93      	adds	r3, r2, #2
 80061de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80061e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061e6:	32fe      	adds	r2, #254	; 0xfe
 80061e8:	18d1      	adds	r1, r2, r3
 80061ea:	461f      	mov	r7, r3
 80061ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061f0:	9100      	str	r1, [sp, #0]
 80061f2:	2830      	cmp	r0, #48	; 0x30
 80061f4:	d0f8      	beq.n	80061e8 <__gethex+0x3c>
 80061f6:	f7ff ffc4 	bl	8006182 <__hexdig_fun>
 80061fa:	4604      	mov	r4, r0
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d13a      	bne.n	8006276 <__gethex+0xca>
 8006200:	9901      	ldr	r1, [sp, #4]
 8006202:	4652      	mov	r2, sl
 8006204:	4638      	mov	r0, r7
 8006206:	f001 fa8a 	bl	800771e <strncmp>
 800620a:	4605      	mov	r5, r0
 800620c:	2800      	cmp	r0, #0
 800620e:	d168      	bne.n	80062e2 <__gethex+0x136>
 8006210:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006214:	eb07 060a 	add.w	r6, r7, sl
 8006218:	f7ff ffb3 	bl	8006182 <__hexdig_fun>
 800621c:	2800      	cmp	r0, #0
 800621e:	d062      	beq.n	80062e6 <__gethex+0x13a>
 8006220:	4633      	mov	r3, r6
 8006222:	7818      	ldrb	r0, [r3, #0]
 8006224:	2830      	cmp	r0, #48	; 0x30
 8006226:	461f      	mov	r7, r3
 8006228:	f103 0301 	add.w	r3, r3, #1
 800622c:	d0f9      	beq.n	8006222 <__gethex+0x76>
 800622e:	f7ff ffa8 	bl	8006182 <__hexdig_fun>
 8006232:	2301      	movs	r3, #1
 8006234:	fab0 f480 	clz	r4, r0
 8006238:	0964      	lsrs	r4, r4, #5
 800623a:	4635      	mov	r5, r6
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	463a      	mov	r2, r7
 8006240:	4616      	mov	r6, r2
 8006242:	3201      	adds	r2, #1
 8006244:	7830      	ldrb	r0, [r6, #0]
 8006246:	f7ff ff9c 	bl	8006182 <__hexdig_fun>
 800624a:	2800      	cmp	r0, #0
 800624c:	d1f8      	bne.n	8006240 <__gethex+0x94>
 800624e:	9901      	ldr	r1, [sp, #4]
 8006250:	4652      	mov	r2, sl
 8006252:	4630      	mov	r0, r6
 8006254:	f001 fa63 	bl	800771e <strncmp>
 8006258:	b980      	cbnz	r0, 800627c <__gethex+0xd0>
 800625a:	b94d      	cbnz	r5, 8006270 <__gethex+0xc4>
 800625c:	eb06 050a 	add.w	r5, r6, sl
 8006260:	462a      	mov	r2, r5
 8006262:	4616      	mov	r6, r2
 8006264:	3201      	adds	r2, #1
 8006266:	7830      	ldrb	r0, [r6, #0]
 8006268:	f7ff ff8b 	bl	8006182 <__hexdig_fun>
 800626c:	2800      	cmp	r0, #0
 800626e:	d1f8      	bne.n	8006262 <__gethex+0xb6>
 8006270:	1bad      	subs	r5, r5, r6
 8006272:	00ad      	lsls	r5, r5, #2
 8006274:	e004      	b.n	8006280 <__gethex+0xd4>
 8006276:	2400      	movs	r4, #0
 8006278:	4625      	mov	r5, r4
 800627a:	e7e0      	b.n	800623e <__gethex+0x92>
 800627c:	2d00      	cmp	r5, #0
 800627e:	d1f7      	bne.n	8006270 <__gethex+0xc4>
 8006280:	7833      	ldrb	r3, [r6, #0]
 8006282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006286:	2b50      	cmp	r3, #80	; 0x50
 8006288:	d13b      	bne.n	8006302 <__gethex+0x156>
 800628a:	7873      	ldrb	r3, [r6, #1]
 800628c:	2b2b      	cmp	r3, #43	; 0x2b
 800628e:	d02c      	beq.n	80062ea <__gethex+0x13e>
 8006290:	2b2d      	cmp	r3, #45	; 0x2d
 8006292:	d02e      	beq.n	80062f2 <__gethex+0x146>
 8006294:	1c71      	adds	r1, r6, #1
 8006296:	f04f 0900 	mov.w	r9, #0
 800629a:	7808      	ldrb	r0, [r1, #0]
 800629c:	f7ff ff71 	bl	8006182 <__hexdig_fun>
 80062a0:	1e43      	subs	r3, r0, #1
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b18      	cmp	r3, #24
 80062a6:	d82c      	bhi.n	8006302 <__gethex+0x156>
 80062a8:	f1a0 0210 	sub.w	r2, r0, #16
 80062ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80062b0:	f7ff ff67 	bl	8006182 <__hexdig_fun>
 80062b4:	1e43      	subs	r3, r0, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b18      	cmp	r3, #24
 80062ba:	d91d      	bls.n	80062f8 <__gethex+0x14c>
 80062bc:	f1b9 0f00 	cmp.w	r9, #0
 80062c0:	d000      	beq.n	80062c4 <__gethex+0x118>
 80062c2:	4252      	negs	r2, r2
 80062c4:	4415      	add	r5, r2
 80062c6:	f8cb 1000 	str.w	r1, [fp]
 80062ca:	b1e4      	cbz	r4, 8006306 <__gethex+0x15a>
 80062cc:	9b00      	ldr	r3, [sp, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bf14      	ite	ne
 80062d2:	2700      	movne	r7, #0
 80062d4:	2706      	moveq	r7, #6
 80062d6:	4638      	mov	r0, r7
 80062d8:	b009      	add	sp, #36	; 0x24
 80062da:	ecbd 8b02 	vpop	{d8}
 80062de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e2:	463e      	mov	r6, r7
 80062e4:	4625      	mov	r5, r4
 80062e6:	2401      	movs	r4, #1
 80062e8:	e7ca      	b.n	8006280 <__gethex+0xd4>
 80062ea:	f04f 0900 	mov.w	r9, #0
 80062ee:	1cb1      	adds	r1, r6, #2
 80062f0:	e7d3      	b.n	800629a <__gethex+0xee>
 80062f2:	f04f 0901 	mov.w	r9, #1
 80062f6:	e7fa      	b.n	80062ee <__gethex+0x142>
 80062f8:	230a      	movs	r3, #10
 80062fa:	fb03 0202 	mla	r2, r3, r2, r0
 80062fe:	3a10      	subs	r2, #16
 8006300:	e7d4      	b.n	80062ac <__gethex+0x100>
 8006302:	4631      	mov	r1, r6
 8006304:	e7df      	b.n	80062c6 <__gethex+0x11a>
 8006306:	1bf3      	subs	r3, r6, r7
 8006308:	3b01      	subs	r3, #1
 800630a:	4621      	mov	r1, r4
 800630c:	2b07      	cmp	r3, #7
 800630e:	dc0b      	bgt.n	8006328 <__gethex+0x17c>
 8006310:	ee18 0a10 	vmov	r0, s16
 8006314:	f000 fae6 	bl	80068e4 <_Balloc>
 8006318:	4604      	mov	r4, r0
 800631a:	b940      	cbnz	r0, 800632e <__gethex+0x182>
 800631c:	4b5d      	ldr	r3, [pc, #372]	; (8006494 <__gethex+0x2e8>)
 800631e:	4602      	mov	r2, r0
 8006320:	21de      	movs	r1, #222	; 0xde
 8006322:	485d      	ldr	r0, [pc, #372]	; (8006498 <__gethex+0x2ec>)
 8006324:	f7fe fe7a 	bl	800501c <__assert_func>
 8006328:	3101      	adds	r1, #1
 800632a:	105b      	asrs	r3, r3, #1
 800632c:	e7ee      	b.n	800630c <__gethex+0x160>
 800632e:	f100 0914 	add.w	r9, r0, #20
 8006332:	f04f 0b00 	mov.w	fp, #0
 8006336:	f1ca 0301 	rsb	r3, sl, #1
 800633a:	f8cd 9008 	str.w	r9, [sp, #8]
 800633e:	f8cd b000 	str.w	fp, [sp]
 8006342:	9306      	str	r3, [sp, #24]
 8006344:	42b7      	cmp	r7, r6
 8006346:	d340      	bcc.n	80063ca <__gethex+0x21e>
 8006348:	9802      	ldr	r0, [sp, #8]
 800634a:	9b00      	ldr	r3, [sp, #0]
 800634c:	f840 3b04 	str.w	r3, [r0], #4
 8006350:	eba0 0009 	sub.w	r0, r0, r9
 8006354:	1080      	asrs	r0, r0, #2
 8006356:	0146      	lsls	r6, r0, #5
 8006358:	6120      	str	r0, [r4, #16]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fbb4 	bl	8006ac8 <__hi0bits>
 8006360:	1a30      	subs	r0, r6, r0
 8006362:	f8d8 6000 	ldr.w	r6, [r8]
 8006366:	42b0      	cmp	r0, r6
 8006368:	dd63      	ble.n	8006432 <__gethex+0x286>
 800636a:	1b87      	subs	r7, r0, r6
 800636c:	4639      	mov	r1, r7
 800636e:	4620      	mov	r0, r4
 8006370:	f000 ff58 	bl	8007224 <__any_on>
 8006374:	4682      	mov	sl, r0
 8006376:	b1a8      	cbz	r0, 80063a4 <__gethex+0x1f8>
 8006378:	1e7b      	subs	r3, r7, #1
 800637a:	1159      	asrs	r1, r3, #5
 800637c:	f003 021f 	and.w	r2, r3, #31
 8006380:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006384:	f04f 0a01 	mov.w	sl, #1
 8006388:	fa0a f202 	lsl.w	r2, sl, r2
 800638c:	420a      	tst	r2, r1
 800638e:	d009      	beq.n	80063a4 <__gethex+0x1f8>
 8006390:	4553      	cmp	r3, sl
 8006392:	dd05      	ble.n	80063a0 <__gethex+0x1f4>
 8006394:	1eb9      	subs	r1, r7, #2
 8006396:	4620      	mov	r0, r4
 8006398:	f000 ff44 	bl	8007224 <__any_on>
 800639c:	2800      	cmp	r0, #0
 800639e:	d145      	bne.n	800642c <__gethex+0x280>
 80063a0:	f04f 0a02 	mov.w	sl, #2
 80063a4:	4639      	mov	r1, r7
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7ff fe99 	bl	80060de <rshift>
 80063ac:	443d      	add	r5, r7
 80063ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063b2:	42ab      	cmp	r3, r5
 80063b4:	da4c      	bge.n	8006450 <__gethex+0x2a4>
 80063b6:	ee18 0a10 	vmov	r0, s16
 80063ba:	4621      	mov	r1, r4
 80063bc:	f000 fad2 	bl	8006964 <_Bfree>
 80063c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063c2:	2300      	movs	r3, #0
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	27a3      	movs	r7, #163	; 0xa3
 80063c8:	e785      	b.n	80062d6 <__gethex+0x12a>
 80063ca:	1e73      	subs	r3, r6, #1
 80063cc:	9a05      	ldr	r2, [sp, #20]
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d019      	beq.n	800640c <__gethex+0x260>
 80063d8:	f1bb 0f20 	cmp.w	fp, #32
 80063dc:	d107      	bne.n	80063ee <__gethex+0x242>
 80063de:	9b02      	ldr	r3, [sp, #8]
 80063e0:	9a00      	ldr	r2, [sp, #0]
 80063e2:	f843 2b04 	str.w	r2, [r3], #4
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	2300      	movs	r3, #0
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	469b      	mov	fp, r3
 80063ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063f2:	f7ff fec6 	bl	8006182 <__hexdig_fun>
 80063f6:	9b00      	ldr	r3, [sp, #0]
 80063f8:	f000 000f 	and.w	r0, r0, #15
 80063fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8006400:	4303      	orrs	r3, r0
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	f10b 0b04 	add.w	fp, fp, #4
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	e00d      	b.n	8006428 <__gethex+0x27c>
 800640c:	9b03      	ldr	r3, [sp, #12]
 800640e:	9a06      	ldr	r2, [sp, #24]
 8006410:	4413      	add	r3, r2
 8006412:	42bb      	cmp	r3, r7
 8006414:	d3e0      	bcc.n	80063d8 <__gethex+0x22c>
 8006416:	4618      	mov	r0, r3
 8006418:	9901      	ldr	r1, [sp, #4]
 800641a:	9307      	str	r3, [sp, #28]
 800641c:	4652      	mov	r2, sl
 800641e:	f001 f97e 	bl	800771e <strncmp>
 8006422:	9b07      	ldr	r3, [sp, #28]
 8006424:	2800      	cmp	r0, #0
 8006426:	d1d7      	bne.n	80063d8 <__gethex+0x22c>
 8006428:	461e      	mov	r6, r3
 800642a:	e78b      	b.n	8006344 <__gethex+0x198>
 800642c:	f04f 0a03 	mov.w	sl, #3
 8006430:	e7b8      	b.n	80063a4 <__gethex+0x1f8>
 8006432:	da0a      	bge.n	800644a <__gethex+0x29e>
 8006434:	1a37      	subs	r7, r6, r0
 8006436:	4621      	mov	r1, r4
 8006438:	ee18 0a10 	vmov	r0, s16
 800643c:	463a      	mov	r2, r7
 800643e:	f000 fcad 	bl	8006d9c <__lshift>
 8006442:	1bed      	subs	r5, r5, r7
 8006444:	4604      	mov	r4, r0
 8006446:	f100 0914 	add.w	r9, r0, #20
 800644a:	f04f 0a00 	mov.w	sl, #0
 800644e:	e7ae      	b.n	80063ae <__gethex+0x202>
 8006450:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006454:	42a8      	cmp	r0, r5
 8006456:	dd72      	ble.n	800653e <__gethex+0x392>
 8006458:	1b45      	subs	r5, r0, r5
 800645a:	42ae      	cmp	r6, r5
 800645c:	dc36      	bgt.n	80064cc <__gethex+0x320>
 800645e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d02a      	beq.n	80064bc <__gethex+0x310>
 8006466:	2b03      	cmp	r3, #3
 8006468:	d02c      	beq.n	80064c4 <__gethex+0x318>
 800646a:	2b01      	cmp	r3, #1
 800646c:	d11c      	bne.n	80064a8 <__gethex+0x2fc>
 800646e:	42ae      	cmp	r6, r5
 8006470:	d11a      	bne.n	80064a8 <__gethex+0x2fc>
 8006472:	2e01      	cmp	r6, #1
 8006474:	d112      	bne.n	800649c <__gethex+0x2f0>
 8006476:	9a04      	ldr	r2, [sp, #16]
 8006478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	2301      	movs	r3, #1
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	f8c9 3000 	str.w	r3, [r9]
 8006486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006488:	2762      	movs	r7, #98	; 0x62
 800648a:	601c      	str	r4, [r3, #0]
 800648c:	e723      	b.n	80062d6 <__gethex+0x12a>
 800648e:	bf00      	nop
 8006490:	08014620 	.word	0x08014620
 8006494:	08014524 	.word	0x08014524
 8006498:	08014598 	.word	0x08014598
 800649c:	1e71      	subs	r1, r6, #1
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fec0 	bl	8007224 <__any_on>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d1e6      	bne.n	8006476 <__gethex+0x2ca>
 80064a8:	ee18 0a10 	vmov	r0, s16
 80064ac:	4621      	mov	r1, r4
 80064ae:	f000 fa59 	bl	8006964 <_Bfree>
 80064b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064b4:	2300      	movs	r3, #0
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	2750      	movs	r7, #80	; 0x50
 80064ba:	e70c      	b.n	80062d6 <__gethex+0x12a>
 80064bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f2      	bne.n	80064a8 <__gethex+0x2fc>
 80064c2:	e7d8      	b.n	8006476 <__gethex+0x2ca>
 80064c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1d5      	bne.n	8006476 <__gethex+0x2ca>
 80064ca:	e7ed      	b.n	80064a8 <__gethex+0x2fc>
 80064cc:	1e6f      	subs	r7, r5, #1
 80064ce:	f1ba 0f00 	cmp.w	sl, #0
 80064d2:	d131      	bne.n	8006538 <__gethex+0x38c>
 80064d4:	b127      	cbz	r7, 80064e0 <__gethex+0x334>
 80064d6:	4639      	mov	r1, r7
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fea3 	bl	8007224 <__any_on>
 80064de:	4682      	mov	sl, r0
 80064e0:	117b      	asrs	r3, r7, #5
 80064e2:	2101      	movs	r1, #1
 80064e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80064e8:	f007 071f 	and.w	r7, r7, #31
 80064ec:	fa01 f707 	lsl.w	r7, r1, r7
 80064f0:	421f      	tst	r7, r3
 80064f2:	4629      	mov	r1, r5
 80064f4:	4620      	mov	r0, r4
 80064f6:	bf18      	it	ne
 80064f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80064fc:	1b76      	subs	r6, r6, r5
 80064fe:	f7ff fdee 	bl	80060de <rshift>
 8006502:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006506:	2702      	movs	r7, #2
 8006508:	f1ba 0f00 	cmp.w	sl, #0
 800650c:	d048      	beq.n	80065a0 <__gethex+0x3f4>
 800650e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d015      	beq.n	8006542 <__gethex+0x396>
 8006516:	2b03      	cmp	r3, #3
 8006518:	d017      	beq.n	800654a <__gethex+0x39e>
 800651a:	2b01      	cmp	r3, #1
 800651c:	d109      	bne.n	8006532 <__gethex+0x386>
 800651e:	f01a 0f02 	tst.w	sl, #2
 8006522:	d006      	beq.n	8006532 <__gethex+0x386>
 8006524:	f8d9 0000 	ldr.w	r0, [r9]
 8006528:	ea4a 0a00 	orr.w	sl, sl, r0
 800652c:	f01a 0f01 	tst.w	sl, #1
 8006530:	d10e      	bne.n	8006550 <__gethex+0x3a4>
 8006532:	f047 0710 	orr.w	r7, r7, #16
 8006536:	e033      	b.n	80065a0 <__gethex+0x3f4>
 8006538:	f04f 0a01 	mov.w	sl, #1
 800653c:	e7d0      	b.n	80064e0 <__gethex+0x334>
 800653e:	2701      	movs	r7, #1
 8006540:	e7e2      	b.n	8006508 <__gethex+0x35c>
 8006542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006544:	f1c3 0301 	rsb	r3, r3, #1
 8006548:	9315      	str	r3, [sp, #84]	; 0x54
 800654a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <__gethex+0x386>
 8006550:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006554:	f104 0314 	add.w	r3, r4, #20
 8006558:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800655c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006560:	f04f 0c00 	mov.w	ip, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f853 2b04 	ldr.w	r2, [r3], #4
 800656a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800656e:	d01c      	beq.n	80065aa <__gethex+0x3fe>
 8006570:	3201      	adds	r2, #1
 8006572:	6002      	str	r2, [r0, #0]
 8006574:	2f02      	cmp	r7, #2
 8006576:	f104 0314 	add.w	r3, r4, #20
 800657a:	d13f      	bne.n	80065fc <__gethex+0x450>
 800657c:	f8d8 2000 	ldr.w	r2, [r8]
 8006580:	3a01      	subs	r2, #1
 8006582:	42b2      	cmp	r2, r6
 8006584:	d10a      	bne.n	800659c <__gethex+0x3f0>
 8006586:	1171      	asrs	r1, r6, #5
 8006588:	2201      	movs	r2, #1
 800658a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800658e:	f006 061f 	and.w	r6, r6, #31
 8006592:	fa02 f606 	lsl.w	r6, r2, r6
 8006596:	421e      	tst	r6, r3
 8006598:	bf18      	it	ne
 800659a:	4617      	movne	r7, r2
 800659c:	f047 0720 	orr.w	r7, r7, #32
 80065a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065a2:	601c      	str	r4, [r3, #0]
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	601d      	str	r5, [r3, #0]
 80065a8:	e695      	b.n	80062d6 <__gethex+0x12a>
 80065aa:	4299      	cmp	r1, r3
 80065ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80065b0:	d8d8      	bhi.n	8006564 <__gethex+0x3b8>
 80065b2:	68a3      	ldr	r3, [r4, #8]
 80065b4:	459b      	cmp	fp, r3
 80065b6:	db19      	blt.n	80065ec <__gethex+0x440>
 80065b8:	6861      	ldr	r1, [r4, #4]
 80065ba:	ee18 0a10 	vmov	r0, s16
 80065be:	3101      	adds	r1, #1
 80065c0:	f000 f990 	bl	80068e4 <_Balloc>
 80065c4:	4681      	mov	r9, r0
 80065c6:	b918      	cbnz	r0, 80065d0 <__gethex+0x424>
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <__gethex+0x488>)
 80065ca:	4602      	mov	r2, r0
 80065cc:	2184      	movs	r1, #132	; 0x84
 80065ce:	e6a8      	b.n	8006322 <__gethex+0x176>
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	3202      	adds	r2, #2
 80065d4:	f104 010c 	add.w	r1, r4, #12
 80065d8:	0092      	lsls	r2, r2, #2
 80065da:	300c      	adds	r0, #12
 80065dc:	f000 f974 	bl	80068c8 <memcpy>
 80065e0:	4621      	mov	r1, r4
 80065e2:	ee18 0a10 	vmov	r0, s16
 80065e6:	f000 f9bd 	bl	8006964 <_Bfree>
 80065ea:	464c      	mov	r4, r9
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065f4:	6122      	str	r2, [r4, #16]
 80065f6:	2201      	movs	r2, #1
 80065f8:	615a      	str	r2, [r3, #20]
 80065fa:	e7bb      	b.n	8006574 <__gethex+0x3c8>
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	455a      	cmp	r2, fp
 8006600:	dd0b      	ble.n	800661a <__gethex+0x46e>
 8006602:	2101      	movs	r1, #1
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff fd6a 	bl	80060de <rshift>
 800660a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800660e:	3501      	adds	r5, #1
 8006610:	42ab      	cmp	r3, r5
 8006612:	f6ff aed0 	blt.w	80063b6 <__gethex+0x20a>
 8006616:	2701      	movs	r7, #1
 8006618:	e7c0      	b.n	800659c <__gethex+0x3f0>
 800661a:	f016 061f 	ands.w	r6, r6, #31
 800661e:	d0fa      	beq.n	8006616 <__gethex+0x46a>
 8006620:	4453      	add	r3, sl
 8006622:	f1c6 0620 	rsb	r6, r6, #32
 8006626:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800662a:	f000 fa4d 	bl	8006ac8 <__hi0bits>
 800662e:	42b0      	cmp	r0, r6
 8006630:	dbe7      	blt.n	8006602 <__gethex+0x456>
 8006632:	e7f0      	b.n	8006616 <__gethex+0x46a>
 8006634:	08014524 	.word	0x08014524

08006638 <L_shift>:
 8006638:	f1c2 0208 	rsb	r2, r2, #8
 800663c:	0092      	lsls	r2, r2, #2
 800663e:	b570      	push	{r4, r5, r6, lr}
 8006640:	f1c2 0620 	rsb	r6, r2, #32
 8006644:	6843      	ldr	r3, [r0, #4]
 8006646:	6804      	ldr	r4, [r0, #0]
 8006648:	fa03 f506 	lsl.w	r5, r3, r6
 800664c:	432c      	orrs	r4, r5
 800664e:	40d3      	lsrs	r3, r2
 8006650:	6004      	str	r4, [r0, #0]
 8006652:	f840 3f04 	str.w	r3, [r0, #4]!
 8006656:	4288      	cmp	r0, r1
 8006658:	d3f4      	bcc.n	8006644 <L_shift+0xc>
 800665a:	bd70      	pop	{r4, r5, r6, pc}

0800665c <__match>:
 800665c:	b530      	push	{r4, r5, lr}
 800665e:	6803      	ldr	r3, [r0, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006666:	b914      	cbnz	r4, 800666e <__match+0x12>
 8006668:	6003      	str	r3, [r0, #0]
 800666a:	2001      	movs	r0, #1
 800666c:	bd30      	pop	{r4, r5, pc}
 800666e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006672:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006676:	2d19      	cmp	r5, #25
 8006678:	bf98      	it	ls
 800667a:	3220      	addls	r2, #32
 800667c:	42a2      	cmp	r2, r4
 800667e:	d0f0      	beq.n	8006662 <__match+0x6>
 8006680:	2000      	movs	r0, #0
 8006682:	e7f3      	b.n	800666c <__match+0x10>

08006684 <__hexnan>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	680b      	ldr	r3, [r1, #0]
 800668a:	115e      	asrs	r6, r3, #5
 800668c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006690:	f013 031f 	ands.w	r3, r3, #31
 8006694:	b087      	sub	sp, #28
 8006696:	bf18      	it	ne
 8006698:	3604      	addne	r6, #4
 800669a:	2500      	movs	r5, #0
 800669c:	1f37      	subs	r7, r6, #4
 800669e:	4690      	mov	r8, r2
 80066a0:	6802      	ldr	r2, [r0, #0]
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	4682      	mov	sl, r0
 80066a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80066aa:	46b9      	mov	r9, r7
 80066ac:	463c      	mov	r4, r7
 80066ae:	9502      	str	r5, [sp, #8]
 80066b0:	46ab      	mov	fp, r5
 80066b2:	7851      	ldrb	r1, [r2, #1]
 80066b4:	1c53      	adds	r3, r2, #1
 80066b6:	9303      	str	r3, [sp, #12]
 80066b8:	b341      	cbz	r1, 800670c <__hexnan+0x88>
 80066ba:	4608      	mov	r0, r1
 80066bc:	9205      	str	r2, [sp, #20]
 80066be:	9104      	str	r1, [sp, #16]
 80066c0:	f7ff fd5f 	bl	8006182 <__hexdig_fun>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d14f      	bne.n	8006768 <__hexnan+0xe4>
 80066c8:	9904      	ldr	r1, [sp, #16]
 80066ca:	9a05      	ldr	r2, [sp, #20]
 80066cc:	2920      	cmp	r1, #32
 80066ce:	d818      	bhi.n	8006702 <__hexnan+0x7e>
 80066d0:	9b02      	ldr	r3, [sp, #8]
 80066d2:	459b      	cmp	fp, r3
 80066d4:	dd13      	ble.n	80066fe <__hexnan+0x7a>
 80066d6:	454c      	cmp	r4, r9
 80066d8:	d206      	bcs.n	80066e8 <__hexnan+0x64>
 80066da:	2d07      	cmp	r5, #7
 80066dc:	dc04      	bgt.n	80066e8 <__hexnan+0x64>
 80066de:	462a      	mov	r2, r5
 80066e0:	4649      	mov	r1, r9
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7ff ffa8 	bl	8006638 <L_shift>
 80066e8:	4544      	cmp	r4, r8
 80066ea:	d950      	bls.n	800678e <__hexnan+0x10a>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f1a4 0904 	sub.w	r9, r4, #4
 80066f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80066f6:	f8cd b008 	str.w	fp, [sp, #8]
 80066fa:	464c      	mov	r4, r9
 80066fc:	461d      	mov	r5, r3
 80066fe:	9a03      	ldr	r2, [sp, #12]
 8006700:	e7d7      	b.n	80066b2 <__hexnan+0x2e>
 8006702:	2929      	cmp	r1, #41	; 0x29
 8006704:	d156      	bne.n	80067b4 <__hexnan+0x130>
 8006706:	3202      	adds	r2, #2
 8006708:	f8ca 2000 	str.w	r2, [sl]
 800670c:	f1bb 0f00 	cmp.w	fp, #0
 8006710:	d050      	beq.n	80067b4 <__hexnan+0x130>
 8006712:	454c      	cmp	r4, r9
 8006714:	d206      	bcs.n	8006724 <__hexnan+0xa0>
 8006716:	2d07      	cmp	r5, #7
 8006718:	dc04      	bgt.n	8006724 <__hexnan+0xa0>
 800671a:	462a      	mov	r2, r5
 800671c:	4649      	mov	r1, r9
 800671e:	4620      	mov	r0, r4
 8006720:	f7ff ff8a 	bl	8006638 <L_shift>
 8006724:	4544      	cmp	r4, r8
 8006726:	d934      	bls.n	8006792 <__hexnan+0x10e>
 8006728:	f1a8 0204 	sub.w	r2, r8, #4
 800672c:	4623      	mov	r3, r4
 800672e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006732:	f842 1f04 	str.w	r1, [r2, #4]!
 8006736:	429f      	cmp	r7, r3
 8006738:	d2f9      	bcs.n	800672e <__hexnan+0xaa>
 800673a:	1b3b      	subs	r3, r7, r4
 800673c:	f023 0303 	bic.w	r3, r3, #3
 8006740:	3304      	adds	r3, #4
 8006742:	3401      	adds	r4, #1
 8006744:	3e03      	subs	r6, #3
 8006746:	42b4      	cmp	r4, r6
 8006748:	bf88      	it	hi
 800674a:	2304      	movhi	r3, #4
 800674c:	4443      	add	r3, r8
 800674e:	2200      	movs	r2, #0
 8006750:	f843 2b04 	str.w	r2, [r3], #4
 8006754:	429f      	cmp	r7, r3
 8006756:	d2fb      	bcs.n	8006750 <__hexnan+0xcc>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	b91b      	cbnz	r3, 8006764 <__hexnan+0xe0>
 800675c:	4547      	cmp	r7, r8
 800675e:	d127      	bne.n	80067b0 <__hexnan+0x12c>
 8006760:	2301      	movs	r3, #1
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	2005      	movs	r0, #5
 8006766:	e026      	b.n	80067b6 <__hexnan+0x132>
 8006768:	3501      	adds	r5, #1
 800676a:	2d08      	cmp	r5, #8
 800676c:	f10b 0b01 	add.w	fp, fp, #1
 8006770:	dd06      	ble.n	8006780 <__hexnan+0xfc>
 8006772:	4544      	cmp	r4, r8
 8006774:	d9c3      	bls.n	80066fe <__hexnan+0x7a>
 8006776:	2300      	movs	r3, #0
 8006778:	f844 3c04 	str.w	r3, [r4, #-4]
 800677c:	2501      	movs	r5, #1
 800677e:	3c04      	subs	r4, #4
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	f000 000f 	and.w	r0, r0, #15
 8006786:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	e7b7      	b.n	80066fe <__hexnan+0x7a>
 800678e:	2508      	movs	r5, #8
 8006790:	e7b5      	b.n	80066fe <__hexnan+0x7a>
 8006792:	9b01      	ldr	r3, [sp, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0df      	beq.n	8006758 <__hexnan+0xd4>
 8006798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800679c:	f1c3 0320 	rsb	r3, r3, #32
 80067a0:	fa22 f303 	lsr.w	r3, r2, r3
 80067a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80067a8:	401a      	ands	r2, r3
 80067aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80067ae:	e7d3      	b.n	8006758 <__hexnan+0xd4>
 80067b0:	3f04      	subs	r7, #4
 80067b2:	e7d1      	b.n	8006758 <__hexnan+0xd4>
 80067b4:	2004      	movs	r0, #4
 80067b6:	b007      	add	sp, #28
 80067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067bc <_localeconv_r>:
 80067bc:	4800      	ldr	r0, [pc, #0]	; (80067c0 <_localeconv_r+0x4>)
 80067be:	4770      	bx	lr
 80067c0:	20000174 	.word	0x20000174

080067c4 <__retarget_lock_init_recursive>:
 80067c4:	4770      	bx	lr

080067c6 <__retarget_lock_acquire_recursive>:
 80067c6:	4770      	bx	lr

080067c8 <__retarget_lock_release_recursive>:
 80067c8:	4770      	bx	lr

080067ca <__swhatbuf_r>:
 80067ca:	b570      	push	{r4, r5, r6, lr}
 80067cc:	460e      	mov	r6, r1
 80067ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d2:	2900      	cmp	r1, #0
 80067d4:	b096      	sub	sp, #88	; 0x58
 80067d6:	4614      	mov	r4, r2
 80067d8:	461d      	mov	r5, r3
 80067da:	da08      	bge.n	80067ee <__swhatbuf_r+0x24>
 80067dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	602a      	str	r2, [r5, #0]
 80067e4:	061a      	lsls	r2, r3, #24
 80067e6:	d410      	bmi.n	800680a <__swhatbuf_r+0x40>
 80067e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ec:	e00e      	b.n	800680c <__swhatbuf_r+0x42>
 80067ee:	466a      	mov	r2, sp
 80067f0:	f7fc fb44 	bl	8002e7c <_fstat_r>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	dbf1      	blt.n	80067dc <__swhatbuf_r+0x12>
 80067f8:	9a01      	ldr	r2, [sp, #4]
 80067fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006802:	425a      	negs	r2, r3
 8006804:	415a      	adcs	r2, r3
 8006806:	602a      	str	r2, [r5, #0]
 8006808:	e7ee      	b.n	80067e8 <__swhatbuf_r+0x1e>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	2000      	movs	r0, #0
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	b016      	add	sp, #88	; 0x58
 8006812:	bd70      	pop	{r4, r5, r6, pc}

08006814 <__smakebuf_r>:
 8006814:	898b      	ldrh	r3, [r1, #12]
 8006816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006818:	079d      	lsls	r5, r3, #30
 800681a:	4606      	mov	r6, r0
 800681c:	460c      	mov	r4, r1
 800681e:	d507      	bpl.n	8006830 <__smakebuf_r+0x1c>
 8006820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	2301      	movs	r3, #1
 800682a:	6163      	str	r3, [r4, #20]
 800682c:	b002      	add	sp, #8
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	ab01      	add	r3, sp, #4
 8006832:	466a      	mov	r2, sp
 8006834:	f7ff ffc9 	bl	80067ca <__swhatbuf_r>
 8006838:	9900      	ldr	r1, [sp, #0]
 800683a:	4605      	mov	r5, r0
 800683c:	4630      	mov	r0, r6
 800683e:	f000 fd6d 	bl	800731c <_malloc_r>
 8006842:	b948      	cbnz	r0, 8006858 <__smakebuf_r+0x44>
 8006844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006848:	059a      	lsls	r2, r3, #22
 800684a:	d4ef      	bmi.n	800682c <__smakebuf_r+0x18>
 800684c:	f023 0303 	bic.w	r3, r3, #3
 8006850:	f043 0302 	orr.w	r3, r3, #2
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	e7e3      	b.n	8006820 <__smakebuf_r+0xc>
 8006858:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <__smakebuf_r+0x7c>)
 800685a:	62b3      	str	r3, [r6, #40]	; 0x28
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	6020      	str	r0, [r4, #0]
 8006860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	6163      	str	r3, [r4, #20]
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	6120      	str	r0, [r4, #16]
 800686e:	b15b      	cbz	r3, 8006888 <__smakebuf_r+0x74>
 8006870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006874:	4630      	mov	r0, r6
 8006876:	f7fc fb06 	bl	8002e86 <_isatty_r>
 800687a:	b128      	cbz	r0, 8006888 <__smakebuf_r+0x74>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	89a0      	ldrh	r0, [r4, #12]
 800688a:	4305      	orrs	r5, r0
 800688c:	81a5      	strh	r5, [r4, #12]
 800688e:	e7cd      	b.n	800682c <__smakebuf_r+0x18>
 8006890:	08005f19 	.word	0x08005f19

08006894 <malloc>:
 8006894:	4b02      	ldr	r3, [pc, #8]	; (80068a0 <malloc+0xc>)
 8006896:	4601      	mov	r1, r0
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f000 bd3f 	b.w	800731c <_malloc_r>
 800689e:	bf00      	nop
 80068a0:	2000001c 	.word	0x2000001c

080068a4 <__ascii_mbtowc>:
 80068a4:	b082      	sub	sp, #8
 80068a6:	b901      	cbnz	r1, 80068aa <__ascii_mbtowc+0x6>
 80068a8:	a901      	add	r1, sp, #4
 80068aa:	b142      	cbz	r2, 80068be <__ascii_mbtowc+0x1a>
 80068ac:	b14b      	cbz	r3, 80068c2 <__ascii_mbtowc+0x1e>
 80068ae:	7813      	ldrb	r3, [r2, #0]
 80068b0:	600b      	str	r3, [r1, #0]
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	1e10      	subs	r0, r2, #0
 80068b6:	bf18      	it	ne
 80068b8:	2001      	movne	r0, #1
 80068ba:	b002      	add	sp, #8
 80068bc:	4770      	bx	lr
 80068be:	4610      	mov	r0, r2
 80068c0:	e7fb      	b.n	80068ba <__ascii_mbtowc+0x16>
 80068c2:	f06f 0001 	mvn.w	r0, #1
 80068c6:	e7f8      	b.n	80068ba <__ascii_mbtowc+0x16>

080068c8 <memcpy>:
 80068c8:	440a      	add	r2, r1
 80068ca:	4291      	cmp	r1, r2
 80068cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068d0:	d100      	bne.n	80068d4 <memcpy+0xc>
 80068d2:	4770      	bx	lr
 80068d4:	b510      	push	{r4, lr}
 80068d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068de:	4291      	cmp	r1, r2
 80068e0:	d1f9      	bne.n	80068d6 <memcpy+0xe>
 80068e2:	bd10      	pop	{r4, pc}

080068e4 <_Balloc>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068e8:	4604      	mov	r4, r0
 80068ea:	460d      	mov	r5, r1
 80068ec:	b976      	cbnz	r6, 800690c <_Balloc+0x28>
 80068ee:	2010      	movs	r0, #16
 80068f0:	f7ff ffd0 	bl	8006894 <malloc>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6260      	str	r0, [r4, #36]	; 0x24
 80068f8:	b920      	cbnz	r0, 8006904 <_Balloc+0x20>
 80068fa:	4b18      	ldr	r3, [pc, #96]	; (800695c <_Balloc+0x78>)
 80068fc:	4818      	ldr	r0, [pc, #96]	; (8006960 <_Balloc+0x7c>)
 80068fe:	2166      	movs	r1, #102	; 0x66
 8006900:	f7fe fb8c 	bl	800501c <__assert_func>
 8006904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006908:	6006      	str	r6, [r0, #0]
 800690a:	60c6      	str	r6, [r0, #12]
 800690c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800690e:	68f3      	ldr	r3, [r6, #12]
 8006910:	b183      	cbz	r3, 8006934 <_Balloc+0x50>
 8006912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800691a:	b9b8      	cbnz	r0, 800694c <_Balloc+0x68>
 800691c:	2101      	movs	r1, #1
 800691e:	fa01 f605 	lsl.w	r6, r1, r5
 8006922:	1d72      	adds	r2, r6, #5
 8006924:	0092      	lsls	r2, r2, #2
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fc9d 	bl	8007266 <_calloc_r>
 800692c:	b160      	cbz	r0, 8006948 <_Balloc+0x64>
 800692e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006932:	e00e      	b.n	8006952 <_Balloc+0x6e>
 8006934:	2221      	movs	r2, #33	; 0x21
 8006936:	2104      	movs	r1, #4
 8006938:	4620      	mov	r0, r4
 800693a:	f000 fc94 	bl	8007266 <_calloc_r>
 800693e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006940:	60f0      	str	r0, [r6, #12]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e4      	bne.n	8006912 <_Balloc+0x2e>
 8006948:	2000      	movs	r0, #0
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	6802      	ldr	r2, [r0, #0]
 800694e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006952:	2300      	movs	r3, #0
 8006954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006958:	e7f7      	b.n	800694a <_Balloc+0x66>
 800695a:	bf00      	nop
 800695c:	080143c8 	.word	0x080143c8
 8006960:	08014632 	.word	0x08014632

08006964 <_Bfree>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006968:	4605      	mov	r5, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b976      	cbnz	r6, 800698c <_Bfree+0x28>
 800696e:	2010      	movs	r0, #16
 8006970:	f7ff ff90 	bl	8006894 <malloc>
 8006974:	4602      	mov	r2, r0
 8006976:	6268      	str	r0, [r5, #36]	; 0x24
 8006978:	b920      	cbnz	r0, 8006984 <_Bfree+0x20>
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <_Bfree+0x3c>)
 800697c:	4809      	ldr	r0, [pc, #36]	; (80069a4 <_Bfree+0x40>)
 800697e:	218a      	movs	r1, #138	; 0x8a
 8006980:	f7fe fb4c 	bl	800501c <__assert_func>
 8006984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006988:	6006      	str	r6, [r0, #0]
 800698a:	60c6      	str	r6, [r0, #12]
 800698c:	b13c      	cbz	r4, 800699e <_Bfree+0x3a>
 800698e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006990:	6862      	ldr	r2, [r4, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006998:	6021      	str	r1, [r4, #0]
 800699a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	080143c8 	.word	0x080143c8
 80069a4:	08014632 	.word	0x08014632

080069a8 <__multadd>:
 80069a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ac:	690d      	ldr	r5, [r1, #16]
 80069ae:	4607      	mov	r7, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	461e      	mov	r6, r3
 80069b4:	f101 0c14 	add.w	ip, r1, #20
 80069b8:	2000      	movs	r0, #0
 80069ba:	f8dc 3000 	ldr.w	r3, [ip]
 80069be:	b299      	uxth	r1, r3
 80069c0:	fb02 6101 	mla	r1, r2, r1, r6
 80069c4:	0c1e      	lsrs	r6, r3, #16
 80069c6:	0c0b      	lsrs	r3, r1, #16
 80069c8:	fb02 3306 	mla	r3, r2, r6, r3
 80069cc:	b289      	uxth	r1, r1
 80069ce:	3001      	adds	r0, #1
 80069d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069d4:	4285      	cmp	r5, r0
 80069d6:	f84c 1b04 	str.w	r1, [ip], #4
 80069da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069de:	dcec      	bgt.n	80069ba <__multadd+0x12>
 80069e0:	b30e      	cbz	r6, 8006a26 <__multadd+0x7e>
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	42ab      	cmp	r3, r5
 80069e6:	dc19      	bgt.n	8006a1c <__multadd+0x74>
 80069e8:	6861      	ldr	r1, [r4, #4]
 80069ea:	4638      	mov	r0, r7
 80069ec:	3101      	adds	r1, #1
 80069ee:	f7ff ff79 	bl	80068e4 <_Balloc>
 80069f2:	4680      	mov	r8, r0
 80069f4:	b928      	cbnz	r0, 8006a02 <__multadd+0x5a>
 80069f6:	4602      	mov	r2, r0
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <__multadd+0x84>)
 80069fa:	480d      	ldr	r0, [pc, #52]	; (8006a30 <__multadd+0x88>)
 80069fc:	21b5      	movs	r1, #181	; 0xb5
 80069fe:	f7fe fb0d 	bl	800501c <__assert_func>
 8006a02:	6922      	ldr	r2, [r4, #16]
 8006a04:	3202      	adds	r2, #2
 8006a06:	f104 010c 	add.w	r1, r4, #12
 8006a0a:	0092      	lsls	r2, r2, #2
 8006a0c:	300c      	adds	r0, #12
 8006a0e:	f7ff ff5b 	bl	80068c8 <memcpy>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4638      	mov	r0, r7
 8006a16:	f7ff ffa5 	bl	8006964 <_Bfree>
 8006a1a:	4644      	mov	r4, r8
 8006a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a20:	3501      	adds	r5, #1
 8006a22:	615e      	str	r6, [r3, #20]
 8006a24:	6125      	str	r5, [r4, #16]
 8006a26:	4620      	mov	r0, r4
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	08014524 	.word	0x08014524
 8006a30:	08014632 	.word	0x08014632

08006a34 <__s2b>:
 8006a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4615      	mov	r5, r2
 8006a3c:	461f      	mov	r7, r3
 8006a3e:	2209      	movs	r2, #9
 8006a40:	3308      	adds	r3, #8
 8006a42:	4606      	mov	r6, r0
 8006a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a48:	2100      	movs	r1, #0
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	db09      	blt.n	8006a64 <__s2b+0x30>
 8006a50:	4630      	mov	r0, r6
 8006a52:	f7ff ff47 	bl	80068e4 <_Balloc>
 8006a56:	b940      	cbnz	r0, 8006a6a <__s2b+0x36>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b19      	ldr	r3, [pc, #100]	; (8006ac0 <__s2b+0x8c>)
 8006a5c:	4819      	ldr	r0, [pc, #100]	; (8006ac4 <__s2b+0x90>)
 8006a5e:	21ce      	movs	r1, #206	; 0xce
 8006a60:	f7fe fadc 	bl	800501c <__assert_func>
 8006a64:	0052      	lsls	r2, r2, #1
 8006a66:	3101      	adds	r1, #1
 8006a68:	e7f0      	b.n	8006a4c <__s2b+0x18>
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	6143      	str	r3, [r0, #20]
 8006a6e:	2d09      	cmp	r5, #9
 8006a70:	f04f 0301 	mov.w	r3, #1
 8006a74:	6103      	str	r3, [r0, #16]
 8006a76:	dd16      	ble.n	8006aa6 <__s2b+0x72>
 8006a78:	f104 0909 	add.w	r9, r4, #9
 8006a7c:	46c8      	mov	r8, r9
 8006a7e:	442c      	add	r4, r5
 8006a80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a84:	4601      	mov	r1, r0
 8006a86:	3b30      	subs	r3, #48	; 0x30
 8006a88:	220a      	movs	r2, #10
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ff8c 	bl	80069a8 <__multadd>
 8006a90:	45a0      	cmp	r8, r4
 8006a92:	d1f5      	bne.n	8006a80 <__s2b+0x4c>
 8006a94:	f1a5 0408 	sub.w	r4, r5, #8
 8006a98:	444c      	add	r4, r9
 8006a9a:	1b2d      	subs	r5, r5, r4
 8006a9c:	1963      	adds	r3, r4, r5
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	db04      	blt.n	8006aac <__s2b+0x78>
 8006aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa6:	340a      	adds	r4, #10
 8006aa8:	2509      	movs	r5, #9
 8006aaa:	e7f6      	b.n	8006a9a <__s2b+0x66>
 8006aac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ab0:	4601      	mov	r1, r0
 8006ab2:	3b30      	subs	r3, #48	; 0x30
 8006ab4:	220a      	movs	r2, #10
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7ff ff76 	bl	80069a8 <__multadd>
 8006abc:	e7ee      	b.n	8006a9c <__s2b+0x68>
 8006abe:	bf00      	nop
 8006ac0:	08014524 	.word	0x08014524
 8006ac4:	08014632 	.word	0x08014632

08006ac8 <__hi0bits>:
 8006ac8:	0c03      	lsrs	r3, r0, #16
 8006aca:	041b      	lsls	r3, r3, #16
 8006acc:	b9d3      	cbnz	r3, 8006b04 <__hi0bits+0x3c>
 8006ace:	0400      	lsls	r0, r0, #16
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ad6:	bf04      	itt	eq
 8006ad8:	0200      	lsleq	r0, r0, #8
 8006ada:	3308      	addeq	r3, #8
 8006adc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ae0:	bf04      	itt	eq
 8006ae2:	0100      	lsleq	r0, r0, #4
 8006ae4:	3304      	addeq	r3, #4
 8006ae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006aea:	bf04      	itt	eq
 8006aec:	0080      	lsleq	r0, r0, #2
 8006aee:	3302      	addeq	r3, #2
 8006af0:	2800      	cmp	r0, #0
 8006af2:	db05      	blt.n	8006b00 <__hi0bits+0x38>
 8006af4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006af8:	f103 0301 	add.w	r3, r3, #1
 8006afc:	bf08      	it	eq
 8006afe:	2320      	moveq	r3, #32
 8006b00:	4618      	mov	r0, r3
 8006b02:	4770      	bx	lr
 8006b04:	2300      	movs	r3, #0
 8006b06:	e7e4      	b.n	8006ad2 <__hi0bits+0xa>

08006b08 <__lo0bits>:
 8006b08:	6803      	ldr	r3, [r0, #0]
 8006b0a:	f013 0207 	ands.w	r2, r3, #7
 8006b0e:	4601      	mov	r1, r0
 8006b10:	d00b      	beq.n	8006b2a <__lo0bits+0x22>
 8006b12:	07da      	lsls	r2, r3, #31
 8006b14:	d423      	bmi.n	8006b5e <__lo0bits+0x56>
 8006b16:	0798      	lsls	r0, r3, #30
 8006b18:	bf49      	itett	mi
 8006b1a:	085b      	lsrmi	r3, r3, #1
 8006b1c:	089b      	lsrpl	r3, r3, #2
 8006b1e:	2001      	movmi	r0, #1
 8006b20:	600b      	strmi	r3, [r1, #0]
 8006b22:	bf5c      	itt	pl
 8006b24:	600b      	strpl	r3, [r1, #0]
 8006b26:	2002      	movpl	r0, #2
 8006b28:	4770      	bx	lr
 8006b2a:	b298      	uxth	r0, r3
 8006b2c:	b9a8      	cbnz	r0, 8006b5a <__lo0bits+0x52>
 8006b2e:	0c1b      	lsrs	r3, r3, #16
 8006b30:	2010      	movs	r0, #16
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	b90a      	cbnz	r2, 8006b3a <__lo0bits+0x32>
 8006b36:	3008      	adds	r0, #8
 8006b38:	0a1b      	lsrs	r3, r3, #8
 8006b3a:	071a      	lsls	r2, r3, #28
 8006b3c:	bf04      	itt	eq
 8006b3e:	091b      	lsreq	r3, r3, #4
 8006b40:	3004      	addeq	r0, #4
 8006b42:	079a      	lsls	r2, r3, #30
 8006b44:	bf04      	itt	eq
 8006b46:	089b      	lsreq	r3, r3, #2
 8006b48:	3002      	addeq	r0, #2
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d403      	bmi.n	8006b56 <__lo0bits+0x4e>
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	f100 0001 	add.w	r0, r0, #1
 8006b54:	d005      	beq.n	8006b62 <__lo0bits+0x5a>
 8006b56:	600b      	str	r3, [r1, #0]
 8006b58:	4770      	bx	lr
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	e7e9      	b.n	8006b32 <__lo0bits+0x2a>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	4770      	bx	lr
 8006b62:	2020      	movs	r0, #32
 8006b64:	4770      	bx	lr
	...

08006b68 <__i2b>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	f7ff feb9 	bl	80068e4 <_Balloc>
 8006b72:	4602      	mov	r2, r0
 8006b74:	b928      	cbnz	r0, 8006b82 <__i2b+0x1a>
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <__i2b+0x24>)
 8006b78:	4805      	ldr	r0, [pc, #20]	; (8006b90 <__i2b+0x28>)
 8006b7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b7e:	f7fe fa4d 	bl	800501c <__assert_func>
 8006b82:	2301      	movs	r3, #1
 8006b84:	6144      	str	r4, [r0, #20]
 8006b86:	6103      	str	r3, [r0, #16]
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08014524 	.word	0x08014524
 8006b90:	08014632 	.word	0x08014632

08006b94 <__multiply>:
 8006b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	4691      	mov	r9, r2
 8006b9a:	690a      	ldr	r2, [r1, #16]
 8006b9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	bfb8      	it	lt
 8006ba4:	460b      	movlt	r3, r1
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	bfbc      	itt	lt
 8006baa:	464c      	movlt	r4, r9
 8006bac:	4699      	movlt	r9, r3
 8006bae:	6927      	ldr	r7, [r4, #16]
 8006bb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	6861      	ldr	r1, [r4, #4]
 8006bb8:	eb07 060a 	add.w	r6, r7, sl
 8006bbc:	42b3      	cmp	r3, r6
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	bfb8      	it	lt
 8006bc2:	3101      	addlt	r1, #1
 8006bc4:	f7ff fe8e 	bl	80068e4 <_Balloc>
 8006bc8:	b930      	cbnz	r0, 8006bd8 <__multiply+0x44>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	4b44      	ldr	r3, [pc, #272]	; (8006ce0 <__multiply+0x14c>)
 8006bce:	4845      	ldr	r0, [pc, #276]	; (8006ce4 <__multiply+0x150>)
 8006bd0:	f240 115d 	movw	r1, #349	; 0x15d
 8006bd4:	f7fe fa22 	bl	800501c <__assert_func>
 8006bd8:	f100 0514 	add.w	r5, r0, #20
 8006bdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006be0:	462b      	mov	r3, r5
 8006be2:	2200      	movs	r2, #0
 8006be4:	4543      	cmp	r3, r8
 8006be6:	d321      	bcc.n	8006c2c <__multiply+0x98>
 8006be8:	f104 0314 	add.w	r3, r4, #20
 8006bec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006bf0:	f109 0314 	add.w	r3, r9, #20
 8006bf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006bf8:	9202      	str	r2, [sp, #8]
 8006bfa:	1b3a      	subs	r2, r7, r4
 8006bfc:	3a15      	subs	r2, #21
 8006bfe:	f022 0203 	bic.w	r2, r2, #3
 8006c02:	3204      	adds	r2, #4
 8006c04:	f104 0115 	add.w	r1, r4, #21
 8006c08:	428f      	cmp	r7, r1
 8006c0a:	bf38      	it	cc
 8006c0c:	2204      	movcc	r2, #4
 8006c0e:	9201      	str	r2, [sp, #4]
 8006c10:	9a02      	ldr	r2, [sp, #8]
 8006c12:	9303      	str	r3, [sp, #12]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d80c      	bhi.n	8006c32 <__multiply+0x9e>
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	dd03      	ble.n	8006c24 <__multiply+0x90>
 8006c1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05a      	beq.n	8006cda <__multiply+0x146>
 8006c24:	6106      	str	r6, [r0, #16]
 8006c26:	b005      	add	sp, #20
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	f843 2b04 	str.w	r2, [r3], #4
 8006c30:	e7d8      	b.n	8006be4 <__multiply+0x50>
 8006c32:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c36:	f1ba 0f00 	cmp.w	sl, #0
 8006c3a:	d024      	beq.n	8006c86 <__multiply+0xf2>
 8006c3c:	f104 0e14 	add.w	lr, r4, #20
 8006c40:	46a9      	mov	r9, r5
 8006c42:	f04f 0c00 	mov.w	ip, #0
 8006c46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c4a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c4e:	fa1f fb82 	uxth.w	fp, r2
 8006c52:	b289      	uxth	r1, r1
 8006c54:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c60:	4461      	add	r1, ip
 8006c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c66:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c6e:	b289      	uxth	r1, r1
 8006c70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c74:	4577      	cmp	r7, lr
 8006c76:	f849 1b04 	str.w	r1, [r9], #4
 8006c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c7e:	d8e2      	bhi.n	8006c46 <__multiply+0xb2>
 8006c80:	9a01      	ldr	r2, [sp, #4]
 8006c82:	f845 c002 	str.w	ip, [r5, r2]
 8006c86:	9a03      	ldr	r2, [sp, #12]
 8006c88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	f1b9 0f00 	cmp.w	r9, #0
 8006c92:	d020      	beq.n	8006cd6 <__multiply+0x142>
 8006c94:	6829      	ldr	r1, [r5, #0]
 8006c96:	f104 0c14 	add.w	ip, r4, #20
 8006c9a:	46ae      	mov	lr, r5
 8006c9c:	f04f 0a00 	mov.w	sl, #0
 8006ca0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ca4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ca8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cac:	4492      	add	sl, r2
 8006cae:	b289      	uxth	r1, r1
 8006cb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cb4:	f84e 1b04 	str.w	r1, [lr], #4
 8006cb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cbc:	f8be 1000 	ldrh.w	r1, [lr]
 8006cc0:	0c12      	lsrs	r2, r2, #16
 8006cc2:	fb09 1102 	mla	r1, r9, r2, r1
 8006cc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006cca:	4567      	cmp	r7, ip
 8006ccc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cd0:	d8e6      	bhi.n	8006ca0 <__multiply+0x10c>
 8006cd2:	9a01      	ldr	r2, [sp, #4]
 8006cd4:	50a9      	str	r1, [r5, r2]
 8006cd6:	3504      	adds	r5, #4
 8006cd8:	e79a      	b.n	8006c10 <__multiply+0x7c>
 8006cda:	3e01      	subs	r6, #1
 8006cdc:	e79c      	b.n	8006c18 <__multiply+0x84>
 8006cde:	bf00      	nop
 8006ce0:	08014524 	.word	0x08014524
 8006ce4:	08014632 	.word	0x08014632

08006ce8 <__pow5mult>:
 8006ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4615      	mov	r5, r2
 8006cee:	f012 0203 	ands.w	r2, r2, #3
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460f      	mov	r7, r1
 8006cf6:	d007      	beq.n	8006d08 <__pow5mult+0x20>
 8006cf8:	4c25      	ldr	r4, [pc, #148]	; (8006d90 <__pow5mult+0xa8>)
 8006cfa:	3a01      	subs	r2, #1
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d02:	f7ff fe51 	bl	80069a8 <__multadd>
 8006d06:	4607      	mov	r7, r0
 8006d08:	10ad      	asrs	r5, r5, #2
 8006d0a:	d03d      	beq.n	8006d88 <__pow5mult+0xa0>
 8006d0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d0e:	b97c      	cbnz	r4, 8006d30 <__pow5mult+0x48>
 8006d10:	2010      	movs	r0, #16
 8006d12:	f7ff fdbf 	bl	8006894 <malloc>
 8006d16:	4602      	mov	r2, r0
 8006d18:	6270      	str	r0, [r6, #36]	; 0x24
 8006d1a:	b928      	cbnz	r0, 8006d28 <__pow5mult+0x40>
 8006d1c:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <__pow5mult+0xac>)
 8006d1e:	481e      	ldr	r0, [pc, #120]	; (8006d98 <__pow5mult+0xb0>)
 8006d20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d24:	f7fe f97a 	bl	800501c <__assert_func>
 8006d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d2c:	6004      	str	r4, [r0, #0]
 8006d2e:	60c4      	str	r4, [r0, #12]
 8006d30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d38:	b94c      	cbnz	r4, 8006d4e <__pow5mult+0x66>
 8006d3a:	f240 2171 	movw	r1, #625	; 0x271
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7ff ff12 	bl	8006b68 <__i2b>
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	6003      	str	r3, [r0, #0]
 8006d4e:	f04f 0900 	mov.w	r9, #0
 8006d52:	07eb      	lsls	r3, r5, #31
 8006d54:	d50a      	bpl.n	8006d6c <__pow5mult+0x84>
 8006d56:	4639      	mov	r1, r7
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff ff1a 	bl	8006b94 <__multiply>
 8006d60:	4639      	mov	r1, r7
 8006d62:	4680      	mov	r8, r0
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff fdfd 	bl	8006964 <_Bfree>
 8006d6a:	4647      	mov	r7, r8
 8006d6c:	106d      	asrs	r5, r5, #1
 8006d6e:	d00b      	beq.n	8006d88 <__pow5mult+0xa0>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	b938      	cbnz	r0, 8006d84 <__pow5mult+0x9c>
 8006d74:	4622      	mov	r2, r4
 8006d76:	4621      	mov	r1, r4
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff ff0b 	bl	8006b94 <__multiply>
 8006d7e:	6020      	str	r0, [r4, #0]
 8006d80:	f8c0 9000 	str.w	r9, [r0]
 8006d84:	4604      	mov	r4, r0
 8006d86:	e7e4      	b.n	8006d52 <__pow5mult+0x6a>
 8006d88:	4638      	mov	r0, r7
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8e:	bf00      	nop
 8006d90:	080147a0 	.word	0x080147a0
 8006d94:	080143c8 	.word	0x080143c8
 8006d98:	08014632 	.word	0x08014632

08006d9c <__lshift>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	460c      	mov	r4, r1
 8006da2:	6849      	ldr	r1, [r1, #4]
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006daa:	68a3      	ldr	r3, [r4, #8]
 8006dac:	4607      	mov	r7, r0
 8006dae:	4691      	mov	r9, r2
 8006db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006db4:	f108 0601 	add.w	r6, r8, #1
 8006db8:	42b3      	cmp	r3, r6
 8006dba:	db0b      	blt.n	8006dd4 <__lshift+0x38>
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff fd91 	bl	80068e4 <_Balloc>
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	b948      	cbnz	r0, 8006dda <__lshift+0x3e>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	; (8006e74 <__lshift+0xd8>)
 8006dca:	482b      	ldr	r0, [pc, #172]	; (8006e78 <__lshift+0xdc>)
 8006dcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006dd0:	f7fe f924 	bl	800501c <__assert_func>
 8006dd4:	3101      	adds	r1, #1
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	e7ee      	b.n	8006db8 <__lshift+0x1c>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f100 0114 	add.w	r1, r0, #20
 8006de0:	f100 0210 	add.w	r2, r0, #16
 8006de4:	4618      	mov	r0, r3
 8006de6:	4553      	cmp	r3, sl
 8006de8:	db37      	blt.n	8006e5a <__lshift+0xbe>
 8006dea:	6920      	ldr	r0, [r4, #16]
 8006dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006df0:	f104 0314 	add.w	r3, r4, #20
 8006df4:	f019 091f 	ands.w	r9, r9, #31
 8006df8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e00:	d02f      	beq.n	8006e62 <__lshift+0xc6>
 8006e02:	f1c9 0e20 	rsb	lr, r9, #32
 8006e06:	468a      	mov	sl, r1
 8006e08:	f04f 0c00 	mov.w	ip, #0
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	fa02 f209 	lsl.w	r2, r2, r9
 8006e12:	ea42 020c 	orr.w	r2, r2, ip
 8006e16:	f84a 2b04 	str.w	r2, [sl], #4
 8006e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e24:	d8f2      	bhi.n	8006e0c <__lshift+0x70>
 8006e26:	1b03      	subs	r3, r0, r4
 8006e28:	3b15      	subs	r3, #21
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	3304      	adds	r3, #4
 8006e30:	f104 0215 	add.w	r2, r4, #21
 8006e34:	4290      	cmp	r0, r2
 8006e36:	bf38      	it	cc
 8006e38:	2304      	movcc	r3, #4
 8006e3a:	f841 c003 	str.w	ip, [r1, r3]
 8006e3e:	f1bc 0f00 	cmp.w	ip, #0
 8006e42:	d001      	beq.n	8006e48 <__lshift+0xac>
 8006e44:	f108 0602 	add.w	r6, r8, #2
 8006e48:	3e01      	subs	r6, #1
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	612e      	str	r6, [r5, #16]
 8006e4e:	4621      	mov	r1, r4
 8006e50:	f7ff fd88 	bl	8006964 <_Bfree>
 8006e54:	4628      	mov	r0, r5
 8006e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e5e:	3301      	adds	r3, #1
 8006e60:	e7c1      	b.n	8006de6 <__lshift+0x4a>
 8006e62:	3904      	subs	r1, #4
 8006e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e68:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e6c:	4298      	cmp	r0, r3
 8006e6e:	d8f9      	bhi.n	8006e64 <__lshift+0xc8>
 8006e70:	e7ea      	b.n	8006e48 <__lshift+0xac>
 8006e72:	bf00      	nop
 8006e74:	08014524 	.word	0x08014524
 8006e78:	08014632 	.word	0x08014632

08006e7c <__mcmp>:
 8006e7c:	b530      	push	{r4, r5, lr}
 8006e7e:	6902      	ldr	r2, [r0, #16]
 8006e80:	690c      	ldr	r4, [r1, #16]
 8006e82:	1b12      	subs	r2, r2, r4
 8006e84:	d10e      	bne.n	8006ea4 <__mcmp+0x28>
 8006e86:	f100 0314 	add.w	r3, r0, #20
 8006e8a:	3114      	adds	r1, #20
 8006e8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e9c:	42a5      	cmp	r5, r4
 8006e9e:	d003      	beq.n	8006ea8 <__mcmp+0x2c>
 8006ea0:	d305      	bcc.n	8006eae <__mcmp+0x32>
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	bd30      	pop	{r4, r5, pc}
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	d3f3      	bcc.n	8006e94 <__mcmp+0x18>
 8006eac:	e7fa      	b.n	8006ea4 <__mcmp+0x28>
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eb2:	e7f7      	b.n	8006ea4 <__mcmp+0x28>

08006eb4 <__mdiff>:
 8006eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	460c      	mov	r4, r1
 8006eba:	4606      	mov	r6, r0
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4690      	mov	r8, r2
 8006ec2:	f7ff ffdb 	bl	8006e7c <__mcmp>
 8006ec6:	1e05      	subs	r5, r0, #0
 8006ec8:	d110      	bne.n	8006eec <__mdiff+0x38>
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7ff fd09 	bl	80068e4 <_Balloc>
 8006ed2:	b930      	cbnz	r0, 8006ee2 <__mdiff+0x2e>
 8006ed4:	4b3a      	ldr	r3, [pc, #232]	; (8006fc0 <__mdiff+0x10c>)
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	f240 2132 	movw	r1, #562	; 0x232
 8006edc:	4839      	ldr	r0, [pc, #228]	; (8006fc4 <__mdiff+0x110>)
 8006ede:	f7fe f89d 	bl	800501c <__assert_func>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	bfa4      	itt	ge
 8006eee:	4643      	movge	r3, r8
 8006ef0:	46a0      	movge	r8, r4
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ef8:	bfa6      	itte	ge
 8006efa:	461c      	movge	r4, r3
 8006efc:	2500      	movge	r5, #0
 8006efe:	2501      	movlt	r5, #1
 8006f00:	f7ff fcf0 	bl	80068e4 <_Balloc>
 8006f04:	b920      	cbnz	r0, 8006f10 <__mdiff+0x5c>
 8006f06:	4b2e      	ldr	r3, [pc, #184]	; (8006fc0 <__mdiff+0x10c>)
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f0e:	e7e5      	b.n	8006edc <__mdiff+0x28>
 8006f10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f14:	6926      	ldr	r6, [r4, #16]
 8006f16:	60c5      	str	r5, [r0, #12]
 8006f18:	f104 0914 	add.w	r9, r4, #20
 8006f1c:	f108 0514 	add.w	r5, r8, #20
 8006f20:	f100 0e14 	add.w	lr, r0, #20
 8006f24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f2c:	f108 0210 	add.w	r2, r8, #16
 8006f30:	46f2      	mov	sl, lr
 8006f32:	2100      	movs	r1, #0
 8006f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f3c:	fa1f f883 	uxth.w	r8, r3
 8006f40:	fa11 f18b 	uxtah	r1, r1, fp
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	eba1 0808 	sub.w	r8, r1, r8
 8006f4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f52:	fa1f f888 	uxth.w	r8, r8
 8006f56:	1419      	asrs	r1, r3, #16
 8006f58:	454e      	cmp	r6, r9
 8006f5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f5e:	f84a 3b04 	str.w	r3, [sl], #4
 8006f62:	d8e7      	bhi.n	8006f34 <__mdiff+0x80>
 8006f64:	1b33      	subs	r3, r6, r4
 8006f66:	3b15      	subs	r3, #21
 8006f68:	f023 0303 	bic.w	r3, r3, #3
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	3415      	adds	r4, #21
 8006f70:	42a6      	cmp	r6, r4
 8006f72:	bf38      	it	cc
 8006f74:	2304      	movcc	r3, #4
 8006f76:	441d      	add	r5, r3
 8006f78:	4473      	add	r3, lr
 8006f7a:	469e      	mov	lr, r3
 8006f7c:	462e      	mov	r6, r5
 8006f7e:	4566      	cmp	r6, ip
 8006f80:	d30e      	bcc.n	8006fa0 <__mdiff+0xec>
 8006f82:	f10c 0203 	add.w	r2, ip, #3
 8006f86:	1b52      	subs	r2, r2, r5
 8006f88:	f022 0203 	bic.w	r2, r2, #3
 8006f8c:	3d03      	subs	r5, #3
 8006f8e:	45ac      	cmp	ip, r5
 8006f90:	bf38      	it	cc
 8006f92:	2200      	movcc	r2, #0
 8006f94:	441a      	add	r2, r3
 8006f96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f9a:	b17b      	cbz	r3, 8006fbc <__mdiff+0x108>
 8006f9c:	6107      	str	r7, [r0, #16]
 8006f9e:	e7a3      	b.n	8006ee8 <__mdiff+0x34>
 8006fa0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fa4:	fa11 f288 	uxtah	r2, r1, r8
 8006fa8:	1414      	asrs	r4, r2, #16
 8006faa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fb4:	f84e 2b04 	str.w	r2, [lr], #4
 8006fb8:	1421      	asrs	r1, r4, #16
 8006fba:	e7e0      	b.n	8006f7e <__mdiff+0xca>
 8006fbc:	3f01      	subs	r7, #1
 8006fbe:	e7ea      	b.n	8006f96 <__mdiff+0xe2>
 8006fc0:	08014524 	.word	0x08014524
 8006fc4:	08014632 	.word	0x08014632

08006fc8 <__ulp>:
 8006fc8:	b082      	sub	sp, #8
 8006fca:	ed8d 0b00 	vstr	d0, [sp]
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	4912      	ldr	r1, [pc, #72]	; (800701c <__ulp+0x54>)
 8006fd2:	4019      	ands	r1, r3
 8006fd4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	dd05      	ble.n	8006fe8 <__ulp+0x20>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	ec43 2b10 	vmov	d0, r2, r3
 8006fe4:	b002      	add	sp, #8
 8006fe6:	4770      	bx	lr
 8006fe8:	4249      	negs	r1, r1
 8006fea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006fee:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	da04      	bge.n	8007006 <__ulp+0x3e>
 8006ffc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007000:	fa41 f300 	asr.w	r3, r1, r0
 8007004:	e7ec      	b.n	8006fe0 <__ulp+0x18>
 8007006:	f1a0 0114 	sub.w	r1, r0, #20
 800700a:	291e      	cmp	r1, #30
 800700c:	bfda      	itte	le
 800700e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007012:	fa20 f101 	lsrle.w	r1, r0, r1
 8007016:	2101      	movgt	r1, #1
 8007018:	460a      	mov	r2, r1
 800701a:	e7e1      	b.n	8006fe0 <__ulp+0x18>
 800701c:	7ff00000 	.word	0x7ff00000

08007020 <__b2d>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	6905      	ldr	r5, [r0, #16]
 8007024:	f100 0714 	add.w	r7, r0, #20
 8007028:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800702c:	1f2e      	subs	r6, r5, #4
 800702e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff fd48 	bl	8006ac8 <__hi0bits>
 8007038:	f1c0 0320 	rsb	r3, r0, #32
 800703c:	280a      	cmp	r0, #10
 800703e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80070bc <__b2d+0x9c>
 8007042:	600b      	str	r3, [r1, #0]
 8007044:	dc14      	bgt.n	8007070 <__b2d+0x50>
 8007046:	f1c0 0e0b 	rsb	lr, r0, #11
 800704a:	fa24 f10e 	lsr.w	r1, r4, lr
 800704e:	42b7      	cmp	r7, r6
 8007050:	ea41 030c 	orr.w	r3, r1, ip
 8007054:	bf34      	ite	cc
 8007056:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800705a:	2100      	movcs	r1, #0
 800705c:	3015      	adds	r0, #21
 800705e:	fa04 f000 	lsl.w	r0, r4, r0
 8007062:	fa21 f10e 	lsr.w	r1, r1, lr
 8007066:	ea40 0201 	orr.w	r2, r0, r1
 800706a:	ec43 2b10 	vmov	d0, r2, r3
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007070:	42b7      	cmp	r7, r6
 8007072:	bf3a      	itte	cc
 8007074:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007078:	f1a5 0608 	subcc.w	r6, r5, #8
 800707c:	2100      	movcs	r1, #0
 800707e:	380b      	subs	r0, #11
 8007080:	d017      	beq.n	80070b2 <__b2d+0x92>
 8007082:	f1c0 0c20 	rsb	ip, r0, #32
 8007086:	fa04 f500 	lsl.w	r5, r4, r0
 800708a:	42be      	cmp	r6, r7
 800708c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007090:	ea45 0504 	orr.w	r5, r5, r4
 8007094:	bf8c      	ite	hi
 8007096:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800709a:	2400      	movls	r4, #0
 800709c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80070a0:	fa01 f000 	lsl.w	r0, r1, r0
 80070a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80070a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070ac:	ea40 0204 	orr.w	r2, r0, r4
 80070b0:	e7db      	b.n	800706a <__b2d+0x4a>
 80070b2:	ea44 030c 	orr.w	r3, r4, ip
 80070b6:	460a      	mov	r2, r1
 80070b8:	e7d7      	b.n	800706a <__b2d+0x4a>
 80070ba:	bf00      	nop
 80070bc:	3ff00000 	.word	0x3ff00000

080070c0 <__d2b>:
 80070c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	4689      	mov	r9, r1
 80070c6:	2101      	movs	r1, #1
 80070c8:	ec57 6b10 	vmov	r6, r7, d0
 80070cc:	4690      	mov	r8, r2
 80070ce:	f7ff fc09 	bl	80068e4 <_Balloc>
 80070d2:	4604      	mov	r4, r0
 80070d4:	b930      	cbnz	r0, 80070e4 <__d2b+0x24>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b25      	ldr	r3, [pc, #148]	; (8007170 <__d2b+0xb0>)
 80070da:	4826      	ldr	r0, [pc, #152]	; (8007174 <__d2b+0xb4>)
 80070dc:	f240 310a 	movw	r1, #778	; 0x30a
 80070e0:	f7fd ff9c 	bl	800501c <__assert_func>
 80070e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80070e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070ec:	bb35      	cbnz	r5, 800713c <__d2b+0x7c>
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	d028      	beq.n	8007146 <__d2b+0x86>
 80070f4:	4668      	mov	r0, sp
 80070f6:	9600      	str	r6, [sp, #0]
 80070f8:	f7ff fd06 	bl	8006b08 <__lo0bits>
 80070fc:	9900      	ldr	r1, [sp, #0]
 80070fe:	b300      	cbz	r0, 8007142 <__d2b+0x82>
 8007100:	9a01      	ldr	r2, [sp, #4]
 8007102:	f1c0 0320 	rsb	r3, r0, #32
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	430b      	orrs	r3, r1
 800710c:	40c2      	lsrs	r2, r0
 800710e:	6163      	str	r3, [r4, #20]
 8007110:	9201      	str	r2, [sp, #4]
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	61a3      	str	r3, [r4, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	bf14      	ite	ne
 800711a:	2202      	movne	r2, #2
 800711c:	2201      	moveq	r2, #1
 800711e:	6122      	str	r2, [r4, #16]
 8007120:	b1d5      	cbz	r5, 8007158 <__d2b+0x98>
 8007122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007126:	4405      	add	r5, r0
 8007128:	f8c9 5000 	str.w	r5, [r9]
 800712c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007130:	f8c8 0000 	str.w	r0, [r8]
 8007134:	4620      	mov	r0, r4
 8007136:	b003      	add	sp, #12
 8007138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800713c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007140:	e7d5      	b.n	80070ee <__d2b+0x2e>
 8007142:	6161      	str	r1, [r4, #20]
 8007144:	e7e5      	b.n	8007112 <__d2b+0x52>
 8007146:	a801      	add	r0, sp, #4
 8007148:	f7ff fcde 	bl	8006b08 <__lo0bits>
 800714c:	9b01      	ldr	r3, [sp, #4]
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	2201      	movs	r2, #1
 8007152:	6122      	str	r2, [r4, #16]
 8007154:	3020      	adds	r0, #32
 8007156:	e7e3      	b.n	8007120 <__d2b+0x60>
 8007158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800715c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007160:	f8c9 0000 	str.w	r0, [r9]
 8007164:	6918      	ldr	r0, [r3, #16]
 8007166:	f7ff fcaf 	bl	8006ac8 <__hi0bits>
 800716a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800716e:	e7df      	b.n	8007130 <__d2b+0x70>
 8007170:	08014524 	.word	0x08014524
 8007174:	08014632 	.word	0x08014632

08007178 <__ratio>:
 8007178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	4688      	mov	r8, r1
 800717e:	4669      	mov	r1, sp
 8007180:	4681      	mov	r9, r0
 8007182:	f7ff ff4d 	bl	8007020 <__b2d>
 8007186:	a901      	add	r1, sp, #4
 8007188:	4640      	mov	r0, r8
 800718a:	ec55 4b10 	vmov	r4, r5, d0
 800718e:	f7ff ff47 	bl	8007020 <__b2d>
 8007192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007196:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800719a:	eba3 0c02 	sub.w	ip, r3, r2
 800719e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80071a8:	ec51 0b10 	vmov	r0, r1, d0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfd6      	itet	le
 80071b0:	460a      	movle	r2, r1
 80071b2:	462a      	movgt	r2, r5
 80071b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071b8:	468b      	mov	fp, r1
 80071ba:	462f      	mov	r7, r5
 80071bc:	bfd4      	ite	le
 80071be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80071c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80071c6:	4620      	mov	r0, r4
 80071c8:	ee10 2a10 	vmov	r2, s0
 80071cc:	465b      	mov	r3, fp
 80071ce:	4639      	mov	r1, r7
 80071d0:	f7f9 fb64 	bl	800089c <__aeabi_ddiv>
 80071d4:	ec41 0b10 	vmov	d0, r0, r1
 80071d8:	b003      	add	sp, #12
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071de <__copybits>:
 80071de:	3901      	subs	r1, #1
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	1149      	asrs	r1, r1, #5
 80071e4:	6914      	ldr	r4, [r2, #16]
 80071e6:	3101      	adds	r1, #1
 80071e8:	f102 0314 	add.w	r3, r2, #20
 80071ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071f4:	1f05      	subs	r5, r0, #4
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	d30c      	bcc.n	8007214 <__copybits+0x36>
 80071fa:	1aa3      	subs	r3, r4, r2
 80071fc:	3b11      	subs	r3, #17
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	3211      	adds	r2, #17
 8007204:	42a2      	cmp	r2, r4
 8007206:	bf88      	it	hi
 8007208:	2300      	movhi	r3, #0
 800720a:	4418      	add	r0, r3
 800720c:	2300      	movs	r3, #0
 800720e:	4288      	cmp	r0, r1
 8007210:	d305      	bcc.n	800721e <__copybits+0x40>
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	f853 6b04 	ldr.w	r6, [r3], #4
 8007218:	f845 6f04 	str.w	r6, [r5, #4]!
 800721c:	e7eb      	b.n	80071f6 <__copybits+0x18>
 800721e:	f840 3b04 	str.w	r3, [r0], #4
 8007222:	e7f4      	b.n	800720e <__copybits+0x30>

08007224 <__any_on>:
 8007224:	f100 0214 	add.w	r2, r0, #20
 8007228:	6900      	ldr	r0, [r0, #16]
 800722a:	114b      	asrs	r3, r1, #5
 800722c:	4298      	cmp	r0, r3
 800722e:	b510      	push	{r4, lr}
 8007230:	db11      	blt.n	8007256 <__any_on+0x32>
 8007232:	dd0a      	ble.n	800724a <__any_on+0x26>
 8007234:	f011 011f 	ands.w	r1, r1, #31
 8007238:	d007      	beq.n	800724a <__any_on+0x26>
 800723a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800723e:	fa24 f001 	lsr.w	r0, r4, r1
 8007242:	fa00 f101 	lsl.w	r1, r0, r1
 8007246:	428c      	cmp	r4, r1
 8007248:	d10b      	bne.n	8007262 <__any_on+0x3e>
 800724a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800724e:	4293      	cmp	r3, r2
 8007250:	d803      	bhi.n	800725a <__any_on+0x36>
 8007252:	2000      	movs	r0, #0
 8007254:	bd10      	pop	{r4, pc}
 8007256:	4603      	mov	r3, r0
 8007258:	e7f7      	b.n	800724a <__any_on+0x26>
 800725a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800725e:	2900      	cmp	r1, #0
 8007260:	d0f5      	beq.n	800724e <__any_on+0x2a>
 8007262:	2001      	movs	r0, #1
 8007264:	e7f6      	b.n	8007254 <__any_on+0x30>

08007266 <_calloc_r>:
 8007266:	b513      	push	{r0, r1, r4, lr}
 8007268:	434a      	muls	r2, r1
 800726a:	4611      	mov	r1, r2
 800726c:	9201      	str	r2, [sp, #4]
 800726e:	f000 f855 	bl	800731c <_malloc_r>
 8007272:	4604      	mov	r4, r0
 8007274:	b118      	cbz	r0, 800727e <_calloc_r+0x18>
 8007276:	9a01      	ldr	r2, [sp, #4]
 8007278:	2100      	movs	r1, #0
 800727a:	f7fc fa8f 	bl	800379c <memset>
 800727e:	4620      	mov	r0, r4
 8007280:	b002      	add	sp, #8
 8007282:	bd10      	pop	{r4, pc}

08007284 <_free_r>:
 8007284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007286:	2900      	cmp	r1, #0
 8007288:	d044      	beq.n	8007314 <_free_r+0x90>
 800728a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800728e:	9001      	str	r0, [sp, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f1a1 0404 	sub.w	r4, r1, #4
 8007296:	bfb8      	it	lt
 8007298:	18e4      	addlt	r4, r4, r3
 800729a:	f000 fb45 	bl	8007928 <__malloc_lock>
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <_free_r+0x94>)
 80072a0:	9801      	ldr	r0, [sp, #4]
 80072a2:	6813      	ldr	r3, [r2, #0]
 80072a4:	b933      	cbnz	r3, 80072b4 <_free_r+0x30>
 80072a6:	6063      	str	r3, [r4, #4]
 80072a8:	6014      	str	r4, [r2, #0]
 80072aa:	b003      	add	sp, #12
 80072ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072b0:	f000 bb40 	b.w	8007934 <__malloc_unlock>
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	d908      	bls.n	80072ca <_free_r+0x46>
 80072b8:	6825      	ldr	r5, [r4, #0]
 80072ba:	1961      	adds	r1, r4, r5
 80072bc:	428b      	cmp	r3, r1
 80072be:	bf01      	itttt	eq
 80072c0:	6819      	ldreq	r1, [r3, #0]
 80072c2:	685b      	ldreq	r3, [r3, #4]
 80072c4:	1949      	addeq	r1, r1, r5
 80072c6:	6021      	streq	r1, [r4, #0]
 80072c8:	e7ed      	b.n	80072a6 <_free_r+0x22>
 80072ca:	461a      	mov	r2, r3
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	b10b      	cbz	r3, 80072d4 <_free_r+0x50>
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d9fa      	bls.n	80072ca <_free_r+0x46>
 80072d4:	6811      	ldr	r1, [r2, #0]
 80072d6:	1855      	adds	r5, r2, r1
 80072d8:	42a5      	cmp	r5, r4
 80072da:	d10b      	bne.n	80072f4 <_free_r+0x70>
 80072dc:	6824      	ldr	r4, [r4, #0]
 80072de:	4421      	add	r1, r4
 80072e0:	1854      	adds	r4, r2, r1
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	d1e0      	bne.n	80072aa <_free_r+0x26>
 80072e8:	681c      	ldr	r4, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	6053      	str	r3, [r2, #4]
 80072ee:	4421      	add	r1, r4
 80072f0:	6011      	str	r1, [r2, #0]
 80072f2:	e7da      	b.n	80072aa <_free_r+0x26>
 80072f4:	d902      	bls.n	80072fc <_free_r+0x78>
 80072f6:	230c      	movs	r3, #12
 80072f8:	6003      	str	r3, [r0, #0]
 80072fa:	e7d6      	b.n	80072aa <_free_r+0x26>
 80072fc:	6825      	ldr	r5, [r4, #0]
 80072fe:	1961      	adds	r1, r4, r5
 8007300:	428b      	cmp	r3, r1
 8007302:	bf04      	itt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	bf04      	itt	eq
 800730c:	1949      	addeq	r1, r1, r5
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	6054      	str	r4, [r2, #4]
 8007312:	e7ca      	b.n	80072aa <_free_r+0x26>
 8007314:	b003      	add	sp, #12
 8007316:	bd30      	pop	{r4, r5, pc}
 8007318:	20000ce8 	.word	0x20000ce8

0800731c <_malloc_r>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	1ccd      	adds	r5, r1, #3
 8007320:	f025 0503 	bic.w	r5, r5, #3
 8007324:	3508      	adds	r5, #8
 8007326:	2d0c      	cmp	r5, #12
 8007328:	bf38      	it	cc
 800732a:	250c      	movcc	r5, #12
 800732c:	2d00      	cmp	r5, #0
 800732e:	4606      	mov	r6, r0
 8007330:	db01      	blt.n	8007336 <_malloc_r+0x1a>
 8007332:	42a9      	cmp	r1, r5
 8007334:	d903      	bls.n	800733e <_malloc_r+0x22>
 8007336:	230c      	movs	r3, #12
 8007338:	6033      	str	r3, [r6, #0]
 800733a:	2000      	movs	r0, #0
 800733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733e:	f000 faf3 	bl	8007928 <__malloc_lock>
 8007342:	4921      	ldr	r1, [pc, #132]	; (80073c8 <_malloc_r+0xac>)
 8007344:	680a      	ldr	r2, [r1, #0]
 8007346:	4614      	mov	r4, r2
 8007348:	b99c      	cbnz	r4, 8007372 <_malloc_r+0x56>
 800734a:	4f20      	ldr	r7, [pc, #128]	; (80073cc <_malloc_r+0xb0>)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	b923      	cbnz	r3, 800735a <_malloc_r+0x3e>
 8007350:	4621      	mov	r1, r4
 8007352:	4630      	mov	r0, r6
 8007354:	f7fb fd78 	bl	8002e48 <_sbrk_r>
 8007358:	6038      	str	r0, [r7, #0]
 800735a:	4629      	mov	r1, r5
 800735c:	4630      	mov	r0, r6
 800735e:	f7fb fd73 	bl	8002e48 <_sbrk_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d123      	bne.n	80073ae <_malloc_r+0x92>
 8007366:	230c      	movs	r3, #12
 8007368:	6033      	str	r3, [r6, #0]
 800736a:	4630      	mov	r0, r6
 800736c:	f000 fae2 	bl	8007934 <__malloc_unlock>
 8007370:	e7e3      	b.n	800733a <_malloc_r+0x1e>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	1b5b      	subs	r3, r3, r5
 8007376:	d417      	bmi.n	80073a8 <_malloc_r+0x8c>
 8007378:	2b0b      	cmp	r3, #11
 800737a:	d903      	bls.n	8007384 <_malloc_r+0x68>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	441c      	add	r4, r3
 8007380:	6025      	str	r5, [r4, #0]
 8007382:	e004      	b.n	800738e <_malloc_r+0x72>
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	42a2      	cmp	r2, r4
 8007388:	bf0c      	ite	eq
 800738a:	600b      	streq	r3, [r1, #0]
 800738c:	6053      	strne	r3, [r2, #4]
 800738e:	4630      	mov	r0, r6
 8007390:	f000 fad0 	bl	8007934 <__malloc_unlock>
 8007394:	f104 000b 	add.w	r0, r4, #11
 8007398:	1d23      	adds	r3, r4, #4
 800739a:	f020 0007 	bic.w	r0, r0, #7
 800739e:	1ac2      	subs	r2, r0, r3
 80073a0:	d0cc      	beq.n	800733c <_malloc_r+0x20>
 80073a2:	1a1b      	subs	r3, r3, r0
 80073a4:	50a3      	str	r3, [r4, r2]
 80073a6:	e7c9      	b.n	800733c <_malloc_r+0x20>
 80073a8:	4622      	mov	r2, r4
 80073aa:	6864      	ldr	r4, [r4, #4]
 80073ac:	e7cc      	b.n	8007348 <_malloc_r+0x2c>
 80073ae:	1cc4      	adds	r4, r0, #3
 80073b0:	f024 0403 	bic.w	r4, r4, #3
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	d0e3      	beq.n	8007380 <_malloc_r+0x64>
 80073b8:	1a21      	subs	r1, r4, r0
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7fb fd44 	bl	8002e48 <_sbrk_r>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d1dd      	bne.n	8007380 <_malloc_r+0x64>
 80073c4:	e7cf      	b.n	8007366 <_malloc_r+0x4a>
 80073c6:	bf00      	nop
 80073c8:	20000ce8 	.word	0x20000ce8
 80073cc:	20000cec 	.word	0x20000cec

080073d0 <__sfputc_r>:
 80073d0:	6893      	ldr	r3, [r2, #8]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	b410      	push	{r4}
 80073d8:	6093      	str	r3, [r2, #8]
 80073da:	da08      	bge.n	80073ee <__sfputc_r+0x1e>
 80073dc:	6994      	ldr	r4, [r2, #24]
 80073de:	42a3      	cmp	r3, r4
 80073e0:	db01      	blt.n	80073e6 <__sfputc_r+0x16>
 80073e2:	290a      	cmp	r1, #10
 80073e4:	d103      	bne.n	80073ee <__sfputc_r+0x1e>
 80073e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ea:	f000 b9ad 	b.w	8007748 <__swbuf_r>
 80073ee:	6813      	ldr	r3, [r2, #0]
 80073f0:	1c58      	adds	r0, r3, #1
 80073f2:	6010      	str	r0, [r2, #0]
 80073f4:	7019      	strb	r1, [r3, #0]
 80073f6:	4608      	mov	r0, r1
 80073f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <__sfputs_r>:
 80073fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
 8007404:	4614      	mov	r4, r2
 8007406:	18d5      	adds	r5, r2, r3
 8007408:	42ac      	cmp	r4, r5
 800740a:	d101      	bne.n	8007410 <__sfputs_r+0x12>
 800740c:	2000      	movs	r0, #0
 800740e:	e007      	b.n	8007420 <__sfputs_r+0x22>
 8007410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007414:	463a      	mov	r2, r7
 8007416:	4630      	mov	r0, r6
 8007418:	f7ff ffda 	bl	80073d0 <__sfputc_r>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d1f3      	bne.n	8007408 <__sfputs_r+0xa>
 8007420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007424 <_vfiprintf_r>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	460d      	mov	r5, r1
 800742a:	b09d      	sub	sp, #116	; 0x74
 800742c:	4614      	mov	r4, r2
 800742e:	4698      	mov	r8, r3
 8007430:	4606      	mov	r6, r0
 8007432:	b118      	cbz	r0, 800743c <_vfiprintf_r+0x18>
 8007434:	6983      	ldr	r3, [r0, #24]
 8007436:	b90b      	cbnz	r3, 800743c <_vfiprintf_r+0x18>
 8007438:	f7fe fda2 	bl	8005f80 <__sinit>
 800743c:	4b89      	ldr	r3, [pc, #548]	; (8007664 <_vfiprintf_r+0x240>)
 800743e:	429d      	cmp	r5, r3
 8007440:	d11b      	bne.n	800747a <_vfiprintf_r+0x56>
 8007442:	6875      	ldr	r5, [r6, #4]
 8007444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007446:	07d9      	lsls	r1, r3, #31
 8007448:	d405      	bmi.n	8007456 <_vfiprintf_r+0x32>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	059a      	lsls	r2, r3, #22
 800744e:	d402      	bmi.n	8007456 <_vfiprintf_r+0x32>
 8007450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007452:	f7ff f9b8 	bl	80067c6 <__retarget_lock_acquire_recursive>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	071b      	lsls	r3, r3, #28
 800745a:	d501      	bpl.n	8007460 <_vfiprintf_r+0x3c>
 800745c:	692b      	ldr	r3, [r5, #16]
 800745e:	b9eb      	cbnz	r3, 800749c <_vfiprintf_r+0x78>
 8007460:	4629      	mov	r1, r5
 8007462:	4630      	mov	r0, r6
 8007464:	f000 f9d0 	bl	8007808 <__swsetup_r>
 8007468:	b1c0      	cbz	r0, 800749c <_vfiprintf_r+0x78>
 800746a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800746c:	07dc      	lsls	r4, r3, #31
 800746e:	d50e      	bpl.n	800748e <_vfiprintf_r+0x6a>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007474:	b01d      	add	sp, #116	; 0x74
 8007476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747a:	4b7b      	ldr	r3, [pc, #492]	; (8007668 <_vfiprintf_r+0x244>)
 800747c:	429d      	cmp	r5, r3
 800747e:	d101      	bne.n	8007484 <_vfiprintf_r+0x60>
 8007480:	68b5      	ldr	r5, [r6, #8]
 8007482:	e7df      	b.n	8007444 <_vfiprintf_r+0x20>
 8007484:	4b79      	ldr	r3, [pc, #484]	; (800766c <_vfiprintf_r+0x248>)
 8007486:	429d      	cmp	r5, r3
 8007488:	bf08      	it	eq
 800748a:	68f5      	ldreq	r5, [r6, #12]
 800748c:	e7da      	b.n	8007444 <_vfiprintf_r+0x20>
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	0598      	lsls	r0, r3, #22
 8007492:	d4ed      	bmi.n	8007470 <_vfiprintf_r+0x4c>
 8007494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007496:	f7ff f997 	bl	80067c8 <__retarget_lock_release_recursive>
 800749a:	e7e9      	b.n	8007470 <_vfiprintf_r+0x4c>
 800749c:	2300      	movs	r3, #0
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	2320      	movs	r3, #32
 80074a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074aa:	2330      	movs	r3, #48	; 0x30
 80074ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007670 <_vfiprintf_r+0x24c>
 80074b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074b4:	f04f 0901 	mov.w	r9, #1
 80074b8:	4623      	mov	r3, r4
 80074ba:	469a      	mov	sl, r3
 80074bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c0:	b10a      	cbz	r2, 80074c6 <_vfiprintf_r+0xa2>
 80074c2:	2a25      	cmp	r2, #37	; 0x25
 80074c4:	d1f9      	bne.n	80074ba <_vfiprintf_r+0x96>
 80074c6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ca:	d00b      	beq.n	80074e4 <_vfiprintf_r+0xc0>
 80074cc:	465b      	mov	r3, fp
 80074ce:	4622      	mov	r2, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ff93 	bl	80073fe <__sfputs_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	f000 80aa 	beq.w	8007632 <_vfiprintf_r+0x20e>
 80074de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e0:	445a      	add	r2, fp
 80074e2:	9209      	str	r2, [sp, #36]	; 0x24
 80074e4:	f89a 3000 	ldrb.w	r3, [sl]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 80a2 	beq.w	8007632 <_vfiprintf_r+0x20e>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f8:	f10a 0a01 	add.w	sl, sl, #1
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007504:	931a      	str	r3, [sp, #104]	; 0x68
 8007506:	4654      	mov	r4, sl
 8007508:	2205      	movs	r2, #5
 800750a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750e:	4858      	ldr	r0, [pc, #352]	; (8007670 <_vfiprintf_r+0x24c>)
 8007510:	f7f8 fe8e 	bl	8000230 <memchr>
 8007514:	9a04      	ldr	r2, [sp, #16]
 8007516:	b9d8      	cbnz	r0, 8007550 <_vfiprintf_r+0x12c>
 8007518:	06d1      	lsls	r1, r2, #27
 800751a:	bf44      	itt	mi
 800751c:	2320      	movmi	r3, #32
 800751e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007522:	0713      	lsls	r3, r2, #28
 8007524:	bf44      	itt	mi
 8007526:	232b      	movmi	r3, #43	; 0x2b
 8007528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752c:	f89a 3000 	ldrb.w	r3, [sl]
 8007530:	2b2a      	cmp	r3, #42	; 0x2a
 8007532:	d015      	beq.n	8007560 <_vfiprintf_r+0x13c>
 8007534:	9a07      	ldr	r2, [sp, #28]
 8007536:	4654      	mov	r4, sl
 8007538:	2000      	movs	r0, #0
 800753a:	f04f 0c0a 	mov.w	ip, #10
 800753e:	4621      	mov	r1, r4
 8007540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007544:	3b30      	subs	r3, #48	; 0x30
 8007546:	2b09      	cmp	r3, #9
 8007548:	d94e      	bls.n	80075e8 <_vfiprintf_r+0x1c4>
 800754a:	b1b0      	cbz	r0, 800757a <_vfiprintf_r+0x156>
 800754c:	9207      	str	r2, [sp, #28]
 800754e:	e014      	b.n	800757a <_vfiprintf_r+0x156>
 8007550:	eba0 0308 	sub.w	r3, r0, r8
 8007554:	fa09 f303 	lsl.w	r3, r9, r3
 8007558:	4313      	orrs	r3, r2
 800755a:	9304      	str	r3, [sp, #16]
 800755c:	46a2      	mov	sl, r4
 800755e:	e7d2      	b.n	8007506 <_vfiprintf_r+0xe2>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	1d19      	adds	r1, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	9103      	str	r1, [sp, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	bfbb      	ittet	lt
 800756c:	425b      	neglt	r3, r3
 800756e:	f042 0202 	orrlt.w	r2, r2, #2
 8007572:	9307      	strge	r3, [sp, #28]
 8007574:	9307      	strlt	r3, [sp, #28]
 8007576:	bfb8      	it	lt
 8007578:	9204      	strlt	r2, [sp, #16]
 800757a:	7823      	ldrb	r3, [r4, #0]
 800757c:	2b2e      	cmp	r3, #46	; 0x2e
 800757e:	d10c      	bne.n	800759a <_vfiprintf_r+0x176>
 8007580:	7863      	ldrb	r3, [r4, #1]
 8007582:	2b2a      	cmp	r3, #42	; 0x2a
 8007584:	d135      	bne.n	80075f2 <_vfiprintf_r+0x1ce>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	1d1a      	adds	r2, r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	9203      	str	r2, [sp, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007596:	3402      	adds	r4, #2
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007680 <_vfiprintf_r+0x25c>
 800759e:	7821      	ldrb	r1, [r4, #0]
 80075a0:	2203      	movs	r2, #3
 80075a2:	4650      	mov	r0, sl
 80075a4:	f7f8 fe44 	bl	8000230 <memchr>
 80075a8:	b140      	cbz	r0, 80075bc <_vfiprintf_r+0x198>
 80075aa:	2340      	movs	r3, #64	; 0x40
 80075ac:	eba0 000a 	sub.w	r0, r0, sl
 80075b0:	fa03 f000 	lsl.w	r0, r3, r0
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	4303      	orrs	r3, r0
 80075b8:	3401      	adds	r4, #1
 80075ba:	9304      	str	r3, [sp, #16]
 80075bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c0:	482c      	ldr	r0, [pc, #176]	; (8007674 <_vfiprintf_r+0x250>)
 80075c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075c6:	2206      	movs	r2, #6
 80075c8:	f7f8 fe32 	bl	8000230 <memchr>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d03f      	beq.n	8007650 <_vfiprintf_r+0x22c>
 80075d0:	4b29      	ldr	r3, [pc, #164]	; (8007678 <_vfiprintf_r+0x254>)
 80075d2:	bb1b      	cbnz	r3, 800761c <_vfiprintf_r+0x1f8>
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	3307      	adds	r3, #7
 80075d8:	f023 0307 	bic.w	r3, r3, #7
 80075dc:	3308      	adds	r3, #8
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	443b      	add	r3, r7
 80075e4:	9309      	str	r3, [sp, #36]	; 0x24
 80075e6:	e767      	b.n	80074b8 <_vfiprintf_r+0x94>
 80075e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ec:	460c      	mov	r4, r1
 80075ee:	2001      	movs	r0, #1
 80075f0:	e7a5      	b.n	800753e <_vfiprintf_r+0x11a>
 80075f2:	2300      	movs	r3, #0
 80075f4:	3401      	adds	r4, #1
 80075f6:	9305      	str	r3, [sp, #20]
 80075f8:	4619      	mov	r1, r3
 80075fa:	f04f 0c0a 	mov.w	ip, #10
 80075fe:	4620      	mov	r0, r4
 8007600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007604:	3a30      	subs	r2, #48	; 0x30
 8007606:	2a09      	cmp	r2, #9
 8007608:	d903      	bls.n	8007612 <_vfiprintf_r+0x1ee>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0c5      	beq.n	800759a <_vfiprintf_r+0x176>
 800760e:	9105      	str	r1, [sp, #20]
 8007610:	e7c3      	b.n	800759a <_vfiprintf_r+0x176>
 8007612:	fb0c 2101 	mla	r1, ip, r1, r2
 8007616:	4604      	mov	r4, r0
 8007618:	2301      	movs	r3, #1
 800761a:	e7f0      	b.n	80075fe <_vfiprintf_r+0x1da>
 800761c:	ab03      	add	r3, sp, #12
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	462a      	mov	r2, r5
 8007622:	4b16      	ldr	r3, [pc, #88]	; (800767c <_vfiprintf_r+0x258>)
 8007624:	a904      	add	r1, sp, #16
 8007626:	4630      	mov	r0, r6
 8007628:	f7fc f960 	bl	80038ec <_printf_float>
 800762c:	4607      	mov	r7, r0
 800762e:	1c78      	adds	r0, r7, #1
 8007630:	d1d6      	bne.n	80075e0 <_vfiprintf_r+0x1bc>
 8007632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007634:	07d9      	lsls	r1, r3, #31
 8007636:	d405      	bmi.n	8007644 <_vfiprintf_r+0x220>
 8007638:	89ab      	ldrh	r3, [r5, #12]
 800763a:	059a      	lsls	r2, r3, #22
 800763c:	d402      	bmi.n	8007644 <_vfiprintf_r+0x220>
 800763e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007640:	f7ff f8c2 	bl	80067c8 <__retarget_lock_release_recursive>
 8007644:	89ab      	ldrh	r3, [r5, #12]
 8007646:	065b      	lsls	r3, r3, #25
 8007648:	f53f af12 	bmi.w	8007470 <_vfiprintf_r+0x4c>
 800764c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800764e:	e711      	b.n	8007474 <_vfiprintf_r+0x50>
 8007650:	ab03      	add	r3, sp, #12
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	462a      	mov	r2, r5
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <_vfiprintf_r+0x258>)
 8007658:	a904      	add	r1, sp, #16
 800765a:	4630      	mov	r0, r6
 800765c:	f7fc fbea 	bl	8003e34 <_printf_i>
 8007660:	e7e4      	b.n	800762c <_vfiprintf_r+0x208>
 8007662:	bf00      	nop
 8007664:	08014558 	.word	0x08014558
 8007668:	08014578 	.word	0x08014578
 800766c:	08014538 	.word	0x08014538
 8007670:	080147ac 	.word	0x080147ac
 8007674:	080147b6 	.word	0x080147b6
 8007678:	080038ed 	.word	0x080038ed
 800767c:	080073ff 	.word	0x080073ff
 8007680:	080147b2 	.word	0x080147b2
 8007684:	00000000 	.word	0x00000000

08007688 <nan>:
 8007688:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007690 <nan+0x8>
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	00000000 	.word	0x00000000
 8007694:	7ff80000 	.word	0x7ff80000

08007698 <__sread>:
 8007698:	b510      	push	{r4, lr}
 800769a:	460c      	mov	r4, r1
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	f7fb fbf5 	bl	8002e8e <_read_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	bfab      	itete	ge
 80076a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076aa:	89a3      	ldrhlt	r3, [r4, #12]
 80076ac:	181b      	addge	r3, r3, r0
 80076ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076b2:	bfac      	ite	ge
 80076b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80076b6:	81a3      	strhlt	r3, [r4, #12]
 80076b8:	bd10      	pop	{r4, pc}

080076ba <__swrite>:
 80076ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	461f      	mov	r7, r3
 80076c0:	898b      	ldrh	r3, [r1, #12]
 80076c2:	05db      	lsls	r3, r3, #23
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	4616      	mov	r6, r2
 80076ca:	d505      	bpl.n	80076d8 <__swrite+0x1e>
 80076cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d0:	2302      	movs	r3, #2
 80076d2:	2200      	movs	r2, #0
 80076d4:	f7fb fbd9 	bl	8002e8a <_lseek_r>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	4632      	mov	r2, r6
 80076e6:	463b      	mov	r3, r7
 80076e8:	4628      	mov	r0, r5
 80076ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ee:	f7fb bbd3 	b.w	8002e98 <_write_r>

080076f2 <__sseek>:
 80076f2:	b510      	push	{r4, lr}
 80076f4:	460c      	mov	r4, r1
 80076f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fa:	f7fb fbc6 	bl	8002e8a <_lseek_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	bf15      	itete	ne
 8007704:	6560      	strne	r0, [r4, #84]	; 0x54
 8007706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800770a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800770e:	81a3      	strheq	r3, [r4, #12]
 8007710:	bf18      	it	ne
 8007712:	81a3      	strhne	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__sclose>:
 8007716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771a:	f7fb bbad 	b.w	8002e78 <_close_r>

0800771e <strncmp>:
 800771e:	b510      	push	{r4, lr}
 8007720:	b17a      	cbz	r2, 8007742 <strncmp+0x24>
 8007722:	4603      	mov	r3, r0
 8007724:	3901      	subs	r1, #1
 8007726:	1884      	adds	r4, r0, r2
 8007728:	f813 0b01 	ldrb.w	r0, [r3], #1
 800772c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007730:	4290      	cmp	r0, r2
 8007732:	d101      	bne.n	8007738 <strncmp+0x1a>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d101      	bne.n	800773c <strncmp+0x1e>
 8007738:	1a80      	subs	r0, r0, r2
 800773a:	bd10      	pop	{r4, pc}
 800773c:	2800      	cmp	r0, #0
 800773e:	d1f3      	bne.n	8007728 <strncmp+0xa>
 8007740:	e7fa      	b.n	8007738 <strncmp+0x1a>
 8007742:	4610      	mov	r0, r2
 8007744:	e7f9      	b.n	800773a <strncmp+0x1c>
	...

08007748 <__swbuf_r>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4614      	mov	r4, r2
 800774e:	4605      	mov	r5, r0
 8007750:	b118      	cbz	r0, 800775a <__swbuf_r+0x12>
 8007752:	6983      	ldr	r3, [r0, #24]
 8007754:	b90b      	cbnz	r3, 800775a <__swbuf_r+0x12>
 8007756:	f7fe fc13 	bl	8005f80 <__sinit>
 800775a:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <__swbuf_r+0x98>)
 800775c:	429c      	cmp	r4, r3
 800775e:	d12b      	bne.n	80077b8 <__swbuf_r+0x70>
 8007760:	686c      	ldr	r4, [r5, #4]
 8007762:	69a3      	ldr	r3, [r4, #24]
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	071a      	lsls	r2, r3, #28
 800776a:	d52f      	bpl.n	80077cc <__swbuf_r+0x84>
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	b36b      	cbz	r3, 80077cc <__swbuf_r+0x84>
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	1ac0      	subs	r0, r0, r3
 8007776:	6963      	ldr	r3, [r4, #20]
 8007778:	b2f6      	uxtb	r6, r6
 800777a:	4283      	cmp	r3, r0
 800777c:	4637      	mov	r7, r6
 800777e:	dc04      	bgt.n	800778a <__swbuf_r+0x42>
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f7fe fb68 	bl	8005e58 <_fflush_r>
 8007788:	bb30      	cbnz	r0, 80077d8 <__swbuf_r+0x90>
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	3b01      	subs	r3, #1
 800778e:	60a3      	str	r3, [r4, #8]
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	701e      	strb	r6, [r3, #0]
 8007798:	6963      	ldr	r3, [r4, #20]
 800779a:	3001      	adds	r0, #1
 800779c:	4283      	cmp	r3, r0
 800779e:	d004      	beq.n	80077aa <__swbuf_r+0x62>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	07db      	lsls	r3, r3, #31
 80077a4:	d506      	bpl.n	80077b4 <__swbuf_r+0x6c>
 80077a6:	2e0a      	cmp	r6, #10
 80077a8:	d104      	bne.n	80077b4 <__swbuf_r+0x6c>
 80077aa:	4621      	mov	r1, r4
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7fe fb53 	bl	8005e58 <_fflush_r>
 80077b2:	b988      	cbnz	r0, 80077d8 <__swbuf_r+0x90>
 80077b4:	4638      	mov	r0, r7
 80077b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <__swbuf_r+0x9c>)
 80077ba:	429c      	cmp	r4, r3
 80077bc:	d101      	bne.n	80077c2 <__swbuf_r+0x7a>
 80077be:	68ac      	ldr	r4, [r5, #8]
 80077c0:	e7cf      	b.n	8007762 <__swbuf_r+0x1a>
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <__swbuf_r+0xa0>)
 80077c4:	429c      	cmp	r4, r3
 80077c6:	bf08      	it	eq
 80077c8:	68ec      	ldreq	r4, [r5, #12]
 80077ca:	e7ca      	b.n	8007762 <__swbuf_r+0x1a>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 f81a 	bl	8007808 <__swsetup_r>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d0cb      	beq.n	8007770 <__swbuf_r+0x28>
 80077d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077dc:	e7ea      	b.n	80077b4 <__swbuf_r+0x6c>
 80077de:	bf00      	nop
 80077e0:	08014558 	.word	0x08014558
 80077e4:	08014578 	.word	0x08014578
 80077e8:	08014538 	.word	0x08014538

080077ec <__ascii_wctomb>:
 80077ec:	b149      	cbz	r1, 8007802 <__ascii_wctomb+0x16>
 80077ee:	2aff      	cmp	r2, #255	; 0xff
 80077f0:	bf85      	ittet	hi
 80077f2:	238a      	movhi	r3, #138	; 0x8a
 80077f4:	6003      	strhi	r3, [r0, #0]
 80077f6:	700a      	strbls	r2, [r1, #0]
 80077f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80077fc:	bf98      	it	ls
 80077fe:	2001      	movls	r0, #1
 8007800:	4770      	bx	lr
 8007802:	4608      	mov	r0, r1
 8007804:	4770      	bx	lr
	...

08007808 <__swsetup_r>:
 8007808:	4b32      	ldr	r3, [pc, #200]	; (80078d4 <__swsetup_r+0xcc>)
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	681d      	ldr	r5, [r3, #0]
 800780e:	4606      	mov	r6, r0
 8007810:	460c      	mov	r4, r1
 8007812:	b125      	cbz	r5, 800781e <__swsetup_r+0x16>
 8007814:	69ab      	ldr	r3, [r5, #24]
 8007816:	b913      	cbnz	r3, 800781e <__swsetup_r+0x16>
 8007818:	4628      	mov	r0, r5
 800781a:	f7fe fbb1 	bl	8005f80 <__sinit>
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <__swsetup_r+0xd0>)
 8007820:	429c      	cmp	r4, r3
 8007822:	d10f      	bne.n	8007844 <__swsetup_r+0x3c>
 8007824:	686c      	ldr	r4, [r5, #4]
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800782c:	0719      	lsls	r1, r3, #28
 800782e:	d42c      	bmi.n	800788a <__swsetup_r+0x82>
 8007830:	06dd      	lsls	r5, r3, #27
 8007832:	d411      	bmi.n	8007858 <__swsetup_r+0x50>
 8007834:	2309      	movs	r3, #9
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007842:	e03e      	b.n	80078c2 <__swsetup_r+0xba>
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <__swsetup_r+0xd4>)
 8007846:	429c      	cmp	r4, r3
 8007848:	d101      	bne.n	800784e <__swsetup_r+0x46>
 800784a:	68ac      	ldr	r4, [r5, #8]
 800784c:	e7eb      	b.n	8007826 <__swsetup_r+0x1e>
 800784e:	4b24      	ldr	r3, [pc, #144]	; (80078e0 <__swsetup_r+0xd8>)
 8007850:	429c      	cmp	r4, r3
 8007852:	bf08      	it	eq
 8007854:	68ec      	ldreq	r4, [r5, #12]
 8007856:	e7e6      	b.n	8007826 <__swsetup_r+0x1e>
 8007858:	0758      	lsls	r0, r3, #29
 800785a:	d512      	bpl.n	8007882 <__swsetup_r+0x7a>
 800785c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800785e:	b141      	cbz	r1, 8007872 <__swsetup_r+0x6a>
 8007860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007864:	4299      	cmp	r1, r3
 8007866:	d002      	beq.n	800786e <__swsetup_r+0x66>
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff fd0b 	bl	8007284 <_free_r>
 800786e:	2300      	movs	r3, #0
 8007870:	6363      	str	r3, [r4, #52]	; 0x34
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	2300      	movs	r3, #0
 800787c:	6063      	str	r3, [r4, #4]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f043 0308 	orr.w	r3, r3, #8
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	b94b      	cbnz	r3, 80078a2 <__swsetup_r+0x9a>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007898:	d003      	beq.n	80078a2 <__swsetup_r+0x9a>
 800789a:	4621      	mov	r1, r4
 800789c:	4630      	mov	r0, r6
 800789e:	f7fe ffb9 	bl	8006814 <__smakebuf_r>
 80078a2:	89a0      	ldrh	r0, [r4, #12]
 80078a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078a8:	f010 0301 	ands.w	r3, r0, #1
 80078ac:	d00a      	beq.n	80078c4 <__swsetup_r+0xbc>
 80078ae:	2300      	movs	r3, #0
 80078b0:	60a3      	str	r3, [r4, #8]
 80078b2:	6963      	ldr	r3, [r4, #20]
 80078b4:	425b      	negs	r3, r3
 80078b6:	61a3      	str	r3, [r4, #24]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	b943      	cbnz	r3, 80078ce <__swsetup_r+0xc6>
 80078bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078c0:	d1ba      	bne.n	8007838 <__swsetup_r+0x30>
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	0781      	lsls	r1, r0, #30
 80078c6:	bf58      	it	pl
 80078c8:	6963      	ldrpl	r3, [r4, #20]
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	e7f4      	b.n	80078b8 <__swsetup_r+0xb0>
 80078ce:	2000      	movs	r0, #0
 80078d0:	e7f7      	b.n	80078c2 <__swsetup_r+0xba>
 80078d2:	bf00      	nop
 80078d4:	2000001c 	.word	0x2000001c
 80078d8:	08014558 	.word	0x08014558
 80078dc:	08014578 	.word	0x08014578
 80078e0:	08014538 	.word	0x08014538

080078e4 <abort>:
 80078e4:	b508      	push	{r3, lr}
 80078e6:	2006      	movs	r0, #6
 80078e8:	f000 f878 	bl	80079dc <raise>
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7fb faf6 	bl	8002ede <_exit>

080078f2 <memmove>:
 80078f2:	4288      	cmp	r0, r1
 80078f4:	b510      	push	{r4, lr}
 80078f6:	eb01 0402 	add.w	r4, r1, r2
 80078fa:	d902      	bls.n	8007902 <memmove+0x10>
 80078fc:	4284      	cmp	r4, r0
 80078fe:	4623      	mov	r3, r4
 8007900:	d807      	bhi.n	8007912 <memmove+0x20>
 8007902:	1e43      	subs	r3, r0, #1
 8007904:	42a1      	cmp	r1, r4
 8007906:	d008      	beq.n	800791a <memmove+0x28>
 8007908:	f811 2b01 	ldrb.w	r2, [r1], #1
 800790c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007910:	e7f8      	b.n	8007904 <memmove+0x12>
 8007912:	4402      	add	r2, r0
 8007914:	4601      	mov	r1, r0
 8007916:	428a      	cmp	r2, r1
 8007918:	d100      	bne.n	800791c <memmove+0x2a>
 800791a:	bd10      	pop	{r4, pc}
 800791c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007920:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007924:	e7f7      	b.n	8007916 <memmove+0x24>
	...

08007928 <__malloc_lock>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__malloc_lock+0x8>)
 800792a:	f7fe bf4c 	b.w	80067c6 <__retarget_lock_acquire_recursive>
 800792e:	bf00      	nop
 8007930:	20000ce4 	.word	0x20000ce4

08007934 <__malloc_unlock>:
 8007934:	4801      	ldr	r0, [pc, #4]	; (800793c <__malloc_unlock+0x8>)
 8007936:	f7fe bf47 	b.w	80067c8 <__retarget_lock_release_recursive>
 800793a:	bf00      	nop
 800793c:	20000ce4 	.word	0x20000ce4

08007940 <_realloc_r>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	4607      	mov	r7, r0
 8007944:	4614      	mov	r4, r2
 8007946:	460e      	mov	r6, r1
 8007948:	b921      	cbnz	r1, 8007954 <_realloc_r+0x14>
 800794a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800794e:	4611      	mov	r1, r2
 8007950:	f7ff bce4 	b.w	800731c <_malloc_r>
 8007954:	b922      	cbnz	r2, 8007960 <_realloc_r+0x20>
 8007956:	f7ff fc95 	bl	8007284 <_free_r>
 800795a:	4625      	mov	r5, r4
 800795c:	4628      	mov	r0, r5
 800795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007960:	f000 f858 	bl	8007a14 <_malloc_usable_size_r>
 8007964:	42a0      	cmp	r0, r4
 8007966:	d20f      	bcs.n	8007988 <_realloc_r+0x48>
 8007968:	4621      	mov	r1, r4
 800796a:	4638      	mov	r0, r7
 800796c:	f7ff fcd6 	bl	800731c <_malloc_r>
 8007970:	4605      	mov	r5, r0
 8007972:	2800      	cmp	r0, #0
 8007974:	d0f2      	beq.n	800795c <_realloc_r+0x1c>
 8007976:	4631      	mov	r1, r6
 8007978:	4622      	mov	r2, r4
 800797a:	f7fe ffa5 	bl	80068c8 <memcpy>
 800797e:	4631      	mov	r1, r6
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff fc7f 	bl	8007284 <_free_r>
 8007986:	e7e9      	b.n	800795c <_realloc_r+0x1c>
 8007988:	4635      	mov	r5, r6
 800798a:	e7e7      	b.n	800795c <_realloc_r+0x1c>

0800798c <_raise_r>:
 800798c:	291f      	cmp	r1, #31
 800798e:	b538      	push	{r3, r4, r5, lr}
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	d904      	bls.n	80079a0 <_raise_r+0x14>
 8007996:	2316      	movs	r3, #22
 8007998:	6003      	str	r3, [r0, #0]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079a2:	b112      	cbz	r2, 80079aa <_raise_r+0x1e>
 80079a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079a8:	b94b      	cbnz	r3, 80079be <_raise_r+0x32>
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 f830 	bl	8007a10 <_getpid_r>
 80079b0:	462a      	mov	r2, r5
 80079b2:	4601      	mov	r1, r0
 80079b4:	4620      	mov	r0, r4
 80079b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ba:	f000 b817 	b.w	80079ec <_kill_r>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d00a      	beq.n	80079d8 <_raise_r+0x4c>
 80079c2:	1c59      	adds	r1, r3, #1
 80079c4:	d103      	bne.n	80079ce <_raise_r+0x42>
 80079c6:	2316      	movs	r3, #22
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	2001      	movs	r0, #1
 80079cc:	e7e7      	b.n	800799e <_raise_r+0x12>
 80079ce:	2400      	movs	r4, #0
 80079d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079d4:	4628      	mov	r0, r5
 80079d6:	4798      	blx	r3
 80079d8:	2000      	movs	r0, #0
 80079da:	e7e0      	b.n	800799e <_raise_r+0x12>

080079dc <raise>:
 80079dc:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <raise+0xc>)
 80079de:	4601      	mov	r1, r0
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f7ff bfd3 	b.w	800798c <_raise_r>
 80079e6:	bf00      	nop
 80079e8:	2000001c 	.word	0x2000001c

080079ec <_kill_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	; (8007a0c <_kill_r+0x20>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	f7fb fa6d 	bl	8002ed8 <_kill>
 80079fe:	1c43      	adds	r3, r0, #1
 8007a00:	d102      	bne.n	8007a08 <_kill_r+0x1c>
 8007a02:	682b      	ldr	r3, [r5, #0]
 8007a04:	b103      	cbz	r3, 8007a08 <_kill_r+0x1c>
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	bd38      	pop	{r3, r4, r5, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000cf0 	.word	0x20000cf0

08007a10 <_getpid_r>:
 8007a10:	f7fb ba66 	b.w	8002ee0 <_getpid>

08007a14 <_malloc_usable_size_r>:
 8007a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a18:	1f18      	subs	r0, r3, #4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfbc      	itt	lt
 8007a1e:	580b      	ldrlt	r3, [r1, r0]
 8007a20:	18c0      	addlt	r0, r0, r3
 8007a22:	4770      	bx	lr

08007a24 <iprintf>:
 8007a24:	b40f      	push	{r0, r1, r2, r3}
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <iprintf+0x2c>)
 8007a28:	b513      	push	{r0, r1, r4, lr}
 8007a2a:	681c      	ldr	r4, [r3, #0]
 8007a2c:	b124      	cbz	r4, 8007a38 <iprintf+0x14>
 8007a2e:	69a3      	ldr	r3, [r4, #24]
 8007a30:	b913      	cbnz	r3, 8007a38 <iprintf+0x14>
 8007a32:	4620      	mov	r0, r4
 8007a34:	f7fe faa4 	bl	8005f80 <__sinit>
 8007a38:	ab05      	add	r3, sp, #20
 8007a3a:	9a04      	ldr	r2, [sp, #16]
 8007a3c:	68a1      	ldr	r1, [r4, #8]
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7ff fcef 	bl	8007424 <_vfiprintf_r>
 8007a46:	b002      	add	sp, #8
 8007a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4c:	b004      	add	sp, #16
 8007a4e:	4770      	bx	lr
 8007a50:	2000001c 	.word	0x2000001c

08007a54 <putchar>:
 8007a54:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <putchar+0x28>)
 8007a56:	b513      	push	{r0, r1, r4, lr}
 8007a58:	681c      	ldr	r4, [r3, #0]
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	b134      	cbz	r4, 8007a6c <putchar+0x18>
 8007a5e:	69a3      	ldr	r3, [r4, #24]
 8007a60:	b923      	cbnz	r3, 8007a6c <putchar+0x18>
 8007a62:	9001      	str	r0, [sp, #4]
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7fe fa8b 	bl	8005f80 <__sinit>
 8007a6a:	9901      	ldr	r1, [sp, #4]
 8007a6c:	68a2      	ldr	r2, [r4, #8]
 8007a6e:	4620      	mov	r0, r4
 8007a70:	b002      	add	sp, #8
 8007a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a76:	f000 ba31 	b.w	8007edc <_putc_r>
 8007a7a:	bf00      	nop
 8007a7c:	2000001c 	.word	0x2000001c

08007a80 <_puts_r>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	460e      	mov	r6, r1
 8007a84:	4605      	mov	r5, r0
 8007a86:	b118      	cbz	r0, 8007a90 <_puts_r+0x10>
 8007a88:	6983      	ldr	r3, [r0, #24]
 8007a8a:	b90b      	cbnz	r3, 8007a90 <_puts_r+0x10>
 8007a8c:	f7fe fa78 	bl	8005f80 <__sinit>
 8007a90:	69ab      	ldr	r3, [r5, #24]
 8007a92:	68ac      	ldr	r4, [r5, #8]
 8007a94:	b913      	cbnz	r3, 8007a9c <_puts_r+0x1c>
 8007a96:	4628      	mov	r0, r5
 8007a98:	f7fe fa72 	bl	8005f80 <__sinit>
 8007a9c:	4b2c      	ldr	r3, [pc, #176]	; (8007b50 <_puts_r+0xd0>)
 8007a9e:	429c      	cmp	r4, r3
 8007aa0:	d120      	bne.n	8007ae4 <_puts_r+0x64>
 8007aa2:	686c      	ldr	r4, [r5, #4]
 8007aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aa6:	07db      	lsls	r3, r3, #31
 8007aa8:	d405      	bmi.n	8007ab6 <_puts_r+0x36>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	0598      	lsls	r0, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_puts_r+0x36>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab2:	f7fe fe88 	bl	80067c6 <__retarget_lock_acquire_recursive>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	0719      	lsls	r1, r3, #28
 8007aba:	d51d      	bpl.n	8007af8 <_puts_r+0x78>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	b1db      	cbz	r3, 8007af8 <_puts_r+0x78>
 8007ac0:	3e01      	subs	r6, #1
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	bb39      	cbnz	r1, 8007b1e <_puts_r+0x9e>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da38      	bge.n	8007b44 <_puts_r+0xc4>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	210a      	movs	r1, #10
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7ff fe36 	bl	8007748 <__swbuf_r>
 8007adc:	3001      	adds	r0, #1
 8007ade:	d011      	beq.n	8007b04 <_puts_r+0x84>
 8007ae0:	250a      	movs	r5, #10
 8007ae2:	e011      	b.n	8007b08 <_puts_r+0x88>
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <_puts_r+0xd4>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d101      	bne.n	8007aee <_puts_r+0x6e>
 8007aea:	68ac      	ldr	r4, [r5, #8]
 8007aec:	e7da      	b.n	8007aa4 <_puts_r+0x24>
 8007aee:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <_puts_r+0xd8>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	bf08      	it	eq
 8007af4:	68ec      	ldreq	r4, [r5, #12]
 8007af6:	e7d5      	b.n	8007aa4 <_puts_r+0x24>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7ff fe84 	bl	8007808 <__swsetup_r>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d0dd      	beq.n	8007ac0 <_puts_r+0x40>
 8007b04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b0a:	07da      	lsls	r2, r3, #31
 8007b0c:	d405      	bmi.n	8007b1a <_puts_r+0x9a>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	059b      	lsls	r3, r3, #22
 8007b12:	d402      	bmi.n	8007b1a <_puts_r+0x9a>
 8007b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b16:	f7fe fe57 	bl	80067c8 <__retarget_lock_release_recursive>
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da04      	bge.n	8007b2c <_puts_r+0xac>
 8007b22:	69a2      	ldr	r2, [r4, #24]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	dc06      	bgt.n	8007b36 <_puts_r+0xb6>
 8007b28:	290a      	cmp	r1, #10
 8007b2a:	d004      	beq.n	8007b36 <_puts_r+0xb6>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	6022      	str	r2, [r4, #0]
 8007b32:	7019      	strb	r1, [r3, #0]
 8007b34:	e7c5      	b.n	8007ac2 <_puts_r+0x42>
 8007b36:	4622      	mov	r2, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7ff fe05 	bl	8007748 <__swbuf_r>
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d1bf      	bne.n	8007ac2 <_puts_r+0x42>
 8007b42:	e7df      	b.n	8007b04 <_puts_r+0x84>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	250a      	movs	r5, #10
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	701d      	strb	r5, [r3, #0]
 8007b4e:	e7db      	b.n	8007b08 <_puts_r+0x88>
 8007b50:	08014558 	.word	0x08014558
 8007b54:	08014578 	.word	0x08014578
 8007b58:	08014538 	.word	0x08014538

08007b5c <puts>:
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <puts+0xc>)
 8007b5e:	4601      	mov	r1, r0
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	f7ff bf8d 	b.w	8007a80 <_puts_r>
 8007b66:	bf00      	nop
 8007b68:	2000001c 	.word	0x2000001c

08007b6c <strcasecmp>:
 8007b6c:	b530      	push	{r4, r5, lr}
 8007b6e:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <strcasecmp+0x30>)
 8007b70:	4604      	mov	r4, r0
 8007b72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b76:	5d5a      	ldrb	r2, [r3, r5]
 8007b78:	f002 0203 	and.w	r2, r2, #3
 8007b7c:	2a01      	cmp	r2, #1
 8007b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b82:	5ca8      	ldrb	r0, [r5, r2]
 8007b84:	f000 0003 	and.w	r0, r0, #3
 8007b88:	bf08      	it	eq
 8007b8a:	3320      	addeq	r3, #32
 8007b8c:	2801      	cmp	r0, #1
 8007b8e:	bf08      	it	eq
 8007b90:	3220      	addeq	r2, #32
 8007b92:	1a98      	subs	r0, r3, r2
 8007b94:	d101      	bne.n	8007b9a <strcasecmp+0x2e>
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	d1eb      	bne.n	8007b72 <strcasecmp+0x6>
 8007b9a:	bd30      	pop	{r4, r5, pc}
 8007b9c:	0801423e 	.word	0x0801423e

08007ba0 <strcpy>:
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba6:	f803 2b01 	strb.w	r2, [r3], #1
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d1f9      	bne.n	8007ba2 <strcpy+0x2>
 8007bae:	4770      	bx	lr

08007bb0 <_vsniprintf_r>:
 8007bb0:	b530      	push	{r4, r5, lr}
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	b09b      	sub	sp, #108	; 0x6c
 8007bb8:	4605      	mov	r5, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	da05      	bge.n	8007bca <_vsniprintf_r+0x1a>
 8007bbe:	238b      	movs	r3, #139	; 0x8b
 8007bc0:	6003      	str	r3, [r0, #0]
 8007bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bc6:	b01b      	add	sp, #108	; 0x6c
 8007bc8:	bd30      	pop	{r4, r5, pc}
 8007bca:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007bce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007bd2:	bf14      	ite	ne
 8007bd4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007bd8:	4623      	moveq	r3, r4
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	9305      	str	r3, [sp, #20]
 8007bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007be2:	9100      	str	r1, [sp, #0]
 8007be4:	9104      	str	r1, [sp, #16]
 8007be6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007bea:	4669      	mov	r1, sp
 8007bec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bee:	f000 f875 	bl	8007cdc <_svfiprintf_r>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	bfbc      	itt	lt
 8007bf6:	238b      	movlt	r3, #139	; 0x8b
 8007bf8:	602b      	strlt	r3, [r5, #0]
 8007bfa:	2c00      	cmp	r4, #0
 8007bfc:	d0e3      	beq.n	8007bc6 <_vsniprintf_r+0x16>
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e7df      	b.n	8007bc6 <_vsniprintf_r+0x16>
	...

08007c08 <vsniprintf>:
 8007c08:	b507      	push	{r0, r1, r2, lr}
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	460a      	mov	r2, r1
 8007c10:	4601      	mov	r1, r0
 8007c12:	4803      	ldr	r0, [pc, #12]	; (8007c20 <vsniprintf+0x18>)
 8007c14:	6800      	ldr	r0, [r0, #0]
 8007c16:	f7ff ffcb 	bl	8007bb0 <_vsniprintf_r>
 8007c1a:	b003      	add	sp, #12
 8007c1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c20:	2000001c 	.word	0x2000001c

08007c24 <__ssputs_r>:
 8007c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	688e      	ldr	r6, [r1, #8]
 8007c2a:	429e      	cmp	r6, r3
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	4690      	mov	r8, r2
 8007c32:	461f      	mov	r7, r3
 8007c34:	d838      	bhi.n	8007ca8 <__ssputs_r+0x84>
 8007c36:	898a      	ldrh	r2, [r1, #12]
 8007c38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c3c:	d032      	beq.n	8007ca4 <__ssputs_r+0x80>
 8007c3e:	6825      	ldr	r5, [r4, #0]
 8007c40:	6909      	ldr	r1, [r1, #16]
 8007c42:	eba5 0901 	sub.w	r9, r5, r1
 8007c46:	6965      	ldr	r5, [r4, #20]
 8007c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c50:	3301      	adds	r3, #1
 8007c52:	444b      	add	r3, r9
 8007c54:	106d      	asrs	r5, r5, #1
 8007c56:	429d      	cmp	r5, r3
 8007c58:	bf38      	it	cc
 8007c5a:	461d      	movcc	r5, r3
 8007c5c:	0553      	lsls	r3, r2, #21
 8007c5e:	d531      	bpl.n	8007cc4 <__ssputs_r+0xa0>
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7ff fb5b 	bl	800731c <_malloc_r>
 8007c66:	4606      	mov	r6, r0
 8007c68:	b950      	cbnz	r0, 8007c80 <__ssputs_r+0x5c>
 8007c6a:	230c      	movs	r3, #12
 8007c6c:	f8ca 3000 	str.w	r3, [sl]
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c80:	6921      	ldr	r1, [r4, #16]
 8007c82:	464a      	mov	r2, r9
 8007c84:	f7fe fe20 	bl	80068c8 <memcpy>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	6126      	str	r6, [r4, #16]
 8007c96:	6165      	str	r5, [r4, #20]
 8007c98:	444e      	add	r6, r9
 8007c9a:	eba5 0509 	sub.w	r5, r5, r9
 8007c9e:	6026      	str	r6, [r4, #0]
 8007ca0:	60a5      	str	r5, [r4, #8]
 8007ca2:	463e      	mov	r6, r7
 8007ca4:	42be      	cmp	r6, r7
 8007ca6:	d900      	bls.n	8007caa <__ssputs_r+0x86>
 8007ca8:	463e      	mov	r6, r7
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	4632      	mov	r2, r6
 8007cae:	4641      	mov	r1, r8
 8007cb0:	f7ff fe1f 	bl	80078f2 <memmove>
 8007cb4:	68a3      	ldr	r3, [r4, #8]
 8007cb6:	1b9b      	subs	r3, r3, r6
 8007cb8:	60a3      	str	r3, [r4, #8]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	4433      	add	r3, r6
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e7db      	b.n	8007c7c <__ssputs_r+0x58>
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	f7ff fe3b 	bl	8007940 <_realloc_r>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1e1      	bne.n	8007c94 <__ssputs_r+0x70>
 8007cd0:	6921      	ldr	r1, [r4, #16]
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	f7ff fad6 	bl	8007284 <_free_r>
 8007cd8:	e7c7      	b.n	8007c6a <__ssputs_r+0x46>
	...

08007cdc <_svfiprintf_r>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	4698      	mov	r8, r3
 8007ce2:	898b      	ldrh	r3, [r1, #12]
 8007ce4:	061b      	lsls	r3, r3, #24
 8007ce6:	b09d      	sub	sp, #116	; 0x74
 8007ce8:	4607      	mov	r7, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	4614      	mov	r4, r2
 8007cee:	d50e      	bpl.n	8007d0e <_svfiprintf_r+0x32>
 8007cf0:	690b      	ldr	r3, [r1, #16]
 8007cf2:	b963      	cbnz	r3, 8007d0e <_svfiprintf_r+0x32>
 8007cf4:	2140      	movs	r1, #64	; 0x40
 8007cf6:	f7ff fb11 	bl	800731c <_malloc_r>
 8007cfa:	6028      	str	r0, [r5, #0]
 8007cfc:	6128      	str	r0, [r5, #16]
 8007cfe:	b920      	cbnz	r0, 8007d0a <_svfiprintf_r+0x2e>
 8007d00:	230c      	movs	r3, #12
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d08:	e0d1      	b.n	8007eae <_svfiprintf_r+0x1d2>
 8007d0a:	2340      	movs	r3, #64	; 0x40
 8007d0c:	616b      	str	r3, [r5, #20]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9309      	str	r3, [sp, #36]	; 0x24
 8007d12:	2320      	movs	r3, #32
 8007d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d1c:	2330      	movs	r3, #48	; 0x30
 8007d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ec8 <_svfiprintf_r+0x1ec>
 8007d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d26:	f04f 0901 	mov.w	r9, #1
 8007d2a:	4623      	mov	r3, r4
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d32:	b10a      	cbz	r2, 8007d38 <_svfiprintf_r+0x5c>
 8007d34:	2a25      	cmp	r2, #37	; 0x25
 8007d36:	d1f9      	bne.n	8007d2c <_svfiprintf_r+0x50>
 8007d38:	ebba 0b04 	subs.w	fp, sl, r4
 8007d3c:	d00b      	beq.n	8007d56 <_svfiprintf_r+0x7a>
 8007d3e:	465b      	mov	r3, fp
 8007d40:	4622      	mov	r2, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7ff ff6d 	bl	8007c24 <__ssputs_r>
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f000 80aa 	beq.w	8007ea4 <_svfiprintf_r+0x1c8>
 8007d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d52:	445a      	add	r2, fp
 8007d54:	9209      	str	r2, [sp, #36]	; 0x24
 8007d56:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80a2 	beq.w	8007ea4 <_svfiprintf_r+0x1c8>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d6a:	f10a 0a01 	add.w	sl, sl, #1
 8007d6e:	9304      	str	r3, [sp, #16]
 8007d70:	9307      	str	r3, [sp, #28]
 8007d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d76:	931a      	str	r3, [sp, #104]	; 0x68
 8007d78:	4654      	mov	r4, sl
 8007d7a:	2205      	movs	r2, #5
 8007d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d80:	4851      	ldr	r0, [pc, #324]	; (8007ec8 <_svfiprintf_r+0x1ec>)
 8007d82:	f7f8 fa55 	bl	8000230 <memchr>
 8007d86:	9a04      	ldr	r2, [sp, #16]
 8007d88:	b9d8      	cbnz	r0, 8007dc2 <_svfiprintf_r+0xe6>
 8007d8a:	06d0      	lsls	r0, r2, #27
 8007d8c:	bf44      	itt	mi
 8007d8e:	2320      	movmi	r3, #32
 8007d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d94:	0711      	lsls	r1, r2, #28
 8007d96:	bf44      	itt	mi
 8007d98:	232b      	movmi	r3, #43	; 0x2b
 8007d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b2a      	cmp	r3, #42	; 0x2a
 8007da4:	d015      	beq.n	8007dd2 <_svfiprintf_r+0xf6>
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	4654      	mov	r4, sl
 8007daa:	2000      	movs	r0, #0
 8007dac:	f04f 0c0a 	mov.w	ip, #10
 8007db0:	4621      	mov	r1, r4
 8007db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db6:	3b30      	subs	r3, #48	; 0x30
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d94e      	bls.n	8007e5a <_svfiprintf_r+0x17e>
 8007dbc:	b1b0      	cbz	r0, 8007dec <_svfiprintf_r+0x110>
 8007dbe:	9207      	str	r2, [sp, #28]
 8007dc0:	e014      	b.n	8007dec <_svfiprintf_r+0x110>
 8007dc2:	eba0 0308 	sub.w	r3, r0, r8
 8007dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	46a2      	mov	sl, r4
 8007dd0:	e7d2      	b.n	8007d78 <_svfiprintf_r+0x9c>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	9103      	str	r1, [sp, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfbb      	ittet	lt
 8007dde:	425b      	neglt	r3, r3
 8007de0:	f042 0202 	orrlt.w	r2, r2, #2
 8007de4:	9307      	strge	r3, [sp, #28]
 8007de6:	9307      	strlt	r3, [sp, #28]
 8007de8:	bfb8      	it	lt
 8007dea:	9204      	strlt	r2, [sp, #16]
 8007dec:	7823      	ldrb	r3, [r4, #0]
 8007dee:	2b2e      	cmp	r3, #46	; 0x2e
 8007df0:	d10c      	bne.n	8007e0c <_svfiprintf_r+0x130>
 8007df2:	7863      	ldrb	r3, [r4, #1]
 8007df4:	2b2a      	cmp	r3, #42	; 0x2a
 8007df6:	d135      	bne.n	8007e64 <_svfiprintf_r+0x188>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	1d1a      	adds	r2, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	9203      	str	r2, [sp, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfb8      	it	lt
 8007e04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e08:	3402      	adds	r4, #2
 8007e0a:	9305      	str	r3, [sp, #20]
 8007e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ed8 <_svfiprintf_r+0x1fc>
 8007e10:	7821      	ldrb	r1, [r4, #0]
 8007e12:	2203      	movs	r2, #3
 8007e14:	4650      	mov	r0, sl
 8007e16:	f7f8 fa0b 	bl	8000230 <memchr>
 8007e1a:	b140      	cbz	r0, 8007e2e <_svfiprintf_r+0x152>
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	eba0 000a 	sub.w	r0, r0, sl
 8007e22:	fa03 f000 	lsl.w	r0, r3, r0
 8007e26:	9b04      	ldr	r3, [sp, #16]
 8007e28:	4303      	orrs	r3, r0
 8007e2a:	3401      	adds	r4, #1
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e32:	4826      	ldr	r0, [pc, #152]	; (8007ecc <_svfiprintf_r+0x1f0>)
 8007e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e38:	2206      	movs	r2, #6
 8007e3a:	f7f8 f9f9 	bl	8000230 <memchr>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d038      	beq.n	8007eb4 <_svfiprintf_r+0x1d8>
 8007e42:	4b23      	ldr	r3, [pc, #140]	; (8007ed0 <_svfiprintf_r+0x1f4>)
 8007e44:	bb1b      	cbnz	r3, 8007e8e <_svfiprintf_r+0x1b2>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	3307      	adds	r3, #7
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	3308      	adds	r3, #8
 8007e50:	9303      	str	r3, [sp, #12]
 8007e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e54:	4433      	add	r3, r6
 8007e56:	9309      	str	r3, [sp, #36]	; 0x24
 8007e58:	e767      	b.n	8007d2a <_svfiprintf_r+0x4e>
 8007e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e5e:	460c      	mov	r4, r1
 8007e60:	2001      	movs	r0, #1
 8007e62:	e7a5      	b.n	8007db0 <_svfiprintf_r+0xd4>
 8007e64:	2300      	movs	r3, #0
 8007e66:	3401      	adds	r4, #1
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f04f 0c0a 	mov.w	ip, #10
 8007e70:	4620      	mov	r0, r4
 8007e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e76:	3a30      	subs	r2, #48	; 0x30
 8007e78:	2a09      	cmp	r2, #9
 8007e7a:	d903      	bls.n	8007e84 <_svfiprintf_r+0x1a8>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0c5      	beq.n	8007e0c <_svfiprintf_r+0x130>
 8007e80:	9105      	str	r1, [sp, #20]
 8007e82:	e7c3      	b.n	8007e0c <_svfiprintf_r+0x130>
 8007e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e88:	4604      	mov	r4, r0
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7f0      	b.n	8007e70 <_svfiprintf_r+0x194>
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	462a      	mov	r2, r5
 8007e94:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <_svfiprintf_r+0x1f8>)
 8007e96:	a904      	add	r1, sp, #16
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f7fb fd27 	bl	80038ec <_printf_float>
 8007e9e:	1c42      	adds	r2, r0, #1
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	d1d6      	bne.n	8007e52 <_svfiprintf_r+0x176>
 8007ea4:	89ab      	ldrh	r3, [r5, #12]
 8007ea6:	065b      	lsls	r3, r3, #25
 8007ea8:	f53f af2c 	bmi.w	8007d04 <_svfiprintf_r+0x28>
 8007eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eae:	b01d      	add	sp, #116	; 0x74
 8007eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb4:	ab03      	add	r3, sp, #12
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <_svfiprintf_r+0x1f8>)
 8007ebc:	a904      	add	r1, sp, #16
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f7fb ffb8 	bl	8003e34 <_printf_i>
 8007ec4:	e7eb      	b.n	8007e9e <_svfiprintf_r+0x1c2>
 8007ec6:	bf00      	nop
 8007ec8:	080147ac 	.word	0x080147ac
 8007ecc:	080147b6 	.word	0x080147b6
 8007ed0:	080038ed 	.word	0x080038ed
 8007ed4:	08007c25 	.word	0x08007c25
 8007ed8:	080147b2 	.word	0x080147b2

08007edc <_putc_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	460d      	mov	r5, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	b118      	cbz	r0, 8007eee <_putc_r+0x12>
 8007ee6:	6983      	ldr	r3, [r0, #24]
 8007ee8:	b90b      	cbnz	r3, 8007eee <_putc_r+0x12>
 8007eea:	f7fe f849 	bl	8005f80 <__sinit>
 8007eee:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <_putc_r+0x84>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	d124      	bne.n	8007f3e <_putc_r+0x62>
 8007ef4:	6874      	ldr	r4, [r6, #4]
 8007ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef8:	07d8      	lsls	r0, r3, #31
 8007efa:	d405      	bmi.n	8007f08 <_putc_r+0x2c>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	0599      	lsls	r1, r3, #22
 8007f00:	d402      	bmi.n	8007f08 <_putc_r+0x2c>
 8007f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f04:	f7fe fc5f 	bl	80067c6 <__retarget_lock_acquire_recursive>
 8007f08:	68a3      	ldr	r3, [r4, #8]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	60a3      	str	r3, [r4, #8]
 8007f10:	da05      	bge.n	8007f1e <_putc_r+0x42>
 8007f12:	69a2      	ldr	r2, [r4, #24]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	db1c      	blt.n	8007f52 <_putc_r+0x76>
 8007f18:	b2eb      	uxtb	r3, r5
 8007f1a:	2b0a      	cmp	r3, #10
 8007f1c:	d019      	beq.n	8007f52 <_putc_r+0x76>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	701d      	strb	r5, [r3, #0]
 8007f26:	b2ed      	uxtb	r5, r5
 8007f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f2a:	07da      	lsls	r2, r3, #31
 8007f2c:	d405      	bmi.n	8007f3a <_putc_r+0x5e>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	059b      	lsls	r3, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_putc_r+0x5e>
 8007f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f36:	f7fe fc47 	bl	80067c8 <__retarget_lock_release_recursive>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	bd70      	pop	{r4, r5, r6, pc}
 8007f3e:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <_putc_r+0x88>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	d101      	bne.n	8007f48 <_putc_r+0x6c>
 8007f44:	68b4      	ldr	r4, [r6, #8]
 8007f46:	e7d6      	b.n	8007ef6 <_putc_r+0x1a>
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <_putc_r+0x8c>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	bf08      	it	eq
 8007f4e:	68f4      	ldreq	r4, [r6, #12]
 8007f50:	e7d1      	b.n	8007ef6 <_putc_r+0x1a>
 8007f52:	4629      	mov	r1, r5
 8007f54:	4622      	mov	r2, r4
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff fbf6 	bl	8007748 <__swbuf_r>
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	e7e3      	b.n	8007f28 <_putc_r+0x4c>
 8007f60:	08014558 	.word	0x08014558
 8007f64:	08014578 	.word	0x08014578
 8007f68:	08014538 	.word	0x08014538

08007f6c <_init>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr

08007f78 <_fini>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr
