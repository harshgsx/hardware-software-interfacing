
motorLab7.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080064d0 l    d  .rodata	00000000 .rodata
08012aec l    d  .ARM	00000000 .ARM
08012af4 l    d  .init_array	00000000 .init_array
08012af8 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000384 l    d  .bss	00000000 .bss
20000d5c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
0800123c l       .text	00000000 LoopCopyDataInit
08001236 l       .text	00000000 CopyDataInit
0800124e l       .text	00000000 LoopFillZerobss
0800124a l       .text	00000000 FillZerobss
08001278 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080064b8 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
20000384 l       .bss	00000001 completed.1
08012af8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
20000388 l       .bss	00000018 object.0
08012af4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 my_main.c
00000000 l    df *ABS*	00000000 mytest.c
200003a0 l     O .bss	00000004 LedState.0
00000000 l    df *ABS*	00000000 timer_irq.c
00000000 l    df *ABS*	00000000 syscall.c
200003f4 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
200003f8 l     O .bss	00000004 cmdArgs
200003fc l     O .bss	00000004 count.3
20000400 l     O .bss	00000004 crReceived
200004a4 l     O .bss	00000004 saved.1
20000198 l     O .data	00000004 buf.2
2000019c l     O .data	00000004 printPrompt.4
08011973 l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
200004a8 l     O .bss	00000004 address.1
200001a0 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 terminal.c
200004ac l     O .bss	00000834 TerminalState
08011e04 l     O .rodata	00000010 TerminalInfo
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 tasking.c
20000ce0 l     O .bss	00000004 AccumTicks
00000000 l    df *ABS*	00000000 default.c
08011fe8 l     O .rodata	00000013 __FUNCTION__.0
00000000 l    df *ABS*	00000000 decoder.c
08001dcc l     F .text	0000007c Uncompress
20000ce4 l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_msp.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_uart.c
08002c9c l     F .text	000000bc UART_SetConfig
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim_ex.c
00000000 l    df *ABS*	00000000 version.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003f90 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
080042b8 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005130 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012a00 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005f94 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 STM32F411.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
200001b4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012af8 l       .init_array	00000000 __init_array_end
08012af4 l       .init_array	00000000 __preinit_array_end
08012af4 l       .init_array	00000000 __init_array_start
08012af4 l       .init_array	00000000 __preinit_array_start
08001278  w    F .text	00000006 RTC_Alarm_IRQHandler
080064a8 g     F .text	00000010 _malloc_usable_size_r
0800ed0c g     O .rodata	00000008 RTC_BKP19R_fields
08010754 g     O .rodata	00000050 TIM2_SR_fields
080032ec g     F .text	000000c4 __cvt
08001278  w    F .text	00000006 EXTI2_IRQHandler
08003bf0 g     F .text	0000002c putchar
0800d33c g     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800fa84 g     O .rodata	00000008 STK_VAL_fields
08012525 g     O .rodata	00000008 APBPrescTable
08000e7c g     F .text	0000002c .hidden __aeabi_dcmpun
080012be g     F .text	00000004 _isatty_r
20000454 g     O .bss	00000050 input_b
08000e40 g     F .text	00000012 .hidden __aeabi_dcmple
08010f84 g     O .rodata	00000018 TIM5_CR2_fields
08010714 g     O .rodata	00000008 TIM2_PSC_fields
08003ec8 g     F .text	00000010 strcpy
08001318 g     F .text	00000004 _getpid
0800cdec g     O .rodata	00000260 OTG_FS_DEVICE_registers
08003c1c g     F .text	000000dc _puts_r
0800cc94 g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
08000d7c g     F .text	0000007a .hidden __cmpdf2
08001e9c g     F .text	00000054 DecodeWriteRegister
0800d794 g     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
080012c2 g     F .text	00000004 _lseek_r
080024e8 g     F .text	00000002 DebugMon_Handler
08001c8c g     F .text	00000044 CmdTasks
08010bb4 g     O .rodata	00000008 TIM3_PSC_fields
0800e03c g     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
080093ac g     O .rodata	00000008 ADC1_JOFR3_fields
0801071c g     O .rodata	00000038 TIM2_SMCR_fields
0800c9b4 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800dcc4 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800c3f4 g     O .rodata	00000020 NVIC_IPR1_fields
08012a38 g     O .rodata	0000000c CmdTestE
0800fa44 g     O .rodata	00000018 STK_CALIB_fields
0800f2d4 g     O .rodata	00000008 SCB_AFSR_fields
08001278  w    F .text	00000006 SPI4_IRQHandler
08000d7c g     F .text	0000007a .hidden __eqdf2
08001774 g     F .text	00000068 CmdStats
080107a4 g     O .rodata	00000150 TIM2_registers
0800ac54 g     O .rodata	00000100 GPIOA_BSRR_fields
0800f4ec g     O .rodata	00000018 SCB_SHPR1_fields
0800bd54 g     O .rodata	00000030 I2C3_CR2_fields
080093fc g     O .rodata	00000028 ADC1_SQR1_fields
080008ec g     F .text	0000005a .hidden __floatdidf
0800fc3c g     O .rodata	00000008 TIM10_CNT_fields
08001a58 g     F .text	00000028 TerminalWritePolled
08006480 g     F .text	00000024 _kill_r
0801002c g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800eefc g     O .rodata	00000010 RTC_SHIFTR_fields
0800d87c g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
08003bc0 g     F .text	00000030 printf
0801070c g     O .rodata	00000008 TIM2_OR_fields
0800bc2c g     O .rodata	000000a0 GPIOH_registers
0800c334 g     O .rodata	00000020 NVIC_IPR14_fields
0800dc64 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
08002af0 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
08001278  w    F .text	00000006 TIM1_CC_IRQHandler
0800f70c g     O .rodata	00000068 SDIO_ICR_fields
08002bf4 g     F .text	00000064 HAL_NVIC_SetPriority
080094b4 g     O .rodata	00000140 ADC1_registers
08002b10 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800fe0c g     O .rodata	00000008 TIM11_OR_fields
0801064c g     O .rodata	00000018 TIM2_CR2_fields
08000f5e g     F .text	00000012 my_main
08006332 g     F .text	00000024 __sseek
0800b724 g     O .rodata	00000040 GPIOH_AFRH_fields
080051e0 g     F .text	00000070 __sinit
08001278  w    F .text	00000006 DMA2_Stream5_IRQHandler
080040fc g     F .text	000000a4 __swbuf_r
080024de g     F .text	00000002 HardFault_Handler
08010aa4 g     O .rodata	00000010 TIM3_CNT_fields
08009804 g     O .rodata	000000a0 DMA2_HIFCR_fields
08009d0c g     O .rodata	00000008 DMA2_S2NDTR_fields
080096d4 g     O .rodata	00000008 CRC_CR_fields
0800fbe4 g     O .rodata	00000018 TIM10_CCER_fields
08005184 g     F .text	0000002c __sfmoreglue
08001278  w    F .text	00000006 DMA1_Stream5_IRQHandler
0800c514 g     O .rodata	00000008 NVIC_ISER0_fields
080063c8 g     F .text	0000000c __malloc_unlock
0800fc8c g     O .rodata	00000008 TIM10_PSC_fields
0800a16c g     O .rodata	00000008 DMA2_S7NDTR_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
080100bc g     O .rodata	00000008 TIM1_CCR3_fields
080101fc g     O .rodata	00000008 TIM1_DMAR_fields
0800fdbc g     O .rodata	00000008 TIM11_CNT_fields
080105fc g     O .rodata	00000010 TIM2_CNT_fields
080024ec g     F .text	00000012 SysTick_Handler
0800f01c g     O .rodata	00000008 RTC_WPR_fields
0800ef0c g     O .rodata	00000008 RTC_SSR_fields
08012a5c g     O .rodata	0000000c CmdLedE
08002f44 g     F .text	0000000a HAL_GPIO_WritePin
08009e9c g     O .rodata	00000020 DMA2_S4FCR_fields
08001278  w    F .text	00000006 PVD_IRQHandler
08001b10 g     F .text	000000e0 TerminalISR
08001278  w    F .text	00000006 SDIO_IRQHandler
08010184 g     O .rodata	00000078 TIM1_DIER_fields
0800c27c g     O .rodata	00000008 NVIC_ICPR0_fields
08006386 g     F .text	00000034 memmove
08001278  w    F .text	00000006 TAMP_STAMP_IRQHandler
08003028 g     F .text	00000144 HAL_TIM_IRQHandler
0800c414 g     O .rodata	00000020 NVIC_IPR2_fields
08012afc g       *ABS*	00000000 _sidata
080024ea g     F .text	00000002 PendSV_Handler
08003260  w    F .text	00000002 HAL_TIMEx_CommutCallback
0800c284 g     O .rodata	00000008 NVIC_ICPR1_fields
0800fa7c g     O .rodata	00000008 STK_LOAD_fields
080024dc g     F .text	00000002 NMI_Handler
08002c58 g     F .text	0000001c HAL_NVIC_EnableIRQ
0800d3d4 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
08005468 g     F .text	00000080 _Balloc
0800d344 g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
08012af4 g       .ARM	00000000 __exidx_end
0800cd2c g     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
08003f40 g     F .text	00000050 __strtok_r
0800d7ec g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
08009c24 g     O .rodata	00000008 DMA2_S1M1AR_fields
08001278  w    F .text	00000006 EXTI3_IRQHandler
0800f83c g     O .rodata	00000008 SDIO_RESP1_fields
0800295c  w    F .text	0000005c HAL_RCC_GetSysClockFreq
08009edc g     O .rodata	000000a0 DMA2_S5CR_fields
08010ea4 g     O .rodata	00000050 TIM5_CCMR2_Output_fields
08000d6c g     F .text	0000008a .hidden __gtdf2
08009ddc g     O .rodata	00000008 DMA2_S3M0AR_fields
08012aec g       .rodata	00000000 _parsetable_end
08003288 g     F .text	0000000c __errno
0800ed3c g     O .rodata	00000008 RTC_BKP6R_fields
0800ea4c g     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800f414 g     O .rodata	00000048 SCB_ICSR_fields
08002f60 g     F .text	00000050 HAL_IWDG_Init
08012ad4 g     O .rodata	0000000c CmdWE
0800c524 g     O .rodata	00000008 NVIC_ISER2_fields
0800f864 g     O .rodata	000000c0 SDIO_STA_fields
08002500 g     F .text	0000003c HAL_MspInit
0800c17c g     O .rodata	00000048 MPU_MPU_RASR_fields
08001278  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
0800c92c g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
080012b4 g     F .text	0000000a _fstat_r
08002f4e g     F .text	00000012 HAL_GPIO_TogglePin
08009ed4 g     O .rodata	00000008 DMA2_S4PAR_fields
080112ec g     O .rodata	00000030 TIM9_CR1_fields
20000d58 g     O .bss	00000004 errno
0800b17c g     O .rodata	00000040 GPIOB_AFRH_fields
0800cbbc g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
080064d0 g       .text	00000000 _etext
0800ccdc g     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
20000384 g       .bss	00000000 _sbss
0800f524 g     O .rodata	000000f0 SCB_registers
0800c1c4 g     O .rodata	00000018 MPU_MPU_RBAR_fields
08010674 g     O .rodata	00000060 TIM2_DIER_fields
08000e08 g     F .text	00000010 .hidden __aeabi_cdcmple
08010e74 g     O .rodata	00000030 TIM5_CCMR2_Input_fields
0800b1fc g     O .rodata	00000100 GPIOB_BSRR_fields
0800f614 g     O .rodata	00000008 SDIO_ARG_fields
08001278  w    F .text	00000006 I2C3_ER_IRQHandler
0800ed5c g     O .rodata	00000010 RTC_CALIBR_fields
0800a15c g     O .rodata	00000008 DMA2_S7M0AR_fields
0800d6f4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800c78c g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
08009fac g     O .rodata	00000008 DMA2_S5NDTR_fields
0800dd9c g     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800a99c g     O .rodata	00000048 FLASH_CR_fields
08010a64 g     O .rodata	00000010 TIM3_CCR1_fields
08010d94 g     O .rodata	00000060 TIM5_CCER_fields
0800ecdc g     O .rodata	00000008 RTC_BKP13R_fields
0800e574 g     O .rodata	00000008 RCC_AHB2ENR_fields
0800ddc4 g     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
08009424 g     O .rodata	00000030 ADC1_SQR2_fields
080116cc g     O .rodata	00000008 WWDG_SR_fields
0800a90c g     O .rodata	00000060 EXTI_registers
08002db4 g     F .text	00000190 HAL_GPIO_Init
0800d074 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800d654 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
08002fb0 g     F .text	0000000c HAL_IWDG_Refresh
0800aa34 g     O .rodata	00000038 FLASH_SR_fields
0800ca34 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800dc14 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
08009b1c g     O .rodata	00000020 DMA2_S0FCR_fields
0800a08c g     O .rodata	00000008 DMA2_S6NDTR_fields
08001670 g     F .text	000000b0 DumpBuffer
080115c4 g     O .rodata	00000008 USART1_DR_fields
0800ad54 g     O .rodata	00000080 GPIOA_IDR_fields
20000cf8 g     O .bss	0000000c hiwdg
080112d4 g     O .rodata	00000008 TIM9_CCR1_fields
0800544c g     F .text	0000001c memcpy
08009624 g     O .rodata	00000090 ADC_Common_CSR_fields
08000df8 g     F .text	00000020 .hidden __aeabi_cdrcmple
080100cc g     O .rodata	00000008 TIM1_CNT_fields
08010ab4 g     O .rodata	00000040 TIM3_CR1_fields
08003d08 g     F .text	0000018c setvbuf
0801028c g     O .rodata	00000060 TIM1_SR_fields
0800f704 g     O .rodata	00000008 SDIO_FIFO_fields
08012a80 g     O .rodata	0000000c enableDisableStepperE
0800c314 g     O .rodata	00000020 NVIC_IPR13_fields
08005178 g     F .text	0000000c _cleanup_r
0800abd4 g     O .rodata	00000040 GPIOA_AFRH_fields
08005d94 g     F .text	00000200 _svfprintf_r
08000874 g     F .text	00000022 .hidden __floatsidf
0800d5b4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
08000d74 g     F .text	00000082 .hidden __ltdf2
08001278  w    F .text	00000006 EXTI0_IRQHandler
08001278  w    F .text	00000006 I2C2_EV_IRQHandler
0800aacc g     O .rodata	00000008 FPU_CPACR_CPACR_fields
08000fb0 g     F .text	00000050 enableDisableStepper
0800fc94 g     O .rodata	00000018 TIM10_SR_fields
0800c95c g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
08000214 g     F .text	00000000 .hidden __aeabi_uldivmod
08009a84 g     O .rodata	00000098 DMA2_S0CR_fields
080116d4 g     O .rodata	00000030 WWDG_registers
08003cf8 g     F .text	00000010 puts
08009944 g     O .rodata	000000a0 DMA2_LIFCR_fields
08001278  w    F .text	00000006 DMA1_Stream2_IRQHandler
08001278  w    F .text	00000006 FPU_IRQHandler
0800dcdc g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
200001a4 g     O .data	00000004 SystemCoreClock
08009ec4 g     O .rodata	00000008 DMA2_S4M1AR_fields
080001f4 g     F .text	00000012 my_Tick
08000f9c g     F .text	00000014 USR_LED_Toggle
0800ab34 g     O .rodata	00000070 FPU_FPSCR_fields
0800bf04 g     O .rodata	00000070 I2S2ext_CR1_fields
080105bc g     O .rodata	00000010 TIM2_CCR1_fields
0800ddb4 g     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800bdbc g     O .rodata	00000070 I2C3_SR1_fields
0800d284 g     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
08005418 g     F .text	00000010 malloc
0800c10c g     O .rodata	00000008 IWDG_RLR_fields
200001a8 g     O .data	00000001 uwTickFreq
08003264 g     F .text	00000018 VersionPrint
08012a38 g       .rodata	00000000 _tasktable_end
0800f6fc g     O .rodata	00000008 SDIO_FIFOCNT_fields
08006420 g     F .text	00000050 _raise_r
0800427c g     F .text	0000003c __assert_func
08012938 g     O .rodata	000000c8 __mprec_tens
0800e584 g     O .rodata	00000008 RCC_AHB2RSTR_fields
08009ecc g     O .rodata	00000008 DMA2_S4NDTR_fields
0800c254 g     O .rodata	00000008 NVIC_IABR1_fields
080024e4 g     F .text	00000002 UsageFault_Handler
0800fc44 g     O .rodata	00000028 TIM10_CR1_fields
080040e0 g     F .text	0000001c vsnprintf
0800fc34 g     O .rodata	00000008 TIM10_CCR1_fields
08010b7c g     O .rodata	00000008 TIM3_DMAR_fields
08001cfc g     F .text	00000010 TaskingTickHandler
20000404 g     O .bss	00000050 input
08001278  w    F .text	00000006 DMA2_Stream2_IRQHandler
080064a4 g     F .text	00000004 _getpid_r
20000384 g       .bss	00000000 __bss_start__
0800bfbc g     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800c274 g     O .rodata	00000008 NVIC_ICER2_fields
08004074 g     F .text	00000014 strtoul
08000854 g     F .text	0000001e .hidden __aeabi_ui2d
08005340 g     F .text	00000008 _localeconv_r
08005658 g     F .text	0000002c __i2b
0800d8c4 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800a07c g     O .rodata	00000008 DMA2_S6M0AR_fields
20000000 g       .data	00000000 _sdata
08001278  w    F .text	00000006 SPI1_IRQHandler
08001c80 g     F .text	0000000c WDTFeed
080097c4 g     O .rodata	00000040 DBG_registers
08000244 g     F .text	000002d0 .hidden __udivmoddi4
080005d0 g     F .text	00000000 .hidden __aeabi_drsub
080093f4 g     O .rodata	00000008 ADC1_SMPR2_fields
08001280 g     F .text	00000030 _sbrk_r
0800c454 g     O .rodata	00000020 NVIC_IPR4_fields
080098a4 g     O .rodata	000000a0 DMA2_HISR_fields
0800f29c g     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
08003020  w    F .text	00000002 HAL_TIM_OC_DelayElapsedCallback
080110dc g     O .rodata	00000150 TIM5_registers
0800a6e4 g     O .rodata	000000b8 EXTI_PR_fields
0800c3b4 g     O .rodata	00000020 NVIC_IPR18_fields
0800d564 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800d99c g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800ffdc g     O .rodata	00000050 TIM1_CCMR1_Output_fields
0800cc24 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
080012c6 g     F .text	0000000a _read_r
08009b44 g     O .rodata	00000008 DMA2_S0M1AR_fields
0800c7f4 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
08010254 g     O .rodata	00000038 TIM1_SMCR_fields
08001278  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
0800d2d4 g     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
08000e2c g     F .text	00000012 .hidden __aeabi_dcmplt
20000d48 g     O .bss	00000004 uwTick
08002338 g     F .text	0000009c SystemClock_Config
0801044c g     O .rodata	00000010 TIM2_ARR_fields
0800c01c g     O .rodata	00000048 I2S2ext_SR_fields
0800cc3c g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800fdfc g     O .rodata	00000010 TIM11_EGR_fields
08010964 g     O .rodata	00000030 TIM3_CCMR1_Input_fields
08009f9c g     O .rodata	00000008 DMA2_S5M0AR_fields
080113b4 g     O .rodata	000000e0 TIM9_registers
0800ee34 g     O .rodata	00000038 RTC_DR_fields
0800dcf4 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
08010a84 g     O .rodata	00000010 TIM3_CCR3_fields
0801131c g     O .rodata	00000008 TIM9_CR2_fields
080100ac g     O .rodata	00000008 TIM1_CCR1_fields
08009b3c g     O .rodata	00000008 DMA2_S0M0AR_fields
08002c74 g     F .text	00000028 HAL_SYSTICK_Config
08000898 g     F .text	00000042 .hidden __extendsfdf2
08000b9c g     F .text	000001d0 .hidden __aeabi_ddiv
0800937c g     O .rodata	00000008 ADC1_JDR1_fields
0800c0fc g     O .rodata	00000008 IWDG_KR_fields
0800be6c g     O .rodata	00000008 I2C3_TRISE_fields
080005dc g     F .text	00000276 .hidden __adddf3
0800c014 g     O .rodata	00000008 I2S2ext_RXCRCR_fields
080018b8 g     F .text	00000060 CmdReceive
080096ec g     O .rodata	00000030 CRC_registers
080114a4 g     O .rodata	00000078 USART1_CR1_fields
0800f02c g     O .rodata	00000270 RTC_registers
08010b1c g     O .rodata	00000060 TIM3_DIER_fields
0800ea5c g     O .rodata	00000020 RCC_SSCGR_fields
08012aec g       .ARM	00000000 __exidx_start
08009ebc g     O .rodata	00000008 DMA2_S4M0AR_fields
08000f48 g     F .text	00000016 my_init
0800be74 g     O .rodata	00000090 I2C3_registers
08000948 g     F .text	00000254 .hidden __aeabi_dmul
08001278  w    F .text	00000006 DMA2_Stream3_IRQHandler
08012ac8 g     O .rodata	0000000c CmdVersionE
0800e0b4 g     O .rodata	00000038 PWR_CSR_fields
0800ec2c g     O .rodata	00000010 RTC_ALRMASSR_fields
0800fb3c g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08010f04 g     O .rodata	00000010 TIM5_CCR2_fields
20000d4e g     O .bss	00000001 __lock___sinit_recursive_mutex
0800c24c g     O .rodata	00000008 NVIC_IABR0_fields
08012688 g     O .rodata	00000004 _global_impure_ptr
08010c44 g     O .rodata	00000140 TIM3_registers
08010a74 g     O .rodata	00000010 TIM3_CCR2_fields
0801104c g     O .rodata	00000008 TIM5_PSC_fields
080063d4 g     F .text	0000004c _realloc_r
08003294 g     F .text	00000048 __libc_init_array
0800ecd4 g     O .rodata	00000008 RTC_BKP12R_fields
080115cc g     O .rodata	00000010 USART1_GTPR_fields
0800cb94 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800b604 g     O .rodata	00000080 GPIOB_PUPDR_fields
0800133c g     F .text	00000070 CmdR
0800c9cc g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
08012910 g     O .rodata	00000028 __mprec_bigtens
080100c4 g     O .rodata	00000008 TIM1_CCR4_fields
08006378 g     F .text	0000000e abort
08000854 g     F .text	0000001e .hidden __floatunsidf
0801108c g     O .rodata	00000050 TIM5_SR_fields
0800596c g     F .text	00000038 __mcmp
0800c4b4 g     O .rodata	00000020 NVIC_IPR7_fields
080093e4 g     O .rodata	00000008 ADC1_LTR_fields
20000380 g     O .data	00000004 TaskInputTaskState
08001278  w    F .text	00000006 USART6_IRQHandler
0800ecc4 g     O .rodata	00000008 RTC_BKP10R_fields
08009cfc g     O .rodata	00000008 DMA2_S2M0AR_fields
0800ea7c g     O .rodata	00000140 RCC_registers
080064b8 g     F .text	00000000 _init
080093b4 g     O .rodata	00000008 ADC1_JOFR4_fields
0800e64c g     O .rodata	00000060 RCC_APB1RSTR_fields
0800ecbc g     O .rodata	00000008 RTC_BKP0R_fields
0800e5ec g     O .rodata	00000060 RCC_APB1LPENR_fields
0800e52c g     O .rodata	00000048 RCC_AHB1RSTR_fields
08012a38 g       .rodata	00000000 _parsetable_start
0800a09c g     O .rodata	000000a0 DMA2_S7CR_fields
08012a20 g       .rodata	00000000 _tasktable_start
0800ed4c g     O .rodata	00000008 RTC_BKP8R_fields
0801053c g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800c26c g     O .rodata	00000008 NVIC_ICER1_fields
08012a68 g     O .rodata	0000000c CmdRE
0800c8fc g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800e94c g     O .rodata	00000050 RCC_CSR_fields
0800afdc g     O .rodata	00000080 GPIOA_OTYPER_fields
080102ec g     O .rodata	00000160 TIM1_registers
0800f464 g     O .rodata	00000018 SCB_SCR_fields
080019e0 g     F .text	00000078 CmdSend
0800db24 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
080093bc g     O .rodata	00000028 ADC1_JSQR_fields
0800f834 g     O .rodata	00000008 SDIO_POWER_fields
20000d5c g       .bss	00000000 _ebss
08000f70 g     F .text	0000002c CmdTest
08009b54 g     O .rodata	00000008 DMA2_S0PAR_fields
0800cc7c g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800ac14 g     O .rodata	00000040 GPIOA_AFRL_fields
08001228  w    F .text	00000038 Reset_Handler
080040e0 g     F .text	0000001c vsniprintf
0800316c g     F .text	0000009c TIM_Base_SetConfig
0800fcac g     O .rodata	000000b0 TIM10_registers
0800c294 g     O .rodata	00000020 NVIC_IPR0_fields
0800aedc g     O .rodata	00000080 GPIOA_ODR_fields
080055b8 g     F .text	00000040 __hi0bits
0800c354 g     O .rodata	00000020 NVIC_IPR15_fields
080100b4 g     O .rodata	00000008 TIM1_CCR2_fields
0800971c g     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
200003ac g     O .bss	00000048 tim11
08010a14 g     O .rodata	00000050 TIM3_CCMR2_Output_fields
080096dc g     O .rodata	00000008 CRC_DR_fields
08000ea8 g     F .text	0000004e .hidden __fixdfsi
0800b504 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800bce4 g     O .rodata	00000070 I2C3_CR1_fields
0800ca9c g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
08002fbc g     F .text	00000064 HAL_TIM_Base_Start_IT
20000d4c g     O .bss	00000001 __lock___malloc_recursive_mutex
0800cb04 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
08001fa0 g     F .text	00000054 DecodePeripheral
08010f24 g     O .rodata	00000010 TIM5_CCR4_fields
08009484 g     O .rodata	00000030 ADC1_SR_fields
200003a8 g     O .bss	00000004 gIsStepperEnabled
0800fadc g     O .rodata	00000020 SYSCFG_EXTICR1_fields
08001278  w    F .text	00000006 DMA2_Stream0_IRQHandler
080099e4 g     O .rodata	000000a0 DMA2_LISR_fields
0800efe4 g     O .rodata	00000038 RTC_TSTR_fields
200001ac g     O .data	00000004 uwTickPrio
0800cc0c g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0801060c g     O .rodata	00000040 TIM2_CR1_fields
08002b78 g     F .text	00000034 HAL_Init
0800dc7c g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800e99c g     O .rodata	000000b0 RCC_PLLCFGR_fields
0800d3e4 g     O .rodata	00000130 OTG_FS_GLOBAL_registers
08006248 g     F .text	00000090 _putc_r
08009f7c g     O .rodata	00000020 DMA2_S5FCR_fields
0800f51c g     O .rodata	00000008 SCB_VTOR_fields
0800e4d4 g     O .rodata	00000058 RCC_AHB1LPENR_fields
0800ecfc g     O .rodata	00000008 RTC_BKP17R_fields
0800929c g     O .rodata	00000070 ADC1_CR1_fields
080052dc g     F .text	00000024 fprintf
08001278  w    F .text	00000006 TIM4_IRQHandler
080005dc g     F .text	00000276 .hidden __aeabi_dadd
0800f3fc g     O .rodata	00000018 SCB_HFSR_fields
0800fbdc g     O .rodata	00000008 TIM10_ARR_fields
08000d74 g     F .text	00000082 .hidden __ledf2
0800d744 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800b7a4 g     O .rodata	00000100 GPIOH_BSRR_fields
080104bc g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0800cc9c g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800a79c g     O .rodata	000000b8 EXTI_RTSR_fields
08009fbc g     O .rodata	000000a0 DMA2_S6CR_fields
0800f844 g     O .rodata	00000008 SDIO_RESP2_fields
0800ed44 g     O .rodata	00000008 RTC_BKP7R_fields
080057d8 g     F .text	000000b4 __pow5mult
080008dc g     F .text	0000006a .hidden __aeabi_ul2d
08009fb4 g     O .rodata	00000008 DMA2_S5PAR_fields
0800a854 g     O .rodata	000000b8 EXTI_SWIER_fields
0800a4bc g     O .rodata	000000b8 EXTI_EMR_fields
0800ed04 g     O .rodata	00000008 RTC_BKP18R_fields
0800a9e4 g     O .rodata	00000008 FLASH_KEYR_fields
080001e0 g     F .text	00000014 mytest
0801282c g     O .rodata	00000020 __sf_fake_stderr
08011264 g     O .rodata	00000030 TIM9_CCMR1_Input_fields
08010af4 g     O .rodata	00000018 TIM3_CR2_fields
080105ec g     O .rodata	00000010 TIM2_CCR4_fields
20000d60 g       ._user_heap_stack	00000000 end
08001278  w    F .text	00000006 I2C1_EV_IRQHandler
0800c06c g     O .rodata	00000090 I2S2ext_registers
0800534c g     F .text	00000002 __retarget_lock_release_recursive
08001278  w    F .text	00000006 DMA1_Stream6_IRQHandler
08002048 g     F .text	00000064 DecodePrintRegisters
0801162c g     O .rodata	00000070 USART1_registers
20000380 g       .data	00000000 _taskstate_start
0800e58c g     O .rodata	00000060 RCC_APB1ENR_fields
08005cdc g     F .text	000000b6 __ssputs_r
0800c264 g     O .rodata	00000008 NVIC_ICER0_fields
0800c51c g     O .rodata	00000008 NVIC_ISER1_fields
08010204 g     O .rodata	00000040 TIM1_EGR_fields
080104ec g     O .rodata	00000050 TIM2_CCMR1_Output_fields
080105cc g     O .rodata	00000010 TIM2_CCR2_fields
0800be2c g     O .rodata	00000040 I2C3_SR2_fields
0800ba2c g     O .rodata	00000080 GPIOH_ODR_fields
0800fdb4 g     O .rodata	00000008 TIM11_CCR1_fields
0800d90c g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
08010fac g     O .rodata	00000060 TIM5_DIER_fields
0800ed24 g     O .rodata	00000008 RTC_BKP3R_fields
08000e68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08001278  w    F .text	00000006 DMA1_Stream1_IRQHandler
08011384 g     O .rodata	00000030 TIM9_SR_fields
0800d09c g     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800ddcc g     O .rodata	00000270 OTG_FS_HOST_registers
08005fc2 g     F .text	00000024 __sfputs_r
0800cc84 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800ed34 g     O .rodata	00000008 RTC_BKP5R_fields
080051b0 g     F .text	0000000c __sfp_lock_acquire
08000530 g     F .text	00000000 memchr
0800342c  w    F .text	0000046c _printf_float
0800e48c g     O .rodata	00000048 RCC_AHB1ENR_fields
20000d5c g       .bss	00000000 __bss_end__
08005b90 g     F .text	00000098 _free_r
08001278  w    F .text	00000006 TIM3_IRQHandler
08001278  w    F .text	00000006 RCC_IRQHandler
0800ed6c g     O .rodata	00000020 RTC_CALR_fields
08009dbc g     O .rodata	00000020 DMA2_S3FCR_fields
08000e54 g     F .text	00000012 .hidden __aeabi_dcmpge
08009dec g     O .rodata	00000008 DMA2_S3NDTR_fields
0800fd64 g     O .rodata	00000018 TIM11_CCER_fields
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800b584 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800e57c g     O .rodata	00000008 RCC_AHB2LPENR_fields
0800ed54 g     O .rodata	00000008 RTC_BKP9R_fields
0800bd8c g     O .rodata	00000020 I2C3_OAR1_fields
0800bccc g     O .rodata	00000018 I2C3_CCR_fields
080005d8 g     F .text	0000027a .hidden __aeabi_dsub
08001278 g       .text	00000006 Default_Handler
0800d954 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800add4 g     O .rodata	00000088 GPIOA_LCKR_fields
0800ef14 g     O .rodata	00000068 RTC_TAFCR_fields
08012515 g     O .rodata	00000010 AHBPrescTable
0800b0dc g     O .rodata	000000a0 GPIOA_registers
0800c53c g     O .rodata	00000008 NVIC_ISPR2_fields
08001660 g     F .text	00000010 fetch_cmd_args
0801056c g     O .rodata	00000050 TIM2_CCMR2_Output_fields
08010994 g     O .rodata	00000050 TIM3_CCMR1_Output_fields
0800b37c g     O .rodata	00000088 GPIOB_LCKR_fields
0800bdac g     O .rodata	00000010 I2C3_OAR2_fields
080008dc g     F .text	0000006a .hidden __floatundidf
080112e4 g     O .rodata	00000008 TIM9_CNT_fields
0800f924 g     O .rodata	00000120 SDIO_registers
0800c2b4 g     O .rodata	00000020 NVIC_IPR10_fields
0800588c g     F .text	000000e0 __lshift
0800a094 g     O .rodata	00000008 DMA2_S6PAR_fields
0800c064 g     O .rodata	00000008 I2S2ext_TXCRCR_fields
08011324 g     O .rodata	00000020 TIM9_DIER_fields
0801024c g     O .rodata	00000008 TIM1_RCR_fields
0800c98c g     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800c474 g     O .rodata	00000020 NVIC_IPR5_fields
08001278  w    F .text	00000006 EXTI15_10_IRQHandler
0800fb5c g     O .rodata	00000008 SYSCFG_MEMRM_fields
0800bffc g     O .rodata	00000018 I2S2ext_I2SPR_fields
0800ef7c g     O .rodata	00000038 RTC_TR_fields
0800c394 g     O .rodata	00000020 NVIC_IPR17_fields
0800327c g     F .text	0000000c CmdVersion
08011014 g     O .rodata	00000030 TIM5_EGR_fields
08001278  w    F .text	00000006 ADC_IRQHandler
0800c3d4 g     O .rodata	00000020 NVIC_IPR19_fields
0800fafc g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800fc7c g     O .rodata	00000010 TIM10_EGR_fields
08005684 g     F .text	00000154 __multiply
080029b8 g     F .text	00000138 HAL_RCC_ClockConfig
08002bd0 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
0800bbac g     O .rodata	00000080 GPIOH_PUPDR_fields
080014bc g     F .text	00000138 TaskInput
0800efdc g     O .rodata	00000008 RTC_TSSSR_fields
0800e8ec g     O .rodata	00000060 RCC_CR_fields
08005ab8 g     F .text	000000b8 __d2b
0800bfb4 g     O .rodata	00000008 I2S2ext_DR_fields
0801151c g     O .rodata	00000048 USART1_CR2_fields
0800a174 g     O .rodata	00000008 DMA2_S7PAR_fields
08003e94 g     F .text	00000034 strcasecmp
0800fefc g     O .rodata	00000040 TIM1_BDTR_fields
0800fa5c g     O .rodata	00000020 STK_CTRL_fields
080093ec g     O .rodata	00000008 ADC1_SMPR1_fields
08010f14 g     O .rodata	00000010 TIM5_CCR3_fields
08001278  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800db74 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800020c g     F .text	00000004 my_Init
0800e704 g     O .rodata	00000058 RCC_APB2LPENR_fields
0800dcac g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
08001278  w    F .text	00000006 SPI5_IRQHandler
0800f654 g     O .rodata	00000048 SDIO_CMD_fields
08012a74 g     O .rodata	0000000c CmdReceiveE
0800d7a4 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800f2dc g     O .rodata	00000030 SCB_AIRCR_fields
080096b4 g     O .rodata	00000020 ADC_Common_registers
0800ece4 g     O .rodata	00000008 RTC_BKP14R_fields
0800b764 g     O .rodata	00000040 GPIOH_AFRL_fields
080012b0 g     F .text	00000004 _close_r
08000874 g     F .text	00000022 .hidden __aeabi_i2d
08001074 g     F .text	000000e4 gpioInit
080096e4 g     O .rodata	00000008 CRC_IDR_fields
08011364 g     O .rodata	00000008 TIM9_PSC_fields
08001278  w    F .text	00000006 TIM5_IRQHandler
0800c124 g     O .rodata	00000040 IWDG_registers
08003ed8 g     F .text	00000068 strtok
0800ddbc g     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
08012a20 g     O .rodata	00000018 TaskInputTask
0800dad4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800b8a4 g     O .rodata	00000080 GPIOH_IDR_fields
0800cdac g     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800c104 g     O .rodata	00000008 IWDG_PR_fields
080109e4 g     O .rodata	00000030 TIM3_CCMR2_Input_fields
08001cd0 g     F .text	0000002c TaskingInit
08001278  w    F .text	00000006 DMA2_Stream7_IRQHandler
08003208 g     F .text	00000058 HAL_TIM_Base_Init
080011c4 g     F .text	00000064 HAL_TIM_PeriodElapsedCallback
0800f854 g     O .rodata	00000008 SDIO_RESP4_fields
0800c2d4 g     O .rodata	00000020 NVIC_IPR11_fields
08001278  w    F .text	00000006 I2C3_EV_IRQHandler
0800c85c g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800facc g     O .rodata	00000010 SYSCFG_CMPCR_fields
08001820 g     F .text	0000004c TerminalInit
080041a0 g     F .text	000000dc __swsetup_r
08000514  w    F .text	00000002 .hidden __aeabi_ldiv0
08001278  w    F .text	00000006 EXTI9_5_IRQHandler
08000b9c g     F .text	000001d0 .hidden __divdf3
0800936c g     O .rodata	00000008 ADC1_DR_fields
08005250 g     F .text	0000008c __sfp
200003a4 g     O .bss	00000004 gDirection
0800d084 g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
08001278  w    F .text	00000006 RTC_WKUP_IRQHandler
08011494 g     O .rodata	00000010 USART1_BRR_fields
08001a80 g     F .text	0000002a PolledPrintf
0800a05c g     O .rodata	00000020 DMA2_S6FCR_fields
0800cc54 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
080051d4 g     F .text	0000000c __sinit_lock_release
08004088 g     F .text	00000056 _vsnprintf_r
08000948 g     F .text	00000254 .hidden __muldf3
08001720 g     F .text	00000054 CmdDump
08001d0c g     F .text	00000068 TaskingRun
080062d8 g     F .text	00000022 __sread
0801169c g     O .rodata	00000020 WWDG_CFR_fields
08009cdc g     O .rodata	00000020 DMA2_S2FCR_fields
0800e10c g     O .rodata	00000380 Peripherals
0800f774 g     O .rodata	000000c0 SDIO_MASK_fields
0800b484 g     O .rodata	00000080 GPIOB_ODR_fields
08002bc4  w    F .text	0000000c HAL_GetTick
0800fbfc g     O .rodata	00000018 TIM10_CCMR1_Input_fields
080063bc g     F .text	0000000c __malloc_lock
0800c52c g     O .rodata	00000008 NVIC_ISPR0_fields
0800aaec g     O .rodata	00000048 FPU_FPCCR_fields
08009de4 g     O .rodata	00000008 DMA2_S3M1AR_fields
0800b9ac g     O .rodata	00000080 GPIOH_MODER_fields
0800c25c g     O .rodata	00000008 NVIC_IABR2_fields
080050b8 g     F .text	00000078 _fflush_r
08005b70 g     F .text	0000001e _calloc_r
0800976c g     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800b05c g     O .rodata	00000080 GPIOA_PUPDR_fields
08001278  w    F .text	00000006 SPI2_IRQHandler
0800ccac g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800fdec g     O .rodata	00000010 TIM11_DIER_fields
0801284c g     O .rodata	00000020 __sf_fake_stdin
0800f50c g     O .rodata	00000010 SCB_SHPR3_fields
0800c544 g     O .rodata	00000008 NVIC_STIR_STIR_fields
0801100c g     O .rodata	00000008 TIM5_DMAR_fields
0800534a g     F .text	00000002 __retarget_lock_acquire_recursive
08009df4 g     O .rodata	00000008 DMA2_S3PAR_fields
0800a62c g     O .rodata	000000b8 EXTI_IMR_fields
0800d6a4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800efb4 g     O .rodata	00000028 RTC_TSDR_fields
080032dc g     F .text	00000010 memset
080024e0 g     F .text	00000002 MemManage_Handler
080023d4 g     F .text	00000108 main
0800fb1c g     O .rodata	00000020 SYSCFG_EXTICR3_fields
0800fd94 g     O .rodata	00000020 TIM11_CCMR1_Output_fields
08001278  w    F .text	00000006 DMA1_Stream0_IRQHandler
0800a084 g     O .rodata	00000008 DMA2_S6M1AR_fields
08005348 g     F .text	00000002 __retarget_lock_init_recursive
0800938c g     O .rodata	00000008 ADC1_JDR3_fields
0800a13c g     O .rodata	00000020 DMA2_S7FCR_fields
0800fdc4 g     O .rodata	00000028 TIM11_CR1_fields
08012581 g     O .rodata	00000006 VersionBuildUser
08010f44 g     O .rodata	00000040 TIM5_CR1_fields
08009c2c g     O .rodata	00000008 DMA2_S1NDTR_fields
0800c4f4 g     O .rodata	00000020 NVIC_IPR9_fields
0800c374 g     O .rodata	00000020 NVIC_IPR16_fields
0800da34 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
080024e6 g     F .text	00000002 SVC_Handler
08006356 g     F .text	00000008 __sclose
08009d14 g     O .rodata	00000008 DMA2_S2PAR_fields
08010a94 g     O .rodata	00000010 TIM3_CCR4_fields
08001aac g     F .text	00000064 TerminalInputBufferWrite
080043d0 g     F .text	00000bdc _dtoa_r
08005c28 g     F .text	000000b4 _malloc_r
0800b1bc g     O .rodata	00000040 GPIOB_AFRL_fields
0800635e g     F .text	0000001a __ascii_wctomb
0800d394 g     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
08009b4c g     O .rodata	00000008 DMA2_S0NDTR_fields
080008ec g     F .text	0000005a .hidden __aeabi_l2d
0800ffac g     O .rodata	00000030 TIM1_CCMR1_Input_fields
08003022  w    F .text	00000002 HAL_TIM_IC_CaptureCallback
08009fa4 g     O .rodata	00000008 DMA2_S5M1AR_fields
0800bfac g     O .rodata	00000008 I2S2ext_CRCPR_fields
0800aad4 g     O .rodata	00000010 FPU_CPACR_registers
08010b84 g     O .rodata	00000030 TIM3_EGR_fields
08009c1c g     O .rodata	00000008 DMA2_S1M0AR_fields
0800f314 g     O .rodata	00000030 SCB_CCR_fields
08001278  w    F .text	00000006 EXTI4_IRQHandler
0800fe14 g     O .rodata	00000008 TIM11_PSC_fields
0800ed2c g     O .rodata	00000008 RTC_BKP4R_fields
0800ecf4 g     O .rodata	00000008 RTC_BKP16R_fields
08009bfc g     O .rodata	00000020 DMA2_S1FCR_fields
080095f4 g     O .rodata	00000030 ADC_Common_CCR_fields
0800eccc g     O .rodata	00000008 RTC_BKP11R_fields
080025e8 g     F .text	00000014 SystemInit
0800f45c g     O .rodata	00000008 SCB_MMFAR_fields
08010f34 g     O .rodata	00000010 TIM5_CNT_fields
08000d7c g     F .text	0000007a .hidden __nedf2
0800ec3c g     O .rodata	00000070 RTC_ALRMBR_fields
08010664 g     O .rodata	00000010 TIM2_DCR_fields
080064c4 g     F .text	00000000 _fini
0800131c g     F .text	0000001e CmdW
0800d184 g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
08003bc0 g     F .text	00000030 iprintf
0801136c g     O .rodata	00000018 TIM9_SMCR_fields
20000384 g       .data	00000000 _taskstate_end
0800fe34 g     O .rodata	000000c0 TIM11_registers
0800256c g     F .text	0000007c HAL_UART_MspInit
08003024  w    F .text	00000002 HAL_TIM_PWM_PulseFinishedCallback
080033b0 g     F .text	0000007c __exponent
0800c99c g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800f024 g     O .rodata	00000008 RTC_WUTR_fields
0800ee6c g     O .rodata	00000080 RTC_ISR_fields
08010174 g     O .rodata	00000010 TIM1_DCR_fields
0800e064 g     O .rodata	00000050 PWR_CR_fields
080106dc g     O .rodata	00000030 TIM2_EGR_fields
0800aba4 g     O .rodata	00000030 FPU_registers
080012d0 g     F .text	00000040 _write_r
0800fb64 g     O .rodata	00000008 SYSCFG_PMC_fields
0800d304 g     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
080097b4 g     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
08009454 g     O .rodata	00000030 ADC1_SQR3_fields
0800930c g     O .rodata	00000060 ADC1_CR2_fields
0800f61c g     O .rodata	00000038 SDIO_CLKCR_fields
0800d9e4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
08002b30  w    F .text	00000048 HAL_InitTick
0800cd7c g     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
08010d84 g     O .rodata	00000010 TIM5_ARR_fields
08003898 g     F .text	000000da _printf_common
0800c2f4 g     O .rodata	00000020 NVIC_IPR12_fields
200001b0 g     O .data	00000004 _impure_ptr
0800cdcc g     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
08009394 g     O .rodata	00000008 ADC1_JDR4_fields
08004fac g     F .text	0000010c __sflush_r
08002bac  w    F .text	00000018 HAL_IncTick
0800e7e4 g     O .rodata	00000068 RCC_CFGR_fields
0800ed8c g     O .rodata	000000a8 RTC_CR_fields
0800a574 g     O .rodata	000000b8 EXTI_FTSR_fields
08005d94 g     F .text	00000200 _svfiprintf_r
0800d24c g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
080115dc g     O .rodata	00000050 USART1_SR_fields
0800dd24 g     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
08001278  w    F .text	00000006 WWDG_IRQHandler
0800bf74 g     O .rodata	00000038 I2S2ext_CR2_fields
08009374 g     O .rodata	00000008 ADC1_HTR_fields
0800c494 g     O .rodata	00000020 NVIC_IPR6_fields
08010ef4 g     O .rodata	00000010 TIM5_CCR1_fields
080105dc g     O .rodata	00000010 TIM2_CCR3_fields
08001d74 g     F .text	00000058 Default_IRQHandler
08005428 g     F .text	00000024 __ascii_mbtowc
0800ae5c g     O .rodata	00000080 GPIOA_MODER_fields
08012abc g     O .rodata	0000000c CmdTransparentE
080017dc g     F .text	00000044 CmdTransparent
08010114 g     O .rodata	00000060 TIM1_CR2_fields
08003026  w    F .text	00000002 HAL_TIM_TriggerCallback
0800eeec g     O .rodata	00000010 RTC_PRER_fields
0800c54c g     O .rodata	00000010 NVIC_STIR_registers
080112dc g     O .rodata	00000008 TIM9_CCR2_fields
0800da84 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800fc6c g     O .rodata	00000010 TIM10_DIER_fields
08010df4 g     O .rodata	00000030 TIM5_CCMR1_Input_fields
08010b0c g     O .rodata	00000010 TIM3_DCR_fields
0800fa8c g     O .rodata	00000040 STK_registers
08001278  w    F .text	00000006 TIM2_IRQHandler
0800bb2c g     O .rodata	00000080 GPIOH_OTYPER_fields
08000208 g     F .text	00000004 my_Loop
0800cc8c g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
08012a50 g     O .rodata	0000000c CmdDecodeE
08004088 g     F .text	00000056 _vsniprintf_r
0800f3d4 g     O .rodata	00000028 SCB_CPUID_fields
20000000 g       .data	00000000 myTickCount
0800f69c g     O .rodata	00000008 SDIO_DCOUNT_fields
0800a17c g     O .rodata	00000340 DMA2_registers
0800dd34 g     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
08001278  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
0800a96c g     O .rodata	00000030 FLASH_ACR_fields
080011b8 g     F .text	0000000c TIM1_TRG_COM_TIM11_IRQHandler
0800ebbc g     O .rodata	00000070 RTC_ALRMAR_fields
0800fef4 g     O .rodata	00000008 TIM1_ARR_fields
0800baac g     O .rodata	00000080 GPIOH_OSPEEDR_fields
08009c34 g     O .rodata	00000008 DMA2_S1PAR_fields
0800a9ec g     O .rodata	00000040 FLASH_OPTCR_fields
0800534e g     F .text	0000004a __swhatbuf_r
080013ac g     F .text	00000110 parse
20020000 g       *ABS*	00000000 _estack
08012568 g     O .rodata	00000019 VersionBuildDateString
0800978c g     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800d36c g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800ed1c g     O .rodata	00000008 RTC_BKP2R_fields
08001278  w    F .text	00000006 EXTI1_IRQHandler
08000e18 g     F .text	00000012 .hidden __aeabi_dcmpeq
08001000 g     F .text	00000074 Timer11_Init
0800f6a4 g     O .rodata	00000048 SDIO_DCTRL_fields
0800fd7c g     O .rodata	00000018 TIM11_CCMR1_Input_fields
08009d1c g     O .rodata	000000a0 DMA2_S3CR_fields
0800f6f4 g     O .rodata	00000008 SDIO_DTIMER_fields
0800aae4 g     O .rodata	00000008 FPU_FPCAR_fields
20000384 g       .data	00000000 _edata
0800d25c g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800f84c g     O .rodata	00000008 SDIO_RESP3_fields
20000d04 g     O .bss	00000044 huart2
0800f85c g     O .rodata	00000008 SDIO_RESPCMD_fields
080020ac g     F .text	0000028c CmdDecode
08011294 g     O .rodata	00000040 TIM9_CCMR1_Output_fields
08012a98 g     O .rodata	0000000c StepSpeedActionE
0800b2fc g     O .rodata	00000080 GPIOB_IDR_fields
0800253c g     F .text	00000030 HAL_TIM_Base_MspInit
0800e054 g     O .rodata	00000010 OTG_FS_PWRCLK_registers
0801122c g     O .rodata	00000008 TIM9_ARR_fields
08009c3c g     O .rodata	000000a0 DMA2_S2CR_fields
0800e75c g     O .rodata	00000050 RCC_APB2RSTR_fields
0800d0bc g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
080015f4 g     F .text	0000003c fetch_uint32_arg
0800ecac g     O .rodata	00000010 RTC_ALRMBSSR_fields
08001bf0 g     F .text	00000006 USART2_IRQHandler
0800c55c g     O .rodata	00000230 NVIC_registers
0800c1dc g     O .rodata	00000008 MPU_MPU_RNR_fields
080062fa g     F .text	00000038 __swrite
080025fc  w    F .text	00000360 HAL_RCC_OscConfig
08011344 g     O .rodata	00000020 TIM9_EGR_fields
080052dc g     F .text	00000024 fiprintf
08005fe8 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800cc6c g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
08005300 g     F .text	0000003e _fwalk_reent
080059a4 g     F .text	00000114 __mdiff
08000ea8 g     F .text	0000004e .hidden __aeabi_d2iz
0800ecec g     O .rodata	00000008 RTC_BKP15R_fields
0800e0ec g     O .rodata	00000020 PWR_registers
08009d04 g     O .rodata	00000008 DMA2_S2M1AR_fields
0800c164 g     O .rodata	00000018 MPU_MPU_CTRL_fields
08009384 g     O .rodata	00000008 ADC1_JDR2_fields
08009dfc g     O .rodata	000000a0 DMA2_S4CR_fields
08001310 g     F .text	00000006 _kill
0800c1fc g     O .rodata	00000050 MPU_registers
0800c9e4 g     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
08001278  w    F .text	00000006 I2C2_ER_IRQHandler
0800dd0c g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800af5c g     O .rodata	00000080 GPIOA_OSPEEDR_fields
080051bc g     F .text	0000000c __sfp_lock_release
0801045c g     O .rodata	00000060 TIM2_CCER_fields
08001630 g     F .text	00000030 fetch_string_arg
0801286c g     O .rodata	00000020 __sf_fake_stdout
08012a44 g     O .rodata	0000000c CmdDumpE
0800b404 g     O .rodata	00000080 GPIOB_MODER_fields
08011564 g     O .rodata	00000060 USART1_CR3_fields
0800fd5c g     O .rodata	00000008 TIM11_ARR_fields
08001278  w    F .text	00000006 DMA2_Stream1_IRQHandler
08001ef0 g     F .text	00000050 DecodeField
08010904 g     O .rodata	00000060 TIM3_CCER_fields
08001ff4 g     F .text	00000054 DecodePrintPeripherals
08010244 g     O .rodata	00000008 TIM1_PSC_fields
08012587 g     O .rodata	00000101 _ctype_
0800d054 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
08000514  w    F .text	00000002 .hidden __aeabi_idiv0
0800f47c g     O .rodata	00000070 SCB_SHCRS_fields
08000e7c g     F .text	0000002c .hidden __unorddf2
0800f504 g     O .rodata	00000008 SCB_SHPR2_fields
0800cb6c g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800e84c g     O .rodata	000000a0 RCC_CIR_fields
08012ab0 g     O .rodata	0000000c CmdStatsE
08001278  w    F .text	00000006 FLASH_IRQHandler
08011054 g     O .rodata	00000038 TIM5_SMCR_fields
0800ccbc g     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
08001316 g     F .text	00000002 _exit
0800c434 g     O .rodata	00000020 NVIC_IPR3_fields
08012aa4 g     O .rodata	0000000c CmdTasksE
0800a164 g     O .rodata	00000008 DMA2_S7M1AR_fields
08001918 g     F .text	000000c8 TerminalOutputBufferWrite
08001278  w    F .text	00000006 DMA2_Stream4_IRQHandler
080024e2 g     F .text	00000002 BusFault_Handler
08001278  w    F .text	00000006 USART1_IRQHandler
0800cc74 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800d064 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
08005398 g     F .text	00000080 __smakebuf_r
0800dbc4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
08001bf8 g     F .text	00000088 WDTCheckReset
08000518 g     F .text	00000010 strlen
0800e6ac g     O .rodata	00000058 RCC_APB2ENR_fields
08001278  w    F .text	00000006 OTG_FS_IRQHandler
08003974 g     F .text	0000024c _printf_i
08001278  w    F .text	00000006 SPI3_IRQHandler
0800f6ec g     O .rodata	00000008 SDIO_DLEN_fields
0800b924 g     O .rodata	00000088 GPIOH_LCKR_fields
08000e08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08011044 g     O .rodata	00000008 TIM5_OR_fields
08000d6c g     F .text	0000008a .hidden __gedf2
08001278  w    F .text	00000006 DMA1_Stream4_IRQHandler
080100d4 g     O .rodata	00000040 TIM1_CR1_fields
20000d54 g     O .bss	00000004 __malloc_sbrk_start
0800c114 g     O .rodata	00000010 IWDG_SR_fields
08002d58 g     F .text	0000005c HAL_UART_Init
0800ff3c g     O .rodata	00000070 TIM1_CCER_fields
0800d26c g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800f30c g     O .rodata	00000008 SCB_BFAR_fields
20000004 g     O .data	00000194 InterruptNames
08001278  w    F .text	00000006 I2C1_ER_IRQHandler
080093a4 g     O .rodata	00000008 ADC1_JOFR2_fields
0801005c g     O .rodata	00000050 TIM1_CCMR2_Output_fields
0800c1e4 g     O .rodata	00000018 MPU_MPU_TYPER_fields
08012a8c g     O .rodata	0000000c CmdSendE
0800c4d4 g     O .rodata	00000020 NVIC_IPR8_fields
08000898 g     F .text	00000042 .hidden __aeabi_f2d
0800d834 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
08000ef8 g     F .text	00000050 CmdLed
0800aa6c g     O .rodata	00000060 FLASH_registers
20000d50 g     O .bss	00000004 __malloc_free_list
0800939c g     O .rodata	00000008 ADC1_JOFR1_fields
08003262  w    F .text	00000002 HAL_TIMEx_BreakCallback
0800f2c4 g     O .rodata	00000010 SCB_ACTRL_registers
080108f4 g     O .rodata	00000010 TIM3_ARR_fields
0800cbe4 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
080005d8 g     F .text	0000027a .hidden __subdf3
08005fe8 g     F .text	00000260 _vfprintf_r
080055f8 g     F .text	0000005e __lo0bits
0800d04c g     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
08010f9c g     O .rodata	00000010 TIM5_DCR_fields
0800dc94 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800ed14 g     O .rodata	00000008 RTC_BKP1R_fields
08001f40 g     F .text	00000060 DecodeRegister
0800b684 g     O .rodata	000000a0 GPIOB_registers
08001e48 g     F .text	00000054 DecodeReadRegister
0800d514 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
08001278  w    F .text	00000006 DMA2_Stream6_IRQHandler
0800186c g     F .text	0000004c TerminalRead
08010bf4 g     O .rodata	00000050 TIM3_SR_fields
080106d4 g     O .rodata	00000008 TIM2_DMAR_fields
20000214 g     O .data	0000016c __global_locale
0800fc14 g     O .rodata	00000020 TIM10_CCMR1_Output_fields
0800c8c4 g     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800bd84 g     O .rodata	00000008 I2C3_DR_fields
0800fe1c g     O .rodata	00000018 TIM11_SR_fields
0800e7ac g     O .rodata	00000038 RCC_BDCR_fields
0800d604 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
08001158 g     F .text	00000060 StepSpeedAction
08001278  w    F .text	00000006 DMA1_Stream3_IRQHandler
08010bbc g     O .rodata	00000038 TIM3_SMCR_fields
0800c534 g     O .rodata	00000008 NVIC_ISPR1_fields
0800c28c g     O .rodata	00000008 NVIC_ICPR2_fields
20000d4d g     O .bss	00000001 __lock___sfp_recursive_mutex
08011234 g     O .rodata	00000030 TIM9_CCER_fields
08010e24 g     O .rodata	00000050 TIM5_CCMR1_Output_fields
0800fb6c g     O .rodata	00000070 SYSCFG_registers
08006470 g     F .text	00000010 raise
0800c8cc g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
080051c8 g     F .text	0000000c __sinit_lock_acquire
08009b5c g     O .rodata	000000a0 DMA2_S1CR_fields
0800f344 g     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
0800552c g     F .text	0000008c __multadd
080054e8 g     F .text	00000044 _Bfree
0800aa2c g     O .rodata	00000008 FLASH_OPTKEYR_fields
080116bc g     O .rodata	00000010 WWDG_CR_fields



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000384 	.word	0x20000384
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064b8 	.word	0x080064b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000388 	.word	0x20000388
 80001dc:	080064b8 	.word	0x080064b8

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f000 fed9 	bl	8000f9c <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <strlen>:
 8000518:	4603      	mov	r3, r0
 800051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800051e:	2a00      	cmp	r2, #0
 8000520:	d1fb      	bne.n	800051a <strlen+0x2>
 8000522:	1a18      	subs	r0, r3, r0
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
	...

08000530 <memchr>:
 8000530:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000534:	2a10      	cmp	r2, #16
 8000536:	db2b      	blt.n	8000590 <memchr+0x60>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	d008      	beq.n	8000550 <memchr+0x20>
 800053e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000542:	3a01      	subs	r2, #1
 8000544:	428b      	cmp	r3, r1
 8000546:	d02d      	beq.n	80005a4 <memchr+0x74>
 8000548:	f010 0f07 	tst.w	r0, #7
 800054c:	b342      	cbz	r2, 80005a0 <memchr+0x70>
 800054e:	d1f6      	bne.n	800053e <memchr+0xe>
 8000550:	b4f0      	push	{r4, r5, r6, r7}
 8000552:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000556:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800055a:	f022 0407 	bic.w	r4, r2, #7
 800055e:	f07f 0700 	mvns.w	r7, #0
 8000562:	2300      	movs	r3, #0
 8000564:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000568:	3c08      	subs	r4, #8
 800056a:	ea85 0501 	eor.w	r5, r5, r1
 800056e:	ea86 0601 	eor.w	r6, r6, r1
 8000572:	fa85 f547 	uadd8	r5, r5, r7
 8000576:	faa3 f587 	sel	r5, r3, r7
 800057a:	fa86 f647 	uadd8	r6, r6, r7
 800057e:	faa5 f687 	sel	r6, r5, r7
 8000582:	b98e      	cbnz	r6, 80005a8 <memchr+0x78>
 8000584:	d1ee      	bne.n	8000564 <memchr+0x34>
 8000586:	bcf0      	pop	{r4, r5, r6, r7}
 8000588:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800058c:	f002 0207 	and.w	r2, r2, #7
 8000590:	b132      	cbz	r2, 80005a0 <memchr+0x70>
 8000592:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000596:	3a01      	subs	r2, #1
 8000598:	ea83 0301 	eor.w	r3, r3, r1
 800059c:	b113      	cbz	r3, 80005a4 <memchr+0x74>
 800059e:	d1f8      	bne.n	8000592 <memchr+0x62>
 80005a0:	2000      	movs	r0, #0
 80005a2:	4770      	bx	lr
 80005a4:	3801      	subs	r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	bf06      	itte	eq
 80005ac:	4635      	moveq	r5, r6
 80005ae:	3803      	subeq	r0, #3
 80005b0:	3807      	subne	r0, #7
 80005b2:	f015 0f01 	tst.w	r5, #1
 80005b6:	d107      	bne.n	80005c8 <memchr+0x98>
 80005b8:	3001      	adds	r0, #1
 80005ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005be:	bf02      	ittt	eq
 80005c0:	3001      	addeq	r0, #1
 80005c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005c6:	3001      	addeq	r0, #1
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	3801      	subs	r0, #1
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__aeabi_drsub>:
 80005d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005d4:	e002      	b.n	80005dc <__adddf3>
 80005d6:	bf00      	nop

080005d8 <__aeabi_dsub>:
 80005d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005dc <__adddf3>:
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	bf1f      	itttt	ne
 80005f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000602:	f000 80e2 	beq.w	80007ca <__adddf3+0x1ee>
 8000606:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800060a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800060e:	bfb8      	it	lt
 8000610:	426d      	neglt	r5, r5
 8000612:	dd0c      	ble.n	800062e <__adddf3+0x52>
 8000614:	442c      	add	r4, r5
 8000616:	ea80 0202 	eor.w	r2, r0, r2
 800061a:	ea81 0303 	eor.w	r3, r1, r3
 800061e:	ea82 0000 	eor.w	r0, r2, r0
 8000622:	ea83 0101 	eor.w	r1, r3, r1
 8000626:	ea80 0202 	eor.w	r2, r0, r2
 800062a:	ea81 0303 	eor.w	r3, r1, r3
 800062e:	2d36      	cmp	r5, #54	; 0x36
 8000630:	bf88      	it	hi
 8000632:	bd30      	pophi	{r4, r5, pc}
 8000634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800063c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000644:	d002      	beq.n	800064c <__adddf3+0x70>
 8000646:	4240      	negs	r0, r0
 8000648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800064c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000658:	d002      	beq.n	8000660 <__adddf3+0x84>
 800065a:	4252      	negs	r2, r2
 800065c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000660:	ea94 0f05 	teq	r4, r5
 8000664:	f000 80a7 	beq.w	80007b6 <__adddf3+0x1da>
 8000668:	f1a4 0401 	sub.w	r4, r4, #1
 800066c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000670:	db0d      	blt.n	800068e <__adddf3+0xb2>
 8000672:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000676:	fa22 f205 	lsr.w	r2, r2, r5
 800067a:	1880      	adds	r0, r0, r2
 800067c:	f141 0100 	adc.w	r1, r1, #0
 8000680:	fa03 f20e 	lsl.w	r2, r3, lr
 8000684:	1880      	adds	r0, r0, r2
 8000686:	fa43 f305 	asr.w	r3, r3, r5
 800068a:	4159      	adcs	r1, r3
 800068c:	e00e      	b.n	80006ac <__adddf3+0xd0>
 800068e:	f1a5 0520 	sub.w	r5, r5, #32
 8000692:	f10e 0e20 	add.w	lr, lr, #32
 8000696:	2a01      	cmp	r2, #1
 8000698:	fa03 fc0e 	lsl.w	ip, r3, lr
 800069c:	bf28      	it	cs
 800069e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006a2:	fa43 f305 	asr.w	r3, r3, r5
 80006a6:	18c0      	adds	r0, r0, r3
 80006a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b0:	d507      	bpl.n	80006c2 <__adddf3+0xe6>
 80006b2:	f04f 0e00 	mov.w	lr, #0
 80006b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80006ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006be:	eb6e 0101 	sbc.w	r1, lr, r1
 80006c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006c6:	d31b      	bcc.n	8000700 <__adddf3+0x124>
 80006c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006cc:	d30c      	bcc.n	80006e8 <__adddf3+0x10c>
 80006ce:	0849      	lsrs	r1, r1, #1
 80006d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006d8:	f104 0401 	add.w	r4, r4, #1
 80006dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006e4:	f080 809a 	bcs.w	800081c <__adddf3+0x240>
 80006e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	ea41 0105 	orr.w	r1, r1, r5
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000704:	4140      	adcs	r0, r0
 8000706:	eb41 0101 	adc.w	r1, r1, r1
 800070a:	3c01      	subs	r4, #1
 800070c:	bf28      	it	cs
 800070e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000712:	d2e9      	bcs.n	80006e8 <__adddf3+0x10c>
 8000714:	f091 0f00 	teq	r1, #0
 8000718:	bf04      	itt	eq
 800071a:	4601      	moveq	r1, r0
 800071c:	2000      	moveq	r0, #0
 800071e:	fab1 f381 	clz	r3, r1
 8000722:	bf08      	it	eq
 8000724:	3320      	addeq	r3, #32
 8000726:	f1a3 030b 	sub.w	r3, r3, #11
 800072a:	f1b3 0220 	subs.w	r2, r3, #32
 800072e:	da0c      	bge.n	800074a <__adddf3+0x16e>
 8000730:	320c      	adds	r2, #12
 8000732:	dd08      	ble.n	8000746 <__adddf3+0x16a>
 8000734:	f102 0c14 	add.w	ip, r2, #20
 8000738:	f1c2 020c 	rsb	r2, r2, #12
 800073c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000740:	fa21 f102 	lsr.w	r1, r1, r2
 8000744:	e00c      	b.n	8000760 <__adddf3+0x184>
 8000746:	f102 0214 	add.w	r2, r2, #20
 800074a:	bfd8      	it	le
 800074c:	f1c2 0c20 	rsble	ip, r2, #32
 8000750:	fa01 f102 	lsl.w	r1, r1, r2
 8000754:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000758:	bfdc      	itt	le
 800075a:	ea41 010c 	orrle.w	r1, r1, ip
 800075e:	4090      	lslle	r0, r2
 8000760:	1ae4      	subs	r4, r4, r3
 8000762:	bfa2      	ittt	ge
 8000764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000768:	4329      	orrge	r1, r5
 800076a:	bd30      	popge	{r4, r5, pc}
 800076c:	ea6f 0404 	mvn.w	r4, r4
 8000770:	3c1f      	subs	r4, #31
 8000772:	da1c      	bge.n	80007ae <__adddf3+0x1d2>
 8000774:	340c      	adds	r4, #12
 8000776:	dc0e      	bgt.n	8000796 <__adddf3+0x1ba>
 8000778:	f104 0414 	add.w	r4, r4, #20
 800077c:	f1c4 0220 	rsb	r2, r4, #32
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f302 	lsl.w	r3, r1, r2
 8000788:	ea40 0003 	orr.w	r0, r0, r3
 800078c:	fa21 f304 	lsr.w	r3, r1, r4
 8000790:	ea45 0103 	orr.w	r1, r5, r3
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	f1c4 040c 	rsb	r4, r4, #12
 800079a:	f1c4 0220 	rsb	r2, r4, #32
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 f304 	lsl.w	r3, r1, r4
 80007a6:	ea40 0003 	orr.w	r0, r0, r3
 80007aa:	4629      	mov	r1, r5
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	fa21 f004 	lsr.w	r0, r1, r4
 80007b2:	4629      	mov	r1, r5
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	f094 0f00 	teq	r4, #0
 80007ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007be:	bf06      	itte	eq
 80007c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007c4:	3401      	addeq	r4, #1
 80007c6:	3d01      	subne	r5, #1
 80007c8:	e74e      	b.n	8000668 <__adddf3+0x8c>
 80007ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ce:	bf18      	it	ne
 80007d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007d4:	d029      	beq.n	800082a <__adddf3+0x24e>
 80007d6:	ea94 0f05 	teq	r4, r5
 80007da:	bf08      	it	eq
 80007dc:	ea90 0f02 	teqeq	r0, r2
 80007e0:	d005      	beq.n	80007ee <__adddf3+0x212>
 80007e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007e6:	bf04      	itt	eq
 80007e8:	4619      	moveq	r1, r3
 80007ea:	4610      	moveq	r0, r2
 80007ec:	bd30      	pop	{r4, r5, pc}
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf1e      	ittt	ne
 80007f4:	2100      	movne	r1, #0
 80007f6:	2000      	movne	r0, #0
 80007f8:	bd30      	popne	{r4, r5, pc}
 80007fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007fe:	d105      	bne.n	800080c <__adddf3+0x230>
 8000800:	0040      	lsls	r0, r0, #1
 8000802:	4149      	adcs	r1, r1
 8000804:	bf28      	it	cs
 8000806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800080a:	bd30      	pop	{r4, r5, pc}
 800080c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000810:	bf3c      	itt	cc
 8000812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000816:	bd30      	popcc	{r4, r5, pc}
 8000818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800081c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800082e:	bf1a      	itte	ne
 8000830:	4619      	movne	r1, r3
 8000832:	4610      	movne	r0, r2
 8000834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000838:	bf1c      	itt	ne
 800083a:	460b      	movne	r3, r1
 800083c:	4602      	movne	r2, r0
 800083e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000842:	bf06      	itte	eq
 8000844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000848:	ea91 0f03 	teqeq	r1, r3
 800084c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000850:	bd30      	pop	{r4, r5, pc}
 8000852:	bf00      	nop

08000854 <__aeabi_ui2d>:
 8000854:	f090 0f00 	teq	r0, #0
 8000858:	bf04      	itt	eq
 800085a:	2100      	moveq	r1, #0
 800085c:	4770      	bxeq	lr
 800085e:	b530      	push	{r4, r5, lr}
 8000860:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000864:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000868:	f04f 0500 	mov.w	r5, #0
 800086c:	f04f 0100 	mov.w	r1, #0
 8000870:	e750      	b.n	8000714 <__adddf3+0x138>
 8000872:	bf00      	nop

08000874 <__aeabi_i2d>:
 8000874:	f090 0f00 	teq	r0, #0
 8000878:	bf04      	itt	eq
 800087a:	2100      	moveq	r1, #0
 800087c:	4770      	bxeq	lr
 800087e:	b530      	push	{r4, r5, lr}
 8000880:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000884:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800088c:	bf48      	it	mi
 800088e:	4240      	negmi	r0, r0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	e73e      	b.n	8000714 <__adddf3+0x138>
 8000896:	bf00      	nop

08000898 <__aeabi_f2d>:
 8000898:	0042      	lsls	r2, r0, #1
 800089a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800089e:	ea4f 0131 	mov.w	r1, r1, rrx
 80008a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008a6:	bf1f      	itttt	ne
 80008a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008b4:	4770      	bxne	lr
 80008b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008ba:	bf08      	it	eq
 80008bc:	4770      	bxeq	lr
 80008be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008c2:	bf04      	itt	eq
 80008c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008c8:	4770      	bxeq	lr
 80008ca:	b530      	push	{r4, r5, lr}
 80008cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	e71c      	b.n	8000714 <__adddf3+0x138>
 80008da:	bf00      	nop

080008dc <__aeabi_ul2d>:
 80008dc:	ea50 0201 	orrs.w	r2, r0, r1
 80008e0:	bf08      	it	eq
 80008e2:	4770      	bxeq	lr
 80008e4:	b530      	push	{r4, r5, lr}
 80008e6:	f04f 0500 	mov.w	r5, #0
 80008ea:	e00a      	b.n	8000902 <__aeabi_l2d+0x16>

080008ec <__aeabi_l2d>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008fa:	d502      	bpl.n	8000902 <__aeabi_l2d+0x16>
 80008fc:	4240      	negs	r0, r0
 80008fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000902:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000906:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800090a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800090e:	f43f aed8 	beq.w	80006c2 <__adddf3+0xe6>
 8000912:	f04f 0203 	mov.w	r2, #3
 8000916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800091a:	bf18      	it	ne
 800091c:	3203      	addne	r2, #3
 800091e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000922:	bf18      	it	ne
 8000924:	3203      	addne	r2, #3
 8000926:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800092a:	f1c2 0320 	rsb	r3, r2, #32
 800092e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000932:	fa20 f002 	lsr.w	r0, r0, r2
 8000936:	fa01 fe03 	lsl.w	lr, r1, r3
 800093a:	ea40 000e 	orr.w	r0, r0, lr
 800093e:	fa21 f102 	lsr.w	r1, r1, r2
 8000942:	4414      	add	r4, r2
 8000944:	e6bd      	b.n	80006c2 <__adddf3+0xe6>
 8000946:	bf00      	nop

08000948 <__aeabi_dmul>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000956:	bf1d      	ittte	ne
 8000958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800095c:	ea94 0f0c 	teqne	r4, ip
 8000960:	ea95 0f0c 	teqne	r5, ip
 8000964:	f000 f8de 	bleq	8000b24 <__aeabi_dmul+0x1dc>
 8000968:	442c      	add	r4, r5
 800096a:	ea81 0603 	eor.w	r6, r1, r3
 800096e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000972:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000976:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800097a:	bf18      	it	ne
 800097c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000988:	d038      	beq.n	80009fc <__aeabi_dmul+0xb4>
 800098a:	fba0 ce02 	umull	ip, lr, r0, r2
 800098e:	f04f 0500 	mov.w	r5, #0
 8000992:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000996:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800099a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800099e:	f04f 0600 	mov.w	r6, #0
 80009a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009a6:	f09c 0f00 	teq	ip, #0
 80009aa:	bf18      	it	ne
 80009ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80009b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80009b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80009b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80009bc:	d204      	bcs.n	80009c8 <__aeabi_dmul+0x80>
 80009be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80009c2:	416d      	adcs	r5, r5
 80009c4:	eb46 0606 	adc.w	r6, r6, r6
 80009c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80009cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e0:	bf88      	it	hi
 80009e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e6:	d81e      	bhi.n	8000a26 <__aeabi_dmul+0xde>
 80009e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009f2:	f150 0000 	adcs.w	r0, r0, #0
 80009f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a00:	ea46 0101 	orr.w	r1, r6, r1
 8000a04:	ea40 0002 	orr.w	r0, r0, r2
 8000a08:	ea81 0103 	eor.w	r1, r1, r3
 8000a0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a10:	bfc2      	ittt	gt
 8000a12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a20:	f04f 0e00 	mov.w	lr, #0
 8000a24:	3c01      	subs	r4, #1
 8000a26:	f300 80ab 	bgt.w	8000b80 <__aeabi_dmul+0x238>
 8000a2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a2e:	bfde      	ittt	le
 8000a30:	2000      	movle	r0, #0
 8000a32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a36:	bd70      	pople	{r4, r5, r6, pc}
 8000a38:	f1c4 0400 	rsb	r4, r4, #0
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	da35      	bge.n	8000aac <__aeabi_dmul+0x164>
 8000a40:	340c      	adds	r4, #12
 8000a42:	dc1b      	bgt.n	8000a7c <__aeabi_dmul+0x134>
 8000a44:	f104 0414 	add.w	r4, r4, #20
 8000a48:	f1c4 0520 	rsb	r5, r4, #32
 8000a4c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a50:	fa20 f004 	lsr.w	r0, r0, r4
 8000a54:	fa01 f205 	lsl.w	r2, r1, r5
 8000a58:	ea40 0002 	orr.w	r0, r0, r2
 8000a5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a68:	fa21 f604 	lsr.w	r6, r1, r4
 8000a6c:	eb42 0106 	adc.w	r1, r2, r6
 8000a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a74:	bf08      	it	eq
 8000a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f1c4 040c 	rsb	r4, r4, #12
 8000a80:	f1c4 0520 	rsb	r5, r4, #32
 8000a84:	fa00 f304 	lsl.w	r3, r0, r4
 8000a88:	fa20 f005 	lsr.w	r0, r0, r5
 8000a8c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a90:	ea40 0002 	orr.w	r0, r0, r2
 8000a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a9c:	f141 0100 	adc.w	r1, r1, #0
 8000aa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aa4:	bf08      	it	eq
 8000aa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	f1c4 0520 	rsb	r5, r4, #32
 8000ab0:	fa00 f205 	lsl.w	r2, r0, r5
 8000ab4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ab8:	fa20 f304 	lsr.w	r3, r0, r4
 8000abc:	fa01 f205 	lsl.w	r2, r1, r5
 8000ac0:	ea43 0302 	orr.w	r3, r3, r2
 8000ac4:	fa21 f004 	lsr.w	r0, r1, r4
 8000ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000acc:	fa21 f204 	lsr.w	r2, r1, r4
 8000ad0:	ea20 0002 	bic.w	r0, r0, r2
 8000ad4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000adc:	bf08      	it	eq
 8000ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f094 0f00 	teq	r4, #0
 8000ae8:	d10f      	bne.n	8000b0a <__aeabi_dmul+0x1c2>
 8000aea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000aee:	0040      	lsls	r0, r0, #1
 8000af0:	eb41 0101 	adc.w	r1, r1, r1
 8000af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000af8:	bf08      	it	eq
 8000afa:	3c01      	subeq	r4, #1
 8000afc:	d0f7      	beq.n	8000aee <__aeabi_dmul+0x1a6>
 8000afe:	ea41 0106 	orr.w	r1, r1, r6
 8000b02:	f095 0f00 	teq	r5, #0
 8000b06:	bf18      	it	ne
 8000b08:	4770      	bxne	lr
 8000b0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	eb43 0303 	adc.w	r3, r3, r3
 8000b14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b18:	bf08      	it	eq
 8000b1a:	3d01      	subeq	r5, #1
 8000b1c:	d0f7      	beq.n	8000b0e <__aeabi_dmul+0x1c6>
 8000b1e:	ea43 0306 	orr.w	r3, r3, r6
 8000b22:	4770      	bx	lr
 8000b24:	ea94 0f0c 	teq	r4, ip
 8000b28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b2c:	bf18      	it	ne
 8000b2e:	ea95 0f0c 	teqne	r5, ip
 8000b32:	d00c      	beq.n	8000b4e <__aeabi_dmul+0x206>
 8000b34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3e:	d1d1      	bne.n	8000ae4 <__aeabi_dmul+0x19c>
 8000b40:	ea81 0103 	eor.w	r1, r1, r3
 8000b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b52:	bf06      	itte	eq
 8000b54:	4610      	moveq	r0, r2
 8000b56:	4619      	moveq	r1, r3
 8000b58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b5c:	d019      	beq.n	8000b92 <__aeabi_dmul+0x24a>
 8000b5e:	ea94 0f0c 	teq	r4, ip
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dmul+0x222>
 8000b64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b68:	d113      	bne.n	8000b92 <__aeabi_dmul+0x24a>
 8000b6a:	ea95 0f0c 	teq	r5, ip
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_dmul+0x234>
 8000b70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b74:	bf1c      	itt	ne
 8000b76:	4610      	movne	r0, r2
 8000b78:	4619      	movne	r1, r3
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dmul+0x24a>
 8000b7c:	ea81 0103 	eor.w	r1, r1, r3
 8000b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}

08000b9c <__aeabi_ddiv>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ba6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000baa:	bf1d      	ittte	ne
 8000bac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000bb0:	ea94 0f0c 	teqne	r4, ip
 8000bb4:	ea95 0f0c 	teqne	r5, ip
 8000bb8:	f000 f8a7 	bleq	8000d0a <__aeabi_ddiv+0x16e>
 8000bbc:	eba4 0405 	sub.w	r4, r4, r5
 8000bc0:	ea81 0e03 	eor.w	lr, r1, r3
 8000bc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000bcc:	f000 8088 	beq.w	8000ce0 <__aeabi_ddiv+0x144>
 8000bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000bd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000bd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000bdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000be0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000be4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000be8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bf4:	429d      	cmp	r5, r3
 8000bf6:	bf08      	it	eq
 8000bf8:	4296      	cmpeq	r6, r2
 8000bfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c02:	d202      	bcs.n	8000c0a <__aeabi_ddiv+0x6e>
 8000c04:	085b      	lsrs	r3, r3, #1
 8000c06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c0a:	1ab6      	subs	r6, r6, r2
 8000c0c:	eb65 0503 	sbc.w	r5, r5, r3
 8000c10:	085b      	lsrs	r3, r3, #1
 8000c12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c26:	bf22      	ittt	cs
 8000c28:	1ab6      	subcs	r6, r6, r2
 8000c2a:	4675      	movcs	r5, lr
 8000c2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c3e:	bf22      	ittt	cs
 8000c40:	1ab6      	subcs	r6, r6, r2
 8000c42:	4675      	movcs	r5, lr
 8000c44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c56:	bf22      	ittt	cs
 8000c58:	1ab6      	subcs	r6, r6, r2
 8000c5a:	4675      	movcs	r5, lr
 8000c5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c6e:	bf22      	ittt	cs
 8000c70:	1ab6      	subcs	r6, r6, r2
 8000c72:	4675      	movcs	r5, lr
 8000c74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c78:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_ddiv+0x114>
 8000c7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c9a:	d1c0      	bne.n	8000c1e <__aeabi_ddiv+0x82>
 8000c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ca0:	d10b      	bne.n	8000cba <__aeabi_ddiv+0x11e>
 8000ca2:	ea41 0100 	orr.w	r1, r1, r0
 8000ca6:	f04f 0000 	mov.w	r0, #0
 8000caa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cae:	e7b6      	b.n	8000c1e <__aeabi_ddiv+0x82>
 8000cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cb4:	bf04      	itt	eq
 8000cb6:	4301      	orreq	r1, r0
 8000cb8:	2000      	moveq	r0, #0
 8000cba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000cbe:	bf88      	it	hi
 8000cc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000cc4:	f63f aeaf 	bhi.w	8000a26 <__aeabi_dmul+0xde>
 8000cc8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ccc:	bf04      	itt	eq
 8000cce:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000cd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000cd6:	f150 0000 	adcs.w	r0, r0, #0
 8000cda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ce4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ce8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cec:	bfc2      	ittt	gt
 8000cee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cf6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cfc:	f04f 0e00 	mov.w	lr, #0
 8000d00:	3c01      	subs	r4, #1
 8000d02:	e690      	b.n	8000a26 <__aeabi_dmul+0xde>
 8000d04:	ea45 0e06 	orr.w	lr, r5, r6
 8000d08:	e68d      	b.n	8000a26 <__aeabi_dmul+0xde>
 8000d0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d0e:	ea94 0f0c 	teq	r4, ip
 8000d12:	bf08      	it	eq
 8000d14:	ea95 0f0c 	teqeq	r5, ip
 8000d18:	f43f af3b 	beq.w	8000b92 <__aeabi_dmul+0x24a>
 8000d1c:	ea94 0f0c 	teq	r4, ip
 8000d20:	d10a      	bne.n	8000d38 <__aeabi_ddiv+0x19c>
 8000d22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d26:	f47f af34 	bne.w	8000b92 <__aeabi_dmul+0x24a>
 8000d2a:	ea95 0f0c 	teq	r5, ip
 8000d2e:	f47f af25 	bne.w	8000b7c <__aeabi_dmul+0x234>
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	e72c      	b.n	8000b92 <__aeabi_dmul+0x24a>
 8000d38:	ea95 0f0c 	teq	r5, ip
 8000d3c:	d106      	bne.n	8000d4c <__aeabi_ddiv+0x1b0>
 8000d3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d42:	f43f aefd 	beq.w	8000b40 <__aeabi_dmul+0x1f8>
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	e722      	b.n	8000b92 <__aeabi_dmul+0x24a>
 8000d4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d50:	bf18      	it	ne
 8000d52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d56:	f47f aec5 	bne.w	8000ae4 <__aeabi_dmul+0x19c>
 8000d5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d5e:	f47f af0d 	bne.w	8000b7c <__aeabi_dmul+0x234>
 8000d62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d66:	f47f aeeb 	bne.w	8000b40 <__aeabi_dmul+0x1f8>
 8000d6a:	e712      	b.n	8000b92 <__aeabi_dmul+0x24a>

08000d6c <__gedf2>:
 8000d6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d70:	e006      	b.n	8000d80 <__cmpdf2+0x4>
 8000d72:	bf00      	nop

08000d74 <__ledf2>:
 8000d74:	f04f 0c01 	mov.w	ip, #1
 8000d78:	e002      	b.n	8000d80 <__cmpdf2+0x4>
 8000d7a:	bf00      	nop

08000d7c <__cmpdf2>:
 8000d7c:	f04f 0c01 	mov.w	ip, #1
 8000d80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d96:	d01b      	beq.n	8000dd0 <__cmpdf2+0x54>
 8000d98:	b001      	add	sp, #4
 8000d9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d9e:	bf0c      	ite	eq
 8000da0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000da4:	ea91 0f03 	teqne	r1, r3
 8000da8:	bf02      	ittt	eq
 8000daa:	ea90 0f02 	teqeq	r0, r2
 8000dae:	2000      	moveq	r0, #0
 8000db0:	4770      	bxeq	lr
 8000db2:	f110 0f00 	cmn.w	r0, #0
 8000db6:	ea91 0f03 	teq	r1, r3
 8000dba:	bf58      	it	pl
 8000dbc:	4299      	cmppl	r1, r3
 8000dbe:	bf08      	it	eq
 8000dc0:	4290      	cmpeq	r0, r2
 8000dc2:	bf2c      	ite	cs
 8000dc4:	17d8      	asrcs	r0, r3, #31
 8000dc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000dca:	f040 0001 	orr.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd8:	d102      	bne.n	8000de0 <__cmpdf2+0x64>
 8000dda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dde:	d107      	bne.n	8000df0 <__cmpdf2+0x74>
 8000de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de8:	d1d6      	bne.n	8000d98 <__cmpdf2+0x1c>
 8000dea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dee:	d0d3      	beq.n	8000d98 <__cmpdf2+0x1c>
 8000df0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <__aeabi_cdrcmple>:
 8000df8:	4684      	mov	ip, r0
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4662      	mov	r2, ip
 8000dfe:	468c      	mov	ip, r1
 8000e00:	4619      	mov	r1, r3
 8000e02:	4663      	mov	r3, ip
 8000e04:	e000      	b.n	8000e08 <__aeabi_cdcmpeq>
 8000e06:	bf00      	nop

08000e08 <__aeabi_cdcmpeq>:
 8000e08:	b501      	push	{r0, lr}
 8000e0a:	f7ff ffb7 	bl	8000d7c <__cmpdf2>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	bf48      	it	mi
 8000e12:	f110 0f00 	cmnmi.w	r0, #0
 8000e16:	bd01      	pop	{r0, pc}

08000e18 <__aeabi_dcmpeq>:
 8000e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e1c:	f7ff fff4 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e20:	bf0c      	ite	eq
 8000e22:	2001      	moveq	r0, #1
 8000e24:	2000      	movne	r0, #0
 8000e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2a:	bf00      	nop

08000e2c <__aeabi_dcmplt>:
 8000e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e30:	f7ff ffea 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e34:	bf34      	ite	cc
 8000e36:	2001      	movcc	r0, #1
 8000e38:	2000      	movcs	r0, #0
 8000e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3e:	bf00      	nop

08000e40 <__aeabi_dcmple>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff ffe0 	bl	8000e08 <__aeabi_cdcmpeq>
 8000e48:	bf94      	ite	ls
 8000e4a:	2001      	movls	r0, #1
 8000e4c:	2000      	movhi	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_dcmpge>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffce 	bl	8000df8 <__aeabi_cdrcmple>
 8000e5c:	bf94      	ite	ls
 8000e5e:	2001      	movls	r0, #1
 8000e60:	2000      	movhi	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_dcmpgt>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffc4 	bl	8000df8 <__aeabi_cdrcmple>
 8000e70:	bf34      	ite	cc
 8000e72:	2001      	movcc	r0, #1
 8000e74:	2000      	movcs	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_dcmpun>:
 8000e7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e84:	d102      	bne.n	8000e8c <__aeabi_dcmpun+0x10>
 8000e86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e8a:	d10a      	bne.n	8000ea2 <__aeabi_dcmpun+0x26>
 8000e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e94:	d102      	bne.n	8000e9c <__aeabi_dcmpun+0x20>
 8000e96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e9a:	d102      	bne.n	8000ea2 <__aeabi_dcmpun+0x26>
 8000e9c:	f04f 0000 	mov.w	r0, #0
 8000ea0:	4770      	bx	lr
 8000ea2:	f04f 0001 	mov.w	r0, #1
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_d2iz>:
 8000ea8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000eac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb0:	d215      	bcs.n	8000ede <__aeabi_d2iz+0x36>
 8000eb2:	d511      	bpl.n	8000ed8 <__aeabi_d2iz+0x30>
 8000eb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ebc:	d912      	bls.n	8000ee4 <__aeabi_d2iz+0x3c>
 8000ebe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ece:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed2:	bf18      	it	ne
 8000ed4:	4240      	negne	r0, r0
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee2:	d105      	bne.n	8000ef0 <__aeabi_d2iz+0x48>
 8000ee4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ee8:	bf08      	it	eq
 8000eea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eee:	4770      	bx	lr
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8000ef8:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000efa:	b9d8      	cbnz	r0, 8000f34 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8000efc:	a801      	add	r0, sp, #4
 8000efe:	f000 fb79 	bl	80015f4 <fetch_uint32_arg>
  if(rc) {
 8000f02:	b128      	cbz	r0, 8000f10 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <CmdLed+0x40>)
 8000f06:	f002 fef7 	bl	8003cf8 <puts>
    return CmdReturnBadParameter1;
 8000f0a:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8000f10:	9901      	ldr	r1, [sp, #4]
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <CmdLed+0x44>)
 8000f14:	f002 fe54 	bl	8003bc0 <iprintf>
  val = val ? 1 : 0;
 8000f18:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <CmdLed+0x48>)
  val = val ? 1 : 0;
 8000f1c:	3b00      	subs	r3, #0
 8000f1e:	bf18      	it	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f24:	f002 fee8 	bl	8003cf8 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8000f28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <CmdLed+0x4c>)
 8000f2e:	2120      	movs	r1, #32
 8000f30:	f002 f808 	bl	8002f44 <HAL_GPIO_WritePin>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000f34:	2000      	movs	r0, #0
 8000f36:	e7e9      	b.n	8000f0c <CmdLed+0x14>
 8000f38:	08006910 	.word	0x08006910
 8000f3c:	0800693e 	.word	0x0800693e
 8000f40:	0800695a 	.word	0x0800695a
 8000f44:	40020000 	.word	0x40020000

08000f48 <my_init>:
{
 8000f48:	b508      	push	{r3, lr}
  TerminalInit();
 8000f4a:	f000 fc69 	bl	8001820 <TerminalInit>
  WDTCheckReset();
 8000f4e:	f000 fe53 	bl	8001bf8 <WDTCheckReset>
  TaskingInit();
 8000f52:	f000 febd 	bl	8001cd0 <TaskingInit>
}
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  my_Init();
 8000f5a:	f7ff b957 	b.w	800020c <my_Init>

08000f5e <my_main>:
{
 8000f5e:	b508      	push	{r3, lr}
  TaskingRun();  /* Run all registered tasks */
 8000f60:	f000 fed4 	bl	8001d0c <TaskingRun>
  my_Loop();
 8000f64:	f7ff f950 	bl	8000208 <my_Loop>
}
 8000f68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WDTFeed();
 8000f6c:	f000 be88 	b.w	8001c80 <WDTFeed>

08000f70 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f70:	2801      	cmp	r0, #1
{
 8000f72:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f74:	d004      	beq.n	8000f80 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d104      	bne.n	8000f84 <CmdTest+0x14>
    printf("testasm\n\n"
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <CmdTest+0x24>)
 8000f7c:	f002 febc 	bl	8003cf8 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8000f80:	2000      	movs	r0, #0
 8000f82:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8000f84:	204d      	movs	r0, #77	; 0x4d
 8000f86:	f7ff f92b 	bl	80001e0 <mytest>
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CmdTest+0x28>)
 8000f8e:	f002 fe17 	bl	8003bc0 <iprintf>
  return CmdReturnOk;
 8000f92:	e7f5      	b.n	8000f80 <CmdTest+0x10>
 8000f94:	08006986 	.word	0x08006986
 8000f98:	080069bf 	.word	0x080069bf

08000f9c <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <USR_LED_Toggle+0x10>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200003a0 	.word	0x200003a0

08000fb0 <enableDisableStepper>:

ADD_CMD("ss",StepSpeedAction,"<dir> <delay>             Make stepper step at a speed set by the delay value.\n");


ParserReturnVal_t  enableDisableStepper(int mode)
{
 8000fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000fb2:	b110      	cbz	r0, 8000fba <enableDisableStepper+0xa>
 8000fb4:	2000      	movs	r0, #0
    gIsStepperEnabled = 0; 
    printf("stepper motor disabled.\n");
  }

  return CmdReturnOk;
}
 8000fb6:	b003      	add	sp, #12
 8000fb8:	bd30      	pop	{r4, r5, pc}
  rc=fetch_uint32_arg(&stepperStatus);
 8000fba:	a801      	add	r0, sp, #4
 8000fbc:	f000 fb1a 	bl	80015f4 <fetch_uint32_arg>
  if(rc)
 8000fc0:	b120      	cbz	r0, 8000fcc <enableDisableStepper+0x1c>
    printf("Please enable or disable stepper controller.\n");
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <enableDisableStepper+0x40>)
 8000fc4:	f002 fe98 	bl	8003cf8 <puts>
    return CmdReturnBadParameter1;
 8000fc8:	2004      	movs	r0, #4
 8000fca:	e7f4      	b.n	8000fb6 <enableDisableStepper+0x6>
  if(stepperStatus == 1)
 8000fcc:	9c01      	ldr	r4, [sp, #4]
 8000fce:	2c01      	cmp	r4, #1
 8000fd0:	d105      	bne.n	8000fde <enableDisableStepper+0x2e>
    gIsStepperEnabled = 1; 
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <enableDisableStepper+0x44>)
    printf("stepper motor enabled.\n");
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <enableDisableStepper+0x48>)
    gIsStepperEnabled = 1; 
 8000fd6:	601c      	str	r4, [r3, #0]
    printf("stepper motor enabled.\n");
 8000fd8:	f002 fe8e 	bl	8003cf8 <puts>
 8000fdc:	e7ea      	b.n	8000fb4 <enableDisableStepper+0x4>
  } else if (stepperStatus == 0)
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	d1e8      	bne.n	8000fb4 <enableDisableStepper+0x4>
    gIsStepperEnabled = 0; 
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <enableDisableStepper+0x44>)
    printf("stepper motor disabled.\n");
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <enableDisableStepper+0x4c>)
    gIsStepperEnabled = 0; 
 8000fe6:	601c      	str	r4, [r3, #0]
    printf("stepper motor disabled.\n");
 8000fe8:	f002 fe86 	bl	8003cf8 <puts>
  return CmdReturnOk;
 8000fec:	4620      	mov	r0, r4
 8000fee:	e7e2      	b.n	8000fb6 <enableDisableStepper+0x6>
 8000ff0:	080069e3 	.word	0x080069e3
 8000ff4:	200003a8 	.word	0x200003a8
 8000ff8:	08006a10 	.word	0x08006a10
 8000ffc:	08006a27 	.word	0x08006a27

08001000 <Timer11_Init>:
void Timer11_Init(int pulseDuration){
 8001000:	b573      	push	{r0, r1, r4, r5, r6, lr}
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <Timer11_Init+0x64>)
	tim11.Instance = TIM11;
 8001004:	4c18      	ldr	r4, [pc, #96]	; (8001068 <Timer11_Init+0x68>)
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001006:	2600      	movs	r6, #0
 8001008:	9601      	str	r6, [sp, #4]
 800100a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800100c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	9b01      	ldr	r3, [sp, #4]
	tim11.Instance = TIM11;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <Timer11_Init+0x6c>)
 800101e:	6023      	str	r3, [r4, #0]
void Timer11_Init(int pulseDuration){
 8001020:	4605      	mov	r5, r0
	tim11.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;			// this will cause the timer to create ms (set to 1000000 - 1 for us)
 8001022:	f001 fd75 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
	tim11.Init.Period = pulseDuration/2;											// in this example the number here will be the number of ms for on/off
 8001026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
	tim11.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;			// this will cause the timer to create ms (set to 1000000 - 1 for us)
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <Timer11_Init+0x70>)
 800102c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001030:	3801      	subs	r0, #1
	tim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	e9c4 0601 	strd	r0, r6, [r4, #4]
	tim11.Init.Period = pulseDuration/2;											// in this example the number here will be the number of ms for on/off
 8001036:	106d      	asrs	r5, r5, #1
	HAL_TIM_Base_Init(&tim11);
 8001038:	4620      	mov	r0, r4
	tim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	e9c4 5603 	strd	r5, r6, [r4, #12]
	tim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;		// this parameter will cause the timer to reset when timed out
 800103e:	e9c4 6605 	strd	r6, r6, [r4, #20]
	HAL_TIM_Base_Init(&tim11);
 8001042:	f002 f8e1 	bl	8003208 <HAL_TIM_Base_Init>
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 10, 0U);				// note the timer 11 IRQ on this board is shared with Timer 1
 8001046:	4632      	mov	r2, r6
 8001048:	210a      	movs	r1, #10
 800104a:	201a      	movs	r0, #26
 800104c:	f001 fdd2 	bl	8002bf4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001050:	201a      	movs	r0, #26
 8001052:	f001 fe01 	bl	8002c58 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&tim11);
 8001056:	4620      	mov	r0, r4
}
 8001058:	b002      	add	sp, #8
 800105a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Base_Start_IT(&tim11);
 800105e:	f001 bfad 	b.w	8002fbc <HAL_TIM_Base_Start_IT>
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	200003ac 	.word	0x200003ac
 800106c:	40014800 	.word	0x40014800
 8001070:	000f4240 	.word	0x000f4240

08001074 <gpioInit>:
void gpioInit(){
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	2214      	movs	r2, #20
void gpioInit(){
 8001078:	b08b      	sub	sp, #44	; 0x2c
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	eb0d 0002 	add.w	r0, sp, r2
 800107e:	2100      	movs	r1, #0
 8001080:	f002 f92c 	bl	80032dc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	2400      	movs	r4, #0
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <gpioInit+0xd4>)
 8001088:	9401      	str	r4, [sp, #4]
 800108a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800108c:	4e2f      	ldr	r6, [pc, #188]	; (800114c <gpioInit+0xd8>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800108e:	4f30      	ldr	r7, [pc, #192]	; (8001150 <gpioInit+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	f042 0204 	orr.w	r2, r2, #4
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
 8001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001098:	f002 0204 	and.w	r2, r2, #4
 800109c:	9201      	str	r2, [sp, #4]
 800109e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a0:	9402      	str	r4, [sp, #8]
 80010a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
 80010aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010b0:	9202      	str	r2, [sp, #8]
 80010b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	9403      	str	r4, [sp, #12]
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b8:	f042 0201 	orr.w	r2, r2, #1
 80010bc:	631a      	str	r2, [r3, #48]	; 0x30
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	f002 0201 	and.w	r2, r2, #1
 80010c4:	9203      	str	r2, [sp, #12]
 80010c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	9404      	str	r4, [sp, #16]
 80010ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010cc:	f042 0202 	orr.w	r2, r2, #2
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80010da:	4622      	mov	r2, r4
 80010dc:	4630      	mov	r0, r6
 80010de:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80010e2:	f001 ff2f 	bl	8002f44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80010e6:	4622      	mov	r2, r4
 80010e8:	4638      	mov	r0, r7
 80010ea:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010ee:	f001 ff29 	bl	8002f44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fa:	a905      	add	r1, sp, #20
 80010fc:	4815      	ldr	r0, [pc, #84]	; (8001154 <gpioInit+0xe0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001100:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001106:	f001 fe55 	bl	8002db4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	a905      	add	r1, sp, #20
 800110e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f001 fe4c 	bl	8002db4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800111c:	f44f 6382 	mov.w	r3, #1040	; 0x410
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	a905      	add	r1, sp, #20
 8001122:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f001 fe42 	bl	8002db4 <HAL_GPIO_Init>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001130:	462a      	mov	r2, r5
 8001132:	4638      	mov	r0, r7
 8001134:	2110      	movs	r1, #16
 8001136:	f001 ff05 	bl	8002f44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  
 800113a:	462a      	mov	r2, r5
 800113c:	2110      	movs	r1, #16
 800113e:	4630      	mov	r0, r6
 8001140:	f001 ff00 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001144:	b00b      	add	sp, #44	; 0x2c
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800

08001158 <StepSpeedAction>:
{
 8001158:	b513      	push	{r0, r1, r4, lr}
	if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800115a:	b9c0      	cbnz	r0, 800118e <StepSpeedAction+0x36>
    rcDir = fetch_uint32_arg(&dir);
 800115c:	4668      	mov	r0, sp
 800115e:	f000 fa49 	bl	80015f4 <fetch_uint32_arg>
 8001162:	4604      	mov	r4, r0
    rcDelay = fetch_uint32_arg(&delay);
 8001164:	a801      	add	r0, sp, #4
 8001166:	f000 fa45 	bl	80015f4 <fetch_uint32_arg>
    if(rcDelay || rcDir) {
 800116a:	4304      	orrs	r4, r0
 800116c:	d005      	beq.n	800117a <StepSpeedAction+0x22>
    printf("Please specify the direction and delay.\n");
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <StepSpeedAction+0x4c>)
 8001170:	f002 fdc2 	bl	8003cf8 <puts>
     return CmdReturnBadParameter1;
 8001174:	2004      	movs	r0, #4
}
 8001176:	b002      	add	sp, #8
 8001178:	bd10      	pop	{r4, pc}
    gDirection = dir;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <StepSpeedAction+0x50>)
 800117c:	9a00      	ldr	r2, [sp, #0]
 800117e:	601a      	str	r2, [r3, #0]
    if(gIsStepperEnabled != 1)
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <StepSpeedAction+0x54>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d004      	beq.n	8001192 <StepSpeedAction+0x3a>
        printf("Please enable stepper motor.");
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <StepSpeedAction+0x58>)
 800118a:	f002 fd19 	bl	8003bc0 <iprintf>
	if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800118e:	2000      	movs	r0, #0
 8001190:	e7f1      	b.n	8001176 <StepSpeedAction+0x1e>
    printf("Inside motor init\n");
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <StepSpeedAction+0x5c>)
 8001194:	f002 fdb0 	bl	8003cf8 <puts>
    gpioInit();
 8001198:	f7ff ff6c 	bl	8001074 <gpioInit>
    Timer11_Init(delay);
 800119c:	9801      	ldr	r0, [sp, #4]
 800119e:	f7ff ff2f 	bl	8001000 <Timer11_Init>
	return CmdReturnOk;
 80011a2:	e7f4      	b.n	800118e <StepSpeedAction+0x36>
 80011a4:	08006a3f 	.word	0x08006a3f
 80011a8:	200003a4 	.word	0x200003a4
 80011ac:	200003a8 	.word	0x200003a8
 80011b0:	08006a67 	.word	0x08006a67
 80011b4:	08006a84 	.word	0x08006a84

080011b8 <TIM1_TRG_COM_TIM11_IRQHandler>:
ADD_CMD("se",enableDisableStepper,"         enable or disable stepper.\n");


void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
	HAL_TIM_IRQHandler(&tim11);
 80011b8:	4801      	ldr	r0, [pc, #4]	; (80011c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 80011ba:	f001 bf35 	b.w	8003028 <HAL_TIM_IRQHandler>
 80011be:	bf00      	nop
 80011c0:	200003ac 	.word	0x200003ac

080011c4 <HAL_TIM_PeriodElapsedCallback>:
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim )
{
 80011c4:	b508      	push	{r3, lr}
	if( htim == &tim11 ){								// check if this was meant for us
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011c8:	4283      	cmp	r3, r0
 80011ca:	d121      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x4c>
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011ce:	2120      	movs	r1, #32
 80011d0:	f001 febd 	bl	8002f4e <HAL_GPIO_TogglePin>
        
        //Telling motor to rotate CW or CCW
        if(gDirection < 0)
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2a00      	cmp	r2, #0
 80011da:	da03      	bge.n	80011e4 <HAL_TIM_PeriodElapsedCallback+0x20>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
        }
        else if(gDirection > 0)
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80011de:	4810      	ldr	r0, [pc, #64]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011e0:	2110      	movs	r1, #16
 80011e2:	e002      	b.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x26>
        else if(gDirection == 0)
 80011e4:	d112      	bne.n	800120c <HAL_TIM_PeriodElapsedCallback+0x48>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011e8:	2110      	movs	r1, #16
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80011ea:	f001 feab 	bl	8002f44 <HAL_GPIO_WritePin>
        }
        
        if(gIsStepperEnabled == 1)
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2a01      	cmp	r2, #1
 80011f4:	d10c      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x4c>
        {
            //Checking if we need to switch on the Motor.
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);              
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011f8:	2110      	movs	r1, #16
 80011fa:	f001 fea3 	bl	8002f44 <HAL_GPIO_WritePin>
        }


        
	}
}
 80011fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_10 );
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	f001 bea1 	b.w	8002f4e <HAL_GPIO_TogglePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	e7e6      	b.n	80011de <HAL_TIM_PeriodElapsedCallback+0x1a>
}
 8001210:	bd08      	pop	{r3, pc}
 8001212:	bf00      	nop
 8001214:	200003ac 	.word	0x200003ac
 8001218:	40020000 	.word	0x40020000
 800121c:	200003a4 	.word	0x200003a4
 8001220:	40020400 	.word	0x40020400
 8001224:	200003a8 	.word	0x200003a8

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001252:	f001 f9c9 	bl	80025e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f002 f81d 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f001 f8bb 	bl	80023d4 <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 800126c:	08012afc 	.word	0x08012afc
  ldr r2, =_sbss
 8001270:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 8001274:	20000d5c 	.word	0x20000d5c

08001278 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 8001278:	f000 fd7c 	bl	8001d74 <Default_IRQHandler>
  b  Infinite_Loop
 800127c:	e7fc      	b.n	8001278 <ADC_IRQHandler>
	...

08001280 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8001280:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <_sbrk_r+0x28>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	b90a      	cbnz	r2, 800128c <_sbrk_r+0xc>
    heap_end = &end;
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <_sbrk_r+0x2c>)
 800128a:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 800128c:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 800128e:	466a      	mov	r2, sp
 8001290:	4401      	add	r1, r0
 8001292:	4291      	cmp	r1, r2
 8001294:	d906      	bls.n	80012a4 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8001296:	f001 fff7 	bl	8003288 <__errno>
 800129a:	230c      	movs	r3, #12
 800129c:	6003      	str	r3, [r0, #0]
      return (caddr_t) -1;
 800129e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 80012a2:	bd08      	pop	{r3, pc}
  heap_end += incr;
 80012a4:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 80012a6:	e7fc      	b.n	80012a2 <_sbrk_r+0x22>
 80012a8:	200003f4 	.word	0x200003f4
 80012ac:	20000d60 	.word	0x20000d60

080012b0 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 80012b0:	2000      	movs	r0, #0
 80012b2:	4770      	bx	lr

080012b4 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	6053      	str	r3, [r2, #4]
   return 0;
}
 80012ba:	2000      	movs	r0, #0
 80012bc:	4770      	bx	lr

080012be <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 80012be:	2001      	movs	r0, #1
 80012c0:	4770      	bx	lr

080012c2 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 80012c2:	2000      	movs	r0, #0
 80012c4:	4770      	bx	lr

080012c6 <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 80012c6:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 80012c8:	2000      	movs	r0, #0
 80012ca:	461a      	mov	r2, r3
 80012cc:	f000 bace 	b.w	800186c <TerminalRead>

080012d0 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 80012d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 80012d4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800130c <_write_r+0x3c>
{
 80012d8:	461d      	mov	r5, r3
 80012da:	4614      	mov	r4, r2
 80012dc:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 80012de:	42bc      	cmp	r4, r7
 80012e0:	4626      	mov	r6, r4
 80012e2:	d102      	bne.n	80012ea <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 80012e4:	4628      	mov	r0, r5
 80012e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 80012ea:	7833      	ldrb	r3, [r6, #0]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	f104 0401 	add.w	r4, r4, #1
 80012f2:	d104      	bne.n	80012fe <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4641      	mov	r1, r8
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fb0d 	bl	8001918 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 80012fe:	2201      	movs	r2, #1
 8001300:	4631      	mov	r1, r6
 8001302:	2000      	movs	r0, #0
 8001304:	f000 fb08 	bl	8001918 <TerminalOutputBufferWrite>
    count--;
 8001308:	e7e9      	b.n	80012de <_write_r+0xe>
 800130a:	bf00      	nop
 800130c:	08007480 	.word	0x08007480

08001310 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001314:	4770      	bx	lr

08001316 <_exit>:

void _exit(int status)
{
  while(1) {}
 8001316:	e7fe      	b.n	8001316 <_exit>

08001318 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8001318:	2000      	movs	r0, #0
 800131a:	4770      	bx	lr

0800131c <CmdW>:
  return CmdReturnOk;
}


ParserReturnVal_t CmdW(int mode)
{
 800131c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800131e:	b940      	cbnz	r0, 8001332 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001320:	4668      	mov	r0, sp
 8001322:	f000 f967 	bl	80015f4 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8001326:	a801      	add	r0, sp, #4
 8001328:	f000 f964 	bl	80015f4 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 800132c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001330:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 8001332:	2000      	movs	r0, #0
 8001334:	b003      	add	sp, #12
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800133c <CmdR>:
{
 800133c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001340:	4604      	mov	r4, r0
 8001342:	b9f0      	cbnz	r0, 8001382 <CmdR+0x46>
  fetch_uint32_arg(&addr);
 8001344:	a801      	add	r0, sp, #4
 8001346:	f000 f955 	bl	80015f4 <fetch_uint32_arg>
  data = *((uint32_t *)addr);
 800134a:	9901      	ldr	r1, [sp, #4]
  printf("0x%08lX: 0x%08lX\n",addr, data);
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 800134e:	680d      	ldr	r5, [r1, #0]
    printf("%s%c",
 8001350:	4e12      	ldr	r6, [pc, #72]	; (800139c <CmdR+0x60>)
 8001352:	4f13      	ldr	r7, [pc, #76]	; (80013a0 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8001354:	462a      	mov	r2, r5
 8001356:	f002 fc33 	bl	8003bc0 <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 800135a:	4812      	ldr	r0, [pc, #72]	; (80013a4 <CmdR+0x68>)
 800135c:	f002 fc30 	bl	8003bc0 <iprintf>
    printf("%s%c",
 8001360:	4911      	ldr	r1, [pc, #68]	; (80013a8 <CmdR+0x6c>)
 8001362:	4688      	mov	r8, r1
 8001364:	2d00      	cmp	r5, #0
 8001366:	bfb4      	ite	lt
 8001368:	2231      	movlt	r2, #49	; 0x31
 800136a:	2230      	movge	r2, #48	; 0x30
 800136c:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 800136e:	3401      	adds	r4, #1
    printf("%s%c",
 8001370:	f002 fc26 	bl	8003bc0 <iprintf>
  for(i=0; i<32; i++) {
 8001374:	2c20      	cmp	r4, #32
    data <<= 1;
 8001376:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 800137a:	d106      	bne.n	800138a <CmdR+0x4e>
  printf("\n");
 800137c:	200a      	movs	r0, #10
 800137e:	f002 fc37 	bl	8003bf0 <putchar>
}
 8001382:	2000      	movs	r0, #0
 8001384:	b002      	add	sp, #8
 8001386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 800138a:	f014 0f03 	tst.w	r4, #3
 800138e:	bf14      	ite	ne
 8001390:	4639      	movne	r1, r7
 8001392:	4641      	moveq	r1, r8
 8001394:	e7e6      	b.n	8001364 <CmdR+0x28>
 8001396:	bf00      	nop
 8001398:	08011704 	.word	0x08011704
 800139c:	080117be 	.word	0x080117be
 80013a0:	08008c93 	.word	0x08008c93
 80013a4:	08011716 	.word	0x08011716
 80013a8:	08008f3c 	.word	0x08008f3c

080013ac <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
{
 80013ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013ae:	4614      	mov	r4, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80013b0:	b928      	cbnz	r0, 80013be <parse+0x12>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80013b2:	4936      	ldr	r1, [pc, #216]	; (800148c <parse+0xe0>)
 80013b4:	4836      	ldr	r0, [pc, #216]	; (8001490 <parse+0xe4>)
    return CmdReturnParserFailure;
  }

  if(len==0) {
    printf("len == 0 in %s\n",__FUNCTION__);
 80013b6:	f002 fc03 	bl	8003bc0 <iprintf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return CmdReturnParserFailure;
 80013ba:	2003      	movs	r0, #3
 80013bc:	e033      	b.n	8001426 <parse+0x7a>
  if(len==0) {
 80013be:	b911      	cbnz	r1, 80013c6 <parse+0x1a>
    printf("len == 0 in %s\n",__FUNCTION__);
 80013c0:	4932      	ldr	r1, [pc, #200]	; (800148c <parse+0xe0>)
 80013c2:	4834      	ldr	r0, [pc, #208]	; (8001494 <parse+0xe8>)
 80013c4:	e7f7      	b.n	80013b6 <parse+0xa>
  if(table == NULL) {
 80013c6:	b182      	cbz	r2, 80013ea <parse+0x3e>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80013c8:	4d33      	ldr	r5, [pc, #204]	; (8001498 <parse+0xec>)
 80013ca:	3901      	subs	r1, #1
 80013cc:	4603      	mov	r3, r0
 80013ce:	1c4e      	adds	r6, r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013d6:	d00d      	beq.n	80013f4 <parse+0x48>
 80013d8:	2a00      	cmp	r2, #0
 80013da:	d0ee      	beq.n	80013ba <parse+0xe>
 80013dc:	5d52      	ldrb	r2, [r2, r5]
 80013de:	0712      	lsls	r2, r2, #28
 80013e0:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80013e4:	d404      	bmi.n	80013f0 <parse+0x44>
  if((i==0) || (*buf==0)) {
 80013e6:	b939      	cbnz	r1, 80013f8 <parse+0x4c>
 80013e8:	e7e7      	b.n	80013ba <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 80013ea:	4928      	ldr	r1, [pc, #160]	; (800148c <parse+0xe0>)
 80013ec:	482b      	ldr	r0, [pc, #172]	; (800149c <parse+0xf0>)
 80013ee:	e7e2      	b.n	80013b6 <parse+0xa>
 80013f0:	4631      	mov	r1, r6
 80013f2:	e7ec      	b.n	80013ce <parse+0x22>
  if((i==0) || (*buf==0)) {
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d0e0      	beq.n	80013ba <parse+0xe>
  }
	
  p = strtok(buf,SEPS);
 80013f8:	4929      	ldr	r1, [pc, #164]	; (80014a0 <parse+0xf4>)
 80013fa:	f002 fd6d 	bl	8003ed8 <strtok>
  if(p==NULL) {
 80013fe:	4605      	mov	r5, r0
 8001400:	b910      	cbnz	r0, 8001408 <parse+0x5c>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8001402:	4922      	ldr	r1, [pc, #136]	; (800148c <parse+0xe0>)
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <parse+0xf8>)
 8001406:	e7d6      	b.n	80013b6 <parse+0xa>
    return CmdReturnParserFailure;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8001408:	4927      	ldr	r1, [pc, #156]	; (80014a8 <parse+0xfc>)
 800140a:	f002 fd43 	bl	8003e94 <strcasecmp>
 800140e:	b9c8      	cbnz	r0, 8001444 <parse+0x98>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8001410:	4923      	ldr	r1, [pc, #140]	; (80014a0 <parse+0xf4>)
 8001412:	f002 fd61 	bl	8003ed8 <strtok>
    if(p == NULL) {
 8001416:	4605      	mov	r5, r0
 8001418:	bb20      	cbnz	r0, 8001464 <parse+0xb8>
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
	if(t->help != NULL) {
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800141a:	4d24      	ldr	r5, [pc, #144]	; (80014ac <parse+0x100>)
 800141c:	340c      	adds	r4, #12
      for(t=table; t->cmdname!=NULL; t++) {
 800141e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 8001422:	b911      	cbnz	r1, 800142a <parse+0x7e>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
	}
      }
      return 0;
 8001424:	4608      	mov	r0, r1
    }
  }

  printf("Command '%s' not found. Type 'help' for online help\n",p);
  return CmdReturnNotFound;
}
 8001426:	b002      	add	sp, #8
 8001428:	bd70      	pop	{r4, r5, r6, pc}
	if(t->help != NULL) {
 800142a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800142e:	b122      	cbz	r2, 800143a <parse+0x8e>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001430:	4628      	mov	r0, r5
 8001432:	f002 fbc5 	bl	8003bc0 <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8001436:	340c      	adds	r4, #12
 8001438:	e7f1      	b.n	800141e <parse+0x72>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 800143a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800143e:	2001      	movs	r0, #1
 8001440:	4798      	blx	r3
 8001442:	e7f8      	b.n	8001436 <parse+0x8a>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8001444:	2600      	movs	r6, #0
  cmdArgs = p + strlen(p) + 1;
 8001446:	4628      	mov	r0, r5
 8001448:	f7ff f866 	bl	8000518 <strlen>
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <parse+0x104>)
 800144e:	3001      	adds	r0, #1
 8001450:	4428      	add	r0, r5
 8001452:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 8001454:	6821      	ldr	r1, [r4, #0]
 8001456:	b939      	cbnz	r1, 8001468 <parse+0xbc>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <parse+0x108>)
 800145a:	4629      	mov	r1, r5
 800145c:	f002 fbb0 	bl	8003bc0 <iprintf>
  return CmdReturnNotFound;
 8001460:	2001      	movs	r0, #1
 8001462:	e7e0      	b.n	8001426 <parse+0x7a>
      arg = CMD_LONG_HELP;
 8001464:	2602      	movs	r6, #2
 8001466:	e7ee      	b.n	8001446 <parse+0x9a>
    if(strcasecmp(p,t->cmdname) == 0) {
 8001468:	4628      	mov	r0, r5
 800146a:	9101      	str	r1, [sp, #4]
 800146c:	f002 fd12 	bl	8003e94 <strcasecmp>
 8001470:	9901      	ldr	r1, [sp, #4]
 8001472:	b948      	cbnz	r0, 8001488 <parse+0xdc>
      if(arg == CMD_LONG_HELP) {	
 8001474:	b116      	cbz	r6, 800147c <parse+0xd0>
	printf("%s:\n",t->cmdname);
 8001476:	4810      	ldr	r0, [pc, #64]	; (80014b8 <parse+0x10c>)
 8001478:	f002 fba2 	bl	8003bc0 <iprintf>
      return t->func(arg);
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	4630      	mov	r0, r6
}
 8001480:	b002      	add	sp, #8
 8001482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return t->func(arg);
 8001486:	4718      	bx	r3
  for(t=table; t->cmdname!=NULL; t++) {
 8001488:	340c      	adds	r4, #12
 800148a:	e7e3      	b.n	8001454 <parse+0xa8>
 800148c:	08011973 	.word	0x08011973
 8001490:	080117fe 	.word	0x080117fe
 8001494:	0801181f 	.word	0x0801181f
 8001498:	08012588 	.word	0x08012588
 800149c:	0801182f 	.word	0x0801182f
 80014a0:	08011852 	.word	0x08011852
 80014a4:	08011859 	.word	0x08011859
 80014a8:	08011889 	.word	0x08011889
 80014ac:	0801188e 	.word	0x0801188e
 80014b0:	200003f8 	.word	0x200003f8
 80014b4:	0801189f 	.word	0x0801189f
 80014b8:	0801189a 	.word	0x0801189a

080014bc <TaskInput>:
{
 80014bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(printPrompt) {
 80014be:	4d41      	ldr	r5, [pc, #260]	; (80015c4 <TaskInput+0x108>)
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	b123      	cbz	r3, 80014ce <TaskInput+0x12>
    printf("ARMON>");
 80014c4:	4840      	ldr	r0, [pc, #256]	; (80015c8 <TaskInput+0x10c>)
 80014c6:	f002 fb7b 	bl	8003bc0 <iprintf>
    printPrompt = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f10d 0107 	add.w	r1, sp, #7
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 f9c9 	bl	800186c <TerminalRead>
  if(rc) goto ProcessCharacter;
 80014da:	2800      	cmp	r0, #0
 80014dc:	d04f      	beq.n	800157e <TaskInput+0xc2>
  if(((c == 010) || (c == 0x7f)) && count) {
 80014de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d001      	beq.n	80014ea <TaskInput+0x2e>
 80014e6:	2b7f      	cmp	r3, #127	; 0x7f
 80014e8:	d115      	bne.n	8001516 <TaskInput+0x5a>
 80014ea:	4c38      	ldr	r4, [pc, #224]	; (80015cc <TaskInput+0x110>)
 80014ec:	6822      	ldr	r2, [r4, #0]
 80014ee:	b192      	cbz	r2, 8001516 <TaskInput+0x5a>
    printf("\010 \010"); /* Obliterate character */
 80014f0:	4837      	ldr	r0, [pc, #220]	; (80015d0 <TaskInput+0x114>)
 80014f2:	f002 fb65 	bl	8003bc0 <iprintf>
    buf--;     /* Then remove it from the buffer */
 80014f6:	4a37      	ldr	r2, [pc, #220]	; (80015d4 <TaskInput+0x118>)
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8001504:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001508:	f1a3 020d 	sub.w	r2, r3, #13
 800150c:	4253      	negs	r3, r2
 800150e:	4153      	adcs	r3, r2
 8001510:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <TaskInput+0x11c>)
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e033      	b.n	800157e <TaskInput+0xc2>
  } else if(c == '!') { /* '!' repeats the last command */
 8001516:	2b21      	cmp	r3, #33	; 0x21
 8001518:	d125      	bne.n	8001566 <TaskInput+0xaa>
    if(saved) {  /* But only if we have something saved */
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <TaskInput+0x120>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <TaskInput+0x48>
      strcpy(input,input_b);  /* Restore the command */
 8001522:	4c2f      	ldr	r4, [pc, #188]	; (80015e0 <TaskInput+0x124>)
 8001524:	492f      	ldr	r1, [pc, #188]	; (80015e4 <TaskInput+0x128>)
 8001526:	4620      	mov	r0, r4
 8001528:	f002 fcce 	bl	8003ec8 <strcpy>
      printf("%s",input);
 800152c:	4621      	mov	r1, r4
 800152e:	482e      	ldr	r0, [pc, #184]	; (80015e8 <TaskInput+0x12c>)
 8001530:	f002 fb46 	bl	8003bc0 <iprintf>
      count = strlen(input);
 8001534:	4620      	mov	r0, r4
 8001536:	f7fe ffef 	bl	8000518 <strlen>
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <TaskInput+0x110>)
 800153c:	6018      	str	r0, [r3, #0]
      buf = input+count;
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <TaskInput+0x118>)
 8001540:	4404      	add	r4, r0
 8001542:	601c      	str	r4, [r3, #0]
    parse(input, sizeof(input), _parsetable_start);
 8001544:	4c26      	ldr	r4, [pc, #152]	; (80015e0 <TaskInput+0x124>)
    printf("\n");
 8001546:	200a      	movs	r0, #10
 8001548:	f002 fb52 	bl	8003bf0 <putchar>
    parse(input, sizeof(input), _parsetable_start);
 800154c:	4a27      	ldr	r2, [pc, #156]	; (80015ec <TaskInput+0x130>)
 800154e:	2150      	movs	r1, #80	; 0x50
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ff2b 	bl	80013ac <parse>
    printPrompt = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	602b      	str	r3, [r5, #0]
    buf = input;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <TaskInput+0x118>)
 800155c:	601c      	str	r4, [r3, #0]
    count = 0;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <TaskInput+0x110>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e7ce      	b.n	8001504 <TaskInput+0x48>
  } else if(isprint((unsigned int)c)) {
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <TaskInput+0x134>)
 8001568:	5c9a      	ldrb	r2, [r3, r2]
 800156a:	f012 0f97 	tst.w	r2, #151	; 0x97
 800156e:	d014      	beq.n	800159a <TaskInput+0xde>
    if(count >= sizeof(input)) {
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <TaskInput+0x110>)
 8001572:	680a      	ldr	r2, [r1, #0]
 8001574:	2a4f      	cmp	r2, #79	; 0x4f
 8001576:	d904      	bls.n	8001582 <TaskInput+0xc6>
      printf("\x07"); /* Beep */
 8001578:	2007      	movs	r0, #7
 800157a:	f002 fb39 	bl	8003bf0 <putchar>
}
 800157e:	b003      	add	sp, #12
 8001580:	bd30      	pop	{r4, r5, pc}
      *buf++ = c;
 8001582:	4c14      	ldr	r4, [pc, #80]	; (80015d4 <TaskInput+0x118>)
 8001584:	6820      	ldr	r0, [r4, #0]
 8001586:	7003      	strb	r3, [r0, #0]
 8001588:	1c45      	adds	r5, r0, #1
      count++;
 800158a:	3201      	adds	r2, #1
      printf("%c",c);
 800158c:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 8001590:	6025      	str	r5, [r4, #0]
      count++;
 8001592:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8001594:	f002 fb2c 	bl	8003bf0 <putchar>
 8001598:	e7b4      	b.n	8001504 <TaskInput+0x48>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 800159a:	2b0d      	cmp	r3, #13
 800159c:	d005      	beq.n	80015aa <TaskInput+0xee>
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d1b0      	bne.n	8001504 <TaskInput+0x48>
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <TaskInput+0x11c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ac      	bne.n	8001504 <TaskInput+0x48>
    *buf = '\0';
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <TaskInput+0x118>)
    strcpy(input_b,input);
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <TaskInput+0x124>)
    *buf = '\0';
 80015ae:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <TaskInput+0x128>)
    *buf = '\0';
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80015b6:	f002 fc87 	bl	8003ec8 <strcpy>
    saved = 1;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <TaskInput+0x120>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e7c0      	b.n	8001544 <TaskInput+0x88>
 80015c2:	bf00      	nop
 80015c4:	2000019c 	.word	0x2000019c
 80015c8:	080118d4 	.word	0x080118d4
 80015cc:	200003fc 	.word	0x200003fc
 80015d0:	080118db 	.word	0x080118db
 80015d4:	20000198 	.word	0x20000198
 80015d8:	20000400 	.word	0x20000400
 80015dc:	200004a4 	.word	0x200004a4
 80015e0:	20000404 	.word	0x20000404
 80015e4:	20000454 	.word	0x20000454
 80015e8:	08012040 	.word	0x08012040
 80015ec:	08012a38 	.word	0x08012a38
 80015f0:	08012588 	.word	0x08012588

080015f4 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80015f4:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80015f6:	490c      	ldr	r1, [pc, #48]	; (8001628 <fetch_uint32_arg+0x34>)
{
 80015f8:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f002 fc6c 	bl	8003ed8 <strtok>
  if(p == NULL) {
 8001600:	4604      	mov	r4, r0
 8001602:	b168      	cbz	r0, 8001620 <fetch_uint32_arg+0x2c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001604:	2200      	movs	r2, #0
 8001606:	4611      	mov	r1, r2
 8001608:	f002 fd34 	bl	8004074 <strtoul>
 800160c:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800160e:	4620      	mov	r0, r4
 8001610:	f7fe ff82 	bl	8000518 <strlen>
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <fetch_uint32_arg+0x38>)
 8001616:	3001      	adds	r0, #1
 8001618:	4404      	add	r4, r0
 800161a:	601c      	str	r4, [r3, #0]
  return 0;
 800161c:	2000      	movs	r0, #0
}
 800161e:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001624:	e7fb      	b.n	800161e <fetch_uint32_arg+0x2a>
 8001626:	bf00      	nop
 8001628:	08011852 	.word	0x08011852
 800162c:	200003f8 	.word	0x200003f8

08001630 <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001630:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001632:	4909      	ldr	r1, [pc, #36]	; (8001658 <fetch_string_arg+0x28>)
{
 8001634:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001636:	2000      	movs	r0, #0
 8001638:	f002 fc4e 	bl	8003ed8 <strtok>
  if(p == NULL) {
 800163c:	4604      	mov	r4, r0
 800163e:	b140      	cbz	r0, 8001652 <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8001640:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 8001642:	f7fe ff69 	bl	8000518 <strlen>
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <fetch_string_arg+0x2c>)
 8001648:	3001      	adds	r0, #1
 800164a:	4404      	add	r4, r0
 800164c:	601c      	str	r4, [r3, #0]
  return 0;
 800164e:	2000      	movs	r0, #0
}
 8001650:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001656:	e7fb      	b.n	8001650 <fetch_string_arg+0x20>
 8001658:	08011852 	.word	0x08011852
 800165c:	200003f8 	.word	0x200003f8

08001660 <fetch_cmd_args>:

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <fetch_cmd_args+0xc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6003      	str	r3, [r0, #0]
  return 0;
}
 8001666:	2000      	movs	r0, #0
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200003f8 	.word	0x200003f8

08001670 <DumpBuffer>:
#define BYTES_PER_LINE        16
#define BYTES_PER_BINARY_LINE  8

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	b089      	sub	sp, #36	; 0x24
 8001676:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 800167a:	460c      	mov	r4, r1
 800167c:	2900      	cmp	r1, #0
 800167e:	d040      	beq.n	8001702 <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 8001680:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x: ",(unsigned int)address);
 8001682:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001718 <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001686:	f8df a094 	ldr.w	sl, [pc, #148]	; 800171c <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 800168a:	2500      	movs	r5, #0
 800168c:	463e      	mov	r6, r7
 800168e:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 8001690:	f015 0b0f 	ands.w	fp, r5, #15
 8001694:	eb03 0105 	add.w	r1, r3, r5
 8001698:	d136      	bne.n	8001708 <DumpBuffer+0x98>
      printf("%08x: ",(unsigned int)address);
 800169a:	4648      	mov	r0, r9
 800169c:	f002 fa90 	bl	8003bc0 <iprintf>
      bufp = buf;
 80016a0:	46b0      	mov	r8, r6
    c = *p++;
 80016a2:	9b00      	ldr	r3, [sp, #0]
 80016a4:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <DumpBuffer+0x9c>)
 80016a8:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 80016ac:	4647      	mov	r7, r8
      *bufp++ = '.';
 80016ae:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 80016b2:	4601      	mov	r1, r0
      *bufp++ = '.';
 80016b4:	bf08      	it	eq
 80016b6:	202e      	moveq	r0, #46	; 0x2e
 80016b8:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 80016bc:	4650      	mov	r0, sl
 80016be:	f002 fa7f 	bl	8003bc0 <iprintf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 80016c2:	f1bb 0f0f 	cmp.w	fp, #15
 80016c6:	d106      	bne.n	80016d6 <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 80016c8:	2100      	movs	r1, #0
 80016ca:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  |%s|\n",buf);
 80016ce:	4810      	ldr	r0, [pc, #64]	; (8001710 <DumpBuffer+0xa0>)
 80016d0:	4631      	mov	r1, r6
 80016d2:	f002 fa75 	bl	8003bc0 <iprintf>
  for(i=0; i<count; i++) {
 80016d6:	3501      	adds	r5, #1
 80016d8:	42ac      	cmp	r4, r5
 80016da:	d1d8      	bne.n	800168e <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80016dc:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 80016de:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80016e2:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 80016e6:	d00c      	beq.n	8001702 <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 80016e8:	4f0a      	ldr	r7, [pc, #40]	; (8001714 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80016ea:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 80016ee:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80016f0:	3501      	adds	r5, #1
      printf("   ");
 80016f2:	f002 fa65 	bl	8003bc0 <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80016f6:	42a5      	cmp	r5, r4
 80016f8:	d3f9      	bcc.n	80016ee <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  |%s|\n",buf);
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <DumpBuffer+0xa0>)
 80016fc:	4631      	mov	r1, r6
 80016fe:	f002 fa5f 	bl	8003bc0 <iprintf>
  }
}
 8001702:	b009      	add	sp, #36	; 0x24
 8001704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001708:	46b8      	mov	r8, r7
 800170a:	e7ca      	b.n	80016a2 <DumpBuffer+0x32>
 800170c:	08012588 	.word	0x08012588
 8001710:	08011986 	.word	0x08011986
 8001714:	080117ba 	.word	0x080117ba
 8001718:	08011979 	.word	0x08011979
 800171c:	08011980 	.word	0x08011980

08001720 <CmdDump>:
ParserReturnVal_t CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001720:	2801      	cmp	r0, #1
{
 8001722:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001724:	d00b      	beq.n	800173e <CmdDump+0x1e>
  if(action==CMD_LONG_HELP) {
 8001726:	2802      	cmp	r0, #2
 8001728:	4d0e      	ldr	r5, [pc, #56]	; (8001764 <CmdDump+0x44>)
 800172a:	4c0f      	ldr	r4, [pc, #60]	; (8001768 <CmdDump+0x48>)
 800172c:	d109      	bne.n	8001742 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800172e:	480f      	ldr	r0, [pc, #60]	; (800176c <CmdDump+0x4c>)
 8001730:	f002 fae2 	bl	8003cf8 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001734:	682a      	ldr	r2, [r5, #0]
 8001736:	6821      	ldr	r1, [r4, #0]
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <CmdDump+0x50>)
 800173a:	f002 fa41 	bl	8003bc0 <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 800173e:	2000      	movs	r0, #0
 8001740:	bd38      	pop	{r3, r4, r5, pc}
  rc = fetch_uint32_arg(&address);
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff ff56 	bl	80015f4 <fetch_uint32_arg>
  if(rc == 0) {
 8001748:	b910      	cbnz	r0, 8001750 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 800174a:	4628      	mov	r0, r5
 800174c:	f7ff ff52 	bl	80015f4 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8001750:	6822      	ldr	r2, [r4, #0]
 8001752:	6829      	ldr	r1, [r5, #0]
 8001754:	4610      	mov	r0, r2
 8001756:	f7ff ff8b 	bl	8001670 <DumpBuffer>
  address = address+count;
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	682a      	ldr	r2, [r5, #0]
 800175e:	4413      	add	r3, r2
 8001760:	6023      	str	r3, [r4, #0]
  return CmdReturnOk;
 8001762:	e7ec      	b.n	800173e <CmdDump+0x1e>
 8001764:	200001a0 	.word	0x200001a0
 8001768:	200004a8 	.word	0x200004a8
 800176c:	0801198e 	.word	0x0801198e
 8001770:	08011b26 	.word	0x08011b26

08001774 <CmdStats>:
  }
#include "terminal.inc"

/* Dump the terminal statistics */
ParserReturnVal_t CmdStats(int mode)
{
 8001774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001778:	4601      	mov	r1, r0
{
 800177a:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800177c:	bb10      	cbnz	r0, 80017c4 <CmdStats+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177e:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomically */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8001780:	4812      	ldr	r0, [pc, #72]	; (80017cc <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001782:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8001784:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8001788:	930b      	str	r3, [sp, #44]	; 0x2c
 800178a:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 800178e:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8001792:	2224      	movs	r2, #36	; 0x24
 8001794:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8001798:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 800179a:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800179e:	f001 fd9d 	bl	80032dc <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 80017a2:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%lu, %s: %s\n"
 80017a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <CmdStats+0x5c>)
 80017a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <CmdStats+0x60>)
 80017ac:	9400      	str	r4, [sp, #0]
 80017ae:	e9cd b307 	strd	fp, r3, [sp, #28]
 80017b2:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 80017b6:	e9cd 7803 	strd	r7, r8, [sp, #12]
 80017ba:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <CmdStats+0x64>)
 80017c0:	f002 f9fe 	bl	8003bc0 <iprintf>
	   s[i].framingError,
	   s[i].parityError);
  }

  return CmdReturnOk;
}
 80017c4:	2000      	movs	r0, #0
 80017c6:	b00d      	add	sp, #52	; 0x34
 80017c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017cc:	200004ac 	.word	0x200004ac
 80017d0:	08011b7c 	.word	0x08011b7c
 80017d4:	08011b84 	.word	0x08011b84
 80017d8:	08011b74 	.word	0x08011b74

080017dc <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 80017dc:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80017de:	4604      	mov	r4, r0
 80017e0:	b9b0      	cbnz	r0, 8001810 <CmdTransparent+0x34>

  index = 0;
 80017e2:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 80017e4:	a801      	add	r0, sp, #4
 80017e6:	f7ff ff05 	bl	80015f4 <fetch_uint32_arg>
  if(rc) {
 80017ea:	4602      	mov	r2, r0
 80017ec:	b130      	cbz	r0, 80017fc <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <CmdTransparent+0x38>)
 80017f0:	4621      	mov	r1, r4
 80017f2:	f002 f9e5 	bl	8003bc0 <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 80017f6:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 80017f8:	b002      	add	sp, #8
 80017fa:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80017fc:	9901      	ldr	r1, [sp, #4]
 80017fe:	b119      	cbz	r1, 8001808 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <CmdTransparent+0x3c>)
 8001802:	f002 f9dd 	bl	8003bc0 <iprintf>
    return CmdReturnBadParameter1;
 8001806:	e7f6      	b.n	80017f6 <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <CmdTransparent+0x40>)
 800180a:	f002 fa75 	bl	8003cf8 <puts>
 800180e:	e7f2      	b.n	80017f6 <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001810:	2000      	movs	r0, #0
 8001812:	e7f1      	b.n	80017f8 <CmdTransparent+0x1c>
 8001814:	08011c61 	.word	0x08011c61
 8001818:	08011c8f 	.word	0x08011c8f
 800181c:	08011cc5 	.word	0x08011cc5

08001820 <TerminalInit>:
{
 8001820:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 8001822:	4c10      	ldr	r4, [pc, #64]	; (8001864 <TerminalInit+0x44>)
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	4619      	mov	r1, r3
 800182a:	2202      	movs	r2, #2
 800182c:	6840      	ldr	r0, [r0, #4]
 800182e:	f002 fa6b 	bl	8003d08 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8001832:	6820      	ldr	r0, [r4, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	4619      	mov	r1, r3
 8001838:	2202      	movs	r2, #2
 800183a:	6880      	ldr	r0, [r0, #8]
 800183c:	f002 fa64 	bl	8003d08 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8001840:	6820      	ldr	r0, [r4, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	2202      	movs	r2, #2
 8001846:	4619      	mov	r1, r3
 8001848:	68c0      	ldr	r0, [r0, #12]
 800184a:	f002 fa5d 	bl	8003d08 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <TerminalInit+0x48>)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001856:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	615a      	str	r2, [r3, #20]
}
 8001860:	bd10      	pop	{r4, pc}
 8001862:	bf00      	nop
 8001864:	200001b0 	.word	0x200001b0
 8001868:	40004400 	.word	0x40004400

0800186c <TerminalRead>:
{
 800186c:	b530      	push	{r4, r5, lr}
 800186e:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 8001872:	4c10      	ldr	r4, [pc, #64]	; (80018b4 <TerminalRead+0x48>)
 8001874:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8001878:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 800187a:	fb05 4303 	mla	r3, r5, r3, r4
 800187e:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001882:	b2a4      	uxth	r4, r4
 8001884:	b10c      	cbz	r4, 800188a <TerminalRead+0x1e>
 8001886:	4290      	cmp	r0, r2
 8001888:	d101      	bne.n	800188e <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800188a:	b662      	cpsie	i
}
 800188c:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 800188e:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8001892:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001894:	5d1d      	ldrb	r5, [r3, r4]
 8001896:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001898:	3401      	adds	r4, #1
 800189a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800189e:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 80018a2:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 80018a6:	3c01      	subs	r4, #1
 80018a8:	b2a4      	uxth	r4, r4
 80018aa:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 80018ae:	3001      	adds	r0, #1
 80018b0:	e7e5      	b.n	800187e <TerminalRead+0x12>
 80018b2:	bf00      	nop
 80018b4:	200004ac 	.word	0x200004ac

080018b8 <CmdReceive>:
{
 80018b8:	b513      	push	{r0, r1, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018ba:	4604      	mov	r4, r0
 80018bc:	bb18      	cbnz	r0, 8001906 <CmdReceive+0x4e>
  index = 0;
 80018be:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 80018c0:	a801      	add	r0, sp, #4
 80018c2:	f7ff fe97 	bl	80015f4 <fetch_uint32_arg>
  if(rc) {
 80018c6:	4602      	mov	r2, r0
 80018c8:	b130      	cbz	r0, 80018d8 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <CmdReceive+0x54>)
 80018cc:	4621      	mov	r1, r4
 80018ce:	f002 f977 	bl	8003bc0 <iprintf>
    return CmdReturnBadParameter1;
 80018d2:	2004      	movs	r0, #4
}
 80018d4:	b002      	add	sp, #8
 80018d6:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80018d8:	9901      	ldr	r1, [sp, #4]
 80018da:	b119      	cbz	r1, 80018e4 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <CmdReceive+0x58>)
 80018de:	f002 f96f 	bl	8003bc0 <iprintf>
 80018e2:	e7f6      	b.n	80018d2 <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <CmdReceive+0x5c>)
 80018e6:	f002 f96b 	bl	8003bc0 <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 80018ea:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f10d 0103 	add.w	r1, sp, #3
 80018f4:	f7ff ffba 	bl	800186c <TerminalRead>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d0eb      	beq.n	80018d4 <CmdReceive+0x1c>
    printf("%c",c);
 80018fc:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001900:	f002 f976 	bl	8003bf0 <putchar>
 8001904:	e7f1      	b.n	80018ea <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001906:	2000      	movs	r0, #0
 8001908:	e7e4      	b.n	80018d4 <CmdReceive+0x1c>
 800190a:	bf00      	nop
 800190c:	08011c61 	.word	0x08011c61
 8001910:	08011c8f 	.word	0x08011c8f
 8001914:	08011cea 	.word	0x08011cea

08001918 <TerminalOutputBufferWrite>:
  if(len >= TERMINALBUFFERSIZE) {
 8001918:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191e:	4c2e      	ldr	r4, [pc, #184]	; (80019d8 <TerminalOutputBufferWrite+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 8001920:	d30a      	bcc.n	8001938 <TerminalOutputBufferWrite+0x20>
    TerminalState[index].stats.writeTooBig++;
 8001922:	f640 0334 	movw	r3, #2100	; 0x834
 8001926:	fb03 4300 	mla	r3, r3, r0, r4
 800192a:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800192e:	3201      	adds	r2, #1
 8001930:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001938:	f640 0334 	movw	r3, #2100	; 0x834
 800193c:	fb03 4300 	mla	r3, r3, r0, r4
 8001940:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001944:	fa12 f585 	uxtah	r5, r2, r5
 8001948:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800194c:	d221      	bcs.n	8001992 <TerminalOutputBufferWrite+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 800194e:	b672      	cpsid	i
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001950:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001954:	2500      	movs	r5, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001956:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 800195a:	42aa      	cmp	r2, r5
 800195c:	d005      	beq.n	800196a <TerminalOutputBufferWrite+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800195e:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
 8001962:	b2b6      	uxth	r6, r6
 8001964:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001968:	d321      	bcc.n	80019ae <TerminalOutputBufferWrite+0x96>
  TerminalState[index].stats.written += sent;  /* gather statistics */
 800196a:	f640 0334 	movw	r3, #2100	; 0x834
 800196e:	fb03 4400 	mla	r4, r3, r0, r4
 8001972:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001976:	442b      	add	r3, r5
 8001978:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
  uart=TerminalInfo[index].instance;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <TerminalOutputBufferWrite+0xc4>)
 800197e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001982:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001984:	68d3      	ldr	r3, [r2, #12]
 8001986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800198c:	b662      	cpsie	i
}
 800198e:	4628      	mov	r0, r5
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 8001992:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001996:	3501      	adds	r5, #1
 8001998:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 800199c:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80019a0:	fa12 f585 	uxtah	r5, r2, r5
 80019a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80019a8:	d3d1      	bcc.n	800194e <TerminalOutputBufferWrite+0x36>
      asm volatile ("nop");
 80019aa:	bf00      	nop
 80019ac:	e7f6      	b.n	800199c <TerminalOutputBufferWrite+0x84>
    head = TerminalState[index].outHead;
 80019ae:	f8b3 6806 	ldrh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 80019b2:	f811 c005 	ldrb.w	ip, [r1, r5]
 80019b6:	fa13 f786 	uxtah	r7, r3, r6
    TerminalState[index].outHead = TERMINALINCR(head);
 80019ba:	3601      	adds	r6, #1
 80019bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80019c0:	f8a3 6806 	strh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 80019c4:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 80019c8:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 80019cc:	3601      	adds	r6, #1
 80019ce:	b2b6      	uxth	r6, r6
 80019d0:	f8a3 680a 	strh.w	r6, [r3, #2058]	; 0x80a
    sent++;
 80019d4:	3501      	adds	r5, #1
 80019d6:	e7c0      	b.n	800195a <TerminalOutputBufferWrite+0x42>
 80019d8:	200004ac 	.word	0x200004ac
 80019dc:	08011e04 	.word	0x08011e04

080019e0 <CmdSend>:
{
 80019e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80019e2:	4604      	mov	r4, r0
 80019e4:	bb70      	cbnz	r0, 8001a44 <CmdSend+0x64>
  index = 0;
 80019e6:	9002      	str	r0, [sp, #8]
  rc = fetch_uint32_arg(&index);
 80019e8:	a802      	add	r0, sp, #8
 80019ea:	f7ff fe03 	bl	80015f4 <fetch_uint32_arg>
  if(rc) {
 80019ee:	4602      	mov	r2, r0
 80019f0:	b130      	cbz	r0, 8001a00 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80019f2:	4815      	ldr	r0, [pc, #84]	; (8001a48 <CmdSend+0x68>)
 80019f4:	4621      	mov	r1, r4
 80019f6:	f002 f8e3 	bl	8003bc0 <iprintf>
    return CmdReturnBadParameter1;
 80019fa:	2004      	movs	r0, #4
}
 80019fc:	b004      	add	sp, #16
 80019fe:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001a00:	9c02      	ldr	r4, [sp, #8]
 8001a02:	b124      	cbz	r4, 8001a0e <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001a04:	4621      	mov	r1, r4
 8001a06:	4811      	ldr	r0, [pc, #68]	; (8001a4c <CmdSend+0x6c>)
 8001a08:	f002 f8da 	bl	8003bc0 <iprintf>
 8001a0c:	e7f5      	b.n	80019fa <CmdSend+0x1a>
  fetch_cmd_args(&s);
 8001a0e:	a803      	add	r0, sp, #12
  s = NULL;
 8001a10:	9403      	str	r4, [sp, #12]
  fetch_cmd_args(&s);
 8001a12:	f7ff fe25 	bl	8001660 <fetch_cmd_args>
  len = strlen(s);
 8001a16:	9903      	ldr	r1, [sp, #12]
 8001a18:	9101      	str	r1, [sp, #4]
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	f7fe fd7c 	bl	8000518 <strlen>
  if(len==0) {
 8001a20:	9901      	ldr	r1, [sp, #4]
 8001a22:	4602      	mov	r2, r0
 8001a24:	b920      	cbnz	r0, 8001a30 <CmdSend+0x50>
    printf("You need to specify what you want to send\n");
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <CmdSend+0x70>)
 8001a28:	f002 f966 	bl	8003cf8 <puts>
    return CmdReturnBadParameter2;
 8001a2c:	2005      	movs	r0, #5
 8001a2e:	e7e5      	b.n	80019fc <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 8001a30:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a34:	f7ff ff70 	bl	8001918 <TerminalOutputBufferWrite>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8001a38:	4906      	ldr	r1, [pc, #24]	; (8001a54 <CmdSend+0x74>)
 8001a3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f7ff ff6a 	bl	8001918 <TerminalOutputBufferWrite>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001a44:	2000      	movs	r0, #0
 8001a46:	e7d9      	b.n	80019fc <CmdSend+0x1c>
 8001a48:	08011c61 	.word	0x08011c61
 8001a4c:	08011c8f 	.word	0x08011c8f
 8001a50:	08011d05 	.word	0x08011d05
 8001a54:	08011f3b 	.word	0x08011f3b

08001a58 <TerminalWritePolled>:
  uart = TerminalInfo[index].instance;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <TerminalWritePolled+0x24>)
{
 8001a5a:	b510      	push	{r4, lr}
  uart = TerminalInfo[index].instance;
 8001a5c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001a60:	6883      	ldr	r3, [r0, #8]
  while(len) {
 8001a62:	1888      	adds	r0, r1, r2
 8001a64:	4281      	cmp	r1, r0
 8001a66:	d102      	bne.n	8001a6e <TerminalWritePolled+0x16>
}
 8001a68:	4610      	mov	r0, r2
 8001a6a:	bd10      	pop	{r4, pc}
      asm volatile ("nop");
 8001a6c:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 8001a6e:	681c      	ldr	r4, [r3, #0]
 8001a70:	0624      	lsls	r4, r4, #24
 8001a72:	d5fb      	bpl.n	8001a6c <TerminalWritePolled+0x14>
    uart->DR = *p;
 8001a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a78:	605c      	str	r4, [r3, #4]
    sent++;
 8001a7a:	e7f3      	b.n	8001a64 <TerminalWritePolled+0xc>
 8001a7c:	08011e04 	.word	0x08011e04

08001a80 <PolledPrintf>:
{
 8001a80:	b40f      	push	{r0, r1, r2, r3}
 8001a82:	b500      	push	{lr}
 8001a84:	b097      	sub	sp, #92	; 0x5c
 8001a86:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001a88:	2150      	movs	r1, #80	; 0x50
{
 8001a8a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8001a8e:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001a90:	a802      	add	r0, sp, #8
 8001a92:	f002 fb25 	bl	80040e0 <vsniprintf>
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001a96:	a902      	add	r1, sp, #8
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001a98:	4602      	mov	r2, r0
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff ffdc 	bl	8001a58 <TerminalWritePolled>
}
 8001aa0:	b017      	add	sp, #92	; 0x5c
 8001aa2:	f85d eb04 	ldr.w	lr, [sp], #4
 8001aa6:	b004      	add	sp, #16
 8001aa8:	4770      	bx	lr
	...

08001aac <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <TerminalInputBufferWrite+0x60>)
{
 8001aae:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001ab0:	f640 0434 	movw	r4, #2100	; 0x834
 8001ab4:	fb04 3000 	mla	r0, r4, r0, r3
 8001ab8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001abc:	fa12 f383 	uxtah	r3, r2, r3
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac4:	d306      	bcc.n	8001ad4 <TerminalInputBufferWrite+0x28>
    TerminalState[index].stats.receiveTooBig++;
 8001ac6:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8001aca:	3301      	adds	r3, #1
 8001acc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    return 1;
 8001ad0:	2001      	movs	r0, #1
}
 8001ad2:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8001ad4:	f8d0 3820 	ldr.w	r3, [r0, #2080]	; 0x820
 8001ad8:	4413      	add	r3, r2
 8001ada:	f8c0 3820 	str.w	r3, [r0, #2080]	; 0x820
  while(len != 0) {
 8001ade:	440a      	add	r2, r1
 8001ae0:	4291      	cmp	r1, r2
 8001ae2:	d101      	bne.n	8001ae8 <TerminalInputBufferWrite+0x3c>
  return 0;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e7f4      	b.n	8001ad2 <TerminalInputBufferWrite+0x26>
    head = TerminalState[index].inHead;
 8001ae8:	f8b0 3400 	ldrh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inBuffer[head] = *p++;
 8001aec:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 8001af0:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8001af2:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 8001af4:	3301      	adds	r3, #1
 8001af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afa:	f8a0 3400 	strh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inCount++;
 8001afe:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001b02:	3301      	adds	r3, #1
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    len--;
 8001b0a:	e7e9      	b.n	8001ae0 <TerminalInputBufferWrite+0x34>
 8001b0c:	200004ac 	.word	0x200004ac

08001b10 <TerminalISR>:
  uart = TerminalInfo[index].instance;
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <TerminalISR+0xd8>)
 8001b12:	eb03 1300 	add.w	r3, r3, r0, lsl #4
{
 8001b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uart = TerminalInfo[index].instance;
 8001b18:	689e      	ldr	r6, [r3, #8]
  isr = uart->SR;
 8001b1a:	6835      	ldr	r5, [r6, #0]
  if(isr & USART_SR_RXNE) { 
 8001b1c:	06a9      	lsls	r1, r5, #26
{
 8001b1e:	4604      	mov	r4, r0
  if(isr & USART_SR_RXNE) { 
 8001b20:	d507      	bpl.n	8001b32 <TerminalISR+0x22>
    c = uart->DR;
 8001b22:	6873      	ldr	r3, [r6, #4]
 8001b24:	f88d 3007 	strb.w	r3, [sp, #7]
    TerminalInputBufferWrite(index,&c,1);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f10d 0107 	add.w	r1, sp, #7
 8001b2e:	f7ff ffbd 	bl	8001aac <TerminalInputBufferWrite>
  if(isr & USART_SR_TXE) {
 8001b32:	062a      	lsls	r2, r5, #24
 8001b34:	d50d      	bpl.n	8001b52 <TerminalISR+0x42>
    if(TerminalState[index].outCount == 0) {
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <TerminalISR+0xdc>)
 8001b38:	f640 0234 	movw	r2, #2100	; 0x834
 8001b3c:	fb02 3304 	mla	r3, r2, r4, r3
 8001b40:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8001b44:	b292      	uxth	r2, r2
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d13b      	bne.n	8001bc2 <TerminalISR+0xb2>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8001b4a:	68f3      	ldr	r3, [r6, #12]
 8001b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b50:	60f3      	str	r3, [r6, #12]
  if(isr & USART_SR_TC) {
 8001b52:	066b      	lsls	r3, r5, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8001b54:	bf42      	ittt	mi
 8001b56:	68f3      	ldrmi	r3, [r6, #12]
 8001b58:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8001b5c:	60f3      	strmi	r3, [r6, #12]
  if(isr & USART_SR_PE) {
 8001b5e:	07e8      	lsls	r0, r5, #31
 8001b60:	d509      	bpl.n	8001b76 <TerminalISR+0x66>
    TerminalState[index].stats.parityError++;
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <TerminalISR+0xdc>)
 8001b64:	f640 0234 	movw	r2, #2100	; 0x834
 8001b68:	fb02 3304 	mla	r3, r2, r4, r3
 8001b6c:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001b70:	3201      	adds	r2, #1
 8001b72:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8001b76:	07a9      	lsls	r1, r5, #30
 8001b78:	d509      	bpl.n	8001b8e <TerminalISR+0x7e>
    TerminalState[index].stats.framingError++;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <TerminalISR+0xdc>)
 8001b7c:	f640 0234 	movw	r2, #2100	; 0x834
 8001b80:	fb02 3304 	mla	r3, r2, r4, r3
 8001b84:	f8d3 282c 	ldr.w	r2, [r3, #2092]	; 0x82c
 8001b88:	3201      	adds	r2, #1
 8001b8a:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8001b8e:	076a      	lsls	r2, r5, #29
 8001b90:	d509      	bpl.n	8001ba6 <TerminalISR+0x96>
    TerminalState[index].stats.noiseError++;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <TerminalISR+0xdc>)
 8001b94:	f640 0234 	movw	r2, #2100	; 0x834
 8001b98:	fb02 3304 	mla	r3, r2, r4, r3
 8001b9c:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 8001ba0:	3201      	adds	r2, #1
 8001ba2:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8001ba6:	072b      	lsls	r3, r5, #28
 8001ba8:	d509      	bpl.n	8001bbe <TerminalISR+0xae>
    TerminalState[index].stats.overrunError++;
 8001baa:	4810      	ldr	r0, [pc, #64]	; (8001bec <TerminalISR+0xdc>)
 8001bac:	f640 0334 	movw	r3, #2100	; 0x834
 8001bb0:	fb03 0404 	mla	r4, r3, r4, r0
 8001bb4:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
}
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
      tail = TerminalState[index].outTail;
 8001bc2:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8001bc6:	fa13 f182 	uxtah	r1, r3, r2
      tail = TERMINALINCR(tail);
 8001bca:	3201      	adds	r2, #1
      uart->DR = c;
 8001bcc:	f891 1406 	ldrb.w	r1, [r1, #1030]	; 0x406
 8001bd0:	6071      	str	r1, [r6, #4]
      TerminalState[index].outCount--;
 8001bd2:	f8b3 180a 	ldrh.w	r1, [r3, #2058]	; 0x80a
 8001bd6:	3901      	subs	r1, #1
 8001bd8:	b289      	uxth	r1, r1
      TerminalState[index].outTail = tail;
 8001bda:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8001bde:	f8a3 180a 	strh.w	r1, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8001be2:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8001be6:	e7b4      	b.n	8001b52 <TerminalISR+0x42>
 8001be8:	08011e04 	.word	0x08011e04
 8001bec:	200004ac 	.word	0x200004ac

08001bf0 <USART2_IRQHandler>:
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff bf8d 	b.w	8001b10 <TerminalISR>
	...

08001bf8 <WDTCheckReset>:
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <WDTCheckReset+0x64>)
{
 8001bfa:	b510      	push	{r4, lr}
  csr = RCC->CSR;
 8001bfc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 8001bfe:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8001c02:	d025      	beq.n	8001c50 <WDTCheckReset+0x58>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8001c04:	4816      	ldr	r0, [pc, #88]	; (8001c60 <WDTCheckReset+0x68>)
 8001c06:	f002 f877 	bl	8003cf8 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 8001c0a:	2c00      	cmp	r4, #0
 8001c0c:	da02      	bge.n	8001c14 <WDTCheckReset+0x1c>
 8001c0e:	4815      	ldr	r0, [pc, #84]	; (8001c64 <WDTCheckReset+0x6c>)
 8001c10:	f002 f872 	bl	8003cf8 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8001c14:	0062      	lsls	r2, r4, #1
 8001c16:	d502      	bpl.n	8001c1e <WDTCheckReset+0x26>
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <WDTCheckReset+0x70>)
 8001c1a:	f002 f86d 	bl	8003cf8 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 8001c1e:	00a3      	lsls	r3, r4, #2
 8001c20:	d502      	bpl.n	8001c28 <WDTCheckReset+0x30>
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <WDTCheckReset+0x74>)
 8001c24:	f002 f868 	bl	8003cf8 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8001c28:	00e0      	lsls	r0, r4, #3
 8001c2a:	d502      	bpl.n	8001c32 <WDTCheckReset+0x3a>
 8001c2c:	4810      	ldr	r0, [pc, #64]	; (8001c70 <WDTCheckReset+0x78>)
 8001c2e:	f002 f863 	bl	8003cf8 <puts>
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8001c32:	01a1      	lsls	r1, r4, #6
 8001c34:	d502      	bpl.n	8001c3c <WDTCheckReset+0x44>
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <WDTCheckReset+0x7c>)
 8001c38:	f002 f85e 	bl	8003cf8 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8001c3c:	0162      	lsls	r2, r4, #5
 8001c3e:	d502      	bpl.n	8001c46 <WDTCheckReset+0x4e>
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <WDTCheckReset+0x80>)
 8001c42:	f002 f859 	bl	8003cf8 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8001c46:	0123      	lsls	r3, r4, #4
 8001c48:	d502      	bpl.n	8001c50 <WDTCheckReset+0x58>
 8001c4a:	480c      	ldr	r0, [pc, #48]	; (8001c7c <WDTCheckReset+0x84>)
 8001c4c:	f002 f854 	bl	8003cf8 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <WDTCheckReset+0x64>)
 8001c52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c56:	675a      	str	r2, [r3, #116]	; 0x74

}
 8001c58:	bd10      	pop	{r4, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08011e14 	.word	0x08011e14
 8001c64:	08011e4c 	.word	0x08011e4c
 8001c68:	08011e57 	.word	0x08011e57
 8001c6c:	08011e6a 	.word	0x08011e6a
 8001c70:	08011e89 	.word	0x08011e89
 8001c74:	08011e93 	.word	0x08011e93
 8001c78:	08011e9d 	.word	0x08011e9d
 8001c7c:	08011ea7 	.word	0x08011ea7

08001c80 <WDTFeed>:

/* Feed the watchdog */
void WDTFeed(void)
{
#if defined(HAL_IWDG_MODULE_ENABLED)
  HAL_IWDG_Refresh(&hiwdg); /* Feed it */
 8001c80:	4801      	ldr	r0, [pc, #4]	; (8001c88 <WDTFeed+0x8>)
 8001c82:	f001 b995 	b.w	8002fb0 <HAL_IWDG_Refresh>
 8001c86:	bf00      	nop
 8001c88:	20000cf8 	.word	0x20000cf8

08001c8c <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001c8e:	4604      	mov	r4, r0
 8001c90:	b938      	cbnz	r0, 8001ca2 <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 8001c92:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <CmdTasks+0x34>)
  p = _tasktable_start;
 8001c94:	4d0b      	ldr	r5, [pc, #44]	; (8001cc4 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001c96:	4e0c      	ldr	r6, [pc, #48]	; (8001cc8 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001c98:	4f0c      	ldr	r7, [pc, #48]	; (8001ccc <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001c9a:	f002 f82d 	bl	8003cf8 <puts>
  while(p != _tasktable_end) {
 8001c9e:	42b5      	cmp	r5, r6
 8001ca0:	d102      	bne.n	8001ca8 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001ca8:	696b      	ldr	r3, [r5, #20]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4621      	mov	r1, r4
 8001cae:	692b      	ldr	r3, [r5, #16]
 8001cb0:	f855 2b18 	ldr.w	r2, [r5], #24
 8001cb4:	4638      	mov	r0, r7
 8001cb6:	f001 ff83 	bl	8003bc0 <iprintf>
    i++;
 8001cba:	3401      	adds	r4, #1
 8001cbc:	e7ef      	b.n	8001c9e <CmdTasks+0x12>
 8001cbe:	bf00      	nop
 8001cc0:	08011eb1 	.word	0x08011eb1
 8001cc4:	08012a20 	.word	0x08012a20
 8001cc8:	08012a38 	.word	0x08012a38
 8001ccc:	08011eca 	.word	0x08011eca

08001cd0 <TaskingInit>:
{
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	4d07      	ldr	r5, [pc, #28]	; (8001cf0 <TaskingInit+0x20>)
  p = _tasktable_start;
 8001cd4:	4c07      	ldr	r4, [pc, #28]	; (8001cf4 <TaskingInit+0x24>)
  while(p != _tasktable_end) {
 8001cd6:	4e08      	ldr	r6, [pc, #32]	; (8001cf8 <TaskingInit+0x28>)
    s->interval = 0;    /* Expire all task intervals */
 8001cd8:	2700      	movs	r7, #0
  while(p != _tasktable_end) {
 8001cda:	42b4      	cmp	r4, r6
 8001cdc:	d100      	bne.n	8001ce0 <TaskingInit+0x10>
}
 8001cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->initFunc != NULL) {
 8001ce0:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8001ce2:	f845 7b04 	str.w	r7, [r5], #4
    if(p->initFunc != NULL) {
 8001ce6:	b10b      	cbz	r3, 8001cec <TaskingInit+0x1c>
      p->initFunc(p->data);
 8001ce8:	68e0      	ldr	r0, [r4, #12]
 8001cea:	4798      	blx	r3
    p++;
 8001cec:	3418      	adds	r4, #24
    s++;
 8001cee:	e7f4      	b.n	8001cda <TaskingInit+0xa>
 8001cf0:	20000380 	.word	0x20000380
 8001cf4:	08012a20 	.word	0x08012a20
 8001cf8:	08012a38 	.word	0x08012a38

08001cfc <TaskingTickHandler>:
  AccumTicks++;
 8001cfc:	4a02      	ldr	r2, [pc, #8]	; (8001d08 <TaskingTickHandler+0xc>)
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000ce0 	.word	0x20000ce0

08001d0c <TaskingRun>:
{
 8001d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
  ticks = AccumTicks;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <TaskingRun+0x58>)
  AccumTicks = 0;
 8001d14:	2200      	movs	r2, #0
  ticks = AccumTicks;
 8001d16:	681f      	ldr	r7, [r3, #0]
  AccumTicks = 0;
 8001d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d1a:	b662      	cpsie	i
  s = _taskstate_start;
 8001d1c:	4d12      	ldr	r5, [pc, #72]	; (8001d68 <TaskingRun+0x5c>)
  p = _tasktable_start;
 8001d1e:	4c13      	ldr	r4, [pc, #76]	; (8001d6c <TaskingRun+0x60>)
  while(p != _tasktable_end) {
 8001d20:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001d70 <TaskingRun+0x64>
 8001d24:	4544      	cmp	r4, r8
 8001d26:	d101      	bne.n	8001d2c <TaskingRun+0x20>
}
 8001d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p->func != NULL) {
 8001d2c:	6863      	ldr	r3, [r4, #4]
 8001d2e:	b11b      	cbz	r3, 8001d38 <TaskingRun+0x2c>
      if(p->interval == 0) {
 8001d30:	6922      	ldr	r2, [r4, #16]
 8001d32:	b9a2      	cbnz	r2, 8001d5e <TaskingRun+0x52>
	p->func(p->data);
 8001d34:	68e0      	ldr	r0, [r4, #12]
 8001d36:	4798      	blx	r3
    p++;
 8001d38:	3418      	adds	r4, #24
    s++;
 8001d3a:	3504      	adds	r5, #4
 8001d3c:	e7f2      	b.n	8001d24 <TaskingRun+0x18>
	  if(s->interval) {
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	b943      	cbnz	r3, 8001d54 <TaskingRun+0x48>
	    p->func(p->data);
 8001d42:	6863      	ldr	r3, [r4, #4]
 8001d44:	68e0      	ldr	r0, [r4, #12]
 8001d46:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8001d48:	6923      	ldr	r3, [r4, #16]
 8001d4a:	602b      	str	r3, [r5, #0]
 8001d4c:	3e01      	subs	r6, #1
	while(i--) { /* This could be better... if ticks > interval... */
 8001d4e:	2e00      	cmp	r6, #0
 8001d50:	d1f5      	bne.n	8001d3e <TaskingRun+0x32>
 8001d52:	e7f1      	b.n	8001d38 <TaskingRun+0x2c>
	    s->interval--;
 8001d54:	3b01      	subs	r3, #1
 8001d56:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f7      	bne.n	8001d4c <TaskingRun+0x40>
 8001d5c:	e7f1      	b.n	8001d42 <TaskingRun+0x36>
 8001d5e:	463e      	mov	r6, r7
 8001d60:	e7f5      	b.n	8001d4e <TaskingRun+0x42>
 8001d62:	bf00      	nop
 8001d64:	20000ce0 	.word	0x20000ce0
 8001d68:	20000380 	.word	0x20000380
 8001d6c:	08012a20 	.word	0x08012a20
 8001d70:	08012a38 	.word	0x08012a38

08001d74 <Default_IRQHandler>:
void Default_IRQHandler(void)
{
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001d76:	490e      	ldr	r1, [pc, #56]	; (8001db0 <Default_IRQHandler+0x3c>)
 8001d78:	480e      	ldr	r0, [pc, #56]	; (8001db4 <Default_IRQHandler+0x40>)
{
 8001d7a:	b510      	push	{r4, lr}
  icsr = SCB->ICSR;
 8001d7c:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001d7e:	f7ff fe7f 	bl	8001a80 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8001d82:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <Default_IRQHandler+0x44>)
 8001d88:	f7ff fe7a 	bl	8001a80 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <Default_IRQHandler+0x48>)
 8001d8e:	f1a4 0110 	sub.w	r1, r4, #16
 8001d92:	f7ff fe75 	bl	8001a80 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <Default_IRQHandler+0x4c>)
 8001d98:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <Default_IRQHandler+0x50>)
 8001d9a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001d9e:	f7ff fe6f 	bl	8001a80 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8001da2:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <Default_IRQHandler+0x54>)
 8001da4:	f7ff fe6c 	bl	8001a80 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8001da8:	e7fe      	b.n	8001da8 <Default_IRQHandler+0x34>
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	08011fe8 	.word	0x08011fe8
 8001db4:	08011f07 	.word	0x08011f07
 8001db8:	08011f3e 	.word	0x08011f3e
 8001dbc:	08011f7a 	.word	0x08011f7a
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	08011fa3 	.word	0x08011fa3
 8001dc8:	08011fbe 	.word	0x08011fbe

08001dcc <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001dcc:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001dce:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <Uncompress+0x74>)
{
 8001dd0:	b08a      	sub	sp, #40	; 0x28
 8001dd2:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001dd4:	466c      	mov	r4, sp
 8001dd6:	f102 0620 	add.w	r6, r2, #32
 8001dda:	6810      	ldr	r0, [r2, #0]
 8001ddc:	6851      	ldr	r1, [r2, #4]
 8001dde:	4625      	mov	r5, r4
 8001de0:	c503      	stmia	r5!, {r0, r1}
 8001de2:	3208      	adds	r2, #8
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	462c      	mov	r4, r5
 8001de8:	d1f7      	bne.n	8001dda <Uncompress+0xe>
 8001dea:	6810      	ldr	r0, [r2, #0]
 8001dec:	6028      	str	r0, [r5, #0]
 8001dee:	8892      	ldrh	r2, [r2, #4]
 8001df0:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001df2:	4618      	mov	r0, r3
 8001df4:	4d13      	ldr	r5, [pc, #76]	; (8001e44 <Uncompress+0x78>)
 8001df6:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	ba5b      	rev16	r3, r3
 8001dfe:	b29b      	uxth	r3, r3
  i = 0;
 8001e00:	460c      	mov	r4, r1
 8001e02:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001e04:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8001e08:	d103      	bne.n	8001e12 <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8001e0a:	480e      	ldr	r0, [pc, #56]	; (8001e44 <Uncompress+0x78>)
  buf[i]='\0';
 8001e0c:	5532      	strb	r2, [r6, r4]
}
 8001e0e:	b00a      	add	sp, #40	; 0x28
 8001e10:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8001e12:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8001e14:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8001e18:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001e1c:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8001e20:	4462      	add	r2, ip
    buf[i++] = c;
 8001e22:	3401      	adds	r4, #1
 8001e24:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001e28:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001e2c:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8001e2e:	2a07      	cmp	r2, #7
      bits -= 8;
 8001e30:	bf81      	itttt	hi
 8001e32:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001e34:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001e38:	4091      	lslhi	r1, r2
 8001e3a:	430b      	orrhi	r3, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	e7e1      	b.n	8001e04 <Uncompress+0x38>
 8001e40:	08011ffb 	.word	0x08011ffb
 8001e44:	20000ce4 	.word	0x20000ce4

08001e48 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001e48:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b1f0      	cbz	r0, 8001e8c <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8001e4e:	b1f9      	cbz	r1, 8001e90 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001e50:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001e52:	888a      	ldrh	r2, [r1, #4]
 8001e54:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001e56:	2d10      	cmp	r5, #16
 8001e58:	d005      	beq.n	8001e66 <DecodeReadRegister+0x1e>
 8001e5a:	2d20      	cmp	r5, #32
 8001e5c:	d005      	beq.n	8001e6a <DecodeReadRegister+0x22>
 8001e5e:	2d08      	cmp	r5, #8
 8001e60:	d105      	bne.n	8001e6e <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8001e62:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001e64:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001e66:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001e68:	e7fc      	b.n	8001e64 <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 8001e6a:	58d0      	ldr	r0, [r2, r3]
    break;
 8001e6c:	e7fa      	b.n	8001e64 <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001e6e:	6808      	ldr	r0, [r1, #0]
 8001e70:	f7ff ffac 	bl	8001dcc <Uncompress>
 8001e74:	4629      	mov	r1, r5
 8001e76:	4602      	mov	r2, r0
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <DecodeReadRegister+0x4c>)
 8001e7a:	f001 fea1 	bl	8003bc0 <iprintf>
    printf(" in periphral %s!\n",
 8001e7e:	6820      	ldr	r0, [r4, #0]
 8001e80:	f7ff ffa4 	bl	8001dcc <Uncompress>
 8001e84:	4601      	mov	r1, r0
 8001e86:	4804      	ldr	r0, [pc, #16]	; (8001e98 <DecodeReadRegister+0x50>)
 8001e88:	f001 fe9a 	bl	8003bc0 <iprintf>
    return 0;
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	e7e9      	b.n	8001e64 <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 8001e90:	4608      	mov	r0, r1
 8001e92:	e7e7      	b.n	8001e64 <DecodeReadRegister+0x1c>
 8001e94:	08012021 	.word	0x08012021
 8001e98:	08012043 	.word	0x08012043

08001e9c <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001e9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	b1f8      	cbz	r0, 8001ee2 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8001ea2:	b1f1      	cbz	r1, 8001ee2 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001ea4:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001ea6:	8888      	ldrh	r0, [r1, #4]
 8001ea8:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001eaa:	2d10      	cmp	r5, #16
 8001eac:	d006      	beq.n	8001ebc <DecodeWriteRegister+0x20>
 8001eae:	2d20      	cmp	r5, #32
 8001eb0:	d006      	beq.n	8001ec0 <DecodeWriteRegister+0x24>
 8001eb2:	2d08      	cmp	r5, #8
 8001eb4:	d106      	bne.n	8001ec4 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8001eb6:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8001eb8:	2000      	movs	r0, #0
}
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001ebc:	52c2      	strh	r2, [r0, r3]
    break;  
 8001ebe:	e7fb      	b.n	8001eb8 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8001ec0:	50c2      	str	r2, [r0, r3]
 8001ec2:	e7f9      	b.n	8001eb8 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001ec4:	6808      	ldr	r0, [r1, #0]
 8001ec6:	f7ff ff81 	bl	8001dcc <Uncompress>
 8001eca:	4629      	mov	r1, r5
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <DecodeWriteRegister+0x4c>)
 8001ed0:	f001 fe76 	bl	8003bc0 <iprintf>
    printf(" in periphral %s!\n",
 8001ed4:	6820      	ldr	r0, [r4, #0]
 8001ed6:	f7ff ff79 	bl	8001dcc <Uncompress>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <DecodeWriteRegister+0x50>)
 8001ede:	f001 fe6f 	bl	8003bc0 <iprintf>
  if(p == NULL) return 1;
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	e7e9      	b.n	8001eba <DecodeWriteRegister+0x1e>
 8001ee6:	bf00      	nop
 8001ee8:	08012021 	.word	0x08012021
 8001eec:	08012043 	.word	0x08012043

08001ef0 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001ef0:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8001ef2:	4604      	mov	r4, r0
{
 8001ef4:	b087      	sub	sp, #28
  if(f == NULL) return;
 8001ef6:	b1d0      	cbz	r0, 8001f2e <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001ef8:	7942      	ldrb	r2, [r0, #5]
 8001efa:	2301      	movs	r3, #1
 8001efc:	4093      	lsls	r3, r2
 8001efe:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f00:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001f02:	40d1      	lsrs	r1, r2
 8001f04:	3b01      	subs	r3, #1
 8001f06:	400b      	ands	r3, r1
 8001f08:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f0a:	f7ff ff5f 	bl	8001dcc <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8001f0e:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f10:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <DecodeField+0x44>)
 8001f12:	9b05      	ldr	r3, [sp, #20]
 8001f14:	4601      	mov	r1, r0
 8001f16:	4808      	ldr	r0, [pc, #32]	; (8001f38 <DecodeField+0x48>)
 8001f18:	2d01      	cmp	r5, #1
 8001f1a:	bf98      	it	ls
 8001f1c:	4602      	movls	r2, r0
 8001f1e:	7920      	ldrb	r0, [r4, #4]
 8001f20:	9500      	str	r5, [sp, #0]
 8001f22:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <DecodeField+0x4c>)
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f001 fe49 	bl	8003bc0 <iprintf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8001f2e:	b007      	add	sp, #28
 8001f30:	bd30      	pop	{r4, r5, pc}
 8001f32:	bf00      	nop
 8001f34:	08012056 	.word	0x08012056
 8001f38:	0801205c 	.word	0x0801205c
 8001f3c:	08012062 	.word	0x08012062

08001f40 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f42:	460f      	mov	r7, r1
 8001f44:	4615      	mov	r5, r2
 8001f46:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001f48:	4604      	mov	r4, r0
 8001f4a:	b180      	cbz	r0, 8001f6e <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001f4c:	6800      	ldr	r0, [r0, #0]
 8001f4e:	f7ff ff3d 	bl	8001dcc <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001f52:	88a2      	ldrh	r2, [r4, #4]
 8001f54:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001f56:	9201      	str	r2, [sp, #4]
 8001f58:	79a3      	ldrb	r3, [r4, #6]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	462b      	mov	r3, r5
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <DecodeRegister+0x5c>)
 8001f62:	462a      	mov	r2, r5
 8001f64:	f001 fe2c 	bl	8003bc0 <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001f68:	68a7      	ldr	r7, [r4, #8]
 8001f6a:	b19f      	cbz	r7, 8001f94 <DecodeRegister+0x54>
 8001f6c:	b986      	cbnz	r6, 8001f90 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8001f6e:	b003      	add	sp, #12
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7ff ffbc 	bl	8001ef0 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8001f78:	3601      	adds	r6, #1
 8001f7a:	89a3      	ldrh	r3, [r4, #12]
 8001f7c:	429e      	cmp	r6, r3
 8001f7e:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 8001f82:	d3f6      	bcc.n	8001f72 <DecodeRegister+0x32>
    printf("\n");
 8001f84:	200a      	movs	r0, #10
}
 8001f86:	b003      	add	sp, #12
 8001f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 8001f8c:	f001 be30 	b.w	8003bf0 <putchar>
    for(i=0; i<r->numFields; i++) {
 8001f90:	2600      	movs	r6, #0
 8001f92:	e7f2      	b.n	8001f7a <DecodeRegister+0x3a>
  if(decodeFields) {
 8001f94:	2e00      	cmp	r6, #0
 8001f96:	d0ea      	beq.n	8001f6e <DecodeRegister+0x2e>
 8001f98:	e7f4      	b.n	8001f84 <DecodeRegister+0x44>
 8001f9a:	bf00      	nop
 8001f9c:	0801208b 	.word	0x0801208b

08001fa0 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa4:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	b160      	cbz	r0, 8001fc4 <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001faa:	6800      	ldr	r0, [r0, #0]
 8001fac:	f7ff ff0e 	bl	8001dcc <Uncompress>
 8001fb0:	6862      	ldr	r2, [r4, #4]
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <DecodePeripheral+0x50>)
 8001fb6:	f001 fe03 	bl	8003bc0 <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001fba:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001fbe:	f1b8 0f00 	cmp.w	r8, #0
 8001fc2:	d112      	bne.n	8001fea <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001fc8:	4639      	mov	r1, r7
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff ff3c 	bl	8001e48 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001fd0:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001fd2:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001fd4:	4633      	mov	r3, r6
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	f7ff ffb2 	bl	8001f40 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001fdc:	3501      	adds	r5, #1
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	429d      	cmp	r5, r3
 8001fe2:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001fe6:	d3ef      	bcc.n	8001fc8 <DecodePeripheral+0x28>
 8001fe8:	e7ec      	b.n	8001fc4 <DecodePeripheral+0x24>
 8001fea:	2500      	movs	r5, #0
 8001fec:	e7f7      	b.n	8001fde <DecodePeripheral+0x3e>
 8001fee:	bf00      	nop
 8001ff0:	080120c6 	.word	0x080120c6

08001ff4 <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8001ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff8:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8001ffa:	2009      	movs	r0, #9
 8001ffc:	f001 fdf8 	bl	8003bf0 <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8002000:	4e0e      	ldr	r6, [pc, #56]	; (800203c <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 8002002:	4f0f      	ldr	r7, [pc, #60]	; (8002040 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8002004:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8002044 <DecodePrintPeripherals+0x50>
  col = 8;
 8002008:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 800200a:	6820      	ldr	r0, [r4, #0]
 800200c:	b908      	cbnz	r0, 8002012 <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 800200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8002012:	f7ff fedb 	bl	8001dcc <Uncompress>
 8002016:	4601      	mov	r1, r0
 8002018:	4630      	mov	r0, r6
 800201a:	f001 fdd1 	bl	8003bc0 <iprintf>
    if((p+1)->name != NULL) {
 800201e:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8002020:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 8002022:	b14b      	cbz	r3, 8002038 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 8002024:	4638      	mov	r0, r7
 8002026:	f001 fdcb 	bl	8003bc0 <iprintf>
 800202a:	4405      	add	r5, r0
      if(col > 70) {
 800202c:	2d46      	cmp	r5, #70	; 0x46
 800202e:	d903      	bls.n	8002038 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8002030:	4640      	mov	r0, r8
 8002032:	f001 fdc5 	bl	8003bc0 <iprintf>
	col = 8;
 8002036:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8002038:	3410      	adds	r4, #16
 800203a:	e7e6      	b.n	800200a <DecodePrintPeripherals+0x16>
 800203c:	08012040 	.word	0x08012040
 8002040:	0801205f 	.word	0x0801205f
 8002044:	080120ee 	.word	0x080120ee

08002048 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800204c:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 800204e:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002050:	460d      	mov	r5, r1
  printf("\t");
 8002052:	f001 fdcd 	bl	8003bf0 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8002056:	4f12      	ldr	r7, [pc, #72]	; (80020a0 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8002058:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80020a4 <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 800205c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80020a8 <DecodePrintRegisters+0x60>
 8002060:	3d01      	subs	r5, #1
 8002062:	3610      	adds	r6, #16
  col = 8;
 8002064:	2408      	movs	r4, #8
  while(count--) {
 8002066:	1c6b      	adds	r3, r5, #1
 8002068:	d101      	bne.n	800206e <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 800206a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 800206e:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8002072:	f7ff feab 	bl	8001dcc <Uncompress>
 8002076:	4601      	mov	r1, r0
 8002078:	4638      	mov	r0, r7
 800207a:	f001 fda1 	bl	8003bc0 <iprintf>
 800207e:	4420      	add	r0, r4
 8002080:	b2c4      	uxtb	r4, r0
    if(count) {
 8002082:	b155      	cbz	r5, 800209a <DecodePrintRegisters+0x52>
      col += printf(", ");
 8002084:	4640      	mov	r0, r8
 8002086:	f001 fd9b 	bl	8003bc0 <iprintf>
 800208a:	4420      	add	r0, r4
 800208c:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 800208e:	2c46      	cmp	r4, #70	; 0x46
 8002090:	d903      	bls.n	800209a <DecodePrintRegisters+0x52>
	printf("\n\t");
 8002092:	4648      	mov	r0, r9
 8002094:	f001 fd94 	bl	8003bc0 <iprintf>
	col = 8;
 8002098:	2408      	movs	r4, #8
    r++;
 800209a:	3d01      	subs	r5, #1
 800209c:	3610      	adds	r6, #16
 800209e:	e7e2      	b.n	8002066 <DecodePrintRegisters+0x1e>
 80020a0:	08012040 	.word	0x08012040
 80020a4:	0801205f 	.word	0x0801205f
 80020a8:	080120ee 	.word	0x080120ee

080020ac <CmdDecode>:
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 80020ac:	2802      	cmp	r0, #2
{
 80020ae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(mode == CMD_LONG_HELP) {
 80020b2:	d135      	bne.n	8002120 <CmdDecode+0x74>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 80020b4:	a803      	add	r0, sp, #12
 80020b6:	f7ff fabb 	bl	8001630 <fetch_string_arg>
    if(rc) {
 80020ba:	b168      	cbz	r0, 80020d8 <CmdDecode+0x2c>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 80020bc:	488d      	ldr	r0, [pc, #564]	; (80022f4 <CmdDecode+0x248>)
 80020be:	f001 fe1b 	bl	8003cf8 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 80020c2:	488d      	ldr	r0, [pc, #564]	; (80022f8 <CmdDecode+0x24c>)
 80020c4:	f7ff ff96 	bl	8001ff4 <DecodePrintPeripherals>
      printf("\n\n"
 80020c8:	488c      	ldr	r0, [pc, #560]	; (80022fc <CmdDecode+0x250>)
 80020ca:	f001 fe15 	bl	8003cf8 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 80020ce:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 80020d0:	4620      	mov	r0, r4
 80020d2:	b004      	add	sp, #16
 80020d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 80020d8:	4d87      	ldr	r5, [pc, #540]	; (80022f8 <CmdDecode+0x24c>)
 80020da:	e008      	b.n	80020ee <CmdDecode+0x42>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80020dc:	9c03      	ldr	r4, [sp, #12]
 80020de:	f7ff fe75 	bl	8001dcc <Uncompress>
 80020e2:	4601      	mov	r1, r0
 80020e4:	4620      	mov	r0, r4
 80020e6:	f001 fed5 	bl	8003e94 <strcasecmp>
 80020ea:	b118      	cbz	r0, 80020f4 <CmdDecode+0x48>
	p++;
 80020ec:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80020ee:	6828      	ldr	r0, [r5, #0]
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d1f3      	bne.n	80020dc <CmdDecode+0x30>
      if(p->name == NULL) {
 80020f4:	682c      	ldr	r4, [r5, #0]
 80020f6:	b93c      	cbnz	r4, 8002108 <CmdDecode+0x5c>
	printf("%s is not a valid peripheral name\n"
 80020f8:	9903      	ldr	r1, [sp, #12]
 80020fa:	4881      	ldr	r0, [pc, #516]	; (8002300 <CmdDecode+0x254>)
 80020fc:	f001 fd60 	bl	8003bc0 <iprintf>
	DecodePrintPeripherals(Peripherals);
 8002100:	487d      	ldr	r0, [pc, #500]	; (80022f8 <CmdDecode+0x24c>)
 8002102:	f7ff ff77 	bl	8001ff4 <DecodePrintPeripherals>
	return CmdReturnOk;
 8002106:	e7e3      	b.n	80020d0 <CmdDecode+0x24>
      printf("Valid registers for peripheral %s:\n"
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff fe5f 	bl	8001dcc <Uncompress>
 800210e:	4601      	mov	r1, r0
 8002110:	487c      	ldr	r0, [pc, #496]	; (8002304 <CmdDecode+0x258>)
 8002112:	f001 fd55 	bl	8003bc0 <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8002116:	89a9      	ldrh	r1, [r5, #12]
 8002118:	68a8      	ldr	r0, [r5, #8]
 800211a:	f7ff ff95 	bl	8002048 <DecodePrintRegisters>
    printf("\n\n");
 800211e:	e009      	b.n	8002134 <CmdDecode+0x88>
  rc = fetch_string_arg(&pname);
 8002120:	4668      	mov	r0, sp
 8002122:	f7ff fa85 	bl	8001630 <fetch_string_arg>
  if(rc) {
 8002126:	b180      	cbz	r0, 800214a <CmdDecode+0x9e>
    printf("Missing peripheral name, please chose one of:\n\n");
 8002128:	4877      	ldr	r0, [pc, #476]	; (8002308 <CmdDecode+0x25c>)
 800212a:	f001 fde5 	bl	8003cf8 <puts>
    DecodePrintPeripherals(Peripherals);
 800212e:	4872      	ldr	r0, [pc, #456]	; (80022f8 <CmdDecode+0x24c>)
 8002130:	f7ff ff60 	bl	8001ff4 <DecodePrintPeripherals>
    printf("\n\n");
 8002134:	4875      	ldr	r0, [pc, #468]	; (800230c <CmdDecode+0x260>)
 8002136:	e7c8      	b.n	80020ca <CmdDecode+0x1e>
    p++;
 8002138:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800213a:	6828      	ldr	r0, [r5, #0]
 800213c:	9c00      	ldr	r4, [sp, #0]
 800213e:	b930      	cbnz	r0, 800214e <CmdDecode+0xa2>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8002140:	9900      	ldr	r1, [sp, #0]
 8002142:	4873      	ldr	r0, [pc, #460]	; (8002310 <CmdDecode+0x264>)
 8002144:	f001 fd3c 	bl	8003bc0 <iprintf>
    DecodePrintPeripherals(Peripherals);
 8002148:	e7f1      	b.n	800212e <CmdDecode+0x82>
  p = Peripherals;
 800214a:	4d6b      	ldr	r5, [pc, #428]	; (80022f8 <CmdDecode+0x24c>)
 800214c:	e7f5      	b.n	800213a <CmdDecode+0x8e>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800214e:	f7ff fe3d 	bl	8001dcc <Uncompress>
 8002152:	4601      	mov	r1, r0
 8002154:	4620      	mov	r0, r4
 8002156:	f001 fe9d 	bl	8003e94 <strcasecmp>
 800215a:	4604      	mov	r4, r0
 800215c:	2800      	cmp	r0, #0
 800215e:	d1eb      	bne.n	8002138 <CmdDecode+0x8c>
  if(p->name == NULL) {
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ec      	beq.n	8002140 <CmdDecode+0x94>
  rc = fetch_string_arg(&rname);
 8002166:	a801      	add	r0, sp, #4
 8002168:	f7ff fa62 	bl	8001630 <fetch_string_arg>
  if(rc) {
 800216c:	b120      	cbz	r0, 8002178 <CmdDecode+0xcc>
    DecodePeripheral(p,0);
 800216e:	4621      	mov	r1, r4
 8002170:	4628      	mov	r0, r5
 8002172:	f7ff ff15 	bl	8001fa0 <DecodePeripheral>
    return CmdReturnOk;
 8002176:	e7ab      	b.n	80020d0 <CmdDecode+0x24>
  r = p->registers;
 8002178:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 800217a:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 800217c:	9c01      	ldr	r4, [sp, #4]
 800217e:	2f00      	cmp	r7, #0
 8002180:	f000 80a8 	beq.w	80022d4 <CmdDecode+0x228>
 8002184:	6830      	ldr	r0, [r6, #0]
 8002186:	f7ff fe21 	bl	8001dcc <Uncompress>
 800218a:	4601      	mov	r1, r0
 800218c:	4620      	mov	r0, r4
 800218e:	f001 fe81 	bl	8003e94 <strcasecmp>
 8002192:	3f01      	subs	r7, #1
 8002194:	4604      	mov	r4, r0
 8002196:	b958      	cbnz	r0, 80021b0 <CmdDecode+0x104>
  rc = fetch_string_arg(&fname);
 8002198:	a802      	add	r0, sp, #8
 800219a:	f7ff fa49 	bl	8001630 <fetch_string_arg>
  if(rc == 0) {
 800219e:	b170      	cbz	r0, 80021be <CmdDecode+0x112>
  val = DecodeReadRegister(p,r);
 80021a0:	4631      	mov	r1, r6
 80021a2:	4628      	mov	r0, r5
 80021a4:	f7ff fe50 	bl	8001e48 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80021a8:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80021aa:	4602      	mov	r2, r0
 80021ac:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 80021ae:	e017      	b.n	80021e0 <CmdDecode+0x134>
    r++;
 80021b0:	3610      	adds	r6, #16
 80021b2:	e7e3      	b.n	800217c <CmdDecode+0xd0>
      DecodePeripheral(p,1);
 80021b4:	2101      	movs	r1, #1
 80021b6:	4628      	mov	r0, r5
 80021b8:	f7ff fef2 	bl	8001fa0 <DecodePeripheral>
      return CmdReturnOk;
 80021bc:	e787      	b.n	80020ce <CmdDecode+0x22>
    if(strcasecmp(fname,"val") == 0) {
 80021be:	4955      	ldr	r1, [pc, #340]	; (8002314 <CmdDecode+0x268>)
 80021c0:	9802      	ldr	r0, [sp, #8]
 80021c2:	f001 fe67 	bl	8003e94 <strcasecmp>
 80021c6:	b980      	cbnz	r0, 80021ea <CmdDecode+0x13e>
      rc = fetch_uint32_arg(&val);
 80021c8:	a803      	add	r0, sp, #12
 80021ca:	f7ff fa13 	bl	80015f4 <fetch_uint32_arg>
      if(rc) {
 80021ce:	4604      	mov	r4, r0
 80021d0:	b120      	cbz	r0, 80021dc <CmdDecode+0x130>
	printf("Missing value to use in decode\n");
 80021d2:	4851      	ldr	r0, [pc, #324]	; (8002318 <CmdDecode+0x26c>)
 80021d4:	f001 fd90 	bl	8003cf8 <puts>
	return CmdReturnBadParameter4;
 80021d8:	2407      	movs	r4, #7
 80021da:	e779      	b.n	80020d0 <CmdDecode+0x24>
      DecodeRegister(r,p->base,val,1);
 80021dc:	9a03      	ldr	r2, [sp, #12]
 80021de:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 80021e0:	6869      	ldr	r1, [r5, #4]
 80021e2:	4630      	mov	r0, r6
 80021e4:	f7ff feac 	bl	8001f40 <DecodeRegister>
  return CmdReturnOk;
 80021e8:	e772      	b.n	80020d0 <CmdDecode+0x24>
    f = r->fields;
 80021ea:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 80021ec:	b15f      	cbz	r7, 8002206 <CmdDecode+0x15a>
	  && (f->name != NULL)
 80021ee:	6838      	ldr	r0, [r7, #0]
 80021f0:	b148      	cbz	r0, 8002206 <CmdDecode+0x15a>
	  && strcasecmp(fname,Uncompress(f->name))) {
 80021f2:	9c02      	ldr	r4, [sp, #8]
 80021f4:	f7ff fdea 	bl	8001dcc <Uncompress>
 80021f8:	4601      	mov	r1, r0
 80021fa:	4620      	mov	r0, r4
 80021fc:	f001 fe4a 	bl	8003e94 <strcasecmp>
 8002200:	b998      	cbnz	r0, 800222a <CmdDecode+0x17e>
    if((f != NULL) && f->name != NULL) {
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b99b      	cbnz	r3, 800222e <CmdDecode+0x182>
    errno = 0;
 8002206:	f001 f83f 	bl	8003288 <__errno>
 800220a:	2700      	movs	r7, #0
 800220c:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 800220e:	463a      	mov	r2, r7
 8002210:	4639      	mov	r1, r7
 8002212:	9802      	ldr	r0, [sp, #8]
 8002214:	f001 ff2e 	bl	8004074 <strtoul>
 8002218:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 800221a:	f001 f835 	bl	8003288 <__errno>
 800221e:	6804      	ldr	r4, [r0, #0]
 8002220:	2c00      	cmp	r4, #0
 8002222:	d042      	beq.n	80022aa <CmdDecode+0x1fe>
      printf("Invalid number '%s' entered.\n",
 8002224:	9902      	ldr	r1, [sp, #8]
 8002226:	483d      	ldr	r0, [pc, #244]	; (800231c <CmdDecode+0x270>)
 8002228:	e00b      	b.n	8002242 <CmdDecode+0x196>
      f++;
 800222a:	3708      	adds	r7, #8
 800222c:	e7de      	b.n	80021ec <CmdDecode+0x140>
      rc = fetch_uint32_arg(&val);
 800222e:	a803      	add	r0, sp, #12
 8002230:	f7ff f9e0 	bl	80015f4 <fetch_uint32_arg>
      if(rc) {
 8002234:	4604      	mov	r4, r0
 8002236:	b138      	cbz	r0, 8002248 <CmdDecode+0x19c>
	printf("Missing Value to program into register %s\n",
 8002238:	6830      	ldr	r0, [r6, #0]
 800223a:	f7ff fdc7 	bl	8001dcc <Uncompress>
 800223e:	4601      	mov	r1, r0
 8002240:	4837      	ldr	r0, [pc, #220]	; (8002320 <CmdDecode+0x274>)
      printf("Invalid number '%s' entered.\n",
 8002242:	f001 fcbd 	bl	8003bc0 <iprintf>
      return CmdReturnOk;
 8002246:	e742      	b.n	80020ce <CmdDecode+0x22>
      t = DecodeReadRegister(p,r);
 8002248:	4631      	mov	r1, r6
 800224a:	4628      	mov	r0, r5
 800224c:	f7ff fdfc 	bl	8001e48 <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002250:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 8002252:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 8002254:	2301      	movs	r3, #1
 8002256:	4093      	lsls	r3, r2
 8002258:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 800225a:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 800225e:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 8002262:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8002266:	9803      	ldr	r0, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8002268:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 800226c:	4003      	ands	r3, r0
 800226e:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002270:	431a      	orrs	r2, r3
 8002272:	4631      	mov	r1, r6
 8002274:	4628      	mov	r0, r5
 8002276:	f7ff fe11 	bl	8001e9c <DecodeWriteRegister>
      printf("%s.",
 800227a:	6828      	ldr	r0, [r5, #0]
 800227c:	f7ff fda6 	bl	8001dcc <Uncompress>
 8002280:	4601      	mov	r1, r0
 8002282:	4828      	ldr	r0, [pc, #160]	; (8002324 <CmdDecode+0x278>)
 8002284:	f001 fc9c 	bl	8003bc0 <iprintf>
      printf("%s.",
 8002288:	6830      	ldr	r0, [r6, #0]
 800228a:	f7ff fd9f 	bl	8001dcc <Uncompress>
 800228e:	4601      	mov	r1, r0
 8002290:	4824      	ldr	r0, [pc, #144]	; (8002324 <CmdDecode+0x278>)
 8002292:	f001 fc95 	bl	8003bc0 <iprintf>
      printf("%s (%d) -> (%d)\n",
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	f7ff fd98 	bl	8001dcc <Uncompress>
 800229c:	9b03      	ldr	r3, [sp, #12]
 800229e:	4601      	mov	r1, r0
 80022a0:	4642      	mov	r2, r8
 80022a2:	4821      	ldr	r0, [pc, #132]	; (8002328 <CmdDecode+0x27c>)
 80022a4:	f001 fc8c 	bl	8003bc0 <iprintf>
      return CmdReturnOk;
 80022a8:	e712      	b.n	80020d0 <CmdDecode+0x24>
    DecodeWriteRegister(p,r,val);
 80022aa:	9a03      	ldr	r2, [sp, #12]
 80022ac:	4631      	mov	r1, r6
 80022ae:	4628      	mov	r0, r5
 80022b0:	f7ff fdf4 	bl	8001e9c <DecodeWriteRegister>
    printf("%s.",
 80022b4:	6828      	ldr	r0, [r5, #0]
 80022b6:	f7ff fd89 	bl	8001dcc <Uncompress>
 80022ba:	4601      	mov	r1, r0
 80022bc:	4819      	ldr	r0, [pc, #100]	; (8002324 <CmdDecode+0x278>)
 80022be:	f001 fc7f 	bl	8003bc0 <iprintf>
    printf("%s = 0x%08x\n",
 80022c2:	6830      	ldr	r0, [r6, #0]
 80022c4:	f7ff fd82 	bl	8001dcc <Uncompress>
 80022c8:	9a03      	ldr	r2, [sp, #12]
 80022ca:	4601      	mov	r1, r0
 80022cc:	4817      	ldr	r0, [pc, #92]	; (800232c <CmdDecode+0x280>)
 80022ce:	f001 fc77 	bl	8003bc0 <iprintf>
    return CmdReturnOk;
 80022d2:	e6fd      	b.n	80020d0 <CmdDecode+0x24>
    if(strcasecmp(rname,"full") == 0) {
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <CmdDecode+0x284>)
 80022d6:	4620      	mov	r0, r4
 80022d8:	f001 fddc 	bl	8003e94 <strcasecmp>
 80022dc:	2800      	cmp	r0, #0
 80022de:	f43f af69 	beq.w	80021b4 <CmdDecode+0x108>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80022e2:	6828      	ldr	r0, [r5, #0]
 80022e4:	f7ff fd72 	bl	8001dcc <Uncompress>
 80022e8:	4621      	mov	r1, r4
 80022ea:	4602      	mov	r2, r0
 80022ec:	4811      	ldr	r0, [pc, #68]	; (8002334 <CmdDecode+0x288>)
 80022ee:	f001 fc67 	bl	8003bc0 <iprintf>
 80022f2:	e710      	b.n	8002116 <CmdDecode+0x6a>
 80022f4:	080120f1 	.word	0x080120f1
 80022f8:	0800e10c 	.word	0x0800e10c
 80022fc:	08012304 	.word	0x08012304
 8002300:	08012359 	.word	0x08012359
 8002304:	08012394 	.word	0x08012394
 8002308:	080123b9 	.word	0x080123b9
 800230c:	08012422 	.word	0x08012422
 8002310:	080123e8 	.word	0x080123e8
 8002314:	08012461 	.word	0x08012461
 8002318:	08012465 	.word	0x08012465
 800231c:	080124c4 	.word	0x080124c4
 8002320:	08012484 	.word	0x08012484
 8002324:	080124af 	.word	0x080124af
 8002328:	080124b3 	.word	0x080124b3
 800232c:	080124e2 	.word	0x080124e2
 8002330:	080124ef 	.word	0x080124ef
 8002334:	08012424 	.word	0x08012424

08002338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002338:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	2400      	movs	r4, #0
{
 800233c:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233e:	4621      	mov	r1, r4
 8002340:	2214      	movs	r2, #20
 8002342:	a803      	add	r0, sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002344:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8002348:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234a:	f000 ffc7 	bl	80032dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <SystemClock_Config+0x94>)
 8002350:	9401      	str	r4, [sp, #4]
 8002352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002354:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <SystemClock_Config+0x98>)
 8002366:	9402      	str	r4, [sp, #8]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002376:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002378:	2209      	movs	r2, #9
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800237a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800237c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002380:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002384:	2402      	movs	r4, #2
 8002386:	2301      	movs	r3, #1
 8002388:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800238c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002390:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002392:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002396:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800239a:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800239e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	f000 f92c 	bl	80025fc <HAL_RCC_OscConfig>
 80023a4:	b108      	cbz	r0, 80023aa <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 80023a6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023aa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ac:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b4:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b8:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023ba:	2103      	movs	r1, #3
 80023bc:	a803      	add	r0, sp, #12
 80023be:	f000 fafb 	bl	80029b8 <HAL_RCC_ClockConfig>
 80023c2:	b108      	cbz	r0, 80023c8 <SystemClock_Config+0x90>
 80023c4:	b672      	cpsid	i
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <SystemClock_Config+0x8e>
}
 80023c8:	b014      	add	sp, #80	; 0x50
 80023ca:	bd10      	pop	{r4, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40007000 	.word	0x40007000

080023d4 <main>:
{
 80023d4:	b500      	push	{lr}
 80023d6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80023d8:	f000 fbce 	bl	8002b78 <HAL_Init>
  SystemClock_Config();
 80023dc:	f7ff ffac 	bl	8002338 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	2214      	movs	r2, #20
 80023e2:	2100      	movs	r1, #0
 80023e4:	eb0d 0002 	add.w	r0, sp, r2
 80023e8:	f000 ff78 	bl	80032dc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ec:	2400      	movs	r4, #0
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <main+0xec>)
 80023f0:	9401      	str	r4, [sp, #4]
 80023f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023f4:	4833      	ldr	r0, [pc, #204]	; (80024c4 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	f042 0204 	orr.w	r2, r2, #4
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
 80023fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fe:	f002 0204 	and.w	r2, r2, #4
 8002402:	9201      	str	r2, [sp, #4]
 8002404:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002406:	9402      	str	r4, [sp, #8]
 8002408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
 8002410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002412:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002416:	9202      	str	r2, [sp, #8]
 8002418:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	9403      	str	r4, [sp, #12]
 800241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
 8002424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002426:	f002 0201 	and.w	r2, r2, #1
 800242a:	9203      	str	r2, [sp, #12]
 800242c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	9404      	str	r4, [sp, #16]
 8002430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002432:	f042 0202 	orr.w	r2, r2, #2
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800243e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002442:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002446:	f000 fd7d 	bl	8002f44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800244a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800244e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002452:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002456:	481c      	ldr	r0, [pc, #112]	; (80024c8 <main+0xf4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800245a:	a905      	add	r1, sp, #20
 800245c:	f000 fcaa 	bl	8002db4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	2020      	movs	r0, #32
 8002464:	e9cd 0305 	strd	r0, r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002468:	a905      	add	r1, sp, #20
 800246a:	4816      	ldr	r0, [pc, #88]	; (80024c4 <main+0xf0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002470:	f000 fca0 	bl	8002db4 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002474:	4815      	ldr	r0, [pc, #84]	; (80024cc <main+0xf8>)
  huart2.Init.BaudRate = 115200;
 8002476:	f8df c060 	ldr.w	ip, [pc, #96]	; 80024d8 <main+0x104>
  huart2.Init.Parity = UART_PARITY_NONE;
 800247a:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 800247c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002480:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002484:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002486:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002490:	f000 fc62 	bl	8002d58 <HAL_UART_Init>
 8002494:	b108      	cbz	r0, 800249a <main+0xc6>
 8002496:	b672      	cpsid	i
  while (1)
 8002498:	e7fe      	b.n	8002498 <main+0xc4>
  hiwdg.Instance = IWDG;
 800249a:	480d      	ldr	r0, [pc, #52]	; (80024d0 <main+0xfc>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <main+0x100>)
 800249e:	2304      	movs	r3, #4
 80024a0:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Reload = 4095;
 80024a4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80024a8:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80024aa:	f000 fd59 	bl	8002f60 <HAL_IWDG_Init>
 80024ae:	b108      	cbz	r0, 80024b4 <main+0xe0>
 80024b0:	b672      	cpsid	i
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <main+0xde>
  my_init();
 80024b4:	f7fe fd48 	bl	8000f48 <my_init>
    my_main();
 80024b8:	f7fe fd51 	bl	8000f5e <my_main>
  while (1)
 80024bc:	e7fc      	b.n	80024b8 <main+0xe4>
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020800 	.word	0x40020800
 80024cc:	20000d04 	.word	0x20000d04
 80024d0:	20000cf8 	.word	0x20000cf8
 80024d4:	40003000 	.word	0x40003000
 80024d8:	40004400 	.word	0x40004400

080024dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <NMI_Handler>

080024de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <HardFault_Handler>

080024e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <MemManage_Handler>

080024e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler>

080024e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <UsageFault_Handler>

080024e6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	4770      	bx	lr

080024e8 <DebugMon_Handler>:
 80024e8:	4770      	bx	lr

080024ea <PendSV_Handler>:
 80024ea:	4770      	bx	lr

080024ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ee:	f000 fb5d 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 80024f2:	f7fd fe7f 	bl	80001f4 <my_Tick>
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80024f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TaskingTickHandler();
 80024fa:	f7ff bbff 	b.w	8001cfc <TaskingTickHandler>
	...

08002500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002500:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x38>)
 8002504:	2100      	movs	r1, #0
 8002506:	9100      	str	r1, [sp, #0]
 8002508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800250a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
 8002510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002512:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002516:	9200      	str	r2, [sp, #0]
 8002518:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	9101      	str	r1, [sp, #4]
 800251c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800252e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002532:	f000 bb4d 	b.w	8002bd0 <HAL_NVIC_SetPriorityGrouping>
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800253c:	6802      	ldr	r2, [r0, #0]
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_TIM_Base_MspInit+0x28>)
 8002540:	429a      	cmp	r2, r3
{
 8002542:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM11)
 8002544:	d10b      	bne.n	800255e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_TIM_Base_MspInit+0x2c>)
 800254c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800254e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800255e:	b002      	add	sp, #8
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40014800 	.word	0x40014800
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800256c:	b510      	push	{r4, lr}
 800256e:	4604      	mov	r4, r0
 8002570:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	2214      	movs	r2, #20
 8002574:	2100      	movs	r1, #0
 8002576:	a803      	add	r0, sp, #12
 8002578:	f000 feb0 	bl	80032dc <memset>
  if(huart->Instance==USART2)
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_UART_MspInit+0x74>)
 8002580:	429a      	cmp	r2, r3
 8002582:	d12a      	bne.n	80025da <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002584:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002588:	2400      	movs	r4, #0
 800258a:	9401      	str	r4, [sp, #4]
 800258c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	4815      	ldr	r0, [pc, #84]	; (80025e4 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002590:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
 8002596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002598:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800259c:	9201      	str	r2, [sp, #4]
 800259e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	9402      	str	r4, [sp, #8]
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025bc:	2103      	movs	r1, #3
 80025be:	2307      	movs	r3, #7
 80025c0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	a903      	add	r1, sp, #12
 80025c6:	f000 fbf5 	bl	8002db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025ca:	2026      	movs	r0, #38	; 0x26
 80025cc:	4622      	mov	r2, r4
 80025ce:	4621      	mov	r1, r4
 80025d0:	f000 fb10 	bl	8002bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025d4:	2026      	movs	r0, #38	; 0x26
 80025d6:	f000 fb3f 	bl	8002c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025da:	b008      	add	sp, #32
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	bf00      	nop
 80025e0:	40004400 	.word	0x40004400
 80025e4:	40020000 	.word	0x40020000

080025e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4a03      	ldr	r2, [pc, #12]	; (80025f8 <SystemInit+0x10>)
 80025ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	4604      	mov	r4, r0
 8002602:	b340      	cbz	r0, 8002656 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002604:	6803      	ldr	r3, [r0, #0]
 8002606:	07dd      	lsls	r5, r3, #31
 8002608:	d410      	bmi.n	800262c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	0798      	lsls	r0, r3, #30
 800260e:	d45e      	bmi.n	80026ce <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	071a      	lsls	r2, r3, #28
 8002614:	f100 80a0 	bmi.w	8002758 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	075b      	lsls	r3, r3, #29
 800261c:	f100 80c0 	bmi.w	80027a0 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002620:	69a0      	ldr	r0, [r4, #24]
 8002622:	2800      	cmp	r0, #0
 8002624:	f040 8128 	bne.w	8002878 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2000      	movs	r0, #0
 800262a:	e02b      	b.n	8002684 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262c:	4b8f      	ldr	r3, [pc, #572]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	f002 020c 	and.w	r2, r2, #12
 8002634:	2a04      	cmp	r2, #4
 8002636:	d007      	beq.n	8002648 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	2a08      	cmp	r2, #8
 8002640:	d10b      	bne.n	800265a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	0251      	lsls	r1, r2, #9
 8002646:	d508      	bpl.n	800265a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	039a      	lsls	r2, r3, #14
 800264e:	d5dc      	bpl.n	800260a <HAL_RCC_OscConfig+0xe>
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1d9      	bne.n	800260a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
 8002658:	e014      	b.n	8002684 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	6862      	ldr	r2, [r4, #4]
 800265c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002660:	d113      	bne.n	800268a <HAL_RCC_OscConfig+0x8e>
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002668:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800266a:	f000 faab 	bl	8002bc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4e7f      	ldr	r6, [pc, #508]	; (800286c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002670:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	6833      	ldr	r3, [r6, #0]
 8002674:	039b      	lsls	r3, r3, #14
 8002676:	d4c8      	bmi.n	800260a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f000 faa4 	bl	8002bc4 <HAL_GetTick>
 800267c:	1b40      	subs	r0, r0, r5
 800267e:	2864      	cmp	r0, #100	; 0x64
 8002680:	d9f7      	bls.n	8002672 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002682:	2003      	movs	r0, #3
}
 8002684:	b002      	add	sp, #8
 8002686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	4d78      	ldr	r5, [pc, #480]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800268c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0xa8>
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	602b      	str	r3, [r5, #0]
 800269a:	682b      	ldr	r3, [r5, #0]
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a2:	e7e2      	b.n	800266a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	602b      	str	r3, [r5, #0]
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	d1d9      	bne.n	800266a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80026b6:	f000 fa85 	bl	8002bc4 <HAL_GetTick>
 80026ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	039f      	lsls	r7, r3, #14
 80026c0:	d5a3      	bpl.n	800260a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c2:	f000 fa7f 	bl	8002bc4 <HAL_GetTick>
 80026c6:	1b80      	subs	r0, r0, r6
 80026c8:	2864      	cmp	r0, #100	; 0x64
 80026ca:	d9f7      	bls.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026cc:	e7d9      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	f012 0f0c 	tst.w	r2, #12
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026de:	2a08      	cmp	r2, #8
 80026e0:	d111      	bne.n	8002706 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	025e      	lsls	r6, r3, #9
 80026e6:	d40e      	bmi.n	8002706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e8:	4a60      	ldr	r2, [pc, #384]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	079d      	lsls	r5, r3, #30
 80026ee:	d502      	bpl.n	80026f6 <HAL_RCC_OscConfig+0xfa>
 80026f0:	68e3      	ldr	r3, [r4, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d1af      	bne.n	8002656 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	6921      	ldr	r1, [r4, #16]
 80026fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002702:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	e784      	b.n	8002610 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002706:	68e2      	ldr	r2, [r4, #12]
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800270a:	b1b2      	cbz	r2, 800273a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002710:	f000 fa58 	bl	8002bc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4d55      	ldr	r5, [pc, #340]	; (800286c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002716:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	0798      	lsls	r0, r3, #30
 800271c:	d507      	bpl.n	800272e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	682b      	ldr	r3, [r5, #0]
 8002720:	6922      	ldr	r2, [r4, #16]
 8002722:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002726:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800272a:	602b      	str	r3, [r5, #0]
 800272c:	e770      	b.n	8002610 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f000 fa49 	bl	8002bc4 <HAL_GetTick>
 8002732:	1b80      	subs	r0, r0, r6
 8002734:	2802      	cmp	r0, #2
 8002736:	d9ef      	bls.n	8002718 <HAL_RCC_OscConfig+0x11c>
 8002738:	e7a3      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800273a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800273c:	f000 fa42 	bl	8002bc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002740:	4e4a      	ldr	r6, [pc, #296]	; (800286c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002742:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002744:	6833      	ldr	r3, [r6, #0]
 8002746:	0799      	lsls	r1, r3, #30
 8002748:	f57f af62 	bpl.w	8002610 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f000 fa3a 	bl	8002bc4 <HAL_GetTick>
 8002750:	1b40      	subs	r0, r0, r5
 8002752:	2802      	cmp	r0, #2
 8002754:	d9f6      	bls.n	8002744 <HAL_RCC_OscConfig+0x148>
 8002756:	e794      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002758:	6962      	ldr	r2, [r4, #20]
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800275c:	b182      	cbz	r2, 8002780 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800275e:	2201      	movs	r2, #1
 8002760:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002764:	f000 fa2e 	bl	8002bc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002768:	4e40      	ldr	r6, [pc, #256]	; (800286c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800276a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800276e:	079f      	lsls	r7, r3, #30
 8002770:	f53f af52 	bmi.w	8002618 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002774:	f000 fa26 	bl	8002bc4 <HAL_GetTick>
 8002778:	1b40      	subs	r0, r0, r5
 800277a:	2802      	cmp	r0, #2
 800277c:	d9f6      	bls.n	800276c <HAL_RCC_OscConfig+0x170>
 800277e:	e780      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002780:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002784:	f000 fa1e 	bl	8002bc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4e38      	ldr	r6, [pc, #224]	; (800286c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800278a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800278e:	0798      	lsls	r0, r3, #30
 8002790:	f57f af42 	bpl.w	8002618 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002794:	f000 fa16 	bl	8002bc4 <HAL_GetTick>
 8002798:	1b40      	subs	r0, r0, r5
 800279a:	2802      	cmp	r0, #2
 800279c:	d9f6      	bls.n	800278c <HAL_RCC_OscConfig+0x190>
 800279e:	e770      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80027a8:	d128      	bne.n	80027fc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	9201      	str	r2, [sp, #4]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027be:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4d2c      	ldr	r5, [pc, #176]	; (8002874 <HAL_RCC_OscConfig+0x278>)
 80027c2:	682b      	ldr	r3, [r5, #0]
 80027c4:	05d9      	lsls	r1, r3, #23
 80027c6:	d51b      	bpl.n	8002800 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c8:	68a3      	ldr	r3, [r4, #8]
 80027ca:	4d28      	ldr	r5, [pc, #160]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d127      	bne.n	8002820 <HAL_RCC_OscConfig+0x224>
 80027d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80027d8:	f000 f9f4 	bl	8002bc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	4e23      	ldr	r6, [pc, #140]	; (800286c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80027de:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80027e6:	079b      	lsls	r3, r3, #30
 80027e8:	d539      	bpl.n	800285e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80027ea:	2f00      	cmp	r7, #0
 80027ec:	f43f af18 	beq.w	8002620 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	e711      	b.n	8002620 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80027fc:	2700      	movs	r7, #0
 80027fe:	e7df      	b.n	80027c0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002808:	f000 f9dc 	bl	8002bc4 <HAL_GetTick>
 800280c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	682b      	ldr	r3, [r5, #0]
 8002810:	05da      	lsls	r2, r3, #23
 8002812:	d4d9      	bmi.n	80027c8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f000 f9d6 	bl	8002bc4 <HAL_GetTick>
 8002818:	1b80      	subs	r0, r0, r6
 800281a:	2802      	cmp	r0, #2
 800281c:	d9f7      	bls.n	800280e <HAL_RCC_OscConfig+0x212>
 800281e:	e730      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	2b05      	cmp	r3, #5
 8002822:	d104      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
 8002824:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	672b      	str	r3, [r5, #112]	; 0x70
 800282c:	e7d0      	b.n	80027d0 <HAL_RCC_OscConfig+0x1d4>
 800282e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	672a      	str	r2, [r5, #112]	; 0x70
 8002836:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002838:	f022 0204 	bic.w	r2, r2, #4
 800283c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ca      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8002842:	f000 f9bf 	bl	8002bc4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800284a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800284e:	0798      	lsls	r0, r3, #30
 8002850:	d5cb      	bpl.n	80027ea <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f000 f9b7 	bl	8002bc4 <HAL_GetTick>
 8002856:	1b80      	subs	r0, r0, r6
 8002858:	4540      	cmp	r0, r8
 800285a:	d9f7      	bls.n	800284c <HAL_RCC_OscConfig+0x250>
 800285c:	e711      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f000 f9b1 	bl	8002bc4 <HAL_GetTick>
 8002862:	1b40      	subs	r0, r0, r5
 8002864:	4540      	cmp	r0, r8
 8002866:	d9bd      	bls.n	80027e4 <HAL_RCC_OscConfig+0x1e8>
 8002868:	e70b      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	42470000 	.word	0x42470000
 8002874:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002878:	4d36      	ldr	r5, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x358>)
 800287a:	68ab      	ldr	r3, [r5, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d03d      	beq.n	8002900 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_OscConfig+0x35c>)
 8002886:	2200      	movs	r2, #0
 8002888:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800288a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	d12b      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800288e:	f000 f999 	bl	8002bc4 <HAL_GetTick>
 8002892:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	0199      	lsls	r1, r3, #6
 8002898:	d41f      	bmi.n	80028da <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800289e:	4313      	orrs	r3, r2
 80028a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028b6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4d26      	ldr	r5, [pc, #152]	; (8002954 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80028bc:	2201      	movs	r2, #1
 80028be:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80028c0:	f000 f980 	bl	8002bc4 <HAL_GetTick>
 80028c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	019a      	lsls	r2, r3, #6
 80028ca:	f53f aead 	bmi.w	8002628 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f000 f979 	bl	8002bc4 <HAL_GetTick>
 80028d2:	1b00      	subs	r0, r0, r4
 80028d4:	2802      	cmp	r0, #2
 80028d6:	d9f6      	bls.n	80028c6 <HAL_RCC_OscConfig+0x2ca>
 80028d8:	e6d3      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028da:	f000 f973 	bl	8002bc4 <HAL_GetTick>
 80028de:	1b80      	subs	r0, r0, r6
 80028e0:	2802      	cmp	r0, #2
 80028e2:	d9d7      	bls.n	8002894 <HAL_RCC_OscConfig+0x298>
 80028e4:	e6cd      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80028e6:	f000 f96d 	bl	8002bc4 <HAL_GetTick>
 80028ea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	019b      	lsls	r3, r3, #6
 80028f0:	f57f ae9a 	bpl.w	8002628 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f4:	f000 f966 	bl	8002bc4 <HAL_GetTick>
 80028f8:	1b00      	subs	r0, r0, r4
 80028fa:	2802      	cmp	r0, #2
 80028fc:	d9f6      	bls.n	80028ec <HAL_RCC_OscConfig+0x2f0>
 80028fe:	e6c0      	b.n	8002682 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	2801      	cmp	r0, #1
 8002902:	f43f aebf 	beq.w	8002684 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002906:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002908:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290e:	4291      	cmp	r1, r2
 8002910:	f47f aea1 	bne.w	8002656 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002914:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	428a      	cmp	r2, r1
 800291c:	f47f ae9b 	bne.w	8002656 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002920:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002922:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002926:	401a      	ands	r2, r3
 8002928:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800292c:	f47f ae93 	bne.w	8002656 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002930:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002938:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800293e:	f47f ae8a 	bne.w	8002656 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002942:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002944:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800294c:	f43f ae6c 	beq.w	8002628 <HAL_RCC_OscConfig+0x2c>
 8002950:	e681      	b.n	8002656 <HAL_RCC_OscConfig+0x5a>
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000

0800295c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295c:	4913      	ldr	r1, [pc, #76]	; (80029ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800295e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002960:	688b      	ldr	r3, [r1, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d01c      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x48>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800296e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002970:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002972:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002974:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002978:	bf14      	ite	ne
 800297a:	480d      	ldrne	r0, [pc, #52]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297c:	480d      	ldreq	r0, [pc, #52]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002982:	bf18      	it	ne
 8002984:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002986:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	fba1 0100 	umull	r0, r1, r1, r0
 800298e:	f7fd fc41 	bl	8000214 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_GetSysClockFreq+0x50>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800299e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029a2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x54>)
 80029a6:	e7fc      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80029aa:	e7fa      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x46>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	00f42400 	.word	0x00f42400

080029b8 <HAL_RCC_ClockConfig>:
{
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80029be:	4604      	mov	r4, r0
 80029c0:	b910      	cbnz	r0, 80029c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
}
 80029c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c8:	4b44      	ldr	r3, [pc, #272]	; (8002adc <HAL_RCC_ClockConfig+0x124>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f002 0207 	and.w	r2, r2, #7
 80029d0:	428a      	cmp	r2, r1
 80029d2:	d328      	bcc.n	8002a26 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	0797      	lsls	r7, r2, #30
 80029d8:	d42d      	bmi.n	8002a36 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	07d0      	lsls	r0, r2, #31
 80029dc:	d441      	bmi.n	8002a62 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_ClockConfig+0x124>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f002 0207 	and.w	r2, r2, #7
 80029e6:	42aa      	cmp	r2, r5
 80029e8:	d866      	bhi.n	8002ab8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	0751      	lsls	r1, r2, #29
 80029ee:	d46c      	bmi.n	8002aca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	0713      	lsls	r3, r2, #28
 80029f2:	d507      	bpl.n	8002a04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f4:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 80029f6:	6921      	ldr	r1, [r4, #16]
 80029f8:	6893      	ldr	r3, [r2, #8]
 80029fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a04:	f7ff ffaa 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002a08:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a0a:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <HAL_RCC_ClockConfig+0x12c>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	40d8      	lsrs	r0, r3
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_ClockConfig+0x130>)
 8002a18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_ClockConfig+0x134>)
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	f000 f887 	bl	8002b30 <HAL_InitTick>
  return HAL_OK;
 8002a22:	2000      	movs	r0, #0
 8002a24:	e7ce      	b.n	80029c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	b2ca      	uxtb	r2, r1
 8002a28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d1c6      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xa>
 8002a34:	e7ce      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a38:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	bf1e      	ittt	ne
 8002a3e:	6899      	ldrne	r1, [r3, #8]
 8002a40:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002a44:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	bf42      	ittt	mi
 8002a4a:	6899      	ldrmi	r1, [r3, #8]
 8002a4c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002a50:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a52:	4923      	ldr	r1, [pc, #140]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a54:	68a0      	ldr	r0, [r4, #8]
 8002a56:	688b      	ldr	r3, [r1, #8]
 8002a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5c:	4303      	orrs	r3, r0
 8002a5e:	608b      	str	r3, [r1, #8]
 8002a60:	e7bb      	b.n	80029da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	6862      	ldr	r2, [r4, #4]
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a66:	2a01      	cmp	r2, #1
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	d0a7      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4e1b      	ldr	r6, [pc, #108]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002a74:	68b3      	ldr	r3, [r6, #8]
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a7e:	f000 f8a1 	bl	8002bc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a88:	68b3      	ldr	r3, [r6, #8]
 8002a8a:	6862      	ldr	r2, [r4, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a94:	d0a3      	beq.n	80029de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f000 f895 	bl	8002bc4 <HAL_GetTick>
 8002a9a:	1bc0      	subs	r0, r0, r7
 8002a9c:	4540      	cmp	r0, r8
 8002a9e:	d9f3      	bls.n	8002a88 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	e78f      	b.n	80029c4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa4:	1e91      	subs	r1, r2, #2
 8002aa6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	d802      	bhi.n	8002ab2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ab0:	e7de      	b.n	8002a70 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	f013 0f02 	tst.w	r3, #2
 8002ab6:	e7db      	b.n	8002a70 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab8:	b2ea      	uxtb	r2, r5
 8002aba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	42ab      	cmp	r3, r5
 8002ac4:	f47f af7d 	bne.w	80029c2 <HAL_RCC_ClockConfig+0xa>
 8002ac8:	e78f      	b.n	80029ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aca:	4905      	ldr	r1, [pc, #20]	; (8002ae0 <HAL_RCC_ClockConfig+0x128>)
 8002acc:	68e0      	ldr	r0, [r4, #12]
 8002ace:	688b      	ldr	r3, [r1, #8]
 8002ad0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ad4:	4303      	orrs	r3, r0
 8002ad6:	608b      	str	r3, [r1, #8]
 8002ad8:	e78a      	b.n	80029f0 <HAL_RCC_ClockConfig+0x38>
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08012515 	.word	0x08012515
 8002ae8:	200001a4 	.word	0x200001a4
 8002aec:	200001ac 	.word	0x200001ac

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002af2:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002afe:	6810      	ldr	r0, [r2, #0]
}
 8002b00:	40d8      	lsrs	r0, r3
 8002b02:	4770      	bx	lr
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08012525 	.word	0x08012525
 8002b0c:	200001a4 	.word	0x200001a4

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b1e:	6810      	ldr	r0, [r2, #0]
}
 8002b20:	40d8      	lsrs	r0, r3
 8002b22:	4770      	bx	lr
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08012525 	.word	0x08012525
 8002b2c:	200001a4 	.word	0x200001a4

08002b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b30:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b32:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_InitTick+0x3c>)
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_InitTick+0x40>)
{
 8002b36:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b38:	7818      	ldrb	r0, [r3, #0]
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b42:	6810      	ldr	r0, [r2, #0]
 8002b44:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b48:	f000 f894 	bl	8002c74 <HAL_SYSTICK_Config>
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	b958      	cbnz	r0, 8002b68 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b50:	2d0f      	cmp	r5, #15
 8002b52:	d809      	bhi.n	8002b68 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	4602      	mov	r2, r0
 8002b56:	4629      	mov	r1, r5
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b5c:	f000 f84a 	bl	8002bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_InitTick+0x44>)
 8002b62:	4620      	mov	r0, r4
 8002b64:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002b66:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
 8002b6a:	e7fc      	b.n	8002b66 <HAL_InitTick+0x36>
 8002b6c:	200001a4 	.word	0x200001a4
 8002b70:	200001a8 	.word	0x200001a8
 8002b74:	200001ac 	.word	0x200001ac

08002b78 <HAL_Init>:
{
 8002b78:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_Init+0x30>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b94:	2003      	movs	r0, #3
 8002b96:	f000 f81b 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff ffc8 	bl	8002b30 <HAL_InitTick>
  HAL_MspInit();
 8002ba0:	f7ff fcae 	bl	8002500 <HAL_MspInit>
}
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	bd08      	pop	{r3, pc}
 8002ba8:	40023c00 	.word	0x40023c00

08002bac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002bac:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_IncTick+0x10>)
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_IncTick+0x14>)
 8002bb0:	6811      	ldr	r1, [r2, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	440b      	add	r3, r1
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000d48 	.word	0x20000d48
 8002bc0:	200001a8 	.word	0x200001a8

08002bc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002bc4:	4b01      	ldr	r3, [pc, #4]	; (8002bcc <HAL_GetTick+0x8>)
 8002bc6:	6818      	ldr	r0, [r3, #0]
}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000d48 	.word	0x20000d48

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4907      	ldr	r1, [pc, #28]	; (8002bf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bd2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002bec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf6:	b530      	push	{r4, r5, lr}
 8002bf8:	68dc      	ldr	r4, [r3, #12]
 8002bfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfe:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c02:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	2d04      	cmp	r5, #4
 8002c06:	bf28      	it	cs
 8002c08:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c10:	bf8c      	ite	hi
 8002c12:	3c03      	subhi	r4, #3
 8002c14:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c16:	fa03 f505 	lsl.w	r5, r3, r5
 8002c1a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1e:	40a3      	lsls	r3, r4
 8002c20:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002c26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	bfac      	ite	ge
 8002c2e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	4a08      	ldrlt	r2, [pc, #32]	; (8002c54 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	bfb8      	it	lt
 8002c3a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	bfaa      	itet	ge
 8002c42:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c4c:	bd30      	pop	{r4, r5, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00
 8002c54:	e000ed14 	.word	0xe000ed14

08002c58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	db08      	blt.n	8002c6e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5c:	0942      	lsrs	r2, r0, #5
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f000 001f 	and.w	r0, r0, #31
 8002c64:	fa03 f000 	lsl.w	r0, r3, r0
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <HAL_NVIC_EnableIRQ+0x18>)
 8002c6a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	3801      	subs	r0, #1
 8002c76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c7a:	d20b      	bcs.n	8002c94 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	21f0      	movs	r1, #240	; 0xf0
 8002c86:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c90:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c92:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c94:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	6802      	ldr	r2, [r0, #0]
 8002c9e:	68c1      	ldr	r1, [r0, #12]
 8002ca0:	6913      	ldr	r3, [r2, #16]
 8002ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca6:	430b      	orrs	r3, r1
{
 8002ca8:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002caa:	6113      	str	r3, [r2, #16]
{
 8002cac:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cae:	6883      	ldr	r3, [r0, #8]
 8002cb0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002cb2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb4:	4303      	orrs	r3, r0
 8002cb6:	6968      	ldr	r0, [r5, #20]
 8002cb8:	4303      	orrs	r3, r0
 8002cba:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002cbc:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002cc0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cc4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cca:	6953      	ldr	r3, [r2, #20]
 8002ccc:	69a9      	ldr	r1, [r5, #24]
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <UART_SetConfig+0xb8>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d003      	beq.n	8002ce4 <UART_SetConfig+0x48>
 8002cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d123      	bne.n	8002d2c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ce4:	f7ff ff14 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce8:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cea:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf0:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002cf4:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf8:	d11b      	bne.n	8002d32 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cfa:	19b2      	adds	r2, r6, r6
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	415b      	adcs	r3, r3
 8002d02:	f7fd fa87 	bl	8000214 <__aeabi_uldivmod>
 8002d06:	2164      	movs	r1, #100	; 0x64
 8002d08:	fbb0 f5f1 	udiv	r5, r0, r1
 8002d0c:	fb01 0315 	mls	r3, r1, r5, r0
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	3332      	adds	r3, #50	; 0x32
 8002d14:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d18:	f003 0207 	and.w	r2, r3, #7
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002d22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d26:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d28:	60a3      	str	r3, [r4, #8]
  }
}
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f7ff fee0 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8002d30:	e7da      	b.n	8002ce8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d32:	00b2      	lsls	r2, r6, #2
 8002d34:	0fb3      	lsrs	r3, r6, #30
 8002d36:	f7fd fa6d 	bl	8000214 <__aeabi_uldivmod>
 8002d3a:	2264      	movs	r2, #100	; 0x64
 8002d3c:	fbb0 f1f2 	udiv	r1, r0, r2
 8002d40:	fb02 0311 	mls	r3, r2, r1, r0
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	3332      	adds	r3, #50	; 0x32
 8002d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d4c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002d50:	e7ea      	b.n	8002d28 <UART_SetConfig+0x8c>
 8002d52:	bf00      	nop
 8002d54:	40011000 	.word	0x40011000

08002d58 <HAL_UART_Init>:
{
 8002d58:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	b340      	cbz	r0, 8002db0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d66:	b91b      	cbnz	r3, 8002d70 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002d6c:	f7ff fbfe 	bl	800256c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d70:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d72:	2324      	movs	r3, #36	; 0x24
 8002d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002d78:	68d3      	ldr	r3, [r2, #12]
 8002d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d7e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff ff8b 	bl	8002c9c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002da2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002da6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002daa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002dae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7fc      	b.n	8002dae <HAL_UART_Init+0x56>

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002f40 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dbc:	4a5e      	ldr	r2, [pc, #376]	; (8002f38 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002dc2:	2401      	movs	r4, #1
 8002dc4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002dca:	43ac      	bics	r4, r5
 8002dcc:	f040 80a5 	bne.w	8002f1a <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd0:	684d      	ldr	r5, [r1, #4]
 8002dd2:	f005 0403 	and.w	r4, r5, #3
 8002dd6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dda:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ddc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dde:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de4:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de8:	d834      	bhi.n	8002e54 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002dea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dec:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df0:	68cf      	ldr	r7, [r1, #12]
 8002df2:	fa07 f708 	lsl.w	r7, r7, r8
 8002df6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002dfa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002dfc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfe:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e02:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002e06:	409f      	lsls	r7, r3
 8002e08:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002e0c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002e0e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e10:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e14:	688f      	ldr	r7, [r1, #8]
 8002e16:	fa07 f708 	lsl.w	r7, r7, r8
 8002e1a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002e20:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e22:	d119      	bne.n	8002e58 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002e24:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002e28:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002e30:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e34:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002e38:	f04f 0e0f 	mov.w	lr, #15
 8002e3c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002e40:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	690f      	ldr	r7, [r1, #16]
 8002e46:	fa07 f70b 	lsl.w	r7, r7, fp
 8002e4a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	f8ca 7020 	str.w	r7, [sl, #32]
 8002e52:	e001      	b.n	8002e58 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	2c03      	cmp	r4, #3
 8002e56:	d1da      	bne.n	8002e0e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002e58:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e60:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e62:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002e66:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e68:	d057      	beq.n	8002f1a <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6a:	f04f 0a00 	mov.w	sl, #0
 8002e6e:	f8cd a004 	str.w	sl, [sp, #4]
 8002e72:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e76:	4c31      	ldr	r4, [pc, #196]	; (8002f3c <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e78:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002e7c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002e80:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002e84:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002e88:	9601      	str	r6, [sp, #4]
 8002e8a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8c:	f023 0603 	bic.w	r6, r3, #3
 8002e90:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002e94:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e98:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002ea4:	270f      	movs	r7, #15
 8002ea6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eaa:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eb0:	d03a      	beq.n	8002f28 <HAL_GPIO_Init+0x174>
 8002eb2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eb6:	42a0      	cmp	r0, r4
 8002eb8:	d038      	beq.n	8002f2c <HAL_GPIO_Init+0x178>
 8002eba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ebe:	42a0      	cmp	r0, r4
 8002ec0:	d036      	beq.n	8002f30 <HAL_GPIO_Init+0x17c>
 8002ec2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ec6:	42a0      	cmp	r0, r4
 8002ec8:	d034      	beq.n	8002f34 <HAL_GPIO_Init+0x180>
 8002eca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ece:	42a0      	cmp	r0, r4
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2404      	moveq	r4, #4
 8002ed4:	2407      	movne	r4, #7
 8002ed6:	fa04 f40e 	lsl.w	r4, r4, lr
 8002eda:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002edc:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002ede:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee4:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	bf54      	ite	pl
 8002ee8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002eea:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002eee:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002ef0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef2:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002ef4:	bf54      	ite	pl
 8002ef6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002ef8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002efc:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efe:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f00:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002f02:	bf54      	ite	pl
 8002f04:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f06:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002f0a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f0e:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002f10:	bf54      	ite	pl
 8002f12:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002f14:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002f18:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	f47f af4f 	bne.w	8002dc0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002f22:	b003      	add	sp, #12
 8002f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f28:	4654      	mov	r4, sl
 8002f2a:	e7d4      	b.n	8002ed6 <HAL_GPIO_Init+0x122>
 8002f2c:	2401      	movs	r4, #1
 8002f2e:	e7d2      	b.n	8002ed6 <HAL_GPIO_Init+0x122>
 8002f30:	2402      	movs	r4, #2
 8002f32:	e7d0      	b.n	8002ed6 <HAL_GPIO_Init+0x122>
 8002f34:	2403      	movs	r4, #3
 8002f36:	e7ce      	b.n	8002ed6 <HAL_GPIO_Init+0x122>
 8002f38:	40013c00 	.word	0x40013c00
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f44:	b10a      	cbz	r2, 8002f4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f46:	6181      	str	r1, [r0, #24]
  }
}
 8002f48:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4a:	0409      	lsls	r1, r1, #16
 8002f4c:	e7fb      	b.n	8002f46 <HAL_GPIO_WritePin+0x2>

08002f4e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f4e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f50:	ea01 0203 	and.w	r2, r1, r3
 8002f54:	ea21 0103 	bic.w	r1, r1, r3
 8002f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002f5c:	6181      	str	r1, [r0, #24]
}
 8002f5e:	4770      	bx	lr

08002f60 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002f60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002f62:	4604      	mov	r4, r0
 8002f64:	b310      	cbz	r0, 8002fac <HAL_IWDG_Init+0x4c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002f66:	6803      	ldr	r3, [r0, #0]
 8002f68:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8002f72:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f74:	6842      	ldr	r2, [r0, #4]
 8002f76:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f78:	6882      	ldr	r2, [r0, #8]
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002f7c:	f7ff fe22 	bl	8002bc4 <HAL_GetTick>
 8002f80:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f82:	6822      	ldr	r2, [r4, #0]
 8002f84:	68d3      	ldr	r3, [r2, #12]
 8002f86:	f013 0303 	ands.w	r3, r3, #3
 8002f8a:	d104      	bne.n	8002f96 <HAL_IWDG_Init+0x36>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f8c:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8002f90:	6011      	str	r1, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f92:	4618      	mov	r0, r3
}
 8002f94:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f96:	f7ff fe15 	bl	8002bc4 <HAL_GetTick>
 8002f9a:	1b40      	subs	r0, r0, r5
 8002f9c:	2831      	cmp	r0, #49	; 0x31
 8002f9e:	d9f0      	bls.n	8002f82 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	079b      	lsls	r3, r3, #30
 8002fa6:	d0ec      	beq.n	8002f82 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 8002fa8:	2003      	movs	r0, #3
 8002faa:	e7f3      	b.n	8002f94 <HAL_IWDG_Init+0x34>
    return HAL_ERROR;
 8002fac:	2001      	movs	r0, #1
 8002fae:	e7f1      	b.n	8002f94 <HAL_IWDG_Init+0x34>

08002fb0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fbc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d128      	bne.n	8003016 <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fca:	6803      	ldr	r3, [r0, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	4a11      	ldr	r2, [pc, #68]	; (800301c <HAL_TIM_Base_Start_IT+0x60>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d012      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x44>
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d00f      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x44>
 8002fe0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x44>
 8002fe8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x44>
 8002ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x44>
 8002ff8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	2a06      	cmp	r2, #6
 8003008:	d003      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003012:	2000      	movs	r0, #0
}
 8003014:	4770      	bx	lr
    return HAL_ERROR;
 8003016:	2001      	movs	r0, #1
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000

08003020 <HAL_TIM_OC_DelayElapsedCallback>:
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_IC_CaptureCallback>:
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003024:	4770      	bx	lr

08003026 <HAL_TIM_TriggerCallback>:
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003028:	6803      	ldr	r3, [r0, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	0791      	lsls	r1, r2, #30
{
 800302e:	b510      	push	{r4, lr}
 8003030:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003032:	d50e      	bpl.n	8003052 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	0792      	lsls	r2, r2, #30
 8003038:	d50b      	bpl.n	8003052 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800303a:	f06f 0202 	mvn.w	r2, #2
 800303e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003040:	2201      	movs	r2, #1
 8003042:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	079b      	lsls	r3, r3, #30
 8003048:	d077      	beq.n	800313a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	f7ff ffea 	bl	8003022 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	2300      	movs	r3, #0
 8003050:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	0750      	lsls	r0, r2, #29
 8003058:	d510      	bpl.n	800307c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	0751      	lsls	r1, r2, #29
 800305e:	d50d      	bpl.n	800307c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003060:	f06f 0204 	mvn.w	r2, #4
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003066:	2202      	movs	r2, #2
 8003068:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003070:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003072:	d068      	beq.n	8003146 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003074:	f7ff ffd5 	bl	8003022 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003078:	2300      	movs	r3, #0
 800307a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	0712      	lsls	r2, r2, #28
 8003082:	d50f      	bpl.n	80030a4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	0710      	lsls	r0, r2, #28
 8003088:	d50c      	bpl.n	80030a4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308a:	f06f 0208 	mvn.w	r2, #8
 800308e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003090:	2204      	movs	r2, #4
 8003092:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003098:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309a:	d05a      	beq.n	8003152 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800309c:	f7ff ffc1 	bl	8003022 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a0:	2300      	movs	r3, #0
 80030a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	06d2      	lsls	r2, r2, #27
 80030aa:	d510      	bpl.n	80030ce <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	06d0      	lsls	r0, r2, #27
 80030b0:	d50d      	bpl.n	80030ce <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b2:	f06f 0210 	mvn.w	r2, #16
 80030b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b8:	2208      	movs	r2, #8
 80030ba:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c4:	d04b      	beq.n	800315e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	f7ff ffac 	bl	8003022 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	2300      	movs	r3, #0
 80030cc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	07d1      	lsls	r1, r2, #31
 80030d4:	d508      	bpl.n	80030e8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	07d2      	lsls	r2, r2, #31
 80030da:	d505      	bpl.n	80030e8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030dc:	f06f 0201 	mvn.w	r2, #1
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7fe f86e 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	0610      	lsls	r0, r2, #24
 80030ee:	d508      	bpl.n	8003102 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	0611      	lsls	r1, r2, #24
 80030f4:	d505      	bpl.n	8003102 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030fc:	4620      	mov	r0, r4
 80030fe:	f000 f8b0 	bl	8003262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	0652      	lsls	r2, r2, #25
 8003108:	d508      	bpl.n	800311c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	0650      	lsls	r0, r2, #25
 800310e:	d505      	bpl.n	800311c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff85 	bl	8003026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	0691      	lsls	r1, r2, #26
 8003122:	d522      	bpl.n	800316a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	0692      	lsls	r2, r2, #26
 8003128:	d51f      	bpl.n	800316a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800312a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003130:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003136:	f000 b893 	b.w	8003260 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	f7ff ff71 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff ff70 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
 8003144:	e783      	b.n	800304e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	f7ff ff6b 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314a:	4620      	mov	r0, r4
 800314c:	f7ff ff6a 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
 8003150:	e792      	b.n	8003078 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	f7ff ff65 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff ff64 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
 800315c:	e7a0      	b.n	80030a0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	f7ff ff5f 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003162:	4620      	mov	r0, r4
 8003164:	f7ff ff5e 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
 8003168:	e7af      	b.n	80030ca <HAL_TIM_IRQHandler+0xa2>
}
 800316a:	bd10      	pop	{r4, pc}

0800316c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 800316e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	4290      	cmp	r0, r2
 8003172:	d00e      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 8003174:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003178:	d00b      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 800317a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800317e:	4290      	cmp	r0, r2
 8003180:	d007      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 8003182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003186:	4290      	cmp	r0, r2
 8003188:	d003      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 800318a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800318e:	4290      	cmp	r0, r2
 8003190:	d115      	bne.n	80031be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003192:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003198:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <TIM_Base_SetConfig+0x94>)
 800319c:	4290      	cmp	r0, r2
 800319e:	d019      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031a4:	d016      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80031aa:	4290      	cmp	r0, r2
 80031ac:	d012      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b2:	4290      	cmp	r0, r2
 80031b4:	d00e      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d00a      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <TIM_Base_SetConfig+0x98>)
 80031c0:	4290      	cmp	r0, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031c8:	4290      	cmp	r0, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d0:	4290      	cmp	r0, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031dc:	694a      	ldr	r2, [r1, #20]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80031e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e6:	688b      	ldr	r3, [r1, #8]
 80031e8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ea:	680b      	ldr	r3, [r1, #0]
 80031ec:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <TIM_Base_SetConfig+0x94>)
 80031f0:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f2:	bf04      	itt	eq
 80031f4:	690b      	ldreq	r3, [r1, #16]
 80031f6:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f8:	2301      	movs	r3, #1
 80031fa:	6143      	str	r3, [r0, #20]
}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40010000 	.word	0x40010000
 8003204:	40014000 	.word	0x40014000

08003208 <HAL_TIM_Base_Init>:
{
 8003208:	b510      	push	{r4, lr}
  if (htim == NULL)
 800320a:	4604      	mov	r4, r0
 800320c:	b330      	cbz	r0, 800325c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003212:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003216:	b91b      	cbnz	r3, 8003220 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003218:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800321c:	f7ff f98e 	bl	800253c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003222:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	1d21      	adds	r1, r4, #4
 800322a:	f7ff ff9f 	bl	800316c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	2301      	movs	r3, #1
 8003230:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003234:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800323a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800323e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800324a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800324e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800325a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800325c:	2001      	movs	r0, #1
 800325e:	e7fc      	b.n	800325a <HAL_TIM_Base_Init+0x52>

08003260 <HAL_TIMEx_CommutCallback>:
 8003260:	4770      	bx	lr

08003262 <HAL_TIMEx_BreakCallback>:
 8003262:	4770      	bx	lr

08003264 <VersionPrint>:
const char VersionBuildDateString[] = "Wed Nov  3 12:53:07 2021";
const char VersionBuildUser[] = "harsh";

void VersionPrint(void)
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 8003264:	4a02      	ldr	r2, [pc, #8]	; (8003270 <VersionPrint+0xc>)
 8003266:	4903      	ldr	r1, [pc, #12]	; (8003274 <VersionPrint+0x10>)
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <VersionPrint+0x14>)
 800326a:	f000 bca9 	b.w	8003bc0 <iprintf>
 800326e:	bf00      	nop
 8003270:	08012581 	.word	0x08012581
 8003274:	08012568 	.word	0x08012568
 8003278:	0801252d 	.word	0x0801252d

0800327c <CmdVersion>:
}

ParserReturnVal_t CmdVersion(int mode)
{
 800327c:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800327e:	b908      	cbnz	r0, 8003284 <CmdVersion+0x8>

   VersionPrint();
 8003280:	f7ff fff0 	bl	8003264 <VersionPrint>
   return CmdReturnOk;
}
 8003284:	2000      	movs	r0, #0
 8003286:	bd08      	pop	{r3, pc}

08003288 <__errno>:
 8003288:	4b01      	ldr	r3, [pc, #4]	; (8003290 <__errno+0x8>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	200001b0 	.word	0x200001b0

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4d0d      	ldr	r5, [pc, #52]	; (80032cc <__libc_init_array+0x38>)
 8003298:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329a:	1b64      	subs	r4, r4, r5
 800329c:	10a4      	asrs	r4, r4, #2
 800329e:	2600      	movs	r6, #0
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	4d0b      	ldr	r5, [pc, #44]	; (80032d4 <__libc_init_array+0x40>)
 80032a6:	4c0c      	ldr	r4, [pc, #48]	; (80032d8 <__libc_init_array+0x44>)
 80032a8:	f003 f906 	bl	80064b8 <_init>
 80032ac:	1b64      	subs	r4, r4, r5
 80032ae:	10a4      	asrs	r4, r4, #2
 80032b0:	2600      	movs	r6, #0
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	08012af4 	.word	0x08012af4
 80032d0:	08012af4 	.word	0x08012af4
 80032d4:	08012af4 	.word	0x08012af4
 80032d8:	08012af8 	.word	0x08012af8

080032dc <memset>:
 80032dc:	4402      	add	r2, r0
 80032de:	4603      	mov	r3, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <__cvt>:
 80032ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	ec55 4b10 	vmov	r4, r5, d0
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	460e      	mov	r6, r1
 80032f8:	4619      	mov	r1, r3
 80032fa:	462b      	mov	r3, r5
 80032fc:	bfbb      	ittet	lt
 80032fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003302:	461d      	movlt	r5, r3
 8003304:	2300      	movge	r3, #0
 8003306:	232d      	movlt	r3, #45	; 0x2d
 8003308:	700b      	strb	r3, [r1, #0]
 800330a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800330c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003310:	4691      	mov	r9, r2
 8003312:	f023 0820 	bic.w	r8, r3, #32
 8003316:	bfbc      	itt	lt
 8003318:	4622      	movlt	r2, r4
 800331a:	4614      	movlt	r4, r2
 800331c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003320:	d005      	beq.n	800332e <__cvt+0x42>
 8003322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003326:	d100      	bne.n	800332a <__cvt+0x3e>
 8003328:	3601      	adds	r6, #1
 800332a:	2102      	movs	r1, #2
 800332c:	e000      	b.n	8003330 <__cvt+0x44>
 800332e:	2103      	movs	r1, #3
 8003330:	ab03      	add	r3, sp, #12
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	ab02      	add	r3, sp, #8
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	ec45 4b10 	vmov	d0, r4, r5
 800333c:	4653      	mov	r3, sl
 800333e:	4632      	mov	r2, r6
 8003340:	f001 f846 	bl	80043d0 <_dtoa_r>
 8003344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003348:	4607      	mov	r7, r0
 800334a:	d102      	bne.n	8003352 <__cvt+0x66>
 800334c:	f019 0f01 	tst.w	r9, #1
 8003350:	d022      	beq.n	8003398 <__cvt+0xac>
 8003352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003356:	eb07 0906 	add.w	r9, r7, r6
 800335a:	d110      	bne.n	800337e <__cvt+0x92>
 800335c:	783b      	ldrb	r3, [r7, #0]
 800335e:	2b30      	cmp	r3, #48	; 0x30
 8003360:	d10a      	bne.n	8003378 <__cvt+0x8c>
 8003362:	2200      	movs	r2, #0
 8003364:	2300      	movs	r3, #0
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	f7fd fd55 	bl	8000e18 <__aeabi_dcmpeq>
 800336e:	b918      	cbnz	r0, 8003378 <__cvt+0x8c>
 8003370:	f1c6 0601 	rsb	r6, r6, #1
 8003374:	f8ca 6000 	str.w	r6, [sl]
 8003378:	f8da 3000 	ldr.w	r3, [sl]
 800337c:	4499      	add	r9, r3
 800337e:	2200      	movs	r2, #0
 8003380:	2300      	movs	r3, #0
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fd fd47 	bl	8000e18 <__aeabi_dcmpeq>
 800338a:	b108      	cbz	r0, 8003390 <__cvt+0xa4>
 800338c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003390:	2230      	movs	r2, #48	; 0x30
 8003392:	9b03      	ldr	r3, [sp, #12]
 8003394:	454b      	cmp	r3, r9
 8003396:	d307      	bcc.n	80033a8 <__cvt+0xbc>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800339c:	1bdb      	subs	r3, r3, r7
 800339e:	4638      	mov	r0, r7
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	b004      	add	sp, #16
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a8:	1c59      	adds	r1, r3, #1
 80033aa:	9103      	str	r1, [sp, #12]
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e7f0      	b.n	8003392 <__cvt+0xa6>

080033b0 <__exponent>:
 80033b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b2:	4603      	mov	r3, r0
 80033b4:	2900      	cmp	r1, #0
 80033b6:	bfb8      	it	lt
 80033b8:	4249      	neglt	r1, r1
 80033ba:	f803 2b02 	strb.w	r2, [r3], #2
 80033be:	bfb4      	ite	lt
 80033c0:	222d      	movlt	r2, #45	; 0x2d
 80033c2:	222b      	movge	r2, #43	; 0x2b
 80033c4:	2909      	cmp	r1, #9
 80033c6:	7042      	strb	r2, [r0, #1]
 80033c8:	dd2a      	ble.n	8003420 <__exponent+0x70>
 80033ca:	f10d 0407 	add.w	r4, sp, #7
 80033ce:	46a4      	mov	ip, r4
 80033d0:	270a      	movs	r7, #10
 80033d2:	46a6      	mov	lr, r4
 80033d4:	460a      	mov	r2, r1
 80033d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80033da:	fb07 1516 	mls	r5, r7, r6, r1
 80033de:	3530      	adds	r5, #48	; 0x30
 80033e0:	2a63      	cmp	r2, #99	; 0x63
 80033e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80033e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80033ea:	4631      	mov	r1, r6
 80033ec:	dcf1      	bgt.n	80033d2 <__exponent+0x22>
 80033ee:	3130      	adds	r1, #48	; 0x30
 80033f0:	f1ae 0502 	sub.w	r5, lr, #2
 80033f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80033f8:	1c44      	adds	r4, r0, #1
 80033fa:	4629      	mov	r1, r5
 80033fc:	4561      	cmp	r1, ip
 80033fe:	d30a      	bcc.n	8003416 <__exponent+0x66>
 8003400:	f10d 0209 	add.w	r2, sp, #9
 8003404:	eba2 020e 	sub.w	r2, r2, lr
 8003408:	4565      	cmp	r5, ip
 800340a:	bf88      	it	hi
 800340c:	2200      	movhi	r2, #0
 800340e:	4413      	add	r3, r2
 8003410:	1a18      	subs	r0, r3, r0
 8003412:	b003      	add	sp, #12
 8003414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800341a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800341e:	e7ed      	b.n	80033fc <__exponent+0x4c>
 8003420:	2330      	movs	r3, #48	; 0x30
 8003422:	3130      	adds	r1, #48	; 0x30
 8003424:	7083      	strb	r3, [r0, #2]
 8003426:	70c1      	strb	r1, [r0, #3]
 8003428:	1d03      	adds	r3, r0, #4
 800342a:	e7f1      	b.n	8003410 <__exponent+0x60>

0800342c <_printf_float>:
 800342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003430:	ed2d 8b02 	vpush	{d8}
 8003434:	b08d      	sub	sp, #52	; 0x34
 8003436:	460c      	mov	r4, r1
 8003438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800343c:	4616      	mov	r6, r2
 800343e:	461f      	mov	r7, r3
 8003440:	4605      	mov	r5, r0
 8003442:	f001 ff7d 	bl	8005340 <_localeconv_r>
 8003446:	f8d0 a000 	ldr.w	sl, [r0]
 800344a:	4650      	mov	r0, sl
 800344c:	f7fd f864 	bl	8000518 <strlen>
 8003450:	2300      	movs	r3, #0
 8003452:	930a      	str	r3, [sp, #40]	; 0x28
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	9305      	str	r3, [sp, #20]
 8003458:	f8d8 3000 	ldr.w	r3, [r8]
 800345c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003460:	3307      	adds	r3, #7
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	f103 0208 	add.w	r2, r3, #8
 800346a:	f8c8 2000 	str.w	r2, [r8]
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800347a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800347e:	9307      	str	r3, [sp, #28]
 8003480:	f8cd 8018 	str.w	r8, [sp, #24]
 8003484:	ee08 0a10 	vmov	s16, r0
 8003488:	4b9f      	ldr	r3, [pc, #636]	; (8003708 <_printf_float+0x2dc>)
 800348a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800348e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003492:	f7fd fcf3 	bl	8000e7c <__aeabi_dcmpun>
 8003496:	bb88      	cbnz	r0, 80034fc <_printf_float+0xd0>
 8003498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800349c:	4b9a      	ldr	r3, [pc, #616]	; (8003708 <_printf_float+0x2dc>)
 800349e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a2:	f7fd fccd 	bl	8000e40 <__aeabi_dcmple>
 80034a6:	bb48      	cbnz	r0, 80034fc <_printf_float+0xd0>
 80034a8:	2200      	movs	r2, #0
 80034aa:	2300      	movs	r3, #0
 80034ac:	4640      	mov	r0, r8
 80034ae:	4649      	mov	r1, r9
 80034b0:	f7fd fcbc 	bl	8000e2c <__aeabi_dcmplt>
 80034b4:	b110      	cbz	r0, 80034bc <_printf_float+0x90>
 80034b6:	232d      	movs	r3, #45	; 0x2d
 80034b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034bc:	4b93      	ldr	r3, [pc, #588]	; (800370c <_printf_float+0x2e0>)
 80034be:	4894      	ldr	r0, [pc, #592]	; (8003710 <_printf_float+0x2e4>)
 80034c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80034c4:	bf94      	ite	ls
 80034c6:	4698      	movls	r8, r3
 80034c8:	4680      	movhi	r8, r0
 80034ca:	2303      	movs	r3, #3
 80034cc:	6123      	str	r3, [r4, #16]
 80034ce:	9b05      	ldr	r3, [sp, #20]
 80034d0:	f023 0204 	bic.w	r2, r3, #4
 80034d4:	6022      	str	r2, [r4, #0]
 80034d6:	f04f 0900 	mov.w	r9, #0
 80034da:	9700      	str	r7, [sp, #0]
 80034dc:	4633      	mov	r3, r6
 80034de:	aa0b      	add	r2, sp, #44	; 0x2c
 80034e0:	4621      	mov	r1, r4
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f9d8 	bl	8003898 <_printf_common>
 80034e8:	3001      	adds	r0, #1
 80034ea:	f040 8090 	bne.w	800360e <_printf_float+0x1e2>
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f2:	b00d      	add	sp, #52	; 0x34
 80034f4:	ecbd 8b02 	vpop	{d8}
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	4640      	mov	r0, r8
 8003502:	4649      	mov	r1, r9
 8003504:	f7fd fcba 	bl	8000e7c <__aeabi_dcmpun>
 8003508:	b140      	cbz	r0, 800351c <_printf_float+0xf0>
 800350a:	464b      	mov	r3, r9
 800350c:	2b00      	cmp	r3, #0
 800350e:	bfbc      	itt	lt
 8003510:	232d      	movlt	r3, #45	; 0x2d
 8003512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003516:	487f      	ldr	r0, [pc, #508]	; (8003714 <_printf_float+0x2e8>)
 8003518:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <_printf_float+0x2ec>)
 800351a:	e7d1      	b.n	80034c0 <_printf_float+0x94>
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003522:	9206      	str	r2, [sp, #24]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	d13f      	bne.n	80035a8 <_printf_float+0x17c>
 8003528:	2306      	movs	r3, #6
 800352a:	6063      	str	r3, [r4, #4]
 800352c:	9b05      	ldr	r3, [sp, #20]
 800352e:	6861      	ldr	r1, [r4, #4]
 8003530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	ab0a      	add	r3, sp, #40	; 0x28
 800353a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800353e:	ab09      	add	r3, sp, #36	; 0x24
 8003540:	ec49 8b10 	vmov	d0, r8, r9
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800354c:	4628      	mov	r0, r5
 800354e:	f7ff fecd 	bl	80032ec <__cvt>
 8003552:	9b06      	ldr	r3, [sp, #24]
 8003554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003556:	2b47      	cmp	r3, #71	; 0x47
 8003558:	4680      	mov	r8, r0
 800355a:	d108      	bne.n	800356e <_printf_float+0x142>
 800355c:	1cc8      	adds	r0, r1, #3
 800355e:	db02      	blt.n	8003566 <_printf_float+0x13a>
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	4299      	cmp	r1, r3
 8003564:	dd41      	ble.n	80035ea <_printf_float+0x1be>
 8003566:	f1ab 0b02 	sub.w	fp, fp, #2
 800356a:	fa5f fb8b 	uxtb.w	fp, fp
 800356e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003572:	d820      	bhi.n	80035b6 <_printf_float+0x18a>
 8003574:	3901      	subs	r1, #1
 8003576:	465a      	mov	r2, fp
 8003578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800357c:	9109      	str	r1, [sp, #36]	; 0x24
 800357e:	f7ff ff17 	bl	80033b0 <__exponent>
 8003582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003584:	1813      	adds	r3, r2, r0
 8003586:	2a01      	cmp	r2, #1
 8003588:	4681      	mov	r9, r0
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	dc02      	bgt.n	8003594 <_printf_float+0x168>
 800358e:	6822      	ldr	r2, [r4, #0]
 8003590:	07d2      	lsls	r2, r2, #31
 8003592:	d501      	bpl.n	8003598 <_printf_float+0x16c>
 8003594:	3301      	adds	r3, #1
 8003596:	6123      	str	r3, [r4, #16]
 8003598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800359c:	2b00      	cmp	r3, #0
 800359e:	d09c      	beq.n	80034da <_printf_float+0xae>
 80035a0:	232d      	movs	r3, #45	; 0x2d
 80035a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a6:	e798      	b.n	80034da <_printf_float+0xae>
 80035a8:	9a06      	ldr	r2, [sp, #24]
 80035aa:	2a47      	cmp	r2, #71	; 0x47
 80035ac:	d1be      	bne.n	800352c <_printf_float+0x100>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1bc      	bne.n	800352c <_printf_float+0x100>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e7b9      	b.n	800352a <_printf_float+0xfe>
 80035b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80035ba:	d118      	bne.n	80035ee <_printf_float+0x1c2>
 80035bc:	2900      	cmp	r1, #0
 80035be:	6863      	ldr	r3, [r4, #4]
 80035c0:	dd0b      	ble.n	80035da <_printf_float+0x1ae>
 80035c2:	6121      	str	r1, [r4, #16]
 80035c4:	b913      	cbnz	r3, 80035cc <_printf_float+0x1a0>
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	07d0      	lsls	r0, r2, #31
 80035ca:	d502      	bpl.n	80035d2 <_printf_float+0x1a6>
 80035cc:	3301      	adds	r3, #1
 80035ce:	440b      	add	r3, r1
 80035d0:	6123      	str	r3, [r4, #16]
 80035d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80035d4:	f04f 0900 	mov.w	r9, #0
 80035d8:	e7de      	b.n	8003598 <_printf_float+0x16c>
 80035da:	b913      	cbnz	r3, 80035e2 <_printf_float+0x1b6>
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	07d2      	lsls	r2, r2, #31
 80035e0:	d501      	bpl.n	80035e6 <_printf_float+0x1ba>
 80035e2:	3302      	adds	r3, #2
 80035e4:	e7f4      	b.n	80035d0 <_printf_float+0x1a4>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e7f2      	b.n	80035d0 <_printf_float+0x1a4>
 80035ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80035ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035f0:	4299      	cmp	r1, r3
 80035f2:	db05      	blt.n	8003600 <_printf_float+0x1d4>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	6121      	str	r1, [r4, #16]
 80035f8:	07d8      	lsls	r0, r3, #31
 80035fa:	d5ea      	bpl.n	80035d2 <_printf_float+0x1a6>
 80035fc:	1c4b      	adds	r3, r1, #1
 80035fe:	e7e7      	b.n	80035d0 <_printf_float+0x1a4>
 8003600:	2900      	cmp	r1, #0
 8003602:	bfd4      	ite	le
 8003604:	f1c1 0202 	rsble	r2, r1, #2
 8003608:	2201      	movgt	r2, #1
 800360a:	4413      	add	r3, r2
 800360c:	e7e0      	b.n	80035d0 <_printf_float+0x1a4>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	055a      	lsls	r2, r3, #21
 8003612:	d407      	bmi.n	8003624 <_printf_float+0x1f8>
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	4642      	mov	r2, r8
 8003618:	4631      	mov	r1, r6
 800361a:	4628      	mov	r0, r5
 800361c:	47b8      	blx	r7
 800361e:	3001      	adds	r0, #1
 8003620:	d12c      	bne.n	800367c <_printf_float+0x250>
 8003622:	e764      	b.n	80034ee <_printf_float+0xc2>
 8003624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003628:	f240 80e0 	bls.w	80037ec <_printf_float+0x3c0>
 800362c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003630:	2200      	movs	r2, #0
 8003632:	2300      	movs	r3, #0
 8003634:	f7fd fbf0 	bl	8000e18 <__aeabi_dcmpeq>
 8003638:	2800      	cmp	r0, #0
 800363a:	d034      	beq.n	80036a6 <_printf_float+0x27a>
 800363c:	4a37      	ldr	r2, [pc, #220]	; (800371c <_printf_float+0x2f0>)
 800363e:	2301      	movs	r3, #1
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	f43f af51 	beq.w	80034ee <_printf_float+0xc2>
 800364c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003650:	429a      	cmp	r2, r3
 8003652:	db02      	blt.n	800365a <_printf_float+0x22e>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07d8      	lsls	r0, r3, #31
 8003658:	d510      	bpl.n	800367c <_printf_float+0x250>
 800365a:	ee18 3a10 	vmov	r3, s16
 800365e:	4652      	mov	r2, sl
 8003660:	4631      	mov	r1, r6
 8003662:	4628      	mov	r0, r5
 8003664:	47b8      	blx	r7
 8003666:	3001      	adds	r0, #1
 8003668:	f43f af41 	beq.w	80034ee <_printf_float+0xc2>
 800366c:	f04f 0800 	mov.w	r8, #0
 8003670:	f104 091a 	add.w	r9, r4, #26
 8003674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	4543      	cmp	r3, r8
 800367a:	dc09      	bgt.n	8003690 <_printf_float+0x264>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	079b      	lsls	r3, r3, #30
 8003680:	f100 8105 	bmi.w	800388e <_printf_float+0x462>
 8003684:	68e0      	ldr	r0, [r4, #12]
 8003686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003688:	4298      	cmp	r0, r3
 800368a:	bfb8      	it	lt
 800368c:	4618      	movlt	r0, r3
 800368e:	e730      	b.n	80034f2 <_printf_float+0xc6>
 8003690:	2301      	movs	r3, #1
 8003692:	464a      	mov	r2, r9
 8003694:	4631      	mov	r1, r6
 8003696:	4628      	mov	r0, r5
 8003698:	47b8      	blx	r7
 800369a:	3001      	adds	r0, #1
 800369c:	f43f af27 	beq.w	80034ee <_printf_float+0xc2>
 80036a0:	f108 0801 	add.w	r8, r8, #1
 80036a4:	e7e6      	b.n	8003674 <_printf_float+0x248>
 80036a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dc39      	bgt.n	8003720 <_printf_float+0x2f4>
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <_printf_float+0x2f0>)
 80036ae:	2301      	movs	r3, #1
 80036b0:	4631      	mov	r1, r6
 80036b2:	4628      	mov	r0, r5
 80036b4:	47b8      	blx	r7
 80036b6:	3001      	adds	r0, #1
 80036b8:	f43f af19 	beq.w	80034ee <_printf_float+0xc2>
 80036bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d102      	bne.n	80036ca <_printf_float+0x29e>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	07d9      	lsls	r1, r3, #31
 80036c8:	d5d8      	bpl.n	800367c <_printf_float+0x250>
 80036ca:	ee18 3a10 	vmov	r3, s16
 80036ce:	4652      	mov	r2, sl
 80036d0:	4631      	mov	r1, r6
 80036d2:	4628      	mov	r0, r5
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	f43f af09 	beq.w	80034ee <_printf_float+0xc2>
 80036dc:	f04f 0900 	mov.w	r9, #0
 80036e0:	f104 0a1a 	add.w	sl, r4, #26
 80036e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e6:	425b      	negs	r3, r3
 80036e8:	454b      	cmp	r3, r9
 80036ea:	dc01      	bgt.n	80036f0 <_printf_float+0x2c4>
 80036ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ee:	e792      	b.n	8003616 <_printf_float+0x1ea>
 80036f0:	2301      	movs	r3, #1
 80036f2:	4652      	mov	r2, sl
 80036f4:	4631      	mov	r1, r6
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b8      	blx	r7
 80036fa:	3001      	adds	r0, #1
 80036fc:	f43f aef7 	beq.w	80034ee <_printf_float+0xc2>
 8003700:	f109 0901 	add.w	r9, r9, #1
 8003704:	e7ee      	b.n	80036e4 <_printf_float+0x2b8>
 8003706:	bf00      	nop
 8003708:	7fefffff 	.word	0x7fefffff
 800370c:	0801268c 	.word	0x0801268c
 8003710:	08012690 	.word	0x08012690
 8003714:	08012698 	.word	0x08012698
 8003718:	08012694 	.word	0x08012694
 800371c:	0800859b 	.word	0x0800859b
 8003720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003724:	429a      	cmp	r2, r3
 8003726:	bfa8      	it	ge
 8003728:	461a      	movge	r2, r3
 800372a:	2a00      	cmp	r2, #0
 800372c:	4691      	mov	r9, r2
 800372e:	dc37      	bgt.n	80037a0 <_printf_float+0x374>
 8003730:	f04f 0b00 	mov.w	fp, #0
 8003734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003738:	f104 021a 	add.w	r2, r4, #26
 800373c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800373e:	9305      	str	r3, [sp, #20]
 8003740:	eba3 0309 	sub.w	r3, r3, r9
 8003744:	455b      	cmp	r3, fp
 8003746:	dc33      	bgt.n	80037b0 <_printf_float+0x384>
 8003748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800374c:	429a      	cmp	r2, r3
 800374e:	db3b      	blt.n	80037c8 <_printf_float+0x39c>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	07da      	lsls	r2, r3, #31
 8003754:	d438      	bmi.n	80037c8 <_printf_float+0x39c>
 8003756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003758:	9a05      	ldr	r2, [sp, #20]
 800375a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800375c:	1a9a      	subs	r2, r3, r2
 800375e:	eba3 0901 	sub.w	r9, r3, r1
 8003762:	4591      	cmp	r9, r2
 8003764:	bfa8      	it	ge
 8003766:	4691      	movge	r9, r2
 8003768:	f1b9 0f00 	cmp.w	r9, #0
 800376c:	dc35      	bgt.n	80037da <_printf_float+0x3ae>
 800376e:	f04f 0800 	mov.w	r8, #0
 8003772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003776:	f104 0a1a 	add.w	sl, r4, #26
 800377a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	eba3 0309 	sub.w	r3, r3, r9
 8003784:	4543      	cmp	r3, r8
 8003786:	f77f af79 	ble.w	800367c <_printf_float+0x250>
 800378a:	2301      	movs	r3, #1
 800378c:	4652      	mov	r2, sl
 800378e:	4631      	mov	r1, r6
 8003790:	4628      	mov	r0, r5
 8003792:	47b8      	blx	r7
 8003794:	3001      	adds	r0, #1
 8003796:	f43f aeaa 	beq.w	80034ee <_printf_float+0xc2>
 800379a:	f108 0801 	add.w	r8, r8, #1
 800379e:	e7ec      	b.n	800377a <_printf_float+0x34e>
 80037a0:	4613      	mov	r3, r2
 80037a2:	4631      	mov	r1, r6
 80037a4:	4642      	mov	r2, r8
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	d1c0      	bne.n	8003730 <_printf_float+0x304>
 80037ae:	e69e      	b.n	80034ee <_printf_float+0xc2>
 80037b0:	2301      	movs	r3, #1
 80037b2:	4631      	mov	r1, r6
 80037b4:	4628      	mov	r0, r5
 80037b6:	9205      	str	r2, [sp, #20]
 80037b8:	47b8      	blx	r7
 80037ba:	3001      	adds	r0, #1
 80037bc:	f43f ae97 	beq.w	80034ee <_printf_float+0xc2>
 80037c0:	9a05      	ldr	r2, [sp, #20]
 80037c2:	f10b 0b01 	add.w	fp, fp, #1
 80037c6:	e7b9      	b.n	800373c <_printf_float+0x310>
 80037c8:	ee18 3a10 	vmov	r3, s16
 80037cc:	4652      	mov	r2, sl
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b8      	blx	r7
 80037d4:	3001      	adds	r0, #1
 80037d6:	d1be      	bne.n	8003756 <_printf_float+0x32a>
 80037d8:	e689      	b.n	80034ee <_printf_float+0xc2>
 80037da:	9a05      	ldr	r2, [sp, #20]
 80037dc:	464b      	mov	r3, r9
 80037de:	4442      	add	r2, r8
 80037e0:	4631      	mov	r1, r6
 80037e2:	4628      	mov	r0, r5
 80037e4:	47b8      	blx	r7
 80037e6:	3001      	adds	r0, #1
 80037e8:	d1c1      	bne.n	800376e <_printf_float+0x342>
 80037ea:	e680      	b.n	80034ee <_printf_float+0xc2>
 80037ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ee:	2a01      	cmp	r2, #1
 80037f0:	dc01      	bgt.n	80037f6 <_printf_float+0x3ca>
 80037f2:	07db      	lsls	r3, r3, #31
 80037f4:	d538      	bpl.n	8003868 <_printf_float+0x43c>
 80037f6:	2301      	movs	r3, #1
 80037f8:	4642      	mov	r2, r8
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	47b8      	blx	r7
 8003800:	3001      	adds	r0, #1
 8003802:	f43f ae74 	beq.w	80034ee <_printf_float+0xc2>
 8003806:	ee18 3a10 	vmov	r3, s16
 800380a:	4652      	mov	r2, sl
 800380c:	4631      	mov	r1, r6
 800380e:	4628      	mov	r0, r5
 8003810:	47b8      	blx	r7
 8003812:	3001      	adds	r0, #1
 8003814:	f43f ae6b 	beq.w	80034ee <_printf_float+0xc2>
 8003818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800381c:	2200      	movs	r2, #0
 800381e:	2300      	movs	r3, #0
 8003820:	f7fd fafa 	bl	8000e18 <__aeabi_dcmpeq>
 8003824:	b9d8      	cbnz	r0, 800385e <_printf_float+0x432>
 8003826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003828:	f108 0201 	add.w	r2, r8, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	4631      	mov	r1, r6
 8003830:	4628      	mov	r0, r5
 8003832:	47b8      	blx	r7
 8003834:	3001      	adds	r0, #1
 8003836:	d10e      	bne.n	8003856 <_printf_float+0x42a>
 8003838:	e659      	b.n	80034ee <_printf_float+0xc2>
 800383a:	2301      	movs	r3, #1
 800383c:	4652      	mov	r2, sl
 800383e:	4631      	mov	r1, r6
 8003840:	4628      	mov	r0, r5
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	f43f ae52 	beq.w	80034ee <_printf_float+0xc2>
 800384a:	f108 0801 	add.w	r8, r8, #1
 800384e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	4543      	cmp	r3, r8
 8003854:	dcf1      	bgt.n	800383a <_printf_float+0x40e>
 8003856:	464b      	mov	r3, r9
 8003858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800385c:	e6dc      	b.n	8003618 <_printf_float+0x1ec>
 800385e:	f04f 0800 	mov.w	r8, #0
 8003862:	f104 0a1a 	add.w	sl, r4, #26
 8003866:	e7f2      	b.n	800384e <_printf_float+0x422>
 8003868:	2301      	movs	r3, #1
 800386a:	4642      	mov	r2, r8
 800386c:	e7df      	b.n	800382e <_printf_float+0x402>
 800386e:	2301      	movs	r3, #1
 8003870:	464a      	mov	r2, r9
 8003872:	4631      	mov	r1, r6
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	f43f ae38 	beq.w	80034ee <_printf_float+0xc2>
 800387e:	f108 0801 	add.w	r8, r8, #1
 8003882:	68e3      	ldr	r3, [r4, #12]
 8003884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003886:	1a5b      	subs	r3, r3, r1
 8003888:	4543      	cmp	r3, r8
 800388a:	dcf0      	bgt.n	800386e <_printf_float+0x442>
 800388c:	e6fa      	b.n	8003684 <_printf_float+0x258>
 800388e:	f04f 0800 	mov.w	r8, #0
 8003892:	f104 0919 	add.w	r9, r4, #25
 8003896:	e7f4      	b.n	8003882 <_printf_float+0x456>

08003898 <_printf_common>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	4616      	mov	r6, r2
 800389e:	4699      	mov	r9, r3
 80038a0:	688a      	ldr	r2, [r1, #8]
 80038a2:	690b      	ldr	r3, [r1, #16]
 80038a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfb8      	it	lt
 80038ac:	4613      	movlt	r3, r2
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b4:	4607      	mov	r7, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b10a      	cbz	r2, 80038be <_printf_common+0x26>
 80038ba:	3301      	adds	r3, #1
 80038bc:	6033      	str	r3, [r6, #0]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	6833      	ldrmi	r3, [r6, #0]
 80038c6:	3302      	addmi	r3, #2
 80038c8:	6033      	strmi	r3, [r6, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	f015 0506 	ands.w	r5, r5, #6
 80038d0:	d106      	bne.n	80038e0 <_printf_common+0x48>
 80038d2:	f104 0a19 	add.w	sl, r4, #25
 80038d6:	68e3      	ldr	r3, [r4, #12]
 80038d8:	6832      	ldr	r2, [r6, #0]
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	42ab      	cmp	r3, r5
 80038de:	dc26      	bgt.n	800392e <_printf_common+0x96>
 80038e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e4:	1e13      	subs	r3, r2, #0
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	bf18      	it	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	0692      	lsls	r2, r2, #26
 80038ee:	d42b      	bmi.n	8003948 <_printf_common+0xb0>
 80038f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f4:	4649      	mov	r1, r9
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d01e      	beq.n	800393c <_printf_common+0xa4>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	68e5      	ldr	r5, [r4, #12]
 8003902:	6832      	ldr	r2, [r6, #0]
 8003904:	f003 0306 	and.w	r3, r3, #6
 8003908:	2b04      	cmp	r3, #4
 800390a:	bf08      	it	eq
 800390c:	1aad      	subeq	r5, r5, r2
 800390e:	68a3      	ldr	r3, [r4, #8]
 8003910:	6922      	ldr	r2, [r4, #16]
 8003912:	bf0c      	ite	eq
 8003914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003918:	2500      	movne	r5, #0
 800391a:	4293      	cmp	r3, r2
 800391c:	bfc4      	itt	gt
 800391e:	1a9b      	subgt	r3, r3, r2
 8003920:	18ed      	addgt	r5, r5, r3
 8003922:	2600      	movs	r6, #0
 8003924:	341a      	adds	r4, #26
 8003926:	42b5      	cmp	r5, r6
 8003928:	d11a      	bne.n	8003960 <_printf_common+0xc8>
 800392a:	2000      	movs	r0, #0
 800392c:	e008      	b.n	8003940 <_printf_common+0xa8>
 800392e:	2301      	movs	r3, #1
 8003930:	4652      	mov	r2, sl
 8003932:	4649      	mov	r1, r9
 8003934:	4638      	mov	r0, r7
 8003936:	47c0      	blx	r8
 8003938:	3001      	adds	r0, #1
 800393a:	d103      	bne.n	8003944 <_printf_common+0xac>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	3501      	adds	r5, #1
 8003946:	e7c6      	b.n	80038d6 <_printf_common+0x3e>
 8003948:	18e1      	adds	r1, r4, r3
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	2030      	movs	r0, #48	; 0x30
 800394e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003952:	4422      	add	r2, r4
 8003954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800395c:	3302      	adds	r3, #2
 800395e:	e7c7      	b.n	80038f0 <_printf_common+0x58>
 8003960:	2301      	movs	r3, #1
 8003962:	4622      	mov	r2, r4
 8003964:	4649      	mov	r1, r9
 8003966:	4638      	mov	r0, r7
 8003968:	47c0      	blx	r8
 800396a:	3001      	adds	r0, #1
 800396c:	d0e6      	beq.n	800393c <_printf_common+0xa4>
 800396e:	3601      	adds	r6, #1
 8003970:	e7d9      	b.n	8003926 <_printf_common+0x8e>
	...

08003974 <_printf_i>:
 8003974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003978:	7e0f      	ldrb	r7, [r1, #24]
 800397a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800397c:	2f78      	cmp	r7, #120	; 0x78
 800397e:	4691      	mov	r9, r2
 8003980:	4680      	mov	r8, r0
 8003982:	460c      	mov	r4, r1
 8003984:	469a      	mov	sl, r3
 8003986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800398a:	d807      	bhi.n	800399c <_printf_i+0x28>
 800398c:	2f62      	cmp	r7, #98	; 0x62
 800398e:	d80a      	bhi.n	80039a6 <_printf_i+0x32>
 8003990:	2f00      	cmp	r7, #0
 8003992:	f000 80d8 	beq.w	8003b46 <_printf_i+0x1d2>
 8003996:	2f58      	cmp	r7, #88	; 0x58
 8003998:	f000 80a3 	beq.w	8003ae2 <_printf_i+0x16e>
 800399c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a4:	e03a      	b.n	8003a1c <_printf_i+0xa8>
 80039a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039aa:	2b15      	cmp	r3, #21
 80039ac:	d8f6      	bhi.n	800399c <_printf_i+0x28>
 80039ae:	a101      	add	r1, pc, #4	; (adr r1, 80039b4 <_printf_i+0x40>)
 80039b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a21 	.word	0x08003a21
 80039bc:	0800399d 	.word	0x0800399d
 80039c0:	0800399d 	.word	0x0800399d
 80039c4:	0800399d 	.word	0x0800399d
 80039c8:	0800399d 	.word	0x0800399d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800399d 	.word	0x0800399d
 80039d4:	0800399d 	.word	0x0800399d
 80039d8:	0800399d 	.word	0x0800399d
 80039dc:	0800399d 	.word	0x0800399d
 80039e0:	08003b2d 	.word	0x08003b2d
 80039e4:	08003a51 	.word	0x08003a51
 80039e8:	08003b0f 	.word	0x08003b0f
 80039ec:	0800399d 	.word	0x0800399d
 80039f0:	0800399d 	.word	0x0800399d
 80039f4:	08003b4f 	.word	0x08003b4f
 80039f8:	0800399d 	.word	0x0800399d
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	0800399d 	.word	0x0800399d
 8003a04:	0800399d 	.word	0x0800399d
 8003a08:	08003b17 	.word	0x08003b17
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	602a      	str	r2, [r5, #0]
 8003a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0a3      	b.n	8003b68 <_printf_i+0x1f4>
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	6829      	ldr	r1, [r5, #0]
 8003a24:	0606      	lsls	r6, r0, #24
 8003a26:	f101 0304 	add.w	r3, r1, #4
 8003a2a:	d50a      	bpl.n	8003a42 <_printf_i+0xce>
 8003a2c:	680e      	ldr	r6, [r1, #0]
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	2e00      	cmp	r6, #0
 8003a32:	da03      	bge.n	8003a3c <_printf_i+0xc8>
 8003a34:	232d      	movs	r3, #45	; 0x2d
 8003a36:	4276      	negs	r6, r6
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a3c:	485e      	ldr	r0, [pc, #376]	; (8003bb8 <_printf_i+0x244>)
 8003a3e:	230a      	movs	r3, #10
 8003a40:	e019      	b.n	8003a76 <_printf_i+0x102>
 8003a42:	680e      	ldr	r6, [r1, #0]
 8003a44:	602b      	str	r3, [r5, #0]
 8003a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a4a:	bf18      	it	ne
 8003a4c:	b236      	sxthne	r6, r6
 8003a4e:	e7ef      	b.n	8003a30 <_printf_i+0xbc>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	1d19      	adds	r1, r3, #4
 8003a56:	6029      	str	r1, [r5, #0]
 8003a58:	0601      	lsls	r1, r0, #24
 8003a5a:	d501      	bpl.n	8003a60 <_printf_i+0xec>
 8003a5c:	681e      	ldr	r6, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <_printf_i+0xf2>
 8003a60:	0646      	lsls	r6, r0, #25
 8003a62:	d5fb      	bpl.n	8003a5c <_printf_i+0xe8>
 8003a64:	881e      	ldrh	r6, [r3, #0]
 8003a66:	4854      	ldr	r0, [pc, #336]	; (8003bb8 <_printf_i+0x244>)
 8003a68:	2f6f      	cmp	r7, #111	; 0x6f
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2308      	moveq	r3, #8
 8003a6e:	230a      	movne	r3, #10
 8003a70:	2100      	movs	r1, #0
 8003a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a76:	6865      	ldr	r5, [r4, #4]
 8003a78:	60a5      	str	r5, [r4, #8]
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	bfa2      	ittt	ge
 8003a7e:	6821      	ldrge	r1, [r4, #0]
 8003a80:	f021 0104 	bicge.w	r1, r1, #4
 8003a84:	6021      	strge	r1, [r4, #0]
 8003a86:	b90e      	cbnz	r6, 8003a8c <_printf_i+0x118>
 8003a88:	2d00      	cmp	r5, #0
 8003a8a:	d04d      	beq.n	8003b28 <_printf_i+0x1b4>
 8003a8c:	4615      	mov	r5, r2
 8003a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a92:	fb03 6711 	mls	r7, r3, r1, r6
 8003a96:	5dc7      	ldrb	r7, [r0, r7]
 8003a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a9c:	4637      	mov	r7, r6
 8003a9e:	42bb      	cmp	r3, r7
 8003aa0:	460e      	mov	r6, r1
 8003aa2:	d9f4      	bls.n	8003a8e <_printf_i+0x11a>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d10b      	bne.n	8003ac0 <_printf_i+0x14c>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	07de      	lsls	r6, r3, #31
 8003aac:	d508      	bpl.n	8003ac0 <_printf_i+0x14c>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	6861      	ldr	r1, [r4, #4]
 8003ab2:	4299      	cmp	r1, r3
 8003ab4:	bfde      	ittt	le
 8003ab6:	2330      	movle	r3, #48	; 0x30
 8003ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003abc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ac0:	1b52      	subs	r2, r2, r5
 8003ac2:	6122      	str	r2, [r4, #16]
 8003ac4:	f8cd a000 	str.w	sl, [sp]
 8003ac8:	464b      	mov	r3, r9
 8003aca:	aa03      	add	r2, sp, #12
 8003acc:	4621      	mov	r1, r4
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7ff fee2 	bl	8003898 <_printf_common>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d14c      	bne.n	8003b72 <_printf_i+0x1fe>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003adc:	b004      	add	sp, #16
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae2:	4835      	ldr	r0, [pc, #212]	; (8003bb8 <_printf_i+0x244>)
 8003ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ae8:	6829      	ldr	r1, [r5, #0]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8003af0:	6029      	str	r1, [r5, #0]
 8003af2:	061d      	lsls	r5, r3, #24
 8003af4:	d514      	bpl.n	8003b20 <_printf_i+0x1ac>
 8003af6:	07df      	lsls	r7, r3, #31
 8003af8:	bf44      	itt	mi
 8003afa:	f043 0320 	orrmi.w	r3, r3, #32
 8003afe:	6023      	strmi	r3, [r4, #0]
 8003b00:	b91e      	cbnz	r6, 8003b0a <_printf_i+0x196>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	f023 0320 	bic.w	r3, r3, #32
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	e7b0      	b.n	8003a70 <_printf_i+0xfc>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f043 0320 	orr.w	r3, r3, #32
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	2378      	movs	r3, #120	; 0x78
 8003b18:	4828      	ldr	r0, [pc, #160]	; (8003bbc <_printf_i+0x248>)
 8003b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b1e:	e7e3      	b.n	8003ae8 <_printf_i+0x174>
 8003b20:	0659      	lsls	r1, r3, #25
 8003b22:	bf48      	it	mi
 8003b24:	b2b6      	uxthmi	r6, r6
 8003b26:	e7e6      	b.n	8003af6 <_printf_i+0x182>
 8003b28:	4615      	mov	r5, r2
 8003b2a:	e7bb      	b.n	8003aa4 <_printf_i+0x130>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	6826      	ldr	r6, [r4, #0]
 8003b30:	6961      	ldr	r1, [r4, #20]
 8003b32:	1d18      	adds	r0, r3, #4
 8003b34:	6028      	str	r0, [r5, #0]
 8003b36:	0635      	lsls	r5, r6, #24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	d501      	bpl.n	8003b40 <_printf_i+0x1cc>
 8003b3c:	6019      	str	r1, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <_printf_i+0x1d2>
 8003b40:	0670      	lsls	r0, r6, #25
 8003b42:	d5fb      	bpl.n	8003b3c <_printf_i+0x1c8>
 8003b44:	8019      	strh	r1, [r3, #0]
 8003b46:	2300      	movs	r3, #0
 8003b48:	6123      	str	r3, [r4, #16]
 8003b4a:	4615      	mov	r5, r2
 8003b4c:	e7ba      	b.n	8003ac4 <_printf_i+0x150>
 8003b4e:	682b      	ldr	r3, [r5, #0]
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	602a      	str	r2, [r5, #0]
 8003b54:	681d      	ldr	r5, [r3, #0]
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f7fc fce8 	bl	8000530 <memchr>
 8003b60:	b108      	cbz	r0, 8003b66 <_printf_i+0x1f2>
 8003b62:	1b40      	subs	r0, r0, r5
 8003b64:	6060      	str	r0, [r4, #4]
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	6123      	str	r3, [r4, #16]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b70:	e7a8      	b.n	8003ac4 <_printf_i+0x150>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	462a      	mov	r2, r5
 8003b76:	4649      	mov	r1, r9
 8003b78:	4640      	mov	r0, r8
 8003b7a:	47d0      	blx	sl
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0ab      	beq.n	8003ad8 <_printf_i+0x164>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d413      	bmi.n	8003bae <_printf_i+0x23a>
 8003b86:	68e0      	ldr	r0, [r4, #12]
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	bfb8      	it	lt
 8003b8e:	4618      	movlt	r0, r3
 8003b90:	e7a4      	b.n	8003adc <_printf_i+0x168>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4632      	mov	r2, r6
 8003b96:	4649      	mov	r1, r9
 8003b98:	4640      	mov	r0, r8
 8003b9a:	47d0      	blx	sl
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d09b      	beq.n	8003ad8 <_printf_i+0x164>
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	9903      	ldr	r1, [sp, #12]
 8003ba6:	1a5b      	subs	r3, r3, r1
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dcf2      	bgt.n	8003b92 <_printf_i+0x21e>
 8003bac:	e7eb      	b.n	8003b86 <_printf_i+0x212>
 8003bae:	2500      	movs	r5, #0
 8003bb0:	f104 0619 	add.w	r6, r4, #25
 8003bb4:	e7f5      	b.n	8003ba2 <_printf_i+0x22e>
 8003bb6:	bf00      	nop
 8003bb8:	0801269c 	.word	0x0801269c
 8003bbc:	080126ad 	.word	0x080126ad

08003bc0 <iprintf>:
 8003bc0:	b40f      	push	{r0, r1, r2, r3}
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <iprintf+0x2c>)
 8003bc4:	b513      	push	{r0, r1, r4, lr}
 8003bc6:	681c      	ldr	r4, [r3, #0]
 8003bc8:	b124      	cbz	r4, 8003bd4 <iprintf+0x14>
 8003bca:	69a3      	ldr	r3, [r4, #24]
 8003bcc:	b913      	cbnz	r3, 8003bd4 <iprintf+0x14>
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f001 fb06 	bl	80051e0 <__sinit>
 8003bd4:	ab05      	add	r3, sp, #20
 8003bd6:	9a04      	ldr	r2, [sp, #16]
 8003bd8:	68a1      	ldr	r1, [r4, #8]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f002 fa03 	bl	8005fe8 <_vfiprintf_r>
 8003be2:	b002      	add	sp, #8
 8003be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be8:	b004      	add	sp, #16
 8003bea:	4770      	bx	lr
 8003bec:	200001b0 	.word	0x200001b0

08003bf0 <putchar>:
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <putchar+0x28>)
 8003bf2:	b513      	push	{r0, r1, r4, lr}
 8003bf4:	681c      	ldr	r4, [r3, #0]
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	b134      	cbz	r4, 8003c08 <putchar+0x18>
 8003bfa:	69a3      	ldr	r3, [r4, #24]
 8003bfc:	b923      	cbnz	r3, 8003c08 <putchar+0x18>
 8003bfe:	9001      	str	r0, [sp, #4]
 8003c00:	4620      	mov	r0, r4
 8003c02:	f001 faed 	bl	80051e0 <__sinit>
 8003c06:	9901      	ldr	r1, [sp, #4]
 8003c08:	68a2      	ldr	r2, [r4, #8]
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	b002      	add	sp, #8
 8003c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c12:	f002 bb19 	b.w	8006248 <_putc_r>
 8003c16:	bf00      	nop
 8003c18:	200001b0 	.word	0x200001b0

08003c1c <_puts_r>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	460e      	mov	r6, r1
 8003c20:	4605      	mov	r5, r0
 8003c22:	b118      	cbz	r0, 8003c2c <_puts_r+0x10>
 8003c24:	6983      	ldr	r3, [r0, #24]
 8003c26:	b90b      	cbnz	r3, 8003c2c <_puts_r+0x10>
 8003c28:	f001 fada 	bl	80051e0 <__sinit>
 8003c2c:	69ab      	ldr	r3, [r5, #24]
 8003c2e:	68ac      	ldr	r4, [r5, #8]
 8003c30:	b913      	cbnz	r3, 8003c38 <_puts_r+0x1c>
 8003c32:	4628      	mov	r0, r5
 8003c34:	f001 fad4 	bl	80051e0 <__sinit>
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <_puts_r+0xd0>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d120      	bne.n	8003c80 <_puts_r+0x64>
 8003c3e:	686c      	ldr	r4, [r5, #4]
 8003c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c42:	07db      	lsls	r3, r3, #31
 8003c44:	d405      	bmi.n	8003c52 <_puts_r+0x36>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	0598      	lsls	r0, r3, #22
 8003c4a:	d402      	bmi.n	8003c52 <_puts_r+0x36>
 8003c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c4e:	f001 fb7c 	bl	800534a <__retarget_lock_acquire_recursive>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	0719      	lsls	r1, r3, #28
 8003c56:	d51d      	bpl.n	8003c94 <_puts_r+0x78>
 8003c58:	6923      	ldr	r3, [r4, #16]
 8003c5a:	b1db      	cbz	r3, 8003c94 <_puts_r+0x78>
 8003c5c:	3e01      	subs	r6, #1
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60a3      	str	r3, [r4, #8]
 8003c68:	bb39      	cbnz	r1, 8003cba <_puts_r+0x9e>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da38      	bge.n	8003ce0 <_puts_r+0xc4>
 8003c6e:	4622      	mov	r2, r4
 8003c70:	210a      	movs	r1, #10
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 fa42 	bl	80040fc <__swbuf_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d011      	beq.n	8003ca0 <_puts_r+0x84>
 8003c7c:	250a      	movs	r5, #10
 8003c7e:	e011      	b.n	8003ca4 <_puts_r+0x88>
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <_puts_r+0xd4>)
 8003c82:	429c      	cmp	r4, r3
 8003c84:	d101      	bne.n	8003c8a <_puts_r+0x6e>
 8003c86:	68ac      	ldr	r4, [r5, #8]
 8003c88:	e7da      	b.n	8003c40 <_puts_r+0x24>
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <_puts_r+0xd8>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	bf08      	it	eq
 8003c90:	68ec      	ldreq	r4, [r5, #12]
 8003c92:	e7d5      	b.n	8003c40 <_puts_r+0x24>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 fa82 	bl	80041a0 <__swsetup_r>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d0dd      	beq.n	8003c5c <_puts_r+0x40>
 8003ca0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ca6:	07da      	lsls	r2, r3, #31
 8003ca8:	d405      	bmi.n	8003cb6 <_puts_r+0x9a>
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	059b      	lsls	r3, r3, #22
 8003cae:	d402      	bmi.n	8003cb6 <_puts_r+0x9a>
 8003cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb2:	f001 fb4b 	bl	800534c <__retarget_lock_release_recursive>
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da04      	bge.n	8003cc8 <_puts_r+0xac>
 8003cbe:	69a2      	ldr	r2, [r4, #24]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dc06      	bgt.n	8003cd2 <_puts_r+0xb6>
 8003cc4:	290a      	cmp	r1, #10
 8003cc6:	d004      	beq.n	8003cd2 <_puts_r+0xb6>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	7019      	strb	r1, [r3, #0]
 8003cd0:	e7c5      	b.n	8003c5e <_puts_r+0x42>
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 fa11 	bl	80040fc <__swbuf_r>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d1bf      	bne.n	8003c5e <_puts_r+0x42>
 8003cde:	e7df      	b.n	8003ca0 <_puts_r+0x84>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	250a      	movs	r5, #10
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	6022      	str	r2, [r4, #0]
 8003ce8:	701d      	strb	r5, [r3, #0]
 8003cea:	e7db      	b.n	8003ca4 <_puts_r+0x88>
 8003cec:	0801284c 	.word	0x0801284c
 8003cf0:	0801286c 	.word	0x0801286c
 8003cf4:	0801282c 	.word	0x0801282c

08003cf8 <puts>:
 8003cf8:	4b02      	ldr	r3, [pc, #8]	; (8003d04 <puts+0xc>)
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f7ff bf8d 	b.w	8003c1c <_puts_r>
 8003d02:	bf00      	nop
 8003d04:	200001b0 	.word	0x200001b0

08003d08 <setvbuf>:
 8003d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	461d      	mov	r5, r3
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <setvbuf+0x17c>)
 8003d10:	681f      	ldr	r7, [r3, #0]
 8003d12:	4604      	mov	r4, r0
 8003d14:	460e      	mov	r6, r1
 8003d16:	4690      	mov	r8, r2
 8003d18:	b127      	cbz	r7, 8003d24 <setvbuf+0x1c>
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	b913      	cbnz	r3, 8003d24 <setvbuf+0x1c>
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f001 fa5e 	bl	80051e0 <__sinit>
 8003d24:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <setvbuf+0x180>)
 8003d26:	429c      	cmp	r4, r3
 8003d28:	d167      	bne.n	8003dfa <setvbuf+0xf2>
 8003d2a:	687c      	ldr	r4, [r7, #4]
 8003d2c:	f1b8 0f02 	cmp.w	r8, #2
 8003d30:	d006      	beq.n	8003d40 <setvbuf+0x38>
 8003d32:	f1b8 0f01 	cmp.w	r8, #1
 8003d36:	f200 809f 	bhi.w	8003e78 <setvbuf+0x170>
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	f2c0 809c 	blt.w	8003e78 <setvbuf+0x170>
 8003d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d42:	07db      	lsls	r3, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <setvbuf+0x4a>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	0598      	lsls	r0, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <setvbuf+0x4a>
 8003d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d4e:	f001 fafc 	bl	800534a <__retarget_lock_acquire_recursive>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4638      	mov	r0, r7
 8003d56:	f001 f9af 	bl	80050b8 <_fflush_r>
 8003d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5c:	b141      	cbz	r1, 8003d70 <setvbuf+0x68>
 8003d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d62:	4299      	cmp	r1, r3
 8003d64:	d002      	beq.n	8003d6c <setvbuf+0x64>
 8003d66:	4638      	mov	r0, r7
 8003d68:	f001 ff12 	bl	8005b90 <_free_r>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6363      	str	r3, [r4, #52]	; 0x34
 8003d70:	2300      	movs	r3, #0
 8003d72:	61a3      	str	r3, [r4, #24]
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	0619      	lsls	r1, r3, #24
 8003d7a:	d503      	bpl.n	8003d84 <setvbuf+0x7c>
 8003d7c:	6921      	ldr	r1, [r4, #16]
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f001 ff06 	bl	8005b90 <_free_r>
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	f1b8 0f02 	cmp.w	r8, #2
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	d06c      	beq.n	8003e70 <setvbuf+0x168>
 8003d96:	ab01      	add	r3, sp, #4
 8003d98:	466a      	mov	r2, sp
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f001 fad6 	bl	800534e <__swhatbuf_r>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	4318      	orrs	r0, r3
 8003da6:	81a0      	strh	r0, [r4, #12]
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d130      	bne.n	8003e0e <setvbuf+0x106>
 8003dac:	9d00      	ldr	r5, [sp, #0]
 8003dae:	4628      	mov	r0, r5
 8003db0:	f001 fb32 	bl	8005418 <malloc>
 8003db4:	4606      	mov	r6, r0
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d155      	bne.n	8003e66 <setvbuf+0x15e>
 8003dba:	f8dd 9000 	ldr.w	r9, [sp]
 8003dbe:	45a9      	cmp	r9, r5
 8003dc0:	d14a      	bne.n	8003e58 <setvbuf+0x150>
 8003dc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60a2      	str	r2, [r4, #8]
 8003dca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003dce:	6022      	str	r2, [r4, #0]
 8003dd0:	6122      	str	r2, [r4, #16]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd8:	6162      	str	r2, [r4, #20]
 8003dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	07d2      	lsls	r2, r2, #31
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	d405      	bmi.n	8003df2 <setvbuf+0xea>
 8003de6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003dea:	d102      	bne.n	8003df2 <setvbuf+0xea>
 8003dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dee:	f001 faad 	bl	800534c <__retarget_lock_release_recursive>
 8003df2:	4628      	mov	r0, r5
 8003df4:	b003      	add	sp, #12
 8003df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <setvbuf+0x184>)
 8003dfc:	429c      	cmp	r4, r3
 8003dfe:	d101      	bne.n	8003e04 <setvbuf+0xfc>
 8003e00:	68bc      	ldr	r4, [r7, #8]
 8003e02:	e793      	b.n	8003d2c <setvbuf+0x24>
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <setvbuf+0x188>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	bf08      	it	eq
 8003e0a:	68fc      	ldreq	r4, [r7, #12]
 8003e0c:	e78e      	b.n	8003d2c <setvbuf+0x24>
 8003e0e:	2e00      	cmp	r6, #0
 8003e10:	d0cd      	beq.n	8003dae <setvbuf+0xa6>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	b913      	cbnz	r3, 8003e1c <setvbuf+0x114>
 8003e16:	4638      	mov	r0, r7
 8003e18:	f001 f9e2 	bl	80051e0 <__sinit>
 8003e1c:	f1b8 0f01 	cmp.w	r8, #1
 8003e20:	bf08      	it	eq
 8003e22:	89a3      	ldrheq	r3, [r4, #12]
 8003e24:	6026      	str	r6, [r4, #0]
 8003e26:	bf04      	itt	eq
 8003e28:	f043 0301 	orreq.w	r3, r3, #1
 8003e2c:	81a3      	strheq	r3, [r4, #12]
 8003e2e:	89a2      	ldrh	r2, [r4, #12]
 8003e30:	f012 0308 	ands.w	r3, r2, #8
 8003e34:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e38:	d01c      	beq.n	8003e74 <setvbuf+0x16c>
 8003e3a:	07d3      	lsls	r3, r2, #31
 8003e3c:	bf41      	itttt	mi
 8003e3e:	2300      	movmi	r3, #0
 8003e40:	426d      	negmi	r5, r5
 8003e42:	60a3      	strmi	r3, [r4, #8]
 8003e44:	61a5      	strmi	r5, [r4, #24]
 8003e46:	bf58      	it	pl
 8003e48:	60a5      	strpl	r5, [r4, #8]
 8003e4a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e4c:	f015 0501 	ands.w	r5, r5, #1
 8003e50:	d115      	bne.n	8003e7e <setvbuf+0x176>
 8003e52:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e56:	e7c8      	b.n	8003dea <setvbuf+0xe2>
 8003e58:	4648      	mov	r0, r9
 8003e5a:	f001 fadd 	bl	8005418 <malloc>
 8003e5e:	4606      	mov	r6, r0
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0ae      	beq.n	8003dc2 <setvbuf+0xba>
 8003e64:	464d      	mov	r5, r9
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	e7d0      	b.n	8003e12 <setvbuf+0x10a>
 8003e70:	2500      	movs	r5, #0
 8003e72:	e7a8      	b.n	8003dc6 <setvbuf+0xbe>
 8003e74:	60a3      	str	r3, [r4, #8]
 8003e76:	e7e8      	b.n	8003e4a <setvbuf+0x142>
 8003e78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e7c:	e7b9      	b.n	8003df2 <setvbuf+0xea>
 8003e7e:	2500      	movs	r5, #0
 8003e80:	e7b7      	b.n	8003df2 <setvbuf+0xea>
 8003e82:	bf00      	nop
 8003e84:	200001b0 	.word	0x200001b0
 8003e88:	0801284c 	.word	0x0801284c
 8003e8c:	0801286c 	.word	0x0801286c
 8003e90:	0801282c 	.word	0x0801282c

08003e94 <strcasecmp>:
 8003e94:	b530      	push	{r4, r5, lr}
 8003e96:	4d0b      	ldr	r5, [pc, #44]	; (8003ec4 <strcasecmp+0x30>)
 8003e98:	4604      	mov	r4, r0
 8003e9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e9e:	5d5a      	ldrb	r2, [r3, r5]
 8003ea0:	f002 0203 	and.w	r2, r2, #3
 8003ea4:	2a01      	cmp	r2, #1
 8003ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eaa:	5ca8      	ldrb	r0, [r5, r2]
 8003eac:	f000 0003 	and.w	r0, r0, #3
 8003eb0:	bf08      	it	eq
 8003eb2:	3320      	addeq	r3, #32
 8003eb4:	2801      	cmp	r0, #1
 8003eb6:	bf08      	it	eq
 8003eb8:	3220      	addeq	r2, #32
 8003eba:	1a98      	subs	r0, r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <strcasecmp+0x2e>
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d1eb      	bne.n	8003e9a <strcasecmp+0x6>
 8003ec2:	bd30      	pop	{r4, r5, pc}
 8003ec4:	08012588 	.word	0x08012588

08003ec8 <strcpy>:
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ece:	f803 2b01 	strb.w	r2, [r3], #1
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	d1f9      	bne.n	8003eca <strcpy+0x2>
 8003ed6:	4770      	bx	lr

08003ed8 <strtok>:
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <strtok+0x5c>)
 8003eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003edc:	681e      	ldr	r6, [r3, #0]
 8003ede:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	b9fc      	cbnz	r4, 8003f24 <strtok+0x4c>
 8003ee4:	2050      	movs	r0, #80	; 0x50
 8003ee6:	9101      	str	r1, [sp, #4]
 8003ee8:	f001 fa96 	bl	8005418 <malloc>
 8003eec:	9901      	ldr	r1, [sp, #4]
 8003eee:	65b0      	str	r0, [r6, #88]	; 0x58
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	b920      	cbnz	r0, 8003efe <strtok+0x26>
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <strtok+0x60>)
 8003ef6:	4811      	ldr	r0, [pc, #68]	; (8003f3c <strtok+0x64>)
 8003ef8:	2157      	movs	r1, #87	; 0x57
 8003efa:	f000 f9bf 	bl	800427c <__assert_func>
 8003efe:	e9c0 4400 	strd	r4, r4, [r0]
 8003f02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003f06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003f0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003f0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003f12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003f16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003f1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003f1e:	6184      	str	r4, [r0, #24]
 8003f20:	7704      	strb	r4, [r0, #28]
 8003f22:	6244      	str	r4, [r0, #36]	; 0x24
 8003f24:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003f26:	2301      	movs	r3, #1
 8003f28:	4628      	mov	r0, r5
 8003f2a:	b002      	add	sp, #8
 8003f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f30:	f000 b806 	b.w	8003f40 <__strtok_r>
 8003f34:	200001b0 	.word	0x200001b0
 8003f38:	080126be 	.word	0x080126be
 8003f3c:	080126d5 	.word	0x080126d5

08003f40 <__strtok_r>:
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b908      	cbnz	r0, 8003f48 <__strtok_r+0x8>
 8003f44:	6810      	ldr	r0, [r2, #0]
 8003f46:	b188      	cbz	r0, 8003f6c <__strtok_r+0x2c>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f50:	460f      	mov	r7, r1
 8003f52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f56:	b91e      	cbnz	r6, 8003f60 <__strtok_r+0x20>
 8003f58:	b965      	cbnz	r5, 8003f74 <__strtok_r+0x34>
 8003f5a:	6015      	str	r5, [r2, #0]
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	e005      	b.n	8003f6c <__strtok_r+0x2c>
 8003f60:	42b5      	cmp	r5, r6
 8003f62:	d1f6      	bne.n	8003f52 <__strtok_r+0x12>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <__strtok_r+0xa>
 8003f68:	6014      	str	r4, [r2, #0]
 8003f6a:	7003      	strb	r3, [r0, #0]
 8003f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6e:	461c      	mov	r4, r3
 8003f70:	e00c      	b.n	8003f8c <__strtok_r+0x4c>
 8003f72:	b915      	cbnz	r5, 8003f7a <__strtok_r+0x3a>
 8003f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f78:	460e      	mov	r6, r1
 8003f7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	d1f7      	bne.n	8003f72 <__strtok_r+0x32>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f3      	beq.n	8003f6e <__strtok_r+0x2e>
 8003f86:	2300      	movs	r3, #0
 8003f88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f8c:	6014      	str	r4, [r2, #0]
 8003f8e:	e7ed      	b.n	8003f6c <__strtok_r+0x2c>

08003f90 <_strtoul_l.constprop.0>:
 8003f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f94:	4f36      	ldr	r7, [pc, #216]	; (8004070 <_strtoul_l.constprop.0+0xe0>)
 8003f96:	4686      	mov	lr, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fa0:	5de6      	ldrb	r6, [r4, r7]
 8003fa2:	f016 0608 	ands.w	r6, r6, #8
 8003fa6:	d1f8      	bne.n	8003f9a <_strtoul_l.constprop.0+0xa>
 8003fa8:	2c2d      	cmp	r4, #45	; 0x2d
 8003faa:	d12f      	bne.n	800400c <_strtoul_l.constprop.0+0x7c>
 8003fac:	782c      	ldrb	r4, [r5, #0]
 8003fae:	2601      	movs	r6, #1
 8003fb0:	1c85      	adds	r5, r0, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d057      	beq.n	8004066 <_strtoul_l.constprop.0+0xd6>
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d109      	bne.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8003fba:	2c30      	cmp	r4, #48	; 0x30
 8003fbc:	d107      	bne.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8003fbe:	7828      	ldrb	r0, [r5, #0]
 8003fc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003fc4:	2858      	cmp	r0, #88	; 0x58
 8003fc6:	d149      	bne.n	800405c <_strtoul_l.constprop.0+0xcc>
 8003fc8:	786c      	ldrb	r4, [r5, #1]
 8003fca:	2310      	movs	r3, #16
 8003fcc:	3502      	adds	r5, #2
 8003fce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003fd2:	2700      	movs	r7, #0
 8003fd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8003fd8:	fb03 f908 	mul.w	r9, r3, r8
 8003fdc:	ea6f 0909 	mvn.w	r9, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003fe6:	f1bc 0f09 	cmp.w	ip, #9
 8003fea:	d814      	bhi.n	8004016 <_strtoul_l.constprop.0+0x86>
 8003fec:	4664      	mov	r4, ip
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	dd22      	ble.n	8004038 <_strtoul_l.constprop.0+0xa8>
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	db1d      	blt.n	8004032 <_strtoul_l.constprop.0+0xa2>
 8003ff6:	4580      	cmp	r8, r0
 8003ff8:	d31b      	bcc.n	8004032 <_strtoul_l.constprop.0+0xa2>
 8003ffa:	d101      	bne.n	8004000 <_strtoul_l.constprop.0+0x70>
 8003ffc:	45a1      	cmp	r9, r4
 8003ffe:	db18      	blt.n	8004032 <_strtoul_l.constprop.0+0xa2>
 8004000:	fb00 4003 	mla	r0, r0, r3, r4
 8004004:	2701      	movs	r7, #1
 8004006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800400a:	e7ea      	b.n	8003fe2 <_strtoul_l.constprop.0+0x52>
 800400c:	2c2b      	cmp	r4, #43	; 0x2b
 800400e:	bf04      	itt	eq
 8004010:	782c      	ldrbeq	r4, [r5, #0]
 8004012:	1c85      	addeq	r5, r0, #2
 8004014:	e7cd      	b.n	8003fb2 <_strtoul_l.constprop.0+0x22>
 8004016:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800401a:	f1bc 0f19 	cmp.w	ip, #25
 800401e:	d801      	bhi.n	8004024 <_strtoul_l.constprop.0+0x94>
 8004020:	3c37      	subs	r4, #55	; 0x37
 8004022:	e7e4      	b.n	8003fee <_strtoul_l.constprop.0+0x5e>
 8004024:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004028:	f1bc 0f19 	cmp.w	ip, #25
 800402c:	d804      	bhi.n	8004038 <_strtoul_l.constprop.0+0xa8>
 800402e:	3c57      	subs	r4, #87	; 0x57
 8004030:	e7dd      	b.n	8003fee <_strtoul_l.constprop.0+0x5e>
 8004032:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004036:	e7e6      	b.n	8004006 <_strtoul_l.constprop.0+0x76>
 8004038:	2f00      	cmp	r7, #0
 800403a:	da07      	bge.n	800404c <_strtoul_l.constprop.0+0xbc>
 800403c:	2322      	movs	r3, #34	; 0x22
 800403e:	f8ce 3000 	str.w	r3, [lr]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004046:	b932      	cbnz	r2, 8004056 <_strtoul_l.constprop.0+0xc6>
 8004048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404c:	b106      	cbz	r6, 8004050 <_strtoul_l.constprop.0+0xc0>
 800404e:	4240      	negs	r0, r0
 8004050:	2a00      	cmp	r2, #0
 8004052:	d0f9      	beq.n	8004048 <_strtoul_l.constprop.0+0xb8>
 8004054:	b107      	cbz	r7, 8004058 <_strtoul_l.constprop.0+0xc8>
 8004056:	1e69      	subs	r1, r5, #1
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	e7f5      	b.n	8004048 <_strtoul_l.constprop.0+0xb8>
 800405c:	2430      	movs	r4, #48	; 0x30
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1b5      	bne.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8004062:	2308      	movs	r3, #8
 8004064:	e7b3      	b.n	8003fce <_strtoul_l.constprop.0+0x3e>
 8004066:	2c30      	cmp	r4, #48	; 0x30
 8004068:	d0a9      	beq.n	8003fbe <_strtoul_l.constprop.0+0x2e>
 800406a:	230a      	movs	r3, #10
 800406c:	e7af      	b.n	8003fce <_strtoul_l.constprop.0+0x3e>
 800406e:	bf00      	nop
 8004070:	08012588 	.word	0x08012588

08004074 <strtoul>:
 8004074:	4613      	mov	r3, r2
 8004076:	460a      	mov	r2, r1
 8004078:	4601      	mov	r1, r0
 800407a:	4802      	ldr	r0, [pc, #8]	; (8004084 <strtoul+0x10>)
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f7ff bf87 	b.w	8003f90 <_strtoul_l.constprop.0>
 8004082:	bf00      	nop
 8004084:	200001b0 	.word	0x200001b0

08004088 <_vsniprintf_r>:
 8004088:	b530      	push	{r4, r5, lr}
 800408a:	4614      	mov	r4, r2
 800408c:	2c00      	cmp	r4, #0
 800408e:	b09b      	sub	sp, #108	; 0x6c
 8004090:	4605      	mov	r5, r0
 8004092:	461a      	mov	r2, r3
 8004094:	da05      	bge.n	80040a2 <_vsniprintf_r+0x1a>
 8004096:	238b      	movs	r3, #139	; 0x8b
 8004098:	6003      	str	r3, [r0, #0]
 800409a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800409e:	b01b      	add	sp, #108	; 0x6c
 80040a0:	bd30      	pop	{r4, r5, pc}
 80040a2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80040aa:	bf14      	ite	ne
 80040ac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80040b0:	4623      	moveq	r3, r4
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	9305      	str	r3, [sp, #20]
 80040b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040ba:	9100      	str	r1, [sp, #0]
 80040bc:	9104      	str	r1, [sp, #16]
 80040be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80040c2:	4669      	mov	r1, sp
 80040c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040c6:	f001 fe65 	bl	8005d94 <_svfiprintf_r>
 80040ca:	1c43      	adds	r3, r0, #1
 80040cc:	bfbc      	itt	lt
 80040ce:	238b      	movlt	r3, #139	; 0x8b
 80040d0:	602b      	strlt	r3, [r5, #0]
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	d0e3      	beq.n	800409e <_vsniprintf_r+0x16>
 80040d6:	9b00      	ldr	r3, [sp, #0]
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e7df      	b.n	800409e <_vsniprintf_r+0x16>
	...

080040e0 <vsniprintf>:
 80040e0:	b507      	push	{r0, r1, r2, lr}
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	460a      	mov	r2, r1
 80040e8:	4601      	mov	r1, r0
 80040ea:	4803      	ldr	r0, [pc, #12]	; (80040f8 <vsniprintf+0x18>)
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f7ff ffcb 	bl	8004088 <_vsniprintf_r>
 80040f2:	b003      	add	sp, #12
 80040f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80040f8:	200001b0 	.word	0x200001b0

080040fc <__swbuf_r>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	460e      	mov	r6, r1
 8004100:	4614      	mov	r4, r2
 8004102:	4605      	mov	r5, r0
 8004104:	b118      	cbz	r0, 800410e <__swbuf_r+0x12>
 8004106:	6983      	ldr	r3, [r0, #24]
 8004108:	b90b      	cbnz	r3, 800410e <__swbuf_r+0x12>
 800410a:	f001 f869 	bl	80051e0 <__sinit>
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <__swbuf_r+0x98>)
 8004110:	429c      	cmp	r4, r3
 8004112:	d12b      	bne.n	800416c <__swbuf_r+0x70>
 8004114:	686c      	ldr	r4, [r5, #4]
 8004116:	69a3      	ldr	r3, [r4, #24]
 8004118:	60a3      	str	r3, [r4, #8]
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	071a      	lsls	r2, r3, #28
 800411e:	d52f      	bpl.n	8004180 <__swbuf_r+0x84>
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	b36b      	cbz	r3, 8004180 <__swbuf_r+0x84>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	1ac0      	subs	r0, r0, r3
 800412a:	6963      	ldr	r3, [r4, #20]
 800412c:	b2f6      	uxtb	r6, r6
 800412e:	4283      	cmp	r3, r0
 8004130:	4637      	mov	r7, r6
 8004132:	dc04      	bgt.n	800413e <__swbuf_r+0x42>
 8004134:	4621      	mov	r1, r4
 8004136:	4628      	mov	r0, r5
 8004138:	f000 ffbe 	bl	80050b8 <_fflush_r>
 800413c:	bb30      	cbnz	r0, 800418c <__swbuf_r+0x90>
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	3b01      	subs	r3, #1
 8004142:	60a3      	str	r3, [r4, #8]
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	6022      	str	r2, [r4, #0]
 800414a:	701e      	strb	r6, [r3, #0]
 800414c:	6963      	ldr	r3, [r4, #20]
 800414e:	3001      	adds	r0, #1
 8004150:	4283      	cmp	r3, r0
 8004152:	d004      	beq.n	800415e <__swbuf_r+0x62>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	07db      	lsls	r3, r3, #31
 8004158:	d506      	bpl.n	8004168 <__swbuf_r+0x6c>
 800415a:	2e0a      	cmp	r6, #10
 800415c:	d104      	bne.n	8004168 <__swbuf_r+0x6c>
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	f000 ffa9 	bl	80050b8 <_fflush_r>
 8004166:	b988      	cbnz	r0, 800418c <__swbuf_r+0x90>
 8004168:	4638      	mov	r0, r7
 800416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <__swbuf_r+0x9c>)
 800416e:	429c      	cmp	r4, r3
 8004170:	d101      	bne.n	8004176 <__swbuf_r+0x7a>
 8004172:	68ac      	ldr	r4, [r5, #8]
 8004174:	e7cf      	b.n	8004116 <__swbuf_r+0x1a>
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <__swbuf_r+0xa0>)
 8004178:	429c      	cmp	r4, r3
 800417a:	bf08      	it	eq
 800417c:	68ec      	ldreq	r4, [r5, #12]
 800417e:	e7ca      	b.n	8004116 <__swbuf_r+0x1a>
 8004180:	4621      	mov	r1, r4
 8004182:	4628      	mov	r0, r5
 8004184:	f000 f80c 	bl	80041a0 <__swsetup_r>
 8004188:	2800      	cmp	r0, #0
 800418a:	d0cb      	beq.n	8004124 <__swbuf_r+0x28>
 800418c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004190:	e7ea      	b.n	8004168 <__swbuf_r+0x6c>
 8004192:	bf00      	nop
 8004194:	0801284c 	.word	0x0801284c
 8004198:	0801286c 	.word	0x0801286c
 800419c:	0801282c 	.word	0x0801282c

080041a0 <__swsetup_r>:
 80041a0:	4b32      	ldr	r3, [pc, #200]	; (800426c <__swsetup_r+0xcc>)
 80041a2:	b570      	push	{r4, r5, r6, lr}
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	4606      	mov	r6, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	b125      	cbz	r5, 80041b6 <__swsetup_r+0x16>
 80041ac:	69ab      	ldr	r3, [r5, #24]
 80041ae:	b913      	cbnz	r3, 80041b6 <__swsetup_r+0x16>
 80041b0:	4628      	mov	r0, r5
 80041b2:	f001 f815 	bl	80051e0 <__sinit>
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <__swsetup_r+0xd0>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	d10f      	bne.n	80041dc <__swsetup_r+0x3c>
 80041bc:	686c      	ldr	r4, [r5, #4]
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041c4:	0719      	lsls	r1, r3, #28
 80041c6:	d42c      	bmi.n	8004222 <__swsetup_r+0x82>
 80041c8:	06dd      	lsls	r5, r3, #27
 80041ca:	d411      	bmi.n	80041f0 <__swsetup_r+0x50>
 80041cc:	2309      	movs	r3, #9
 80041ce:	6033      	str	r3, [r6, #0]
 80041d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041da:	e03e      	b.n	800425a <__swsetup_r+0xba>
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <__swsetup_r+0xd4>)
 80041de:	429c      	cmp	r4, r3
 80041e0:	d101      	bne.n	80041e6 <__swsetup_r+0x46>
 80041e2:	68ac      	ldr	r4, [r5, #8]
 80041e4:	e7eb      	b.n	80041be <__swsetup_r+0x1e>
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <__swsetup_r+0xd8>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	bf08      	it	eq
 80041ec:	68ec      	ldreq	r4, [r5, #12]
 80041ee:	e7e6      	b.n	80041be <__swsetup_r+0x1e>
 80041f0:	0758      	lsls	r0, r3, #29
 80041f2:	d512      	bpl.n	800421a <__swsetup_r+0x7a>
 80041f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041f6:	b141      	cbz	r1, 800420a <__swsetup_r+0x6a>
 80041f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041fc:	4299      	cmp	r1, r3
 80041fe:	d002      	beq.n	8004206 <__swsetup_r+0x66>
 8004200:	4630      	mov	r0, r6
 8004202:	f001 fcc5 	bl	8005b90 <_free_r>
 8004206:	2300      	movs	r3, #0
 8004208:	6363      	str	r3, [r4, #52]	; 0x34
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	2300      	movs	r3, #0
 8004214:	6063      	str	r3, [r4, #4]
 8004216:	6923      	ldr	r3, [r4, #16]
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	b94b      	cbnz	r3, 800423a <__swsetup_r+0x9a>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d003      	beq.n	800423a <__swsetup_r+0x9a>
 8004232:	4621      	mov	r1, r4
 8004234:	4630      	mov	r0, r6
 8004236:	f001 f8af 	bl	8005398 <__smakebuf_r>
 800423a:	89a0      	ldrh	r0, [r4, #12]
 800423c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004240:	f010 0301 	ands.w	r3, r0, #1
 8004244:	d00a      	beq.n	800425c <__swsetup_r+0xbc>
 8004246:	2300      	movs	r3, #0
 8004248:	60a3      	str	r3, [r4, #8]
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	425b      	negs	r3, r3
 800424e:	61a3      	str	r3, [r4, #24]
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	b943      	cbnz	r3, 8004266 <__swsetup_r+0xc6>
 8004254:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004258:	d1ba      	bne.n	80041d0 <__swsetup_r+0x30>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	0781      	lsls	r1, r0, #30
 800425e:	bf58      	it	pl
 8004260:	6963      	ldrpl	r3, [r4, #20]
 8004262:	60a3      	str	r3, [r4, #8]
 8004264:	e7f4      	b.n	8004250 <__swsetup_r+0xb0>
 8004266:	2000      	movs	r0, #0
 8004268:	e7f7      	b.n	800425a <__swsetup_r+0xba>
 800426a:	bf00      	nop
 800426c:	200001b0 	.word	0x200001b0
 8004270:	0801284c 	.word	0x0801284c
 8004274:	0801286c 	.word	0x0801286c
 8004278:	0801282c 	.word	0x0801282c

0800427c <__assert_func>:
 800427c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800427e:	4614      	mov	r4, r2
 8004280:	461a      	mov	r2, r3
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <__assert_func+0x2c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4605      	mov	r5, r0
 8004288:	68d8      	ldr	r0, [r3, #12]
 800428a:	b14c      	cbz	r4, 80042a0 <__assert_func+0x24>
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <__assert_func+0x30>)
 800428e:	9100      	str	r1, [sp, #0]
 8004290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004294:	4906      	ldr	r1, [pc, #24]	; (80042b0 <__assert_func+0x34>)
 8004296:	462b      	mov	r3, r5
 8004298:	f001 f820 	bl	80052dc <fiprintf>
 800429c:	f002 f86c 	bl	8006378 <abort>
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <__assert_func+0x38>)
 80042a2:	461c      	mov	r4, r3
 80042a4:	e7f3      	b.n	800428e <__assert_func+0x12>
 80042a6:	bf00      	nop
 80042a8:	200001b0 	.word	0x200001b0
 80042ac:	08012754 	.word	0x08012754
 80042b0:	08012761 	.word	0x08012761
 80042b4:	08008c93 	.word	0x08008c93

080042b8 <quorem>:
 80042b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	6903      	ldr	r3, [r0, #16]
 80042be:	690c      	ldr	r4, [r1, #16]
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	4607      	mov	r7, r0
 80042c4:	f2c0 8081 	blt.w	80043ca <quorem+0x112>
 80042c8:	3c01      	subs	r4, #1
 80042ca:	f101 0814 	add.w	r8, r1, #20
 80042ce:	f100 0514 	add.w	r5, r0, #20
 80042d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042e0:	3301      	adds	r3, #1
 80042e2:	429a      	cmp	r2, r3
 80042e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80042f0:	d331      	bcc.n	8004356 <quorem+0x9e>
 80042f2:	f04f 0e00 	mov.w	lr, #0
 80042f6:	4640      	mov	r0, r8
 80042f8:	46ac      	mov	ip, r5
 80042fa:	46f2      	mov	sl, lr
 80042fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004300:	b293      	uxth	r3, r2
 8004302:	fb06 e303 	mla	r3, r6, r3, lr
 8004306:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800430a:	b29b      	uxth	r3, r3
 800430c:	ebaa 0303 	sub.w	r3, sl, r3
 8004310:	0c12      	lsrs	r2, r2, #16
 8004312:	f8dc a000 	ldr.w	sl, [ip]
 8004316:	fb06 e202 	mla	r2, r6, r2, lr
 800431a:	fa13 f38a 	uxtah	r3, r3, sl
 800431e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004322:	fa1f fa82 	uxth.w	sl, r2
 8004326:	f8dc 2000 	ldr.w	r2, [ip]
 800432a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800432e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004332:	b29b      	uxth	r3, r3
 8004334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004338:	4581      	cmp	r9, r0
 800433a:	f84c 3b04 	str.w	r3, [ip], #4
 800433e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004342:	d2db      	bcs.n	80042fc <quorem+0x44>
 8004344:	f855 300b 	ldr.w	r3, [r5, fp]
 8004348:	b92b      	cbnz	r3, 8004356 <quorem+0x9e>
 800434a:	9b01      	ldr	r3, [sp, #4]
 800434c:	3b04      	subs	r3, #4
 800434e:	429d      	cmp	r5, r3
 8004350:	461a      	mov	r2, r3
 8004352:	d32e      	bcc.n	80043b2 <quorem+0xfa>
 8004354:	613c      	str	r4, [r7, #16]
 8004356:	4638      	mov	r0, r7
 8004358:	f001 fb08 	bl	800596c <__mcmp>
 800435c:	2800      	cmp	r0, #0
 800435e:	db24      	blt.n	80043aa <quorem+0xf2>
 8004360:	3601      	adds	r6, #1
 8004362:	4628      	mov	r0, r5
 8004364:	f04f 0c00 	mov.w	ip, #0
 8004368:	f858 2b04 	ldr.w	r2, [r8], #4
 800436c:	f8d0 e000 	ldr.w	lr, [r0]
 8004370:	b293      	uxth	r3, r2
 8004372:	ebac 0303 	sub.w	r3, ip, r3
 8004376:	0c12      	lsrs	r2, r2, #16
 8004378:	fa13 f38e 	uxtah	r3, r3, lr
 800437c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004384:	b29b      	uxth	r3, r3
 8004386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800438a:	45c1      	cmp	r9, r8
 800438c:	f840 3b04 	str.w	r3, [r0], #4
 8004390:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004394:	d2e8      	bcs.n	8004368 <quorem+0xb0>
 8004396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800439a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800439e:	b922      	cbnz	r2, 80043aa <quorem+0xf2>
 80043a0:	3b04      	subs	r3, #4
 80043a2:	429d      	cmp	r5, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	d30a      	bcc.n	80043be <quorem+0x106>
 80043a8:	613c      	str	r4, [r7, #16]
 80043aa:	4630      	mov	r0, r6
 80043ac:	b003      	add	sp, #12
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	d1cc      	bne.n	8004354 <quorem+0x9c>
 80043ba:	3c01      	subs	r4, #1
 80043bc:	e7c7      	b.n	800434e <quorem+0x96>
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	d1f0      	bne.n	80043a8 <quorem+0xf0>
 80043c6:	3c01      	subs	r4, #1
 80043c8:	e7eb      	b.n	80043a2 <quorem+0xea>
 80043ca:	2000      	movs	r0, #0
 80043cc:	e7ee      	b.n	80043ac <quorem+0xf4>
	...

080043d0 <_dtoa_r>:
 80043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	ed2d 8b04 	vpush	{d8-d9}
 80043d8:	ec57 6b10 	vmov	r6, r7, d0
 80043dc:	b093      	sub	sp, #76	; 0x4c
 80043de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043e4:	9106      	str	r1, [sp, #24]
 80043e6:	ee10 aa10 	vmov	sl, s0
 80043ea:	4604      	mov	r4, r0
 80043ec:	9209      	str	r2, [sp, #36]	; 0x24
 80043ee:	930c      	str	r3, [sp, #48]	; 0x30
 80043f0:	46bb      	mov	fp, r7
 80043f2:	b975      	cbnz	r5, 8004412 <_dtoa_r+0x42>
 80043f4:	2010      	movs	r0, #16
 80043f6:	f001 f80f 	bl	8005418 <malloc>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6260      	str	r0, [r4, #36]	; 0x24
 80043fe:	b920      	cbnz	r0, 800440a <_dtoa_r+0x3a>
 8004400:	4ba7      	ldr	r3, [pc, #668]	; (80046a0 <_dtoa_r+0x2d0>)
 8004402:	21ea      	movs	r1, #234	; 0xea
 8004404:	48a7      	ldr	r0, [pc, #668]	; (80046a4 <_dtoa_r+0x2d4>)
 8004406:	f7ff ff39 	bl	800427c <__assert_func>
 800440a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800440e:	6005      	str	r5, [r0, #0]
 8004410:	60c5      	str	r5, [r0, #12]
 8004412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	b151      	cbz	r1, 800442e <_dtoa_r+0x5e>
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	604a      	str	r2, [r1, #4]
 800441c:	2301      	movs	r3, #1
 800441e:	4093      	lsls	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
 8004422:	4620      	mov	r0, r4
 8004424:	f001 f860 	bl	80054e8 <_Bfree>
 8004428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	1e3b      	subs	r3, r7, #0
 8004430:	bfaa      	itet	ge
 8004432:	2300      	movge	r3, #0
 8004434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004438:	f8c8 3000 	strge.w	r3, [r8]
 800443c:	4b9a      	ldr	r3, [pc, #616]	; (80046a8 <_dtoa_r+0x2d8>)
 800443e:	bfbc      	itt	lt
 8004440:	2201      	movlt	r2, #1
 8004442:	f8c8 2000 	strlt.w	r2, [r8]
 8004446:	ea33 030b 	bics.w	r3, r3, fp
 800444a:	d11b      	bne.n	8004484 <_dtoa_r+0xb4>
 800444c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800444e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004458:	4333      	orrs	r3, r6
 800445a:	f000 8592 	beq.w	8004f82 <_dtoa_r+0xbb2>
 800445e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004460:	b963      	cbnz	r3, 800447c <_dtoa_r+0xac>
 8004462:	4b92      	ldr	r3, [pc, #584]	; (80046ac <_dtoa_r+0x2dc>)
 8004464:	e022      	b.n	80044ac <_dtoa_r+0xdc>
 8004466:	4b92      	ldr	r3, [pc, #584]	; (80046b0 <_dtoa_r+0x2e0>)
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	3308      	adds	r3, #8
 800446c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	9801      	ldr	r0, [sp, #4]
 8004472:	b013      	add	sp, #76	; 0x4c
 8004474:	ecbd 8b04 	vpop	{d8-d9}
 8004478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447c:	4b8b      	ldr	r3, [pc, #556]	; (80046ac <_dtoa_r+0x2dc>)
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	3303      	adds	r3, #3
 8004482:	e7f3      	b.n	800446c <_dtoa_r+0x9c>
 8004484:	2200      	movs	r2, #0
 8004486:	2300      	movs	r3, #0
 8004488:	4650      	mov	r0, sl
 800448a:	4659      	mov	r1, fp
 800448c:	f7fc fcc4 	bl	8000e18 <__aeabi_dcmpeq>
 8004490:	ec4b ab19 	vmov	d9, sl, fp
 8004494:	4680      	mov	r8, r0
 8004496:	b158      	cbz	r0, 80044b0 <_dtoa_r+0xe0>
 8004498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800449a:	2301      	movs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 856b 	beq.w	8004f7c <_dtoa_r+0xbac>
 80044a6:	4883      	ldr	r0, [pc, #524]	; (80046b4 <_dtoa_r+0x2e4>)
 80044a8:	6018      	str	r0, [r3, #0]
 80044aa:	1e43      	subs	r3, r0, #1
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	e7df      	b.n	8004470 <_dtoa_r+0xa0>
 80044b0:	ec4b ab10 	vmov	d0, sl, fp
 80044b4:	aa10      	add	r2, sp, #64	; 0x40
 80044b6:	a911      	add	r1, sp, #68	; 0x44
 80044b8:	4620      	mov	r0, r4
 80044ba:	f001 fafd 	bl	8005ab8 <__d2b>
 80044be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80044c2:	ee08 0a10 	vmov	s16, r0
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	f000 8084 	beq.w	80045d4 <_dtoa_r+0x204>
 80044cc:	ee19 3a90 	vmov	r3, s19
 80044d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80044d8:	4656      	mov	r6, sl
 80044da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80044de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80044e6:	4b74      	ldr	r3, [pc, #464]	; (80046b8 <_dtoa_r+0x2e8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	4630      	mov	r0, r6
 80044ec:	4639      	mov	r1, r7
 80044ee:	f7fc f873 	bl	80005d8 <__aeabi_dsub>
 80044f2:	a365      	add	r3, pc, #404	; (adr r3, 8004688 <_dtoa_r+0x2b8>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f7fc fa26 	bl	8000948 <__aeabi_dmul>
 80044fc:	a364      	add	r3, pc, #400	; (adr r3, 8004690 <_dtoa_r+0x2c0>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fc f86b 	bl	80005dc <__adddf3>
 8004506:	4606      	mov	r6, r0
 8004508:	4628      	mov	r0, r5
 800450a:	460f      	mov	r7, r1
 800450c:	f7fc f9b2 	bl	8000874 <__aeabi_i2d>
 8004510:	a361      	add	r3, pc, #388	; (adr r3, 8004698 <_dtoa_r+0x2c8>)
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f7fc fa17 	bl	8000948 <__aeabi_dmul>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4630      	mov	r0, r6
 8004520:	4639      	mov	r1, r7
 8004522:	f7fc f85b 	bl	80005dc <__adddf3>
 8004526:	4606      	mov	r6, r0
 8004528:	460f      	mov	r7, r1
 800452a:	f7fc fcbd 	bl	8000ea8 <__aeabi_d2iz>
 800452e:	2200      	movs	r2, #0
 8004530:	9000      	str	r0, [sp, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	4630      	mov	r0, r6
 8004536:	4639      	mov	r1, r7
 8004538:	f7fc fc78 	bl	8000e2c <__aeabi_dcmplt>
 800453c:	b150      	cbz	r0, 8004554 <_dtoa_r+0x184>
 800453e:	9800      	ldr	r0, [sp, #0]
 8004540:	f7fc f998 	bl	8000874 <__aeabi_i2d>
 8004544:	4632      	mov	r2, r6
 8004546:	463b      	mov	r3, r7
 8004548:	f7fc fc66 	bl	8000e18 <__aeabi_dcmpeq>
 800454c:	b910      	cbnz	r0, 8004554 <_dtoa_r+0x184>
 800454e:	9b00      	ldr	r3, [sp, #0]
 8004550:	3b01      	subs	r3, #1
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	9b00      	ldr	r3, [sp, #0]
 8004556:	2b16      	cmp	r3, #22
 8004558:	d85a      	bhi.n	8004610 <_dtoa_r+0x240>
 800455a:	9a00      	ldr	r2, [sp, #0]
 800455c:	4b57      	ldr	r3, [pc, #348]	; (80046bc <_dtoa_r+0x2ec>)
 800455e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	ec51 0b19 	vmov	r0, r1, d9
 800456a:	f7fc fc5f 	bl	8000e2c <__aeabi_dcmplt>
 800456e:	2800      	cmp	r0, #0
 8004570:	d050      	beq.n	8004614 <_dtoa_r+0x244>
 8004572:	9b00      	ldr	r3, [sp, #0]
 8004574:	3b01      	subs	r3, #1
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	930b      	str	r3, [sp, #44]	; 0x2c
 800457c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800457e:	1b5d      	subs	r5, r3, r5
 8004580:	1e6b      	subs	r3, r5, #1
 8004582:	9305      	str	r3, [sp, #20]
 8004584:	bf45      	ittet	mi
 8004586:	f1c5 0301 	rsbmi	r3, r5, #1
 800458a:	9304      	strmi	r3, [sp, #16]
 800458c:	2300      	movpl	r3, #0
 800458e:	2300      	movmi	r3, #0
 8004590:	bf4c      	ite	mi
 8004592:	9305      	strmi	r3, [sp, #20]
 8004594:	9304      	strpl	r3, [sp, #16]
 8004596:	9b00      	ldr	r3, [sp, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	db3d      	blt.n	8004618 <_dtoa_r+0x248>
 800459c:	9b05      	ldr	r3, [sp, #20]
 800459e:	9a00      	ldr	r2, [sp, #0]
 80045a0:	920a      	str	r2, [sp, #40]	; 0x28
 80045a2:	4413      	add	r3, r2
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9307      	str	r3, [sp, #28]
 80045aa:	9b06      	ldr	r3, [sp, #24]
 80045ac:	2b09      	cmp	r3, #9
 80045ae:	f200 8089 	bhi.w	80046c4 <_dtoa_r+0x2f4>
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	bfc4      	itt	gt
 80045b6:	3b04      	subgt	r3, #4
 80045b8:	9306      	strgt	r3, [sp, #24]
 80045ba:	9b06      	ldr	r3, [sp, #24]
 80045bc:	f1a3 0302 	sub.w	r3, r3, #2
 80045c0:	bfcc      	ite	gt
 80045c2:	2500      	movgt	r5, #0
 80045c4:	2501      	movle	r5, #1
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	f200 8087 	bhi.w	80046da <_dtoa_r+0x30a>
 80045cc:	e8df f003 	tbb	[pc, r3]
 80045d0:	59383a2d 	.word	0x59383a2d
 80045d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80045d8:	441d      	add	r5, r3
 80045da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80045de:	2b20      	cmp	r3, #32
 80045e0:	bfc1      	itttt	gt
 80045e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80045ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80045ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045f2:	bfda      	itte	le
 80045f4:	f1c3 0320 	rsble	r3, r3, #32
 80045f8:	fa06 f003 	lslle.w	r0, r6, r3
 80045fc:	4318      	orrgt	r0, r3
 80045fe:	f7fc f929 	bl	8000854 <__aeabi_ui2d>
 8004602:	2301      	movs	r3, #1
 8004604:	4606      	mov	r6, r0
 8004606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800460a:	3d01      	subs	r5, #1
 800460c:	930e      	str	r3, [sp, #56]	; 0x38
 800460e:	e76a      	b.n	80044e6 <_dtoa_r+0x116>
 8004610:	2301      	movs	r3, #1
 8004612:	e7b2      	b.n	800457a <_dtoa_r+0x1aa>
 8004614:	900b      	str	r0, [sp, #44]	; 0x2c
 8004616:	e7b1      	b.n	800457c <_dtoa_r+0x1ac>
 8004618:	9b04      	ldr	r3, [sp, #16]
 800461a:	9a00      	ldr	r2, [sp, #0]
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	9304      	str	r3, [sp, #16]
 8004620:	4253      	negs	r3, r2
 8004622:	9307      	str	r3, [sp, #28]
 8004624:	2300      	movs	r3, #0
 8004626:	930a      	str	r3, [sp, #40]	; 0x28
 8004628:	e7bf      	b.n	80045aa <_dtoa_r+0x1da>
 800462a:	2300      	movs	r3, #0
 800462c:	9308      	str	r3, [sp, #32]
 800462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	dc55      	bgt.n	80046e0 <_dtoa_r+0x310>
 8004634:	2301      	movs	r3, #1
 8004636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800463a:	461a      	mov	r2, r3
 800463c:	9209      	str	r2, [sp, #36]	; 0x24
 800463e:	e00c      	b.n	800465a <_dtoa_r+0x28a>
 8004640:	2301      	movs	r3, #1
 8004642:	e7f3      	b.n	800462c <_dtoa_r+0x25c>
 8004644:	2300      	movs	r3, #0
 8004646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004648:	9308      	str	r3, [sp, #32]
 800464a:	9b00      	ldr	r3, [sp, #0]
 800464c:	4413      	add	r3, r2
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	3301      	adds	r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	9303      	str	r3, [sp, #12]
 8004656:	bfb8      	it	lt
 8004658:	2301      	movlt	r3, #1
 800465a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800465c:	2200      	movs	r2, #0
 800465e:	6042      	str	r2, [r0, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	f102 0614 	add.w	r6, r2, #20
 8004666:	429e      	cmp	r6, r3
 8004668:	6841      	ldr	r1, [r0, #4]
 800466a:	d93d      	bls.n	80046e8 <_dtoa_r+0x318>
 800466c:	4620      	mov	r0, r4
 800466e:	f000 fefb 	bl	8005468 <_Balloc>
 8004672:	9001      	str	r0, [sp, #4]
 8004674:	2800      	cmp	r0, #0
 8004676:	d13b      	bne.n	80046f0 <_dtoa_r+0x320>
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <_dtoa_r+0x2f0>)
 800467a:	4602      	mov	r2, r0
 800467c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004680:	e6c0      	b.n	8004404 <_dtoa_r+0x34>
 8004682:	2301      	movs	r3, #1
 8004684:	e7df      	b.n	8004646 <_dtoa_r+0x276>
 8004686:	bf00      	nop
 8004688:	636f4361 	.word	0x636f4361
 800468c:	3fd287a7 	.word	0x3fd287a7
 8004690:	8b60c8b3 	.word	0x8b60c8b3
 8004694:	3fc68a28 	.word	0x3fc68a28
 8004698:	509f79fb 	.word	0x509f79fb
 800469c:	3fd34413 	.word	0x3fd34413
 80046a0:	080126be 	.word	0x080126be
 80046a4:	0801279d 	.word	0x0801279d
 80046a8:	7ff00000 	.word	0x7ff00000
 80046ac:	08012799 	.word	0x08012799
 80046b0:	08012790 	.word	0x08012790
 80046b4:	0800859c 	.word	0x0800859c
 80046b8:	3ff80000 	.word	0x3ff80000
 80046bc:	08012938 	.word	0x08012938
 80046c0:	0801281a 	.word	0x0801281a
 80046c4:	2501      	movs	r5, #1
 80046c6:	2300      	movs	r3, #0
 80046c8:	9306      	str	r3, [sp, #24]
 80046ca:	9508      	str	r5, [sp, #32]
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2312      	movs	r3, #18
 80046d8:	e7b0      	b.n	800463c <_dtoa_r+0x26c>
 80046da:	2301      	movs	r3, #1
 80046dc:	9308      	str	r3, [sp, #32]
 80046de:	e7f5      	b.n	80046cc <_dtoa_r+0x2fc>
 80046e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046e6:	e7b8      	b.n	800465a <_dtoa_r+0x28a>
 80046e8:	3101      	adds	r1, #1
 80046ea:	6041      	str	r1, [r0, #4]
 80046ec:	0052      	lsls	r2, r2, #1
 80046ee:	e7b8      	b.n	8004662 <_dtoa_r+0x292>
 80046f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f2:	9a01      	ldr	r2, [sp, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	2b0e      	cmp	r3, #14
 80046fa:	f200 809d 	bhi.w	8004838 <_dtoa_r+0x468>
 80046fe:	2d00      	cmp	r5, #0
 8004700:	f000 809a 	beq.w	8004838 <_dtoa_r+0x468>
 8004704:	9b00      	ldr	r3, [sp, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	dd32      	ble.n	8004770 <_dtoa_r+0x3a0>
 800470a:	4ab7      	ldr	r2, [pc, #732]	; (80049e8 <_dtoa_r+0x618>)
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004718:	9b00      	ldr	r3, [sp, #0]
 800471a:	05d8      	lsls	r0, r3, #23
 800471c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004720:	d516      	bpl.n	8004750 <_dtoa_r+0x380>
 8004722:	4bb2      	ldr	r3, [pc, #712]	; (80049ec <_dtoa_r+0x61c>)
 8004724:	ec51 0b19 	vmov	r0, r1, d9
 8004728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800472c:	f7fc fa36 	bl	8000b9c <__aeabi_ddiv>
 8004730:	f007 070f 	and.w	r7, r7, #15
 8004734:	4682      	mov	sl, r0
 8004736:	468b      	mov	fp, r1
 8004738:	2503      	movs	r5, #3
 800473a:	4eac      	ldr	r6, [pc, #688]	; (80049ec <_dtoa_r+0x61c>)
 800473c:	b957      	cbnz	r7, 8004754 <_dtoa_r+0x384>
 800473e:	4642      	mov	r2, r8
 8004740:	464b      	mov	r3, r9
 8004742:	4650      	mov	r0, sl
 8004744:	4659      	mov	r1, fp
 8004746:	f7fc fa29 	bl	8000b9c <__aeabi_ddiv>
 800474a:	4682      	mov	sl, r0
 800474c:	468b      	mov	fp, r1
 800474e:	e028      	b.n	80047a2 <_dtoa_r+0x3d2>
 8004750:	2502      	movs	r5, #2
 8004752:	e7f2      	b.n	800473a <_dtoa_r+0x36a>
 8004754:	07f9      	lsls	r1, r7, #31
 8004756:	d508      	bpl.n	800476a <_dtoa_r+0x39a>
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004760:	f7fc f8f2 	bl	8000948 <__aeabi_dmul>
 8004764:	3501      	adds	r5, #1
 8004766:	4680      	mov	r8, r0
 8004768:	4689      	mov	r9, r1
 800476a:	107f      	asrs	r7, r7, #1
 800476c:	3608      	adds	r6, #8
 800476e:	e7e5      	b.n	800473c <_dtoa_r+0x36c>
 8004770:	f000 809b 	beq.w	80048aa <_dtoa_r+0x4da>
 8004774:	9b00      	ldr	r3, [sp, #0]
 8004776:	4f9d      	ldr	r7, [pc, #628]	; (80049ec <_dtoa_r+0x61c>)
 8004778:	425e      	negs	r6, r3
 800477a:	4b9b      	ldr	r3, [pc, #620]	; (80049e8 <_dtoa_r+0x618>)
 800477c:	f006 020f 	and.w	r2, r6, #15
 8004780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	ec51 0b19 	vmov	r0, r1, d9
 800478c:	f7fc f8dc 	bl	8000948 <__aeabi_dmul>
 8004790:	1136      	asrs	r6, r6, #4
 8004792:	4682      	mov	sl, r0
 8004794:	468b      	mov	fp, r1
 8004796:	2300      	movs	r3, #0
 8004798:	2502      	movs	r5, #2
 800479a:	2e00      	cmp	r6, #0
 800479c:	d17a      	bne.n	8004894 <_dtoa_r+0x4c4>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1d3      	bne.n	800474a <_dtoa_r+0x37a>
 80047a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8082 	beq.w	80048ae <_dtoa_r+0x4de>
 80047aa:	4b91      	ldr	r3, [pc, #580]	; (80049f0 <_dtoa_r+0x620>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	4650      	mov	r0, sl
 80047b0:	4659      	mov	r1, fp
 80047b2:	f7fc fb3b 	bl	8000e2c <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d079      	beq.n	80048ae <_dtoa_r+0x4de>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d076      	beq.n	80048ae <_dtoa_r+0x4de>
 80047c0:	9b02      	ldr	r3, [sp, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	dd36      	ble.n	8004834 <_dtoa_r+0x464>
 80047c6:	9b00      	ldr	r3, [sp, #0]
 80047c8:	4650      	mov	r0, sl
 80047ca:	4659      	mov	r1, fp
 80047cc:	1e5f      	subs	r7, r3, #1
 80047ce:	2200      	movs	r2, #0
 80047d0:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <_dtoa_r+0x624>)
 80047d2:	f7fc f8b9 	bl	8000948 <__aeabi_dmul>
 80047d6:	9e02      	ldr	r6, [sp, #8]
 80047d8:	4682      	mov	sl, r0
 80047da:	468b      	mov	fp, r1
 80047dc:	3501      	adds	r5, #1
 80047de:	4628      	mov	r0, r5
 80047e0:	f7fc f848 	bl	8000874 <__aeabi_i2d>
 80047e4:	4652      	mov	r2, sl
 80047e6:	465b      	mov	r3, fp
 80047e8:	f7fc f8ae 	bl	8000948 <__aeabi_dmul>
 80047ec:	4b82      	ldr	r3, [pc, #520]	; (80049f8 <_dtoa_r+0x628>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	f7fb fef4 	bl	80005dc <__adddf3>
 80047f4:	46d0      	mov	r8, sl
 80047f6:	46d9      	mov	r9, fp
 80047f8:	4682      	mov	sl, r0
 80047fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80047fe:	2e00      	cmp	r6, #0
 8004800:	d158      	bne.n	80048b4 <_dtoa_r+0x4e4>
 8004802:	4b7e      	ldr	r3, [pc, #504]	; (80049fc <_dtoa_r+0x62c>)
 8004804:	2200      	movs	r2, #0
 8004806:	4640      	mov	r0, r8
 8004808:	4649      	mov	r1, r9
 800480a:	f7fb fee5 	bl	80005d8 <__aeabi_dsub>
 800480e:	4652      	mov	r2, sl
 8004810:	465b      	mov	r3, fp
 8004812:	4680      	mov	r8, r0
 8004814:	4689      	mov	r9, r1
 8004816:	f7fc fb27 	bl	8000e68 <__aeabi_dcmpgt>
 800481a:	2800      	cmp	r0, #0
 800481c:	f040 8295 	bne.w	8004d4a <_dtoa_r+0x97a>
 8004820:	4652      	mov	r2, sl
 8004822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004826:	4640      	mov	r0, r8
 8004828:	4649      	mov	r1, r9
 800482a:	f7fc faff 	bl	8000e2c <__aeabi_dcmplt>
 800482e:	2800      	cmp	r0, #0
 8004830:	f040 8289 	bne.w	8004d46 <_dtoa_r+0x976>
 8004834:	ec5b ab19 	vmov	sl, fp, d9
 8004838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800483a:	2b00      	cmp	r3, #0
 800483c:	f2c0 8148 	blt.w	8004ad0 <_dtoa_r+0x700>
 8004840:	9a00      	ldr	r2, [sp, #0]
 8004842:	2a0e      	cmp	r2, #14
 8004844:	f300 8144 	bgt.w	8004ad0 <_dtoa_r+0x700>
 8004848:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <_dtoa_r+0x618>)
 800484a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800484e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	f280 80d5 	bge.w	8004a04 <_dtoa_r+0x634>
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f300 80d1 	bgt.w	8004a04 <_dtoa_r+0x634>
 8004862:	f040 826f 	bne.w	8004d44 <_dtoa_r+0x974>
 8004866:	4b65      	ldr	r3, [pc, #404]	; (80049fc <_dtoa_r+0x62c>)
 8004868:	2200      	movs	r2, #0
 800486a:	4640      	mov	r0, r8
 800486c:	4649      	mov	r1, r9
 800486e:	f7fc f86b 	bl	8000948 <__aeabi_dmul>
 8004872:	4652      	mov	r2, sl
 8004874:	465b      	mov	r3, fp
 8004876:	f7fc faed 	bl	8000e54 <__aeabi_dcmpge>
 800487a:	9e03      	ldr	r6, [sp, #12]
 800487c:	4637      	mov	r7, r6
 800487e:	2800      	cmp	r0, #0
 8004880:	f040 8245 	bne.w	8004d0e <_dtoa_r+0x93e>
 8004884:	9d01      	ldr	r5, [sp, #4]
 8004886:	2331      	movs	r3, #49	; 0x31
 8004888:	f805 3b01 	strb.w	r3, [r5], #1
 800488c:	9b00      	ldr	r3, [sp, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	e240      	b.n	8004d16 <_dtoa_r+0x946>
 8004894:	07f2      	lsls	r2, r6, #31
 8004896:	d505      	bpl.n	80048a4 <_dtoa_r+0x4d4>
 8004898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800489c:	f7fc f854 	bl	8000948 <__aeabi_dmul>
 80048a0:	3501      	adds	r5, #1
 80048a2:	2301      	movs	r3, #1
 80048a4:	1076      	asrs	r6, r6, #1
 80048a6:	3708      	adds	r7, #8
 80048a8:	e777      	b.n	800479a <_dtoa_r+0x3ca>
 80048aa:	2502      	movs	r5, #2
 80048ac:	e779      	b.n	80047a2 <_dtoa_r+0x3d2>
 80048ae:	9f00      	ldr	r7, [sp, #0]
 80048b0:	9e03      	ldr	r6, [sp, #12]
 80048b2:	e794      	b.n	80047de <_dtoa_r+0x40e>
 80048b4:	9901      	ldr	r1, [sp, #4]
 80048b6:	4b4c      	ldr	r3, [pc, #304]	; (80049e8 <_dtoa_r+0x618>)
 80048b8:	4431      	add	r1, r6
 80048ba:	910d      	str	r1, [sp, #52]	; 0x34
 80048bc:	9908      	ldr	r1, [sp, #32]
 80048be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048c6:	2900      	cmp	r1, #0
 80048c8:	d043      	beq.n	8004952 <_dtoa_r+0x582>
 80048ca:	494d      	ldr	r1, [pc, #308]	; (8004a00 <_dtoa_r+0x630>)
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fc f965 	bl	8000b9c <__aeabi_ddiv>
 80048d2:	4652      	mov	r2, sl
 80048d4:	465b      	mov	r3, fp
 80048d6:	f7fb fe7f 	bl	80005d8 <__aeabi_dsub>
 80048da:	9d01      	ldr	r5, [sp, #4]
 80048dc:	4682      	mov	sl, r0
 80048de:	468b      	mov	fp, r1
 80048e0:	4649      	mov	r1, r9
 80048e2:	4640      	mov	r0, r8
 80048e4:	f7fc fae0 	bl	8000ea8 <__aeabi_d2iz>
 80048e8:	4606      	mov	r6, r0
 80048ea:	f7fb ffc3 	bl	8000874 <__aeabi_i2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4640      	mov	r0, r8
 80048f4:	4649      	mov	r1, r9
 80048f6:	f7fb fe6f 	bl	80005d8 <__aeabi_dsub>
 80048fa:	3630      	adds	r6, #48	; 0x30
 80048fc:	f805 6b01 	strb.w	r6, [r5], #1
 8004900:	4652      	mov	r2, sl
 8004902:	465b      	mov	r3, fp
 8004904:	4680      	mov	r8, r0
 8004906:	4689      	mov	r9, r1
 8004908:	f7fc fa90 	bl	8000e2c <__aeabi_dcmplt>
 800490c:	2800      	cmp	r0, #0
 800490e:	d163      	bne.n	80049d8 <_dtoa_r+0x608>
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	4936      	ldr	r1, [pc, #216]	; (80049f0 <_dtoa_r+0x620>)
 8004916:	2000      	movs	r0, #0
 8004918:	f7fb fe5e 	bl	80005d8 <__aeabi_dsub>
 800491c:	4652      	mov	r2, sl
 800491e:	465b      	mov	r3, fp
 8004920:	f7fc fa84 	bl	8000e2c <__aeabi_dcmplt>
 8004924:	2800      	cmp	r0, #0
 8004926:	f040 80b5 	bne.w	8004a94 <_dtoa_r+0x6c4>
 800492a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800492c:	429d      	cmp	r5, r3
 800492e:	d081      	beq.n	8004834 <_dtoa_r+0x464>
 8004930:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <_dtoa_r+0x624>)
 8004932:	2200      	movs	r2, #0
 8004934:	4650      	mov	r0, sl
 8004936:	4659      	mov	r1, fp
 8004938:	f7fc f806 	bl	8000948 <__aeabi_dmul>
 800493c:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <_dtoa_r+0x624>)
 800493e:	4682      	mov	sl, r0
 8004940:	468b      	mov	fp, r1
 8004942:	4640      	mov	r0, r8
 8004944:	4649      	mov	r1, r9
 8004946:	2200      	movs	r2, #0
 8004948:	f7fb fffe 	bl	8000948 <__aeabi_dmul>
 800494c:	4680      	mov	r8, r0
 800494e:	4689      	mov	r9, r1
 8004950:	e7c6      	b.n	80048e0 <_dtoa_r+0x510>
 8004952:	4650      	mov	r0, sl
 8004954:	4659      	mov	r1, fp
 8004956:	f7fb fff7 	bl	8000948 <__aeabi_dmul>
 800495a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800495c:	9d01      	ldr	r5, [sp, #4]
 800495e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004960:	4682      	mov	sl, r0
 8004962:	468b      	mov	fp, r1
 8004964:	4649      	mov	r1, r9
 8004966:	4640      	mov	r0, r8
 8004968:	f7fc fa9e 	bl	8000ea8 <__aeabi_d2iz>
 800496c:	4606      	mov	r6, r0
 800496e:	f7fb ff81 	bl	8000874 <__aeabi_i2d>
 8004972:	3630      	adds	r6, #48	; 0x30
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4640      	mov	r0, r8
 800497a:	4649      	mov	r1, r9
 800497c:	f7fb fe2c 	bl	80005d8 <__aeabi_dsub>
 8004980:	f805 6b01 	strb.w	r6, [r5], #1
 8004984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004986:	429d      	cmp	r5, r3
 8004988:	4680      	mov	r8, r0
 800498a:	4689      	mov	r9, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	d124      	bne.n	80049dc <_dtoa_r+0x60c>
 8004992:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <_dtoa_r+0x630>)
 8004994:	4650      	mov	r0, sl
 8004996:	4659      	mov	r1, fp
 8004998:	f7fb fe20 	bl	80005dc <__adddf3>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4640      	mov	r0, r8
 80049a2:	4649      	mov	r1, r9
 80049a4:	f7fc fa60 	bl	8000e68 <__aeabi_dcmpgt>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d173      	bne.n	8004a94 <_dtoa_r+0x6c4>
 80049ac:	4652      	mov	r2, sl
 80049ae:	465b      	mov	r3, fp
 80049b0:	4913      	ldr	r1, [pc, #76]	; (8004a00 <_dtoa_r+0x630>)
 80049b2:	2000      	movs	r0, #0
 80049b4:	f7fb fe10 	bl	80005d8 <__aeabi_dsub>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4640      	mov	r0, r8
 80049be:	4649      	mov	r1, r9
 80049c0:	f7fc fa34 	bl	8000e2c <__aeabi_dcmplt>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f43f af35 	beq.w	8004834 <_dtoa_r+0x464>
 80049ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80049cc:	1e6b      	subs	r3, r5, #1
 80049ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80049d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d0f8      	beq.n	80049ca <_dtoa_r+0x5fa>
 80049d8:	9700      	str	r7, [sp, #0]
 80049da:	e049      	b.n	8004a70 <_dtoa_r+0x6a0>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_dtoa_r+0x624>)
 80049de:	f7fb ffb3 	bl	8000948 <__aeabi_dmul>
 80049e2:	4680      	mov	r8, r0
 80049e4:	4689      	mov	r9, r1
 80049e6:	e7bd      	b.n	8004964 <_dtoa_r+0x594>
 80049e8:	08012938 	.word	0x08012938
 80049ec:	08012910 	.word	0x08012910
 80049f0:	3ff00000 	.word	0x3ff00000
 80049f4:	40240000 	.word	0x40240000
 80049f8:	401c0000 	.word	0x401c0000
 80049fc:	40140000 	.word	0x40140000
 8004a00:	3fe00000 	.word	0x3fe00000
 8004a04:	9d01      	ldr	r5, [sp, #4]
 8004a06:	4656      	mov	r6, sl
 8004a08:	465f      	mov	r7, fp
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4639      	mov	r1, r7
 8004a12:	f7fc f8c3 	bl	8000b9c <__aeabi_ddiv>
 8004a16:	f7fc fa47 	bl	8000ea8 <__aeabi_d2iz>
 8004a1a:	4682      	mov	sl, r0
 8004a1c:	f7fb ff2a 	bl	8000874 <__aeabi_i2d>
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	f7fb ff90 	bl	8000948 <__aeabi_dmul>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004a34:	f7fb fdd0 	bl	80005d8 <__aeabi_dsub>
 8004a38:	f805 6b01 	strb.w	r6, [r5], #1
 8004a3c:	9e01      	ldr	r6, [sp, #4]
 8004a3e:	9f03      	ldr	r7, [sp, #12]
 8004a40:	1bae      	subs	r6, r5, r6
 8004a42:	42b7      	cmp	r7, r6
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	d135      	bne.n	8004ab6 <_dtoa_r+0x6e6>
 8004a4a:	f7fb fdc7 	bl	80005dc <__adddf3>
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	4606      	mov	r6, r0
 8004a54:	460f      	mov	r7, r1
 8004a56:	f7fc fa07 	bl	8000e68 <__aeabi_dcmpgt>
 8004a5a:	b9d0      	cbnz	r0, 8004a92 <_dtoa_r+0x6c2>
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	4630      	mov	r0, r6
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fc f9d8 	bl	8000e18 <__aeabi_dcmpeq>
 8004a68:	b110      	cbz	r0, 8004a70 <_dtoa_r+0x6a0>
 8004a6a:	f01a 0f01 	tst.w	sl, #1
 8004a6e:	d110      	bne.n	8004a92 <_dtoa_r+0x6c2>
 8004a70:	4620      	mov	r0, r4
 8004a72:	ee18 1a10 	vmov	r1, s16
 8004a76:	f000 fd37 	bl	80054e8 <_Bfree>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9800      	ldr	r0, [sp, #0]
 8004a7e:	702b      	strb	r3, [r5, #0]
 8004a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a82:	3001      	adds	r0, #1
 8004a84:	6018      	str	r0, [r3, #0]
 8004a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f43f acf1 	beq.w	8004470 <_dtoa_r+0xa0>
 8004a8e:	601d      	str	r5, [r3, #0]
 8004a90:	e4ee      	b.n	8004470 <_dtoa_r+0xa0>
 8004a92:	9f00      	ldr	r7, [sp, #0]
 8004a94:	462b      	mov	r3, r5
 8004a96:	461d      	mov	r5, r3
 8004a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a9c:	2a39      	cmp	r2, #57	; 0x39
 8004a9e:	d106      	bne.n	8004aae <_dtoa_r+0x6de>
 8004aa0:	9a01      	ldr	r2, [sp, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d1f7      	bne.n	8004a96 <_dtoa_r+0x6c6>
 8004aa6:	9901      	ldr	r1, [sp, #4]
 8004aa8:	2230      	movs	r2, #48	; 0x30
 8004aaa:	3701      	adds	r7, #1
 8004aac:	700a      	strb	r2, [r1, #0]
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	3201      	adds	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e790      	b.n	80049d8 <_dtoa_r+0x608>
 8004ab6:	4ba6      	ldr	r3, [pc, #664]	; (8004d50 <_dtoa_r+0x980>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f7fb ff45 	bl	8000948 <__aeabi_dmul>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460f      	mov	r7, r1
 8004ac6:	f7fc f9a7 	bl	8000e18 <__aeabi_dcmpeq>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d09d      	beq.n	8004a0a <_dtoa_r+0x63a>
 8004ace:	e7cf      	b.n	8004a70 <_dtoa_r+0x6a0>
 8004ad0:	9a08      	ldr	r2, [sp, #32]
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	f000 80d7 	beq.w	8004c86 <_dtoa_r+0x8b6>
 8004ad8:	9a06      	ldr	r2, [sp, #24]
 8004ada:	2a01      	cmp	r2, #1
 8004adc:	f300 80ba 	bgt.w	8004c54 <_dtoa_r+0x884>
 8004ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	f000 80b2 	beq.w	8004c4c <_dtoa_r+0x87c>
 8004ae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004aec:	9e07      	ldr	r6, [sp, #28]
 8004aee:	9d04      	ldr	r5, [sp, #16]
 8004af0:	9a04      	ldr	r2, [sp, #16]
 8004af2:	441a      	add	r2, r3
 8004af4:	9204      	str	r2, [sp, #16]
 8004af6:	9a05      	ldr	r2, [sp, #20]
 8004af8:	2101      	movs	r1, #1
 8004afa:	441a      	add	r2, r3
 8004afc:	4620      	mov	r0, r4
 8004afe:	9205      	str	r2, [sp, #20]
 8004b00:	f000 fdaa 	bl	8005658 <__i2b>
 8004b04:	4607      	mov	r7, r0
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	dd0c      	ble.n	8004b24 <_dtoa_r+0x754>
 8004b0a:	9b05      	ldr	r3, [sp, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dd09      	ble.n	8004b24 <_dtoa_r+0x754>
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	bfa8      	it	ge
 8004b16:	462b      	movge	r3, r5
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	9204      	str	r2, [sp, #16]
 8004b1c:	9a05      	ldr	r2, [sp, #20]
 8004b1e:	1aed      	subs	r5, r5, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	9b07      	ldr	r3, [sp, #28]
 8004b26:	b31b      	cbz	r3, 8004b70 <_dtoa_r+0x7a0>
 8004b28:	9b08      	ldr	r3, [sp, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80af 	beq.w	8004c8e <_dtoa_r+0x8be>
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	dd13      	ble.n	8004b5c <_dtoa_r+0x78c>
 8004b34:	4639      	mov	r1, r7
 8004b36:	4632      	mov	r2, r6
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 fe4d 	bl	80057d8 <__pow5mult>
 8004b3e:	ee18 2a10 	vmov	r2, s16
 8004b42:	4601      	mov	r1, r0
 8004b44:	4607      	mov	r7, r0
 8004b46:	4620      	mov	r0, r4
 8004b48:	f000 fd9c 	bl	8005684 <__multiply>
 8004b4c:	ee18 1a10 	vmov	r1, s16
 8004b50:	4680      	mov	r8, r0
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 fcc8 	bl	80054e8 <_Bfree>
 8004b58:	ee08 8a10 	vmov	s16, r8
 8004b5c:	9b07      	ldr	r3, [sp, #28]
 8004b5e:	1b9a      	subs	r2, r3, r6
 8004b60:	d006      	beq.n	8004b70 <_dtoa_r+0x7a0>
 8004b62:	ee18 1a10 	vmov	r1, s16
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 fe36 	bl	80057d8 <__pow5mult>
 8004b6c:	ee08 0a10 	vmov	s16, r0
 8004b70:	2101      	movs	r1, #1
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fd70 	bl	8005658 <__i2b>
 8004b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	f340 8088 	ble.w	8004c92 <_dtoa_r+0x8c2>
 8004b82:	461a      	mov	r2, r3
 8004b84:	4601      	mov	r1, r0
 8004b86:	4620      	mov	r0, r4
 8004b88:	f000 fe26 	bl	80057d8 <__pow5mult>
 8004b8c:	9b06      	ldr	r3, [sp, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	4606      	mov	r6, r0
 8004b92:	f340 8081 	ble.w	8004c98 <_dtoa_r+0x8c8>
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	6933      	ldr	r3, [r6, #16]
 8004b9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ba0:	6918      	ldr	r0, [r3, #16]
 8004ba2:	f000 fd09 	bl	80055b8 <__hi0bits>
 8004ba6:	f1c0 0020 	rsb	r0, r0, #32
 8004baa:	9b05      	ldr	r3, [sp, #20]
 8004bac:	4418      	add	r0, r3
 8004bae:	f010 001f 	ands.w	r0, r0, #31
 8004bb2:	f000 8092 	beq.w	8004cda <_dtoa_r+0x90a>
 8004bb6:	f1c0 0320 	rsb	r3, r0, #32
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	f340 808a 	ble.w	8004cd4 <_dtoa_r+0x904>
 8004bc0:	f1c0 001c 	rsb	r0, r0, #28
 8004bc4:	9b04      	ldr	r3, [sp, #16]
 8004bc6:	4403      	add	r3, r0
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	9b05      	ldr	r3, [sp, #20]
 8004bcc:	4403      	add	r3, r0
 8004bce:	4405      	add	r5, r0
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	9b04      	ldr	r3, [sp, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dd07      	ble.n	8004be8 <_dtoa_r+0x818>
 8004bd8:	ee18 1a10 	vmov	r1, s16
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 fe54 	bl	800588c <__lshift>
 8004be4:	ee08 0a10 	vmov	s16, r0
 8004be8:	9b05      	ldr	r3, [sp, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dd05      	ble.n	8004bfa <_dtoa_r+0x82a>
 8004bee:	4631      	mov	r1, r6
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 fe4a 	bl	800588c <__lshift>
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d06e      	beq.n	8004cde <_dtoa_r+0x90e>
 8004c00:	ee18 0a10 	vmov	r0, s16
 8004c04:	4631      	mov	r1, r6
 8004c06:	f000 feb1 	bl	800596c <__mcmp>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	da67      	bge.n	8004cde <_dtoa_r+0x90e>
 8004c0e:	9b00      	ldr	r3, [sp, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	ee18 1a10 	vmov	r1, s16
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	220a      	movs	r2, #10
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f000 fc85 	bl	800552c <__multadd>
 8004c22:	9b08      	ldr	r3, [sp, #32]
 8004c24:	ee08 0a10 	vmov	s16, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 81b1 	beq.w	8004f90 <_dtoa_r+0xbc0>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4639      	mov	r1, r7
 8004c32:	220a      	movs	r2, #10
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 fc79 	bl	800552c <__multadd>
 8004c3a:	9b02      	ldr	r3, [sp, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	4607      	mov	r7, r0
 8004c40:	f300 808e 	bgt.w	8004d60 <_dtoa_r+0x990>
 8004c44:	9b06      	ldr	r3, [sp, #24]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	dc51      	bgt.n	8004cee <_dtoa_r+0x91e>
 8004c4a:	e089      	b.n	8004d60 <_dtoa_r+0x990>
 8004c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c52:	e74b      	b.n	8004aec <_dtoa_r+0x71c>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	1e5e      	subs	r6, r3, #1
 8004c58:	9b07      	ldr	r3, [sp, #28]
 8004c5a:	42b3      	cmp	r3, r6
 8004c5c:	bfbf      	itttt	lt
 8004c5e:	9b07      	ldrlt	r3, [sp, #28]
 8004c60:	9607      	strlt	r6, [sp, #28]
 8004c62:	1af2      	sublt	r2, r6, r3
 8004c64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c66:	bfb6      	itet	lt
 8004c68:	189b      	addlt	r3, r3, r2
 8004c6a:	1b9e      	subge	r6, r3, r6
 8004c6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	bfb8      	it	lt
 8004c72:	2600      	movlt	r6, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfb7      	itett	lt
 8004c78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004c7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004c80:	1a9d      	sublt	r5, r3, r2
 8004c82:	2300      	movlt	r3, #0
 8004c84:	e734      	b.n	8004af0 <_dtoa_r+0x720>
 8004c86:	9e07      	ldr	r6, [sp, #28]
 8004c88:	9d04      	ldr	r5, [sp, #16]
 8004c8a:	9f08      	ldr	r7, [sp, #32]
 8004c8c:	e73b      	b.n	8004b06 <_dtoa_r+0x736>
 8004c8e:	9a07      	ldr	r2, [sp, #28]
 8004c90:	e767      	b.n	8004b62 <_dtoa_r+0x792>
 8004c92:	9b06      	ldr	r3, [sp, #24]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	dc18      	bgt.n	8004cca <_dtoa_r+0x8fa>
 8004c98:	f1ba 0f00 	cmp.w	sl, #0
 8004c9c:	d115      	bne.n	8004cca <_dtoa_r+0x8fa>
 8004c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ca2:	b993      	cbnz	r3, 8004cca <_dtoa_r+0x8fa>
 8004ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ca8:	0d1b      	lsrs	r3, r3, #20
 8004caa:	051b      	lsls	r3, r3, #20
 8004cac:	b183      	cbz	r3, 8004cd0 <_dtoa_r+0x900>
 8004cae:	9b04      	ldr	r3, [sp, #16]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	9304      	str	r3, [sp, #16]
 8004cb4:	9b05      	ldr	r3, [sp, #20]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	9305      	str	r3, [sp, #20]
 8004cba:	f04f 0801 	mov.w	r8, #1
 8004cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f af6a 	bne.w	8004b9a <_dtoa_r+0x7ca>
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	e76f      	b.n	8004baa <_dtoa_r+0x7da>
 8004cca:	f04f 0800 	mov.w	r8, #0
 8004cce:	e7f6      	b.n	8004cbe <_dtoa_r+0x8ee>
 8004cd0:	4698      	mov	r8, r3
 8004cd2:	e7f4      	b.n	8004cbe <_dtoa_r+0x8ee>
 8004cd4:	f43f af7d 	beq.w	8004bd2 <_dtoa_r+0x802>
 8004cd8:	4618      	mov	r0, r3
 8004cda:	301c      	adds	r0, #28
 8004cdc:	e772      	b.n	8004bc4 <_dtoa_r+0x7f4>
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dc37      	bgt.n	8004d54 <_dtoa_r+0x984>
 8004ce4:	9b06      	ldr	r3, [sp, #24]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	dd34      	ble.n	8004d54 <_dtoa_r+0x984>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	9302      	str	r3, [sp, #8]
 8004cee:	9b02      	ldr	r3, [sp, #8]
 8004cf0:	b96b      	cbnz	r3, 8004d0e <_dtoa_r+0x93e>
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f000 fc18 	bl	800552c <__multadd>
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	4606      	mov	r6, r0
 8004d00:	ee18 0a10 	vmov	r0, s16
 8004d04:	f000 fe32 	bl	800596c <__mcmp>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	f73f adbb 	bgt.w	8004884 <_dtoa_r+0x4b4>
 8004d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d10:	9d01      	ldr	r5, [sp, #4]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 fbe3 	bl	80054e8 <_Bfree>
 8004d22:	2f00      	cmp	r7, #0
 8004d24:	f43f aea4 	beq.w	8004a70 <_dtoa_r+0x6a0>
 8004d28:	f1b8 0f00 	cmp.w	r8, #0
 8004d2c:	d005      	beq.n	8004d3a <_dtoa_r+0x96a>
 8004d2e:	45b8      	cmp	r8, r7
 8004d30:	d003      	beq.n	8004d3a <_dtoa_r+0x96a>
 8004d32:	4641      	mov	r1, r8
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 fbd7 	bl	80054e8 <_Bfree>
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f000 fbd3 	bl	80054e8 <_Bfree>
 8004d42:	e695      	b.n	8004a70 <_dtoa_r+0x6a0>
 8004d44:	2600      	movs	r6, #0
 8004d46:	4637      	mov	r7, r6
 8004d48:	e7e1      	b.n	8004d0e <_dtoa_r+0x93e>
 8004d4a:	9700      	str	r7, [sp, #0]
 8004d4c:	4637      	mov	r7, r6
 8004d4e:	e599      	b.n	8004884 <_dtoa_r+0x4b4>
 8004d50:	40240000 	.word	0x40240000
 8004d54:	9b08      	ldr	r3, [sp, #32]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80ca 	beq.w	8004ef0 <_dtoa_r+0xb20>
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	9302      	str	r3, [sp, #8]
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	dd05      	ble.n	8004d70 <_dtoa_r+0x9a0>
 8004d64:	4639      	mov	r1, r7
 8004d66:	462a      	mov	r2, r5
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fd8f 	bl	800588c <__lshift>
 8004d6e:	4607      	mov	r7, r0
 8004d70:	f1b8 0f00 	cmp.w	r8, #0
 8004d74:	d05b      	beq.n	8004e2e <_dtoa_r+0xa5e>
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 fb75 	bl	8005468 <_Balloc>
 8004d7e:	4605      	mov	r5, r0
 8004d80:	b928      	cbnz	r0, 8004d8e <_dtoa_r+0x9be>
 8004d82:	4b87      	ldr	r3, [pc, #540]	; (8004fa0 <_dtoa_r+0xbd0>)
 8004d84:	4602      	mov	r2, r0
 8004d86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d8a:	f7ff bb3b 	b.w	8004404 <_dtoa_r+0x34>
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	3202      	adds	r2, #2
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	f107 010c 	add.w	r1, r7, #12
 8004d98:	300c      	adds	r0, #12
 8004d9a:	f000 fb57 	bl	800544c <memcpy>
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4629      	mov	r1, r5
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 fd72 	bl	800588c <__lshift>
 8004da8:	9b01      	ldr	r3, [sp, #4]
 8004daa:	f103 0901 	add.w	r9, r3, #1
 8004dae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	9305      	str	r3, [sp, #20]
 8004db6:	f00a 0301 	and.w	r3, sl, #1
 8004dba:	46b8      	mov	r8, r7
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	ee18 0a10 	vmov	r0, s16
 8004dc6:	f7ff fa77 	bl	80042b8 <quorem>
 8004dca:	4641      	mov	r1, r8
 8004dcc:	9002      	str	r0, [sp, #8]
 8004dce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004dd2:	ee18 0a10 	vmov	r0, s16
 8004dd6:	f000 fdc9 	bl	800596c <__mcmp>
 8004dda:	463a      	mov	r2, r7
 8004ddc:	9003      	str	r0, [sp, #12]
 8004dde:	4631      	mov	r1, r6
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fddf 	bl	80059a4 <__mdiff>
 8004de6:	68c2      	ldr	r2, [r0, #12]
 8004de8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004dec:	4605      	mov	r5, r0
 8004dee:	bb02      	cbnz	r2, 8004e32 <_dtoa_r+0xa62>
 8004df0:	4601      	mov	r1, r0
 8004df2:	ee18 0a10 	vmov	r0, s16
 8004df6:	f000 fdb9 	bl	800596c <__mcmp>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4620      	mov	r0, r4
 8004e00:	9207      	str	r2, [sp, #28]
 8004e02:	f000 fb71 	bl	80054e8 <_Bfree>
 8004e06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004e0a:	ea43 0102 	orr.w	r1, r3, r2
 8004e0e:	9b04      	ldr	r3, [sp, #16]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	464d      	mov	r5, r9
 8004e14:	d10f      	bne.n	8004e36 <_dtoa_r+0xa66>
 8004e16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e1a:	d02a      	beq.n	8004e72 <_dtoa_r+0xaa2>
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	dd02      	ble.n	8004e28 <_dtoa_r+0xa58>
 8004e22:	9b02      	ldr	r3, [sp, #8]
 8004e24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004e28:	f88b a000 	strb.w	sl, [fp]
 8004e2c:	e775      	b.n	8004d1a <_dtoa_r+0x94a>
 8004e2e:	4638      	mov	r0, r7
 8004e30:	e7ba      	b.n	8004da8 <_dtoa_r+0x9d8>
 8004e32:	2201      	movs	r2, #1
 8004e34:	e7e2      	b.n	8004dfc <_dtoa_r+0xa2c>
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db04      	blt.n	8004e46 <_dtoa_r+0xa76>
 8004e3c:	9906      	ldr	r1, [sp, #24]
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	9904      	ldr	r1, [sp, #16]
 8004e42:	430b      	orrs	r3, r1
 8004e44:	d122      	bne.n	8004e8c <_dtoa_r+0xabc>
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	ddee      	ble.n	8004e28 <_dtoa_r+0xa58>
 8004e4a:	ee18 1a10 	vmov	r1, s16
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4620      	mov	r0, r4
 8004e52:	f000 fd1b 	bl	800588c <__lshift>
 8004e56:	4631      	mov	r1, r6
 8004e58:	ee08 0a10 	vmov	s16, r0
 8004e5c:	f000 fd86 	bl	800596c <__mcmp>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	dc03      	bgt.n	8004e6c <_dtoa_r+0xa9c>
 8004e64:	d1e0      	bne.n	8004e28 <_dtoa_r+0xa58>
 8004e66:	f01a 0f01 	tst.w	sl, #1
 8004e6a:	d0dd      	beq.n	8004e28 <_dtoa_r+0xa58>
 8004e6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e70:	d1d7      	bne.n	8004e22 <_dtoa_r+0xa52>
 8004e72:	2339      	movs	r3, #57	; 0x39
 8004e74:	f88b 3000 	strb.w	r3, [fp]
 8004e78:	462b      	mov	r3, r5
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e82:	2a39      	cmp	r2, #57	; 0x39
 8004e84:	d071      	beq.n	8004f6a <_dtoa_r+0xb9a>
 8004e86:	3201      	adds	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e746      	b.n	8004d1a <_dtoa_r+0x94a>
 8004e8c:	2a00      	cmp	r2, #0
 8004e8e:	dd07      	ble.n	8004ea0 <_dtoa_r+0xad0>
 8004e90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e94:	d0ed      	beq.n	8004e72 <_dtoa_r+0xaa2>
 8004e96:	f10a 0301 	add.w	r3, sl, #1
 8004e9a:	f88b 3000 	strb.w	r3, [fp]
 8004e9e:	e73c      	b.n	8004d1a <_dtoa_r+0x94a>
 8004ea0:	9b05      	ldr	r3, [sp, #20]
 8004ea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004ea6:	4599      	cmp	r9, r3
 8004ea8:	d047      	beq.n	8004f3a <_dtoa_r+0xb6a>
 8004eaa:	ee18 1a10 	vmov	r1, s16
 8004eae:	2300      	movs	r3, #0
 8004eb0:	220a      	movs	r2, #10
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f000 fb3a 	bl	800552c <__multadd>
 8004eb8:	45b8      	cmp	r8, r7
 8004eba:	ee08 0a10 	vmov	s16, r0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	f04f 020a 	mov.w	r2, #10
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	4620      	mov	r0, r4
 8004eca:	d106      	bne.n	8004eda <_dtoa_r+0xb0a>
 8004ecc:	f000 fb2e 	bl	800552c <__multadd>
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	f109 0901 	add.w	r9, r9, #1
 8004ed8:	e772      	b.n	8004dc0 <_dtoa_r+0x9f0>
 8004eda:	f000 fb27 	bl	800552c <__multadd>
 8004ede:	4639      	mov	r1, r7
 8004ee0:	4680      	mov	r8, r0
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	220a      	movs	r2, #10
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 fb20 	bl	800552c <__multadd>
 8004eec:	4607      	mov	r7, r0
 8004eee:	e7f1      	b.n	8004ed4 <_dtoa_r+0xb04>
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	9d01      	ldr	r5, [sp, #4]
 8004ef6:	ee18 0a10 	vmov	r0, s16
 8004efa:	4631      	mov	r1, r6
 8004efc:	f7ff f9dc 	bl	80042b8 <quorem>
 8004f00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	f805 ab01 	strb.w	sl, [r5], #1
 8004f0a:	1aea      	subs	r2, r5, r3
 8004f0c:	9b02      	ldr	r3, [sp, #8]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	dd09      	ble.n	8004f26 <_dtoa_r+0xb56>
 8004f12:	ee18 1a10 	vmov	r1, s16
 8004f16:	2300      	movs	r3, #0
 8004f18:	220a      	movs	r2, #10
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 fb06 	bl	800552c <__multadd>
 8004f20:	ee08 0a10 	vmov	s16, r0
 8004f24:	e7e7      	b.n	8004ef6 <_dtoa_r+0xb26>
 8004f26:	9b02      	ldr	r3, [sp, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bfc8      	it	gt
 8004f2c:	461d      	movgt	r5, r3
 8004f2e:	9b01      	ldr	r3, [sp, #4]
 8004f30:	bfd8      	it	le
 8004f32:	2501      	movle	r5, #1
 8004f34:	441d      	add	r5, r3
 8004f36:	f04f 0800 	mov.w	r8, #0
 8004f3a:	ee18 1a10 	vmov	r1, s16
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fca3 	bl	800588c <__lshift>
 8004f46:	4631      	mov	r1, r6
 8004f48:	ee08 0a10 	vmov	s16, r0
 8004f4c:	f000 fd0e 	bl	800596c <__mcmp>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	dc91      	bgt.n	8004e78 <_dtoa_r+0xaa8>
 8004f54:	d102      	bne.n	8004f5c <_dtoa_r+0xb8c>
 8004f56:	f01a 0f01 	tst.w	sl, #1
 8004f5a:	d18d      	bne.n	8004e78 <_dtoa_r+0xaa8>
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	461d      	mov	r5, r3
 8004f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f64:	2a30      	cmp	r2, #48	; 0x30
 8004f66:	d0fa      	beq.n	8004f5e <_dtoa_r+0xb8e>
 8004f68:	e6d7      	b.n	8004d1a <_dtoa_r+0x94a>
 8004f6a:	9a01      	ldr	r2, [sp, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d184      	bne.n	8004e7a <_dtoa_r+0xaaa>
 8004f70:	9b00      	ldr	r3, [sp, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2331      	movs	r3, #49	; 0x31
 8004f78:	7013      	strb	r3, [r2, #0]
 8004f7a:	e6ce      	b.n	8004d1a <_dtoa_r+0x94a>
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <_dtoa_r+0xbd4>)
 8004f7e:	f7ff ba95 	b.w	80044ac <_dtoa_r+0xdc>
 8004f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f aa6e 	bne.w	8004466 <_dtoa_r+0x96>
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <_dtoa_r+0xbd8>)
 8004f8c:	f7ff ba8e 	b.w	80044ac <_dtoa_r+0xdc>
 8004f90:	9b02      	ldr	r3, [sp, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dcae      	bgt.n	8004ef4 <_dtoa_r+0xb24>
 8004f96:	9b06      	ldr	r3, [sp, #24]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	f73f aea8 	bgt.w	8004cee <_dtoa_r+0x91e>
 8004f9e:	e7a9      	b.n	8004ef4 <_dtoa_r+0xb24>
 8004fa0:	0801281a 	.word	0x0801281a
 8004fa4:	0800859b 	.word	0x0800859b
 8004fa8:	08012790 	.word	0x08012790

08004fac <__sflush_r>:
 8004fac:	898a      	ldrh	r2, [r1, #12]
 8004fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	0710      	lsls	r0, r2, #28
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	d458      	bmi.n	800506c <__sflush_r+0xc0>
 8004fba:	684b      	ldr	r3, [r1, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dc05      	bgt.n	8004fcc <__sflush_r+0x20>
 8004fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dc02      	bgt.n	8004fcc <__sflush_r+0x20>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	d0f9      	beq.n	8004fc6 <__sflush_r+0x1a>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fd8:	682f      	ldr	r7, [r5, #0]
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	d032      	beq.n	8005044 <__sflush_r+0x98>
 8004fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	075a      	lsls	r2, r3, #29
 8004fe4:	d505      	bpl.n	8004ff2 <__sflush_r+0x46>
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	1ac0      	subs	r0, r0, r3
 8004fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fec:	b10b      	cbz	r3, 8004ff2 <__sflush_r+0x46>
 8004fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff0:	1ac0      	subs	r0, r0, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff8:	6a21      	ldr	r1, [r4, #32]
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b0      	blx	r6
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	d106      	bne.n	8005012 <__sflush_r+0x66>
 8005004:	6829      	ldr	r1, [r5, #0]
 8005006:	291d      	cmp	r1, #29
 8005008:	d82c      	bhi.n	8005064 <__sflush_r+0xb8>
 800500a:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <__sflush_r+0x108>)
 800500c:	40ca      	lsrs	r2, r1
 800500e:	07d6      	lsls	r6, r2, #31
 8005010:	d528      	bpl.n	8005064 <__sflush_r+0xb8>
 8005012:	2200      	movs	r2, #0
 8005014:	6062      	str	r2, [r4, #4]
 8005016:	04d9      	lsls	r1, r3, #19
 8005018:	6922      	ldr	r2, [r4, #16]
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	d504      	bpl.n	8005028 <__sflush_r+0x7c>
 800501e:	1c42      	adds	r2, r0, #1
 8005020:	d101      	bne.n	8005026 <__sflush_r+0x7a>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	b903      	cbnz	r3, 8005028 <__sflush_r+0x7c>
 8005026:	6560      	str	r0, [r4, #84]	; 0x54
 8005028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800502a:	602f      	str	r7, [r5, #0]
 800502c:	2900      	cmp	r1, #0
 800502e:	d0ca      	beq.n	8004fc6 <__sflush_r+0x1a>
 8005030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005034:	4299      	cmp	r1, r3
 8005036:	d002      	beq.n	800503e <__sflush_r+0x92>
 8005038:	4628      	mov	r0, r5
 800503a:	f000 fda9 	bl	8005b90 <_free_r>
 800503e:	2000      	movs	r0, #0
 8005040:	6360      	str	r0, [r4, #52]	; 0x34
 8005042:	e7c1      	b.n	8004fc8 <__sflush_r+0x1c>
 8005044:	6a21      	ldr	r1, [r4, #32]
 8005046:	2301      	movs	r3, #1
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	1c41      	adds	r1, r0, #1
 800504e:	d1c7      	bne.n	8004fe0 <__sflush_r+0x34>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0c4      	beq.n	8004fe0 <__sflush_r+0x34>
 8005056:	2b1d      	cmp	r3, #29
 8005058:	d001      	beq.n	800505e <__sflush_r+0xb2>
 800505a:	2b16      	cmp	r3, #22
 800505c:	d101      	bne.n	8005062 <__sflush_r+0xb6>
 800505e:	602f      	str	r7, [r5, #0]
 8005060:	e7b1      	b.n	8004fc6 <__sflush_r+0x1a>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	e7ad      	b.n	8004fc8 <__sflush_r+0x1c>
 800506c:	690f      	ldr	r7, [r1, #16]
 800506e:	2f00      	cmp	r7, #0
 8005070:	d0a9      	beq.n	8004fc6 <__sflush_r+0x1a>
 8005072:	0793      	lsls	r3, r2, #30
 8005074:	680e      	ldr	r6, [r1, #0]
 8005076:	bf08      	it	eq
 8005078:	694b      	ldreq	r3, [r1, #20]
 800507a:	600f      	str	r7, [r1, #0]
 800507c:	bf18      	it	ne
 800507e:	2300      	movne	r3, #0
 8005080:	eba6 0807 	sub.w	r8, r6, r7
 8005084:	608b      	str	r3, [r1, #8]
 8005086:	f1b8 0f00 	cmp.w	r8, #0
 800508a:	dd9c      	ble.n	8004fc6 <__sflush_r+0x1a>
 800508c:	6a21      	ldr	r1, [r4, #32]
 800508e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005090:	4643      	mov	r3, r8
 8005092:	463a      	mov	r2, r7
 8005094:	4628      	mov	r0, r5
 8005096:	47b0      	blx	r6
 8005098:	2800      	cmp	r0, #0
 800509a:	dc06      	bgt.n	80050aa <__sflush_r+0xfe>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a8:	e78e      	b.n	8004fc8 <__sflush_r+0x1c>
 80050aa:	4407      	add	r7, r0
 80050ac:	eba8 0800 	sub.w	r8, r8, r0
 80050b0:	e7e9      	b.n	8005086 <__sflush_r+0xda>
 80050b2:	bf00      	nop
 80050b4:	20400001 	.word	0x20400001

080050b8 <_fflush_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	690b      	ldr	r3, [r1, #16]
 80050bc:	4605      	mov	r5, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	b913      	cbnz	r3, 80050c8 <_fflush_r+0x10>
 80050c2:	2500      	movs	r5, #0
 80050c4:	4628      	mov	r0, r5
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	b118      	cbz	r0, 80050d2 <_fflush_r+0x1a>
 80050ca:	6983      	ldr	r3, [r0, #24]
 80050cc:	b90b      	cbnz	r3, 80050d2 <_fflush_r+0x1a>
 80050ce:	f000 f887 	bl	80051e0 <__sinit>
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <_fflush_r+0x6c>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d11b      	bne.n	8005110 <_fflush_r+0x58>
 80050d8:	686c      	ldr	r4, [r5, #4]
 80050da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ef      	beq.n	80050c2 <_fflush_r+0xa>
 80050e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050e4:	07d0      	lsls	r0, r2, #31
 80050e6:	d404      	bmi.n	80050f2 <_fflush_r+0x3a>
 80050e8:	0599      	lsls	r1, r3, #22
 80050ea:	d402      	bmi.n	80050f2 <_fflush_r+0x3a>
 80050ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ee:	f000 f92c 	bl	800534a <__retarget_lock_acquire_recursive>
 80050f2:	4628      	mov	r0, r5
 80050f4:	4621      	mov	r1, r4
 80050f6:	f7ff ff59 	bl	8004fac <__sflush_r>
 80050fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050fc:	07da      	lsls	r2, r3, #31
 80050fe:	4605      	mov	r5, r0
 8005100:	d4e0      	bmi.n	80050c4 <_fflush_r+0xc>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	059b      	lsls	r3, r3, #22
 8005106:	d4dd      	bmi.n	80050c4 <_fflush_r+0xc>
 8005108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510a:	f000 f91f 	bl	800534c <__retarget_lock_release_recursive>
 800510e:	e7d9      	b.n	80050c4 <_fflush_r+0xc>
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <_fflush_r+0x70>)
 8005112:	429c      	cmp	r4, r3
 8005114:	d101      	bne.n	800511a <_fflush_r+0x62>
 8005116:	68ac      	ldr	r4, [r5, #8]
 8005118:	e7df      	b.n	80050da <_fflush_r+0x22>
 800511a:	4b04      	ldr	r3, [pc, #16]	; (800512c <_fflush_r+0x74>)
 800511c:	429c      	cmp	r4, r3
 800511e:	bf08      	it	eq
 8005120:	68ec      	ldreq	r4, [r5, #12]
 8005122:	e7da      	b.n	80050da <_fflush_r+0x22>
 8005124:	0801284c 	.word	0x0801284c
 8005128:	0801286c 	.word	0x0801286c
 800512c:	0801282c 	.word	0x0801282c

08005130 <std>:
 8005130:	2300      	movs	r3, #0
 8005132:	b510      	push	{r4, lr}
 8005134:	4604      	mov	r4, r0
 8005136:	e9c0 3300 	strd	r3, r3, [r0]
 800513a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800513e:	6083      	str	r3, [r0, #8]
 8005140:	8181      	strh	r1, [r0, #12]
 8005142:	6643      	str	r3, [r0, #100]	; 0x64
 8005144:	81c2      	strh	r2, [r0, #14]
 8005146:	6183      	str	r3, [r0, #24]
 8005148:	4619      	mov	r1, r3
 800514a:	2208      	movs	r2, #8
 800514c:	305c      	adds	r0, #92	; 0x5c
 800514e:	f7fe f8c5 	bl	80032dc <memset>
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <std+0x38>)
 8005154:	6263      	str	r3, [r4, #36]	; 0x24
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <std+0x3c>)
 8005158:	62a3      	str	r3, [r4, #40]	; 0x28
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <std+0x40>)
 800515c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <std+0x44>)
 8005160:	6224      	str	r4, [r4, #32]
 8005162:	6323      	str	r3, [r4, #48]	; 0x30
 8005164:	bd10      	pop	{r4, pc}
 8005166:	bf00      	nop
 8005168:	080062d9 	.word	0x080062d9
 800516c:	080062fb 	.word	0x080062fb
 8005170:	08006333 	.word	0x08006333
 8005174:	08006357 	.word	0x08006357

08005178 <_cleanup_r>:
 8005178:	4901      	ldr	r1, [pc, #4]	; (8005180 <_cleanup_r+0x8>)
 800517a:	f000 b8c1 	b.w	8005300 <_fwalk_reent>
 800517e:	bf00      	nop
 8005180:	080050b9 	.word	0x080050b9

08005184 <__sfmoreglue>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	2268      	movs	r2, #104	; 0x68
 8005188:	1e4d      	subs	r5, r1, #1
 800518a:	4355      	muls	r5, r2
 800518c:	460e      	mov	r6, r1
 800518e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005192:	f000 fd49 	bl	8005c28 <_malloc_r>
 8005196:	4604      	mov	r4, r0
 8005198:	b140      	cbz	r0, 80051ac <__sfmoreglue+0x28>
 800519a:	2100      	movs	r1, #0
 800519c:	e9c0 1600 	strd	r1, r6, [r0]
 80051a0:	300c      	adds	r0, #12
 80051a2:	60a0      	str	r0, [r4, #8]
 80051a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051a8:	f7fe f898 	bl	80032dc <memset>
 80051ac:	4620      	mov	r0, r4
 80051ae:	bd70      	pop	{r4, r5, r6, pc}

080051b0 <__sfp_lock_acquire>:
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <__sfp_lock_acquire+0x8>)
 80051b2:	f000 b8ca 	b.w	800534a <__retarget_lock_acquire_recursive>
 80051b6:	bf00      	nop
 80051b8:	20000d4d 	.word	0x20000d4d

080051bc <__sfp_lock_release>:
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <__sfp_lock_release+0x8>)
 80051be:	f000 b8c5 	b.w	800534c <__retarget_lock_release_recursive>
 80051c2:	bf00      	nop
 80051c4:	20000d4d 	.word	0x20000d4d

080051c8 <__sinit_lock_acquire>:
 80051c8:	4801      	ldr	r0, [pc, #4]	; (80051d0 <__sinit_lock_acquire+0x8>)
 80051ca:	f000 b8be 	b.w	800534a <__retarget_lock_acquire_recursive>
 80051ce:	bf00      	nop
 80051d0:	20000d4e 	.word	0x20000d4e

080051d4 <__sinit_lock_release>:
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <__sinit_lock_release+0x8>)
 80051d6:	f000 b8b9 	b.w	800534c <__retarget_lock_release_recursive>
 80051da:	bf00      	nop
 80051dc:	20000d4e 	.word	0x20000d4e

080051e0 <__sinit>:
 80051e0:	b510      	push	{r4, lr}
 80051e2:	4604      	mov	r4, r0
 80051e4:	f7ff fff0 	bl	80051c8 <__sinit_lock_acquire>
 80051e8:	69a3      	ldr	r3, [r4, #24]
 80051ea:	b11b      	cbz	r3, 80051f4 <__sinit+0x14>
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	f7ff bff0 	b.w	80051d4 <__sinit_lock_release>
 80051f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051f8:	6523      	str	r3, [r4, #80]	; 0x50
 80051fa:	4b13      	ldr	r3, [pc, #76]	; (8005248 <__sinit+0x68>)
 80051fc:	4a13      	ldr	r2, [pc, #76]	; (800524c <__sinit+0x6c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	62a2      	str	r2, [r4, #40]	; 0x28
 8005202:	42a3      	cmp	r3, r4
 8005204:	bf04      	itt	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	61a3      	streq	r3, [r4, #24]
 800520a:	4620      	mov	r0, r4
 800520c:	f000 f820 	bl	8005250 <__sfp>
 8005210:	6060      	str	r0, [r4, #4]
 8005212:	4620      	mov	r0, r4
 8005214:	f000 f81c 	bl	8005250 <__sfp>
 8005218:	60a0      	str	r0, [r4, #8]
 800521a:	4620      	mov	r0, r4
 800521c:	f000 f818 	bl	8005250 <__sfp>
 8005220:	2200      	movs	r2, #0
 8005222:	60e0      	str	r0, [r4, #12]
 8005224:	2104      	movs	r1, #4
 8005226:	6860      	ldr	r0, [r4, #4]
 8005228:	f7ff ff82 	bl	8005130 <std>
 800522c:	68a0      	ldr	r0, [r4, #8]
 800522e:	2201      	movs	r2, #1
 8005230:	2109      	movs	r1, #9
 8005232:	f7ff ff7d 	bl	8005130 <std>
 8005236:	68e0      	ldr	r0, [r4, #12]
 8005238:	2202      	movs	r2, #2
 800523a:	2112      	movs	r1, #18
 800523c:	f7ff ff78 	bl	8005130 <std>
 8005240:	2301      	movs	r3, #1
 8005242:	61a3      	str	r3, [r4, #24]
 8005244:	e7d2      	b.n	80051ec <__sinit+0xc>
 8005246:	bf00      	nop
 8005248:	08012688 	.word	0x08012688
 800524c:	08005179 	.word	0x08005179

08005250 <__sfp>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	4607      	mov	r7, r0
 8005254:	f7ff ffac 	bl	80051b0 <__sfp_lock_acquire>
 8005258:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <__sfp+0x84>)
 800525a:	681e      	ldr	r6, [r3, #0]
 800525c:	69b3      	ldr	r3, [r6, #24]
 800525e:	b913      	cbnz	r3, 8005266 <__sfp+0x16>
 8005260:	4630      	mov	r0, r6
 8005262:	f7ff ffbd 	bl	80051e0 <__sinit>
 8005266:	3648      	adds	r6, #72	; 0x48
 8005268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800526c:	3b01      	subs	r3, #1
 800526e:	d503      	bpl.n	8005278 <__sfp+0x28>
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	b30b      	cbz	r3, 80052b8 <__sfp+0x68>
 8005274:	6836      	ldr	r6, [r6, #0]
 8005276:	e7f7      	b.n	8005268 <__sfp+0x18>
 8005278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800527c:	b9d5      	cbnz	r5, 80052b4 <__sfp+0x64>
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <__sfp+0x88>)
 8005280:	60e3      	str	r3, [r4, #12]
 8005282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005286:	6665      	str	r5, [r4, #100]	; 0x64
 8005288:	f000 f85e 	bl	8005348 <__retarget_lock_init_recursive>
 800528c:	f7ff ff96 	bl	80051bc <__sfp_lock_release>
 8005290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005298:	6025      	str	r5, [r4, #0]
 800529a:	61a5      	str	r5, [r4, #24]
 800529c:	2208      	movs	r2, #8
 800529e:	4629      	mov	r1, r5
 80052a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052a4:	f7fe f81a 	bl	80032dc <memset>
 80052a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052b0:	4620      	mov	r0, r4
 80052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b4:	3468      	adds	r4, #104	; 0x68
 80052b6:	e7d9      	b.n	800526c <__sfp+0x1c>
 80052b8:	2104      	movs	r1, #4
 80052ba:	4638      	mov	r0, r7
 80052bc:	f7ff ff62 	bl	8005184 <__sfmoreglue>
 80052c0:	4604      	mov	r4, r0
 80052c2:	6030      	str	r0, [r6, #0]
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d1d5      	bne.n	8005274 <__sfp+0x24>
 80052c8:	f7ff ff78 	bl	80051bc <__sfp_lock_release>
 80052cc:	230c      	movs	r3, #12
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	e7ee      	b.n	80052b0 <__sfp+0x60>
 80052d2:	bf00      	nop
 80052d4:	08012688 	.word	0x08012688
 80052d8:	ffff0001 	.word	0xffff0001

080052dc <fiprintf>:
 80052dc:	b40e      	push	{r1, r2, r3}
 80052de:	b503      	push	{r0, r1, lr}
 80052e0:	4601      	mov	r1, r0
 80052e2:	ab03      	add	r3, sp, #12
 80052e4:	4805      	ldr	r0, [pc, #20]	; (80052fc <fiprintf+0x20>)
 80052e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	f000 fe7b 	bl	8005fe8 <_vfiprintf_r>
 80052f2:	b002      	add	sp, #8
 80052f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052f8:	b003      	add	sp, #12
 80052fa:	4770      	bx	lr
 80052fc:	200001b0 	.word	0x200001b0

08005300 <_fwalk_reent>:
 8005300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005304:	4606      	mov	r6, r0
 8005306:	4688      	mov	r8, r1
 8005308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800530c:	2700      	movs	r7, #0
 800530e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005312:	f1b9 0901 	subs.w	r9, r9, #1
 8005316:	d505      	bpl.n	8005324 <_fwalk_reent+0x24>
 8005318:	6824      	ldr	r4, [r4, #0]
 800531a:	2c00      	cmp	r4, #0
 800531c:	d1f7      	bne.n	800530e <_fwalk_reent+0xe>
 800531e:	4638      	mov	r0, r7
 8005320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005324:	89ab      	ldrh	r3, [r5, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d907      	bls.n	800533a <_fwalk_reent+0x3a>
 800532a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800532e:	3301      	adds	r3, #1
 8005330:	d003      	beq.n	800533a <_fwalk_reent+0x3a>
 8005332:	4629      	mov	r1, r5
 8005334:	4630      	mov	r0, r6
 8005336:	47c0      	blx	r8
 8005338:	4307      	orrs	r7, r0
 800533a:	3568      	adds	r5, #104	; 0x68
 800533c:	e7e9      	b.n	8005312 <_fwalk_reent+0x12>
	...

08005340 <_localeconv_r>:
 8005340:	4800      	ldr	r0, [pc, #0]	; (8005344 <_localeconv_r+0x4>)
 8005342:	4770      	bx	lr
 8005344:	20000304 	.word	0x20000304

08005348 <__retarget_lock_init_recursive>:
 8005348:	4770      	bx	lr

0800534a <__retarget_lock_acquire_recursive>:
 800534a:	4770      	bx	lr

0800534c <__retarget_lock_release_recursive>:
 800534c:	4770      	bx	lr

0800534e <__swhatbuf_r>:
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	460e      	mov	r6, r1
 8005352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005356:	2900      	cmp	r1, #0
 8005358:	b096      	sub	sp, #88	; 0x58
 800535a:	4614      	mov	r4, r2
 800535c:	461d      	mov	r5, r3
 800535e:	da08      	bge.n	8005372 <__swhatbuf_r+0x24>
 8005360:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	602a      	str	r2, [r5, #0]
 8005368:	061a      	lsls	r2, r3, #24
 800536a:	d410      	bmi.n	800538e <__swhatbuf_r+0x40>
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	e00e      	b.n	8005390 <__swhatbuf_r+0x42>
 8005372:	466a      	mov	r2, sp
 8005374:	f7fb ff9e 	bl	80012b4 <_fstat_r>
 8005378:	2800      	cmp	r0, #0
 800537a:	dbf1      	blt.n	8005360 <__swhatbuf_r+0x12>
 800537c:	9a01      	ldr	r2, [sp, #4]
 800537e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005386:	425a      	negs	r2, r3
 8005388:	415a      	adcs	r2, r3
 800538a:	602a      	str	r2, [r5, #0]
 800538c:	e7ee      	b.n	800536c <__swhatbuf_r+0x1e>
 800538e:	2340      	movs	r3, #64	; 0x40
 8005390:	2000      	movs	r0, #0
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	b016      	add	sp, #88	; 0x58
 8005396:	bd70      	pop	{r4, r5, r6, pc}

08005398 <__smakebuf_r>:
 8005398:	898b      	ldrh	r3, [r1, #12]
 800539a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800539c:	079d      	lsls	r5, r3, #30
 800539e:	4606      	mov	r6, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	d507      	bpl.n	80053b4 <__smakebuf_r+0x1c>
 80053a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	6123      	str	r3, [r4, #16]
 80053ac:	2301      	movs	r3, #1
 80053ae:	6163      	str	r3, [r4, #20]
 80053b0:	b002      	add	sp, #8
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	ab01      	add	r3, sp, #4
 80053b6:	466a      	mov	r2, sp
 80053b8:	f7ff ffc9 	bl	800534e <__swhatbuf_r>
 80053bc:	9900      	ldr	r1, [sp, #0]
 80053be:	4605      	mov	r5, r0
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 fc31 	bl	8005c28 <_malloc_r>
 80053c6:	b948      	cbnz	r0, 80053dc <__smakebuf_r+0x44>
 80053c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053cc:	059a      	lsls	r2, r3, #22
 80053ce:	d4ef      	bmi.n	80053b0 <__smakebuf_r+0x18>
 80053d0:	f023 0303 	bic.w	r3, r3, #3
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	e7e3      	b.n	80053a4 <__smakebuf_r+0xc>
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <__smakebuf_r+0x7c>)
 80053de:	62b3      	str	r3, [r6, #40]	; 0x28
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	6020      	str	r0, [r4, #0]
 80053e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	9b00      	ldr	r3, [sp, #0]
 80053ec:	6163      	str	r3, [r4, #20]
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	6120      	str	r0, [r4, #16]
 80053f2:	b15b      	cbz	r3, 800540c <__smakebuf_r+0x74>
 80053f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7fb ff60 	bl	80012be <_isatty_r>
 80053fe:	b128      	cbz	r0, 800540c <__smakebuf_r+0x74>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	89a0      	ldrh	r0, [r4, #12]
 800540e:	4305      	orrs	r5, r0
 8005410:	81a5      	strh	r5, [r4, #12]
 8005412:	e7cd      	b.n	80053b0 <__smakebuf_r+0x18>
 8005414:	08005179 	.word	0x08005179

08005418 <malloc>:
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <malloc+0xc>)
 800541a:	4601      	mov	r1, r0
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	f000 bc03 	b.w	8005c28 <_malloc_r>
 8005422:	bf00      	nop
 8005424:	200001b0 	.word	0x200001b0

08005428 <__ascii_mbtowc>:
 8005428:	b082      	sub	sp, #8
 800542a:	b901      	cbnz	r1, 800542e <__ascii_mbtowc+0x6>
 800542c:	a901      	add	r1, sp, #4
 800542e:	b142      	cbz	r2, 8005442 <__ascii_mbtowc+0x1a>
 8005430:	b14b      	cbz	r3, 8005446 <__ascii_mbtowc+0x1e>
 8005432:	7813      	ldrb	r3, [r2, #0]
 8005434:	600b      	str	r3, [r1, #0]
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	1e10      	subs	r0, r2, #0
 800543a:	bf18      	it	ne
 800543c:	2001      	movne	r0, #1
 800543e:	b002      	add	sp, #8
 8005440:	4770      	bx	lr
 8005442:	4610      	mov	r0, r2
 8005444:	e7fb      	b.n	800543e <__ascii_mbtowc+0x16>
 8005446:	f06f 0001 	mvn.w	r0, #1
 800544a:	e7f8      	b.n	800543e <__ascii_mbtowc+0x16>

0800544c <memcpy>:
 800544c:	440a      	add	r2, r1
 800544e:	4291      	cmp	r1, r2
 8005450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005454:	d100      	bne.n	8005458 <memcpy+0xc>
 8005456:	4770      	bx	lr
 8005458:	b510      	push	{r4, lr}
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005462:	4291      	cmp	r1, r2
 8005464:	d1f9      	bne.n	800545a <memcpy+0xe>
 8005466:	bd10      	pop	{r4, pc}

08005468 <_Balloc>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800546c:	4604      	mov	r4, r0
 800546e:	460d      	mov	r5, r1
 8005470:	b976      	cbnz	r6, 8005490 <_Balloc+0x28>
 8005472:	2010      	movs	r0, #16
 8005474:	f7ff ffd0 	bl	8005418 <malloc>
 8005478:	4602      	mov	r2, r0
 800547a:	6260      	str	r0, [r4, #36]	; 0x24
 800547c:	b920      	cbnz	r0, 8005488 <_Balloc+0x20>
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <_Balloc+0x78>)
 8005480:	4818      	ldr	r0, [pc, #96]	; (80054e4 <_Balloc+0x7c>)
 8005482:	2166      	movs	r1, #102	; 0x66
 8005484:	f7fe fefa 	bl	800427c <__assert_func>
 8005488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800548c:	6006      	str	r6, [r0, #0]
 800548e:	60c6      	str	r6, [r0, #12]
 8005490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005492:	68f3      	ldr	r3, [r6, #12]
 8005494:	b183      	cbz	r3, 80054b8 <_Balloc+0x50>
 8005496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800549e:	b9b8      	cbnz	r0, 80054d0 <_Balloc+0x68>
 80054a0:	2101      	movs	r1, #1
 80054a2:	fa01 f605 	lsl.w	r6, r1, r5
 80054a6:	1d72      	adds	r2, r6, #5
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 fb60 	bl	8005b70 <_calloc_r>
 80054b0:	b160      	cbz	r0, 80054cc <_Balloc+0x64>
 80054b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054b6:	e00e      	b.n	80054d6 <_Balloc+0x6e>
 80054b8:	2221      	movs	r2, #33	; 0x21
 80054ba:	2104      	movs	r1, #4
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 fb57 	bl	8005b70 <_calloc_r>
 80054c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c4:	60f0      	str	r0, [r6, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e4      	bne.n	8005496 <_Balloc+0x2e>
 80054cc:	2000      	movs	r0, #0
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	6802      	ldr	r2, [r0, #0]
 80054d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054d6:	2300      	movs	r3, #0
 80054d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054dc:	e7f7      	b.n	80054ce <_Balloc+0x66>
 80054de:	bf00      	nop
 80054e0:	080126be 	.word	0x080126be
 80054e4:	08012892 	.word	0x08012892

080054e8 <_Bfree>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054ec:	4605      	mov	r5, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	b976      	cbnz	r6, 8005510 <_Bfree+0x28>
 80054f2:	2010      	movs	r0, #16
 80054f4:	f7ff ff90 	bl	8005418 <malloc>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6268      	str	r0, [r5, #36]	; 0x24
 80054fc:	b920      	cbnz	r0, 8005508 <_Bfree+0x20>
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <_Bfree+0x3c>)
 8005500:	4809      	ldr	r0, [pc, #36]	; (8005528 <_Bfree+0x40>)
 8005502:	218a      	movs	r1, #138	; 0x8a
 8005504:	f7fe feba 	bl	800427c <__assert_func>
 8005508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800550c:	6006      	str	r6, [r0, #0]
 800550e:	60c6      	str	r6, [r0, #12]
 8005510:	b13c      	cbz	r4, 8005522 <_Bfree+0x3a>
 8005512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005514:	6862      	ldr	r2, [r4, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800551c:	6021      	str	r1, [r4, #0]
 800551e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	080126be 	.word	0x080126be
 8005528:	08012892 	.word	0x08012892

0800552c <__multadd>:
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	690d      	ldr	r5, [r1, #16]
 8005532:	4607      	mov	r7, r0
 8005534:	460c      	mov	r4, r1
 8005536:	461e      	mov	r6, r3
 8005538:	f101 0c14 	add.w	ip, r1, #20
 800553c:	2000      	movs	r0, #0
 800553e:	f8dc 3000 	ldr.w	r3, [ip]
 8005542:	b299      	uxth	r1, r3
 8005544:	fb02 6101 	mla	r1, r2, r1, r6
 8005548:	0c1e      	lsrs	r6, r3, #16
 800554a:	0c0b      	lsrs	r3, r1, #16
 800554c:	fb02 3306 	mla	r3, r2, r6, r3
 8005550:	b289      	uxth	r1, r1
 8005552:	3001      	adds	r0, #1
 8005554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005558:	4285      	cmp	r5, r0
 800555a:	f84c 1b04 	str.w	r1, [ip], #4
 800555e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005562:	dcec      	bgt.n	800553e <__multadd+0x12>
 8005564:	b30e      	cbz	r6, 80055aa <__multadd+0x7e>
 8005566:	68a3      	ldr	r3, [r4, #8]
 8005568:	42ab      	cmp	r3, r5
 800556a:	dc19      	bgt.n	80055a0 <__multadd+0x74>
 800556c:	6861      	ldr	r1, [r4, #4]
 800556e:	4638      	mov	r0, r7
 8005570:	3101      	adds	r1, #1
 8005572:	f7ff ff79 	bl	8005468 <_Balloc>
 8005576:	4680      	mov	r8, r0
 8005578:	b928      	cbnz	r0, 8005586 <__multadd+0x5a>
 800557a:	4602      	mov	r2, r0
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <__multadd+0x84>)
 800557e:	480d      	ldr	r0, [pc, #52]	; (80055b4 <__multadd+0x88>)
 8005580:	21b5      	movs	r1, #181	; 0xb5
 8005582:	f7fe fe7b 	bl	800427c <__assert_func>
 8005586:	6922      	ldr	r2, [r4, #16]
 8005588:	3202      	adds	r2, #2
 800558a:	f104 010c 	add.w	r1, r4, #12
 800558e:	0092      	lsls	r2, r2, #2
 8005590:	300c      	adds	r0, #12
 8005592:	f7ff ff5b 	bl	800544c <memcpy>
 8005596:	4621      	mov	r1, r4
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff ffa5 	bl	80054e8 <_Bfree>
 800559e:	4644      	mov	r4, r8
 80055a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055a4:	3501      	adds	r5, #1
 80055a6:	615e      	str	r6, [r3, #20]
 80055a8:	6125      	str	r5, [r4, #16]
 80055aa:	4620      	mov	r0, r4
 80055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b0:	0801281a 	.word	0x0801281a
 80055b4:	08012892 	.word	0x08012892

080055b8 <__hi0bits>:
 80055b8:	0c03      	lsrs	r3, r0, #16
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	b9d3      	cbnz	r3, 80055f4 <__hi0bits+0x3c>
 80055be:	0400      	lsls	r0, r0, #16
 80055c0:	2310      	movs	r3, #16
 80055c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80055c6:	bf04      	itt	eq
 80055c8:	0200      	lsleq	r0, r0, #8
 80055ca:	3308      	addeq	r3, #8
 80055cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80055d0:	bf04      	itt	eq
 80055d2:	0100      	lsleq	r0, r0, #4
 80055d4:	3304      	addeq	r3, #4
 80055d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80055da:	bf04      	itt	eq
 80055dc:	0080      	lsleq	r0, r0, #2
 80055de:	3302      	addeq	r3, #2
 80055e0:	2800      	cmp	r0, #0
 80055e2:	db05      	blt.n	80055f0 <__hi0bits+0x38>
 80055e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055e8:	f103 0301 	add.w	r3, r3, #1
 80055ec:	bf08      	it	eq
 80055ee:	2320      	moveq	r3, #32
 80055f0:	4618      	mov	r0, r3
 80055f2:	4770      	bx	lr
 80055f4:	2300      	movs	r3, #0
 80055f6:	e7e4      	b.n	80055c2 <__hi0bits+0xa>

080055f8 <__lo0bits>:
 80055f8:	6803      	ldr	r3, [r0, #0]
 80055fa:	f013 0207 	ands.w	r2, r3, #7
 80055fe:	4601      	mov	r1, r0
 8005600:	d00b      	beq.n	800561a <__lo0bits+0x22>
 8005602:	07da      	lsls	r2, r3, #31
 8005604:	d423      	bmi.n	800564e <__lo0bits+0x56>
 8005606:	0798      	lsls	r0, r3, #30
 8005608:	bf49      	itett	mi
 800560a:	085b      	lsrmi	r3, r3, #1
 800560c:	089b      	lsrpl	r3, r3, #2
 800560e:	2001      	movmi	r0, #1
 8005610:	600b      	strmi	r3, [r1, #0]
 8005612:	bf5c      	itt	pl
 8005614:	600b      	strpl	r3, [r1, #0]
 8005616:	2002      	movpl	r0, #2
 8005618:	4770      	bx	lr
 800561a:	b298      	uxth	r0, r3
 800561c:	b9a8      	cbnz	r0, 800564a <__lo0bits+0x52>
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	2010      	movs	r0, #16
 8005622:	b2da      	uxtb	r2, r3
 8005624:	b90a      	cbnz	r2, 800562a <__lo0bits+0x32>
 8005626:	3008      	adds	r0, #8
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	071a      	lsls	r2, r3, #28
 800562c:	bf04      	itt	eq
 800562e:	091b      	lsreq	r3, r3, #4
 8005630:	3004      	addeq	r0, #4
 8005632:	079a      	lsls	r2, r3, #30
 8005634:	bf04      	itt	eq
 8005636:	089b      	lsreq	r3, r3, #2
 8005638:	3002      	addeq	r0, #2
 800563a:	07da      	lsls	r2, r3, #31
 800563c:	d403      	bmi.n	8005646 <__lo0bits+0x4e>
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	f100 0001 	add.w	r0, r0, #1
 8005644:	d005      	beq.n	8005652 <__lo0bits+0x5a>
 8005646:	600b      	str	r3, [r1, #0]
 8005648:	4770      	bx	lr
 800564a:	4610      	mov	r0, r2
 800564c:	e7e9      	b.n	8005622 <__lo0bits+0x2a>
 800564e:	2000      	movs	r0, #0
 8005650:	4770      	bx	lr
 8005652:	2020      	movs	r0, #32
 8005654:	4770      	bx	lr
	...

08005658 <__i2b>:
 8005658:	b510      	push	{r4, lr}
 800565a:	460c      	mov	r4, r1
 800565c:	2101      	movs	r1, #1
 800565e:	f7ff ff03 	bl	8005468 <_Balloc>
 8005662:	4602      	mov	r2, r0
 8005664:	b928      	cbnz	r0, 8005672 <__i2b+0x1a>
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <__i2b+0x24>)
 8005668:	4805      	ldr	r0, [pc, #20]	; (8005680 <__i2b+0x28>)
 800566a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800566e:	f7fe fe05 	bl	800427c <__assert_func>
 8005672:	2301      	movs	r3, #1
 8005674:	6144      	str	r4, [r0, #20]
 8005676:	6103      	str	r3, [r0, #16]
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	0801281a 	.word	0x0801281a
 8005680:	08012892 	.word	0x08012892

08005684 <__multiply>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	4691      	mov	r9, r2
 800568a:	690a      	ldr	r2, [r1, #16]
 800568c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	bfb8      	it	lt
 8005694:	460b      	movlt	r3, r1
 8005696:	460c      	mov	r4, r1
 8005698:	bfbc      	itt	lt
 800569a:	464c      	movlt	r4, r9
 800569c:	4699      	movlt	r9, r3
 800569e:	6927      	ldr	r7, [r4, #16]
 80056a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056a4:	68a3      	ldr	r3, [r4, #8]
 80056a6:	6861      	ldr	r1, [r4, #4]
 80056a8:	eb07 060a 	add.w	r6, r7, sl
 80056ac:	42b3      	cmp	r3, r6
 80056ae:	b085      	sub	sp, #20
 80056b0:	bfb8      	it	lt
 80056b2:	3101      	addlt	r1, #1
 80056b4:	f7ff fed8 	bl	8005468 <_Balloc>
 80056b8:	b930      	cbnz	r0, 80056c8 <__multiply+0x44>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <__multiply+0x14c>)
 80056be:	4845      	ldr	r0, [pc, #276]	; (80057d4 <__multiply+0x150>)
 80056c0:	f240 115d 	movw	r1, #349	; 0x15d
 80056c4:	f7fe fdda 	bl	800427c <__assert_func>
 80056c8:	f100 0514 	add.w	r5, r0, #20
 80056cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056d0:	462b      	mov	r3, r5
 80056d2:	2200      	movs	r2, #0
 80056d4:	4543      	cmp	r3, r8
 80056d6:	d321      	bcc.n	800571c <__multiply+0x98>
 80056d8:	f104 0314 	add.w	r3, r4, #20
 80056dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056e0:	f109 0314 	add.w	r3, r9, #20
 80056e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056e8:	9202      	str	r2, [sp, #8]
 80056ea:	1b3a      	subs	r2, r7, r4
 80056ec:	3a15      	subs	r2, #21
 80056ee:	f022 0203 	bic.w	r2, r2, #3
 80056f2:	3204      	adds	r2, #4
 80056f4:	f104 0115 	add.w	r1, r4, #21
 80056f8:	428f      	cmp	r7, r1
 80056fa:	bf38      	it	cc
 80056fc:	2204      	movcc	r2, #4
 80056fe:	9201      	str	r2, [sp, #4]
 8005700:	9a02      	ldr	r2, [sp, #8]
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d80c      	bhi.n	8005722 <__multiply+0x9e>
 8005708:	2e00      	cmp	r6, #0
 800570a:	dd03      	ble.n	8005714 <__multiply+0x90>
 800570c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005710:	2b00      	cmp	r3, #0
 8005712:	d05a      	beq.n	80057ca <__multiply+0x146>
 8005714:	6106      	str	r6, [r0, #16]
 8005716:	b005      	add	sp, #20
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	f843 2b04 	str.w	r2, [r3], #4
 8005720:	e7d8      	b.n	80056d4 <__multiply+0x50>
 8005722:	f8b3 a000 	ldrh.w	sl, [r3]
 8005726:	f1ba 0f00 	cmp.w	sl, #0
 800572a:	d024      	beq.n	8005776 <__multiply+0xf2>
 800572c:	f104 0e14 	add.w	lr, r4, #20
 8005730:	46a9      	mov	r9, r5
 8005732:	f04f 0c00 	mov.w	ip, #0
 8005736:	f85e 2b04 	ldr.w	r2, [lr], #4
 800573a:	f8d9 1000 	ldr.w	r1, [r9]
 800573e:	fa1f fb82 	uxth.w	fp, r2
 8005742:	b289      	uxth	r1, r1
 8005744:	fb0a 110b 	mla	r1, sl, fp, r1
 8005748:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800574c:	f8d9 2000 	ldr.w	r2, [r9]
 8005750:	4461      	add	r1, ip
 8005752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005756:	fb0a c20b 	mla	r2, sl, fp, ip
 800575a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800575e:	b289      	uxth	r1, r1
 8005760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005764:	4577      	cmp	r7, lr
 8005766:	f849 1b04 	str.w	r1, [r9], #4
 800576a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800576e:	d8e2      	bhi.n	8005736 <__multiply+0xb2>
 8005770:	9a01      	ldr	r2, [sp, #4]
 8005772:	f845 c002 	str.w	ip, [r5, r2]
 8005776:	9a03      	ldr	r2, [sp, #12]
 8005778:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800577c:	3304      	adds	r3, #4
 800577e:	f1b9 0f00 	cmp.w	r9, #0
 8005782:	d020      	beq.n	80057c6 <__multiply+0x142>
 8005784:	6829      	ldr	r1, [r5, #0]
 8005786:	f104 0c14 	add.w	ip, r4, #20
 800578a:	46ae      	mov	lr, r5
 800578c:	f04f 0a00 	mov.w	sl, #0
 8005790:	f8bc b000 	ldrh.w	fp, [ip]
 8005794:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005798:	fb09 220b 	mla	r2, r9, fp, r2
 800579c:	4492      	add	sl, r2
 800579e:	b289      	uxth	r1, r1
 80057a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057a4:	f84e 1b04 	str.w	r1, [lr], #4
 80057a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057ac:	f8be 1000 	ldrh.w	r1, [lr]
 80057b0:	0c12      	lsrs	r2, r2, #16
 80057b2:	fb09 1102 	mla	r1, r9, r2, r1
 80057b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057ba:	4567      	cmp	r7, ip
 80057bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057c0:	d8e6      	bhi.n	8005790 <__multiply+0x10c>
 80057c2:	9a01      	ldr	r2, [sp, #4]
 80057c4:	50a9      	str	r1, [r5, r2]
 80057c6:	3504      	adds	r5, #4
 80057c8:	e79a      	b.n	8005700 <__multiply+0x7c>
 80057ca:	3e01      	subs	r6, #1
 80057cc:	e79c      	b.n	8005708 <__multiply+0x84>
 80057ce:	bf00      	nop
 80057d0:	0801281a 	.word	0x0801281a
 80057d4:	08012892 	.word	0x08012892

080057d8 <__pow5mult>:
 80057d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057dc:	4615      	mov	r5, r2
 80057de:	f012 0203 	ands.w	r2, r2, #3
 80057e2:	4606      	mov	r6, r0
 80057e4:	460f      	mov	r7, r1
 80057e6:	d007      	beq.n	80057f8 <__pow5mult+0x20>
 80057e8:	4c25      	ldr	r4, [pc, #148]	; (8005880 <__pow5mult+0xa8>)
 80057ea:	3a01      	subs	r2, #1
 80057ec:	2300      	movs	r3, #0
 80057ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057f2:	f7ff fe9b 	bl	800552c <__multadd>
 80057f6:	4607      	mov	r7, r0
 80057f8:	10ad      	asrs	r5, r5, #2
 80057fa:	d03d      	beq.n	8005878 <__pow5mult+0xa0>
 80057fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057fe:	b97c      	cbnz	r4, 8005820 <__pow5mult+0x48>
 8005800:	2010      	movs	r0, #16
 8005802:	f7ff fe09 	bl	8005418 <malloc>
 8005806:	4602      	mov	r2, r0
 8005808:	6270      	str	r0, [r6, #36]	; 0x24
 800580a:	b928      	cbnz	r0, 8005818 <__pow5mult+0x40>
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <__pow5mult+0xac>)
 800580e:	481e      	ldr	r0, [pc, #120]	; (8005888 <__pow5mult+0xb0>)
 8005810:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005814:	f7fe fd32 	bl	800427c <__assert_func>
 8005818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800581c:	6004      	str	r4, [r0, #0]
 800581e:	60c4      	str	r4, [r0, #12]
 8005820:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005828:	b94c      	cbnz	r4, 800583e <__pow5mult+0x66>
 800582a:	f240 2171 	movw	r1, #625	; 0x271
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff ff12 	bl	8005658 <__i2b>
 8005834:	2300      	movs	r3, #0
 8005836:	f8c8 0008 	str.w	r0, [r8, #8]
 800583a:	4604      	mov	r4, r0
 800583c:	6003      	str	r3, [r0, #0]
 800583e:	f04f 0900 	mov.w	r9, #0
 8005842:	07eb      	lsls	r3, r5, #31
 8005844:	d50a      	bpl.n	800585c <__pow5mult+0x84>
 8005846:	4639      	mov	r1, r7
 8005848:	4622      	mov	r2, r4
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff ff1a 	bl	8005684 <__multiply>
 8005850:	4639      	mov	r1, r7
 8005852:	4680      	mov	r8, r0
 8005854:	4630      	mov	r0, r6
 8005856:	f7ff fe47 	bl	80054e8 <_Bfree>
 800585a:	4647      	mov	r7, r8
 800585c:	106d      	asrs	r5, r5, #1
 800585e:	d00b      	beq.n	8005878 <__pow5mult+0xa0>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	b938      	cbnz	r0, 8005874 <__pow5mult+0x9c>
 8005864:	4622      	mov	r2, r4
 8005866:	4621      	mov	r1, r4
 8005868:	4630      	mov	r0, r6
 800586a:	f7ff ff0b 	bl	8005684 <__multiply>
 800586e:	6020      	str	r0, [r4, #0]
 8005870:	f8c0 9000 	str.w	r9, [r0]
 8005874:	4604      	mov	r4, r0
 8005876:	e7e4      	b.n	8005842 <__pow5mult+0x6a>
 8005878:	4638      	mov	r0, r7
 800587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587e:	bf00      	nop
 8005880:	08012a00 	.word	0x08012a00
 8005884:	080126be 	.word	0x080126be
 8005888:	08012892 	.word	0x08012892

0800588c <__lshift>:
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	460c      	mov	r4, r1
 8005892:	6849      	ldr	r1, [r1, #4]
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	4607      	mov	r7, r0
 800589e:	4691      	mov	r9, r2
 80058a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058a4:	f108 0601 	add.w	r6, r8, #1
 80058a8:	42b3      	cmp	r3, r6
 80058aa:	db0b      	blt.n	80058c4 <__lshift+0x38>
 80058ac:	4638      	mov	r0, r7
 80058ae:	f7ff fddb 	bl	8005468 <_Balloc>
 80058b2:	4605      	mov	r5, r0
 80058b4:	b948      	cbnz	r0, 80058ca <__lshift+0x3e>
 80058b6:	4602      	mov	r2, r0
 80058b8:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <__lshift+0xd8>)
 80058ba:	482b      	ldr	r0, [pc, #172]	; (8005968 <__lshift+0xdc>)
 80058bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058c0:	f7fe fcdc 	bl	800427c <__assert_func>
 80058c4:	3101      	adds	r1, #1
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	e7ee      	b.n	80058a8 <__lshift+0x1c>
 80058ca:	2300      	movs	r3, #0
 80058cc:	f100 0114 	add.w	r1, r0, #20
 80058d0:	f100 0210 	add.w	r2, r0, #16
 80058d4:	4618      	mov	r0, r3
 80058d6:	4553      	cmp	r3, sl
 80058d8:	db37      	blt.n	800594a <__lshift+0xbe>
 80058da:	6920      	ldr	r0, [r4, #16]
 80058dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058e0:	f104 0314 	add.w	r3, r4, #20
 80058e4:	f019 091f 	ands.w	r9, r9, #31
 80058e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058f0:	d02f      	beq.n	8005952 <__lshift+0xc6>
 80058f2:	f1c9 0e20 	rsb	lr, r9, #32
 80058f6:	468a      	mov	sl, r1
 80058f8:	f04f 0c00 	mov.w	ip, #0
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	fa02 f209 	lsl.w	r2, r2, r9
 8005902:	ea42 020c 	orr.w	r2, r2, ip
 8005906:	f84a 2b04 	str.w	r2, [sl], #4
 800590a:	f853 2b04 	ldr.w	r2, [r3], #4
 800590e:	4298      	cmp	r0, r3
 8005910:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005914:	d8f2      	bhi.n	80058fc <__lshift+0x70>
 8005916:	1b03      	subs	r3, r0, r4
 8005918:	3b15      	subs	r3, #21
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	3304      	adds	r3, #4
 8005920:	f104 0215 	add.w	r2, r4, #21
 8005924:	4290      	cmp	r0, r2
 8005926:	bf38      	it	cc
 8005928:	2304      	movcc	r3, #4
 800592a:	f841 c003 	str.w	ip, [r1, r3]
 800592e:	f1bc 0f00 	cmp.w	ip, #0
 8005932:	d001      	beq.n	8005938 <__lshift+0xac>
 8005934:	f108 0602 	add.w	r6, r8, #2
 8005938:	3e01      	subs	r6, #1
 800593a:	4638      	mov	r0, r7
 800593c:	612e      	str	r6, [r5, #16]
 800593e:	4621      	mov	r1, r4
 8005940:	f7ff fdd2 	bl	80054e8 <_Bfree>
 8005944:	4628      	mov	r0, r5
 8005946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594a:	f842 0f04 	str.w	r0, [r2, #4]!
 800594e:	3301      	adds	r3, #1
 8005950:	e7c1      	b.n	80058d6 <__lshift+0x4a>
 8005952:	3904      	subs	r1, #4
 8005954:	f853 2b04 	ldr.w	r2, [r3], #4
 8005958:	f841 2f04 	str.w	r2, [r1, #4]!
 800595c:	4298      	cmp	r0, r3
 800595e:	d8f9      	bhi.n	8005954 <__lshift+0xc8>
 8005960:	e7ea      	b.n	8005938 <__lshift+0xac>
 8005962:	bf00      	nop
 8005964:	0801281a 	.word	0x0801281a
 8005968:	08012892 	.word	0x08012892

0800596c <__mcmp>:
 800596c:	b530      	push	{r4, r5, lr}
 800596e:	6902      	ldr	r2, [r0, #16]
 8005970:	690c      	ldr	r4, [r1, #16]
 8005972:	1b12      	subs	r2, r2, r4
 8005974:	d10e      	bne.n	8005994 <__mcmp+0x28>
 8005976:	f100 0314 	add.w	r3, r0, #20
 800597a:	3114      	adds	r1, #20
 800597c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005980:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005984:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005988:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800598c:	42a5      	cmp	r5, r4
 800598e:	d003      	beq.n	8005998 <__mcmp+0x2c>
 8005990:	d305      	bcc.n	800599e <__mcmp+0x32>
 8005992:	2201      	movs	r2, #1
 8005994:	4610      	mov	r0, r2
 8005996:	bd30      	pop	{r4, r5, pc}
 8005998:	4283      	cmp	r3, r0
 800599a:	d3f3      	bcc.n	8005984 <__mcmp+0x18>
 800599c:	e7fa      	b.n	8005994 <__mcmp+0x28>
 800599e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059a2:	e7f7      	b.n	8005994 <__mcmp+0x28>

080059a4 <__mdiff>:
 80059a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	460c      	mov	r4, r1
 80059aa:	4606      	mov	r6, r0
 80059ac:	4611      	mov	r1, r2
 80059ae:	4620      	mov	r0, r4
 80059b0:	4690      	mov	r8, r2
 80059b2:	f7ff ffdb 	bl	800596c <__mcmp>
 80059b6:	1e05      	subs	r5, r0, #0
 80059b8:	d110      	bne.n	80059dc <__mdiff+0x38>
 80059ba:	4629      	mov	r1, r5
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fd53 	bl	8005468 <_Balloc>
 80059c2:	b930      	cbnz	r0, 80059d2 <__mdiff+0x2e>
 80059c4:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <__mdiff+0x10c>)
 80059c6:	4602      	mov	r2, r0
 80059c8:	f240 2132 	movw	r1, #562	; 0x232
 80059cc:	4839      	ldr	r0, [pc, #228]	; (8005ab4 <__mdiff+0x110>)
 80059ce:	f7fe fc55 	bl	800427c <__assert_func>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	bfa4      	itt	ge
 80059de:	4643      	movge	r3, r8
 80059e0:	46a0      	movge	r8, r4
 80059e2:	4630      	mov	r0, r6
 80059e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059e8:	bfa6      	itte	ge
 80059ea:	461c      	movge	r4, r3
 80059ec:	2500      	movge	r5, #0
 80059ee:	2501      	movlt	r5, #1
 80059f0:	f7ff fd3a 	bl	8005468 <_Balloc>
 80059f4:	b920      	cbnz	r0, 8005a00 <__mdiff+0x5c>
 80059f6:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <__mdiff+0x10c>)
 80059f8:	4602      	mov	r2, r0
 80059fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80059fe:	e7e5      	b.n	80059cc <__mdiff+0x28>
 8005a00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a04:	6926      	ldr	r6, [r4, #16]
 8005a06:	60c5      	str	r5, [r0, #12]
 8005a08:	f104 0914 	add.w	r9, r4, #20
 8005a0c:	f108 0514 	add.w	r5, r8, #20
 8005a10:	f100 0e14 	add.w	lr, r0, #20
 8005a14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a1c:	f108 0210 	add.w	r2, r8, #16
 8005a20:	46f2      	mov	sl, lr
 8005a22:	2100      	movs	r1, #0
 8005a24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a2c:	fa1f f883 	uxth.w	r8, r3
 8005a30:	fa11 f18b 	uxtah	r1, r1, fp
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	eba1 0808 	sub.w	r8, r1, r8
 8005a3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a42:	fa1f f888 	uxth.w	r8, r8
 8005a46:	1419      	asrs	r1, r3, #16
 8005a48:	454e      	cmp	r6, r9
 8005a4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a4e:	f84a 3b04 	str.w	r3, [sl], #4
 8005a52:	d8e7      	bhi.n	8005a24 <__mdiff+0x80>
 8005a54:	1b33      	subs	r3, r6, r4
 8005a56:	3b15      	subs	r3, #21
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	3415      	adds	r4, #21
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	bf38      	it	cc
 8005a64:	2304      	movcc	r3, #4
 8005a66:	441d      	add	r5, r3
 8005a68:	4473      	add	r3, lr
 8005a6a:	469e      	mov	lr, r3
 8005a6c:	462e      	mov	r6, r5
 8005a6e:	4566      	cmp	r6, ip
 8005a70:	d30e      	bcc.n	8005a90 <__mdiff+0xec>
 8005a72:	f10c 0203 	add.w	r2, ip, #3
 8005a76:	1b52      	subs	r2, r2, r5
 8005a78:	f022 0203 	bic.w	r2, r2, #3
 8005a7c:	3d03      	subs	r5, #3
 8005a7e:	45ac      	cmp	ip, r5
 8005a80:	bf38      	it	cc
 8005a82:	2200      	movcc	r2, #0
 8005a84:	441a      	add	r2, r3
 8005a86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005a8a:	b17b      	cbz	r3, 8005aac <__mdiff+0x108>
 8005a8c:	6107      	str	r7, [r0, #16]
 8005a8e:	e7a3      	b.n	80059d8 <__mdiff+0x34>
 8005a90:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a94:	fa11 f288 	uxtah	r2, r1, r8
 8005a98:	1414      	asrs	r4, r2, #16
 8005a9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a9e:	b292      	uxth	r2, r2
 8005aa0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005aa4:	f84e 2b04 	str.w	r2, [lr], #4
 8005aa8:	1421      	asrs	r1, r4, #16
 8005aaa:	e7e0      	b.n	8005a6e <__mdiff+0xca>
 8005aac:	3f01      	subs	r7, #1
 8005aae:	e7ea      	b.n	8005a86 <__mdiff+0xe2>
 8005ab0:	0801281a 	.word	0x0801281a
 8005ab4:	08012892 	.word	0x08012892

08005ab8 <__d2b>:
 8005ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005abc:	4689      	mov	r9, r1
 8005abe:	2101      	movs	r1, #1
 8005ac0:	ec57 6b10 	vmov	r6, r7, d0
 8005ac4:	4690      	mov	r8, r2
 8005ac6:	f7ff fccf 	bl	8005468 <_Balloc>
 8005aca:	4604      	mov	r4, r0
 8005acc:	b930      	cbnz	r0, 8005adc <__d2b+0x24>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <__d2b+0xb0>)
 8005ad2:	4826      	ldr	r0, [pc, #152]	; (8005b6c <__d2b+0xb4>)
 8005ad4:	f240 310a 	movw	r1, #778	; 0x30a
 8005ad8:	f7fe fbd0 	bl	800427c <__assert_func>
 8005adc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ae4:	bb35      	cbnz	r5, 8005b34 <__d2b+0x7c>
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	d028      	beq.n	8005b3e <__d2b+0x86>
 8005aec:	4668      	mov	r0, sp
 8005aee:	9600      	str	r6, [sp, #0]
 8005af0:	f7ff fd82 	bl	80055f8 <__lo0bits>
 8005af4:	9900      	ldr	r1, [sp, #0]
 8005af6:	b300      	cbz	r0, 8005b3a <__d2b+0x82>
 8005af8:	9a01      	ldr	r2, [sp, #4]
 8005afa:	f1c0 0320 	rsb	r3, r0, #32
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	430b      	orrs	r3, r1
 8005b04:	40c2      	lsrs	r2, r0
 8005b06:	6163      	str	r3, [r4, #20]
 8005b08:	9201      	str	r2, [sp, #4]
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	61a3      	str	r3, [r4, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2202      	movne	r2, #2
 8005b14:	2201      	moveq	r2, #1
 8005b16:	6122      	str	r2, [r4, #16]
 8005b18:	b1d5      	cbz	r5, 8005b50 <__d2b+0x98>
 8005b1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b1e:	4405      	add	r5, r0
 8005b20:	f8c9 5000 	str.w	r5, [r9]
 8005b24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b28:	f8c8 0000 	str.w	r0, [r8]
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	b003      	add	sp, #12
 8005b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b38:	e7d5      	b.n	8005ae6 <__d2b+0x2e>
 8005b3a:	6161      	str	r1, [r4, #20]
 8005b3c:	e7e5      	b.n	8005b0a <__d2b+0x52>
 8005b3e:	a801      	add	r0, sp, #4
 8005b40:	f7ff fd5a 	bl	80055f8 <__lo0bits>
 8005b44:	9b01      	ldr	r3, [sp, #4]
 8005b46:	6163      	str	r3, [r4, #20]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	6122      	str	r2, [r4, #16]
 8005b4c:	3020      	adds	r0, #32
 8005b4e:	e7e3      	b.n	8005b18 <__d2b+0x60>
 8005b50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b58:	f8c9 0000 	str.w	r0, [r9]
 8005b5c:	6918      	ldr	r0, [r3, #16]
 8005b5e:	f7ff fd2b 	bl	80055b8 <__hi0bits>
 8005b62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b66:	e7df      	b.n	8005b28 <__d2b+0x70>
 8005b68:	0801281a 	.word	0x0801281a
 8005b6c:	08012892 	.word	0x08012892

08005b70 <_calloc_r>:
 8005b70:	b513      	push	{r0, r1, r4, lr}
 8005b72:	434a      	muls	r2, r1
 8005b74:	4611      	mov	r1, r2
 8005b76:	9201      	str	r2, [sp, #4]
 8005b78:	f000 f856 	bl	8005c28 <_malloc_r>
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	b118      	cbz	r0, 8005b88 <_calloc_r+0x18>
 8005b80:	9a01      	ldr	r2, [sp, #4]
 8005b82:	2100      	movs	r1, #0
 8005b84:	f7fd fbaa 	bl	80032dc <memset>
 8005b88:	4620      	mov	r0, r4
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd10      	pop	{r4, pc}
	...

08005b90 <_free_r>:
 8005b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d044      	beq.n	8005c20 <_free_r+0x90>
 8005b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9a:	9001      	str	r0, [sp, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ba2:	bfb8      	it	lt
 8005ba4:	18e4      	addlt	r4, r4, r3
 8005ba6:	f000 fc09 	bl	80063bc <__malloc_lock>
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <_free_r+0x94>)
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_free_r+0x30>
 8005bb2:	6063      	str	r3, [r4, #4]
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	b003      	add	sp, #12
 8005bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bbc:	f000 bc04 	b.w	80063c8 <__malloc_unlock>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d908      	bls.n	8005bd6 <_free_r+0x46>
 8005bc4:	6825      	ldr	r5, [r4, #0]
 8005bc6:	1961      	adds	r1, r4, r5
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf01      	itttt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	e7ed      	b.n	8005bb2 <_free_r+0x22>
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b10b      	cbz	r3, 8005be0 <_free_r+0x50>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d9fa      	bls.n	8005bd6 <_free_r+0x46>
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	1855      	adds	r5, r2, r1
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d10b      	bne.n	8005c00 <_free_r+0x70>
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	4421      	add	r1, r4
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	d1e0      	bne.n	8005bb6 <_free_r+0x26>
 8005bf4:	681c      	ldr	r4, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	4421      	add	r1, r4
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	e7da      	b.n	8005bb6 <_free_r+0x26>
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x78>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	e7d6      	b.n	8005bb6 <_free_r+0x26>
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf04      	itt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	bf04      	itt	eq
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	6054      	str	r4, [r2, #4]
 8005c1e:	e7ca      	b.n	8005bb6 <_free_r+0x26>
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}
 8005c24:	20000d50 	.word	0x20000d50

08005c28 <_malloc_r>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	1ccd      	adds	r5, r1, #3
 8005c2c:	f025 0503 	bic.w	r5, r5, #3
 8005c30:	3508      	adds	r5, #8
 8005c32:	2d0c      	cmp	r5, #12
 8005c34:	bf38      	it	cc
 8005c36:	250c      	movcc	r5, #12
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	db01      	blt.n	8005c42 <_malloc_r+0x1a>
 8005c3e:	42a9      	cmp	r1, r5
 8005c40:	d903      	bls.n	8005c4a <_malloc_r+0x22>
 8005c42:	230c      	movs	r3, #12
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	2000      	movs	r0, #0
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4a:	f000 fbb7 	bl	80063bc <__malloc_lock>
 8005c4e:	4921      	ldr	r1, [pc, #132]	; (8005cd4 <_malloc_r+0xac>)
 8005c50:	680a      	ldr	r2, [r1, #0]
 8005c52:	4614      	mov	r4, r2
 8005c54:	b99c      	cbnz	r4, 8005c7e <_malloc_r+0x56>
 8005c56:	4f20      	ldr	r7, [pc, #128]	; (8005cd8 <_malloc_r+0xb0>)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	b923      	cbnz	r3, 8005c66 <_malloc_r+0x3e>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7fb fb0e 	bl	8001280 <_sbrk_r>
 8005c64:	6038      	str	r0, [r7, #0]
 8005c66:	4629      	mov	r1, r5
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7fb fb09 	bl	8001280 <_sbrk_r>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	d123      	bne.n	8005cba <_malloc_r+0x92>
 8005c72:	230c      	movs	r3, #12
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 fba6 	bl	80063c8 <__malloc_unlock>
 8005c7c:	e7e3      	b.n	8005c46 <_malloc_r+0x1e>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	1b5b      	subs	r3, r3, r5
 8005c82:	d417      	bmi.n	8005cb4 <_malloc_r+0x8c>
 8005c84:	2b0b      	cmp	r3, #11
 8005c86:	d903      	bls.n	8005c90 <_malloc_r+0x68>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	441c      	add	r4, r3
 8005c8c:	6025      	str	r5, [r4, #0]
 8005c8e:	e004      	b.n	8005c9a <_malloc_r+0x72>
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	42a2      	cmp	r2, r4
 8005c94:	bf0c      	ite	eq
 8005c96:	600b      	streq	r3, [r1, #0]
 8005c98:	6053      	strne	r3, [r2, #4]
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 fb94 	bl	80063c8 <__malloc_unlock>
 8005ca0:	f104 000b 	add.w	r0, r4, #11
 8005ca4:	1d23      	adds	r3, r4, #4
 8005ca6:	f020 0007 	bic.w	r0, r0, #7
 8005caa:	1ac2      	subs	r2, r0, r3
 8005cac:	d0cc      	beq.n	8005c48 <_malloc_r+0x20>
 8005cae:	1a1b      	subs	r3, r3, r0
 8005cb0:	50a3      	str	r3, [r4, r2]
 8005cb2:	e7c9      	b.n	8005c48 <_malloc_r+0x20>
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	6864      	ldr	r4, [r4, #4]
 8005cb8:	e7cc      	b.n	8005c54 <_malloc_r+0x2c>
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d0e3      	beq.n	8005c8c <_malloc_r+0x64>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7fb fada 	bl	8001280 <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d1dd      	bne.n	8005c8c <_malloc_r+0x64>
 8005cd0:	e7cf      	b.n	8005c72 <_malloc_r+0x4a>
 8005cd2:	bf00      	nop
 8005cd4:	20000d50 	.word	0x20000d50
 8005cd8:	20000d54 	.word	0x20000d54

08005cdc <__ssputs_r>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	688e      	ldr	r6, [r1, #8]
 8005ce2:	429e      	cmp	r6, r3
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4690      	mov	r8, r2
 8005cea:	461f      	mov	r7, r3
 8005cec:	d838      	bhi.n	8005d60 <__ssputs_r+0x84>
 8005cee:	898a      	ldrh	r2, [r1, #12]
 8005cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cf4:	d032      	beq.n	8005d5c <__ssputs_r+0x80>
 8005cf6:	6825      	ldr	r5, [r4, #0]
 8005cf8:	6909      	ldr	r1, [r1, #16]
 8005cfa:	eba5 0901 	sub.w	r9, r5, r1
 8005cfe:	6965      	ldr	r5, [r4, #20]
 8005d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d08:	3301      	adds	r3, #1
 8005d0a:	444b      	add	r3, r9
 8005d0c:	106d      	asrs	r5, r5, #1
 8005d0e:	429d      	cmp	r5, r3
 8005d10:	bf38      	it	cc
 8005d12:	461d      	movcc	r5, r3
 8005d14:	0553      	lsls	r3, r2, #21
 8005d16:	d531      	bpl.n	8005d7c <__ssputs_r+0xa0>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7ff ff85 	bl	8005c28 <_malloc_r>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	b950      	cbnz	r0, 8005d38 <__ssputs_r+0x5c>
 8005d22:	230c      	movs	r3, #12
 8005d24:	f8ca 3000 	str.w	r3, [sl]
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	6921      	ldr	r1, [r4, #16]
 8005d3a:	464a      	mov	r2, r9
 8005d3c:	f7ff fb86 	bl	800544c <memcpy>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	6126      	str	r6, [r4, #16]
 8005d4e:	6165      	str	r5, [r4, #20]
 8005d50:	444e      	add	r6, r9
 8005d52:	eba5 0509 	sub.w	r5, r5, r9
 8005d56:	6026      	str	r6, [r4, #0]
 8005d58:	60a5      	str	r5, [r4, #8]
 8005d5a:	463e      	mov	r6, r7
 8005d5c:	42be      	cmp	r6, r7
 8005d5e:	d900      	bls.n	8005d62 <__ssputs_r+0x86>
 8005d60:	463e      	mov	r6, r7
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	4632      	mov	r2, r6
 8005d66:	4641      	mov	r1, r8
 8005d68:	f000 fb0d 	bl	8006386 <memmove>
 8005d6c:	68a3      	ldr	r3, [r4, #8]
 8005d6e:	1b9b      	subs	r3, r3, r6
 8005d70:	60a3      	str	r3, [r4, #8]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	4433      	add	r3, r6
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e7db      	b.n	8005d34 <__ssputs_r+0x58>
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	f000 fb29 	bl	80063d4 <_realloc_r>
 8005d82:	4606      	mov	r6, r0
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d1e1      	bne.n	8005d4c <__ssputs_r+0x70>
 8005d88:	6921      	ldr	r1, [r4, #16]
 8005d8a:	4650      	mov	r0, sl
 8005d8c:	f7ff ff00 	bl	8005b90 <_free_r>
 8005d90:	e7c7      	b.n	8005d22 <__ssputs_r+0x46>
	...

08005d94 <_svfiprintf_r>:
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	4698      	mov	r8, r3
 8005d9a:	898b      	ldrh	r3, [r1, #12]
 8005d9c:	061b      	lsls	r3, r3, #24
 8005d9e:	b09d      	sub	sp, #116	; 0x74
 8005da0:	4607      	mov	r7, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	d50e      	bpl.n	8005dc6 <_svfiprintf_r+0x32>
 8005da8:	690b      	ldr	r3, [r1, #16]
 8005daa:	b963      	cbnz	r3, 8005dc6 <_svfiprintf_r+0x32>
 8005dac:	2140      	movs	r1, #64	; 0x40
 8005dae:	f7ff ff3b 	bl	8005c28 <_malloc_r>
 8005db2:	6028      	str	r0, [r5, #0]
 8005db4:	6128      	str	r0, [r5, #16]
 8005db6:	b920      	cbnz	r0, 8005dc2 <_svfiprintf_r+0x2e>
 8005db8:	230c      	movs	r3, #12
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	e0d1      	b.n	8005f66 <_svfiprintf_r+0x1d2>
 8005dc2:	2340      	movs	r3, #64	; 0x40
 8005dc4:	616b      	str	r3, [r5, #20]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dca:	2320      	movs	r3, #32
 8005dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dd4:	2330      	movs	r3, #48	; 0x30
 8005dd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f80 <_svfiprintf_r+0x1ec>
 8005dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dde:	f04f 0901 	mov.w	r9, #1
 8005de2:	4623      	mov	r3, r4
 8005de4:	469a      	mov	sl, r3
 8005de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dea:	b10a      	cbz	r2, 8005df0 <_svfiprintf_r+0x5c>
 8005dec:	2a25      	cmp	r2, #37	; 0x25
 8005dee:	d1f9      	bne.n	8005de4 <_svfiprintf_r+0x50>
 8005df0:	ebba 0b04 	subs.w	fp, sl, r4
 8005df4:	d00b      	beq.n	8005e0e <_svfiprintf_r+0x7a>
 8005df6:	465b      	mov	r3, fp
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff ff6d 	bl	8005cdc <__ssputs_r>
 8005e02:	3001      	adds	r0, #1
 8005e04:	f000 80aa 	beq.w	8005f5c <_svfiprintf_r+0x1c8>
 8005e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e0a:	445a      	add	r2, fp
 8005e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80a2 	beq.w	8005f5c <_svfiprintf_r+0x1c8>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e22:	f10a 0a01 	add.w	sl, sl, #1
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	9307      	str	r3, [sp, #28]
 8005e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e30:	4654      	mov	r4, sl
 8005e32:	2205      	movs	r2, #5
 8005e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e38:	4851      	ldr	r0, [pc, #324]	; (8005f80 <_svfiprintf_r+0x1ec>)
 8005e3a:	f7fa fb79 	bl	8000530 <memchr>
 8005e3e:	9a04      	ldr	r2, [sp, #16]
 8005e40:	b9d8      	cbnz	r0, 8005e7a <_svfiprintf_r+0xe6>
 8005e42:	06d0      	lsls	r0, r2, #27
 8005e44:	bf44      	itt	mi
 8005e46:	2320      	movmi	r3, #32
 8005e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e4c:	0711      	lsls	r1, r2, #28
 8005e4e:	bf44      	itt	mi
 8005e50:	232b      	movmi	r3, #43	; 0x2b
 8005e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e56:	f89a 3000 	ldrb.w	r3, [sl]
 8005e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5c:	d015      	beq.n	8005e8a <_svfiprintf_r+0xf6>
 8005e5e:	9a07      	ldr	r2, [sp, #28]
 8005e60:	4654      	mov	r4, sl
 8005e62:	2000      	movs	r0, #0
 8005e64:	f04f 0c0a 	mov.w	ip, #10
 8005e68:	4621      	mov	r1, r4
 8005e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e6e:	3b30      	subs	r3, #48	; 0x30
 8005e70:	2b09      	cmp	r3, #9
 8005e72:	d94e      	bls.n	8005f12 <_svfiprintf_r+0x17e>
 8005e74:	b1b0      	cbz	r0, 8005ea4 <_svfiprintf_r+0x110>
 8005e76:	9207      	str	r2, [sp, #28]
 8005e78:	e014      	b.n	8005ea4 <_svfiprintf_r+0x110>
 8005e7a:	eba0 0308 	sub.w	r3, r0, r8
 8005e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	46a2      	mov	sl, r4
 8005e88:	e7d2      	b.n	8005e30 <_svfiprintf_r+0x9c>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	1d19      	adds	r1, r3, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	9103      	str	r1, [sp, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfbb      	ittet	lt
 8005e96:	425b      	neglt	r3, r3
 8005e98:	f042 0202 	orrlt.w	r2, r2, #2
 8005e9c:	9307      	strge	r3, [sp, #28]
 8005e9e:	9307      	strlt	r3, [sp, #28]
 8005ea0:	bfb8      	it	lt
 8005ea2:	9204      	strlt	r2, [sp, #16]
 8005ea4:	7823      	ldrb	r3, [r4, #0]
 8005ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ea8:	d10c      	bne.n	8005ec4 <_svfiprintf_r+0x130>
 8005eaa:	7863      	ldrb	r3, [r4, #1]
 8005eac:	2b2a      	cmp	r3, #42	; 0x2a
 8005eae:	d135      	bne.n	8005f1c <_svfiprintf_r+0x188>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	1d1a      	adds	r2, r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	9203      	str	r2, [sp, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bfb8      	it	lt
 8005ebc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ec0:	3402      	adds	r4, #2
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f90 <_svfiprintf_r+0x1fc>
 8005ec8:	7821      	ldrb	r1, [r4, #0]
 8005eca:	2203      	movs	r2, #3
 8005ecc:	4650      	mov	r0, sl
 8005ece:	f7fa fb2f 	bl	8000530 <memchr>
 8005ed2:	b140      	cbz	r0, 8005ee6 <_svfiprintf_r+0x152>
 8005ed4:	2340      	movs	r3, #64	; 0x40
 8005ed6:	eba0 000a 	sub.w	r0, r0, sl
 8005eda:	fa03 f000 	lsl.w	r0, r3, r0
 8005ede:	9b04      	ldr	r3, [sp, #16]
 8005ee0:	4303      	orrs	r3, r0
 8005ee2:	3401      	adds	r4, #1
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eea:	4826      	ldr	r0, [pc, #152]	; (8005f84 <_svfiprintf_r+0x1f0>)
 8005eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ef0:	2206      	movs	r2, #6
 8005ef2:	f7fa fb1d 	bl	8000530 <memchr>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d038      	beq.n	8005f6c <_svfiprintf_r+0x1d8>
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <_svfiprintf_r+0x1f4>)
 8005efc:	bb1b      	cbnz	r3, 8005f46 <_svfiprintf_r+0x1b2>
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	3307      	adds	r3, #7
 8005f02:	f023 0307 	bic.w	r3, r3, #7
 8005f06:	3308      	adds	r3, #8
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0c:	4433      	add	r3, r6
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	e767      	b.n	8005de2 <_svfiprintf_r+0x4e>
 8005f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f16:	460c      	mov	r4, r1
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e7a5      	b.n	8005e68 <_svfiprintf_r+0xd4>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	3401      	adds	r4, #1
 8005f20:	9305      	str	r3, [sp, #20]
 8005f22:	4619      	mov	r1, r3
 8005f24:	f04f 0c0a 	mov.w	ip, #10
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f2e:	3a30      	subs	r2, #48	; 0x30
 8005f30:	2a09      	cmp	r2, #9
 8005f32:	d903      	bls.n	8005f3c <_svfiprintf_r+0x1a8>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0c5      	beq.n	8005ec4 <_svfiprintf_r+0x130>
 8005f38:	9105      	str	r1, [sp, #20]
 8005f3a:	e7c3      	b.n	8005ec4 <_svfiprintf_r+0x130>
 8005f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f40:	4604      	mov	r4, r0
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7f0      	b.n	8005f28 <_svfiprintf_r+0x194>
 8005f46:	ab03      	add	r3, sp, #12
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <_svfiprintf_r+0x1f8>)
 8005f4e:	a904      	add	r1, sp, #16
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7fd fa6b 	bl	800342c <_printf_float>
 8005f56:	1c42      	adds	r2, r0, #1
 8005f58:	4606      	mov	r6, r0
 8005f5a:	d1d6      	bne.n	8005f0a <_svfiprintf_r+0x176>
 8005f5c:	89ab      	ldrh	r3, [r5, #12]
 8005f5e:	065b      	lsls	r3, r3, #25
 8005f60:	f53f af2c 	bmi.w	8005dbc <_svfiprintf_r+0x28>
 8005f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f66:	b01d      	add	sp, #116	; 0x74
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6c:	ab03      	add	r3, sp, #12
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	462a      	mov	r2, r5
 8005f72:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <_svfiprintf_r+0x1f8>)
 8005f74:	a904      	add	r1, sp, #16
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7fd fcfc 	bl	8003974 <_printf_i>
 8005f7c:	e7eb      	b.n	8005f56 <_svfiprintf_r+0x1c2>
 8005f7e:	bf00      	nop
 8005f80:	08012a0c 	.word	0x08012a0c
 8005f84:	08012a16 	.word	0x08012a16
 8005f88:	0800342d 	.word	0x0800342d
 8005f8c:	08005cdd 	.word	0x08005cdd
 8005f90:	08012a12 	.word	0x08012a12

08005f94 <__sfputc_r>:
 8005f94:	6893      	ldr	r3, [r2, #8]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	b410      	push	{r4}
 8005f9c:	6093      	str	r3, [r2, #8]
 8005f9e:	da08      	bge.n	8005fb2 <__sfputc_r+0x1e>
 8005fa0:	6994      	ldr	r4, [r2, #24]
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	db01      	blt.n	8005faa <__sfputc_r+0x16>
 8005fa6:	290a      	cmp	r1, #10
 8005fa8:	d103      	bne.n	8005fb2 <__sfputc_r+0x1e>
 8005faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fae:	f7fe b8a5 	b.w	80040fc <__swbuf_r>
 8005fb2:	6813      	ldr	r3, [r2, #0]
 8005fb4:	1c58      	adds	r0, r3, #1
 8005fb6:	6010      	str	r0, [r2, #0]
 8005fb8:	7019      	strb	r1, [r3, #0]
 8005fba:	4608      	mov	r0, r1
 8005fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <__sfputs_r>:
 8005fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	460f      	mov	r7, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	18d5      	adds	r5, r2, r3
 8005fcc:	42ac      	cmp	r4, r5
 8005fce:	d101      	bne.n	8005fd4 <__sfputs_r+0x12>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e007      	b.n	8005fe4 <__sfputs_r+0x22>
 8005fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd8:	463a      	mov	r2, r7
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ffda 	bl	8005f94 <__sfputc_r>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d1f3      	bne.n	8005fcc <__sfputs_r+0xa>
 8005fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fe8 <_vfiprintf_r>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	460d      	mov	r5, r1
 8005fee:	b09d      	sub	sp, #116	; 0x74
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	4698      	mov	r8, r3
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	b118      	cbz	r0, 8006000 <_vfiprintf_r+0x18>
 8005ff8:	6983      	ldr	r3, [r0, #24]
 8005ffa:	b90b      	cbnz	r3, 8006000 <_vfiprintf_r+0x18>
 8005ffc:	f7ff f8f0 	bl	80051e0 <__sinit>
 8006000:	4b89      	ldr	r3, [pc, #548]	; (8006228 <_vfiprintf_r+0x240>)
 8006002:	429d      	cmp	r5, r3
 8006004:	d11b      	bne.n	800603e <_vfiprintf_r+0x56>
 8006006:	6875      	ldr	r5, [r6, #4]
 8006008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800600a:	07d9      	lsls	r1, r3, #31
 800600c:	d405      	bmi.n	800601a <_vfiprintf_r+0x32>
 800600e:	89ab      	ldrh	r3, [r5, #12]
 8006010:	059a      	lsls	r2, r3, #22
 8006012:	d402      	bmi.n	800601a <_vfiprintf_r+0x32>
 8006014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006016:	f7ff f998 	bl	800534a <__retarget_lock_acquire_recursive>
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	071b      	lsls	r3, r3, #28
 800601e:	d501      	bpl.n	8006024 <_vfiprintf_r+0x3c>
 8006020:	692b      	ldr	r3, [r5, #16]
 8006022:	b9eb      	cbnz	r3, 8006060 <_vfiprintf_r+0x78>
 8006024:	4629      	mov	r1, r5
 8006026:	4630      	mov	r0, r6
 8006028:	f7fe f8ba 	bl	80041a0 <__swsetup_r>
 800602c:	b1c0      	cbz	r0, 8006060 <_vfiprintf_r+0x78>
 800602e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006030:	07dc      	lsls	r4, r3, #31
 8006032:	d50e      	bpl.n	8006052 <_vfiprintf_r+0x6a>
 8006034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006038:	b01d      	add	sp, #116	; 0x74
 800603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603e:	4b7b      	ldr	r3, [pc, #492]	; (800622c <_vfiprintf_r+0x244>)
 8006040:	429d      	cmp	r5, r3
 8006042:	d101      	bne.n	8006048 <_vfiprintf_r+0x60>
 8006044:	68b5      	ldr	r5, [r6, #8]
 8006046:	e7df      	b.n	8006008 <_vfiprintf_r+0x20>
 8006048:	4b79      	ldr	r3, [pc, #484]	; (8006230 <_vfiprintf_r+0x248>)
 800604a:	429d      	cmp	r5, r3
 800604c:	bf08      	it	eq
 800604e:	68f5      	ldreq	r5, [r6, #12]
 8006050:	e7da      	b.n	8006008 <_vfiprintf_r+0x20>
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	0598      	lsls	r0, r3, #22
 8006056:	d4ed      	bmi.n	8006034 <_vfiprintf_r+0x4c>
 8006058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800605a:	f7ff f977 	bl	800534c <__retarget_lock_release_recursive>
 800605e:	e7e9      	b.n	8006034 <_vfiprintf_r+0x4c>
 8006060:	2300      	movs	r3, #0
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	2320      	movs	r3, #32
 8006066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800606a:	f8cd 800c 	str.w	r8, [sp, #12]
 800606e:	2330      	movs	r3, #48	; 0x30
 8006070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006234 <_vfiprintf_r+0x24c>
 8006074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006078:	f04f 0901 	mov.w	r9, #1
 800607c:	4623      	mov	r3, r4
 800607e:	469a      	mov	sl, r3
 8006080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006084:	b10a      	cbz	r2, 800608a <_vfiprintf_r+0xa2>
 8006086:	2a25      	cmp	r2, #37	; 0x25
 8006088:	d1f9      	bne.n	800607e <_vfiprintf_r+0x96>
 800608a:	ebba 0b04 	subs.w	fp, sl, r4
 800608e:	d00b      	beq.n	80060a8 <_vfiprintf_r+0xc0>
 8006090:	465b      	mov	r3, fp
 8006092:	4622      	mov	r2, r4
 8006094:	4629      	mov	r1, r5
 8006096:	4630      	mov	r0, r6
 8006098:	f7ff ff93 	bl	8005fc2 <__sfputs_r>
 800609c:	3001      	adds	r0, #1
 800609e:	f000 80aa 	beq.w	80061f6 <_vfiprintf_r+0x20e>
 80060a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060a4:	445a      	add	r2, fp
 80060a6:	9209      	str	r2, [sp, #36]	; 0x24
 80060a8:	f89a 3000 	ldrb.w	r3, [sl]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80a2 	beq.w	80061f6 <_vfiprintf_r+0x20e>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060bc:	f10a 0a01 	add.w	sl, sl, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	9307      	str	r3, [sp, #28]
 80060c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c8:	931a      	str	r3, [sp, #104]	; 0x68
 80060ca:	4654      	mov	r4, sl
 80060cc:	2205      	movs	r2, #5
 80060ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d2:	4858      	ldr	r0, [pc, #352]	; (8006234 <_vfiprintf_r+0x24c>)
 80060d4:	f7fa fa2c 	bl	8000530 <memchr>
 80060d8:	9a04      	ldr	r2, [sp, #16]
 80060da:	b9d8      	cbnz	r0, 8006114 <_vfiprintf_r+0x12c>
 80060dc:	06d1      	lsls	r1, r2, #27
 80060de:	bf44      	itt	mi
 80060e0:	2320      	movmi	r3, #32
 80060e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e6:	0713      	lsls	r3, r2, #28
 80060e8:	bf44      	itt	mi
 80060ea:	232b      	movmi	r3, #43	; 0x2b
 80060ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f0:	f89a 3000 	ldrb.w	r3, [sl]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d015      	beq.n	8006124 <_vfiprintf_r+0x13c>
 80060f8:	9a07      	ldr	r2, [sp, #28]
 80060fa:	4654      	mov	r4, sl
 80060fc:	2000      	movs	r0, #0
 80060fe:	f04f 0c0a 	mov.w	ip, #10
 8006102:	4621      	mov	r1, r4
 8006104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006108:	3b30      	subs	r3, #48	; 0x30
 800610a:	2b09      	cmp	r3, #9
 800610c:	d94e      	bls.n	80061ac <_vfiprintf_r+0x1c4>
 800610e:	b1b0      	cbz	r0, 800613e <_vfiprintf_r+0x156>
 8006110:	9207      	str	r2, [sp, #28]
 8006112:	e014      	b.n	800613e <_vfiprintf_r+0x156>
 8006114:	eba0 0308 	sub.w	r3, r0, r8
 8006118:	fa09 f303 	lsl.w	r3, r9, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	46a2      	mov	sl, r4
 8006122:	e7d2      	b.n	80060ca <_vfiprintf_r+0xe2>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	1d19      	adds	r1, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	9103      	str	r1, [sp, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	bfbb      	ittet	lt
 8006130:	425b      	neglt	r3, r3
 8006132:	f042 0202 	orrlt.w	r2, r2, #2
 8006136:	9307      	strge	r3, [sp, #28]
 8006138:	9307      	strlt	r3, [sp, #28]
 800613a:	bfb8      	it	lt
 800613c:	9204      	strlt	r2, [sp, #16]
 800613e:	7823      	ldrb	r3, [r4, #0]
 8006140:	2b2e      	cmp	r3, #46	; 0x2e
 8006142:	d10c      	bne.n	800615e <_vfiprintf_r+0x176>
 8006144:	7863      	ldrb	r3, [r4, #1]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d135      	bne.n	80061b6 <_vfiprintf_r+0x1ce>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	9203      	str	r2, [sp, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfb8      	it	lt
 8006156:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800615a:	3402      	adds	r4, #2
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006244 <_vfiprintf_r+0x25c>
 8006162:	7821      	ldrb	r1, [r4, #0]
 8006164:	2203      	movs	r2, #3
 8006166:	4650      	mov	r0, sl
 8006168:	f7fa f9e2 	bl	8000530 <memchr>
 800616c:	b140      	cbz	r0, 8006180 <_vfiprintf_r+0x198>
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	eba0 000a 	sub.w	r0, r0, sl
 8006174:	fa03 f000 	lsl.w	r0, r3, r0
 8006178:	9b04      	ldr	r3, [sp, #16]
 800617a:	4303      	orrs	r3, r0
 800617c:	3401      	adds	r4, #1
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006184:	482c      	ldr	r0, [pc, #176]	; (8006238 <_vfiprintf_r+0x250>)
 8006186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800618a:	2206      	movs	r2, #6
 800618c:	f7fa f9d0 	bl	8000530 <memchr>
 8006190:	2800      	cmp	r0, #0
 8006192:	d03f      	beq.n	8006214 <_vfiprintf_r+0x22c>
 8006194:	4b29      	ldr	r3, [pc, #164]	; (800623c <_vfiprintf_r+0x254>)
 8006196:	bb1b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x1f8>
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	3307      	adds	r3, #7
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	3308      	adds	r3, #8
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a6:	443b      	add	r3, r7
 80061a8:	9309      	str	r3, [sp, #36]	; 0x24
 80061aa:	e767      	b.n	800607c <_vfiprintf_r+0x94>
 80061ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80061b0:	460c      	mov	r4, r1
 80061b2:	2001      	movs	r0, #1
 80061b4:	e7a5      	b.n	8006102 <_vfiprintf_r+0x11a>
 80061b6:	2300      	movs	r3, #0
 80061b8:	3401      	adds	r4, #1
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	4619      	mov	r1, r3
 80061be:	f04f 0c0a 	mov.w	ip, #10
 80061c2:	4620      	mov	r0, r4
 80061c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c8:	3a30      	subs	r2, #48	; 0x30
 80061ca:	2a09      	cmp	r2, #9
 80061cc:	d903      	bls.n	80061d6 <_vfiprintf_r+0x1ee>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0c5      	beq.n	800615e <_vfiprintf_r+0x176>
 80061d2:	9105      	str	r1, [sp, #20]
 80061d4:	e7c3      	b.n	800615e <_vfiprintf_r+0x176>
 80061d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061da:	4604      	mov	r4, r0
 80061dc:	2301      	movs	r3, #1
 80061de:	e7f0      	b.n	80061c2 <_vfiprintf_r+0x1da>
 80061e0:	ab03      	add	r3, sp, #12
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	462a      	mov	r2, r5
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <_vfiprintf_r+0x258>)
 80061e8:	a904      	add	r1, sp, #16
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7fd f91e 	bl	800342c <_printf_float>
 80061f0:	4607      	mov	r7, r0
 80061f2:	1c78      	adds	r0, r7, #1
 80061f4:	d1d6      	bne.n	80061a4 <_vfiprintf_r+0x1bc>
 80061f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f8:	07d9      	lsls	r1, r3, #31
 80061fa:	d405      	bmi.n	8006208 <_vfiprintf_r+0x220>
 80061fc:	89ab      	ldrh	r3, [r5, #12]
 80061fe:	059a      	lsls	r2, r3, #22
 8006200:	d402      	bmi.n	8006208 <_vfiprintf_r+0x220>
 8006202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006204:	f7ff f8a2 	bl	800534c <__retarget_lock_release_recursive>
 8006208:	89ab      	ldrh	r3, [r5, #12]
 800620a:	065b      	lsls	r3, r3, #25
 800620c:	f53f af12 	bmi.w	8006034 <_vfiprintf_r+0x4c>
 8006210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006212:	e711      	b.n	8006038 <_vfiprintf_r+0x50>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	462a      	mov	r2, r5
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <_vfiprintf_r+0x258>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4630      	mov	r0, r6
 8006220:	f7fd fba8 	bl	8003974 <_printf_i>
 8006224:	e7e4      	b.n	80061f0 <_vfiprintf_r+0x208>
 8006226:	bf00      	nop
 8006228:	0801284c 	.word	0x0801284c
 800622c:	0801286c 	.word	0x0801286c
 8006230:	0801282c 	.word	0x0801282c
 8006234:	08012a0c 	.word	0x08012a0c
 8006238:	08012a16 	.word	0x08012a16
 800623c:	0800342d 	.word	0x0800342d
 8006240:	08005fc3 	.word	0x08005fc3
 8006244:	08012a12 	.word	0x08012a12

08006248 <_putc_r>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	460d      	mov	r5, r1
 800624c:	4614      	mov	r4, r2
 800624e:	4606      	mov	r6, r0
 8006250:	b118      	cbz	r0, 800625a <_putc_r+0x12>
 8006252:	6983      	ldr	r3, [r0, #24]
 8006254:	b90b      	cbnz	r3, 800625a <_putc_r+0x12>
 8006256:	f7fe ffc3 	bl	80051e0 <__sinit>
 800625a:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <_putc_r+0x84>)
 800625c:	429c      	cmp	r4, r3
 800625e:	d124      	bne.n	80062aa <_putc_r+0x62>
 8006260:	6874      	ldr	r4, [r6, #4]
 8006262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006264:	07d8      	lsls	r0, r3, #31
 8006266:	d405      	bmi.n	8006274 <_putc_r+0x2c>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	0599      	lsls	r1, r3, #22
 800626c:	d402      	bmi.n	8006274 <_putc_r+0x2c>
 800626e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006270:	f7ff f86b 	bl	800534a <__retarget_lock_acquire_recursive>
 8006274:	68a3      	ldr	r3, [r4, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	60a3      	str	r3, [r4, #8]
 800627c:	da05      	bge.n	800628a <_putc_r+0x42>
 800627e:	69a2      	ldr	r2, [r4, #24]
 8006280:	4293      	cmp	r3, r2
 8006282:	db1c      	blt.n	80062be <_putc_r+0x76>
 8006284:	b2eb      	uxtb	r3, r5
 8006286:	2b0a      	cmp	r3, #10
 8006288:	d019      	beq.n	80062be <_putc_r+0x76>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	6022      	str	r2, [r4, #0]
 8006290:	701d      	strb	r5, [r3, #0]
 8006292:	b2ed      	uxtb	r5, r5
 8006294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006296:	07da      	lsls	r2, r3, #31
 8006298:	d405      	bmi.n	80062a6 <_putc_r+0x5e>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	059b      	lsls	r3, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_putc_r+0x5e>
 80062a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a2:	f7ff f853 	bl	800534c <__retarget_lock_release_recursive>
 80062a6:	4628      	mov	r0, r5
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <_putc_r+0x88>)
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d101      	bne.n	80062b4 <_putc_r+0x6c>
 80062b0:	68b4      	ldr	r4, [r6, #8]
 80062b2:	e7d6      	b.n	8006262 <_putc_r+0x1a>
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <_putc_r+0x8c>)
 80062b6:	429c      	cmp	r4, r3
 80062b8:	bf08      	it	eq
 80062ba:	68f4      	ldreq	r4, [r6, #12]
 80062bc:	e7d1      	b.n	8006262 <_putc_r+0x1a>
 80062be:	4629      	mov	r1, r5
 80062c0:	4622      	mov	r2, r4
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7fd ff1a 	bl	80040fc <__swbuf_r>
 80062c8:	4605      	mov	r5, r0
 80062ca:	e7e3      	b.n	8006294 <_putc_r+0x4c>
 80062cc:	0801284c 	.word	0x0801284c
 80062d0:	0801286c 	.word	0x0801286c
 80062d4:	0801282c 	.word	0x0801282c

080062d8 <__sread>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e0:	f7fa fff1 	bl	80012c6 <_read_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	bfab      	itete	ge
 80062e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062ea:	89a3      	ldrhlt	r3, [r4, #12]
 80062ec:	181b      	addge	r3, r3, r0
 80062ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062f2:	bfac      	ite	ge
 80062f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80062f6:	81a3      	strhlt	r3, [r4, #12]
 80062f8:	bd10      	pop	{r4, pc}

080062fa <__swrite>:
 80062fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fe:	461f      	mov	r7, r3
 8006300:	898b      	ldrh	r3, [r1, #12]
 8006302:	05db      	lsls	r3, r3, #23
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	4616      	mov	r6, r2
 800630a:	d505      	bpl.n	8006318 <__swrite+0x1e>
 800630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006310:	2302      	movs	r3, #2
 8006312:	2200      	movs	r2, #0
 8006314:	f7fa ffd5 	bl	80012c2 <_lseek_r>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	4628      	mov	r0, r5
 800632a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	f7fa bfcf 	b.w	80012d0 <_write_r>

08006332 <__sseek>:
 8006332:	b510      	push	{r4, lr}
 8006334:	460c      	mov	r4, r1
 8006336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633a:	f7fa ffc2 	bl	80012c2 <_lseek_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	bf15      	itete	ne
 8006344:	6560      	strne	r0, [r4, #84]	; 0x54
 8006346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800634a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800634e:	81a3      	strheq	r3, [r4, #12]
 8006350:	bf18      	it	ne
 8006352:	81a3      	strhne	r3, [r4, #12]
 8006354:	bd10      	pop	{r4, pc}

08006356 <__sclose>:
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f7fa bfa9 	b.w	80012b0 <_close_r>

0800635e <__ascii_wctomb>:
 800635e:	b149      	cbz	r1, 8006374 <__ascii_wctomb+0x16>
 8006360:	2aff      	cmp	r2, #255	; 0xff
 8006362:	bf85      	ittet	hi
 8006364:	238a      	movhi	r3, #138	; 0x8a
 8006366:	6003      	strhi	r3, [r0, #0]
 8006368:	700a      	strbls	r2, [r1, #0]
 800636a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800636e:	bf98      	it	ls
 8006370:	2001      	movls	r0, #1
 8006372:	4770      	bx	lr
 8006374:	4608      	mov	r0, r1
 8006376:	4770      	bx	lr

08006378 <abort>:
 8006378:	b508      	push	{r3, lr}
 800637a:	2006      	movs	r0, #6
 800637c:	f000 f878 	bl	8006470 <raise>
 8006380:	2001      	movs	r0, #1
 8006382:	f7fa ffc8 	bl	8001316 <_exit>

08006386 <memmove>:
 8006386:	4288      	cmp	r0, r1
 8006388:	b510      	push	{r4, lr}
 800638a:	eb01 0402 	add.w	r4, r1, r2
 800638e:	d902      	bls.n	8006396 <memmove+0x10>
 8006390:	4284      	cmp	r4, r0
 8006392:	4623      	mov	r3, r4
 8006394:	d807      	bhi.n	80063a6 <memmove+0x20>
 8006396:	1e43      	subs	r3, r0, #1
 8006398:	42a1      	cmp	r1, r4
 800639a:	d008      	beq.n	80063ae <memmove+0x28>
 800639c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063a4:	e7f8      	b.n	8006398 <memmove+0x12>
 80063a6:	4402      	add	r2, r0
 80063a8:	4601      	mov	r1, r0
 80063aa:	428a      	cmp	r2, r1
 80063ac:	d100      	bne.n	80063b0 <memmove+0x2a>
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063b8:	e7f7      	b.n	80063aa <memmove+0x24>
	...

080063bc <__malloc_lock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__malloc_lock+0x8>)
 80063be:	f7fe bfc4 	b.w	800534a <__retarget_lock_acquire_recursive>
 80063c2:	bf00      	nop
 80063c4:	20000d4c 	.word	0x20000d4c

080063c8 <__malloc_unlock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__malloc_unlock+0x8>)
 80063ca:	f7fe bfbf 	b.w	800534c <__retarget_lock_release_recursive>
 80063ce:	bf00      	nop
 80063d0:	20000d4c 	.word	0x20000d4c

080063d4 <_realloc_r>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	4607      	mov	r7, r0
 80063d8:	4614      	mov	r4, r2
 80063da:	460e      	mov	r6, r1
 80063dc:	b921      	cbnz	r1, 80063e8 <_realloc_r+0x14>
 80063de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063e2:	4611      	mov	r1, r2
 80063e4:	f7ff bc20 	b.w	8005c28 <_malloc_r>
 80063e8:	b922      	cbnz	r2, 80063f4 <_realloc_r+0x20>
 80063ea:	f7ff fbd1 	bl	8005b90 <_free_r>
 80063ee:	4625      	mov	r5, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f4:	f000 f858 	bl	80064a8 <_malloc_usable_size_r>
 80063f8:	42a0      	cmp	r0, r4
 80063fa:	d20f      	bcs.n	800641c <_realloc_r+0x48>
 80063fc:	4621      	mov	r1, r4
 80063fe:	4638      	mov	r0, r7
 8006400:	f7ff fc12 	bl	8005c28 <_malloc_r>
 8006404:	4605      	mov	r5, r0
 8006406:	2800      	cmp	r0, #0
 8006408:	d0f2      	beq.n	80063f0 <_realloc_r+0x1c>
 800640a:	4631      	mov	r1, r6
 800640c:	4622      	mov	r2, r4
 800640e:	f7ff f81d 	bl	800544c <memcpy>
 8006412:	4631      	mov	r1, r6
 8006414:	4638      	mov	r0, r7
 8006416:	f7ff fbbb 	bl	8005b90 <_free_r>
 800641a:	e7e9      	b.n	80063f0 <_realloc_r+0x1c>
 800641c:	4635      	mov	r5, r6
 800641e:	e7e7      	b.n	80063f0 <_realloc_r+0x1c>

08006420 <_raise_r>:
 8006420:	291f      	cmp	r1, #31
 8006422:	b538      	push	{r3, r4, r5, lr}
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	d904      	bls.n	8006434 <_raise_r+0x14>
 800642a:	2316      	movs	r3, #22
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006436:	b112      	cbz	r2, 800643e <_raise_r+0x1e>
 8006438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800643c:	b94b      	cbnz	r3, 8006452 <_raise_r+0x32>
 800643e:	4620      	mov	r0, r4
 8006440:	f000 f830 	bl	80064a4 <_getpid_r>
 8006444:	462a      	mov	r2, r5
 8006446:	4601      	mov	r1, r0
 8006448:	4620      	mov	r0, r4
 800644a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800644e:	f000 b817 	b.w	8006480 <_kill_r>
 8006452:	2b01      	cmp	r3, #1
 8006454:	d00a      	beq.n	800646c <_raise_r+0x4c>
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	d103      	bne.n	8006462 <_raise_r+0x42>
 800645a:	2316      	movs	r3, #22
 800645c:	6003      	str	r3, [r0, #0]
 800645e:	2001      	movs	r0, #1
 8006460:	e7e7      	b.n	8006432 <_raise_r+0x12>
 8006462:	2400      	movs	r4, #0
 8006464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006468:	4628      	mov	r0, r5
 800646a:	4798      	blx	r3
 800646c:	2000      	movs	r0, #0
 800646e:	e7e0      	b.n	8006432 <_raise_r+0x12>

08006470 <raise>:
 8006470:	4b02      	ldr	r3, [pc, #8]	; (800647c <raise+0xc>)
 8006472:	4601      	mov	r1, r0
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	f7ff bfd3 	b.w	8006420 <_raise_r>
 800647a:	bf00      	nop
 800647c:	200001b0 	.word	0x200001b0

08006480 <_kill_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d07      	ldr	r5, [pc, #28]	; (80064a0 <_kill_r+0x20>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	f7fa ff3f 	bl	8001310 <_kill>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d102      	bne.n	800649c <_kill_r+0x1c>
 8006496:	682b      	ldr	r3, [r5, #0]
 8006498:	b103      	cbz	r3, 800649c <_kill_r+0x1c>
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	20000d58 	.word	0x20000d58

080064a4 <_getpid_r>:
 80064a4:	f7fa bf38 	b.w	8001318 <_getpid>

080064a8 <_malloc_usable_size_r>:
 80064a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ac:	1f18      	subs	r0, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bfbc      	itt	lt
 80064b2:	580b      	ldrlt	r3, [r1, r0]
 80064b4:	18c0      	addlt	r0, r0, r3
 80064b6:	4770      	bx	lr

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
