
dcmotorLab9and10.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080062c0 l    d  .rodata	00000000 .rodata
0801296c l    d  .ARM	00000000 .ARM
08012974 l    d  .init_array	00000000 .init_array
08012978 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001ec l    d  .bss	00000000 .bss
20000c10 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
0800302c l       .text	00000000 LoopCopyDataInit
08003026 l       .text	00000000 CopyDataInit
0800303e l       .text	00000000 LoopFillZerobss
0800303a l       .text	00000000 FillZerobss
08003068 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080062a4 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001ec l       .bss	00000001 completed.1
08012978 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001f0 l       .bss	00000018 object.0
08012974 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000efc l     F .text	0000004c TerminalRead
08000f48 l     F .text	0000007c Uncompress
08000fc4 l     F .text	00000190 HAL_GPIO_Init
08001154 l     F .text	0000009c TIM_Base_SetConfig
080011f0 l     F .text	00000050 TIM_OC1_SetConfig
08001240 l     F .text	00000074 HAL_TIM_Base_Init.constprop.0
080012b4 l     F .text	00000058 HAL_NVIC_SetPriority.constprop.0
0800130c l     F .text	0000008c HAL_TIM_PWM_Start.part.0.constprop.0.isra.0
08001398 l     F .text	00000050 HAL_InitTick.isra.0
080013e8 l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
080014b0 l     F .text	00000044 CmdTasks
080014f4 l     F .text	00000054 DecodeReadRegister
08001548 l     F .text	00000020 CmdVersion
08001568 l     F .text	00000050 DecodeWriteRegister.isra.0
080015b8 l     F .text	0000002c CmdTest
080015e4 l     F .text	00000468 CmdDC
08001a4c l     F .text	000000b8 DecodeRegister
08001b04 l     F .text	00000050 DecodePeripheral
08001b54 l     F .text	00000060 DecodePrintRegisters
08001bb4 l     F .text	00000058 DecodePrintPeripherals.constprop.0
08001c0c l     F .text	00000030 fetch_string_arg
08001c3c l     F .text	00000204 TaskInput
08001e40 l     F .text	0000003c fetch_uint32_arg
08001e7c l     F .text	00000058 CmdLed
08001ed4 l     F .text	000001c4 CmdDC2
08002098 l     F .text	00000070 CmdR
08002108 l     F .text	0000001e CmdW
08002128 l     F .text	000000f8 CmdDump
08002220 l     F .text	00000074 CmdSend
08002294 l     F .text	00000060 CmdReceive
080022f4 l     F .text	00000044 CmdTransparent
08002338 l     F .text	00000284 CmdDecode
080025bc l     F .text	0000003c PolledPrintf
080025f8 l     F .text	00000068 CmdStats
20000208 l     O .bss	00000004 AccumTicks
2000020c l     O .bss	00000004 LedState.0
20000210 l     O .bss	00000834 TerminalState
20000a44 l     O .bss	00000004 address.1
20000a48 l     O .bss	00000014 buf.0
20000a5c l     O .bss	00000004 cmdArgs
20000a60 l     O .bss	00000004 count.3
20000a64 l     O .bss	00000002 counterStart
20000a68 l     O .bss	00000004 crReceived
20000a6c l     O .bss	00000004 heap_end.0
20000a70 l     O .bss	0000000c hiwdg
20000a7c l     O .bss	00000048 htim1
20000ac4 l     O .bss	00000048 htim11
20000b0c l     O .bss	00000044 huart2
20000b50 l     O .bss	00000050 input
20000ba0 l     O .bss	00000050 input_b
20000bf0 l     O .bss	00000002 oneSecondCount
20000bf4 l     O .bss	00000004 saved.1
20000bf8 l     O .bss	00000004 setTime
20000bfc l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000004 printPrompt.4
20000014 l     O .data	00000004 uwTickPrio
08009da4 l     O .rodata	00000070 ADC1_CR1_fields
08009e14 l     O .rodata	00000060 ADC1_CR2_fields
08009e74 l     O .rodata	00000008 ADC1_DR_fields
08009e7c l     O .rodata	00000008 ADC1_HTR_fields
08009e84 l     O .rodata	00000008 ADC1_JDR1_fields
08009e8c l     O .rodata	00000008 ADC1_JDR2_fields
08009e94 l     O .rodata	00000008 ADC1_JDR3_fields
08009e9c l     O .rodata	00000008 ADC1_JDR4_fields
08009ea4 l     O .rodata	00000008 ADC1_JOFR1_fields
08009eac l     O .rodata	00000008 ADC1_JOFR2_fields
08009eb4 l     O .rodata	00000008 ADC1_JOFR3_fields
08009ebc l     O .rodata	00000008 ADC1_JOFR4_fields
08009ec4 l     O .rodata	00000028 ADC1_JSQR_fields
08009eec l     O .rodata	00000008 ADC1_LTR_fields
08009ef4 l     O .rodata	00000008 ADC1_SMPR1_fields
08009efc l     O .rodata	00000008 ADC1_SMPR2_fields
08009f04 l     O .rodata	00000028 ADC1_SQR1_fields
08009f2c l     O .rodata	00000030 ADC1_SQR2_fields
08009f5c l     O .rodata	00000030 ADC1_SQR3_fields
08009f8c l     O .rodata	00000030 ADC1_SR_fields
08009fbc l     O .rodata	00000140 ADC1_registers
0800a0fc l     O .rodata	00000030 ADC_Common_CCR_fields
0800a12c l     O .rodata	00000090 ADC_Common_CSR_fields
0800a1bc l     O .rodata	00000020 ADC_Common_registers
0800a1dc l     O .rodata	00000010 AHBPrescTable
0800a1ec l     O .rodata	00000008 APBPrescTable
0800a1f4 l     O .rodata	00000008 CRC_CR_fields
0800a1fc l     O .rodata	00000008 CRC_DR_fields
0800a204 l     O .rodata	00000008 CRC_IDR_fields
0800a20c l     O .rodata	00000030 CRC_registers
0800a23c l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
0800a28c l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800a2ac l     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800a2d4 l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
0800a2e4 l     O .rodata	00000040 DBG_registers
0800a324 l     O .rodata	000000a0 DMA2_HIFCR_fields
0800a3c4 l     O .rodata	000000a0 DMA2_HISR_fields
0800a464 l     O .rodata	000000a0 DMA2_LIFCR_fields
0800a504 l     O .rodata	000000a0 DMA2_LISR_fields
0800a5a4 l     O .rodata	00000098 DMA2_S0CR_fields
0800a63c l     O .rodata	00000020 DMA2_S0FCR_fields
0800a65c l     O .rodata	00000008 DMA2_S0M0AR_fields
0800a664 l     O .rodata	00000008 DMA2_S0M1AR_fields
0800a66c l     O .rodata	00000008 DMA2_S0NDTR_fields
0800a674 l     O .rodata	00000008 DMA2_S0PAR_fields
0800a67c l     O .rodata	000000a0 DMA2_S1CR_fields
0800a71c l     O .rodata	00000020 DMA2_S1FCR_fields
0800a73c l     O .rodata	00000008 DMA2_S1M0AR_fields
0800a744 l     O .rodata	00000008 DMA2_S1M1AR_fields
0800a74c l     O .rodata	00000008 DMA2_S1NDTR_fields
0800a754 l     O .rodata	00000008 DMA2_S1PAR_fields
0800a75c l     O .rodata	000000a0 DMA2_S2CR_fields
0800a7fc l     O .rodata	00000020 DMA2_S2FCR_fields
0800a81c l     O .rodata	00000008 DMA2_S2M0AR_fields
0800a824 l     O .rodata	00000008 DMA2_S2M1AR_fields
0800a82c l     O .rodata	00000008 DMA2_S2NDTR_fields
0800a834 l     O .rodata	00000008 DMA2_S2PAR_fields
0800a83c l     O .rodata	000000a0 DMA2_S3CR_fields
0800a8dc l     O .rodata	00000020 DMA2_S3FCR_fields
0800a8fc l     O .rodata	00000008 DMA2_S3M0AR_fields
0800a904 l     O .rodata	00000008 DMA2_S3M1AR_fields
0800a90c l     O .rodata	00000008 DMA2_S3NDTR_fields
0800a914 l     O .rodata	00000008 DMA2_S3PAR_fields
0800a91c l     O .rodata	000000a0 DMA2_S4CR_fields
0800a9bc l     O .rodata	00000020 DMA2_S4FCR_fields
0800a9dc l     O .rodata	00000008 DMA2_S4M0AR_fields
0800a9e4 l     O .rodata	00000008 DMA2_S4M1AR_fields
0800a9ec l     O .rodata	00000008 DMA2_S4NDTR_fields
0800a9f4 l     O .rodata	00000008 DMA2_S4PAR_fields
0800a9fc l     O .rodata	000000a0 DMA2_S5CR_fields
0800aa9c l     O .rodata	00000020 DMA2_S5FCR_fields
0800aabc l     O .rodata	00000008 DMA2_S5M0AR_fields
0800aac4 l     O .rodata	00000008 DMA2_S5M1AR_fields
0800aacc l     O .rodata	00000008 DMA2_S5NDTR_fields
0800aad4 l     O .rodata	00000008 DMA2_S5PAR_fields
0800aadc l     O .rodata	000000a0 DMA2_S6CR_fields
0800ab7c l     O .rodata	00000020 DMA2_S6FCR_fields
0800ab9c l     O .rodata	00000008 DMA2_S6M0AR_fields
0800aba4 l     O .rodata	00000008 DMA2_S6M1AR_fields
0800abac l     O .rodata	00000008 DMA2_S6NDTR_fields
0800abb4 l     O .rodata	00000008 DMA2_S6PAR_fields
0800abbc l     O .rodata	000000a0 DMA2_S7CR_fields
0800ac5c l     O .rodata	00000020 DMA2_S7FCR_fields
0800ac7c l     O .rodata	00000008 DMA2_S7M0AR_fields
0800ac84 l     O .rodata	00000008 DMA2_S7M1AR_fields
0800ac8c l     O .rodata	00000008 DMA2_S7NDTR_fields
0800ac94 l     O .rodata	00000008 DMA2_S7PAR_fields
0800ac9c l     O .rodata	00000340 DMA2_registers
0800afdc l     O .rodata	000000b8 EXTI_EMR_fields
0800b094 l     O .rodata	000000b8 EXTI_FTSR_fields
0800b14c l     O .rodata	000000b8 EXTI_IMR_fields
0800b204 l     O .rodata	000000b8 EXTI_PR_fields
0800b2bc l     O .rodata	000000b8 EXTI_RTSR_fields
0800b374 l     O .rodata	000000b8 EXTI_SWIER_fields
0800b42c l     O .rodata	00000060 EXTI_registers
0800b48c l     O .rodata	00000030 FLASH_ACR_fields
0800b4bc l     O .rodata	00000048 FLASH_CR_fields
0800b504 l     O .rodata	00000008 FLASH_KEYR_fields
0800b50c l     O .rodata	00000040 FLASH_OPTCR_fields
0800b54c l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800b554 l     O .rodata	00000038 FLASH_SR_fields
0800b58c l     O .rodata	00000060 FLASH_registers
0800b5ec l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800b5f4 l     O .rodata	00000010 FPU_CPACR_registers
0800b604 l     O .rodata	00000008 FPU_FPCAR_fields
0800b60c l     O .rodata	00000048 FPU_FPCCR_fields
0800b654 l     O .rodata	00000070 FPU_FPSCR_fields
0800b6c4 l     O .rodata	00000030 FPU_registers
0800b6f4 l     O .rodata	00000040 GPIOA_AFRH_fields
0800b734 l     O .rodata	00000040 GPIOA_AFRL_fields
0800b774 l     O .rodata	00000100 GPIOA_BSRR_fields
0800b874 l     O .rodata	00000080 GPIOA_IDR_fields
0800b8f4 l     O .rodata	00000088 GPIOA_LCKR_fields
0800b97c l     O .rodata	00000080 GPIOA_MODER_fields
0800b9fc l     O .rodata	00000080 GPIOA_ODR_fields
0800ba7c l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800bafc l     O .rodata	00000080 GPIOA_OTYPER_fields
0800bb7c l     O .rodata	00000080 GPIOA_PUPDR_fields
0800bbfc l     O .rodata	000000a0 GPIOA_registers
0800bc9c l     O .rodata	00000040 GPIOB_AFRH_fields
0800bcdc l     O .rodata	00000040 GPIOB_AFRL_fields
0800bd1c l     O .rodata	00000100 GPIOB_BSRR_fields
0800be1c l     O .rodata	00000080 GPIOB_IDR_fields
0800be9c l     O .rodata	00000088 GPIOB_LCKR_fields
0800bf24 l     O .rodata	00000080 GPIOB_MODER_fields
0800bfa4 l     O .rodata	00000080 GPIOB_ODR_fields
0800c024 l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800c0a4 l     O .rodata	00000080 GPIOB_OTYPER_fields
0800c124 l     O .rodata	00000080 GPIOB_PUPDR_fields
0800c1a4 l     O .rodata	000000a0 GPIOB_registers
0800c244 l     O .rodata	00000040 GPIOH_AFRH_fields
0800c284 l     O .rodata	00000040 GPIOH_AFRL_fields
0800c2c4 l     O .rodata	00000100 GPIOH_BSRR_fields
0800c3c4 l     O .rodata	00000080 GPIOH_IDR_fields
0800c444 l     O .rodata	00000088 GPIOH_LCKR_fields
0800c4cc l     O .rodata	00000080 GPIOH_MODER_fields
0800c54c l     O .rodata	00000080 GPIOH_ODR_fields
0800c5cc l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800c64c l     O .rodata	00000080 GPIOH_OTYPER_fields
0800c6cc l     O .rodata	00000080 GPIOH_PUPDR_fields
0800c74c l     O .rodata	000000a0 GPIOH_registers
0800c7ec l     O .rodata	00000018 I2C3_CCR_fields
0800c804 l     O .rodata	00000070 I2C3_CR1_fields
0800c874 l     O .rodata	00000030 I2C3_CR2_fields
0800c8a4 l     O .rodata	00000008 I2C3_DR_fields
0800c8ac l     O .rodata	00000020 I2C3_OAR1_fields
0800c8cc l     O .rodata	00000010 I2C3_OAR2_fields
0800c8dc l     O .rodata	00000070 I2C3_SR1_fields
0800c94c l     O .rodata	00000040 I2C3_SR2_fields
0800c98c l     O .rodata	00000008 I2C3_TRISE_fields
0800c994 l     O .rodata	00000090 I2C3_registers
0800ca24 l     O .rodata	00000070 I2S2ext_CR1_fields
0800ca94 l     O .rodata	00000038 I2S2ext_CR2_fields
0800cacc l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800cad4 l     O .rodata	00000008 I2S2ext_DR_fields
0800cadc l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800cb1c l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800cb34 l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800cb3c l     O .rodata	00000048 I2S2ext_SR_fields
0800cb84 l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800cb8c l     O .rodata	00000090 I2S2ext_registers
0800cc1c l     O .rodata	00000008 IWDG_KR_fields
0800cc24 l     O .rodata	00000008 IWDG_PR_fields
0800cc2c l     O .rodata	00000008 IWDG_RLR_fields
0800cc34 l     O .rodata	00000010 IWDG_SR_fields
0800cc44 l     O .rodata	00000040 IWDG_registers
0800cc84 l     O .rodata	00000194 InterruptNames
0800ce18 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800ce30 l     O .rodata	00000048 MPU_MPU_RASR_fields
0800ce78 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800ce90 l     O .rodata	00000008 MPU_MPU_RNR_fields
0800ce98 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800ceb0 l     O .rodata	00000050 MPU_registers
0800cf00 l     O .rodata	00000008 NVIC_IABR0_fields
0800cf08 l     O .rodata	00000008 NVIC_IABR1_fields
0800cf10 l     O .rodata	00000008 NVIC_IABR2_fields
0800cf18 l     O .rodata	00000008 NVIC_ICER0_fields
0800cf20 l     O .rodata	00000008 NVIC_ICER1_fields
0800cf28 l     O .rodata	00000008 NVIC_ICER2_fields
0800cf30 l     O .rodata	00000008 NVIC_ICPR0_fields
0800cf38 l     O .rodata	00000008 NVIC_ICPR1_fields
0800cf40 l     O .rodata	00000008 NVIC_ICPR2_fields
0800cf48 l     O .rodata	00000020 NVIC_IPR0_fields
0800cf68 l     O .rodata	00000020 NVIC_IPR10_fields
0800cf88 l     O .rodata	00000020 NVIC_IPR11_fields
0800cfa8 l     O .rodata	00000020 NVIC_IPR12_fields
0800cfc8 l     O .rodata	00000020 NVIC_IPR13_fields
0800cfe8 l     O .rodata	00000020 NVIC_IPR14_fields
0800d008 l     O .rodata	00000020 NVIC_IPR15_fields
0800d028 l     O .rodata	00000020 NVIC_IPR16_fields
0800d048 l     O .rodata	00000020 NVIC_IPR17_fields
0800d068 l     O .rodata	00000020 NVIC_IPR18_fields
0800d088 l     O .rodata	00000020 NVIC_IPR19_fields
0800d0a8 l     O .rodata	00000020 NVIC_IPR1_fields
0800d0c8 l     O .rodata	00000020 NVIC_IPR2_fields
0800d0e8 l     O .rodata	00000020 NVIC_IPR3_fields
0800d108 l     O .rodata	00000020 NVIC_IPR4_fields
0800d128 l     O .rodata	00000020 NVIC_IPR5_fields
0800d148 l     O .rodata	00000020 NVIC_IPR6_fields
0800d168 l     O .rodata	00000020 NVIC_IPR7_fields
0800d188 l     O .rodata	00000020 NVIC_IPR8_fields
0800d1a8 l     O .rodata	00000020 NVIC_IPR9_fields
0800d1c8 l     O .rodata	00000008 NVIC_ISER0_fields
0800d1d0 l     O .rodata	00000008 NVIC_ISER1_fields
0800d1d8 l     O .rodata	00000008 NVIC_ISER2_fields
0800d1e0 l     O .rodata	00000008 NVIC_ISPR0_fields
0800d1e8 l     O .rodata	00000008 NVIC_ISPR1_fields
0800d1f0 l     O .rodata	00000008 NVIC_ISPR2_fields
0800d1f8 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800d200 l     O .rodata	00000010 NVIC_STIR_registers
0800d210 l     O .rodata	00000230 NVIC_registers
0800d440 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800d4a8 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800d510 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800d578 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800d580 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800d5b0 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800d5e0 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800d610 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800d640 l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800d650 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800d668 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800d680 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800d698 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800d6e8 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800d750 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800d7b8 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800d820 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800d848 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800d870 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800d898 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800d8c0 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800d8d8 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800d8f0 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800d908 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800d920 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800d928 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800d930 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800d938 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800d940 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800d948 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800d950 l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800d960 l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800d970 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800d990 l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800d9e0 l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800da30 l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800da60 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800da80 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800daa0 l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800dd00 l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800dd08 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800dd18 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800dd28 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800dd38 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800dd50 l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800dd70 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800de38 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800df00 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800df10 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800df20 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800df38 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800df88 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800dfb8 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800dff0 l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800dff8 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800e020 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800e048 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800e088 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800e098 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
0800e1c8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
0800e218 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800e268 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
0800e2b8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
0800e308 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
0800e358 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800e3a8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800e3f8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800e448 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
0800e458 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800e4a0 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
0800e4e8 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
0800e530 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
0800e578 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800e5c0 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
0800e608 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800e650 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800e698 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
0800e6e8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
0800e738 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800e788 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800e7d8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
0800e828 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800e878 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
0800e8c8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
0800e918 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
0800e930 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800e948 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800e960 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
0800e978 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800e990 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
0800e9a8 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
0800e9c0 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800e9d8 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
0800e9e8 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
0800ea50 l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800ea68 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800ea70 l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
0800ea78 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
0800ea80 l     O .rodata	00000270 OTG_FS_HOST_registers
0800ecf0 l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
0800ed08 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
0800ed18 l     O .rodata	00000050 PWR_CR_fields
0800ed68 l     O .rodata	00000038 PWR_CSR_fields
0800eda0 l     O .rodata	00000020 PWR_registers
0800edc0 l     O .rodata	00000380 Peripherals
08011458 l     O .rodata	00000150 TIM2_registers
080118f8 l     O .rodata	00000140 TIM3_registers
08011d90 l     O .rodata	00000150 TIM5_registers
0800fce0 l     O .rodata	00000270 RTC_registers
080123b8 l     O .rodata	00000030 WWDG_registers
080122f0 l     O .rodata	00000070 USART1_registers
08010fa0 l     O .rodata	00000160 TIM1_registers
080105d8 l     O .rodata	00000120 SDIO_registers
08010820 l     O .rodata	00000070 SYSCFG_registers
08012068 l     O .rodata	000000e0 TIM9_registers
08010960 l     O .rodata	000000b0 TIM10_registers
08010ae8 l     O .rodata	000000c0 TIM11_registers
0800f730 l     O .rodata	00000140 RCC_registers
0800ff78 l     O .rodata	00000010 SCB_ACTRL_registers
08010740 l     O .rodata	00000040 STK_registers
080101d8 l     O .rodata	000000f0 SCB_registers
0800f140 l     O .rodata	00000048 RCC_AHB1ENR_fields
0800f188 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0800f1e0 l     O .rodata	00000048 RCC_AHB1RSTR_fields
0800f228 l     O .rodata	00000008 RCC_AHB2ENR_fields
0800f230 l     O .rodata	00000008 RCC_AHB2LPENR_fields
0800f238 l     O .rodata	00000008 RCC_AHB2RSTR_fields
0800f240 l     O .rodata	00000060 RCC_APB1ENR_fields
0800f2a0 l     O .rodata	00000060 RCC_APB1LPENR_fields
0800f300 l     O .rodata	00000060 RCC_APB1RSTR_fields
0800f360 l     O .rodata	00000058 RCC_APB2ENR_fields
0800f3b8 l     O .rodata	00000058 RCC_APB2LPENR_fields
0800f410 l     O .rodata	00000050 RCC_APB2RSTR_fields
0800f460 l     O .rodata	00000038 RCC_BDCR_fields
0800f498 l     O .rodata	00000068 RCC_CFGR_fields
0800f500 l     O .rodata	000000a0 RCC_CIR_fields
0800f5a0 l     O .rodata	00000060 RCC_CR_fields
0800f600 l     O .rodata	00000050 RCC_CSR_fields
0800f650 l     O .rodata	000000b0 RCC_PLLCFGR_fields
0800f700 l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800f710 l     O .rodata	00000020 RCC_SSCGR_fields
0800f870 l     O .rodata	00000070 RTC_ALRMAR_fields
0800f8e0 l     O .rodata	00000010 RTC_ALRMASSR_fields
0800f8f0 l     O .rodata	00000070 RTC_ALRMBR_fields
0800f960 l     O .rodata	00000010 RTC_ALRMBSSR_fields
0800f970 l     O .rodata	00000008 RTC_BKP0R_fields
0800f978 l     O .rodata	00000008 RTC_BKP10R_fields
0800f980 l     O .rodata	00000008 RTC_BKP11R_fields
0800f988 l     O .rodata	00000008 RTC_BKP12R_fields
0800f990 l     O .rodata	00000008 RTC_BKP13R_fields
0800f998 l     O .rodata	00000008 RTC_BKP14R_fields
0800f9a0 l     O .rodata	00000008 RTC_BKP15R_fields
0800f9a8 l     O .rodata	00000008 RTC_BKP16R_fields
0800f9b0 l     O .rodata	00000008 RTC_BKP17R_fields
0800f9b8 l     O .rodata	00000008 RTC_BKP18R_fields
0800f9c0 l     O .rodata	00000008 RTC_BKP19R_fields
0800f9c8 l     O .rodata	00000008 RTC_BKP1R_fields
0800f9d0 l     O .rodata	00000008 RTC_BKP2R_fields
0800f9d8 l     O .rodata	00000008 RTC_BKP3R_fields
0800f9e0 l     O .rodata	00000008 RTC_BKP4R_fields
0800f9e8 l     O .rodata	00000008 RTC_BKP5R_fields
0800f9f0 l     O .rodata	00000008 RTC_BKP6R_fields
0800f9f8 l     O .rodata	00000008 RTC_BKP7R_fields
0800fa00 l     O .rodata	00000008 RTC_BKP8R_fields
0800fa08 l     O .rodata	00000008 RTC_BKP9R_fields
0800fa10 l     O .rodata	00000010 RTC_CALIBR_fields
0800fa20 l     O .rodata	00000020 RTC_CALR_fields
0800fa40 l     O .rodata	000000a8 RTC_CR_fields
0800fae8 l     O .rodata	00000038 RTC_DR_fields
0800fb20 l     O .rodata	00000080 RTC_ISR_fields
0800fba0 l     O .rodata	00000010 RTC_PRER_fields
0800fbb0 l     O .rodata	00000010 RTC_SHIFTR_fields
0800fbc0 l     O .rodata	00000008 RTC_SSR_fields
0800fbc8 l     O .rodata	00000068 RTC_TAFCR_fields
0800fc30 l     O .rodata	00000038 RTC_TR_fields
0800fc68 l     O .rodata	00000028 RTC_TSDR_fields
0800fc90 l     O .rodata	00000008 RTC_TSSSR_fields
0800fc98 l     O .rodata	00000038 RTC_TSTR_fields
0800fcd0 l     O .rodata	00000008 RTC_WPR_fields
0800fcd8 l     O .rodata	00000008 RTC_WUTR_fields
0800ff50 l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
0800ff88 l     O .rodata	00000008 SCB_AFSR_fields
0800ff90 l     O .rodata	00000030 SCB_AIRCR_fields
0800ffc0 l     O .rodata	00000008 SCB_BFAR_fields
0800ffc8 l     O .rodata	00000030 SCB_CCR_fields
0800fff8 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
08010088 l     O .rodata	00000028 SCB_CPUID_fields
080100b0 l     O .rodata	00000018 SCB_HFSR_fields
080100c8 l     O .rodata	00000048 SCB_ICSR_fields
08010110 l     O .rodata	00000008 SCB_MMFAR_fields
08010118 l     O .rodata	00000018 SCB_SCR_fields
08010130 l     O .rodata	00000070 SCB_SHCRS_fields
080101a0 l     O .rodata	00000018 SCB_SHPR1_fields
080101b8 l     O .rodata	00000008 SCB_SHPR2_fields
080101c0 l     O .rodata	00000010 SCB_SHPR3_fields
080101d0 l     O .rodata	00000008 SCB_VTOR_fields
080102c8 l     O .rodata	00000008 SDIO_ARG_fields
080102d0 l     O .rodata	00000038 SDIO_CLKCR_fields
08010308 l     O .rodata	00000048 SDIO_CMD_fields
08010350 l     O .rodata	00000008 SDIO_DCOUNT_fields
08010358 l     O .rodata	00000048 SDIO_DCTRL_fields
080103a0 l     O .rodata	00000008 SDIO_DLEN_fields
080103a8 l     O .rodata	00000008 SDIO_DTIMER_fields
080103b0 l     O .rodata	00000008 SDIO_FIFOCNT_fields
080103b8 l     O .rodata	00000008 SDIO_FIFO_fields
080103c0 l     O .rodata	00000068 SDIO_ICR_fields
08010428 l     O .rodata	000000c0 SDIO_MASK_fields
080104e8 l     O .rodata	00000008 SDIO_POWER_fields
080104f0 l     O .rodata	00000008 SDIO_RESP1_fields
080104f8 l     O .rodata	00000008 SDIO_RESP2_fields
08010500 l     O .rodata	00000008 SDIO_RESP3_fields
08010508 l     O .rodata	00000008 SDIO_RESP4_fields
08010510 l     O .rodata	00000008 SDIO_RESPCMD_fields
08010518 l     O .rodata	000000c0 SDIO_STA_fields
080106f8 l     O .rodata	00000018 STK_CALIB_fields
08010710 l     O .rodata	00000020 STK_CTRL_fields
08010730 l     O .rodata	00000008 STK_LOAD_fields
08010738 l     O .rodata	00000008 STK_VAL_fields
08010780 l     O .rodata	00000010 SYSCFG_CMPCR_fields
08010790 l     O .rodata	00000020 SYSCFG_EXTICR1_fields
080107b0 l     O .rodata	00000020 SYSCFG_EXTICR2_fields
080107d0 l     O .rodata	00000020 SYSCFG_EXTICR3_fields
080107f0 l     O .rodata	00000020 SYSCFG_EXTICR4_fields
08010810 l     O .rodata	00000008 SYSCFG_MEMRM_fields
08010818 l     O .rodata	00000008 SYSCFG_PMC_fields
08010890 l     O .rodata	00000008 TIM10_ARR_fields
08010898 l     O .rodata	00000018 TIM10_CCER_fields
080108b0 l     O .rodata	00000018 TIM10_CCMR1_Input_fields
080108c8 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
080108e8 l     O .rodata	00000008 TIM10_CCR1_fields
080108f0 l     O .rodata	00000008 TIM10_CNT_fields
080108f8 l     O .rodata	00000028 TIM10_CR1_fields
08010920 l     O .rodata	00000010 TIM10_DIER_fields
08010930 l     O .rodata	00000010 TIM10_EGR_fields
08010940 l     O .rodata	00000008 TIM10_PSC_fields
08010948 l     O .rodata	00000018 TIM10_SR_fields
08010a10 l     O .rodata	00000008 TIM11_ARR_fields
08010a18 l     O .rodata	00000018 TIM11_CCER_fields
08010a30 l     O .rodata	00000018 TIM11_CCMR1_Input_fields
08010a48 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
08010a68 l     O .rodata	00000008 TIM11_CCR1_fields
08010a70 l     O .rodata	00000008 TIM11_CNT_fields
08010a78 l     O .rodata	00000028 TIM11_CR1_fields
08010aa0 l     O .rodata	00000010 TIM11_DIER_fields
08010ab0 l     O .rodata	00000010 TIM11_EGR_fields
08010ac0 l     O .rodata	00000008 TIM11_OR_fields
08010ac8 l     O .rodata	00000008 TIM11_PSC_fields
08010ad0 l     O .rodata	00000018 TIM11_SR_fields
08010ba8 l     O .rodata	00000008 TIM1_ARR_fields
08010bb0 l     O .rodata	00000040 TIM1_BDTR_fields
08010bf0 l     O .rodata	00000070 TIM1_CCER_fields
08010c60 l     O .rodata	00000030 TIM1_CCMR1_Input_fields
08010c90 l     O .rodata	00000050 TIM1_CCMR1_Output_fields
08010ce0 l     O .rodata	00000030 TIM1_CCMR2_Input_fields
08010d10 l     O .rodata	00000050 TIM1_CCMR2_Output_fields
08010d60 l     O .rodata	00000008 TIM1_CCR1_fields
08010d68 l     O .rodata	00000008 TIM1_CCR2_fields
08010d70 l     O .rodata	00000008 TIM1_CCR3_fields
08010d78 l     O .rodata	00000008 TIM1_CCR4_fields
08010d80 l     O .rodata	00000008 TIM1_CNT_fields
08010d88 l     O .rodata	00000040 TIM1_CR1_fields
08010dc8 l     O .rodata	00000060 TIM1_CR2_fields
08010e28 l     O .rodata	00000010 TIM1_DCR_fields
08010e38 l     O .rodata	00000078 TIM1_DIER_fields
08010eb0 l     O .rodata	00000008 TIM1_DMAR_fields
08010eb8 l     O .rodata	00000040 TIM1_EGR_fields
08010ef8 l     O .rodata	00000008 TIM1_PSC_fields
08010f00 l     O .rodata	00000008 TIM1_RCR_fields
08010f08 l     O .rodata	00000038 TIM1_SMCR_fields
08010f40 l     O .rodata	00000060 TIM1_SR_fields
08011100 l     O .rodata	00000010 TIM2_ARR_fields
08011110 l     O .rodata	00000060 TIM2_CCER_fields
08011170 l     O .rodata	00000030 TIM2_CCMR1_Input_fields
080111a0 l     O .rodata	00000050 TIM2_CCMR1_Output_fields
080111f0 l     O .rodata	00000030 TIM2_CCMR2_Input_fields
08011220 l     O .rodata	00000050 TIM2_CCMR2_Output_fields
08011270 l     O .rodata	00000010 TIM2_CCR1_fields
08011280 l     O .rodata	00000010 TIM2_CCR2_fields
08011290 l     O .rodata	00000010 TIM2_CCR3_fields
080112a0 l     O .rodata	00000010 TIM2_CCR4_fields
080112b0 l     O .rodata	00000010 TIM2_CNT_fields
080112c0 l     O .rodata	00000040 TIM2_CR1_fields
08011300 l     O .rodata	00000018 TIM2_CR2_fields
08011318 l     O .rodata	00000010 TIM2_DCR_fields
08011328 l     O .rodata	00000060 TIM2_DIER_fields
08011388 l     O .rodata	00000008 TIM2_DMAR_fields
08011390 l     O .rodata	00000030 TIM2_EGR_fields
080113c0 l     O .rodata	00000008 TIM2_OR_fields
080113c8 l     O .rodata	00000008 TIM2_PSC_fields
080113d0 l     O .rodata	00000038 TIM2_SMCR_fields
08011408 l     O .rodata	00000050 TIM2_SR_fields
080115a8 l     O .rodata	00000010 TIM3_ARR_fields
080115b8 l     O .rodata	00000060 TIM3_CCER_fields
08011618 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
08011648 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
08011698 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
080116c8 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
08011718 l     O .rodata	00000010 TIM3_CCR1_fields
08011728 l     O .rodata	00000010 TIM3_CCR2_fields
08011738 l     O .rodata	00000010 TIM3_CCR3_fields
08011748 l     O .rodata	00000010 TIM3_CCR4_fields
08011758 l     O .rodata	00000010 TIM3_CNT_fields
08011768 l     O .rodata	00000040 TIM3_CR1_fields
080117a8 l     O .rodata	00000018 TIM3_CR2_fields
080117c0 l     O .rodata	00000010 TIM3_DCR_fields
080117d0 l     O .rodata	00000060 TIM3_DIER_fields
08011830 l     O .rodata	00000008 TIM3_DMAR_fields
08011838 l     O .rodata	00000030 TIM3_EGR_fields
08011868 l     O .rodata	00000008 TIM3_PSC_fields
08011870 l     O .rodata	00000038 TIM3_SMCR_fields
080118a8 l     O .rodata	00000050 TIM3_SR_fields
08011a38 l     O .rodata	00000010 TIM5_ARR_fields
08011a48 l     O .rodata	00000060 TIM5_CCER_fields
08011aa8 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
08011ad8 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
08011b28 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
08011b58 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
08011ba8 l     O .rodata	00000010 TIM5_CCR1_fields
08011bb8 l     O .rodata	00000010 TIM5_CCR2_fields
08011bc8 l     O .rodata	00000010 TIM5_CCR3_fields
08011bd8 l     O .rodata	00000010 TIM5_CCR4_fields
08011be8 l     O .rodata	00000010 TIM5_CNT_fields
08011bf8 l     O .rodata	00000040 TIM5_CR1_fields
08011c38 l     O .rodata	00000018 TIM5_CR2_fields
08011c50 l     O .rodata	00000010 TIM5_DCR_fields
08011c60 l     O .rodata	00000060 TIM5_DIER_fields
08011cc0 l     O .rodata	00000008 TIM5_DMAR_fields
08011cc8 l     O .rodata	00000030 TIM5_EGR_fields
08011cf8 l     O .rodata	00000008 TIM5_OR_fields
08011d00 l     O .rodata	00000008 TIM5_PSC_fields
08011d08 l     O .rodata	00000038 TIM5_SMCR_fields
08011d40 l     O .rodata	00000050 TIM5_SR_fields
08011ee0 l     O .rodata	00000008 TIM9_ARR_fields
08011ee8 l     O .rodata	00000030 TIM9_CCER_fields
08011f18 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
08011f48 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
08011f88 l     O .rodata	00000008 TIM9_CCR1_fields
08011f90 l     O .rodata	00000008 TIM9_CCR2_fields
08011f98 l     O .rodata	00000008 TIM9_CNT_fields
08011fa0 l     O .rodata	00000030 TIM9_CR1_fields
08011fd0 l     O .rodata	00000008 TIM9_CR2_fields
08011fd8 l     O .rodata	00000020 TIM9_DIER_fields
08011ff8 l     O .rodata	00000020 TIM9_EGR_fields
08012018 l     O .rodata	00000008 TIM9_PSC_fields
08012020 l     O .rodata	00000018 TIM9_SMCR_fields
08012038 l     O .rodata	00000030 TIM9_SR_fields
08012148 l     O .rodata	00000010 TerminalInfo
08012158 l     O .rodata	00000010 USART1_BRR_fields
08012168 l     O .rodata	00000078 USART1_CR1_fields
080121e0 l     O .rodata	00000048 USART1_CR2_fields
08012228 l     O .rodata	00000060 USART1_CR3_fields
08012288 l     O .rodata	00000008 USART1_DR_fields
08012290 l     O .rodata	00000010 USART1_GTPR_fields
080122a0 l     O .rodata	00000050 USART1_SR_fields
08012360 l     O .rodata	00000019 VersionBuildDateString
08012379 l     O .rodata	00000006 VersionBuildUser
08012380 l     O .rodata	00000020 WWDG_CFR_fields
080123a0 l     O .rodata	00000010 WWDG_CR_fields
080123b0 l     O .rodata	00000008 WWDG_SR_fields
080123e8 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
080123ee l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003bec l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
08003d20 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004b98 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012880 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005744 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
2000001c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
0000549c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
000056f5 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00005874 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
0000679e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00008a3f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00009696 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
0000985f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00009e54 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
0000a0ec l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
0000b163 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
0000b51c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
0000b80d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
0000bad9 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
0000c04d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
0000cbdf l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
0000cc8b l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
0000da8e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
0000df95 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
0000e7e0 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
0000ef53 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
0000fa80 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00011074 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00011746 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
000118f5 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00013b77 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00014cee l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012978 l       .init_array	00000000 __init_array_end
08012974 l       .init_array	00000000 __preinit_array_end
08012974 l       .init_array	00000000 __init_array_start
08012974 l       .init_array	00000000 __preinit_array_start
08003068  w    F .text	00000006 RTC_Alarm_IRQHandler
08005d4c g     F .text	00000010 _malloc_usable_size_r
080030d4 g     F .text	000000c4 __cvt
08003068  w    F .text	00000006 EXTI2_IRQHandler
08005d8c g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
080027b2 g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
08005ed8 g     F .text	00000010 strcpy
0800280c g     F .text	00000004 _getpid
08005db8 g     F .text	000000dc _puts_r
00011074  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.b36020d7
08000a7c g     F .text	0000007a .hidden __cmpdf2
080027b6 g     F .text	00000004 _lseek_r
08002fe0 g     F .text	00000002 DebugMon_Handler
080128d0 g     O .rodata	0000000c CmdTestE
08003068  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
080005ec g     F .text	0000005a .hidden __floatdidf
08005d24 g     F .text	00000024 _kill_r
0000b51c  w      .debug_info	00000000 .hidden tasking.c.3c1ff15a
08005d5c g     F .text	00000030 printf
0000e7e0  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.0fc8201d
08003068  w    F .text	00000006 TIM1_CC_IRQHandler
08005a52 g     F .text	00000024 __sseek
08004c48 g     F .text	00000070 __sinit
08003068  w    F .text	00000006 DMA2_Stream5_IRQHandler
08005a80 g     F .text	000000a4 __swbuf_r
08002fd6 g     F .text	00000002 HardFault_Handler
08004bec g     F .text	0000002c __sfmoreglue
08003068  w    F .text	00000006 DMA1_Stream5_IRQHandler
08005c6c g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08002fe4 g     F .text	00000020 SysTick_Handler
080128f4 g     O .rodata	0000000c CmdLedE
08003068  w    F .text	00000006 PVD_IRQHandler
08003068  w    F .text	00000006 SDIO_IRQHandler
08005c2a g     F .text	00000034 memmove
08003068  w    F .text	00000006 TAMP_STAMP_IRQHandler
0801297c g       *ABS*	00000000 _sidata
08002fe2 g     F .text	00000002 PendSV_Handler
08002fd4 g     F .text	00000002 NMI_Handler
08004ed0 g     F .text	00000080 _Balloc
08012974 g       .ARM	00000000 __exidx_end
08003b9c g     F .text	00000050 __strtok_r
08003068  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
0801296c g       .rodata	00000000 _parsetable_end
08003070 g     F .text	0000000c __errno
08012954 g     O .rodata	0000000c CmdWE
08003068  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
080027a8 g     F .text	0000000a _fstat_r
20000c0c g     O .bss	00000004 errno
080062bc g       .text	00000000 _etext
200001ec g       .bss	00000000 _sbss
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
000056f5  w      .debug_info	00000000 .hidden mytest.c.674274e8
08003068  w    F .text	00000006 I2C3_ER_IRQHandler
080128b8 g     O .rodata	0000000c CmdDC2E
08004eb4 g     F .text	0000001c memcpy
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
080039a8 g     F .text	0000018c setvbuf
08004be0 g     F .text	0000000c _cleanup_r
08006014 g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
00013b77  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim_ex.c.2bc70310
08003068  w    F .text	00000006 EXTI0_IRQHandler
08003068  w    F .text	00000006 I2C2_EV_IRQHandler
00005874  w      .debug_info	00000000 .hidden dc_example.c.09bd7010
08000bf8 g     F .text	00000000 .hidden __aeabi_uldivmod
08005e94 g     F .text	00000010 puts
0000985f  w      .debug_info	00000000 .hidden parser.c.825010af
08003068  w    F .text	00000006 DMA1_Stream2_IRQHandler
08003068  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
08002660 g     F .text	00000014 USR_LED_Toggle
08004e80 g     F .text	00000010 malloc
080128b8 g       .rodata	00000000 _tasktable_end
08005cc4 g     F .text	00000050 _raise_r
08003ce4 g     F .text	0000003c __assert_func
080127b8 g     O .rodata	000000c8 __mprec_tens
08002fdc g     F .text	00000002 UsageFault_Handler
08005f40 g     F .text	0000001c vsnprintf
080128c4 g     O .rodata	0000000c CmdDCE
08003068  w    F .text	00000006 DMA2_Stream2_IRQHandler
08005d48 g     F .text	00000004 _getpid_r
200001ec g       .bss	00000000 __bss_start__
08003cd0 g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
08004da8 g     F .text	00000008 _localeconv_r
080050c0 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
08003068  w    F .text	00000006 SPI1_IRQHandler
08000c28 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
08002774 g     F .text	00000030 _sbrk_r
080027ba g     F .text	0000000a _read_r
00008a3f  w      .debug_info	00000000 .hidden syscall.c.4e500076
08003068  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
0000a0ec  w      .debug_info	00000000 .hidden terminal.c.06c1db49
0801296c g       .ARM	00000000 __exidx_start
08000648 g     F .text	00000254 .hidden __aeabi_dmul
08003068  w    F .text	00000006 DMA2_Stream3_IRQHandler
08012948 g     O .rodata	0000000c CmdVersionE
20000c02 g     O .bss	00000001 __lock___sinit_recursive_mutex
08012504 g     O .rodata	00000004 _global_impure_ptr
08005c78 g     F .text	0000004c _realloc_r
000118f5  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.594f5834
0800307c g     F .text	00000048 __libc_init_array
08012790 g     O .rodata	00000028 __mprec_bigtens
08005c1c g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
080053d4 g     F .text	00000038 __mcmp
200001e8 g     O .data	00000004 TaskInputTaskState
08003068  w    F .text	00000006 USART6_IRQHandler
080062a4 g     F .text	00000000 _init
080128b8 g       .rodata	00000000 _parsetable_start
080128a0 g       .rodata	00000000 _tasktable_start
08012900 g     O .rodata	0000000c CmdRE
20000c10 g       .bss	00000000 _ebss
08003018  w    F .text	00000038 Reset_Handler
08005f40 g     F .text	0000001c vsniprintf
08005020 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
20000c00 g     O .bss	00000001 __lock___malloc_recursive_mutex
08003068  w    F .text	00000006 DMA2_Stream0_IRQHandler
08006214 g     F .text	00000090 _putc_r
08004d44 g     F .text	00000024 fprintf
08003068  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
0000bad9  w      .debug_info	00000000 .hidden decoder.c.18ea236f
08005240 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
080001e0 g     F .text	00000014 mytest
080126a8 g     O .rodata	00000020 __sf_fake_stderr
20000c10 g       ._user_heap_stack	00000000 end
08003068  w    F .text	00000006 I2C1_EV_IRQHandler
08004db4 g     F .text	00000002 __retarget_lock_release_recursive
08003068  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001e8 g       .data	00000000 _taskstate_start
08005f5c g     F .text	000000b6 __ssputs_r
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08003068  w    F .text	00000006 DMA1_Stream1_IRQHandler
08005772 g     F .text	00000024 __sfputs_r
08004c18 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
08003214  w    F .text	0000046c _printf_float
20000c10 g       .bss	00000000 __bss_end__
080055f8 g     F .text	00000098 _free_r
08003068  w    F .text	00000006 TIM3_IRQHandler
08003068  w    F .text	00000006 RCC_IRQHandler
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
08003068 g       .text	00000006 Default_Handler
0000cc8b  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.167a7f62
080005dc g     F .text	0000006a .hidden __floatundidf
0000ef53  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.2b93ffaa
080052f4 g     F .text	000000e0 __lshift
08003068  w    F .text	00000006 EXTI15_10_IRQHandler
08003068  w    F .text	00000006 ADC_IRQHandler
080050ec g     F .text	00000154 __multiply
08005520 g     F .text	000000b8 __d2b
08005ea4 g     F .text	00000034 strcasecmp
0000da8e  w      .debug_info	00000000 .hidden system_stm32f4xx.c.f0a82be1
08003068  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
08003068  w    F .text	00000006 SPI5_IRQHandler
0801290c g     O .rodata	0000000c CmdReceiveE
080027a4 g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
08003068  w    F .text	00000006 TIM5_IRQHandler
08003b34 g     F .text	00000068 strtok
080128a0 g     O .rodata	00000018 TaskInputTask
08003068  w    F .text	00000006 DMA2_Stream7_IRQHandler
08003068  w    F .text	00000006 I2C3_EV_IRQHandler
00011746  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.7d27ddf2
08005b40 g     F .text	000000dc __swsetup_r
08000ef8  w    F .text	00000002 .hidden __aeabi_ldiv0
08003068  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08004cb8 g     F .text	0000008c __sfp
08003068  w    F .text	00000006 RTC_WKUP_IRQHandler
08004c3c g     F .text	0000000c __sinit_lock_release
08005ee8 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
080059f8 g     F .text	00000022 __sread
08005c60 g     F .text	0000000c __malloc_lock
08004b20 g     F .text	00000078 _fflush_r
080055d8 g     F .text	0000001e _calloc_r
08003068  w    F .text	00000006 SPI2_IRQHandler
080126c8 g     O .rodata	00000020 __sf_fake_stdin
08004db2 g     F .text	00000002 __retarget_lock_acquire_recursive
080030c4 g     F .text	00000010 memset
08002fd8 g     F .text	00000002 MemManage_Handler
08002950 g     F .text	00000684 main
08003068  w    F .text	00000006 DMA1_Stream0_IRQHandler
08004db0 g     F .text	00000002 __retarget_lock_init_recursive
08002fde g     F .text	00000002 SVC_Handler
08005a76 g     F .text	00000008 __sclose
08003e38 g     F .text	00000bdc _dtoa_r
08005690 g     F .text	000000b4 _malloc_r
08005b24 g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
08003068  w    F .text	00000006 EXTI4_IRQHandler
00009e54  w      .debug_info	00000000 .hidden dump.c.80a332ec
08003004 g     F .text	00000014 SystemInit
08000a7c g     F .text	0000007a .hidden __nedf2
080062b0 g     F .text	00000000 _fini
08005d5c g     F .text	00000030 iprintf
200001ec g       .data	00000000 _taskstate_end
08003198 g     F .text	0000007c __exponent
080027c4 g     F .text	00000040 _write_r
0000679e  w      .debug_info	00000000 .hidden STM32F411.c.c8ef9f14
08003680 g     F .text	000000da _printf_common
20000018 g     O .data	00000004 _impure_ptr
00014cee  w      .debug_info	00000000 .hidden version.c.e0804c9a
08004a14 g     F .text	0000010c __sflush_r
08006014 g     F .text	00000200 _svfiprintf_r
08003068  w    F .text	00000006 WWDG_IRQHandler
080028f8 g     F .text	00000058 Default_IRQHandler
08004e90 g     F .text	00000024 __ascii_mbtowc
0801293c g     O .rodata	0000000c CmdTransparentE
08003068  w    F .text	00000006 TIM2_IRQHandler
08000208 g     F .text	00000004 my_Loop
080128e8 g     O .rodata	0000000c CmdDecodeE
08005ee8 g     F .text	00000056 _vsniprintf_r
20000000 g       .data	00000000 myTickCount
08003068  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
08002674 g     F .text	00000100 TIM1_TRG_COM_TIM11_IRQHandler
08004db6 g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
08003068  w    F .text	00000006 EXTI1_IRQHandler
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
0000c04d  w      .debug_info	00000000 .hidden main.c.2c6e82a5
200001ec g       .data	00000000 _edata
0000b163  w      .debug_info	00000000 .hidden wdog.c.16db08df
0000df95  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.11893d14
0000549c  w      .debug_info	00000000 .hidden my_main.c.1913d6b0
08002810 g     F .text	000000e8 USART2_IRQHandler
08005a1a g     F .text	00000038 __swrite
08004d44 g     F .text	00000024 fiprintf
08005798 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0000cbdf  w      .debug_info	00000000 .hidden stm32f4xx_it.c.9b5bb718
08004d68 g     F .text	0000003e _fwalk_reent
0800540c g     F .text	00000114 __mdiff
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002804 g     F .text	00000006 _kill
08003068  w    F .text	00000006 I2C2_ER_IRQHandler
08004c24 g     F .text	0000000c __sfp_lock_release
0000fa80  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.ecd62046
080126e8 g     O .rodata	00000020 __sf_fake_stdout
080128dc g     O .rodata	0000000c CmdDumpE
08003068  w    F .text	00000006 DMA2_Stream1_IRQHandler
08012401 g     O .rodata	00000101 _ctype_
08000ef8  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
08012930 g     O .rodata	0000000c CmdStatsE
08003068  w    F .text	00000006 FLASH_IRQHandler
0800280a g     F .text	00000002 _exit
08012924 g     O .rodata	0000000c CmdTasksE
08003068  w    F .text	00000006 DMA2_Stream4_IRQHandler
08002fda g     F .text	00000002 BusFault_Handler
08003068  w    F .text	00000006 USART1_IRQHandler
08004e00 g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
08003068  w    F .text	00000006 OTG_FS_IRQHandler
0800375c g     F .text	0000024c _printf_i
08003068  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
08003068  w    F .text	00000006 DMA1_Stream4_IRQHandler
20000c08 g     O .bss	00000004 __malloc_sbrk_start
08003068  w    F .text	00000006 I2C1_ER_IRQHandler
08012918 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000c04 g     O .bss	00000004 __malloc_free_list
080002d8 g     F .text	0000027a .hidden __subdf3
08005798 g     F .text	00000260 _vfprintf_r
0000b80d  w      .debug_info	00000000 .hidden default.c.f4ae2258
08005060 g     F .text	0000005e __lo0bits
00009696  w      .debug_info	00000000 .hidden monitor.c.8a4174bc
08003068  w    F .text	00000006 DMA2_Stream6_IRQHandler
2000007c g     O .data	0000016c __global_locale
08003068  w    F .text	00000006 DMA1_Stream3_IRQHandler
20000c01 g     O .bss	00000001 __lock___sfp_recursive_mutex
08005d14 g     F .text	00000010 raise
08004c30 g     F .text	0000000c __sinit_lock_acquire
08004f94 g     F .text	0000008c __multadd
08004f50 g     F .text	00000044 _Bfree



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062a4 	.word	0x080062a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080062a4 	.word	0x080062a4

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f002 fa3b 	bl	8002660 <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 8000efc:	b530      	push	{r4, r5, lr}
 8000efe:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000f02:	4c10      	ldr	r4, [pc, #64]	; (8000f44 <TerminalRead+0x48>)
 8000f04:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8000f08:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 8000f0a:	fb05 4303 	mla	r3, r5, r3, r4
 8000f0e:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	b10c      	cbz	r4, 8000f1a <TerminalRead+0x1e>
 8000f16:	4290      	cmp	r0, r2
 8000f18:	d101      	bne.n	8000f1e <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f1a:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 8000f1c:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8000f1e:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8000f22:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000f24:	5d1d      	ldrb	r5, [r3, r4]
 8000f26:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000f28:	3401      	adds	r4, #1
 8000f2a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8000f2e:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8000f32:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000f36:	3c01      	subs	r4, #1
 8000f38:	b2a4      	uxth	r4, r4
 8000f3a:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 8000f3e:	3001      	adds	r0, #1
 8000f40:	e7e5      	b.n	8000f0e <TerminalRead+0x12>
 8000f42:	bf00      	nop
 8000f44:	20000210 	.word	0x20000210

08000f48 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8000f48:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <Uncompress+0x74>)
{
 8000f4c:	b08a      	sub	sp, #40	; 0x28
 8000f4e:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000f50:	466c      	mov	r4, sp
 8000f52:	f102 0620 	add.w	r6, r2, #32
 8000f56:	6810      	ldr	r0, [r2, #0]
 8000f58:	6851      	ldr	r1, [r2, #4]
 8000f5a:	4625      	mov	r5, r4
 8000f5c:	c503      	stmia	r5!, {r0, r1}
 8000f5e:	3208      	adds	r2, #8
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	462c      	mov	r4, r5
 8000f64:	d1f7      	bne.n	8000f56 <Uncompress+0xe>
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	6028      	str	r0, [r5, #0]
 8000f6a:	8892      	ldrh	r2, [r2, #4]
 8000f6c:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8000f6e:	4618      	mov	r0, r3
 8000f70:	4d13      	ldr	r5, [pc, #76]	; (8000fc0 <Uncompress+0x78>)
 8000f72:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8000f76:	2100      	movs	r1, #0
 8000f78:	ba5b      	rev16	r3, r3
 8000f7a:	b29b      	uxth	r3, r3
  i = 0;
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8000f80:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8000f84:	d103      	bne.n	8000f8e <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <Uncompress+0x78>)
  buf[i]='\0';
 8000f88:	5532      	strb	r2, [r6, r4]
}
 8000f8a:	b00a      	add	sp, #40	; 0x28
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8000f8e:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8000f90:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8000f94:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8000f98:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8000f9c:	4462      	add	r2, ip
    buf[i++] = c;
 8000f9e:	3401      	adds	r4, #1
 8000fa0:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8000fa4:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8000fa8:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8000faa:	2a07      	cmp	r2, #7
      bits -= 8;
 8000fac:	bf81      	itttt	hi
 8000fae:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8000fb0:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8000fb4:	4091      	lslhi	r1, r2
 8000fb6:	430b      	orrhi	r3, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	e7e1      	b.n	8000f80 <Uncompress+0x38>
 8000fbc:	08006700 	.word	0x08006700
 8000fc0:	20000a48 	.word	0x20000a48

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001150 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4a5e      	ldr	r2, [pc, #376]	; (8001148 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000fd2:	2401      	movs	r4, #1
 8000fd4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000fda:	43ac      	bics	r4, r5
 8000fdc:	f040 80a5 	bne.w	800112a <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe0:	684d      	ldr	r5, [r1, #4]
 8000fe2:	f005 0403 	and.w	r4, r5, #3
 8000fe6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fea:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fec:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fee:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff8:	d834      	bhi.n	8001064 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000ffa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001000:	68cf      	ldr	r7, [r1, #12]
 8001002:	fa07 f708 	lsl.w	r7, r7, r8
 8001006:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800100a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800100c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001012:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001016:	409f      	lsls	r7, r3
 8001018:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800101c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800101e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001020:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	688f      	ldr	r7, [r1, #8]
 8001026:	fa07 f708 	lsl.w	r7, r7, r8
 800102a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001030:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	d119      	bne.n	8001068 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001034:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001038:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001040:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001044:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001048:	f04f 0e0f 	mov.w	lr, #15
 800104c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001050:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	690f      	ldr	r7, [r1, #16]
 8001056:	fa07 f70b 	lsl.w	r7, r7, fp
 800105a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800105e:	f8ca 7020 	str.w	r7, [sl, #32]
 8001062:	e001      	b.n	8001068 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	2c03      	cmp	r4, #3
 8001066:	d1da      	bne.n	800101e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001068:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001072:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001076:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001078:	d057      	beq.n	800112a <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	f04f 0a00 	mov.w	sl, #0
 800107e:	f8cd a004 	str.w	sl, [sp, #4]
 8001082:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	4c31      	ldr	r4, [pc, #196]	; (800114c <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001088:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800108c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001090:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001094:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001098:	9601      	str	r6, [sp, #4]
 800109a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800109c:	f023 0603 	bic.w	r6, r3, #3
 80010a0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80010a4:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80010ac:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010b4:	270f      	movs	r7, #15
 80010b6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ba:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c0:	d03a      	beq.n	8001138 <HAL_GPIO_Init+0x174>
 80010c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010c6:	42a0      	cmp	r0, r4
 80010c8:	d038      	beq.n	800113c <HAL_GPIO_Init+0x178>
 80010ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010ce:	42a0      	cmp	r0, r4
 80010d0:	d036      	beq.n	8001140 <HAL_GPIO_Init+0x17c>
 80010d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010d6:	42a0      	cmp	r0, r4
 80010d8:	d034      	beq.n	8001144 <HAL_GPIO_Init+0x180>
 80010da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010de:	42a0      	cmp	r0, r4
 80010e0:	bf0c      	ite	eq
 80010e2:	2404      	moveq	r4, #4
 80010e4:	2407      	movne	r4, #7
 80010e6:	fa04 f40e 	lsl.w	r4, r4, lr
 80010ea:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80010ee:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80010f6:	bf54      	ite	pl
 80010f8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80010fa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80010fe:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001100:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001104:	bf54      	ite	pl
 8001106:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001108:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800110c:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001110:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001112:	bf54      	ite	pl
 8001114:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001116:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800111a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111e:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001120:	bf54      	ite	pl
 8001122:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001124:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001128:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	3301      	adds	r3, #1
 800112c:	2b10      	cmp	r3, #16
 800112e:	f47f af4f 	bne.w	8000fd0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001132:	b003      	add	sp, #12
 8001134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001138:	4654      	mov	r4, sl
 800113a:	e7d4      	b.n	80010e6 <HAL_GPIO_Init+0x122>
 800113c:	2401      	movs	r4, #1
 800113e:	e7d2      	b.n	80010e6 <HAL_GPIO_Init+0x122>
 8001140:	2402      	movs	r4, #2
 8001142:	e7d0      	b.n	80010e6 <HAL_GPIO_Init+0x122>
 8001144:	2403      	movs	r4, #3
 8001146:	e7ce      	b.n	80010e6 <HAL_GPIO_Init+0x122>
 8001148:	40013c00 	.word	0x40013c00
 800114c:	40020000 	.word	0x40020000
 8001150:	40023800 	.word	0x40023800

08001154 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001156:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001158:	4290      	cmp	r0, r2
 800115a:	d00e      	beq.n	800117a <TIM_Base_SetConfig+0x26>
 800115c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001160:	d00b      	beq.n	800117a <TIM_Base_SetConfig+0x26>
 8001162:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001166:	4290      	cmp	r0, r2
 8001168:	d007      	beq.n	800117a <TIM_Base_SetConfig+0x26>
 800116a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800116e:	4290      	cmp	r0, r2
 8001170:	d003      	beq.n	800117a <TIM_Base_SetConfig+0x26>
 8001172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001176:	4290      	cmp	r0, r2
 8001178:	d115      	bne.n	80011a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800117a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800117c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001180:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <TIM_Base_SetConfig+0x94>)
 8001184:	4290      	cmp	r0, r2
 8001186:	d019      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 8001188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800118c:	d016      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 800118e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001192:	4290      	cmp	r0, r2
 8001194:	d012      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 8001196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119a:	4290      	cmp	r0, r2
 800119c:	d00e      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 800119e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a2:	4290      	cmp	r0, r2
 80011a4:	d00a      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <TIM_Base_SetConfig+0x98>)
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d007      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 80011ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d003      	beq.n	80011bc <TIM_Base_SetConfig+0x68>
 80011b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d103      	bne.n	80011c4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011c4:	694a      	ldr	r2, [r1, #20]
 80011c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80011cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011ce:	688b      	ldr	r3, [r1, #8]
 80011d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011d2:	680b      	ldr	r3, [r1, #0]
 80011d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <TIM_Base_SetConfig+0x94>)
 80011d8:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011da:	bf04      	itt	eq
 80011dc:	690b      	ldreq	r3, [r1, #16]
 80011de:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011e0:	2301      	movs	r3, #1
 80011e2:	6143      	str	r3, [r0, #20]
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40014000 	.word	0x40014000

080011f0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011f0:	6a03      	ldr	r3, [r0, #32]
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011f8:	6a03      	ldr	r3, [r0, #32]
{
 80011fa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80011fe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001200:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001202:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001206:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001208:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800120a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800120e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001210:	4d0a      	ldr	r5, [pc, #40]	; (800123c <TIM_OC1_SetConfig+0x4c>)
 8001212:	42a8      	cmp	r0, r5
 8001214:	d10b      	bne.n	800122e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001216:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001218:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800121c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800121e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001222:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001226:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001228:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800122c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800122e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001230:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001232:	684a      	ldr	r2, [r1, #4]
 8001234:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001236:	6203      	str	r3, [r0, #32]
}
 8001238:	bd70      	pop	{r4, r5, r6, pc}
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000

08001240 <HAL_TIM_Base_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001240:	b513      	push	{r0, r1, r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001242:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001246:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001248:	f002 03ff 	and.w	r3, r2, #255	; 0xff
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800124c:	6800      	ldr	r0, [r0, #0]
 800124e:	b97a      	cbnz	r2, 8001270 <HAL_TIM_Base_Init.constprop.0+0x30>
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_TIM_Base_Init.constprop.0+0x6c>)
    htim->Lock = HAL_UNLOCKED;
 8001252:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001256:	4290      	cmp	r0, r2
 8001258:	d10a      	bne.n	8001270 <HAL_TIM_Base_Init.constprop.0+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_TIM_Base_Init.constprop.0+0x70>)
 800125e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001260:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001264:	645a      	str	r2, [r3, #68]	; 0x44
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	9b01      	ldr	r3, [sp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001270:	2302      	movs	r3, #2
 8001272:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001276:	1d21      	adds	r1, r4, #4
 8001278:	f7ff ff6c 	bl	8001154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800127c:	2301      	movs	r3, #1
}
 800127e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001280:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001288:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800128c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001290:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800129c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80012a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80012a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80012a8:	b002      	add	sp, #8
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	40014800 	.word	0x40014800
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  * @param  SubPriority the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 80012bc:	b510      	push	{r4, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012be:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	2c04      	cmp	r4, #4
 80012c6:	bf28      	it	cs
 80012c8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d0:	fa02 f204 	lsl.w	r2, r2, r4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d4:	bf8c      	ite	hi
 80012d6:	3b03      	subhi	r3, #3
 80012d8:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012da:	ea21 0102 	bic.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80012de:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	bf18      	it	ne
 80012e2:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	bf08      	it	eq
 80012ec:	4a06      	ldreq	r2, [pc, #24]	; (8001308 <HAL_NVIC_SetPriority.constprop.0+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80012f2:	bf18      	it	ne
 80012f4:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	bf14      	ite	ne
 80012fc:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001304:	bd10      	pop	{r4, pc}
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x80>)
 800130e:	2202      	movs	r2, #2
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001310:	b9c8      	cbnz	r0, 8001346 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x3a>
 8001312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001316:	681b      	ldr	r3, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f000 	lsl.w	r0, r2, r0

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	ea22 0200 	bic.w	r2, r2, r0
 8001324:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	4310      	orrs	r0, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x84>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800132c:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800132e:	4293      	cmp	r3, r2
 8001330:	d115      	bne.n	800135e <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8001332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001338:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001340:	2a06      	cmp	r2, #6
 8001342:	d11e      	bne.n	8001382 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x76>
}
 8001344:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001346:	2804      	cmp	r0, #4
 8001348:	d102      	bne.n	8001350 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x44>
 800134a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800134e:	e7e2      	b.n	8001316 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0xa>
 8001350:	2808      	cmp	r0, #8
 8001352:	bf0c      	ite	eq
 8001354:	f883 2040 	strbeq.w	r2, [r3, #64]	; 0x40
 8001358:	f883 2041 	strbne.w	r2, [r3, #65]	; 0x41
 800135c:	e7db      	b.n	8001316 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0xa>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800135e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001362:	d0ea      	beq.n	800133a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x88>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d0e7      	beq.n	800133a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 800136a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800136e:	4293      	cmp	r3, r2
 8001370:	d0e3      	beq.n	800133a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 8001372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001376:	4293      	cmp	r3, r2
 8001378:	d0df      	beq.n	800133a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 800137a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800137e:	4293      	cmp	r3, r2
 8001380:	d0db      	beq.n	800133a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
    __HAL_TIM_ENABLE(htim);
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	4770      	bx	lr
 800138c:	20000a7c 	.word	0x20000a7c
 8001390:	40010000 	.word	0x40010000
 8001394:	40000400 	.word	0x40000400

08001398 <HAL_InitTick.isra.0>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_InitTick.isra.0+0x44>)
 800139a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	3b01      	subs	r3, #1
 80013a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80013aa:	b510      	push	{r4, lr}
 80013ac:	4604      	mov	r4, r0
 80013ae:	d214      	bcs.n	80013da <HAL_InitTick.isra.0+0x42>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_InitTick.isra.0+0x48>)
 80013ba:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013be:	2300      	movs	r3, #0
 80013c0:	6193      	str	r3, [r2, #24]
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	280f      	cmp	r0, #15
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c4:	f04f 0307 	mov.w	r3, #7
 80013c8:	6113      	str	r3, [r2, #16]
 80013ca:	d806      	bhi.n	80013da <HAL_InitTick.isra.0+0x42>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	4601      	mov	r1, r0
 80013ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d2:	f7ff ff6f 	bl	80012b4 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 80013d6:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_InitTick.isra.0+0x4c>)
 80013d8:	601c      	str	r4, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	20000004 	.word	0x20000004
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	20000014 	.word	0x20000014

080013e8 <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 80013e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	4c2e      	ldr	r4, [pc, #184]	; (80014a8 <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 80013f0:	d30a      	bcc.n	8001408 <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 80013f2:	f640 0334 	movw	r3, #2100	; 0x834
 80013f6:	fb03 4300 	mla	r3, r3, r0, r4
 80013fa:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80013fe:	3201      	adds	r2, #1
 8001400:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001408:	f640 0334 	movw	r3, #2100	; 0x834
 800140c:	fb03 4300 	mla	r3, r3, r0, r4
 8001410:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001414:	fa12 f585 	uxtah	r5, r2, r5
 8001418:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800141c:	d220      	bcs.n	8001460 <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 800141e:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001420:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001424:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001426:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 800142a:	42b2      	cmp	r2, r6
 800142c:	d005      	beq.n	800143a <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800142e:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001432:	b2ad      	uxth	r5, r5
 8001434:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001438:	d320      	bcc.n	800147c <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 800143a:	f640 0334 	movw	r3, #2100	; 0x834
 800143e:	fb03 4400 	mla	r4, r3, r0, r4
 8001442:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001446:	4433      	add	r3, r6
 8001448:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <TerminalOutputBufferWrite.isra.0+0xc4>)
 800144e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001452:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001454:	68d3      	ldr	r3, [r2, #12]
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800145c:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 8001460:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001464:	3501      	adds	r5, #1
 8001466:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 800146a:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 800146e:	fa12 f585 	uxtah	r5, r2, r5
 8001472:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001476:	d3d2      	bcc.n	800141e <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 8001478:	bf00      	nop
 800147a:	e7f6      	b.n	800146a <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 800147c:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 8001480:	f811 c006 	ldrb.w	ip, [r1, r6]
 8001484:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8001488:	3501      	adds	r5, #1
 800148a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800148e:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001492:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001496:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 800149a:	3501      	adds	r5, #1
 800149c:	b2ad      	uxth	r5, r5
 800149e:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 80014a2:	3601      	adds	r6, #1
 80014a4:	e7c1      	b.n	800142a <TerminalOutputBufferWrite.isra.0+0x42>
 80014a6:	bf00      	nop
 80014a8:	20000210 	.word	0x20000210
 80014ac:	08012148 	.word	0x08012148

080014b0 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 80014b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80014b2:	4604      	mov	r4, r0
 80014b4:	b938      	cbnz	r0, 80014c6 <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <CmdTasks+0x34>)
  p = _tasktable_start;
 80014b8:	4d0b      	ldr	r5, [pc, #44]	; (80014e8 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 80014ba:	4e0c      	ldr	r6, [pc, #48]	; (80014ec <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 80014bc:	4f0c      	ldr	r7, [pc, #48]	; (80014f0 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 80014be:	f004 fce9 	bl	8005e94 <puts>
  while(p != _tasktable_end) {
 80014c2:	42b5      	cmp	r5, r6
 80014c4:	d102      	bne.n	80014cc <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 80014c6:	2000      	movs	r0, #0
 80014c8:	b003      	add	sp, #12
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 80014cc:	696b      	ldr	r3, [r5, #20]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4621      	mov	r1, r4
 80014d2:	692b      	ldr	r3, [r5, #16]
 80014d4:	f855 2b18 	ldr.w	r2, [r5], #24
 80014d8:	4638      	mov	r0, r7
 80014da:	f004 fc3f 	bl	8005d5c <iprintf>
    i++;
 80014de:	3401      	adds	r4, #1
 80014e0:	e7ef      	b.n	80014c2 <CmdTasks+0x12>
 80014e2:	bf00      	nop
 80014e4:	08006726 	.word	0x08006726
 80014e8:	080128a0 	.word	0x080128a0
 80014ec:	080128b8 	.word	0x080128b8
 80014f0:	0800673f 	.word	0x0800673f

080014f4 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 80014f8:	b1f9      	cbz	r1, 800153a <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80014fa:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80014fc:	888a      	ldrh	r2, [r1, #4]
 80014fe:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001500:	2d10      	cmp	r5, #16
 8001502:	d005      	beq.n	8001510 <DecodeReadRegister+0x1c>
 8001504:	2d20      	cmp	r5, #32
 8001506:	d005      	beq.n	8001514 <DecodeReadRegister+0x20>
 8001508:	2d08      	cmp	r5, #8
 800150a:	d105      	bne.n	8001518 <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 800150c:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 800150e:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001510:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001512:	e7fc      	b.n	800150e <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 8001514:	58d0      	ldr	r0, [r2, r3]
    break;
 8001516:	e7fa      	b.n	800150e <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001518:	6808      	ldr	r0, [r1, #0]
 800151a:	f7ff fd15 	bl	8000f48 <Uncompress>
 800151e:	4629      	mov	r1, r5
 8001520:	4602      	mov	r2, r0
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <DecodeReadRegister+0x4c>)
 8001524:	f004 fc1a 	bl	8005d5c <iprintf>
    printf(" in periphral %s!\n",
 8001528:	6820      	ldr	r0, [r4, #0]
 800152a:	f7ff fd0d 	bl	8000f48 <Uncompress>
 800152e:	4601      	mov	r1, r0
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <DecodeReadRegister+0x50>)
 8001532:	f004 fc13 	bl	8005d5c <iprintf>
    return 0;
 8001536:	2000      	movs	r0, #0
 8001538:	e7e9      	b.n	800150e <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 800153a:	4608      	mov	r0, r1
 800153c:	e7e7      	b.n	800150e <DecodeReadRegister+0x1a>
 800153e:	bf00      	nop
 8001540:	08006757 	.word	0x08006757
 8001544:	08006779 	.word	0x08006779

08001548 <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 8001548:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800154a:	b920      	cbnz	r0, 8001556 <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <CmdVersion+0x14>)
 800154e:	4904      	ldr	r1, [pc, #16]	; (8001560 <CmdVersion+0x18>)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <CmdVersion+0x1c>)
 8001552:	f004 fc03 	bl	8005d5c <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 8001556:	2000      	movs	r0, #0
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop
 800155c:	08012379 	.word	0x08012379
 8001560:	08012360 	.word	0x08012360
 8001564:	0800678c 	.word	0x0800678c

08001568 <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 8001568:	b538      	push	{r3, r4, r5, lr}
 800156a:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 800156c:	b149      	cbz	r1, 8001582 <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800156e:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001570:	8888      	ldrh	r0, [r1, #4]
 8001572:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001574:	2d10      	cmp	r5, #16
 8001576:	d005      	beq.n	8001584 <DecodeWriteRegister.isra.0+0x1c>
 8001578:	2d20      	cmp	r5, #32
 800157a:	d005      	beq.n	8001588 <DecodeWriteRegister.isra.0+0x20>
 800157c:	2d08      	cmp	r5, #8
 800157e:	d105      	bne.n	800158c <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 8001580:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 8001582:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001584:	52c2      	strh	r2, [r0, r3]
    break;  
 8001586:	e7fc      	b.n	8001582 <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 8001588:	50c2      	str	r2, [r0, r3]
    break;
 800158a:	e7fa      	b.n	8001582 <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 800158c:	6808      	ldr	r0, [r1, #0]
 800158e:	f7ff fcdb 	bl	8000f48 <Uncompress>
 8001592:	4629      	mov	r1, r5
 8001594:	4602      	mov	r2, r0
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <DecodeWriteRegister.isra.0+0x48>)
 8001598:	f004 fbe0 	bl	8005d5c <iprintf>
    printf(" in periphral %s!\n",
 800159c:	6820      	ldr	r0, [r4, #0]
 800159e:	f7ff fcd3 	bl	8000f48 <Uncompress>
}
 80015a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 80015a6:	4601      	mov	r1, r0
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DecodeWriteRegister.isra.0+0x4c>)
 80015aa:	f004 bbd7 	b.w	8005d5c <iprintf>
 80015ae:	bf00      	nop
 80015b0:	08006757 	.word	0x08006757
 80015b4:	08006779 	.word	0x08006779

080015b8 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80015b8:	2801      	cmp	r0, #1
{
 80015ba:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80015bc:	d004      	beq.n	80015c8 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 80015be:	2802      	cmp	r0, #2
 80015c0:	d104      	bne.n	80015cc <CmdTest+0x14>
    printf("testasm\n\n"
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <CmdTest+0x24>)
 80015c4:	f004 fc66 	bl	8005e94 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 80015c8:	2000      	movs	r0, #0
 80015ca:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 80015cc:	204d      	movs	r0, #77	; 0x4d
 80015ce:	f7fe fe07 	bl	80001e0 <mytest>
 80015d2:	4601      	mov	r1, r0
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <CmdTest+0x28>)
 80015d6:	f004 fbc1 	bl	8005d5c <iprintf>
  return CmdReturnOk;
 80015da:	e7f5      	b.n	80015c8 <CmdTest+0x10>
 80015dc:	0800679c 	.word	0x0800679c
 80015e0:	080067d5 	.word	0x080067d5

080015e4 <CmdDC>:
// RETURNS       :CmdReturnOk is successfull
//  


ParserReturnVal_t CmdDC(int mode)
{
 80015e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80015e8:	4604      	mov	r4, r0
{
 80015ea:	b090      	sub	sp, #64	; 0x40
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80015ec:	2800      	cmp	r0, #0
 80015ee:	f040 81f8 	bne.w	80019e2 <CmdDC+0x3fe>
  __HAL_RCC_TIM11_CLK_ENABLE();
 80015f2:	4bbb      	ldr	r3, [pc, #748]	; (80018e0 <CmdDC+0x2fc>)
 80015f4:	9003      	str	r0, [sp, #12]
 80015f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  TIM_OC_InitTypeDef sConfigOC = {0};
  
 // timer 11 initialization. Timer 11 is used as time base for timing purpose
 
  htim11.Instance = TIM11;
 80015f8:	4dba      	ldr	r5, [pc, #744]	; (80018e4 <CmdDC+0x300>)
  __HAL_RCC_TIM11_CLK_ENABLE();
 80015fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001602:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001606:	9203      	str	r2, [sp, #12]
 8001608:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	9002      	str	r0, [sp, #8]
 800160c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800161a:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 800161c:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800161e:	201a      	movs	r0, #26
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001620:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001622:	f7ff fe47 	bl	80012b4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <CmdDC+0x304>)
 8001628:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162c:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	4621      	mov	r1, r4
 8001630:	221c      	movs	r2, #28
 8001632:	a809      	add	r0, sp, #36	; 0x24
 8001634:	f001 fd46 	bl	80030c4 <memset>
  htim11.Init.Prescaler = 49999;     // interrupt time period of 1000 msec
 8001638:	48ac      	ldr	r0, [pc, #688]	; (80018ec <CmdDC+0x308>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	60ac      	str	r4, [r5, #8]
  htim11.Init.Prescaler = 49999;     // interrupt time period of 1000 msec
 800163c:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8001640:	e9c5 0300 	strd	r0, r3, [r5]
  htim11.Init.Period = 1999;   // interrupt time period of 1000 msec
 8001644:	f240 73cf 	movw	r3, #1999	; 0x7cf
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  rc = HAL_TIM_Base_Init(&htim11) != HAL_OK;
 8001648:	4628      	mov	r0, r5
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	61ac      	str	r4, [r5, #24]
  rc = HAL_TIM_Base_Init(&htim11) != HAL_OK;
 8001650:	f7ff fdf6 	bl	8001240 <HAL_TIM_Base_Init.constprop.0>
  if(rc != HAL_OK) {
 8001654:	b110      	cbz	r0, 800165c <CmdDC+0x78>
    printf("TIM 11 initialization failed \n");
 8001656:	48a6      	ldr	r0, [pc, #664]	; (80018f0 <CmdDC+0x30c>)
 8001658:	f004 fc1c 	bl	8005e94 <puts>
  if (htim->State == HAL_TIM_STATE_RESET)
 800165c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001660:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001664:	b90b      	cbnz	r3, 800166a <CmdDC+0x86>
    htim->Lock = HAL_UNLOCKED;
 8001666:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800166a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800166c:	49a1      	ldr	r1, [pc, #644]	; (80018f4 <CmdDC+0x310>)
 800166e:	6828      	ldr	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001674:	f7ff fd6e 	bl	8001154 <TIM_Base_SetConfig>
  __HAL_LOCK(htim);
 8001678:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800167c:	2301      	movs	r3, #1
  rc = HAL_TIM_OC_Init(&htim11) != HAL_OK;
  
  if(rc != HAL_OK) {
    printf("TIM 11 initialization failed \n");
  } 
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800167e:	2400      	movs	r4, #0
  __HAL_LOCK(htim);
 8001680:	429a      	cmp	r2, r3
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001682:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
  sConfigOC.Pulse = 0;
 8001686:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800168a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001690:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001694:	940d      	str	r4, [sp, #52]	; 0x34
 8001696:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800169a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 80016a2:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 80016a6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80016aa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80016ae:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 80016b2:	f040 819a 	bne.w	80019ea <CmdDC+0x406>
  rc = HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK;
  if(rc != HAL_OK) {
    printf("TIM 11 channel configuration failed \n");
 80016b6:	4890      	ldr	r0, [pc, #576]	; (80018f8 <CmdDC+0x314>)
 80016b8:	f004 fbec 	bl	8005e94 <puts>
  
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

   // timer 1 initialization. Used as three channel PWM timer.
   
  htim1.Instance = TIM1;
 80016bc:	4c8f      	ldr	r4, [pc, #572]	; (80018fc <CmdDC+0x318>)
  htim1.Init.Prescaler = 49;
 80016be:	4990      	ldr	r1, [pc, #576]	; (8001900 <CmdDC+0x31c>)
 80016c0:	2331      	movs	r3, #49	; 0x31
 80016c2:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 199;
 80016c6:	22c7      	movs	r2, #199	; 0xc7
 80016c8:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  rc= HAL_TIM_Base_Init(&htim1);
 80016ca:	4620      	mov	r0, r4
  htim1.Init.Period = 199;
 80016cc:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 80016d0:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	61a3      	str	r3, [r4, #24]
  rc= HAL_TIM_Base_Init(&htim1);
 80016d6:	f7ff fdb3 	bl	8001240 <HAL_TIM_Base_Init.constprop.0>
   if(rc!= HAL_OK)
 80016da:	b110      	cbz	r0, 80016e2 <CmdDC+0xfe>
   {
    printf("Error");
 80016dc:	4889      	ldr	r0, [pc, #548]	; (8001904 <CmdDC+0x320>)
 80016de:	f004 fb3d 	bl	8005d5c <iprintf>
  __HAL_LOCK(htim);
 80016e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	f000 8188 	beq.w	80019fc <CmdDC+0x418>
  tmpsmcr = htim->Instance->SMCR;
 80016ec:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80016ee:	2302      	movs	r3, #2
 80016f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016f4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80016fe:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001700:	2301      	movs	r3, #1
 8001702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001706:	2300      	movs	r3, #0
 8001708:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (htim->State == HAL_TIM_STATE_RESET)
 800170c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001710:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001714:	b90b      	cbnz	r3, 800171a <CmdDC+0x136>
    htim->Lock = HAL_UNLOCKED;
 8001716:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800171a:	497b      	ldr	r1, [pc, #492]	; (8001908 <CmdDC+0x324>)
 800171c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800171e:	2602      	movs	r6, #2
 8001720:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001724:	f7ff fd16 	bl	8001154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001728:	2301      	movs	r3, #1
 800172a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800172e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001732:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001736:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800173a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001746:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800174a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800174e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001752:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001756:	2b01      	cmp	r3, #1
 8001758:	f000 8154 	beq.w	8001a04 <CmdDC+0x420>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800175c:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800175e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001762:	6859      	ldr	r1, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001764:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001766:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800176a:	6059      	str	r1, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800176c:	4964      	ldr	r1, [pc, #400]	; (8001900 <CmdDC+0x31c>)
 800176e:	428b      	cmp	r3, r1
 8001770:	d012      	beq.n	8001798 <CmdDC+0x1b4>
 8001772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001776:	d00f      	beq.n	8001798 <CmdDC+0x1b4>
 8001778:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800177c:	428b      	cmp	r3, r1
 800177e:	d00b      	beq.n	8001798 <CmdDC+0x1b4>
 8001780:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001784:	428b      	cmp	r3, r1
 8001786:	d007      	beq.n	8001798 <CmdDC+0x1b4>
 8001788:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800178c:	428b      	cmp	r3, r1
 800178e:	d003      	beq.n	8001798 <CmdDC+0x1b4>
 8001790:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001794:	428b      	cmp	r3, r1
 8001796:	d102      	bne.n	800179e <CmdDC+0x1ba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800179c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800179e:	2301      	movs	r3, #1
 80017a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017a4:	2300      	movs	r3, #0
 80017a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   {
    printf("Error");
   }
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	2260      	movs	r2, #96	; 0x60
 80017ae:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ba:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_LOCK(htim);
 80017bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	f000 8123 	beq.w	8001a0c <CmdDC+0x428>
 80017c6:	2301      	movs	r3, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017c8:	a909      	add	r1, sp, #36	; 0x24
 80017ca:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80017cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017d0:	f7ff fd0e 	bl	80011f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017d6:	990d      	ldr	r1, [sp, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	f042 0208 	orr.w	r2, r2, #8
 80017de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	f022 0204 	bic.w	r2, r2, #4
 80017e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	619a      	str	r2, [r3, #24]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017ee:	6823      	ldr	r3, [r4, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	f022 0210 	bic.w	r2, r2, #16
 80017f8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80017fa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80017fc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80017fe:	6999      	ldr	r1, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001800:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001804:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001808:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  tmpccer &= ~TIM_CCER_CC2P;
 800180a:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800180e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001812:	4e3b      	ldr	r6, [pc, #236]	; (8001900 <CmdDC+0x31c>)
 8001814:	42b3      	cmp	r3, r6
 8001816:	d10d      	bne.n	8001834 <CmdDC+0x250>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001818:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    tmpccer &= ~TIM_CCER_CC2NP;
 800181a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800181e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001822:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001826:	f420 6040 	bic.w	r0, r0, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800182a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800182c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001830:	ea40 0086 	orr.w	r0, r0, r6, lsl #2
  TIMx->CR2 = tmpcr2;
 8001834:	6058      	str	r0, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001836:	6199      	str	r1, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001838:	990a      	ldr	r1, [sp, #40]	; 0x28
 800183a:	6399      	str	r1, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800183c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800183e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001840:	990d      	ldr	r1, [sp, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001856:	619a      	str	r2, [r3, #24]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001858:	6823      	ldr	r3, [r4, #0]
  tmpccmrx |= OC_Config->OCMode;
 800185a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001862:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001864:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001866:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001868:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800186a:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800186e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001870:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  tmpccer &= ~TIM_CCER_CC3P;
 8001872:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001876:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800187a:	4e21      	ldr	r6, [pc, #132]	; (8001900 <CmdDC+0x31c>)
 800187c:	42b3      	cmp	r3, r6
 800187e:	d10d      	bne.n	800189c <CmdDC+0x2b8>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001880:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    tmpccer &= ~TIM_CCER_CC3NP;
 8001882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001886:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800188a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800188e:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001892:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8001894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001898:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  TIMx->CR2 = tmpcr2;
 800189c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800189e:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80018a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018a2:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80018a4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018a6:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018a8:	990d      	ldr	r1, [sp, #52]	; 0x34
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018aa:	f042 0208 	orr.w	r2, r2, #8
 80018ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018b8:	69da      	ldr	r2, [r3, #28]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	61da      	str	r2, [r3, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80018c6:	2300      	movs	r3, #0
 80018c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  {
    printf("Error");
  }
  
  // GPIO pin configuration 
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <CmdDC+0x2fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	480f      	ldr	r0, [pc, #60]	; (800190c <CmdDC+0x328>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	2600      	movs	r6, #0
 80018d2:	9601      	str	r6, [sp, #4]
 80018d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
 80018dc:	e018      	b.n	8001910 <CmdDC+0x32c>
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	20000ac4 	.word	0x20000ac4
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	40014800 	.word	0x40014800
 80018f0:	080067e3 	.word	0x080067e3
 80018f4:	20000ac8 	.word	0x20000ac8
 80018f8:	08006801 	.word	0x08006801
 80018fc:	20000a7c 	.word	0x20000a7c
 8001900:	40010000 	.word	0x40010000
 8001904:	08006826 	.word	0x08006826
 8001908:	20000a80 	.word	0x20000a80
 800190c:	40020000 	.word	0x40020000
 8001910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001912:	f002 0201 	and.w	r2, r2, #1
 8001916:	9201      	str	r2, [sp, #4]
 8001918:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	9600      	str	r6, [sp, #0]
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	f042 0202 	orr.w	r2, r2, #2
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800192c:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001932:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001938:	f04f 0802 	mov.w	r8, #2
 800193c:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 8001940:	e9cd 6606 	strd	r6, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f7ff fb3e 	bl	8000fc4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001948:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	e9cd 6606 	strd	r6, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f7ff fb37 	bl	8000fc4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	e9cd 7704 	strd	r7, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	e9cd 6606 	strd	r6, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001962:	f7ff fb2f 	bl	8000fc4 <HAL_GPIO_Init>
  if (htim->State != HAL_TIM_STATE_READY)
 8001966:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800196a:	42bb      	cmp	r3, r7
 800196c:	d124      	bne.n	80019b8 <CmdDC+0x3d4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800196e:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001970:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	433a      	orrs	r2, r7
 8001978:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <CmdDC+0x460>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d012      	beq.n	80019a6 <CmdDC+0x3c2>
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d00f      	beq.n	80019a6 <CmdDC+0x3c2>
 8001986:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800198a:	4293      	cmp	r3, r2
 800198c:	d00b      	beq.n	80019a6 <CmdDC+0x3c2>
 800198e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <CmdDC+0x3c2>
 8001996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199a:	4293      	cmp	r3, r2
 800199c:	d003      	beq.n	80019a6 <CmdDC+0x3c2>
 800199e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d104      	bne.n	80019b0 <CmdDC+0x3cc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ac:	2a06      	cmp	r2, #6
 80019ae:	d003      	beq.n	80019b8 <CmdDC+0x3d4>
    __HAL_TIM_ENABLE(htim);
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019b8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <CmdDC+0x3e2>
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff fca3 	bl	800130c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
 80019c6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d102      	bne.n	80019d4 <CmdDC+0x3f0>
 80019ce:	2004      	movs	r0, #4
 80019d0:	f7ff fc9c 	bl	800130c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
 80019d4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <CmdDC+0x3fe>
 80019dc:	2008      	movs	r0, #8
 80019de:	f7ff fc95 	bl	800130c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
   
  return CmdReturnOk;
 
}
 80019e2:	2000      	movs	r0, #0
 80019e4:	b010      	add	sp, #64	; 0x40
 80019e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019ea:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 80019ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019f0:	a909      	add	r1, sp, #36	; 0x24
 80019f2:	f7ff fbfd 	bl	80011f0 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80019f6:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if(rc != HAL_OK) {
 80019fa:	e65f      	b.n	80016bc <CmdDC+0xd8>
    printf("Error");
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <CmdDC+0x464>)
 80019fe:	f004 f9ad 	bl	8005d5c <iprintf>
 8001a02:	e683      	b.n	800170c <CmdDC+0x128>
    printf("Error");
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <CmdDC+0x464>)
 8001a06:	f004 f9a9 	bl	8005d5c <iprintf>
 8001a0a:	e6ce      	b.n	80017aa <CmdDC+0x1c6>
    printf("Error");
 8001a0c:	480e      	ldr	r0, [pc, #56]	; (8001a48 <CmdDC+0x464>)
 8001a0e:	f004 f9a5 	bl	8005d5c <iprintf>
  __HAL_LOCK(htim);
 8001a12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f47f aee9 	bne.w	80017ee <CmdDC+0x20a>
    printf("Error");
 8001a1c:	480a      	ldr	r0, [pc, #40]	; (8001a48 <CmdDC+0x464>)
 8001a1e:	f004 f99d 	bl	8005d5c <iprintf>
 8001a22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f47f af16 	bne.w	8001858 <CmdDC+0x274>
    printf("Error");
 8001a2c:	4806      	ldr	r0, [pc, #24]	; (8001a48 <CmdDC+0x464>)
 8001a2e:	f004 f995 	bl	8005d5c <iprintf>
  __HAL_LOCK(htim);
 8001a32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	f47f af41 	bne.w	80018be <CmdDC+0x2da>
    printf("Error");
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <CmdDC+0x464>)
 8001a3e:	f004 f98d 	bl	8005d5c <iprintf>
 8001a42:	e743      	b.n	80018cc <CmdDC+0x2e8>
 8001a44:	40010000 	.word	0x40010000
 8001a48:	08006826 	.word	0x08006826

08001a4c <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	460c      	mov	r4, r1
 8001a52:	b086      	sub	sp, #24
 8001a54:	4616      	mov	r6, r2
 8001a56:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001a58:	4605      	mov	r5, r0
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d046      	beq.n	8001aec <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001a5e:	6800      	ldr	r0, [r0, #0]
 8001a60:	f7ff fa72 	bl	8000f48 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001a64:	88aa      	ldrh	r2, [r5, #4]
 8001a66:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001a68:	9201      	str	r2, [sp, #4]
 8001a6a:	79ab      	ldrb	r3, [r5, #6]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4633      	mov	r3, r6
 8001a72:	4820      	ldr	r0, [pc, #128]	; (8001af4 <DecodeRegister+0xa8>)
 8001a74:	4632      	mov	r2, r6
 8001a76:	f004 f971 	bl	8005d5c <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001a7a:	68ac      	ldr	r4, [r5, #8]
 8001a7c:	b3a4      	cbz	r4, 8001ae8 <DecodeRegister+0x9c>
 8001a7e:	b3af      	cbz	r7, 8001aec <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001a80:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001af8 <DecodeRegister+0xac>
 8001a84:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001afc <DecodeRegister+0xb0>
 8001a88:	f8df a074 	ldr.w	sl, [pc, #116]	; 8001b00 <DecodeRegister+0xb4>
 8001a8c:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001a8e:	2700      	movs	r7, #0
 8001a90:	89ab      	ldrh	r3, [r5, #12]
 8001a92:	429f      	cmp	r7, r3
 8001a94:	d305      	bcc.n	8001aa2 <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001a96:	200a      	movs	r0, #10
  }

}
 8001a98:	b006      	add	sp, #24
 8001a9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 8001a9e:	f004 b975 	b.w	8005d8c <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001aa2:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001aa6:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4093      	lsls	r3, r2
 8001aae:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	fa26 f202 	lsr.w	r2, r6, r2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001abc:	f7ff fa44 	bl	8000f48 <Uncompress>
	 (unsigned int)(f->width),
 8001ac0:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001ac4:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 8001ac8:	9b05      	ldr	r3, [sp, #20]
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	4601      	mov	r1, r0
 8001ace:	2a01      	cmp	r2, #1
 8001ad0:	bf8c      	ite	hi
 8001ad2:	4640      	movhi	r0, r8
 8001ad4:	4648      	movls	r0, r9
 8001ad6:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4650      	mov	r0, sl
 8001ade:	f004 f93d 	bl	8005d5c <iprintf>
    for(i=0; i<r->numFields; i++) {
 8001ae2:	3701      	adds	r7, #1
 8001ae4:	3408      	adds	r4, #8
 8001ae6:	e7d3      	b.n	8001a90 <DecodeRegister+0x44>
  if(decodeFields) {
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	d1d4      	bne.n	8001a96 <DecodeRegister+0x4a>
}
 8001aec:	b006      	add	sp, #24
 8001aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af2:	bf00      	nop
 8001af4:	08006838 	.word	0x08006838
 8001af8:	0800682c 	.word	0x0800682c
 8001afc:	08006832 	.word	0x08006832
 8001b00:	08006873 	.word	0x08006873

08001b04 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b08:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001b0a:	6800      	ldr	r0, [r0, #0]
{
 8001b0c:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001b0e:	f7ff fa1b 	bl	8000f48 <Uncompress>
 8001b12:	6862      	ldr	r2, [r4, #4]
 8001b14:	4601      	mov	r1, r0
 8001b16:	480e      	ldr	r0, [pc, #56]	; (8001b50 <DecodePeripheral+0x4c>)
 8001b18:	f004 f920 	bl	8005d5c <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001b1c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001b20:	f1b8 0f00 	cmp.w	r8, #0
 8001b24:	d112      	bne.n	8001b4c <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001b2a:	4639      	mov	r1, r7
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff fce1 	bl	80014f4 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001b32:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001b34:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001b36:	4633      	mov	r3, r6
 8001b38:	4638      	mov	r0, r7
 8001b3a:	f7ff ff87 	bl	8001a4c <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001b3e:	3501      	adds	r5, #1
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	429d      	cmp	r5, r3
 8001b44:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001b48:	d3ef      	bcc.n	8001b2a <DecodePeripheral+0x26>
 8001b4a:	e7ec      	b.n	8001b26 <DecodePeripheral+0x22>
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	e7f7      	b.n	8001b40 <DecodePeripheral+0x3c>
 8001b50:	0800689c 	.word	0x0800689c

08001b54 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b58:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001b5a:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001b5c:	460e      	mov	r6, r1
  printf("\t");
 8001b5e:	f004 f915 	bl	8005d8c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001b62:	4f11      	ldr	r7, [pc, #68]	; (8001ba8 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8001b64:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8001bac <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001b68:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001bb0 <DecodePrintRegisters+0x5c>
 8001b6c:	3510      	adds	r5, #16
  col = 8;
 8001b6e:	2408      	movs	r4, #8
  while(count--) {
 8001b70:	3e01      	subs	r6, #1
 8001b72:	d201      	bcs.n	8001b78 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8001b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001b78:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8001b7c:	f7ff f9e4 	bl	8000f48 <Uncompress>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4638      	mov	r0, r7
 8001b84:	f004 f8ea 	bl	8005d5c <iprintf>
 8001b88:	4420      	add	r0, r4
 8001b8a:	b2c4      	uxtb	r4, r0
    if(count) {
 8001b8c:	b156      	cbz	r6, 8001ba4 <DecodePrintRegisters+0x50>
      col += printf(", ");
 8001b8e:	4640      	mov	r0, r8
 8001b90:	f004 f8e4 	bl	8005d5c <iprintf>
 8001b94:	4420      	add	r0, r4
 8001b96:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001b98:	2c46      	cmp	r4, #70	; 0x46
 8001b9a:	d903      	bls.n	8001ba4 <DecodePrintRegisters+0x50>
	printf("\n\t");
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	f004 f8dd 	bl	8005d5c <iprintf>
	col = 8;
 8001ba2:	2408      	movs	r4, #8
    r++;
 8001ba4:	3510      	adds	r5, #16
 8001ba6:	e7e3      	b.n	8001b70 <DecodePrintRegisters+0x1c>
 8001ba8:	08006776 	.word	0x08006776
 8001bac:	08006835 	.word	0x08006835
 8001bb0:	080068c4 	.word	0x080068c4

08001bb4 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 8001bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 8001bb8:	2009      	movs	r0, #9
 8001bba:	f004 f8e7 	bl	8005d8c <putchar>
  for(; p->name != NULL; p++) {
 8001bbe:	4d0f      	ldr	r5, [pc, #60]	; (8001bfc <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 8001bc0:	4e0f      	ldr	r6, [pc, #60]	; (8001c00 <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 8001bc2:	4f10      	ldr	r7, [pc, #64]	; (8001c04 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 8001bc4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001c08 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 8001bc8:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8001bca:	6828      	ldr	r0, [r5, #0]
 8001bcc:	b908      	cbnz	r0, 8001bd2 <DecodePrintPeripherals.constprop.0+0x1e>
}
 8001bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8001bd2:	f7ff f9b9 	bl	8000f48 <Uncompress>
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f004 f8bf 	bl	8005d5c <iprintf>
    if((p+1)->name != NULL) {
 8001bde:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8001be0:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8001be2:	b14b      	cbz	r3, 8001bf8 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 8001be4:	4638      	mov	r0, r7
 8001be6:	f004 f8b9 	bl	8005d5c <iprintf>
 8001bea:	4404      	add	r4, r0
      if(col > 70) {
 8001bec:	2c46      	cmp	r4, #70	; 0x46
 8001bee:	d903      	bls.n	8001bf8 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 8001bf0:	4640      	mov	r0, r8
 8001bf2:	f004 f8b3 	bl	8005d5c <iprintf>
	col = 8;
 8001bf6:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8001bf8:	3510      	adds	r5, #16
 8001bfa:	e7e6      	b.n	8001bca <DecodePrintPeripherals.constprop.0+0x16>
 8001bfc:	0800edc0 	.word	0x0800edc0
 8001c00:	08006776 	.word	0x08006776
 8001c04:	08006835 	.word	0x08006835
 8001c08:	080068c4 	.word	0x080068c4

08001c0c <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001c0c:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001c0e:	4909      	ldr	r1, [pc, #36]	; (8001c34 <fetch_string_arg+0x28>)
{
 8001c10:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f001 ff8e 	bl	8003b34 <strtok>
  if(p == NULL) {
 8001c18:	4604      	mov	r4, r0
 8001c1a:	b140      	cbz	r0, 8001c2e <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8001c1c:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 8001c1e:	f7fe faf9 	bl	8000214 <strlen>
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <fetch_string_arg+0x2c>)
 8001c24:	3001      	adds	r0, #1
 8001c26:	4404      	add	r4, r0
 8001c28:	601c      	str	r4, [r3, #0]
  return 0;
 8001c2a:	2000      	movs	r0, #0
}
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c32:	e7fb      	b.n	8001c2c <fetch_string_arg+0x20>
 8001c34:	080068c7 	.word	0x080068c7
 8001c38:	20000a5c 	.word	0x20000a5c

08001c3c <TaskInput>:
{
 8001c3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 8001c40:	4d6b      	ldr	r5, [pc, #428]	; (8001df0 <TaskInput+0x1b4>)
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	b123      	cbz	r3, 8001c50 <TaskInput+0x14>
    printf("ARMON>");
 8001c46:	486b      	ldr	r0, [pc, #428]	; (8001df4 <TaskInput+0x1b8>)
 8001c48:	f004 f888 	bl	8005d5c <iprintf>
    printPrompt = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f10d 010f 	add.w	r1, sp, #15
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff f950 	bl	8000efc <TerminalRead>
  if(rc) goto ProcessCharacter;
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d054      	beq.n	8001d0a <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 8001c60:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d001      	beq.n	8001c6c <TaskInput+0x30>
 8001c68:	2b7f      	cmp	r3, #127	; 0x7f
 8001c6a:	d115      	bne.n	8001c98 <TaskInput+0x5c>
 8001c6c:	4c62      	ldr	r4, [pc, #392]	; (8001df8 <TaskInput+0x1bc>)
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	b192      	cbz	r2, 8001c98 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 8001c72:	4862      	ldr	r0, [pc, #392]	; (8001dfc <TaskInput+0x1c0>)
 8001c74:	f004 f872 	bl	8005d5c <iprintf>
    buf--;     /* Then remove it from the buffer */
 8001c78:	4a61      	ldr	r2, [pc, #388]	; (8001e00 <TaskInput+0x1c4>)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8001c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c8a:	f1a3 020d 	sub.w	r2, r3, #13
 8001c8e:	4253      	negs	r3, r2
 8001c90:	4153      	adcs	r3, r2
 8001c92:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <TaskInput+0x1c8>)
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e038      	b.n	8001d0a <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8001c98:	2b21      	cmp	r3, #33	; 0x21
 8001c9a:	d12a      	bne.n	8001cf2 <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <TaskInput+0x1cc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8001ca4:	4c59      	ldr	r4, [pc, #356]	; (8001e0c <TaskInput+0x1d0>)
 8001ca6:	495a      	ldr	r1, [pc, #360]	; (8001e10 <TaskInput+0x1d4>)
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f004 f915 	bl	8005ed8 <strcpy>
      printf("%s",input);
 8001cae:	4621      	mov	r1, r4
 8001cb0:	4858      	ldr	r0, [pc, #352]	; (8001e14 <TaskInput+0x1d8>)
 8001cb2:	f004 f853 	bl	8005d5c <iprintf>
      count = strlen(input);
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7fe faac 	bl	8000214 <strlen>
 8001cbc:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <TaskInput+0x1bc>)
 8001cbe:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <TaskInput+0x1c4>)
 8001cc2:	4404      	add	r4, r0
 8001cc4:	601c      	str	r4, [r3, #0]
    printf("\n");
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f004 f860 	bl	8005d8c <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 8001ccc:	494f      	ldr	r1, [pc, #316]	; (8001e0c <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001cce:	4c52      	ldr	r4, [pc, #328]	; (8001e18 <TaskInput+0x1dc>)
  i = len;
 8001cd0:	2350      	movs	r3, #80	; 0x50
 8001cd2:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	1c5f      	adds	r7, r3, #1
 8001cd8:	780a      	ldrb	r2, [r1, #0]
 8001cda:	4608      	mov	r0, r1
 8001cdc:	f101 0101 	add.w	r1, r1, #1
 8001ce0:	d036      	beq.n	8001d50 <TaskInput+0x114>
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d060      	beq.n	8001da8 <TaskInput+0x16c>
 8001ce6:	5d12      	ldrb	r2, [r2, r4]
 8001ce8:	0717      	lsls	r7, r2, #28
 8001cea:	d4f3      	bmi.n	8001cd4 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d130      	bne.n	8001d52 <TaskInput+0x116>
 8001cf0:	e05a      	b.n	8001da8 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 8001cf2:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <TaskInput+0x1dc>)
 8001cf4:	5c9a      	ldrb	r2, [r3, r2]
 8001cf6:	f012 0f97 	tst.w	r2, #151	; 0x97
 8001cfa:	d015      	beq.n	8001d28 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8001cfc:	493e      	ldr	r1, [pc, #248]	; (8001df8 <TaskInput+0x1bc>)
 8001cfe:	680a      	ldr	r2, [r1, #0]
 8001d00:	2a4f      	cmp	r2, #79	; 0x4f
 8001d02:	d905      	bls.n	8001d10 <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 8001d04:	2007      	movs	r0, #7
 8001d06:	f004 f841 	bl	8005d8c <putchar>
}
 8001d0a:	b004      	add	sp, #16
 8001d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 8001d10:	4c3b      	ldr	r4, [pc, #236]	; (8001e00 <TaskInput+0x1c4>)
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	7003      	strb	r3, [r0, #0]
 8001d16:	1c45      	adds	r5, r0, #1
      count++;
 8001d18:	3201      	adds	r2, #1
      printf("%c",c);
 8001d1a:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 8001d1e:	6025      	str	r5, [r4, #0]
      count++;
 8001d20:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8001d22:	f004 f833 	bl	8005d8c <putchar>
 8001d26:	e7ae      	b.n	8001c86 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 8001d28:	2b0d      	cmp	r3, #13
 8001d2a:	d005      	beq.n	8001d38 <TaskInput+0xfc>
 8001d2c:	2b0a      	cmp	r3, #10
 8001d2e:	d1aa      	bne.n	8001c86 <TaskInput+0x4a>
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <TaskInput+0x1c8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1a6      	bne.n	8001c86 <TaskInput+0x4a>
    *buf = '\0';
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <TaskInput+0x1c4>)
    strcpy(input_b,input);
 8001d3a:	4934      	ldr	r1, [pc, #208]	; (8001e0c <TaskInput+0x1d0>)
    *buf = '\0';
 8001d3c:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8001d3e:	4834      	ldr	r0, [pc, #208]	; (8001e10 <TaskInput+0x1d4>)
    *buf = '\0';
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8001d44:	f004 f8c8 	bl	8005ed8 <strcpy>
    saved = 1;
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <TaskInput+0x1cc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e7ba      	b.n	8001cc6 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 8001d50:	b352      	cbz	r2, 8001da8 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 8001d52:	4932      	ldr	r1, [pc, #200]	; (8001e1c <TaskInput+0x1e0>)
 8001d54:	f001 feee 	bl	8003b34 <strtok>
  if(p==NULL) {
 8001d58:	4604      	mov	r4, r0
 8001d5a:	b920      	cbnz	r0, 8001d66 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8001d5c:	4930      	ldr	r1, [pc, #192]	; (8001e20 <TaskInput+0x1e4>)
 8001d5e:	4831      	ldr	r0, [pc, #196]	; (8001e24 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001d60:	f003 fffc 	bl	8005d5c <iprintf>
  return CmdReturnNotFound;
 8001d64:	e020      	b.n	8001da8 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 8001d66:	4930      	ldr	r1, [pc, #192]	; (8001e28 <TaskInput+0x1ec>)
 8001d68:	f004 f89c 	bl	8005ea4 <strcasecmp>
 8001d6c:	bb58      	cbnz	r0, 8001dc6 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 8001d6e:	492b      	ldr	r1, [pc, #172]	; (8001e1c <TaskInput+0x1e0>)
 8001d70:	f001 fee0 	bl	8003b34 <strtok>
    if(p == NULL) {
 8001d74:	4604      	mov	r4, r0
 8001d76:	b318      	cbz	r0, 8001dc0 <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 8001d78:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7fe fa49 	bl	8000214 <strlen>
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8001d84:	4f2a      	ldr	r7, [pc, #168]	; (8001e30 <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8001d86:	3001      	adds	r0, #1
 8001d88:	4420      	add	r0, r4
 8001d8a:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	b9e9      	cbnz	r1, 8001dcc <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001d90:	4828      	ldr	r0, [pc, #160]	; (8001e34 <TaskInput+0x1f8>)
 8001d92:	4621      	mov	r1, r4
 8001d94:	e7e4      	b.n	8001d60 <TaskInput+0x124>
	if(t->help != NULL) {
 8001d96:	68a2      	ldr	r2, [r4, #8]
 8001d98:	b172      	cbz	r2, 8001db8 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	f003 ffde 	bl	8005d5c <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8001da0:	340c      	adds	r4, #12
 8001da2:	6821      	ldr	r1, [r4, #0]
 8001da4:	2900      	cmp	r1, #0
 8001da6:	d1f6      	bne.n	8001d96 <TaskInput+0x15a>
    printPrompt = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	602b      	str	r3, [r5, #0]
    buf = input;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <TaskInput+0x1c4>)
 8001dae:	601e      	str	r6, [r3, #0]
    count = 0;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <TaskInput+0x1bc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e766      	b.n	8001c86 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	2001      	movs	r0, #1
 8001dbc:	4798      	blx	r3
 8001dbe:	e7ef      	b.n	8001da0 <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 8001dc0:	4c1b      	ldr	r4, [pc, #108]	; (8001e30 <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001dc2:	4f1d      	ldr	r7, [pc, #116]	; (8001e38 <TaskInput+0x1fc>)
 8001dc4:	e7ed      	b.n	8001da2 <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8001dc6:	f04f 0800 	mov.w	r8, #0
 8001dca:	e7d7      	b.n	8001d7c <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 8001dcc:	4620      	mov	r0, r4
 8001dce:	9101      	str	r1, [sp, #4]
 8001dd0:	f004 f868 	bl	8005ea4 <strcasecmp>
 8001dd4:	9901      	ldr	r1, [sp, #4]
 8001dd6:	b948      	cbnz	r0, 8001dec <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 8001dd8:	f1b8 0f00 	cmp.w	r8, #0
 8001ddc:	d002      	beq.n	8001de4 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 8001dde:	4817      	ldr	r0, [pc, #92]	; (8001e3c <TaskInput+0x200>)
 8001de0:	f003 ffbc 	bl	8005d5c <iprintf>
      return t->func(arg);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4640      	mov	r0, r8
 8001de8:	4798      	blx	r3
 8001dea:	e7dd      	b.n	8001da8 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 8001dec:	370c      	adds	r7, #12
 8001dee:	e7cd      	b.n	8001d8c <TaskInput+0x150>
 8001df0:	20000010 	.word	0x20000010
 8001df4:	080068ce 	.word	0x080068ce
 8001df8:	20000a60 	.word	0x20000a60
 8001dfc:	080068d5 	.word	0x080068d5
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000a68 	.word	0x20000a68
 8001e08:	20000bf4 	.word	0x20000bf4
 8001e0c:	20000b50 	.word	0x20000b50
 8001e10:	20000ba0 	.word	0x20000ba0
 8001e14:	08006776 	.word	0x08006776
 8001e18:	08012402 	.word	0x08012402
 8001e1c:	080068c7 	.word	0x080068c7
 8001e20:	080123e8 	.word	0x080123e8
 8001e24:	080068d9 	.word	0x080068d9
 8001e28:	08006909 	.word	0x08006909
 8001e2c:	20000a5c 	.word	0x20000a5c
 8001e30:	080128b8 	.word	0x080128b8
 8001e34:	0800691f 	.word	0x0800691f
 8001e38:	0800690e 	.word	0x0800690e
 8001e3c:	0800691a 	.word	0x0800691a

08001e40 <fetch_uint32_arg>:
{
 8001e40:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <fetch_uint32_arg+0x34>)
{
 8001e44:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f001 fe74 	bl	8003b34 <strtok>
  if(p == NULL) {
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	b168      	cbz	r0, 8001e6c <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	4611      	mov	r1, r2
 8001e54:	f001 ff3c 	bl	8003cd0 <strtoul>
 8001e58:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7fe f9da 	bl	8000214 <strlen>
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <fetch_uint32_arg+0x38>)
 8001e62:	3001      	adds	r0, #1
 8001e64:	4404      	add	r4, r0
 8001e66:	601c      	str	r4, [r3, #0]
  return 0;
 8001e68:	2000      	movs	r0, #0
}
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e70:	e7fb      	b.n	8001e6a <fetch_uint32_arg+0x2a>
 8001e72:	bf00      	nop
 8001e74:	080068c7 	.word	0x080068c7
 8001e78:	20000a5c 	.word	0x20000a5c

08001e7c <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8001e7c:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001e7e:	b9d8      	cbnz	r0, 8001eb8 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8001e80:	a801      	add	r0, sp, #4
 8001e82:	f7ff ffdd 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8001e86:	b128      	cbz	r0, 8001e94 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8001e88:	480e      	ldr	r0, [pc, #56]	; (8001ec4 <CmdLed+0x48>)
 8001e8a:	f004 f803 	bl	8005e94 <puts>
    return CmdReturnBadParameter1;
 8001e8e:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8001e90:	b002      	add	sp, #8
 8001e92:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8001e94:	9901      	ldr	r1, [sp, #4]
 8001e96:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <CmdLed+0x4c>)
 8001e98:	f003 ff60 	bl	8005d5c <iprintf>
  val = val ? 1 : 0;
 8001e9c:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <CmdLed+0x50>)
  val = val ? 1 : 0;
 8001ea0:	3b00      	subs	r3, #0
 8001ea2:	bf18      	it	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8001ea8:	f003 fff4 	bl	8005e94 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8001eac:	f89d 0004 	ldrb.w	r0, [sp, #4]
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <CmdLed+0x54>)
 8001eb2:	b118      	cbz	r0, 8001ebc <CmdLed+0x40>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e7e9      	b.n	8001e90 <CmdLed+0x14>
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ebc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ec0:	619a      	str	r2, [r3, #24]
 8001ec2:	e7e5      	b.n	8001e90 <CmdLed+0x14>
 8001ec4:	08006954 	.word	0x08006954
 8001ec8:	08006982 	.word	0x08006982
 8001ecc:	0800699e 	.word	0x0800699e
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <CmdDC2>:

ADD_CMD("DCInit",CmdDC,"DC motor init")

ParserReturnVal_t CmdDC2(int mode)
{
 8001ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	f040 808a 	bne.w	8001ff0 <CmdDC2+0x11c>
  uint32_t Motor_1_Dir = 0;
  uint32_t Motor_2_Dir = 0;
 8001edc:	e9cd 0000 	strd	r0, r0, [sp]
  uint32_t Motor_1_Speed = 0;
  uint32_t Motor_2_Speed = 0;
 8001ee0:	e9cd 0002 	strd	r0, r0, [sp, #8]
 
 
  rc = fetch_uint32_arg(&Motor_1_Dir);
 8001ee4:	4668      	mov	r0, sp
 8001ee6:	f7ff ffab 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8001eea:	b110      	cbz	r0, 8001ef2 <CmdDC2+0x1e>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 8001eec:	4860      	ldr	r0, [pc, #384]	; (8002070 <CmdDC2+0x19c>)
 8001eee:	f003 ffd1 	bl	8005e94 <puts>
  } 
  rc = fetch_uint32_arg(&Motor_1_Speed);
 8001ef2:	a802      	add	r0, sp, #8
 8001ef4:	f7ff ffa4 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d07d      	beq.n	8001ff8 <CmdDC2+0x124>
   printf("Please Enter speed in percentage between 0 and 100 \n");
 8001efc:	485d      	ldr	r0, [pc, #372]	; (8002074 <CmdDC2+0x1a0>)
 8001efe:	f003 ffc9 	bl	8005e94 <puts>
  }
  else if(Motor_1_Speed < 0 || Motor_1_Speed > 100) {
    printf("Please Enter speed in percentage between 0 and 100 \n"); 
  }
 
  rc = fetch_uint32_arg(&Motor_2_Dir);
 8001f02:	a801      	add	r0, sp, #4
 8001f04:	f7ff ff9c 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8001f08:	b110      	cbz	r0, 8001f10 <CmdDC2+0x3c>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 8001f0a:	4859      	ldr	r0, [pc, #356]	; (8002070 <CmdDC2+0x19c>)
 8001f0c:	f003 ffc2 	bl	8005e94 <puts>
  }
  rc = fetch_uint32_arg(&Motor_2_Speed);
 8001f10:	a803      	add	r0, sp, #12
 8001f12:	f7ff ff95 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d072      	beq.n	8002000 <CmdDC2+0x12c>
   printf("Please Enter speed in percentage between 0 and 100 \n");
 8001f1a:	4856      	ldr	r0, [pc, #344]	; (8002074 <CmdDC2+0x1a0>)
 8001f1c:	f003 ffba 	bl	8005e94 <puts>
  }
  else if(Motor_2_Speed < 0 || Motor_2_Speed > 100) {
    printf("Please Enter speed in percentage between 0 and 100 \n"); 
  }
  rc = fetch_uint32_arg(&setTime);
 8001f20:	4855      	ldr	r0, [pc, #340]	; (8002078 <CmdDC2+0x1a4>)
 8001f22:	f7ff ff8d 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8001f26:	b110      	cbz	r0, 8001f2e <CmdDC2+0x5a>
   printf("Please Enter time in seconds\n");
 8001f28:	4854      	ldr	r0, [pc, #336]	; (800207c <CmdDC2+0x1a8>)
 8001f2a:	f003 ffb3 	bl	8005e94 <puts>
//                 - checkResult value returned 1 if data within range and 0 if data
//                   is out of range.   
//  
uint8_t checkValues(uint32_t Motor_1_Speed, uint32_t Motor_2_Speed){
for (int i =0; i<3; i++){
  if(Motor_1_Speed < 0 || Motor_1_Speed > 100){
 8001f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001f32:	2a64      	cmp	r2, #100	; 0x64
 8001f34:	d84d      	bhi.n	8001fd2 <CmdDC2+0xfe>
    return checkResult = 0;
  }
   else if(Motor_2_Speed < 0 || Motor_2_Speed > 100){
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d84b      	bhi.n	8001fd2 <CmdDC2+0xfe>
   switch (Motor_1_Dir) {
 8001f3a:	9b00      	ldr	r3, [sp, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d063      	beq.n	8002008 <CmdDC2+0x134>
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d06d      	beq.n	8002020 <CmdDC2+0x14c>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d171      	bne.n	800202c <CmdDC2+0x158>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <CmdDC2+0x1ac>)
 8001f4a:	680b      	ldr	r3, [r1, #0]
  TIMx->CCER &= ~tmp;
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f58:	4a4a      	ldr	r2, [pc, #296]	; (8002084 <CmdDC2+0x1b0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10d      	bne.n	8001f7a <CmdDC2+0xa6>
    __HAL_TIM_MOE_DISABLE(htim);
 8001f5e:	6a18      	ldr	r0, [r3, #32]
 8001f60:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f64:	4210      	tst	r0, r2
 8001f66:	d108      	bne.n	8001f7a <CmdDC2+0xa6>
 8001f68:	6a18      	ldr	r0, [r3, #32]
 8001f6a:	f240 4244 	movw	r2, #1092	; 0x444
 8001f6e:	4210      	tst	r0, r2
 8001f70:	bf02      	ittt	eq
 8001f72:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001f74:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8001f78:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001f7a:	6a18      	ldr	r0, [r3, #32]
 8001f7c:	f241 1211 	movw	r2, #4369	; 0x1111
 8001f80:	4210      	tst	r0, r2
 8001f82:	d108      	bne.n	8001f96 <CmdDC2+0xc2>
 8001f84:	6a18      	ldr	r0, [r3, #32]
 8001f86:	f240 4244 	movw	r2, #1092	; 0x444
 8001f8a:	4210      	tst	r0, r2
 8001f8c:	bf02      	ittt	eq
 8001f8e:	681a      	ldreq	r2, [r3, #0]
 8001f90:	f022 0201 	biceq.w	r2, r2, #1
 8001f94:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f96:	2301      	movs	r3, #1
 8001f98:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <CmdDC2+0x1b4>)
 8001f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa8:	619a      	str	r2, [r3, #24]
      oneSecondCount = 0;
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <CmdDC2+0x1b8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	801a      	strh	r2, [r3, #0]
   switch (Motor_2_Dir){
 8001fb0:	9b01      	ldr	r3, [sp, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d03e      	beq.n	8002034 <CmdDC2+0x160>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d047      	beq.n	800204a <CmdDC2+0x176>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d153      	bne.n	8002066 <CmdDC2+0x192>
 8001fbe:	4a32      	ldr	r2, [pc, #200]	; (8002088 <CmdDC2+0x1b4>)
 8001fc0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001fc4:	6191      	str	r1, [r2, #24]
 8001fc6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001fca:	f8c2 1418 	str.w	r1, [r2, #1048]	; 0x418
      oneSecondCount = 0;
 8001fce:	4a2f      	ldr	r2, [pc, #188]	; (800208c <CmdDC2+0x1b8>)
     counterStart = 1;
 8001fd0:	8013      	strh	r3, [r2, #0]
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 8001fd2:	9b02      	ldr	r3, [sp, #8]
 8001fd4:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <CmdDC2+0x1b0>)
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 8001fd6:	2096      	movs	r0, #150	; 0x96
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 8001fd8:	f103 0163 	add.w	r1, r3, #99	; 0x63
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 8001fdc:	4343      	muls	r3, r0
 8001fde:	2064      	movs	r0, #100	; 0x64
 8001fe0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fe4:	3331      	adds	r3, #49	; 0x31
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 8001fe6:	6351      	str	r1, [r2, #52]	; 0x34
   printf("%li",(100 +(Motor_1_Speed))-1);
 8001fe8:	4829      	ldr	r0, [pc, #164]	; (8002090 <CmdDC2+0x1bc>)
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 8001fea:	6393      	str	r3, [r2, #56]	; 0x38
   printf("%li",(100 +(Motor_1_Speed))-1);
 8001fec:	f003 feb6 	bl	8005d5c <iprintf>
 }    
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	b005      	add	sp, #20
 8001ff4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(Motor_1_Speed < 0 || Motor_1_Speed > 100) {
 8001ff8:	9b02      	ldr	r3, [sp, #8]
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d981      	bls.n	8001f02 <CmdDC2+0x2e>
 8001ffe:	e77d      	b.n	8001efc <CmdDC2+0x28>
  else if(Motor_2_Speed < 0 || Motor_2_Speed > 100) {
 8002000:	9b03      	ldr	r3, [sp, #12]
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d98c      	bls.n	8001f20 <CmdDC2+0x4c>
 8002006:	e788      	b.n	8001f1a <CmdDC2+0x46>
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <CmdDC2+0x1b4>)
 800200a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800200e:	6191      	str	r1, [r2, #24]
    GPIOx->BSRR = GPIO_Pin;
 8002010:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002012:	6191      	str	r1, [r2, #24]
     oneSecondCount = 0;
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <CmdDC2+0x1b8>)
 8002016:	2100      	movs	r1, #0
 8002018:	8011      	strh	r1, [r2, #0]
     counterStart = 1;
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <CmdDC2+0x1c0>)
 800201c:	8013      	strh	r3, [r2, #0]
     break;
 800201e:	e7c7      	b.n	8001fb0 <CmdDC2+0xdc>
    GPIOx->BSRR = GPIO_Pin;
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <CmdDC2+0x1b4>)
 8002022:	2301      	movs	r3, #1
 8002024:	6193      	str	r3, [r2, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002026:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800202a:	e7f2      	b.n	8002012 <CmdDC2+0x13e>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 800202c:	4810      	ldr	r0, [pc, #64]	; (8002070 <CmdDC2+0x19c>)
 800202e:	f003 ff31 	bl	8005e94 <puts>
   break;
 8002032:	e7bd      	b.n	8001fb0 <CmdDC2+0xdc>
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <CmdDC2+0x1b4>)
 8002036:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800203a:	6191      	str	r1, [r2, #24]
    GPIOx->BSRR = GPIO_Pin;
 800203c:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
     oneSecondCount = 0;
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <CmdDC2+0x1b8>)
 8002042:	2100      	movs	r1, #0
 8002044:	8011      	strh	r1, [r2, #0]
     counterStart = 1;
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <CmdDC2+0x1c0>)
 8002048:	e7c2      	b.n	8001fd0 <CmdDC2+0xfc>
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <CmdDC2+0x1b4>)
 800204c:	2210      	movs	r2, #16
 800204e:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002050:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002054:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
     oneSecondCount = 0;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <CmdDC2+0x1b8>)
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
     counterStart = 1;
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <CmdDC2+0x1c0>)
 8002060:	2201      	movs	r2, #1
 8002062:	801a      	strh	r2, [r3, #0]
     break;
 8002064:	e7b5      	b.n	8001fd2 <CmdDC2+0xfe>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 8002066:	4802      	ldr	r0, [pc, #8]	; (8002070 <CmdDC2+0x19c>)
 8002068:	f003 ff14 	bl	8005e94 <puts>
   break;
 800206c:	e7b1      	b.n	8001fd2 <CmdDC2+0xfe>
 800206e:	bf00      	nop
 8002070:	080069ae 	.word	0x080069ae
 8002074:	080069e1 	.word	0x080069e1
 8002078:	20000bf8 	.word	0x20000bf8
 800207c:	08006a15 	.word	0x08006a15
 8002080:	20000a7c 	.word	0x20000a7c
 8002084:	40010000 	.word	0x40010000
 8002088:	40020000 	.word	0x40020000
 800208c:	20000bf0 	.word	0x20000bf0
 8002090:	08006a32 	.word	0x08006a32
 8002094:	20000a64 	.word	0x20000a64

08002098 <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 8002098:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800209c:	4604      	mov	r4, r0
 800209e:	b9f0      	cbnz	r0, 80020de <CmdR+0x46>

  fetch_uint32_arg(&addr);
 80020a0:	a801      	add	r0, sp, #4
 80020a2:	f7ff fecd 	bl	8001e40 <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 80020a6:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80020a8:	4812      	ldr	r0, [pc, #72]	; (80020f4 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 80020aa:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 80020ac:	4e12      	ldr	r6, [pc, #72]	; (80020f8 <CmdR+0x60>)
 80020ae:	4f13      	ldr	r7, [pc, #76]	; (80020fc <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80020b0:	462a      	mov	r2, r5
 80020b2:	f003 fe53 	bl	8005d5c <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <CmdR+0x68>)
 80020b8:	f003 fe50 	bl	8005d5c <iprintf>
    printf("%s%c",
 80020bc:	4911      	ldr	r1, [pc, #68]	; (8002104 <CmdR+0x6c>)
 80020be:	4688      	mov	r8, r1
 80020c0:	2d00      	cmp	r5, #0
 80020c2:	bfb4      	ite	lt
 80020c4:	2231      	movlt	r2, #49	; 0x31
 80020c6:	2230      	movge	r2, #48	; 0x30
 80020c8:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 80020ca:	3401      	adds	r4, #1
    printf("%s%c",
 80020cc:	f003 fe46 	bl	8005d5c <iprintf>
  for(i=0; i<32; i++) {
 80020d0:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 80020d2:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 80020d6:	d106      	bne.n	80020e6 <CmdR+0x4e>
  }
  printf("\n");
 80020d8:	200a      	movs	r0, #10
 80020da:	f003 fe57 	bl	8005d8c <putchar>
  return CmdReturnOk;
}
 80020de:	2000      	movs	r0, #0
 80020e0:	b002      	add	sp, #8
 80020e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 80020e6:	f014 0f03 	tst.w	r4, #3
 80020ea:	bf14      	ite	ne
 80020ec:	4639      	movne	r1, r7
 80020ee:	4641      	moveq	r1, r8
 80020f0:	e7e6      	b.n	80020c0 <CmdR+0x28>
 80020f2:	bf00      	nop
 80020f4:	08006a36 	.word	0x08006a36
 80020f8:	08006af0 	.word	0x08006af0
 80020fc:	08008ec8 	.word	0x08008ec8
 8002100:	08006a48 	.word	0x08006a48
 8002104:	08008e6c 	.word	0x08008e6c

08002108 <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 8002108:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800210a:	b940      	cbnz	r0, 800211e <CmdW+0x16>

  fetch_uint32_arg(&addr);
 800210c:	4668      	mov	r0, sp
 800210e:	f7ff fe97 	bl	8001e40 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8002112:	a801      	add	r0, sp, #4
 8002114:	f7ff fe94 	bl	8001e40 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8002118:	e9dd 3200 	ldrd	r3, r2, [sp]
 800211c:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 800211e:	2000      	movs	r0, #0
 8002120:	b003      	add	sp, #12
 8002122:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002128 <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 8002128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800212c:	2801      	cmp	r0, #1
{
 800212e:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8002130:	d00b      	beq.n	800214a <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 8002132:	2802      	cmp	r0, #2
 8002134:	4f31      	ldr	r7, [pc, #196]	; (80021fc <CmdDump+0xd4>)
 8002136:	4e32      	ldr	r6, [pc, #200]	; (8002200 <CmdDump+0xd8>)
 8002138:	d10b      	bne.n	8002152 <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 800213a:	4832      	ldr	r0, [pc, #200]	; (8002204 <CmdDump+0xdc>)
 800213c:	f003 feaa 	bl	8005e94 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	6831      	ldr	r1, [r6, #0]
 8002144:	4830      	ldr	r0, [pc, #192]	; (8002208 <CmdDump+0xe0>)
 8002146:	f003 fe09 	bl	8005d5c <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 800214a:	2000      	movs	r0, #0
 800214c:	b00b      	add	sp, #44	; 0x2c
 800214e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 8002152:	4630      	mov	r0, r6
 8002154:	f7ff fe74 	bl	8001e40 <fetch_uint32_arg>
  if(rc == 0) {
 8002158:	b910      	cbnz	r0, 8002160 <CmdDump+0x38>
    fetch_uint32_arg(&count);
 800215a:	4638      	mov	r0, r7
 800215c:	f7ff fe70 	bl	8001e40 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8002160:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 8002162:	2c00      	cmp	r4, #0
 8002164:	d043      	beq.n	80021ee <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 8002166:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 8002168:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002218 <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 800216c:	9301      	str	r3, [sp, #4]
  bufp = buf;
 800216e:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 8002172:	2500      	movs	r5, #0
 8002174:	46c8      	mov	r8, r9
 8002176:	9b01      	ldr	r3, [sp, #4]
 8002178:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 800217a:	f015 030f 	ands.w	r3, r5, #15
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	d13a      	bne.n	80021f8 <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 8002182:	4822      	ldr	r0, [pc, #136]	; (800220c <CmdDump+0xe4>)
 8002184:	9103      	str	r1, [sp, #12]
 8002186:	f003 fde9 	bl	8005d5c <iprintf>
      bufp = buf;
 800218a:	9903      	ldr	r1, [sp, #12]
 800218c:	46c3      	mov	fp, r8
    c = *p++;
 800218e:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <CmdDump+0xe8>)
 8002192:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8002196:	46d9      	mov	r9, fp
      *bufp++ = '.';
 8002198:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 800219c:	4601      	mov	r1, r0
      *bufp++ = '.';
 800219e:	bf08      	it	eq
 80021a0:	202e      	moveq	r0, #46	; 0x2e
 80021a2:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 80021a6:	4650      	mov	r0, sl
 80021a8:	f003 fdd8 	bl	8005d5c <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 80021ac:	9b02      	ldr	r3, [sp, #8]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	d106      	bne.n	80021c0 <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 80021b2:	2100      	movs	r1, #0
 80021b4:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 80021b8:	4816      	ldr	r0, [pc, #88]	; (8002214 <CmdDump+0xec>)
 80021ba:	4641      	mov	r1, r8
 80021bc:	f003 fdce 	bl	8005d5c <iprintf>
  for(i=0; i<count; i++) {
 80021c0:	3501      	adds	r5, #1
 80021c2:	42ac      	cmp	r4, r5
 80021c4:	d1d7      	bne.n	8002176 <CmdDump+0x4e>
  *bufp='\0';
 80021c6:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 80021c8:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80021cc:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 80021d0:	d00d      	beq.n	80021ee <CmdDump+0xc6>
      printf("   ");
 80021d2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800221c <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80021d6:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 80021da:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80021dc:	3501      	adds	r5, #1
      printf("   ");
 80021de:	f003 fdbd 	bl	8005d5c <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80021e2:	42a5      	cmp	r5, r4
 80021e4:	d3f9      	bcc.n	80021da <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 80021e6:	480b      	ldr	r0, [pc, #44]	; (8002214 <CmdDump+0xec>)
 80021e8:	4641      	mov	r1, r8
 80021ea:	f003 fdb7 	bl	8005d5c <iprintf>
  address = address+count;
 80021ee:	6833      	ldr	r3, [r6, #0]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 80021f6:	e7a8      	b.n	800214a <CmdDump+0x22>
 80021f8:	46cb      	mov	fp, r9
 80021fa:	e7c8      	b.n	800218e <CmdDump+0x66>
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	20000a44 	.word	0x20000a44
 8002204:	08006af5 	.word	0x08006af5
 8002208:	08006c8d 	.word	0x08006c8d
 800220c:	08006cbf 	.word	0x08006cbf
 8002210:	08012402 	.word	0x08012402
 8002214:	08006ccc 	.word	0x08006ccc
 8002218:	08006cc6 	.word	0x08006cc6
 800221c:	08006aec 	.word	0x08006aec

08002220 <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 8002220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002222:	4604      	mov	r4, r0
 8002224:	bb50      	cbnz	r0, 800227c <CmdSend+0x5c>

  index = 0;
 8002226:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 8002228:	a803      	add	r0, sp, #12
 800222a:	f7ff fe09 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 800222e:	4602      	mov	r2, r0
 8002230:	b130      	cbz	r0, 8002240 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <CmdSend+0x60>)
 8002234:	4621      	mov	r1, r4
 8002236:	f003 fd91 	bl	8005d5c <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 800223a:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 800223c:	b004      	add	sp, #16
 800223e:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002240:	9c03      	ldr	r4, [sp, #12]
 8002242:	b124      	cbz	r4, 800224e <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002244:	4621      	mov	r1, r4
 8002246:	480f      	ldr	r0, [pc, #60]	; (8002284 <CmdSend+0x64>)
 8002248:	f003 fd88 	bl	8005d5c <iprintf>
 800224c:	e7f5      	b.n	800223a <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <CmdSend+0x68>)
 8002250:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 8002252:	9101      	str	r1, [sp, #4]
 8002254:	4608      	mov	r0, r1
 8002256:	f7fd ffdd 	bl	8000214 <strlen>
  if(len==0) {
 800225a:	9901      	ldr	r1, [sp, #4]
 800225c:	4602      	mov	r2, r0
 800225e:	b920      	cbnz	r0, 800226a <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <CmdSend+0x6c>)
 8002262:	f003 fe17 	bl	8005e94 <puts>
    return CmdReturnBadParameter2;
 8002266:	2005      	movs	r0, #5
 8002268:	e7e8      	b.n	800223c <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff f8bc 	bl	80013e8 <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <CmdSend+0x70>)
 8002272:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002276:	2202      	movs	r2, #2
 8002278:	f7ff f8b6 	bl	80013e8 <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800227c:	2000      	movs	r0, #0
 800227e:	e7dd      	b.n	800223c <CmdSend+0x1c>
 8002280:	08006cd4 	.word	0x08006cd4
 8002284:	08006d02 	.word	0x08006d02
 8002288:	20000a5c 	.word	0x20000a5c
 800228c:	08006d38 	.word	0x08006d38
 8002290:	080072c6 	.word	0x080072c6

08002294 <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 8002294:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002296:	4604      	mov	r4, r0
 8002298:	bb18      	cbnz	r0, 80022e2 <CmdReceive+0x4e>

  index = 0;
 800229a:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 800229c:	a801      	add	r0, sp, #4
 800229e:	f7ff fdcf 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 80022a2:	4602      	mov	r2, r0
 80022a4:	b130      	cbz	r0, 80022b4 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80022a6:	4810      	ldr	r0, [pc, #64]	; (80022e8 <CmdReceive+0x54>)
 80022a8:	4621      	mov	r1, r4
 80022aa:	f003 fd57 	bl	8005d5c <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 80022ae:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 80022b0:	b002      	add	sp, #8
 80022b2:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80022b4:	9901      	ldr	r1, [sp, #4]
 80022b6:	b119      	cbz	r1, 80022c0 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <CmdReceive+0x58>)
 80022ba:	f003 fd4f 	bl	8005d5c <iprintf>
 80022be:	e7f6      	b.n	80022ae <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 80022c0:	480b      	ldr	r0, [pc, #44]	; (80022f0 <CmdReceive+0x5c>)
 80022c2:	f003 fd4b 	bl	8005d5c <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 80022c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f10d 0103 	add.w	r1, sp, #3
 80022d0:	f7fe fe14 	bl	8000efc <TerminalRead>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d0eb      	beq.n	80022b0 <CmdReceive+0x1c>
    printf("%c",c);
 80022d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80022dc:	f003 fd56 	bl	8005d8c <putchar>
 80022e0:	e7f1      	b.n	80022c6 <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80022e2:	2000      	movs	r0, #0
 80022e4:	e7e4      	b.n	80022b0 <CmdReceive+0x1c>
 80022e6:	bf00      	nop
 80022e8:	08006cd4 	.word	0x08006cd4
 80022ec:	08006d02 	.word	0x08006d02
 80022f0:	08006d62 	.word	0x08006d62

080022f4 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 80022f4:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80022f6:	4604      	mov	r4, r0
 80022f8:	b9b0      	cbnz	r0, 8002328 <CmdTransparent+0x34>

  index = 0;
 80022fa:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 80022fc:	a801      	add	r0, sp, #4
 80022fe:	f7ff fd9f 	bl	8001e40 <fetch_uint32_arg>
  if(rc) {
 8002302:	4602      	mov	r2, r0
 8002304:	b130      	cbz	r0, 8002314 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <CmdTransparent+0x38>)
 8002308:	4621      	mov	r1, r4
 800230a:	f003 fd27 	bl	8005d5c <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 800230e:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8002310:	b002      	add	sp, #8
 8002312:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002314:	9901      	ldr	r1, [sp, #4]
 8002316:	b119      	cbz	r1, 8002320 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <CmdTransparent+0x3c>)
 800231a:	f003 fd1f 	bl	8005d5c <iprintf>
    return CmdReturnBadParameter1;
 800231e:	e7f6      	b.n	800230e <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <CmdTransparent+0x40>)
 8002322:	f003 fdb7 	bl	8005e94 <puts>
 8002326:	e7f2      	b.n	800230e <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002328:	2000      	movs	r0, #0
 800232a:	e7f1      	b.n	8002310 <CmdTransparent+0x1c>
 800232c:	08006cd4 	.word	0x08006cd4
 8002330:	08006d02 	.word	0x08006d02
 8002334:	08006d7d 	.word	0x08006d7d

08002338 <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 8002338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 800233c:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 800233e:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 8002340:	d132      	bne.n	80023a8 <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 8002342:	f7ff fc63 	bl	8001c0c <fetch_string_arg>
    if(rc) {
 8002346:	b160      	cbz	r0, 8002362 <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002348:	488b      	ldr	r0, [pc, #556]	; (8002578 <CmdDecode+0x240>)
 800234a:	f003 fda3 	bl	8005e94 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800234e:	f7ff fc31 	bl	8001bb4 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 8002352:	488a      	ldr	r0, [pc, #552]	; (800257c <CmdDecode+0x244>)
 8002354:	f003 fd9e 	bl	8005e94 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 8002358:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 800235a:	4620      	mov	r0, r4
 800235c:	b004      	add	sp, #16
 800235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8002362:	4d87      	ldr	r5, [pc, #540]	; (8002580 <CmdDecode+0x248>)
 8002364:	e008      	b.n	8002378 <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002366:	9c03      	ldr	r4, [sp, #12]
 8002368:	f7fe fdee 	bl	8000f48 <Uncompress>
 800236c:	4601      	mov	r1, r0
 800236e:	4620      	mov	r0, r4
 8002370:	f003 fd98 	bl	8005ea4 <strcasecmp>
 8002374:	b118      	cbz	r0, 800237e <CmdDecode+0x46>
	p++;
 8002376:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002378:	6828      	ldr	r0, [r5, #0]
 800237a:	2800      	cmp	r0, #0
 800237c:	d1f3      	bne.n	8002366 <CmdDecode+0x2e>
      if(p->name == NULL) {
 800237e:	682c      	ldr	r4, [r5, #0]
 8002380:	b934      	cbnz	r4, 8002390 <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 8002382:	9903      	ldr	r1, [sp, #12]
 8002384:	487f      	ldr	r0, [pc, #508]	; (8002584 <CmdDecode+0x24c>)
 8002386:	f003 fce9 	bl	8005d5c <iprintf>
	DecodePrintPeripherals(Peripherals);
 800238a:	f7ff fc13 	bl	8001bb4 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 800238e:	e7e4      	b.n	800235a <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 8002390:	4620      	mov	r0, r4
 8002392:	f7fe fdd9 	bl	8000f48 <Uncompress>
 8002396:	4601      	mov	r1, r0
 8002398:	487b      	ldr	r0, [pc, #492]	; (8002588 <CmdDecode+0x250>)
 800239a:	f003 fcdf 	bl	8005d5c <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 800239e:	89a9      	ldrh	r1, [r5, #12]
 80023a0:	68a8      	ldr	r0, [r5, #8]
 80023a2:	f7ff fbd7 	bl	8001b54 <DecodePrintRegisters>
    printf("\n\n");
 80023a6:	e007      	b.n	80023b8 <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 80023a8:	f7ff fc30 	bl	8001c0c <fetch_string_arg>
  if(rc) {
 80023ac:	b178      	cbz	r0, 80023ce <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 80023ae:	4877      	ldr	r0, [pc, #476]	; (800258c <CmdDecode+0x254>)
 80023b0:	f003 fd70 	bl	8005e94 <puts>
    DecodePrintPeripherals(Peripherals);
 80023b4:	f7ff fbfe 	bl	8001bb4 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 80023b8:	4875      	ldr	r0, [pc, #468]	; (8002590 <CmdDecode+0x258>)
 80023ba:	e7cb      	b.n	8002354 <CmdDecode+0x1c>
    p++;
 80023bc:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80023be:	6828      	ldr	r0, [r5, #0]
 80023c0:	9c03      	ldr	r4, [sp, #12]
 80023c2:	b930      	cbnz	r0, 80023d2 <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 80023c4:	9903      	ldr	r1, [sp, #12]
 80023c6:	4873      	ldr	r0, [pc, #460]	; (8002594 <CmdDecode+0x25c>)
 80023c8:	f003 fcc8 	bl	8005d5c <iprintf>
    DecodePrintPeripherals(Peripherals);
 80023cc:	e7f2      	b.n	80023b4 <CmdDecode+0x7c>
  p = Peripherals;
 80023ce:	4d6c      	ldr	r5, [pc, #432]	; (8002580 <CmdDecode+0x248>)
 80023d0:	e7f5      	b.n	80023be <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80023d2:	f7fe fdb9 	bl	8000f48 <Uncompress>
 80023d6:	4601      	mov	r1, r0
 80023d8:	4620      	mov	r0, r4
 80023da:	f003 fd63 	bl	8005ea4 <strcasecmp>
 80023de:	4604      	mov	r4, r0
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d1eb      	bne.n	80023bc <CmdDecode+0x84>
  if(p->name == NULL) {
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0ec      	beq.n	80023c4 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 80023ea:	a802      	add	r0, sp, #8
 80023ec:	f7ff fc0e 	bl	8001c0c <fetch_string_arg>
  if(rc) {
 80023f0:	b120      	cbz	r0, 80023fc <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 80023f2:	4621      	mov	r1, r4
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7ff fb85 	bl	8001b04 <DecodePeripheral>
    return CmdReturnOk;
 80023fa:	e7ae      	b.n	800235a <CmdDecode+0x22>
  r = p->registers;
 80023fc:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 80023fe:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8002400:	9c02      	ldr	r4, [sp, #8]
 8002402:	2f00      	cmp	r7, #0
 8002404:	f000 80a8 	beq.w	8002558 <CmdDecode+0x220>
 8002408:	6830      	ldr	r0, [r6, #0]
 800240a:	f7fe fd9d 	bl	8000f48 <Uncompress>
 800240e:	4601      	mov	r1, r0
 8002410:	4620      	mov	r0, r4
 8002412:	f003 fd47 	bl	8005ea4 <strcasecmp>
 8002416:	3f01      	subs	r7, #1
 8002418:	4604      	mov	r4, r0
 800241a:	b958      	cbnz	r0, 8002434 <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 800241c:	a801      	add	r0, sp, #4
 800241e:	f7ff fbf5 	bl	8001c0c <fetch_string_arg>
  if(rc == 0) {
 8002422:	b170      	cbz	r0, 8002442 <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 8002424:	4631      	mov	r1, r6
 8002426:	4628      	mov	r0, r5
 8002428:	f7ff f864 	bl	80014f4 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 800242c:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 800242e:	4602      	mov	r2, r0
 8002430:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 8002432:	e017      	b.n	8002464 <CmdDecode+0x12c>
    r++;
 8002434:	3610      	adds	r6, #16
 8002436:	e7e3      	b.n	8002400 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8002438:	2101      	movs	r1, #1
 800243a:	4628      	mov	r0, r5
 800243c:	f7ff fb62 	bl	8001b04 <DecodePeripheral>
      return CmdReturnOk;
 8002440:	e78a      	b.n	8002358 <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 8002442:	4955      	ldr	r1, [pc, #340]	; (8002598 <CmdDecode+0x260>)
 8002444:	9801      	ldr	r0, [sp, #4]
 8002446:	f003 fd2d 	bl	8005ea4 <strcasecmp>
 800244a:	b980      	cbnz	r0, 800246e <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 800244c:	4668      	mov	r0, sp
 800244e:	f7ff fcf7 	bl	8001e40 <fetch_uint32_arg>
      if(rc) {
 8002452:	4604      	mov	r4, r0
 8002454:	b120      	cbz	r0, 8002460 <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 8002456:	4851      	ldr	r0, [pc, #324]	; (800259c <CmdDecode+0x264>)
 8002458:	f003 fd1c 	bl	8005e94 <puts>
	return CmdReturnBadParameter4;
 800245c:	2407      	movs	r4, #7
 800245e:	e77c      	b.n	800235a <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 8002460:	9a00      	ldr	r2, [sp, #0]
 8002462:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8002464:	6869      	ldr	r1, [r5, #4]
 8002466:	4630      	mov	r0, r6
 8002468:	f7ff faf0 	bl	8001a4c <DecodeRegister>
  return CmdReturnOk;
 800246c:	e775      	b.n	800235a <CmdDecode+0x22>
    f = r->fields;
 800246e:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8002470:	b15f      	cbz	r7, 800248a <CmdDecode+0x152>
	  && (f->name != NULL)
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	b148      	cbz	r0, 800248a <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 8002476:	9c01      	ldr	r4, [sp, #4]
 8002478:	f7fe fd66 	bl	8000f48 <Uncompress>
 800247c:	4601      	mov	r1, r0
 800247e:	4620      	mov	r0, r4
 8002480:	f003 fd10 	bl	8005ea4 <strcasecmp>
 8002484:	b998      	cbnz	r0, 80024ae <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b99b      	cbnz	r3, 80024b2 <CmdDecode+0x17a>
    errno = 0;
 800248a:	f000 fdf1 	bl	8003070 <__errno>
 800248e:	2700      	movs	r7, #0
 8002490:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002492:	463a      	mov	r2, r7
 8002494:	4639      	mov	r1, r7
 8002496:	9801      	ldr	r0, [sp, #4]
 8002498:	f001 fc1a 	bl	8003cd0 <strtoul>
 800249c:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 800249e:	f000 fde7 	bl	8003070 <__errno>
 80024a2:	6804      	ldr	r4, [r0, #0]
 80024a4:	2c00      	cmp	r4, #0
 80024a6:	d042      	beq.n	800252e <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 80024a8:	9901      	ldr	r1, [sp, #4]
 80024aa:	483d      	ldr	r0, [pc, #244]	; (80025a0 <CmdDecode+0x268>)
 80024ac:	e00b      	b.n	80024c6 <CmdDecode+0x18e>
      f++;
 80024ae:	3708      	adds	r7, #8
 80024b0:	e7de      	b.n	8002470 <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 80024b2:	4668      	mov	r0, sp
 80024b4:	f7ff fcc4 	bl	8001e40 <fetch_uint32_arg>
      if(rc) {
 80024b8:	4604      	mov	r4, r0
 80024ba:	b138      	cbz	r0, 80024cc <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 80024bc:	6830      	ldr	r0, [r6, #0]
 80024be:	f7fe fd43 	bl	8000f48 <Uncompress>
 80024c2:	4601      	mov	r1, r0
 80024c4:	4837      	ldr	r0, [pc, #220]	; (80025a4 <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 80024c6:	f003 fc49 	bl	8005d5c <iprintf>
      return CmdReturnOk;
 80024ca:	e745      	b.n	8002358 <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 80024cc:	4631      	mov	r1, r6
 80024ce:	4628      	mov	r0, r5
 80024d0:	f7ff f810 	bl	80014f4 <DecodeReadRegister>
      m = (1<<f->width)-1;
 80024d4:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 80024d6:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 80024d8:	2301      	movs	r3, #1
 80024da:	4093      	lsls	r3, r2
 80024dc:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 80024de:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 80024e2:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 80024e6:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 80024ea:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 80024ec:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 80024f0:	4003      	ands	r3, r0
 80024f2:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 80024f4:	431a      	orrs	r2, r3
 80024f6:	4631      	mov	r1, r6
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7ff f835 	bl	8001568 <DecodeWriteRegister.isra.0>
      printf("%s.",
 80024fe:	6828      	ldr	r0, [r5, #0]
 8002500:	f7fe fd22 	bl	8000f48 <Uncompress>
 8002504:	4601      	mov	r1, r0
 8002506:	4828      	ldr	r0, [pc, #160]	; (80025a8 <CmdDecode+0x270>)
 8002508:	f003 fc28 	bl	8005d5c <iprintf>
      printf("%s.",
 800250c:	6830      	ldr	r0, [r6, #0]
 800250e:	f7fe fd1b 	bl	8000f48 <Uncompress>
 8002512:	4601      	mov	r1, r0
 8002514:	4824      	ldr	r0, [pc, #144]	; (80025a8 <CmdDecode+0x270>)
 8002516:	f003 fc21 	bl	8005d5c <iprintf>
      printf("%s (%d) -> (%d)\n",
 800251a:	6838      	ldr	r0, [r7, #0]
 800251c:	f7fe fd14 	bl	8000f48 <Uncompress>
 8002520:	9b00      	ldr	r3, [sp, #0]
 8002522:	4601      	mov	r1, r0
 8002524:	4642      	mov	r2, r8
 8002526:	4821      	ldr	r0, [pc, #132]	; (80025ac <CmdDecode+0x274>)
 8002528:	f003 fc18 	bl	8005d5c <iprintf>
      return CmdReturnOk;
 800252c:	e715      	b.n	800235a <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 800252e:	9a00      	ldr	r2, [sp, #0]
 8002530:	4631      	mov	r1, r6
 8002532:	4628      	mov	r0, r5
 8002534:	f7ff f818 	bl	8001568 <DecodeWriteRegister.isra.0>
    printf("%s.",
 8002538:	6828      	ldr	r0, [r5, #0]
 800253a:	f7fe fd05 	bl	8000f48 <Uncompress>
 800253e:	4601      	mov	r1, r0
 8002540:	4819      	ldr	r0, [pc, #100]	; (80025a8 <CmdDecode+0x270>)
 8002542:	f003 fc0b 	bl	8005d5c <iprintf>
    printf("%s = 0x%08x\n",
 8002546:	6830      	ldr	r0, [r6, #0]
 8002548:	f7fe fcfe 	bl	8000f48 <Uncompress>
 800254c:	9a00      	ldr	r2, [sp, #0]
 800254e:	4601      	mov	r1, r0
 8002550:	4817      	ldr	r0, [pc, #92]	; (80025b0 <CmdDecode+0x278>)
 8002552:	f003 fc03 	bl	8005d5c <iprintf>
    return CmdReturnOk;
 8002556:	e700      	b.n	800235a <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 8002558:	4916      	ldr	r1, [pc, #88]	; (80025b4 <CmdDecode+0x27c>)
 800255a:	4620      	mov	r0, r4
 800255c:	f003 fca2 	bl	8005ea4 <strcasecmp>
 8002560:	2800      	cmp	r0, #0
 8002562:	f43f af69 	beq.w	8002438 <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002566:	6828      	ldr	r0, [r5, #0]
 8002568:	f7fe fcee 	bl	8000f48 <Uncompress>
 800256c:	4621      	mov	r1, r4
 800256e:	4602      	mov	r2, r0
 8002570:	4811      	ldr	r0, [pc, #68]	; (80025b8 <CmdDecode+0x280>)
 8002572:	f003 fbf3 	bl	8005d5c <iprintf>
 8002576:	e712      	b.n	800239e <CmdDecode+0x66>
 8002578:	08006da2 	.word	0x08006da2
 800257c:	08006fb5 	.word	0x08006fb5
 8002580:	0800edc0 	.word	0x0800edc0
 8002584:	0800700a 	.word	0x0800700a
 8002588:	08007045 	.word	0x08007045
 800258c:	0800706a 	.word	0x0800706a
 8002590:	080070d3 	.word	0x080070d3
 8002594:	08007099 	.word	0x08007099
 8002598:	08007112 	.word	0x08007112
 800259c:	08007116 	.word	0x08007116
 80025a0:	08007175 	.word	0x08007175
 80025a4:	08007135 	.word	0x08007135
 80025a8:	08007160 	.word	0x08007160
 80025ac:	08007164 	.word	0x08007164
 80025b0:	08007193 	.word	0x08007193
 80025b4:	080071a0 	.word	0x080071a0
 80025b8:	080070d5 	.word	0x080070d5

080025bc <PolledPrintf>:
{
 80025bc:	b40f      	push	{r0, r1, r2, r3}
 80025be:	b500      	push	{lr}
 80025c0:	b097      	sub	sp, #92	; 0x5c
 80025c2:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 80025c4:	2150      	movs	r1, #80	; 0x50
{
 80025c6:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 80025ca:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 80025cc:	a802      	add	r0, sp, #8
 80025ce:	f003 fcb7 	bl	8005f40 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <PolledPrintf+0x38>)
  while(len) {
 80025d4:	ab02      	add	r3, sp, #8
 80025d6:	b928      	cbnz	r0, 80025e4 <PolledPrintf+0x28>
}
 80025d8:	b017      	add	sp, #92	; 0x5c
 80025da:	f85d eb04 	ldr.w	lr, [sp], #4
 80025de:	b004      	add	sp, #16
 80025e0:	4770      	bx	lr
      asm volatile ("nop");
 80025e2:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	0609      	lsls	r1, r1, #24
 80025e8:	d5fb      	bpl.n	80025e2 <PolledPrintf+0x26>
    uart->DR = *p;
 80025ea:	f813 1b01 	ldrb.w	r1, [r3], #1
 80025ee:	6051      	str	r1, [r2, #4]
    len--;
 80025f0:	3801      	subs	r0, #1
 80025f2:	e7f0      	b.n	80025d6 <PolledPrintf+0x1a>
 80025f4:	40004400 	.word	0x40004400

080025f8 <CmdStats>:
{
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80025fc:	4601      	mov	r1, r0
{
 80025fe:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002600:	bb10      	cbnz	r0, 8002648 <CmdStats+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002602:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 8002604:	4812      	ldr	r0, [pc, #72]	; (8002650 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002606:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8002608:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 800260c:	930b      	str	r3, [sp, #44]	; 0x2c
 800260e:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 8002612:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 800261c:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 800261e:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002622:	f000 fd4f 	bl	80030c4 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8002626:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 8002628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <CmdStats+0x5c>)
 800262c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800262e:	480a      	ldr	r0, [pc, #40]	; (8002658 <CmdStats+0x60>)
 8002630:	9400      	str	r4, [sp, #0]
 8002632:	e9cd b307 	strd	fp, r3, [sp, #28]
 8002636:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 800263a:	e9cd 7803 	strd	r7, r8, [sp, #12]
 800263e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <CmdStats+0x64>)
 8002644:	f003 fb8a 	bl	8005d5c <iprintf>
}
 8002648:	2000      	movs	r0, #0
 800264a:	b00d      	add	sp, #52	; 0x34
 800264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002650:	20000210 	.word	0x20000210
 8002654:	080071ad 	.word	0x080071ad
 8002658:	080071b5 	.word	0x080071b5
 800265c:	080071a5 	.word	0x080071a5

08002660 <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <USR_LED_Toggle+0x10>)
 8002662:	6813      	ldr	r3, [r2, #0]
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000020c 	.word	0x2000020c

08002674 <TIM1_TRG_COM_TIM11_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	4a39      	ldr	r2, [pc, #228]	; (800275c <TIM1_TRG_COM_TIM11_IRQHandler+0xe8>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	0789      	lsls	r1, r1, #30
 800267c:	d508      	bpl.n	8002690 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	0788      	lsls	r0, r1, #30
 8002682:	d505      	bpl.n	8002690 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002684:	f06f 0102 	mvn.w	r1, #2
 8002688:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800268a:	6999      	ldr	r1, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268c:	2100      	movs	r1, #0
 800268e:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002690:	6919      	ldr	r1, [r3, #16]
 8002692:	0749      	lsls	r1, r1, #29
 8002694:	d508      	bpl.n	80026a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	0748      	lsls	r0, r1, #29
 800269a:	d505      	bpl.n	80026a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800269c:	f06f 0104 	mvn.w	r1, #4
 80026a0:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a2:	6999      	ldr	r1, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a4:	2100      	movs	r1, #0
 80026a6:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	0709      	lsls	r1, r1, #28
 80026ac:	d508      	bpl.n	80026c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	0708      	lsls	r0, r1, #28
 80026b2:	d505      	bpl.n	80026c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b4:	f06f 0108 	mvn.w	r1, #8
 80026b8:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ba:	69d9      	ldr	r1, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026bc:	2100      	movs	r1, #0
 80026be:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	06c9      	lsls	r1, r1, #27
 80026c4:	d508      	bpl.n	80026d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026c6:	68d9      	ldr	r1, [r3, #12]
 80026c8:	06c8      	lsls	r0, r1, #27
 80026ca:	d505      	bpl.n	80026d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026cc:	f06f 0110 	mvn.w	r1, #16
 80026d0:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d2:	69d9      	ldr	r1, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d4:	2100      	movs	r1, #0
 80026d6:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	07d1      	lsls	r1, r2, #31
 80026dc:	d522      	bpl.n	8002724 <TIM1_TRG_COM_TIM11_IRQHandler+0xb0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	07d2      	lsls	r2, r2, #31
 80026e2:	d51f      	bpl.n	8002724 <TIM1_TRG_COM_TIM11_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e4:	f06f 0201 	mvn.w	r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
   if(htim->Instance == TIM11){  
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <TIM1_TRG_COM_TIM11_IRQHandler+0xec>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d119      	bne.n	8002724 <TIM1_TRG_COM_TIM11_IRQHandler+0xb0>
     if(counterStart == 1){
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <TIM1_TRG_COM_TIM11_IRQHandler+0xf0>)
 80026f2:	491d      	ldr	r1, [pc, #116]	; (8002768 <TIM1_TRG_COM_TIM11_IRQHandler+0xf4>)
 80026f4:	8812      	ldrh	r2, [r2, #0]
     if (oneSecondCount == setTime){
 80026f6:	481d      	ldr	r0, [pc, #116]	; (800276c <TIM1_TRG_COM_TIM11_IRQHandler+0xf8>)
     if(counterStart == 1){
 80026f8:	b292      	uxth	r2, r2
 80026fa:	2a01      	cmp	r2, #1
       ++oneSecondCount;
 80026fc:	bf08      	it	eq
 80026fe:	880a      	ldrheq	r2, [r1, #0]
     if (oneSecondCount == setTime){
 8002700:	6800      	ldr	r0, [r0, #0]
       ++oneSecondCount;
 8002702:	bf02      	ittt	eq
 8002704:	3201      	addeq	r2, #1
 8002706:	b292      	uxtheq	r2, r2
 8002708:	800a      	strheq	r2, [r1, #0]
     if (oneSecondCount == setTime){
 800270a:	880a      	ldrh	r2, [r1, #0]
 800270c:	b292      	uxth	r2, r2
 800270e:	4282      	cmp	r2, r0
 8002710:	d108      	bne.n	8002724 <TIM1_TRG_COM_TIM11_IRQHandler+0xb0>
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <TIM1_TRG_COM_TIM11_IRQHandler+0xfc>)
 8002714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002718:	6190      	str	r0, [r2, #24]
 800271a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800271e:	6190      	str	r0, [r2, #24]
      oneSecondCount =0;
 8002720:	2200      	movs	r2, #0
 8002722:	800a      	strh	r2, [r1, #0]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	0610      	lsls	r0, r2, #24
 8002728:	d505      	bpl.n	8002736 <TIM1_TRG_COM_TIM11_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	0611      	lsls	r1, r2, #24
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272e:	bf44      	itt	mi
 8002730:	f06f 0280 	mvnmi.w	r2, #128	; 0x80
 8002734:	611a      	strmi	r2, [r3, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	0652      	lsls	r2, r2, #25
 800273a:	d505      	bpl.n	8002748 <TIM1_TRG_COM_TIM11_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	0650      	lsls	r0, r2, #25
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002740:	bf44      	itt	mi
 8002742:	f06f 0240 	mvnmi.w	r2, #64	; 0x40
 8002746:	611a      	strmi	r2, [r3, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	0691      	lsls	r1, r2, #26
 800274c:	d505      	bpl.n	800275a <TIM1_TRG_COM_TIM11_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	0692      	lsls	r2, r2, #26
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002752:	bf44      	itt	mi
 8002754:	f06f 0220 	mvnmi.w	r2, #32
 8002758:	611a      	strmi	r2, [r3, #16]
}
 800275a:	4770      	bx	lr
 800275c:	20000ac4 	.word	0x20000ac4
 8002760:	40014800 	.word	0x40014800
 8002764:	20000a64 	.word	0x20000a64
 8002768:	20000bf0 	.word	0x20000bf0
 800276c:	20000bf8 	.word	0x20000bf8
 8002770:	40020000 	.word	0x40020000

08002774 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8002774:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <_sbrk_r+0x28>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	b90a      	cbnz	r2, 8002780 <_sbrk_r+0xc>
    heap_end = &end;
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <_sbrk_r+0x2c>)
 800277e:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8002780:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 8002782:	466a      	mov	r2, sp
 8002784:	4401      	add	r1, r0
 8002786:	4291      	cmp	r1, r2
 8002788:	d906      	bls.n	8002798 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 800278a:	f000 fc71 	bl	8003070 <__errno>
 800278e:	230c      	movs	r3, #12
 8002790:	6003      	str	r3, [r0, #0]
 8002792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8002796:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8002798:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 800279a:	e7fc      	b.n	8002796 <_sbrk_r+0x22>
 800279c:	20000a6c 	.word	0x20000a6c
 80027a0:	20000c10 	.word	0x20000c10

080027a4 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 80027a4:	2000      	movs	r0, #0
 80027a6:	4770      	bx	lr

080027a8 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 80027a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ac:	6053      	str	r3, [r2, #4]
   return 0;
}
 80027ae:	2000      	movs	r0, #0
 80027b0:	4770      	bx	lr

080027b2 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 80027b2:	2001      	movs	r0, #1
 80027b4:	4770      	bx	lr

080027b6 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 80027b6:	2000      	movs	r0, #0
 80027b8:	4770      	bx	lr

080027ba <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 80027ba:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 80027bc:	2000      	movs	r0, #0
 80027be:	461a      	mov	r2, r3
 80027c0:	f7fe bb9c 	b.w	8000efc <TerminalRead>

080027c4 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 80027c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 80027c8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002800 <_write_r+0x3c>
{
 80027cc:	461d      	mov	r5, r3
 80027ce:	4614      	mov	r4, r2
 80027d0:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 80027d2:	42bc      	cmp	r4, r7
 80027d4:	4626      	mov	r6, r4
 80027d6:	d102      	bne.n	80027de <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 80027d8:	4628      	mov	r0, r5
 80027da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 80027de:	7833      	ldrb	r3, [r6, #0]
 80027e0:	2b0a      	cmp	r3, #10
 80027e2:	f104 0401 	add.w	r4, r4, #1
 80027e6:	d104      	bne.n	80027f2 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 80027e8:	2201      	movs	r2, #1
 80027ea:	4641      	mov	r1, r8
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fdfb 	bl	80013e8 <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 80027f2:	2201      	movs	r2, #1
 80027f4:	4631      	mov	r1, r6
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe fdf6 	bl	80013e8 <TerminalOutputBufferWrite.isra.0>
    count--;
 80027fc:	e7e9      	b.n	80027d2 <_write_r+0xe>
 80027fe:	bf00      	nop
 8002800:	080078db 	.word	0x080078db

08002804 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002808:	4770      	bx	lr

0800280a <_exit>:

void _exit(int status)
{
  while(1) {}
 800280a:	e7fe      	b.n	800280a <_exit>

0800280c <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 800280c:	2000      	movs	r0, #0
 800280e:	4770      	bx	lr

08002810 <USART2_IRQHandler>:
  isr = uart->SR;
 8002810:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <USART2_IRQHandler+0xe0>)
 8002812:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002814:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8002816:	b510      	push	{r4, lr}
 8002818:	d50d      	bpl.n	8002836 <USART2_IRQHandler+0x26>
    c = uart->DR;
 800281a:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <USART2_IRQHandler+0xe4>)
 800281e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002822:	b292      	uxth	r2, r2
 8002824:	3201      	adds	r2, #1
 8002826:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800282a:	d339      	bcc.n	80028a0 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 800282c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002830:	3201      	adds	r2, #1
 8002832:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 8002836:	060a      	lsls	r2, r1, #24
 8002838:	d50a      	bpl.n	8002850 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <USART2_IRQHandler+0xe4>)
 800283c:	482c      	ldr	r0, [pc, #176]	; (80028f0 <USART2_IRQHandler+0xe0>)
 800283e:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002842:	b292      	uxth	r2, r2
 8002844:	2a00      	cmp	r2, #0
 8002846:	d140      	bne.n	80028ca <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8002848:	68c3      	ldr	r3, [r0, #12]
 800284a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284e:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 8002850:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8002852:	bf41      	itttt	mi
 8002854:	4a26      	ldrmi	r2, [pc, #152]	; (80028f0 <USART2_IRQHandler+0xe0>)
 8002856:	68d3      	ldrmi	r3, [r2, #12]
 8002858:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 800285c:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 800285e:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 8002860:	bf41      	itttt	mi
 8002862:	4a24      	ldrmi	r2, [pc, #144]	; (80028f4 <USART2_IRQHandler+0xe4>)
 8002864:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 8002868:	3301      	addmi	r3, #1
 800286a:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 800286e:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 8002870:	bf41      	itttt	mi
 8002872:	4a20      	ldrmi	r2, [pc, #128]	; (80028f4 <USART2_IRQHandler+0xe4>)
 8002874:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 8002878:	3301      	addmi	r3, #1
 800287a:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 800287e:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 8002880:	bf41      	itttt	mi
 8002882:	4a1c      	ldrmi	r2, [pc, #112]	; (80028f4 <USART2_IRQHandler+0xe4>)
 8002884:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 8002888:	3301      	addmi	r3, #1
 800288a:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 800288e:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 8002890:	bf41      	itttt	mi
 8002892:	4a18      	ldrmi	r2, [pc, #96]	; (80028f4 <USART2_IRQHandler+0xe4>)
 8002894:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 8002898:	3301      	addmi	r3, #1
 800289a:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 800289e:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 80028a0:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 80028a4:	3201      	adds	r2, #1
 80028a6:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 80028aa:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 80028ae:	b292      	uxth	r2, r2
    c = uart->DR;
 80028b0:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 80028b2:	3201      	adds	r2, #1
 80028b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028b8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 80028bc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80028c0:	3201      	adds	r2, #1
 80028c2:	b292      	uxth	r2, r2
 80028c4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80028c8:	e7b5      	b.n	8002836 <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 80028ca:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 80028ce:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 80028d2:	3201      	adds	r2, #1
      uart->DR = c;
 80028d4:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 80028d8:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 80028da:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 80028de:	3801      	subs	r0, #1
 80028e0:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 80028e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 80028e6:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 80028ea:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 80028ee:	e7af      	b.n	8002850 <USART2_IRQHandler+0x40>
 80028f0:	40004400 	.word	0x40004400
 80028f4:	20000210 	.word	0x20000210

080028f8 <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 80028f8:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 80028fc:	490d      	ldr	r1, [pc, #52]	; (8002934 <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 80028fe:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002900:	480d      	ldr	r0, [pc, #52]	; (8002938 <Default_IRQHandler+0x40>)
 8002902:	f7ff fe5b 	bl	80025bc <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8002906:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 800290a:	480c      	ldr	r0, [pc, #48]	; (800293c <Default_IRQHandler+0x44>)
 800290c:	f7ff fe56 	bl	80025bc <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <Default_IRQHandler+0x48>)
 8002912:	f1a4 0110 	sub.w	r1, r4, #16
 8002916:	f7ff fe51 	bl	80025bc <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <Default_IRQHandler+0x4c>)
 800291c:	480a      	ldr	r0, [pc, #40]	; (8002948 <Default_IRQHandler+0x50>)
 800291e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002922:	f7ff fe4b 	bl	80025bc <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8002926:	4809      	ldr	r0, [pc, #36]	; (800294c <Default_IRQHandler+0x54>)
 8002928:	f7ff fe48 	bl	80025bc <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 800292c:	e7fe      	b.n	800292c <Default_IRQHandler+0x34>
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	080123ee 	.word	0x080123ee
 8002938:	08007292 	.word	0x08007292
 800293c:	080072c9 	.word	0x080072c9
 8002940:	08007305 	.word	0x08007305
 8002944:	0800cc84 	.word	0x0800cc84
 8002948:	0800732e 	.word	0x0800732e
 800294c:	08007349 	.word	0x08007349

08002950 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002950:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002952:	4c6a      	ldr	r4, [pc, #424]	; (8002afc <main+0x1ac>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800295a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800295e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4f67      	ldr	r7, [pc, #412]	; (8002b00 <main+0x1b0>)
 8002964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002968:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002974:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002976:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 800297a:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 800297c:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 800297e:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002980:	2000      	movs	r0, #0
 8002982:	b093      	sub	sp, #76	; 0x4c
 8002984:	f7fe fd08 	bl	8001398 <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002988:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <main+0x1b8>)
 800298a:	2200      	movs	r2, #0
 800298c:	920a      	str	r2, [sp, #40]	; 0x28
 800298e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002990:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002994:	6459      	str	r1, [r3, #68]	; 0x44
 8002996:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002998:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800299c:	910a      	str	r1, [sp, #40]	; 0x28
 800299e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	9209      	str	r2, [sp, #36]	; 0x24
 80029a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029a8:	6419      	str	r1, [r3, #64]	; 0x40
 80029aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029ac:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80029b0:	9109      	str	r1, [sp, #36]	; 0x24
 80029b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 80029b6:	4955      	ldr	r1, [pc, #340]	; (8002b0c <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b8:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 80029ba:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 80029bc:	60e1      	str	r1, [r4, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	9208      	str	r2, [sp, #32]
 80029c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029c2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029c6:	6419      	str	r1, [r3, #64]	; 0x40
 80029c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029ca:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80029ce:	9108      	str	r1, [sp, #32]
 80029d0:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d2:	9207      	str	r2, [sp, #28]
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <main+0x1c0>)
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80029dc:	6011      	str	r1, [r2, #0]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80029e4:	9207      	str	r2, [sp, #28]
 80029e6:	9a07      	ldr	r2, [sp, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	f002 020c 	and.w	r2, r2, #12
 80029ee:	2a04      	cmp	r2, #4
 80029f0:	d007      	beq.n	8002a02 <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f8:	2a08      	cmp	r2, #8
 80029fa:	d13c      	bne.n	8002a76 <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	0254      	lsls	r4, r2, #9
 8002a00:	d539      	bpl.n	8002a76 <main+0x126>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a02:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <main+0x1b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <main+0x1c4>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a0e:	6839      	ldr	r1, [r7, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <main+0x1b8>)
 8002a12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002a14:	0792      	lsls	r2, r2, #30
 8002a16:	d541      	bpl.n	8002a9c <main+0x14c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	f002 020c 	and.w	r2, r2, #12
 8002a1e:	2a08      	cmp	r2, #8
 8002a20:	d04b      	beq.n	8002aba <main+0x16a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <main+0x1c4>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
 8002a28:	6839      	ldr	r1, [r7, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <main+0x1b8>)
 8002a2c:	6813      	ldr	r3, [r2, #0]
 8002a2e:	019e      	lsls	r6, r3, #6
 8002a30:	d439      	bmi.n	8002aa6 <main+0x156>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <main+0x1c8>)
 8002a34:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <main+0x1c4>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a3c:	6839      	ldr	r1, [r7, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <main+0x1b8>)
 8002a40:	6813      	ldr	r3, [r2, #0]
 8002a42:	019d      	lsls	r5, r3, #6
 8002a44:	d534      	bpl.n	8002ab0 <main+0x160>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <main+0x1a8>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f002 0207 	and.w	r2, r2, #7
 8002a4e:	2a02      	cmp	r2, #2
 8002a50:	d949      	bls.n	8002ae6 <main+0x196>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a52:	492d      	ldr	r1, [pc, #180]	; (8002b08 <main+0x1b8>)
 8002a54:	688b      	ldr	r3, [r1, #8]
 8002a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a5a:	608b      	str	r3, [r1, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	688b      	ldr	r3, [r1, #8]
 8002a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a62:	608b      	str	r3, [r1, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	688b      	ldr	r3, [r1, #8]
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	608b      	str	r3, [r1, #8]
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6c:	680b      	ldr	r3, [r1, #0]
 8002a6e:	0198      	lsls	r0, r3, #6
 8002a70:	d454      	bmi.n	8002b1c <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a72:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <main+0x1b8>)
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	0398      	lsls	r0, r3, #14
 8002a8e:	d4ba      	bmi.n	8002a06 <main+0xb6>
 8002a90:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a92:	1a5b      	subs	r3, r3, r1
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d9f8      	bls.n	8002a8a <main+0x13a>
 8002a98:	b672      	cpsid	i
 8002a9a:	e7fe      	b.n	8002a9a <main+0x14a>
 8002a9c:	683a      	ldr	r2, [r7, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9e:	1a52      	subs	r2, r2, r1
 8002aa0:	2a02      	cmp	r2, #2
 8002aa2:	d9b6      	bls.n	8002a12 <main+0xc2>
 8002aa4:	e7f8      	b.n	8002a98 <main+0x148>
 8002aa6:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa8:	1a5b      	subs	r3, r3, r1
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d9be      	bls.n	8002a2c <main+0xdc>
 8002aae:	e7f3      	b.n	8002a98 <main+0x148>
 8002ab0:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab2:	1a5b      	subs	r3, r3, r1
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d9c3      	bls.n	8002a40 <main+0xf0>
 8002ab8:	e7ee      	b.n	8002a98 <main+0x148>
        pll_config = RCC->PLLCFGR;
 8002aba:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abc:	025c      	lsls	r4, r3, #9
 8002abe:	d5eb      	bpl.n	8002a98 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	2a04      	cmp	r2, #4
 8002ac6:	d1e7      	bne.n	8002a98 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002acc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ace:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 8002ad2:	d1e1      	bne.n	8002a98 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002ad8:	d1de      	bne.n	8002a98 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ada:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae2:	d1d9      	bne.n	8002a98 <main+0x148>
 8002ae4:	e7af      	b.n	8002a46 <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d1be      	bne.n	8002a72 <main+0x122>
 8002af4:	e7ad      	b.n	8002a52 <main+0x102>
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	20000bfc 	.word	0x20000bfc
 8002b04:	05fa0300 	.word	0x05fa0300
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	05fa0700 	.word	0x05fa0700
 8002b10:	40007000 	.word	0x40007000
 8002b14:	42470000 	.word	0x42470000
 8002b18:	04401904 	.word	0x04401904
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1c:	688b      	ldr	r3, [r1, #8]
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	608b      	str	r3, [r1, #8]
 8002b28:	683a      	ldr	r2, [r7, #0]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2a:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	688b      	ldr	r3, [r1, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f040 81c9 	bne.w	8002ecc <main+0x57c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3a:	4bb5      	ldr	r3, [pc, #724]	; (8002e10 <main+0x4c0>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	0752      	lsls	r2, r2, #29
 8002b40:	f100 81ca 	bmi.w	8002ed8 <main+0x588>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	688b      	ldr	r3, [r1, #8]
 8002b46:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b4e:	608b      	str	r3, [r1, #8]

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b50:	688b      	ldr	r3, [r1, #8]
 8002b52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b56:	608b      	str	r3, [r1, #8]
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b58:	688b      	ldr	r3, [r1, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	f000 81de 	beq.w	8002f20 <main+0x5d0>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f000 81c0 	beq.w	8002eea <main+0x59a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b6a:	4daa      	ldr	r5, [pc, #680]	; (8002e14 <main+0x4c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b6c:	4eaa      	ldr	r6, [pc, #680]	; (8002e18 <main+0x4c8>)
 8002b6e:	4aab      	ldr	r2, [pc, #684]	; (8002e1c <main+0x4cc>)
 8002b70:	68b3      	ldr	r3, [r6, #8]
 8002b72:	4cab      	ldr	r4, [pc, #684]	; (8002e20 <main+0x4d0>)
  huart2.Init.BaudRate = 115200;
 8002b74:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8002e50 <main+0x500>
 8002b78:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f04f 0800 	mov.w	r8, #0
 8002b80:	5cd0      	ldrb	r0, [r2, r3]
 8002b82:	4ba8      	ldr	r3, [pc, #672]	; (8002e24 <main+0x4d4>)
 8002b84:	40c5      	lsrs	r5, r0
 8002b86:	601d      	str	r5, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002b88:	4ba7      	ldr	r3, [pc, #668]	; (8002e28 <main+0x4d8>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	f7fe fc04 	bl	8001398 <HAL_InitTick.isra.0>
 8002b90:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b94:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	48a3      	ldr	r0, [pc, #652]	; (8002e2c <main+0x4dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6333      	str	r3, [r6, #48]	; 0x30
 8002ba6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	9306      	str	r3, [sp, #24]
 8002bae:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb0:	f8cd 8014 	str.w	r8, [sp, #20]
 8002bb4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bba:	6333      	str	r3, [r6, #48]	; 0x30
 8002bbc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	9305      	str	r3, [sp, #20]
 8002bc4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	f8cd 8010 	str.w	r8, [sp, #16]
 8002bca:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6333      	str	r3, [r6, #48]	; 0x30
 8002bd2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	9304      	str	r3, [sp, #16]
 8002bda:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002be0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	6333      	str	r3, [r6, #48]	; 0x30
 8002be8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bf6:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bf8:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8002bfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c00:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c02:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f7fe f9dd 	bl	8000fc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c10:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 8002c12:	4c87      	ldr	r4, [pc, #540]	; (8002e30 <main+0x4e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c14:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f7fe f9d2 	bl	8000fc4 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002c20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c24:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c28:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c2c:	f8c4 8010 	str.w	r8, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c30:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c32:	e9c4 8802 	strd	r8, r8, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	e9c4 2805 	strd	r2, r8, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3a:	f8c4 801c 	str.w	r8, [r4, #28]
 8002c3e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002c42:	bb4b      	cbnz	r3, 8002c98 <main+0x348>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c44:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c48:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c50:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c56:	6433      	str	r3, [r6, #64]	; 0x40
 8002c58:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8002c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002c66:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6333      	str	r3, [r6, #48]	; 0x30
 8002c6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c70:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7e:	2603      	movs	r6, #3
 8002c80:	2307      	movs	r3, #7
 8002c82:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c86:	f7fe f99d 	bl	8000fc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	2026      	movs	r0, #38	; 0x26
 8002c8e:	f7fe fb11 	bl	80012b4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <main+0x4e4>)
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	605a      	str	r2, [r3, #4]
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	6826      	ldr	r6, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9a:	68e2      	ldr	r2, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c9c:	2324      	movs	r3, #36	; 0x24
 8002c9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002ca2:	68f3      	ldr	r3, [r6, #12]
 8002ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca8:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002caa:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cac:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	6133      	str	r3, [r6, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb6:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cb8:	68f1      	ldr	r1, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cba:	69e2      	ldr	r2, [r4, #28]
 8002cbc:	4303      	orrs	r3, r0
 8002cbe:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002cc0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cc4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002cc6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cca:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cd0:	6973      	ldr	r3, [r6, #20]
 8002cd2:	69a1      	ldr	r1, [r4, #24]
 8002cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6173      	str	r3, [r6, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cdc:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <main+0x4e8>)
 8002cde:	4957      	ldr	r1, [pc, #348]	; (8002e3c <main+0x4ec>)
 8002ce0:	429e      	cmp	r6, r3
 8002ce2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	d003      	beq.n	8002cf2 <main+0x3a2>
 8002cea:	4855      	ldr	r0, [pc, #340]	; (8002e40 <main+0x4f0>)
 8002cec:	4286      	cmp	r6, r0
 8002cee:	f040 8119 	bne.w	8002f24 <main+0x5d4>
 8002cf2:	f3c3 3342 	ubfx	r3, r3, #13, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf6:	5cc9      	ldrb	r1, [r1, r3]
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	40cd      	lsrs	r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d00:	f04f 0119 	mov.w	r1, #25
 8002d04:	fba5 0101 	umull	r0, r1, r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d08:	f040 810f 	bne.w	8002f2a <main+0x5da>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0c:	18da      	adds	r2, r3, r3
 8002d0e:	f04f 0500 	mov.w	r5, #0
 8002d12:	eb45 0305 	adc.w	r3, r5, r5
 8002d16:	f7fd ff6f 	bl	8000bf8 <__aeabi_uldivmod>
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fbb0 f5f1 	udiv	r5, r0, r1
 8002d20:	fb01 0315 	mls	r3, r1, r5, r0
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2c:	f003 0207 	and.w	r2, r3, #7
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002d36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d3a:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d3c:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	6933      	ldr	r3, [r6, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002d40:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <main+0x4f4>)
 8002d42:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d46:	6133      	str	r3, [r6, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d48:	6973      	ldr	r3, [r6, #20]
 8002d4a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002d4e:	6173      	str	r3, [r6, #20]
  __HAL_UART_ENABLE(huart);
 8002d50:	68f3      	ldr	r3, [r6, #12]
 8002d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d56:	60f3      	str	r3, [r6, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6423      	str	r3, [r4, #64]	; 0x40
  hiwdg.Instance = IWDG;
 8002d5c:	4e3a      	ldr	r6, [pc, #232]	; (8002e48 <main+0x4f8>)
  huart->gState = HAL_UART_STATE_READY;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002d64:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 8002d66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002d6a:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 8002d6e:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002d72:	e9c6 2100 	strd	r2, r1, [r6]
  hiwdg.Init.Reload = 4095;
 8002d76:	60b3      	str	r3, [r6, #8]
 8002d78:	6010      	str	r0, [r2, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002d7a:	f245 5055 	movw	r0, #21845	; 0x5555
 8002d7e:	6010      	str	r0, [r2, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002d80:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002d82:	6093      	str	r3, [r2, #8]
 8002d84:	6839      	ldr	r1, [r7, #0]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d86:	68d3      	ldr	r3, [r2, #12]
 8002d88:	f013 0303 	ands.w	r3, r3, #3
 8002d8c:	f040 80dd 	bne.w	8002f4a <main+0x5fa>
  setvbuf(stdin, NULL, _IONBF, 0);
 8002d90:	4c2e      	ldr	r4, [pc, #184]	; (8002e4c <main+0x4fc>)
 8002d92:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002d94:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8002d98:	6011      	str	r1, [r2, #0]
 8002d9a:	6840      	ldr	r0, [r0, #4]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2202      	movs	r2, #2
 8002da2:	f000 fe01 	bl	80039a8 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	9b01      	ldr	r3, [sp, #4]
 8002daa:	6880      	ldr	r0, [r0, #8]
 8002dac:	4619      	mov	r1, r3
 8002dae:	2202      	movs	r2, #2
 8002db0:	f000 fdfa 	bl	80039a8 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	68c0      	ldr	r0, [r0, #12]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f000 fdf3 	bl	80039a8 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <main+0x500>)
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002dca:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8002dd4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002dd8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 8002dda:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8002dde:	d052      	beq.n	8002e86 <main+0x536>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8002de0:	481c      	ldr	r0, [pc, #112]	; (8002e54 <main+0x504>)
 8002de2:	f003 f857 	bl	8005e94 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 8002de6:	2c00      	cmp	r4, #0
 8002de8:	da02      	bge.n	8002df0 <main+0x4a0>
 8002dea:	481b      	ldr	r0, [pc, #108]	; (8002e58 <main+0x508>)
 8002dec:	f003 f852 	bl	8005e94 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8002df0:	0067      	lsls	r7, r4, #1
 8002df2:	d502      	bpl.n	8002dfa <main+0x4aa>
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <main+0x50c>)
 8002df6:	f003 f84d 	bl	8005e94 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 8002dfa:	00a5      	lsls	r5, r4, #2
 8002dfc:	d502      	bpl.n	8002e04 <main+0x4b4>
 8002dfe:	4818      	ldr	r0, [pc, #96]	; (8002e60 <main+0x510>)
 8002e00:	f003 f848 	bl	8005e94 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8002e04:	00e0      	lsls	r0, r4, #3
 8002e06:	d52f      	bpl.n	8002e68 <main+0x518>
 8002e08:	4816      	ldr	r0, [pc, #88]	; (8002e64 <main+0x514>)
 8002e0a:	f003 f843 	bl	8005e94 <puts>
 8002e0e:	e02b      	b.n	8002e68 <main+0x518>
 8002e10:	40023c00 	.word	0x40023c00
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	0800a1dc 	.word	0x0800a1dc
 8002e20:	40020000 	.word	0x40020000
 8002e24:	20000004 	.word	0x20000004
 8002e28:	20000014 	.word	0x20000014
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	20000b0c 	.word	0x20000b0c
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	40011000 	.word	0x40011000
 8002e3c:	0800a1ec 	.word	0x0800a1ec
 8002e40:	40011400 	.word	0x40011400
 8002e44:	40003000 	.word	0x40003000
 8002e48:	20000a70 	.word	0x20000a70
 8002e4c:	20000018 	.word	0x20000018
 8002e50:	40004400 	.word	0x40004400
 8002e54:	08007373 	.word	0x08007373
 8002e58:	080073ab 	.word	0x080073ab
 8002e5c:	080073b6 	.word	0x080073b6
 8002e60:	080073c9 	.word	0x080073c9
 8002e64:	080073e8 	.word	0x080073e8
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8002e68:	01a1      	lsls	r1, r4, #6
 8002e6a:	d502      	bpl.n	8002e72 <main+0x522>
 8002e6c:	484f      	ldr	r0, [pc, #316]	; (8002fac <main+0x65c>)
 8002e6e:	f003 f811 	bl	8005e94 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8002e72:	0162      	lsls	r2, r4, #5
 8002e74:	d502      	bpl.n	8002e7c <main+0x52c>
 8002e76:	484e      	ldr	r0, [pc, #312]	; (8002fb0 <main+0x660>)
 8002e78:	f003 f80c 	bl	8005e94 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8002e7c:	0123      	lsls	r3, r4, #4
 8002e7e:	d502      	bpl.n	8002e86 <main+0x536>
 8002e80:	484c      	ldr	r0, [pc, #304]	; (8002fb4 <main+0x664>)
 8002e82:	f003 f807 	bl	8005e94 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <main+0x668>)
 8002e88:	4d4c      	ldr	r5, [pc, #304]	; (8002fbc <main+0x66c>)
  p = _tasktable_start;
 8002e8a:	4c4d      	ldr	r4, [pc, #308]	; (8002fc0 <main+0x670>)
  while(p != _tasktable_end) {
 8002e8c:	4f4d      	ldr	r7, [pc, #308]	; (8002fc4 <main+0x674>)
 8002e8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e92:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 8002e94:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 8002e98:	42bc      	cmp	r4, r7
 8002e9a:	d161      	bne.n	8002f60 <main+0x610>
  my_Init();
 8002e9c:	f7fd f9b6 	bl	800020c <my_Init>
  ticks = AccumTicks;
 8002ea0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002fd0 <main+0x680>
  AccumTicks = 0;
 8002ea4:	f04f 0a00 	mov.w	sl, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ea8:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 8002eac:	b672      	cpsid	i
  ticks = AccumTicks;
 8002eae:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 8002eb2:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eb6:	b662      	cpsie	i
  s = _taskstate_start;
 8002eb8:	4d40      	ldr	r5, [pc, #256]	; (8002fbc <main+0x66c>)
  p = _tasktable_start;
 8002eba:	4c41      	ldr	r4, [pc, #260]	; (8002fc0 <main+0x670>)
  while(p != _tasktable_end) {
 8002ebc:	42bc      	cmp	r4, r7
 8002ebe:	d157      	bne.n	8002f70 <main+0x620>
  my_Loop();
 8002ec0:	f7fd f9a2 	bl	8000208 <my_Loop>
 8002ec4:	6833      	ldr	r3, [r6, #0]
 8002ec6:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 8002eca:	e7ef      	b.n	8002eac <main+0x55c>
 8002ecc:	683b      	ldr	r3, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	4283      	cmp	r3, r0
 8002ed2:	f67f ae2c 	bls.w	8002b2e <main+0x1de>
 8002ed6:	e5cc      	b.n	8002a72 <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed8:	2203      	movs	r2, #3
 8002eda:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f47f adc5 	bne.w	8002a72 <main+0x122>
 8002ee8:	e62c      	b.n	8002b44 <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef4:	bf14      	ite	ne
 8002ef6:	4834      	ldrne	r0, [pc, #208]	; (8002fc8 <main+0x678>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef8:	4834      	ldreq	r0, [pc, #208]	; (8002fcc <main+0x67c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002efe:	bf18      	it	ne
 8002f00:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	fba1 0100 	umull	r0, r1, r1, r0
 8002f0a:	f7fd fe75 	bl	8000bf8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <main+0x668>)
 8002f10:	685d      	ldr	r5, [r3, #4]
 8002f12:	f3c5 4501 	ubfx	r5, r5, #16, #2
 8002f16:	3501      	adds	r5, #1
 8002f18:	006d      	lsls	r5, r5, #1
      sysclockfreq = pllvco/pllp;
 8002f1a:	fbb0 f5f5 	udiv	r5, r0, r5
  return sysclockfreq;
 8002f1e:	e625      	b.n	8002b6c <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f20:	4d29      	ldr	r5, [pc, #164]	; (8002fc8 <main+0x678>)
 8002f22:	e623      	b.n	8002b6c <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f24:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002f28:	e6e5      	b.n	8002cf6 <main+0x3a6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f2a:	009a      	lsls	r2, r3, #2
 8002f2c:	0f9b      	lsrs	r3, r3, #30
 8002f2e:	f7fd fe63 	bl	8000bf8 <__aeabi_uldivmod>
 8002f32:	2264      	movs	r2, #100	; 0x64
 8002f34:	fbb0 f1f2 	udiv	r1, r0, r2
 8002f38:	fb02 0311 	mls	r3, r2, r1, r0
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	3332      	adds	r3, #50	; 0x32
 8002f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f44:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002f48:	e6f8      	b.n	8002d3c <main+0x3ec>
 8002f4a:	683b      	ldr	r3, [r7, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f4c:	1a5b      	subs	r3, r3, r1
 8002f4e:	2b31      	cmp	r3, #49	; 0x31
 8002f50:	f67f af19 	bls.w	8002d86 <main+0x436>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f54:	68d3      	ldr	r3, [r2, #12]
 8002f56:	079b      	lsls	r3, r3, #30
 8002f58:	f43f af15 	beq.w	8002d86 <main+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5c:	b672      	cpsid	i
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <main+0x60e>
    if(p->initFunc != NULL) {
 8002f60:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8002f62:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 8002f66:	b10b      	cbz	r3, 8002f6c <main+0x61c>
      p->initFunc(p->data);
 8002f68:	68e0      	ldr	r0, [r4, #12]
 8002f6a:	4798      	blx	r3
    p++;
 8002f6c:	3418      	adds	r4, #24
    s++;
 8002f6e:	e793      	b.n	8002e98 <main+0x548>
    if(p->func != NULL) {
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	b11b      	cbz	r3, 8002f7c <main+0x62c>
      if(p->interval == 0) {
 8002f74:	6922      	ldr	r2, [r4, #16]
 8002f76:	b9b2      	cbnz	r2, 8002fa6 <main+0x656>
	p->func(p->data);
 8002f78:	68e0      	ldr	r0, [r4, #12]
 8002f7a:	4798      	blx	r3
    p++;
 8002f7c:	3418      	adds	r4, #24
    s++;
 8002f7e:	3504      	adds	r5, #4
 8002f80:	e79c      	b.n	8002ebc <main+0x56c>
	  if(s->interval) {
 8002f82:	682b      	ldr	r3, [r5, #0]
 8002f84:	b953      	cbnz	r3, 8002f9c <main+0x64c>
	    p->func(p->data);
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	68e0      	ldr	r0, [r4, #12]
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8002f8e:	6923      	ldr	r3, [r4, #16]
 8002f90:	9a01      	ldr	r2, [sp, #4]
 8002f92:	602b      	str	r3, [r5, #0]
 8002f94:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	d1f3      	bne.n	8002f82 <main+0x632>
 8002f9a:	e7ef      	b.n	8002f7c <main+0x62c>
	    s->interval--;
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f7      	bne.n	8002f94 <main+0x644>
 8002fa4:	e7ef      	b.n	8002f86 <main+0x636>
 8002fa6:	465a      	mov	r2, fp
 8002fa8:	e7f5      	b.n	8002f96 <main+0x646>
 8002faa:	bf00      	nop
 8002fac:	080073f2 	.word	0x080073f2
 8002fb0:	080073fc 	.word	0x080073fc
 8002fb4:	08007406 	.word	0x08007406
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	200001e8 	.word	0x200001e8
 8002fc0:	080128a0 	.word	0x080128a0
 8002fc4:	080128b8 	.word	0x080128b8
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	20000208 	.word	0x20000208

08002fd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <NMI_Handler>

08002fd6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd6:	e7fe      	b.n	8002fd6 <HardFault_Handler>

08002fd8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler>

08002fda <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fda:	e7fe      	b.n	8002fda <BusFault_Handler>

08002fdc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <UsageFault_Handler>

08002fde <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fde:	4770      	bx	lr

08002fe0 <DebugMon_Handler>:
 8002fe0:	4770      	bx	lr

08002fe2 <PendSV_Handler>:
 8002fe2:	4770      	bx	lr

08002fe4 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe6:	b508      	push	{r3, lr}
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 8002fee:	f7fd f901 	bl	80001f4 <my_Tick>
  AccumTicks++;
 8002ff2:	4a03      	ldr	r2, [pc, #12]	; (8003000 <SysTick_Handler+0x1c>)
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ffa:	bd08      	pop	{r3, pc}
 8002ffc:	20000bfc 	.word	0x20000bfc
 8003000:	20000208 	.word	0x20000208

08003004 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003004:	4a03      	ldr	r2, [pc, #12]	; (8003014 <SystemInit+0x10>)
 8003006:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800300a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800301c:	480d      	ldr	r0, [pc, #52]	; (8003054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800301e:	490e      	ldr	r1, [pc, #56]	; (8003058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003024:	e002      	b.n	800302c <LoopCopyDataInit>

08003026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302a:	3304      	adds	r3, #4

0800302c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800302c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003030:	d3f9      	bcc.n	8003026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003034:	4c0b      	ldr	r4, [pc, #44]	; (8003064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003038:	e001      	b.n	800303e <LoopFillZerobss>

0800303a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800303c:	3204      	adds	r2, #4

0800303e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003040:	d3fb      	bcc.n	800303a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003042:	f7ff ffdf 	bl	8003004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003046:	f000 f819 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7ff fc81 	bl	8002950 <main>
  bx  lr    
 800304e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003058:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800305c:	0801297c 	.word	0x0801297c
  ldr r2, =_sbss
 8003060:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003064:	20000c10 	.word	0x20000c10

08003068 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 8003068:	f7ff fc46 	bl	80028f8 <Default_IRQHandler>
  b  Infinite_Loop
 800306c:	e7fc      	b.n	8003068 <ADC_IRQHandler>
	...

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000018 	.word	0x20000018

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <__libc_init_array+0x38>)
 8003080:	4c0d      	ldr	r4, [pc, #52]	; (80030b8 <__libc_init_array+0x3c>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	2600      	movs	r6, #0
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	4d0b      	ldr	r5, [pc, #44]	; (80030bc <__libc_init_array+0x40>)
 800308e:	4c0c      	ldr	r4, [pc, #48]	; (80030c0 <__libc_init_array+0x44>)
 8003090:	f003 f908 	bl	80062a4 <_init>
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	2600      	movs	r6, #0
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	08012974 	.word	0x08012974
 80030b8:	08012974 	.word	0x08012974
 80030bc:	08012974 	.word	0x08012974
 80030c0:	08012978 	.word	0x08012978

080030c4 <memset>:
 80030c4:	4402      	add	r2, r0
 80030c6:	4603      	mov	r3, r0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d100      	bne.n	80030ce <memset+0xa>
 80030cc:	4770      	bx	lr
 80030ce:	f803 1b01 	strb.w	r1, [r3], #1
 80030d2:	e7f9      	b.n	80030c8 <memset+0x4>

080030d4 <__cvt>:
 80030d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	ec55 4b10 	vmov	r4, r5, d0
 80030dc:	2d00      	cmp	r5, #0
 80030de:	460e      	mov	r6, r1
 80030e0:	4619      	mov	r1, r3
 80030e2:	462b      	mov	r3, r5
 80030e4:	bfbb      	ittet	lt
 80030e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80030ea:	461d      	movlt	r5, r3
 80030ec:	2300      	movge	r3, #0
 80030ee:	232d      	movlt	r3, #45	; 0x2d
 80030f0:	700b      	strb	r3, [r1, #0]
 80030f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030f8:	4691      	mov	r9, r2
 80030fa:	f023 0820 	bic.w	r8, r3, #32
 80030fe:	bfbc      	itt	lt
 8003100:	4622      	movlt	r2, r4
 8003102:	4614      	movlt	r4, r2
 8003104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003108:	d005      	beq.n	8003116 <__cvt+0x42>
 800310a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800310e:	d100      	bne.n	8003112 <__cvt+0x3e>
 8003110:	3601      	adds	r6, #1
 8003112:	2102      	movs	r1, #2
 8003114:	e000      	b.n	8003118 <__cvt+0x44>
 8003116:	2103      	movs	r1, #3
 8003118:	ab03      	add	r3, sp, #12
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	ab02      	add	r3, sp, #8
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	ec45 4b10 	vmov	d0, r4, r5
 8003124:	4653      	mov	r3, sl
 8003126:	4632      	mov	r2, r6
 8003128:	f000 fe86 	bl	8003e38 <_dtoa_r>
 800312c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003130:	4607      	mov	r7, r0
 8003132:	d102      	bne.n	800313a <__cvt+0x66>
 8003134:	f019 0f01 	tst.w	r9, #1
 8003138:	d022      	beq.n	8003180 <__cvt+0xac>
 800313a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800313e:	eb07 0906 	add.w	r9, r7, r6
 8003142:	d110      	bne.n	8003166 <__cvt+0x92>
 8003144:	783b      	ldrb	r3, [r7, #0]
 8003146:	2b30      	cmp	r3, #48	; 0x30
 8003148:	d10a      	bne.n	8003160 <__cvt+0x8c>
 800314a:	2200      	movs	r2, #0
 800314c:	2300      	movs	r3, #0
 800314e:	4620      	mov	r0, r4
 8003150:	4629      	mov	r1, r5
 8003152:	f7fd fce1 	bl	8000b18 <__aeabi_dcmpeq>
 8003156:	b918      	cbnz	r0, 8003160 <__cvt+0x8c>
 8003158:	f1c6 0601 	rsb	r6, r6, #1
 800315c:	f8ca 6000 	str.w	r6, [sl]
 8003160:	f8da 3000 	ldr.w	r3, [sl]
 8003164:	4499      	add	r9, r3
 8003166:	2200      	movs	r2, #0
 8003168:	2300      	movs	r3, #0
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd fcd3 	bl	8000b18 <__aeabi_dcmpeq>
 8003172:	b108      	cbz	r0, 8003178 <__cvt+0xa4>
 8003174:	f8cd 900c 	str.w	r9, [sp, #12]
 8003178:	2230      	movs	r2, #48	; 0x30
 800317a:	9b03      	ldr	r3, [sp, #12]
 800317c:	454b      	cmp	r3, r9
 800317e:	d307      	bcc.n	8003190 <__cvt+0xbc>
 8003180:	9b03      	ldr	r3, [sp, #12]
 8003182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003184:	1bdb      	subs	r3, r3, r7
 8003186:	4638      	mov	r0, r7
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	b004      	add	sp, #16
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	1c59      	adds	r1, r3, #1
 8003192:	9103      	str	r1, [sp, #12]
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e7f0      	b.n	800317a <__cvt+0xa6>

08003198 <__exponent>:
 8003198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319a:	4603      	mov	r3, r0
 800319c:	2900      	cmp	r1, #0
 800319e:	bfb8      	it	lt
 80031a0:	4249      	neglt	r1, r1
 80031a2:	f803 2b02 	strb.w	r2, [r3], #2
 80031a6:	bfb4      	ite	lt
 80031a8:	222d      	movlt	r2, #45	; 0x2d
 80031aa:	222b      	movge	r2, #43	; 0x2b
 80031ac:	2909      	cmp	r1, #9
 80031ae:	7042      	strb	r2, [r0, #1]
 80031b0:	dd2a      	ble.n	8003208 <__exponent+0x70>
 80031b2:	f10d 0407 	add.w	r4, sp, #7
 80031b6:	46a4      	mov	ip, r4
 80031b8:	270a      	movs	r7, #10
 80031ba:	46a6      	mov	lr, r4
 80031bc:	460a      	mov	r2, r1
 80031be:	fb91 f6f7 	sdiv	r6, r1, r7
 80031c2:	fb07 1516 	mls	r5, r7, r6, r1
 80031c6:	3530      	adds	r5, #48	; 0x30
 80031c8:	2a63      	cmp	r2, #99	; 0x63
 80031ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80031ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80031d2:	4631      	mov	r1, r6
 80031d4:	dcf1      	bgt.n	80031ba <__exponent+0x22>
 80031d6:	3130      	adds	r1, #48	; 0x30
 80031d8:	f1ae 0502 	sub.w	r5, lr, #2
 80031dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031e0:	1c44      	adds	r4, r0, #1
 80031e2:	4629      	mov	r1, r5
 80031e4:	4561      	cmp	r1, ip
 80031e6:	d30a      	bcc.n	80031fe <__exponent+0x66>
 80031e8:	f10d 0209 	add.w	r2, sp, #9
 80031ec:	eba2 020e 	sub.w	r2, r2, lr
 80031f0:	4565      	cmp	r5, ip
 80031f2:	bf88      	it	hi
 80031f4:	2200      	movhi	r2, #0
 80031f6:	4413      	add	r3, r2
 80031f8:	1a18      	subs	r0, r3, r0
 80031fa:	b003      	add	sp, #12
 80031fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003202:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003206:	e7ed      	b.n	80031e4 <__exponent+0x4c>
 8003208:	2330      	movs	r3, #48	; 0x30
 800320a:	3130      	adds	r1, #48	; 0x30
 800320c:	7083      	strb	r3, [r0, #2]
 800320e:	70c1      	strb	r1, [r0, #3]
 8003210:	1d03      	adds	r3, r0, #4
 8003212:	e7f1      	b.n	80031f8 <__exponent+0x60>

08003214 <_printf_float>:
 8003214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003218:	ed2d 8b02 	vpush	{d8}
 800321c:	b08d      	sub	sp, #52	; 0x34
 800321e:	460c      	mov	r4, r1
 8003220:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003224:	4616      	mov	r6, r2
 8003226:	461f      	mov	r7, r3
 8003228:	4605      	mov	r5, r0
 800322a:	f001 fdbd 	bl	8004da8 <_localeconv_r>
 800322e:	f8d0 a000 	ldr.w	sl, [r0]
 8003232:	4650      	mov	r0, sl
 8003234:	f7fc ffee 	bl	8000214 <strlen>
 8003238:	2300      	movs	r3, #0
 800323a:	930a      	str	r3, [sp, #40]	; 0x28
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	9305      	str	r3, [sp, #20]
 8003240:	f8d8 3000 	ldr.w	r3, [r8]
 8003244:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003248:	3307      	adds	r3, #7
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	f103 0208 	add.w	r2, r3, #8
 8003252:	f8c8 2000 	str.w	r2, [r8]
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800325e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003262:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003266:	9307      	str	r3, [sp, #28]
 8003268:	f8cd 8018 	str.w	r8, [sp, #24]
 800326c:	ee08 0a10 	vmov	s16, r0
 8003270:	4b9f      	ldr	r3, [pc, #636]	; (80034f0 <_printf_float+0x2dc>)
 8003272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800327a:	f7fd fc7f 	bl	8000b7c <__aeabi_dcmpun>
 800327e:	bb88      	cbnz	r0, 80032e4 <_printf_float+0xd0>
 8003280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003284:	4b9a      	ldr	r3, [pc, #616]	; (80034f0 <_printf_float+0x2dc>)
 8003286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800328a:	f7fd fc59 	bl	8000b40 <__aeabi_dcmple>
 800328e:	bb48      	cbnz	r0, 80032e4 <_printf_float+0xd0>
 8003290:	2200      	movs	r2, #0
 8003292:	2300      	movs	r3, #0
 8003294:	4640      	mov	r0, r8
 8003296:	4649      	mov	r1, r9
 8003298:	f7fd fc48 	bl	8000b2c <__aeabi_dcmplt>
 800329c:	b110      	cbz	r0, 80032a4 <_printf_float+0x90>
 800329e:	232d      	movs	r3, #45	; 0x2d
 80032a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a4:	4b93      	ldr	r3, [pc, #588]	; (80034f4 <_printf_float+0x2e0>)
 80032a6:	4894      	ldr	r0, [pc, #592]	; (80034f8 <_printf_float+0x2e4>)
 80032a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80032ac:	bf94      	ite	ls
 80032ae:	4698      	movls	r8, r3
 80032b0:	4680      	movhi	r8, r0
 80032b2:	2303      	movs	r3, #3
 80032b4:	6123      	str	r3, [r4, #16]
 80032b6:	9b05      	ldr	r3, [sp, #20]
 80032b8:	f023 0204 	bic.w	r2, r3, #4
 80032bc:	6022      	str	r2, [r4, #0]
 80032be:	f04f 0900 	mov.w	r9, #0
 80032c2:	9700      	str	r7, [sp, #0]
 80032c4:	4633      	mov	r3, r6
 80032c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80032c8:	4621      	mov	r1, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	f000 f9d8 	bl	8003680 <_printf_common>
 80032d0:	3001      	adds	r0, #1
 80032d2:	f040 8090 	bne.w	80033f6 <_printf_float+0x1e2>
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032da:	b00d      	add	sp, #52	; 0x34
 80032dc:	ecbd 8b02 	vpop	{d8}
 80032e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	4640      	mov	r0, r8
 80032ea:	4649      	mov	r1, r9
 80032ec:	f7fd fc46 	bl	8000b7c <__aeabi_dcmpun>
 80032f0:	b140      	cbz	r0, 8003304 <_printf_float+0xf0>
 80032f2:	464b      	mov	r3, r9
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bfbc      	itt	lt
 80032f8:	232d      	movlt	r3, #45	; 0x2d
 80032fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032fe:	487f      	ldr	r0, [pc, #508]	; (80034fc <_printf_float+0x2e8>)
 8003300:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <_printf_float+0x2ec>)
 8003302:	e7d1      	b.n	80032a8 <_printf_float+0x94>
 8003304:	6863      	ldr	r3, [r4, #4]
 8003306:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800330a:	9206      	str	r2, [sp, #24]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	d13f      	bne.n	8003390 <_printf_float+0x17c>
 8003310:	2306      	movs	r3, #6
 8003312:	6063      	str	r3, [r4, #4]
 8003314:	9b05      	ldr	r3, [sp, #20]
 8003316:	6861      	ldr	r1, [r4, #4]
 8003318:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800331c:	2300      	movs	r3, #0
 800331e:	9303      	str	r3, [sp, #12]
 8003320:	ab0a      	add	r3, sp, #40	; 0x28
 8003322:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003326:	ab09      	add	r3, sp, #36	; 0x24
 8003328:	ec49 8b10 	vmov	d0, r8, r9
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6022      	str	r2, [r4, #0]
 8003330:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003334:	4628      	mov	r0, r5
 8003336:	f7ff fecd 	bl	80030d4 <__cvt>
 800333a:	9b06      	ldr	r3, [sp, #24]
 800333c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800333e:	2b47      	cmp	r3, #71	; 0x47
 8003340:	4680      	mov	r8, r0
 8003342:	d108      	bne.n	8003356 <_printf_float+0x142>
 8003344:	1cc8      	adds	r0, r1, #3
 8003346:	db02      	blt.n	800334e <_printf_float+0x13a>
 8003348:	6863      	ldr	r3, [r4, #4]
 800334a:	4299      	cmp	r1, r3
 800334c:	dd41      	ble.n	80033d2 <_printf_float+0x1be>
 800334e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003352:	fa5f fb8b 	uxtb.w	fp, fp
 8003356:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800335a:	d820      	bhi.n	800339e <_printf_float+0x18a>
 800335c:	3901      	subs	r1, #1
 800335e:	465a      	mov	r2, fp
 8003360:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003364:	9109      	str	r1, [sp, #36]	; 0x24
 8003366:	f7ff ff17 	bl	8003198 <__exponent>
 800336a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800336c:	1813      	adds	r3, r2, r0
 800336e:	2a01      	cmp	r2, #1
 8003370:	4681      	mov	r9, r0
 8003372:	6123      	str	r3, [r4, #16]
 8003374:	dc02      	bgt.n	800337c <_printf_float+0x168>
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	07d2      	lsls	r2, r2, #31
 800337a:	d501      	bpl.n	8003380 <_printf_float+0x16c>
 800337c:	3301      	adds	r3, #1
 800337e:	6123      	str	r3, [r4, #16]
 8003380:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003384:	2b00      	cmp	r3, #0
 8003386:	d09c      	beq.n	80032c2 <_printf_float+0xae>
 8003388:	232d      	movs	r3, #45	; 0x2d
 800338a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800338e:	e798      	b.n	80032c2 <_printf_float+0xae>
 8003390:	9a06      	ldr	r2, [sp, #24]
 8003392:	2a47      	cmp	r2, #71	; 0x47
 8003394:	d1be      	bne.n	8003314 <_printf_float+0x100>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1bc      	bne.n	8003314 <_printf_float+0x100>
 800339a:	2301      	movs	r3, #1
 800339c:	e7b9      	b.n	8003312 <_printf_float+0xfe>
 800339e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80033a2:	d118      	bne.n	80033d6 <_printf_float+0x1c2>
 80033a4:	2900      	cmp	r1, #0
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	dd0b      	ble.n	80033c2 <_printf_float+0x1ae>
 80033aa:	6121      	str	r1, [r4, #16]
 80033ac:	b913      	cbnz	r3, 80033b4 <_printf_float+0x1a0>
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	07d0      	lsls	r0, r2, #31
 80033b2:	d502      	bpl.n	80033ba <_printf_float+0x1a6>
 80033b4:	3301      	adds	r3, #1
 80033b6:	440b      	add	r3, r1
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80033bc:	f04f 0900 	mov.w	r9, #0
 80033c0:	e7de      	b.n	8003380 <_printf_float+0x16c>
 80033c2:	b913      	cbnz	r3, 80033ca <_printf_float+0x1b6>
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	07d2      	lsls	r2, r2, #31
 80033c8:	d501      	bpl.n	80033ce <_printf_float+0x1ba>
 80033ca:	3302      	adds	r3, #2
 80033cc:	e7f4      	b.n	80033b8 <_printf_float+0x1a4>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e7f2      	b.n	80033b8 <_printf_float+0x1a4>
 80033d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80033d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033d8:	4299      	cmp	r1, r3
 80033da:	db05      	blt.n	80033e8 <_printf_float+0x1d4>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	6121      	str	r1, [r4, #16]
 80033e0:	07d8      	lsls	r0, r3, #31
 80033e2:	d5ea      	bpl.n	80033ba <_printf_float+0x1a6>
 80033e4:	1c4b      	adds	r3, r1, #1
 80033e6:	e7e7      	b.n	80033b8 <_printf_float+0x1a4>
 80033e8:	2900      	cmp	r1, #0
 80033ea:	bfd4      	ite	le
 80033ec:	f1c1 0202 	rsble	r2, r1, #2
 80033f0:	2201      	movgt	r2, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	e7e0      	b.n	80033b8 <_printf_float+0x1a4>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	055a      	lsls	r2, r3, #21
 80033fa:	d407      	bmi.n	800340c <_printf_float+0x1f8>
 80033fc:	6923      	ldr	r3, [r4, #16]
 80033fe:	4642      	mov	r2, r8
 8003400:	4631      	mov	r1, r6
 8003402:	4628      	mov	r0, r5
 8003404:	47b8      	blx	r7
 8003406:	3001      	adds	r0, #1
 8003408:	d12c      	bne.n	8003464 <_printf_float+0x250>
 800340a:	e764      	b.n	80032d6 <_printf_float+0xc2>
 800340c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003410:	f240 80e0 	bls.w	80035d4 <_printf_float+0x3c0>
 8003414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003418:	2200      	movs	r2, #0
 800341a:	2300      	movs	r3, #0
 800341c:	f7fd fb7c 	bl	8000b18 <__aeabi_dcmpeq>
 8003420:	2800      	cmp	r0, #0
 8003422:	d034      	beq.n	800348e <_printf_float+0x27a>
 8003424:	4a37      	ldr	r2, [pc, #220]	; (8003504 <_printf_float+0x2f0>)
 8003426:	2301      	movs	r3, #1
 8003428:	4631      	mov	r1, r6
 800342a:	4628      	mov	r0, r5
 800342c:	47b8      	blx	r7
 800342e:	3001      	adds	r0, #1
 8003430:	f43f af51 	beq.w	80032d6 <_printf_float+0xc2>
 8003434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003438:	429a      	cmp	r2, r3
 800343a:	db02      	blt.n	8003442 <_printf_float+0x22e>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	07d8      	lsls	r0, r3, #31
 8003440:	d510      	bpl.n	8003464 <_printf_float+0x250>
 8003442:	ee18 3a10 	vmov	r3, s16
 8003446:	4652      	mov	r2, sl
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
 800344c:	47b8      	blx	r7
 800344e:	3001      	adds	r0, #1
 8003450:	f43f af41 	beq.w	80032d6 <_printf_float+0xc2>
 8003454:	f04f 0800 	mov.w	r8, #0
 8003458:	f104 091a 	add.w	r9, r4, #26
 800345c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	4543      	cmp	r3, r8
 8003462:	dc09      	bgt.n	8003478 <_printf_float+0x264>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	079b      	lsls	r3, r3, #30
 8003468:	f100 8105 	bmi.w	8003676 <_printf_float+0x462>
 800346c:	68e0      	ldr	r0, [r4, #12]
 800346e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003470:	4298      	cmp	r0, r3
 8003472:	bfb8      	it	lt
 8003474:	4618      	movlt	r0, r3
 8003476:	e730      	b.n	80032da <_printf_float+0xc6>
 8003478:	2301      	movs	r3, #1
 800347a:	464a      	mov	r2, r9
 800347c:	4631      	mov	r1, r6
 800347e:	4628      	mov	r0, r5
 8003480:	47b8      	blx	r7
 8003482:	3001      	adds	r0, #1
 8003484:	f43f af27 	beq.w	80032d6 <_printf_float+0xc2>
 8003488:	f108 0801 	add.w	r8, r8, #1
 800348c:	e7e6      	b.n	800345c <_printf_float+0x248>
 800348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	dc39      	bgt.n	8003508 <_printf_float+0x2f4>
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <_printf_float+0x2f0>)
 8003496:	2301      	movs	r3, #1
 8003498:	4631      	mov	r1, r6
 800349a:	4628      	mov	r0, r5
 800349c:	47b8      	blx	r7
 800349e:	3001      	adds	r0, #1
 80034a0:	f43f af19 	beq.w	80032d6 <_printf_float+0xc2>
 80034a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d102      	bne.n	80034b2 <_printf_float+0x29e>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	07d9      	lsls	r1, r3, #31
 80034b0:	d5d8      	bpl.n	8003464 <_printf_float+0x250>
 80034b2:	ee18 3a10 	vmov	r3, s16
 80034b6:	4652      	mov	r2, sl
 80034b8:	4631      	mov	r1, r6
 80034ba:	4628      	mov	r0, r5
 80034bc:	47b8      	blx	r7
 80034be:	3001      	adds	r0, #1
 80034c0:	f43f af09 	beq.w	80032d6 <_printf_float+0xc2>
 80034c4:	f04f 0900 	mov.w	r9, #0
 80034c8:	f104 0a1a 	add.w	sl, r4, #26
 80034cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ce:	425b      	negs	r3, r3
 80034d0:	454b      	cmp	r3, r9
 80034d2:	dc01      	bgt.n	80034d8 <_printf_float+0x2c4>
 80034d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034d6:	e792      	b.n	80033fe <_printf_float+0x1ea>
 80034d8:	2301      	movs	r3, #1
 80034da:	4652      	mov	r2, sl
 80034dc:	4631      	mov	r1, r6
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	f43f aef7 	beq.w	80032d6 <_printf_float+0xc2>
 80034e8:	f109 0901 	add.w	r9, r9, #1
 80034ec:	e7ee      	b.n	80034cc <_printf_float+0x2b8>
 80034ee:	bf00      	nop
 80034f0:	7fefffff 	.word	0x7fefffff
 80034f4:	08012508 	.word	0x08012508
 80034f8:	0801250c 	.word	0x0801250c
 80034fc:	08012514 	.word	0x08012514
 8003500:	08012510 	.word	0x08012510
 8003504:	0800865f 	.word	0x0800865f
 8003508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800350a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800350c:	429a      	cmp	r2, r3
 800350e:	bfa8      	it	ge
 8003510:	461a      	movge	r2, r3
 8003512:	2a00      	cmp	r2, #0
 8003514:	4691      	mov	r9, r2
 8003516:	dc37      	bgt.n	8003588 <_printf_float+0x374>
 8003518:	f04f 0b00 	mov.w	fp, #0
 800351c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003520:	f104 021a 	add.w	r2, r4, #26
 8003524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	eba3 0309 	sub.w	r3, r3, r9
 800352c:	455b      	cmp	r3, fp
 800352e:	dc33      	bgt.n	8003598 <_printf_float+0x384>
 8003530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003534:	429a      	cmp	r2, r3
 8003536:	db3b      	blt.n	80035b0 <_printf_float+0x39c>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	07da      	lsls	r2, r3, #31
 800353c:	d438      	bmi.n	80035b0 <_printf_float+0x39c>
 800353e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003540:	9a05      	ldr	r2, [sp, #20]
 8003542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003544:	1a9a      	subs	r2, r3, r2
 8003546:	eba3 0901 	sub.w	r9, r3, r1
 800354a:	4591      	cmp	r9, r2
 800354c:	bfa8      	it	ge
 800354e:	4691      	movge	r9, r2
 8003550:	f1b9 0f00 	cmp.w	r9, #0
 8003554:	dc35      	bgt.n	80035c2 <_printf_float+0x3ae>
 8003556:	f04f 0800 	mov.w	r8, #0
 800355a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800355e:	f104 0a1a 	add.w	sl, r4, #26
 8003562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	eba3 0309 	sub.w	r3, r3, r9
 800356c:	4543      	cmp	r3, r8
 800356e:	f77f af79 	ble.w	8003464 <_printf_float+0x250>
 8003572:	2301      	movs	r3, #1
 8003574:	4652      	mov	r2, sl
 8003576:	4631      	mov	r1, r6
 8003578:	4628      	mov	r0, r5
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	f43f aeaa 	beq.w	80032d6 <_printf_float+0xc2>
 8003582:	f108 0801 	add.w	r8, r8, #1
 8003586:	e7ec      	b.n	8003562 <_printf_float+0x34e>
 8003588:	4613      	mov	r3, r2
 800358a:	4631      	mov	r1, r6
 800358c:	4642      	mov	r2, r8
 800358e:	4628      	mov	r0, r5
 8003590:	47b8      	blx	r7
 8003592:	3001      	adds	r0, #1
 8003594:	d1c0      	bne.n	8003518 <_printf_float+0x304>
 8003596:	e69e      	b.n	80032d6 <_printf_float+0xc2>
 8003598:	2301      	movs	r3, #1
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	9205      	str	r2, [sp, #20]
 80035a0:	47b8      	blx	r7
 80035a2:	3001      	adds	r0, #1
 80035a4:	f43f ae97 	beq.w	80032d6 <_printf_float+0xc2>
 80035a8:	9a05      	ldr	r2, [sp, #20]
 80035aa:	f10b 0b01 	add.w	fp, fp, #1
 80035ae:	e7b9      	b.n	8003524 <_printf_float+0x310>
 80035b0:	ee18 3a10 	vmov	r3, s16
 80035b4:	4652      	mov	r2, sl
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	d1be      	bne.n	800353e <_printf_float+0x32a>
 80035c0:	e689      	b.n	80032d6 <_printf_float+0xc2>
 80035c2:	9a05      	ldr	r2, [sp, #20]
 80035c4:	464b      	mov	r3, r9
 80035c6:	4442      	add	r2, r8
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	d1c1      	bne.n	8003556 <_printf_float+0x342>
 80035d2:	e680      	b.n	80032d6 <_printf_float+0xc2>
 80035d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035d6:	2a01      	cmp	r2, #1
 80035d8:	dc01      	bgt.n	80035de <_printf_float+0x3ca>
 80035da:	07db      	lsls	r3, r3, #31
 80035dc:	d538      	bpl.n	8003650 <_printf_float+0x43c>
 80035de:	2301      	movs	r3, #1
 80035e0:	4642      	mov	r2, r8
 80035e2:	4631      	mov	r1, r6
 80035e4:	4628      	mov	r0, r5
 80035e6:	47b8      	blx	r7
 80035e8:	3001      	adds	r0, #1
 80035ea:	f43f ae74 	beq.w	80032d6 <_printf_float+0xc2>
 80035ee:	ee18 3a10 	vmov	r3, s16
 80035f2:	4652      	mov	r2, sl
 80035f4:	4631      	mov	r1, r6
 80035f6:	4628      	mov	r0, r5
 80035f8:	47b8      	blx	r7
 80035fa:	3001      	adds	r0, #1
 80035fc:	f43f ae6b 	beq.w	80032d6 <_printf_float+0xc2>
 8003600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003604:	2200      	movs	r2, #0
 8003606:	2300      	movs	r3, #0
 8003608:	f7fd fa86 	bl	8000b18 <__aeabi_dcmpeq>
 800360c:	b9d8      	cbnz	r0, 8003646 <_printf_float+0x432>
 800360e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003610:	f108 0201 	add.w	r2, r8, #1
 8003614:	3b01      	subs	r3, #1
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	47b8      	blx	r7
 800361c:	3001      	adds	r0, #1
 800361e:	d10e      	bne.n	800363e <_printf_float+0x42a>
 8003620:	e659      	b.n	80032d6 <_printf_float+0xc2>
 8003622:	2301      	movs	r3, #1
 8003624:	4652      	mov	r2, sl
 8003626:	4631      	mov	r1, r6
 8003628:	4628      	mov	r0, r5
 800362a:	47b8      	blx	r7
 800362c:	3001      	adds	r0, #1
 800362e:	f43f ae52 	beq.w	80032d6 <_printf_float+0xc2>
 8003632:	f108 0801 	add.w	r8, r8, #1
 8003636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	4543      	cmp	r3, r8
 800363c:	dcf1      	bgt.n	8003622 <_printf_float+0x40e>
 800363e:	464b      	mov	r3, r9
 8003640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003644:	e6dc      	b.n	8003400 <_printf_float+0x1ec>
 8003646:	f04f 0800 	mov.w	r8, #0
 800364a:	f104 0a1a 	add.w	sl, r4, #26
 800364e:	e7f2      	b.n	8003636 <_printf_float+0x422>
 8003650:	2301      	movs	r3, #1
 8003652:	4642      	mov	r2, r8
 8003654:	e7df      	b.n	8003616 <_printf_float+0x402>
 8003656:	2301      	movs	r3, #1
 8003658:	464a      	mov	r2, r9
 800365a:	4631      	mov	r1, r6
 800365c:	4628      	mov	r0, r5
 800365e:	47b8      	blx	r7
 8003660:	3001      	adds	r0, #1
 8003662:	f43f ae38 	beq.w	80032d6 <_printf_float+0xc2>
 8003666:	f108 0801 	add.w	r8, r8, #1
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800366e:	1a5b      	subs	r3, r3, r1
 8003670:	4543      	cmp	r3, r8
 8003672:	dcf0      	bgt.n	8003656 <_printf_float+0x442>
 8003674:	e6fa      	b.n	800346c <_printf_float+0x258>
 8003676:	f04f 0800 	mov.w	r8, #0
 800367a:	f104 0919 	add.w	r9, r4, #25
 800367e:	e7f4      	b.n	800366a <_printf_float+0x456>

08003680 <_printf_common>:
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	4616      	mov	r6, r2
 8003686:	4699      	mov	r9, r3
 8003688:	688a      	ldr	r2, [r1, #8]
 800368a:	690b      	ldr	r3, [r1, #16]
 800368c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003690:	4293      	cmp	r3, r2
 8003692:	bfb8      	it	lt
 8003694:	4613      	movlt	r3, r2
 8003696:	6033      	str	r3, [r6, #0]
 8003698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800369c:	4607      	mov	r7, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	b10a      	cbz	r2, 80036a6 <_printf_common+0x26>
 80036a2:	3301      	adds	r3, #1
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	0699      	lsls	r1, r3, #26
 80036aa:	bf42      	ittt	mi
 80036ac:	6833      	ldrmi	r3, [r6, #0]
 80036ae:	3302      	addmi	r3, #2
 80036b0:	6033      	strmi	r3, [r6, #0]
 80036b2:	6825      	ldr	r5, [r4, #0]
 80036b4:	f015 0506 	ands.w	r5, r5, #6
 80036b8:	d106      	bne.n	80036c8 <_printf_common+0x48>
 80036ba:	f104 0a19 	add.w	sl, r4, #25
 80036be:	68e3      	ldr	r3, [r4, #12]
 80036c0:	6832      	ldr	r2, [r6, #0]
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	42ab      	cmp	r3, r5
 80036c6:	dc26      	bgt.n	8003716 <_printf_common+0x96>
 80036c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036cc:	1e13      	subs	r3, r2, #0
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	bf18      	it	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	0692      	lsls	r2, r2, #26
 80036d6:	d42b      	bmi.n	8003730 <_printf_common+0xb0>
 80036d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036dc:	4649      	mov	r1, r9
 80036de:	4638      	mov	r0, r7
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d01e      	beq.n	8003724 <_printf_common+0xa4>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	68e5      	ldr	r5, [r4, #12]
 80036ea:	6832      	ldr	r2, [r6, #0]
 80036ec:	f003 0306 	and.w	r3, r3, #6
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	bf08      	it	eq
 80036f4:	1aad      	subeq	r5, r5, r2
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6922      	ldr	r2, [r4, #16]
 80036fa:	bf0c      	ite	eq
 80036fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003700:	2500      	movne	r5, #0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfc4      	itt	gt
 8003706:	1a9b      	subgt	r3, r3, r2
 8003708:	18ed      	addgt	r5, r5, r3
 800370a:	2600      	movs	r6, #0
 800370c:	341a      	adds	r4, #26
 800370e:	42b5      	cmp	r5, r6
 8003710:	d11a      	bne.n	8003748 <_printf_common+0xc8>
 8003712:	2000      	movs	r0, #0
 8003714:	e008      	b.n	8003728 <_printf_common+0xa8>
 8003716:	2301      	movs	r3, #1
 8003718:	4652      	mov	r2, sl
 800371a:	4649      	mov	r1, r9
 800371c:	4638      	mov	r0, r7
 800371e:	47c0      	blx	r8
 8003720:	3001      	adds	r0, #1
 8003722:	d103      	bne.n	800372c <_printf_common+0xac>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372c:	3501      	adds	r5, #1
 800372e:	e7c6      	b.n	80036be <_printf_common+0x3e>
 8003730:	18e1      	adds	r1, r4, r3
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	2030      	movs	r0, #48	; 0x30
 8003736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800373a:	4422      	add	r2, r4
 800373c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003744:	3302      	adds	r3, #2
 8003746:	e7c7      	b.n	80036d8 <_printf_common+0x58>
 8003748:	2301      	movs	r3, #1
 800374a:	4622      	mov	r2, r4
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	47c0      	blx	r8
 8003752:	3001      	adds	r0, #1
 8003754:	d0e6      	beq.n	8003724 <_printf_common+0xa4>
 8003756:	3601      	adds	r6, #1
 8003758:	e7d9      	b.n	800370e <_printf_common+0x8e>
	...

0800375c <_printf_i>:
 800375c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	7e0f      	ldrb	r7, [r1, #24]
 8003762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003764:	2f78      	cmp	r7, #120	; 0x78
 8003766:	4691      	mov	r9, r2
 8003768:	4680      	mov	r8, r0
 800376a:	460c      	mov	r4, r1
 800376c:	469a      	mov	sl, r3
 800376e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003772:	d807      	bhi.n	8003784 <_printf_i+0x28>
 8003774:	2f62      	cmp	r7, #98	; 0x62
 8003776:	d80a      	bhi.n	800378e <_printf_i+0x32>
 8003778:	2f00      	cmp	r7, #0
 800377a:	f000 80d8 	beq.w	800392e <_printf_i+0x1d2>
 800377e:	2f58      	cmp	r7, #88	; 0x58
 8003780:	f000 80a3 	beq.w	80038ca <_printf_i+0x16e>
 8003784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800378c:	e03a      	b.n	8003804 <_printf_i+0xa8>
 800378e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003792:	2b15      	cmp	r3, #21
 8003794:	d8f6      	bhi.n	8003784 <_printf_i+0x28>
 8003796:	a101      	add	r1, pc, #4	; (adr r1, 800379c <_printf_i+0x40>)
 8003798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	08003809 	.word	0x08003809
 80037a4:	08003785 	.word	0x08003785
 80037a8:	08003785 	.word	0x08003785
 80037ac:	08003785 	.word	0x08003785
 80037b0:	08003785 	.word	0x08003785
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003785 	.word	0x08003785
 80037bc:	08003785 	.word	0x08003785
 80037c0:	08003785 	.word	0x08003785
 80037c4:	08003785 	.word	0x08003785
 80037c8:	08003915 	.word	0x08003915
 80037cc:	08003839 	.word	0x08003839
 80037d0:	080038f7 	.word	0x080038f7
 80037d4:	08003785 	.word	0x08003785
 80037d8:	08003785 	.word	0x08003785
 80037dc:	08003937 	.word	0x08003937
 80037e0:	08003785 	.word	0x08003785
 80037e4:	08003839 	.word	0x08003839
 80037e8:	08003785 	.word	0x08003785
 80037ec:	08003785 	.word	0x08003785
 80037f0:	080038ff 	.word	0x080038ff
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	602a      	str	r2, [r5, #0]
 80037fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003804:	2301      	movs	r3, #1
 8003806:	e0a3      	b.n	8003950 <_printf_i+0x1f4>
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	6829      	ldr	r1, [r5, #0]
 800380c:	0606      	lsls	r6, r0, #24
 800380e:	f101 0304 	add.w	r3, r1, #4
 8003812:	d50a      	bpl.n	800382a <_printf_i+0xce>
 8003814:	680e      	ldr	r6, [r1, #0]
 8003816:	602b      	str	r3, [r5, #0]
 8003818:	2e00      	cmp	r6, #0
 800381a:	da03      	bge.n	8003824 <_printf_i+0xc8>
 800381c:	232d      	movs	r3, #45	; 0x2d
 800381e:	4276      	negs	r6, r6
 8003820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003824:	485e      	ldr	r0, [pc, #376]	; (80039a0 <_printf_i+0x244>)
 8003826:	230a      	movs	r3, #10
 8003828:	e019      	b.n	800385e <_printf_i+0x102>
 800382a:	680e      	ldr	r6, [r1, #0]
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003832:	bf18      	it	ne
 8003834:	b236      	sxthne	r6, r6
 8003836:	e7ef      	b.n	8003818 <_printf_i+0xbc>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	1d19      	adds	r1, r3, #4
 800383e:	6029      	str	r1, [r5, #0]
 8003840:	0601      	lsls	r1, r0, #24
 8003842:	d501      	bpl.n	8003848 <_printf_i+0xec>
 8003844:	681e      	ldr	r6, [r3, #0]
 8003846:	e002      	b.n	800384e <_printf_i+0xf2>
 8003848:	0646      	lsls	r6, r0, #25
 800384a:	d5fb      	bpl.n	8003844 <_printf_i+0xe8>
 800384c:	881e      	ldrh	r6, [r3, #0]
 800384e:	4854      	ldr	r0, [pc, #336]	; (80039a0 <_printf_i+0x244>)
 8003850:	2f6f      	cmp	r7, #111	; 0x6f
 8003852:	bf0c      	ite	eq
 8003854:	2308      	moveq	r3, #8
 8003856:	230a      	movne	r3, #10
 8003858:	2100      	movs	r1, #0
 800385a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800385e:	6865      	ldr	r5, [r4, #4]
 8003860:	60a5      	str	r5, [r4, #8]
 8003862:	2d00      	cmp	r5, #0
 8003864:	bfa2      	ittt	ge
 8003866:	6821      	ldrge	r1, [r4, #0]
 8003868:	f021 0104 	bicge.w	r1, r1, #4
 800386c:	6021      	strge	r1, [r4, #0]
 800386e:	b90e      	cbnz	r6, 8003874 <_printf_i+0x118>
 8003870:	2d00      	cmp	r5, #0
 8003872:	d04d      	beq.n	8003910 <_printf_i+0x1b4>
 8003874:	4615      	mov	r5, r2
 8003876:	fbb6 f1f3 	udiv	r1, r6, r3
 800387a:	fb03 6711 	mls	r7, r3, r1, r6
 800387e:	5dc7      	ldrb	r7, [r0, r7]
 8003880:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003884:	4637      	mov	r7, r6
 8003886:	42bb      	cmp	r3, r7
 8003888:	460e      	mov	r6, r1
 800388a:	d9f4      	bls.n	8003876 <_printf_i+0x11a>
 800388c:	2b08      	cmp	r3, #8
 800388e:	d10b      	bne.n	80038a8 <_printf_i+0x14c>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	07de      	lsls	r6, r3, #31
 8003894:	d508      	bpl.n	80038a8 <_printf_i+0x14c>
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	6861      	ldr	r1, [r4, #4]
 800389a:	4299      	cmp	r1, r3
 800389c:	bfde      	ittt	le
 800389e:	2330      	movle	r3, #48	; 0x30
 80038a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038a8:	1b52      	subs	r2, r2, r5
 80038aa:	6122      	str	r2, [r4, #16]
 80038ac:	f8cd a000 	str.w	sl, [sp]
 80038b0:	464b      	mov	r3, r9
 80038b2:	aa03      	add	r2, sp, #12
 80038b4:	4621      	mov	r1, r4
 80038b6:	4640      	mov	r0, r8
 80038b8:	f7ff fee2 	bl	8003680 <_printf_common>
 80038bc:	3001      	adds	r0, #1
 80038be:	d14c      	bne.n	800395a <_printf_i+0x1fe>
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c4:	b004      	add	sp, #16
 80038c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ca:	4835      	ldr	r0, [pc, #212]	; (80039a0 <_printf_i+0x244>)
 80038cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038d0:	6829      	ldr	r1, [r5, #0]
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038d8:	6029      	str	r1, [r5, #0]
 80038da:	061d      	lsls	r5, r3, #24
 80038dc:	d514      	bpl.n	8003908 <_printf_i+0x1ac>
 80038de:	07df      	lsls	r7, r3, #31
 80038e0:	bf44      	itt	mi
 80038e2:	f043 0320 	orrmi.w	r3, r3, #32
 80038e6:	6023      	strmi	r3, [r4, #0]
 80038e8:	b91e      	cbnz	r6, 80038f2 <_printf_i+0x196>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f023 0320 	bic.w	r3, r3, #32
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	2310      	movs	r3, #16
 80038f4:	e7b0      	b.n	8003858 <_printf_i+0xfc>
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f043 0320 	orr.w	r3, r3, #32
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	2378      	movs	r3, #120	; 0x78
 8003900:	4828      	ldr	r0, [pc, #160]	; (80039a4 <_printf_i+0x248>)
 8003902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003906:	e7e3      	b.n	80038d0 <_printf_i+0x174>
 8003908:	0659      	lsls	r1, r3, #25
 800390a:	bf48      	it	mi
 800390c:	b2b6      	uxthmi	r6, r6
 800390e:	e7e6      	b.n	80038de <_printf_i+0x182>
 8003910:	4615      	mov	r5, r2
 8003912:	e7bb      	b.n	800388c <_printf_i+0x130>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	6826      	ldr	r6, [r4, #0]
 8003918:	6961      	ldr	r1, [r4, #20]
 800391a:	1d18      	adds	r0, r3, #4
 800391c:	6028      	str	r0, [r5, #0]
 800391e:	0635      	lsls	r5, r6, #24
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	d501      	bpl.n	8003928 <_printf_i+0x1cc>
 8003924:	6019      	str	r1, [r3, #0]
 8003926:	e002      	b.n	800392e <_printf_i+0x1d2>
 8003928:	0670      	lsls	r0, r6, #25
 800392a:	d5fb      	bpl.n	8003924 <_printf_i+0x1c8>
 800392c:	8019      	strh	r1, [r3, #0]
 800392e:	2300      	movs	r3, #0
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	4615      	mov	r5, r2
 8003934:	e7ba      	b.n	80038ac <_printf_i+0x150>
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	1d1a      	adds	r2, r3, #4
 800393a:	602a      	str	r2, [r5, #0]
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	6862      	ldr	r2, [r4, #4]
 8003940:	2100      	movs	r1, #0
 8003942:	4628      	mov	r0, r5
 8003944:	f7fc fc74 	bl	8000230 <memchr>
 8003948:	b108      	cbz	r0, 800394e <_printf_i+0x1f2>
 800394a:	1b40      	subs	r0, r0, r5
 800394c:	6060      	str	r0, [r4, #4]
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	2300      	movs	r3, #0
 8003954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003958:	e7a8      	b.n	80038ac <_printf_i+0x150>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	462a      	mov	r2, r5
 800395e:	4649      	mov	r1, r9
 8003960:	4640      	mov	r0, r8
 8003962:	47d0      	blx	sl
 8003964:	3001      	adds	r0, #1
 8003966:	d0ab      	beq.n	80038c0 <_printf_i+0x164>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	079b      	lsls	r3, r3, #30
 800396c:	d413      	bmi.n	8003996 <_printf_i+0x23a>
 800396e:	68e0      	ldr	r0, [r4, #12]
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	4298      	cmp	r0, r3
 8003974:	bfb8      	it	lt
 8003976:	4618      	movlt	r0, r3
 8003978:	e7a4      	b.n	80038c4 <_printf_i+0x168>
 800397a:	2301      	movs	r3, #1
 800397c:	4632      	mov	r2, r6
 800397e:	4649      	mov	r1, r9
 8003980:	4640      	mov	r0, r8
 8003982:	47d0      	blx	sl
 8003984:	3001      	adds	r0, #1
 8003986:	d09b      	beq.n	80038c0 <_printf_i+0x164>
 8003988:	3501      	adds	r5, #1
 800398a:	68e3      	ldr	r3, [r4, #12]
 800398c:	9903      	ldr	r1, [sp, #12]
 800398e:	1a5b      	subs	r3, r3, r1
 8003990:	42ab      	cmp	r3, r5
 8003992:	dcf2      	bgt.n	800397a <_printf_i+0x21e>
 8003994:	e7eb      	b.n	800396e <_printf_i+0x212>
 8003996:	2500      	movs	r5, #0
 8003998:	f104 0619 	add.w	r6, r4, #25
 800399c:	e7f5      	b.n	800398a <_printf_i+0x22e>
 800399e:	bf00      	nop
 80039a0:	08012518 	.word	0x08012518
 80039a4:	08012529 	.word	0x08012529

080039a8 <setvbuf>:
 80039a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039ac:	461d      	mov	r5, r3
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <setvbuf+0x17c>)
 80039b0:	681f      	ldr	r7, [r3, #0]
 80039b2:	4604      	mov	r4, r0
 80039b4:	460e      	mov	r6, r1
 80039b6:	4690      	mov	r8, r2
 80039b8:	b127      	cbz	r7, 80039c4 <setvbuf+0x1c>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	b913      	cbnz	r3, 80039c4 <setvbuf+0x1c>
 80039be:	4638      	mov	r0, r7
 80039c0:	f001 f942 	bl	8004c48 <__sinit>
 80039c4:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <setvbuf+0x180>)
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d167      	bne.n	8003a9a <setvbuf+0xf2>
 80039ca:	687c      	ldr	r4, [r7, #4]
 80039cc:	f1b8 0f02 	cmp.w	r8, #2
 80039d0:	d006      	beq.n	80039e0 <setvbuf+0x38>
 80039d2:	f1b8 0f01 	cmp.w	r8, #1
 80039d6:	f200 809f 	bhi.w	8003b18 <setvbuf+0x170>
 80039da:	2d00      	cmp	r5, #0
 80039dc:	f2c0 809c 	blt.w	8003b18 <setvbuf+0x170>
 80039e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039e2:	07db      	lsls	r3, r3, #31
 80039e4:	d405      	bmi.n	80039f2 <setvbuf+0x4a>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	0598      	lsls	r0, r3, #22
 80039ea:	d402      	bmi.n	80039f2 <setvbuf+0x4a>
 80039ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ee:	f001 f9e0 	bl	8004db2 <__retarget_lock_acquire_recursive>
 80039f2:	4621      	mov	r1, r4
 80039f4:	4638      	mov	r0, r7
 80039f6:	f001 f893 	bl	8004b20 <_fflush_r>
 80039fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039fc:	b141      	cbz	r1, 8003a10 <setvbuf+0x68>
 80039fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a02:	4299      	cmp	r1, r3
 8003a04:	d002      	beq.n	8003a0c <setvbuf+0x64>
 8003a06:	4638      	mov	r0, r7
 8003a08:	f001 fdf6 	bl	80055f8 <_free_r>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6363      	str	r3, [r4, #52]	; 0x34
 8003a10:	2300      	movs	r3, #0
 8003a12:	61a3      	str	r3, [r4, #24]
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	0619      	lsls	r1, r3, #24
 8003a1a:	d503      	bpl.n	8003a24 <setvbuf+0x7c>
 8003a1c:	6921      	ldr	r1, [r4, #16]
 8003a1e:	4638      	mov	r0, r7
 8003a20:	f001 fdea 	bl	80055f8 <_free_r>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	f1b8 0f02 	cmp.w	r8, #2
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	d06c      	beq.n	8003b10 <setvbuf+0x168>
 8003a36:	ab01      	add	r3, sp, #4
 8003a38:	466a      	mov	r2, sp
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f001 f9ba 	bl	8004db6 <__swhatbuf_r>
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	4318      	orrs	r0, r3
 8003a46:	81a0      	strh	r0, [r4, #12]
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	d130      	bne.n	8003aae <setvbuf+0x106>
 8003a4c:	9d00      	ldr	r5, [sp, #0]
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f001 fa16 	bl	8004e80 <malloc>
 8003a54:	4606      	mov	r6, r0
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d155      	bne.n	8003b06 <setvbuf+0x15e>
 8003a5a:	f8dd 9000 	ldr.w	r9, [sp]
 8003a5e:	45a9      	cmp	r9, r5
 8003a60:	d14a      	bne.n	8003af8 <setvbuf+0x150>
 8003a62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a66:	2200      	movs	r2, #0
 8003a68:	60a2      	str	r2, [r4, #8]
 8003a6a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	6122      	str	r2, [r4, #16]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a78:	6162      	str	r2, [r4, #20]
 8003a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	07d2      	lsls	r2, r2, #31
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	d405      	bmi.n	8003a92 <setvbuf+0xea>
 8003a86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003a8a:	d102      	bne.n	8003a92 <setvbuf+0xea>
 8003a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a8e:	f001 f991 	bl	8004db4 <__retarget_lock_release_recursive>
 8003a92:	4628      	mov	r0, r5
 8003a94:	b003      	add	sp, #12
 8003a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <setvbuf+0x184>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d101      	bne.n	8003aa4 <setvbuf+0xfc>
 8003aa0:	68bc      	ldr	r4, [r7, #8]
 8003aa2:	e793      	b.n	80039cc <setvbuf+0x24>
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <setvbuf+0x188>)
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	bf08      	it	eq
 8003aaa:	68fc      	ldreq	r4, [r7, #12]
 8003aac:	e78e      	b.n	80039cc <setvbuf+0x24>
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	d0cd      	beq.n	8003a4e <setvbuf+0xa6>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	b913      	cbnz	r3, 8003abc <setvbuf+0x114>
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f001 f8c6 	bl	8004c48 <__sinit>
 8003abc:	f1b8 0f01 	cmp.w	r8, #1
 8003ac0:	bf08      	it	eq
 8003ac2:	89a3      	ldrheq	r3, [r4, #12]
 8003ac4:	6026      	str	r6, [r4, #0]
 8003ac6:	bf04      	itt	eq
 8003ac8:	f043 0301 	orreq.w	r3, r3, #1
 8003acc:	81a3      	strheq	r3, [r4, #12]
 8003ace:	89a2      	ldrh	r2, [r4, #12]
 8003ad0:	f012 0308 	ands.w	r3, r2, #8
 8003ad4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003ad8:	d01c      	beq.n	8003b14 <setvbuf+0x16c>
 8003ada:	07d3      	lsls	r3, r2, #31
 8003adc:	bf41      	itttt	mi
 8003ade:	2300      	movmi	r3, #0
 8003ae0:	426d      	negmi	r5, r5
 8003ae2:	60a3      	strmi	r3, [r4, #8]
 8003ae4:	61a5      	strmi	r5, [r4, #24]
 8003ae6:	bf58      	it	pl
 8003ae8:	60a5      	strpl	r5, [r4, #8]
 8003aea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003aec:	f015 0501 	ands.w	r5, r5, #1
 8003af0:	d115      	bne.n	8003b1e <setvbuf+0x176>
 8003af2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003af6:	e7c8      	b.n	8003a8a <setvbuf+0xe2>
 8003af8:	4648      	mov	r0, r9
 8003afa:	f001 f9c1 	bl	8004e80 <malloc>
 8003afe:	4606      	mov	r6, r0
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d0ae      	beq.n	8003a62 <setvbuf+0xba>
 8003b04:	464d      	mov	r5, r9
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	e7d0      	b.n	8003ab2 <setvbuf+0x10a>
 8003b10:	2500      	movs	r5, #0
 8003b12:	e7a8      	b.n	8003a66 <setvbuf+0xbe>
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	e7e8      	b.n	8003aea <setvbuf+0x142>
 8003b18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003b1c:	e7b9      	b.n	8003a92 <setvbuf+0xea>
 8003b1e:	2500      	movs	r5, #0
 8003b20:	e7b7      	b.n	8003a92 <setvbuf+0xea>
 8003b22:	bf00      	nop
 8003b24:	20000018 	.word	0x20000018
 8003b28:	080126c8 	.word	0x080126c8
 8003b2c:	080126e8 	.word	0x080126e8
 8003b30:	080126a8 	.word	0x080126a8

08003b34 <strtok>:
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <strtok+0x5c>)
 8003b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b38:	681e      	ldr	r6, [r3, #0]
 8003b3a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	b9fc      	cbnz	r4, 8003b80 <strtok+0x4c>
 8003b40:	2050      	movs	r0, #80	; 0x50
 8003b42:	9101      	str	r1, [sp, #4]
 8003b44:	f001 f99c 	bl	8004e80 <malloc>
 8003b48:	9901      	ldr	r1, [sp, #4]
 8003b4a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	b920      	cbnz	r0, 8003b5a <strtok+0x26>
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <strtok+0x60>)
 8003b52:	4811      	ldr	r0, [pc, #68]	; (8003b98 <strtok+0x64>)
 8003b54:	2157      	movs	r1, #87	; 0x57
 8003b56:	f000 f8c5 	bl	8003ce4 <__assert_func>
 8003b5a:	e9c0 4400 	strd	r4, r4, [r0]
 8003b5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003b62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003b66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003b6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003b6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003b72:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003b76:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003b7a:	6184      	str	r4, [r0, #24]
 8003b7c:	7704      	strb	r4, [r0, #28]
 8003b7e:	6244      	str	r4, [r0, #36]	; 0x24
 8003b80:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003b82:	2301      	movs	r3, #1
 8003b84:	4628      	mov	r0, r5
 8003b86:	b002      	add	sp, #8
 8003b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b8c:	f000 b806 	b.w	8003b9c <__strtok_r>
 8003b90:	20000018 	.word	0x20000018
 8003b94:	0801253a 	.word	0x0801253a
 8003b98:	08012551 	.word	0x08012551

08003b9c <__strtok_r>:
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b908      	cbnz	r0, 8003ba4 <__strtok_r+0x8>
 8003ba0:	6810      	ldr	r0, [r2, #0]
 8003ba2:	b188      	cbz	r0, 8003bc8 <__strtok_r+0x2c>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003bac:	460f      	mov	r7, r1
 8003bae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003bb2:	b91e      	cbnz	r6, 8003bbc <__strtok_r+0x20>
 8003bb4:	b965      	cbnz	r5, 8003bd0 <__strtok_r+0x34>
 8003bb6:	6015      	str	r5, [r2, #0]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	e005      	b.n	8003bc8 <__strtok_r+0x2c>
 8003bbc:	42b5      	cmp	r5, r6
 8003bbe:	d1f6      	bne.n	8003bae <__strtok_r+0x12>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <__strtok_r+0xa>
 8003bc4:	6014      	str	r4, [r2, #0]
 8003bc6:	7003      	strb	r3, [r0, #0]
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bca:	461c      	mov	r4, r3
 8003bcc:	e00c      	b.n	8003be8 <__strtok_r+0x4c>
 8003bce:	b915      	cbnz	r5, 8003bd6 <__strtok_r+0x3a>
 8003bd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003bd4:	460e      	mov	r6, r1
 8003bd6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003bda:	42ab      	cmp	r3, r5
 8003bdc:	d1f7      	bne.n	8003bce <__strtok_r+0x32>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f3      	beq.n	8003bca <__strtok_r+0x2e>
 8003be2:	2300      	movs	r3, #0
 8003be4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003be8:	6014      	str	r4, [r2, #0]
 8003bea:	e7ed      	b.n	8003bc8 <__strtok_r+0x2c>

08003bec <_strtoul_l.constprop.0>:
 8003bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bf0:	4f36      	ldr	r7, [pc, #216]	; (8003ccc <_strtoul_l.constprop.0+0xe0>)
 8003bf2:	4686      	mov	lr, r0
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bfc:	5de6      	ldrb	r6, [r4, r7]
 8003bfe:	f016 0608 	ands.w	r6, r6, #8
 8003c02:	d1f8      	bne.n	8003bf6 <_strtoul_l.constprop.0+0xa>
 8003c04:	2c2d      	cmp	r4, #45	; 0x2d
 8003c06:	d12f      	bne.n	8003c68 <_strtoul_l.constprop.0+0x7c>
 8003c08:	782c      	ldrb	r4, [r5, #0]
 8003c0a:	2601      	movs	r6, #1
 8003c0c:	1c85      	adds	r5, r0, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d057      	beq.n	8003cc2 <_strtoul_l.constprop.0+0xd6>
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d109      	bne.n	8003c2a <_strtoul_l.constprop.0+0x3e>
 8003c16:	2c30      	cmp	r4, #48	; 0x30
 8003c18:	d107      	bne.n	8003c2a <_strtoul_l.constprop.0+0x3e>
 8003c1a:	7828      	ldrb	r0, [r5, #0]
 8003c1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003c20:	2858      	cmp	r0, #88	; 0x58
 8003c22:	d149      	bne.n	8003cb8 <_strtoul_l.constprop.0+0xcc>
 8003c24:	786c      	ldrb	r4, [r5, #1]
 8003c26:	2310      	movs	r3, #16
 8003c28:	3502      	adds	r5, #2
 8003c2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003c2e:	2700      	movs	r7, #0
 8003c30:	fbb8 f8f3 	udiv	r8, r8, r3
 8003c34:	fb03 f908 	mul.w	r9, r3, r8
 8003c38:	ea6f 0909 	mvn.w	r9, r9
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003c42:	f1bc 0f09 	cmp.w	ip, #9
 8003c46:	d814      	bhi.n	8003c72 <_strtoul_l.constprop.0+0x86>
 8003c48:	4664      	mov	r4, ip
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	dd22      	ble.n	8003c94 <_strtoul_l.constprop.0+0xa8>
 8003c4e:	2f00      	cmp	r7, #0
 8003c50:	db1d      	blt.n	8003c8e <_strtoul_l.constprop.0+0xa2>
 8003c52:	4580      	cmp	r8, r0
 8003c54:	d31b      	bcc.n	8003c8e <_strtoul_l.constprop.0+0xa2>
 8003c56:	d101      	bne.n	8003c5c <_strtoul_l.constprop.0+0x70>
 8003c58:	45a1      	cmp	r9, r4
 8003c5a:	db18      	blt.n	8003c8e <_strtoul_l.constprop.0+0xa2>
 8003c5c:	fb00 4003 	mla	r0, r0, r3, r4
 8003c60:	2701      	movs	r7, #1
 8003c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c66:	e7ea      	b.n	8003c3e <_strtoul_l.constprop.0+0x52>
 8003c68:	2c2b      	cmp	r4, #43	; 0x2b
 8003c6a:	bf04      	itt	eq
 8003c6c:	782c      	ldrbeq	r4, [r5, #0]
 8003c6e:	1c85      	addeq	r5, r0, #2
 8003c70:	e7cd      	b.n	8003c0e <_strtoul_l.constprop.0+0x22>
 8003c72:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003c76:	f1bc 0f19 	cmp.w	ip, #25
 8003c7a:	d801      	bhi.n	8003c80 <_strtoul_l.constprop.0+0x94>
 8003c7c:	3c37      	subs	r4, #55	; 0x37
 8003c7e:	e7e4      	b.n	8003c4a <_strtoul_l.constprop.0+0x5e>
 8003c80:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003c84:	f1bc 0f19 	cmp.w	ip, #25
 8003c88:	d804      	bhi.n	8003c94 <_strtoul_l.constprop.0+0xa8>
 8003c8a:	3c57      	subs	r4, #87	; 0x57
 8003c8c:	e7dd      	b.n	8003c4a <_strtoul_l.constprop.0+0x5e>
 8003c8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003c92:	e7e6      	b.n	8003c62 <_strtoul_l.constprop.0+0x76>
 8003c94:	2f00      	cmp	r7, #0
 8003c96:	da07      	bge.n	8003ca8 <_strtoul_l.constprop.0+0xbc>
 8003c98:	2322      	movs	r3, #34	; 0x22
 8003c9a:	f8ce 3000 	str.w	r3, [lr]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca2:	b932      	cbnz	r2, 8003cb2 <_strtoul_l.constprop.0+0xc6>
 8003ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ca8:	b106      	cbz	r6, 8003cac <_strtoul_l.constprop.0+0xc0>
 8003caa:	4240      	negs	r0, r0
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d0f9      	beq.n	8003ca4 <_strtoul_l.constprop.0+0xb8>
 8003cb0:	b107      	cbz	r7, 8003cb4 <_strtoul_l.constprop.0+0xc8>
 8003cb2:	1e69      	subs	r1, r5, #1
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	e7f5      	b.n	8003ca4 <_strtoul_l.constprop.0+0xb8>
 8003cb8:	2430      	movs	r4, #48	; 0x30
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1b5      	bne.n	8003c2a <_strtoul_l.constprop.0+0x3e>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	e7b3      	b.n	8003c2a <_strtoul_l.constprop.0+0x3e>
 8003cc2:	2c30      	cmp	r4, #48	; 0x30
 8003cc4:	d0a9      	beq.n	8003c1a <_strtoul_l.constprop.0+0x2e>
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	e7af      	b.n	8003c2a <_strtoul_l.constprop.0+0x3e>
 8003cca:	bf00      	nop
 8003ccc:	08012402 	.word	0x08012402

08003cd0 <strtoul>:
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <strtoul+0x10>)
 8003cd8:	6800      	ldr	r0, [r0, #0]
 8003cda:	f7ff bf87 	b.w	8003bec <_strtoul_l.constprop.0>
 8003cde:	bf00      	nop
 8003ce0:	20000018 	.word	0x20000018

08003ce4 <__assert_func>:
 8003ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ce6:	4614      	mov	r4, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <__assert_func+0x2c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4605      	mov	r5, r0
 8003cf0:	68d8      	ldr	r0, [r3, #12]
 8003cf2:	b14c      	cbz	r4, 8003d08 <__assert_func+0x24>
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <__assert_func+0x30>)
 8003cf6:	9100      	str	r1, [sp, #0]
 8003cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cfc:	4906      	ldr	r1, [pc, #24]	; (8003d18 <__assert_func+0x34>)
 8003cfe:	462b      	mov	r3, r5
 8003d00:	f001 f820 	bl	8004d44 <fiprintf>
 8003d04:	f001 ff8a 	bl	8005c1c <abort>
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <__assert_func+0x38>)
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	e7f3      	b.n	8003cf6 <__assert_func+0x12>
 8003d0e:	bf00      	nop
 8003d10:	20000018 	.word	0x20000018
 8003d14:	080125d0 	.word	0x080125d0
 8003d18:	080125dd 	.word	0x080125dd
 8003d1c:	08008ec8 	.word	0x08008ec8

08003d20 <quorem>:
 8003d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	6903      	ldr	r3, [r0, #16]
 8003d26:	690c      	ldr	r4, [r1, #16]
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	4607      	mov	r7, r0
 8003d2c:	f2c0 8081 	blt.w	8003e32 <quorem+0x112>
 8003d30:	3c01      	subs	r4, #1
 8003d32:	f101 0814 	add.w	r8, r1, #20
 8003d36:	f100 0514 	add.w	r5, r0, #20
 8003d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d58:	d331      	bcc.n	8003dbe <quorem+0x9e>
 8003d5a:	f04f 0e00 	mov.w	lr, #0
 8003d5e:	4640      	mov	r0, r8
 8003d60:	46ac      	mov	ip, r5
 8003d62:	46f2      	mov	sl, lr
 8003d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d68:	b293      	uxth	r3, r2
 8003d6a:	fb06 e303 	mla	r3, r6, r3, lr
 8003d6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	ebaa 0303 	sub.w	r3, sl, r3
 8003d78:	0c12      	lsrs	r2, r2, #16
 8003d7a:	f8dc a000 	ldr.w	sl, [ip]
 8003d7e:	fb06 e202 	mla	r2, r6, r2, lr
 8003d82:	fa13 f38a 	uxtah	r3, r3, sl
 8003d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d8a:	fa1f fa82 	uxth.w	sl, r2
 8003d8e:	f8dc 2000 	ldr.w	r2, [ip]
 8003d92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003d96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003da0:	4581      	cmp	r9, r0
 8003da2:	f84c 3b04 	str.w	r3, [ip], #4
 8003da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003daa:	d2db      	bcs.n	8003d64 <quorem+0x44>
 8003dac:	f855 300b 	ldr.w	r3, [r5, fp]
 8003db0:	b92b      	cbnz	r3, 8003dbe <quorem+0x9e>
 8003db2:	9b01      	ldr	r3, [sp, #4]
 8003db4:	3b04      	subs	r3, #4
 8003db6:	429d      	cmp	r5, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	d32e      	bcc.n	8003e1a <quorem+0xfa>
 8003dbc:	613c      	str	r4, [r7, #16]
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f001 fb08 	bl	80053d4 <__mcmp>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	db24      	blt.n	8003e12 <quorem+0xf2>
 8003dc8:	3601      	adds	r6, #1
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f04f 0c00 	mov.w	ip, #0
 8003dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8003dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8003dd8:	b293      	uxth	r3, r2
 8003dda:	ebac 0303 	sub.w	r3, ip, r3
 8003dde:	0c12      	lsrs	r2, r2, #16
 8003de0:	fa13 f38e 	uxtah	r3, r3, lr
 8003de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003df2:	45c1      	cmp	r9, r8
 8003df4:	f840 3b04 	str.w	r3, [r0], #4
 8003df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003dfc:	d2e8      	bcs.n	8003dd0 <quorem+0xb0>
 8003dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e06:	b922      	cbnz	r2, 8003e12 <quorem+0xf2>
 8003e08:	3b04      	subs	r3, #4
 8003e0a:	429d      	cmp	r5, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	d30a      	bcc.n	8003e26 <quorem+0x106>
 8003e10:	613c      	str	r4, [r7, #16]
 8003e12:	4630      	mov	r0, r6
 8003e14:	b003      	add	sp, #12
 8003e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1cc      	bne.n	8003dbc <quorem+0x9c>
 8003e22:	3c01      	subs	r4, #1
 8003e24:	e7c7      	b.n	8003db6 <quorem+0x96>
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	3b04      	subs	r3, #4
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	d1f0      	bne.n	8003e10 <quorem+0xf0>
 8003e2e:	3c01      	subs	r4, #1
 8003e30:	e7eb      	b.n	8003e0a <quorem+0xea>
 8003e32:	2000      	movs	r0, #0
 8003e34:	e7ee      	b.n	8003e14 <quorem+0xf4>
	...

08003e38 <_dtoa_r>:
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	ed2d 8b04 	vpush	{d8-d9}
 8003e40:	ec57 6b10 	vmov	r6, r7, d0
 8003e44:	b093      	sub	sp, #76	; 0x4c
 8003e46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003e4c:	9106      	str	r1, [sp, #24]
 8003e4e:	ee10 aa10 	vmov	sl, s0
 8003e52:	4604      	mov	r4, r0
 8003e54:	9209      	str	r2, [sp, #36]	; 0x24
 8003e56:	930c      	str	r3, [sp, #48]	; 0x30
 8003e58:	46bb      	mov	fp, r7
 8003e5a:	b975      	cbnz	r5, 8003e7a <_dtoa_r+0x42>
 8003e5c:	2010      	movs	r0, #16
 8003e5e:	f001 f80f 	bl	8004e80 <malloc>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6260      	str	r0, [r4, #36]	; 0x24
 8003e66:	b920      	cbnz	r0, 8003e72 <_dtoa_r+0x3a>
 8003e68:	4ba7      	ldr	r3, [pc, #668]	; (8004108 <_dtoa_r+0x2d0>)
 8003e6a:	21ea      	movs	r1, #234	; 0xea
 8003e6c:	48a7      	ldr	r0, [pc, #668]	; (800410c <_dtoa_r+0x2d4>)
 8003e6e:	f7ff ff39 	bl	8003ce4 <__assert_func>
 8003e72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e76:	6005      	str	r5, [r0, #0]
 8003e78:	60c5      	str	r5, [r0, #12]
 8003e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	b151      	cbz	r1, 8003e96 <_dtoa_r+0x5e>
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	604a      	str	r2, [r1, #4]
 8003e84:	2301      	movs	r3, #1
 8003e86:	4093      	lsls	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f001 f860 	bl	8004f50 <_Bfree>
 8003e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	1e3b      	subs	r3, r7, #0
 8003e98:	bfaa      	itet	ge
 8003e9a:	2300      	movge	r3, #0
 8003e9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003ea0:	f8c8 3000 	strge.w	r3, [r8]
 8003ea4:	4b9a      	ldr	r3, [pc, #616]	; (8004110 <_dtoa_r+0x2d8>)
 8003ea6:	bfbc      	itt	lt
 8003ea8:	2201      	movlt	r2, #1
 8003eaa:	f8c8 2000 	strlt.w	r2, [r8]
 8003eae:	ea33 030b 	bics.w	r3, r3, fp
 8003eb2:	d11b      	bne.n	8003eec <_dtoa_r+0xb4>
 8003eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003ec0:	4333      	orrs	r3, r6
 8003ec2:	f000 8592 	beq.w	80049ea <_dtoa_r+0xbb2>
 8003ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ec8:	b963      	cbnz	r3, 8003ee4 <_dtoa_r+0xac>
 8003eca:	4b92      	ldr	r3, [pc, #584]	; (8004114 <_dtoa_r+0x2dc>)
 8003ecc:	e022      	b.n	8003f14 <_dtoa_r+0xdc>
 8003ece:	4b92      	ldr	r3, [pc, #584]	; (8004118 <_dtoa_r+0x2e0>)
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	9801      	ldr	r0, [sp, #4]
 8003eda:	b013      	add	sp, #76	; 0x4c
 8003edc:	ecbd 8b04 	vpop	{d8-d9}
 8003ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee4:	4b8b      	ldr	r3, [pc, #556]	; (8004114 <_dtoa_r+0x2dc>)
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	3303      	adds	r3, #3
 8003eea:	e7f3      	b.n	8003ed4 <_dtoa_r+0x9c>
 8003eec:	2200      	movs	r2, #0
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4650      	mov	r0, sl
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	f7fc fe10 	bl	8000b18 <__aeabi_dcmpeq>
 8003ef8:	ec4b ab19 	vmov	d9, sl, fp
 8003efc:	4680      	mov	r8, r0
 8003efe:	b158      	cbz	r0, 8003f18 <_dtoa_r+0xe0>
 8003f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f02:	2301      	movs	r3, #1
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 856b 	beq.w	80049e4 <_dtoa_r+0xbac>
 8003f0e:	4883      	ldr	r0, [pc, #524]	; (800411c <_dtoa_r+0x2e4>)
 8003f10:	6018      	str	r0, [r3, #0]
 8003f12:	1e43      	subs	r3, r0, #1
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	e7df      	b.n	8003ed8 <_dtoa_r+0xa0>
 8003f18:	ec4b ab10 	vmov	d0, sl, fp
 8003f1c:	aa10      	add	r2, sp, #64	; 0x40
 8003f1e:	a911      	add	r1, sp, #68	; 0x44
 8003f20:	4620      	mov	r0, r4
 8003f22:	f001 fafd 	bl	8005520 <__d2b>
 8003f26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003f2a:	ee08 0a10 	vmov	s16, r0
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	f000 8084 	beq.w	800403c <_dtoa_r+0x204>
 8003f34:	ee19 3a90 	vmov	r3, s19
 8003f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003f40:	4656      	mov	r6, sl
 8003f42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003f4e:	4b74      	ldr	r3, [pc, #464]	; (8004120 <_dtoa_r+0x2e8>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	4630      	mov	r0, r6
 8003f54:	4639      	mov	r1, r7
 8003f56:	f7fc f9bf 	bl	80002d8 <__aeabi_dsub>
 8003f5a:	a365      	add	r3, pc, #404	; (adr r3, 80040f0 <_dtoa_r+0x2b8>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fb72 	bl	8000648 <__aeabi_dmul>
 8003f64:	a364      	add	r3, pc, #400	; (adr r3, 80040f8 <_dtoa_r+0x2c0>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc f9b7 	bl	80002dc <__adddf3>
 8003f6e:	4606      	mov	r6, r0
 8003f70:	4628      	mov	r0, r5
 8003f72:	460f      	mov	r7, r1
 8003f74:	f7fc fafe 	bl	8000574 <__aeabi_i2d>
 8003f78:	a361      	add	r3, pc, #388	; (adr r3, 8004100 <_dtoa_r+0x2c8>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc fb63 	bl	8000648 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4630      	mov	r0, r6
 8003f88:	4639      	mov	r1, r7
 8003f8a:	f7fc f9a7 	bl	80002dc <__adddf3>
 8003f8e:	4606      	mov	r6, r0
 8003f90:	460f      	mov	r7, r1
 8003f92:	f7fc fe09 	bl	8000ba8 <__aeabi_d2iz>
 8003f96:	2200      	movs	r2, #0
 8003f98:	9000      	str	r0, [sp, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	f7fc fdc4 	bl	8000b2c <__aeabi_dcmplt>
 8003fa4:	b150      	cbz	r0, 8003fbc <_dtoa_r+0x184>
 8003fa6:	9800      	ldr	r0, [sp, #0]
 8003fa8:	f7fc fae4 	bl	8000574 <__aeabi_i2d>
 8003fac:	4632      	mov	r2, r6
 8003fae:	463b      	mov	r3, r7
 8003fb0:	f7fc fdb2 	bl	8000b18 <__aeabi_dcmpeq>
 8003fb4:	b910      	cbnz	r0, 8003fbc <_dtoa_r+0x184>
 8003fb6:	9b00      	ldr	r3, [sp, #0]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	9b00      	ldr	r3, [sp, #0]
 8003fbe:	2b16      	cmp	r3, #22
 8003fc0:	d85a      	bhi.n	8004078 <_dtoa_r+0x240>
 8003fc2:	9a00      	ldr	r2, [sp, #0]
 8003fc4:	4b57      	ldr	r3, [pc, #348]	; (8004124 <_dtoa_r+0x2ec>)
 8003fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	ec51 0b19 	vmov	r0, r1, d9
 8003fd2:	f7fc fdab 	bl	8000b2c <__aeabi_dcmplt>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d050      	beq.n	800407c <_dtoa_r+0x244>
 8003fda:	9b00      	ldr	r3, [sp, #0]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fe6:	1b5d      	subs	r5, r3, r5
 8003fe8:	1e6b      	subs	r3, r5, #1
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	bf45      	ittet	mi
 8003fee:	f1c5 0301 	rsbmi	r3, r5, #1
 8003ff2:	9304      	strmi	r3, [sp, #16]
 8003ff4:	2300      	movpl	r3, #0
 8003ff6:	2300      	movmi	r3, #0
 8003ff8:	bf4c      	ite	mi
 8003ffa:	9305      	strmi	r3, [sp, #20]
 8003ffc:	9304      	strpl	r3, [sp, #16]
 8003ffe:	9b00      	ldr	r3, [sp, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	db3d      	blt.n	8004080 <_dtoa_r+0x248>
 8004004:	9b05      	ldr	r3, [sp, #20]
 8004006:	9a00      	ldr	r2, [sp, #0]
 8004008:	920a      	str	r2, [sp, #40]	; 0x28
 800400a:	4413      	add	r3, r2
 800400c:	9305      	str	r3, [sp, #20]
 800400e:	2300      	movs	r3, #0
 8004010:	9307      	str	r3, [sp, #28]
 8004012:	9b06      	ldr	r3, [sp, #24]
 8004014:	2b09      	cmp	r3, #9
 8004016:	f200 8089 	bhi.w	800412c <_dtoa_r+0x2f4>
 800401a:	2b05      	cmp	r3, #5
 800401c:	bfc4      	itt	gt
 800401e:	3b04      	subgt	r3, #4
 8004020:	9306      	strgt	r3, [sp, #24]
 8004022:	9b06      	ldr	r3, [sp, #24]
 8004024:	f1a3 0302 	sub.w	r3, r3, #2
 8004028:	bfcc      	ite	gt
 800402a:	2500      	movgt	r5, #0
 800402c:	2501      	movle	r5, #1
 800402e:	2b03      	cmp	r3, #3
 8004030:	f200 8087 	bhi.w	8004142 <_dtoa_r+0x30a>
 8004034:	e8df f003 	tbb	[pc, r3]
 8004038:	59383a2d 	.word	0x59383a2d
 800403c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004040:	441d      	add	r5, r3
 8004042:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004046:	2b20      	cmp	r3, #32
 8004048:	bfc1      	itttt	gt
 800404a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800404e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004052:	fa0b f303 	lslgt.w	r3, fp, r3
 8004056:	fa26 f000 	lsrgt.w	r0, r6, r0
 800405a:	bfda      	itte	le
 800405c:	f1c3 0320 	rsble	r3, r3, #32
 8004060:	fa06 f003 	lslle.w	r0, r6, r3
 8004064:	4318      	orrgt	r0, r3
 8004066:	f7fc fa75 	bl	8000554 <__aeabi_ui2d>
 800406a:	2301      	movs	r3, #1
 800406c:	4606      	mov	r6, r0
 800406e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004072:	3d01      	subs	r5, #1
 8004074:	930e      	str	r3, [sp, #56]	; 0x38
 8004076:	e76a      	b.n	8003f4e <_dtoa_r+0x116>
 8004078:	2301      	movs	r3, #1
 800407a:	e7b2      	b.n	8003fe2 <_dtoa_r+0x1aa>
 800407c:	900b      	str	r0, [sp, #44]	; 0x2c
 800407e:	e7b1      	b.n	8003fe4 <_dtoa_r+0x1ac>
 8004080:	9b04      	ldr	r3, [sp, #16]
 8004082:	9a00      	ldr	r2, [sp, #0]
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	4253      	negs	r3, r2
 800408a:	9307      	str	r3, [sp, #28]
 800408c:	2300      	movs	r3, #0
 800408e:	930a      	str	r3, [sp, #40]	; 0x28
 8004090:	e7bf      	b.n	8004012 <_dtoa_r+0x1da>
 8004092:	2300      	movs	r3, #0
 8004094:	9308      	str	r3, [sp, #32]
 8004096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	dc55      	bgt.n	8004148 <_dtoa_r+0x310>
 800409c:	2301      	movs	r3, #1
 800409e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80040a2:	461a      	mov	r2, r3
 80040a4:	9209      	str	r2, [sp, #36]	; 0x24
 80040a6:	e00c      	b.n	80040c2 <_dtoa_r+0x28a>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e7f3      	b.n	8004094 <_dtoa_r+0x25c>
 80040ac:	2300      	movs	r3, #0
 80040ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b0:	9308      	str	r3, [sp, #32]
 80040b2:	9b00      	ldr	r3, [sp, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	9302      	str	r3, [sp, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	9303      	str	r3, [sp, #12]
 80040be:	bfb8      	it	lt
 80040c0:	2301      	movlt	r3, #1
 80040c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80040c4:	2200      	movs	r2, #0
 80040c6:	6042      	str	r2, [r0, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	f102 0614 	add.w	r6, r2, #20
 80040ce:	429e      	cmp	r6, r3
 80040d0:	6841      	ldr	r1, [r0, #4]
 80040d2:	d93d      	bls.n	8004150 <_dtoa_r+0x318>
 80040d4:	4620      	mov	r0, r4
 80040d6:	f000 fefb 	bl	8004ed0 <_Balloc>
 80040da:	9001      	str	r0, [sp, #4]
 80040dc:	2800      	cmp	r0, #0
 80040de:	d13b      	bne.n	8004158 <_dtoa_r+0x320>
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <_dtoa_r+0x2f0>)
 80040e2:	4602      	mov	r2, r0
 80040e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80040e8:	e6c0      	b.n	8003e6c <_dtoa_r+0x34>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e7df      	b.n	80040ae <_dtoa_r+0x276>
 80040ee:	bf00      	nop
 80040f0:	636f4361 	.word	0x636f4361
 80040f4:	3fd287a7 	.word	0x3fd287a7
 80040f8:	8b60c8b3 	.word	0x8b60c8b3
 80040fc:	3fc68a28 	.word	0x3fc68a28
 8004100:	509f79fb 	.word	0x509f79fb
 8004104:	3fd34413 	.word	0x3fd34413
 8004108:	0801253a 	.word	0x0801253a
 800410c:	08012619 	.word	0x08012619
 8004110:	7ff00000 	.word	0x7ff00000
 8004114:	08012615 	.word	0x08012615
 8004118:	0801260c 	.word	0x0801260c
 800411c:	08008660 	.word	0x08008660
 8004120:	3ff80000 	.word	0x3ff80000
 8004124:	080127b8 	.word	0x080127b8
 8004128:	08012696 	.word	0x08012696
 800412c:	2501      	movs	r5, #1
 800412e:	2300      	movs	r3, #0
 8004130:	9306      	str	r3, [sp, #24]
 8004132:	9508      	str	r5, [sp, #32]
 8004134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004138:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800413c:	2200      	movs	r2, #0
 800413e:	2312      	movs	r3, #18
 8004140:	e7b0      	b.n	80040a4 <_dtoa_r+0x26c>
 8004142:	2301      	movs	r3, #1
 8004144:	9308      	str	r3, [sp, #32]
 8004146:	e7f5      	b.n	8004134 <_dtoa_r+0x2fc>
 8004148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800414e:	e7b8      	b.n	80040c2 <_dtoa_r+0x28a>
 8004150:	3101      	adds	r1, #1
 8004152:	6041      	str	r1, [r0, #4]
 8004154:	0052      	lsls	r2, r2, #1
 8004156:	e7b8      	b.n	80040ca <_dtoa_r+0x292>
 8004158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800415a:	9a01      	ldr	r2, [sp, #4]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	9b03      	ldr	r3, [sp, #12]
 8004160:	2b0e      	cmp	r3, #14
 8004162:	f200 809d 	bhi.w	80042a0 <_dtoa_r+0x468>
 8004166:	2d00      	cmp	r5, #0
 8004168:	f000 809a 	beq.w	80042a0 <_dtoa_r+0x468>
 800416c:	9b00      	ldr	r3, [sp, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dd32      	ble.n	80041d8 <_dtoa_r+0x3a0>
 8004172:	4ab7      	ldr	r2, [pc, #732]	; (8004450 <_dtoa_r+0x618>)
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800417c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004180:	9b00      	ldr	r3, [sp, #0]
 8004182:	05d8      	lsls	r0, r3, #23
 8004184:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004188:	d516      	bpl.n	80041b8 <_dtoa_r+0x380>
 800418a:	4bb2      	ldr	r3, [pc, #712]	; (8004454 <_dtoa_r+0x61c>)
 800418c:	ec51 0b19 	vmov	r0, r1, d9
 8004190:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004194:	f7fc fb82 	bl	800089c <__aeabi_ddiv>
 8004198:	f007 070f 	and.w	r7, r7, #15
 800419c:	4682      	mov	sl, r0
 800419e:	468b      	mov	fp, r1
 80041a0:	2503      	movs	r5, #3
 80041a2:	4eac      	ldr	r6, [pc, #688]	; (8004454 <_dtoa_r+0x61c>)
 80041a4:	b957      	cbnz	r7, 80041bc <_dtoa_r+0x384>
 80041a6:	4642      	mov	r2, r8
 80041a8:	464b      	mov	r3, r9
 80041aa:	4650      	mov	r0, sl
 80041ac:	4659      	mov	r1, fp
 80041ae:	f7fc fb75 	bl	800089c <__aeabi_ddiv>
 80041b2:	4682      	mov	sl, r0
 80041b4:	468b      	mov	fp, r1
 80041b6:	e028      	b.n	800420a <_dtoa_r+0x3d2>
 80041b8:	2502      	movs	r5, #2
 80041ba:	e7f2      	b.n	80041a2 <_dtoa_r+0x36a>
 80041bc:	07f9      	lsls	r1, r7, #31
 80041be:	d508      	bpl.n	80041d2 <_dtoa_r+0x39a>
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041c8:	f7fc fa3e 	bl	8000648 <__aeabi_dmul>
 80041cc:	3501      	adds	r5, #1
 80041ce:	4680      	mov	r8, r0
 80041d0:	4689      	mov	r9, r1
 80041d2:	107f      	asrs	r7, r7, #1
 80041d4:	3608      	adds	r6, #8
 80041d6:	e7e5      	b.n	80041a4 <_dtoa_r+0x36c>
 80041d8:	f000 809b 	beq.w	8004312 <_dtoa_r+0x4da>
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	4f9d      	ldr	r7, [pc, #628]	; (8004454 <_dtoa_r+0x61c>)
 80041e0:	425e      	negs	r6, r3
 80041e2:	4b9b      	ldr	r3, [pc, #620]	; (8004450 <_dtoa_r+0x618>)
 80041e4:	f006 020f 	and.w	r2, r6, #15
 80041e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	ec51 0b19 	vmov	r0, r1, d9
 80041f4:	f7fc fa28 	bl	8000648 <__aeabi_dmul>
 80041f8:	1136      	asrs	r6, r6, #4
 80041fa:	4682      	mov	sl, r0
 80041fc:	468b      	mov	fp, r1
 80041fe:	2300      	movs	r3, #0
 8004200:	2502      	movs	r5, #2
 8004202:	2e00      	cmp	r6, #0
 8004204:	d17a      	bne.n	80042fc <_dtoa_r+0x4c4>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1d3      	bne.n	80041b2 <_dtoa_r+0x37a>
 800420a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8082 	beq.w	8004316 <_dtoa_r+0x4de>
 8004212:	4b91      	ldr	r3, [pc, #580]	; (8004458 <_dtoa_r+0x620>)
 8004214:	2200      	movs	r2, #0
 8004216:	4650      	mov	r0, sl
 8004218:	4659      	mov	r1, fp
 800421a:	f7fc fc87 	bl	8000b2c <__aeabi_dcmplt>
 800421e:	2800      	cmp	r0, #0
 8004220:	d079      	beq.n	8004316 <_dtoa_r+0x4de>
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d076      	beq.n	8004316 <_dtoa_r+0x4de>
 8004228:	9b02      	ldr	r3, [sp, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	dd36      	ble.n	800429c <_dtoa_r+0x464>
 800422e:	9b00      	ldr	r3, [sp, #0]
 8004230:	4650      	mov	r0, sl
 8004232:	4659      	mov	r1, fp
 8004234:	1e5f      	subs	r7, r3, #1
 8004236:	2200      	movs	r2, #0
 8004238:	4b88      	ldr	r3, [pc, #544]	; (800445c <_dtoa_r+0x624>)
 800423a:	f7fc fa05 	bl	8000648 <__aeabi_dmul>
 800423e:	9e02      	ldr	r6, [sp, #8]
 8004240:	4682      	mov	sl, r0
 8004242:	468b      	mov	fp, r1
 8004244:	3501      	adds	r5, #1
 8004246:	4628      	mov	r0, r5
 8004248:	f7fc f994 	bl	8000574 <__aeabi_i2d>
 800424c:	4652      	mov	r2, sl
 800424e:	465b      	mov	r3, fp
 8004250:	f7fc f9fa 	bl	8000648 <__aeabi_dmul>
 8004254:	4b82      	ldr	r3, [pc, #520]	; (8004460 <_dtoa_r+0x628>)
 8004256:	2200      	movs	r2, #0
 8004258:	f7fc f840 	bl	80002dc <__adddf3>
 800425c:	46d0      	mov	r8, sl
 800425e:	46d9      	mov	r9, fp
 8004260:	4682      	mov	sl, r0
 8004262:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004266:	2e00      	cmp	r6, #0
 8004268:	d158      	bne.n	800431c <_dtoa_r+0x4e4>
 800426a:	4b7e      	ldr	r3, [pc, #504]	; (8004464 <_dtoa_r+0x62c>)
 800426c:	2200      	movs	r2, #0
 800426e:	4640      	mov	r0, r8
 8004270:	4649      	mov	r1, r9
 8004272:	f7fc f831 	bl	80002d8 <__aeabi_dsub>
 8004276:	4652      	mov	r2, sl
 8004278:	465b      	mov	r3, fp
 800427a:	4680      	mov	r8, r0
 800427c:	4689      	mov	r9, r1
 800427e:	f7fc fc73 	bl	8000b68 <__aeabi_dcmpgt>
 8004282:	2800      	cmp	r0, #0
 8004284:	f040 8295 	bne.w	80047b2 <_dtoa_r+0x97a>
 8004288:	4652      	mov	r2, sl
 800428a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f7fc fc4b 	bl	8000b2c <__aeabi_dcmplt>
 8004296:	2800      	cmp	r0, #0
 8004298:	f040 8289 	bne.w	80047ae <_dtoa_r+0x976>
 800429c:	ec5b ab19 	vmov	sl, fp, d9
 80042a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f2c0 8148 	blt.w	8004538 <_dtoa_r+0x700>
 80042a8:	9a00      	ldr	r2, [sp, #0]
 80042aa:	2a0e      	cmp	r2, #14
 80042ac:	f300 8144 	bgt.w	8004538 <_dtoa_r+0x700>
 80042b0:	4b67      	ldr	r3, [pc, #412]	; (8004450 <_dtoa_r+0x618>)
 80042b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f280 80d5 	bge.w	800446c <_dtoa_r+0x634>
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f300 80d1 	bgt.w	800446c <_dtoa_r+0x634>
 80042ca:	f040 826f 	bne.w	80047ac <_dtoa_r+0x974>
 80042ce:	4b65      	ldr	r3, [pc, #404]	; (8004464 <_dtoa_r+0x62c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	4640      	mov	r0, r8
 80042d4:	4649      	mov	r1, r9
 80042d6:	f7fc f9b7 	bl	8000648 <__aeabi_dmul>
 80042da:	4652      	mov	r2, sl
 80042dc:	465b      	mov	r3, fp
 80042de:	f7fc fc39 	bl	8000b54 <__aeabi_dcmpge>
 80042e2:	9e03      	ldr	r6, [sp, #12]
 80042e4:	4637      	mov	r7, r6
 80042e6:	2800      	cmp	r0, #0
 80042e8:	f040 8245 	bne.w	8004776 <_dtoa_r+0x93e>
 80042ec:	9d01      	ldr	r5, [sp, #4]
 80042ee:	2331      	movs	r3, #49	; 0x31
 80042f0:	f805 3b01 	strb.w	r3, [r5], #1
 80042f4:	9b00      	ldr	r3, [sp, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	e240      	b.n	800477e <_dtoa_r+0x946>
 80042fc:	07f2      	lsls	r2, r6, #31
 80042fe:	d505      	bpl.n	800430c <_dtoa_r+0x4d4>
 8004300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004304:	f7fc f9a0 	bl	8000648 <__aeabi_dmul>
 8004308:	3501      	adds	r5, #1
 800430a:	2301      	movs	r3, #1
 800430c:	1076      	asrs	r6, r6, #1
 800430e:	3708      	adds	r7, #8
 8004310:	e777      	b.n	8004202 <_dtoa_r+0x3ca>
 8004312:	2502      	movs	r5, #2
 8004314:	e779      	b.n	800420a <_dtoa_r+0x3d2>
 8004316:	9f00      	ldr	r7, [sp, #0]
 8004318:	9e03      	ldr	r6, [sp, #12]
 800431a:	e794      	b.n	8004246 <_dtoa_r+0x40e>
 800431c:	9901      	ldr	r1, [sp, #4]
 800431e:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <_dtoa_r+0x618>)
 8004320:	4431      	add	r1, r6
 8004322:	910d      	str	r1, [sp, #52]	; 0x34
 8004324:	9908      	ldr	r1, [sp, #32]
 8004326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800432a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800432e:	2900      	cmp	r1, #0
 8004330:	d043      	beq.n	80043ba <_dtoa_r+0x582>
 8004332:	494d      	ldr	r1, [pc, #308]	; (8004468 <_dtoa_r+0x630>)
 8004334:	2000      	movs	r0, #0
 8004336:	f7fc fab1 	bl	800089c <__aeabi_ddiv>
 800433a:	4652      	mov	r2, sl
 800433c:	465b      	mov	r3, fp
 800433e:	f7fb ffcb 	bl	80002d8 <__aeabi_dsub>
 8004342:	9d01      	ldr	r5, [sp, #4]
 8004344:	4682      	mov	sl, r0
 8004346:	468b      	mov	fp, r1
 8004348:	4649      	mov	r1, r9
 800434a:	4640      	mov	r0, r8
 800434c:	f7fc fc2c 	bl	8000ba8 <__aeabi_d2iz>
 8004350:	4606      	mov	r6, r0
 8004352:	f7fc f90f 	bl	8000574 <__aeabi_i2d>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4640      	mov	r0, r8
 800435c:	4649      	mov	r1, r9
 800435e:	f7fb ffbb 	bl	80002d8 <__aeabi_dsub>
 8004362:	3630      	adds	r6, #48	; 0x30
 8004364:	f805 6b01 	strb.w	r6, [r5], #1
 8004368:	4652      	mov	r2, sl
 800436a:	465b      	mov	r3, fp
 800436c:	4680      	mov	r8, r0
 800436e:	4689      	mov	r9, r1
 8004370:	f7fc fbdc 	bl	8000b2c <__aeabi_dcmplt>
 8004374:	2800      	cmp	r0, #0
 8004376:	d163      	bne.n	8004440 <_dtoa_r+0x608>
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	4936      	ldr	r1, [pc, #216]	; (8004458 <_dtoa_r+0x620>)
 800437e:	2000      	movs	r0, #0
 8004380:	f7fb ffaa 	bl	80002d8 <__aeabi_dsub>
 8004384:	4652      	mov	r2, sl
 8004386:	465b      	mov	r3, fp
 8004388:	f7fc fbd0 	bl	8000b2c <__aeabi_dcmplt>
 800438c:	2800      	cmp	r0, #0
 800438e:	f040 80b5 	bne.w	80044fc <_dtoa_r+0x6c4>
 8004392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004394:	429d      	cmp	r5, r3
 8004396:	d081      	beq.n	800429c <_dtoa_r+0x464>
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <_dtoa_r+0x624>)
 800439a:	2200      	movs	r2, #0
 800439c:	4650      	mov	r0, sl
 800439e:	4659      	mov	r1, fp
 80043a0:	f7fc f952 	bl	8000648 <__aeabi_dmul>
 80043a4:	4b2d      	ldr	r3, [pc, #180]	; (800445c <_dtoa_r+0x624>)
 80043a6:	4682      	mov	sl, r0
 80043a8:	468b      	mov	fp, r1
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	2200      	movs	r2, #0
 80043b0:	f7fc f94a 	bl	8000648 <__aeabi_dmul>
 80043b4:	4680      	mov	r8, r0
 80043b6:	4689      	mov	r9, r1
 80043b8:	e7c6      	b.n	8004348 <_dtoa_r+0x510>
 80043ba:	4650      	mov	r0, sl
 80043bc:	4659      	mov	r1, fp
 80043be:	f7fc f943 	bl	8000648 <__aeabi_dmul>
 80043c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043c4:	9d01      	ldr	r5, [sp, #4]
 80043c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80043c8:	4682      	mov	sl, r0
 80043ca:	468b      	mov	fp, r1
 80043cc:	4649      	mov	r1, r9
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7fc fbea 	bl	8000ba8 <__aeabi_d2iz>
 80043d4:	4606      	mov	r6, r0
 80043d6:	f7fc f8cd 	bl	8000574 <__aeabi_i2d>
 80043da:	3630      	adds	r6, #48	; 0x30
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4640      	mov	r0, r8
 80043e2:	4649      	mov	r1, r9
 80043e4:	f7fb ff78 	bl	80002d8 <__aeabi_dsub>
 80043e8:	f805 6b01 	strb.w	r6, [r5], #1
 80043ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043ee:	429d      	cmp	r5, r3
 80043f0:	4680      	mov	r8, r0
 80043f2:	4689      	mov	r9, r1
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	d124      	bne.n	8004444 <_dtoa_r+0x60c>
 80043fa:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <_dtoa_r+0x630>)
 80043fc:	4650      	mov	r0, sl
 80043fe:	4659      	mov	r1, fp
 8004400:	f7fb ff6c 	bl	80002dc <__adddf3>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4640      	mov	r0, r8
 800440a:	4649      	mov	r1, r9
 800440c:	f7fc fbac 	bl	8000b68 <__aeabi_dcmpgt>
 8004410:	2800      	cmp	r0, #0
 8004412:	d173      	bne.n	80044fc <_dtoa_r+0x6c4>
 8004414:	4652      	mov	r2, sl
 8004416:	465b      	mov	r3, fp
 8004418:	4913      	ldr	r1, [pc, #76]	; (8004468 <_dtoa_r+0x630>)
 800441a:	2000      	movs	r0, #0
 800441c:	f7fb ff5c 	bl	80002d8 <__aeabi_dsub>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4640      	mov	r0, r8
 8004426:	4649      	mov	r1, r9
 8004428:	f7fc fb80 	bl	8000b2c <__aeabi_dcmplt>
 800442c:	2800      	cmp	r0, #0
 800442e:	f43f af35 	beq.w	800429c <_dtoa_r+0x464>
 8004432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004434:	1e6b      	subs	r3, r5, #1
 8004436:	930f      	str	r3, [sp, #60]	; 0x3c
 8004438:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d0f8      	beq.n	8004432 <_dtoa_r+0x5fa>
 8004440:	9700      	str	r7, [sp, #0]
 8004442:	e049      	b.n	80044d8 <_dtoa_r+0x6a0>
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <_dtoa_r+0x624>)
 8004446:	f7fc f8ff 	bl	8000648 <__aeabi_dmul>
 800444a:	4680      	mov	r8, r0
 800444c:	4689      	mov	r9, r1
 800444e:	e7bd      	b.n	80043cc <_dtoa_r+0x594>
 8004450:	080127b8 	.word	0x080127b8
 8004454:	08012790 	.word	0x08012790
 8004458:	3ff00000 	.word	0x3ff00000
 800445c:	40240000 	.word	0x40240000
 8004460:	401c0000 	.word	0x401c0000
 8004464:	40140000 	.word	0x40140000
 8004468:	3fe00000 	.word	0x3fe00000
 800446c:	9d01      	ldr	r5, [sp, #4]
 800446e:	4656      	mov	r6, sl
 8004470:	465f      	mov	r7, fp
 8004472:	4642      	mov	r2, r8
 8004474:	464b      	mov	r3, r9
 8004476:	4630      	mov	r0, r6
 8004478:	4639      	mov	r1, r7
 800447a:	f7fc fa0f 	bl	800089c <__aeabi_ddiv>
 800447e:	f7fc fb93 	bl	8000ba8 <__aeabi_d2iz>
 8004482:	4682      	mov	sl, r0
 8004484:	f7fc f876 	bl	8000574 <__aeabi_i2d>
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	f7fc f8dc 	bl	8000648 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800449c:	f7fb ff1c 	bl	80002d8 <__aeabi_dsub>
 80044a0:	f805 6b01 	strb.w	r6, [r5], #1
 80044a4:	9e01      	ldr	r6, [sp, #4]
 80044a6:	9f03      	ldr	r7, [sp, #12]
 80044a8:	1bae      	subs	r6, r5, r6
 80044aa:	42b7      	cmp	r7, r6
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	d135      	bne.n	800451e <_dtoa_r+0x6e6>
 80044b2:	f7fb ff13 	bl	80002dc <__adddf3>
 80044b6:	4642      	mov	r2, r8
 80044b8:	464b      	mov	r3, r9
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	f7fc fb53 	bl	8000b68 <__aeabi_dcmpgt>
 80044c2:	b9d0      	cbnz	r0, 80044fa <_dtoa_r+0x6c2>
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	4630      	mov	r0, r6
 80044ca:	4639      	mov	r1, r7
 80044cc:	f7fc fb24 	bl	8000b18 <__aeabi_dcmpeq>
 80044d0:	b110      	cbz	r0, 80044d8 <_dtoa_r+0x6a0>
 80044d2:	f01a 0f01 	tst.w	sl, #1
 80044d6:	d110      	bne.n	80044fa <_dtoa_r+0x6c2>
 80044d8:	4620      	mov	r0, r4
 80044da:	ee18 1a10 	vmov	r1, s16
 80044de:	f000 fd37 	bl	8004f50 <_Bfree>
 80044e2:	2300      	movs	r3, #0
 80044e4:	9800      	ldr	r0, [sp, #0]
 80044e6:	702b      	strb	r3, [r5, #0]
 80044e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044ea:	3001      	adds	r0, #1
 80044ec:	6018      	str	r0, [r3, #0]
 80044ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f43f acf1 	beq.w	8003ed8 <_dtoa_r+0xa0>
 80044f6:	601d      	str	r5, [r3, #0]
 80044f8:	e4ee      	b.n	8003ed8 <_dtoa_r+0xa0>
 80044fa:	9f00      	ldr	r7, [sp, #0]
 80044fc:	462b      	mov	r3, r5
 80044fe:	461d      	mov	r5, r3
 8004500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004504:	2a39      	cmp	r2, #57	; 0x39
 8004506:	d106      	bne.n	8004516 <_dtoa_r+0x6de>
 8004508:	9a01      	ldr	r2, [sp, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	d1f7      	bne.n	80044fe <_dtoa_r+0x6c6>
 800450e:	9901      	ldr	r1, [sp, #4]
 8004510:	2230      	movs	r2, #48	; 0x30
 8004512:	3701      	adds	r7, #1
 8004514:	700a      	strb	r2, [r1, #0]
 8004516:	781a      	ldrb	r2, [r3, #0]
 8004518:	3201      	adds	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e790      	b.n	8004440 <_dtoa_r+0x608>
 800451e:	4ba6      	ldr	r3, [pc, #664]	; (80047b8 <_dtoa_r+0x980>)
 8004520:	2200      	movs	r2, #0
 8004522:	f7fc f891 	bl	8000648 <__aeabi_dmul>
 8004526:	2200      	movs	r2, #0
 8004528:	2300      	movs	r3, #0
 800452a:	4606      	mov	r6, r0
 800452c:	460f      	mov	r7, r1
 800452e:	f7fc faf3 	bl	8000b18 <__aeabi_dcmpeq>
 8004532:	2800      	cmp	r0, #0
 8004534:	d09d      	beq.n	8004472 <_dtoa_r+0x63a>
 8004536:	e7cf      	b.n	80044d8 <_dtoa_r+0x6a0>
 8004538:	9a08      	ldr	r2, [sp, #32]
 800453a:	2a00      	cmp	r2, #0
 800453c:	f000 80d7 	beq.w	80046ee <_dtoa_r+0x8b6>
 8004540:	9a06      	ldr	r2, [sp, #24]
 8004542:	2a01      	cmp	r2, #1
 8004544:	f300 80ba 	bgt.w	80046bc <_dtoa_r+0x884>
 8004548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800454a:	2a00      	cmp	r2, #0
 800454c:	f000 80b2 	beq.w	80046b4 <_dtoa_r+0x87c>
 8004550:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004554:	9e07      	ldr	r6, [sp, #28]
 8004556:	9d04      	ldr	r5, [sp, #16]
 8004558:	9a04      	ldr	r2, [sp, #16]
 800455a:	441a      	add	r2, r3
 800455c:	9204      	str	r2, [sp, #16]
 800455e:	9a05      	ldr	r2, [sp, #20]
 8004560:	2101      	movs	r1, #1
 8004562:	441a      	add	r2, r3
 8004564:	4620      	mov	r0, r4
 8004566:	9205      	str	r2, [sp, #20]
 8004568:	f000 fdaa 	bl	80050c0 <__i2b>
 800456c:	4607      	mov	r7, r0
 800456e:	2d00      	cmp	r5, #0
 8004570:	dd0c      	ble.n	800458c <_dtoa_r+0x754>
 8004572:	9b05      	ldr	r3, [sp, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	dd09      	ble.n	800458c <_dtoa_r+0x754>
 8004578:	42ab      	cmp	r3, r5
 800457a:	9a04      	ldr	r2, [sp, #16]
 800457c:	bfa8      	it	ge
 800457e:	462b      	movge	r3, r5
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	9204      	str	r2, [sp, #16]
 8004584:	9a05      	ldr	r2, [sp, #20]
 8004586:	1aed      	subs	r5, r5, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	9b07      	ldr	r3, [sp, #28]
 800458e:	b31b      	cbz	r3, 80045d8 <_dtoa_r+0x7a0>
 8004590:	9b08      	ldr	r3, [sp, #32]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80af 	beq.w	80046f6 <_dtoa_r+0x8be>
 8004598:	2e00      	cmp	r6, #0
 800459a:	dd13      	ble.n	80045c4 <_dtoa_r+0x78c>
 800459c:	4639      	mov	r1, r7
 800459e:	4632      	mov	r2, r6
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 fe4d 	bl	8005240 <__pow5mult>
 80045a6:	ee18 2a10 	vmov	r2, s16
 80045aa:	4601      	mov	r1, r0
 80045ac:	4607      	mov	r7, r0
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 fd9c 	bl	80050ec <__multiply>
 80045b4:	ee18 1a10 	vmov	r1, s16
 80045b8:	4680      	mov	r8, r0
 80045ba:	4620      	mov	r0, r4
 80045bc:	f000 fcc8 	bl	8004f50 <_Bfree>
 80045c0:	ee08 8a10 	vmov	s16, r8
 80045c4:	9b07      	ldr	r3, [sp, #28]
 80045c6:	1b9a      	subs	r2, r3, r6
 80045c8:	d006      	beq.n	80045d8 <_dtoa_r+0x7a0>
 80045ca:	ee18 1a10 	vmov	r1, s16
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 fe36 	bl	8005240 <__pow5mult>
 80045d4:	ee08 0a10 	vmov	s16, r0
 80045d8:	2101      	movs	r1, #1
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 fd70 	bl	80050c0 <__i2b>
 80045e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	4606      	mov	r6, r0
 80045e6:	f340 8088 	ble.w	80046fa <_dtoa_r+0x8c2>
 80045ea:	461a      	mov	r2, r3
 80045ec:	4601      	mov	r1, r0
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 fe26 	bl	8005240 <__pow5mult>
 80045f4:	9b06      	ldr	r3, [sp, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	4606      	mov	r6, r0
 80045fa:	f340 8081 	ble.w	8004700 <_dtoa_r+0x8c8>
 80045fe:	f04f 0800 	mov.w	r8, #0
 8004602:	6933      	ldr	r3, [r6, #16]
 8004604:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004608:	6918      	ldr	r0, [r3, #16]
 800460a:	f000 fd09 	bl	8005020 <__hi0bits>
 800460e:	f1c0 0020 	rsb	r0, r0, #32
 8004612:	9b05      	ldr	r3, [sp, #20]
 8004614:	4418      	add	r0, r3
 8004616:	f010 001f 	ands.w	r0, r0, #31
 800461a:	f000 8092 	beq.w	8004742 <_dtoa_r+0x90a>
 800461e:	f1c0 0320 	rsb	r3, r0, #32
 8004622:	2b04      	cmp	r3, #4
 8004624:	f340 808a 	ble.w	800473c <_dtoa_r+0x904>
 8004628:	f1c0 001c 	rsb	r0, r0, #28
 800462c:	9b04      	ldr	r3, [sp, #16]
 800462e:	4403      	add	r3, r0
 8004630:	9304      	str	r3, [sp, #16]
 8004632:	9b05      	ldr	r3, [sp, #20]
 8004634:	4403      	add	r3, r0
 8004636:	4405      	add	r5, r0
 8004638:	9305      	str	r3, [sp, #20]
 800463a:	9b04      	ldr	r3, [sp, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd07      	ble.n	8004650 <_dtoa_r+0x818>
 8004640:	ee18 1a10 	vmov	r1, s16
 8004644:	461a      	mov	r2, r3
 8004646:	4620      	mov	r0, r4
 8004648:	f000 fe54 	bl	80052f4 <__lshift>
 800464c:	ee08 0a10 	vmov	s16, r0
 8004650:	9b05      	ldr	r3, [sp, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	dd05      	ble.n	8004662 <_dtoa_r+0x82a>
 8004656:	4631      	mov	r1, r6
 8004658:	461a      	mov	r2, r3
 800465a:	4620      	mov	r0, r4
 800465c:	f000 fe4a 	bl	80052f4 <__lshift>
 8004660:	4606      	mov	r6, r0
 8004662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d06e      	beq.n	8004746 <_dtoa_r+0x90e>
 8004668:	ee18 0a10 	vmov	r0, s16
 800466c:	4631      	mov	r1, r6
 800466e:	f000 feb1 	bl	80053d4 <__mcmp>
 8004672:	2800      	cmp	r0, #0
 8004674:	da67      	bge.n	8004746 <_dtoa_r+0x90e>
 8004676:	9b00      	ldr	r3, [sp, #0]
 8004678:	3b01      	subs	r3, #1
 800467a:	ee18 1a10 	vmov	r1, s16
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	220a      	movs	r2, #10
 8004682:	2300      	movs	r3, #0
 8004684:	4620      	mov	r0, r4
 8004686:	f000 fc85 	bl	8004f94 <__multadd>
 800468a:	9b08      	ldr	r3, [sp, #32]
 800468c:	ee08 0a10 	vmov	s16, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 81b1 	beq.w	80049f8 <_dtoa_r+0xbc0>
 8004696:	2300      	movs	r3, #0
 8004698:	4639      	mov	r1, r7
 800469a:	220a      	movs	r2, #10
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fc79 	bl	8004f94 <__multadd>
 80046a2:	9b02      	ldr	r3, [sp, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	4607      	mov	r7, r0
 80046a8:	f300 808e 	bgt.w	80047c8 <_dtoa_r+0x990>
 80046ac:	9b06      	ldr	r3, [sp, #24]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	dc51      	bgt.n	8004756 <_dtoa_r+0x91e>
 80046b2:	e089      	b.n	80047c8 <_dtoa_r+0x990>
 80046b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046ba:	e74b      	b.n	8004554 <_dtoa_r+0x71c>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	1e5e      	subs	r6, r3, #1
 80046c0:	9b07      	ldr	r3, [sp, #28]
 80046c2:	42b3      	cmp	r3, r6
 80046c4:	bfbf      	itttt	lt
 80046c6:	9b07      	ldrlt	r3, [sp, #28]
 80046c8:	9607      	strlt	r6, [sp, #28]
 80046ca:	1af2      	sublt	r2, r6, r3
 80046cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80046ce:	bfb6      	itet	lt
 80046d0:	189b      	addlt	r3, r3, r2
 80046d2:	1b9e      	subge	r6, r3, r6
 80046d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	bfb8      	it	lt
 80046da:	2600      	movlt	r6, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfb7      	itett	lt
 80046e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80046e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80046e8:	1a9d      	sublt	r5, r3, r2
 80046ea:	2300      	movlt	r3, #0
 80046ec:	e734      	b.n	8004558 <_dtoa_r+0x720>
 80046ee:	9e07      	ldr	r6, [sp, #28]
 80046f0:	9d04      	ldr	r5, [sp, #16]
 80046f2:	9f08      	ldr	r7, [sp, #32]
 80046f4:	e73b      	b.n	800456e <_dtoa_r+0x736>
 80046f6:	9a07      	ldr	r2, [sp, #28]
 80046f8:	e767      	b.n	80045ca <_dtoa_r+0x792>
 80046fa:	9b06      	ldr	r3, [sp, #24]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	dc18      	bgt.n	8004732 <_dtoa_r+0x8fa>
 8004700:	f1ba 0f00 	cmp.w	sl, #0
 8004704:	d115      	bne.n	8004732 <_dtoa_r+0x8fa>
 8004706:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800470a:	b993      	cbnz	r3, 8004732 <_dtoa_r+0x8fa>
 800470c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004710:	0d1b      	lsrs	r3, r3, #20
 8004712:	051b      	lsls	r3, r3, #20
 8004714:	b183      	cbz	r3, 8004738 <_dtoa_r+0x900>
 8004716:	9b04      	ldr	r3, [sp, #16]
 8004718:	3301      	adds	r3, #1
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	9b05      	ldr	r3, [sp, #20]
 800471e:	3301      	adds	r3, #1
 8004720:	9305      	str	r3, [sp, #20]
 8004722:	f04f 0801 	mov.w	r8, #1
 8004726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	f47f af6a 	bne.w	8004602 <_dtoa_r+0x7ca>
 800472e:	2001      	movs	r0, #1
 8004730:	e76f      	b.n	8004612 <_dtoa_r+0x7da>
 8004732:	f04f 0800 	mov.w	r8, #0
 8004736:	e7f6      	b.n	8004726 <_dtoa_r+0x8ee>
 8004738:	4698      	mov	r8, r3
 800473a:	e7f4      	b.n	8004726 <_dtoa_r+0x8ee>
 800473c:	f43f af7d 	beq.w	800463a <_dtoa_r+0x802>
 8004740:	4618      	mov	r0, r3
 8004742:	301c      	adds	r0, #28
 8004744:	e772      	b.n	800462c <_dtoa_r+0x7f4>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	dc37      	bgt.n	80047bc <_dtoa_r+0x984>
 800474c:	9b06      	ldr	r3, [sp, #24]
 800474e:	2b02      	cmp	r3, #2
 8004750:	dd34      	ble.n	80047bc <_dtoa_r+0x984>
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	9302      	str	r3, [sp, #8]
 8004756:	9b02      	ldr	r3, [sp, #8]
 8004758:	b96b      	cbnz	r3, 8004776 <_dtoa_r+0x93e>
 800475a:	4631      	mov	r1, r6
 800475c:	2205      	movs	r2, #5
 800475e:	4620      	mov	r0, r4
 8004760:	f000 fc18 	bl	8004f94 <__multadd>
 8004764:	4601      	mov	r1, r0
 8004766:	4606      	mov	r6, r0
 8004768:	ee18 0a10 	vmov	r0, s16
 800476c:	f000 fe32 	bl	80053d4 <__mcmp>
 8004770:	2800      	cmp	r0, #0
 8004772:	f73f adbb 	bgt.w	80042ec <_dtoa_r+0x4b4>
 8004776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004778:	9d01      	ldr	r5, [sp, #4]
 800477a:	43db      	mvns	r3, r3
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	f04f 0800 	mov.w	r8, #0
 8004782:	4631      	mov	r1, r6
 8004784:	4620      	mov	r0, r4
 8004786:	f000 fbe3 	bl	8004f50 <_Bfree>
 800478a:	2f00      	cmp	r7, #0
 800478c:	f43f aea4 	beq.w	80044d8 <_dtoa_r+0x6a0>
 8004790:	f1b8 0f00 	cmp.w	r8, #0
 8004794:	d005      	beq.n	80047a2 <_dtoa_r+0x96a>
 8004796:	45b8      	cmp	r8, r7
 8004798:	d003      	beq.n	80047a2 <_dtoa_r+0x96a>
 800479a:	4641      	mov	r1, r8
 800479c:	4620      	mov	r0, r4
 800479e:	f000 fbd7 	bl	8004f50 <_Bfree>
 80047a2:	4639      	mov	r1, r7
 80047a4:	4620      	mov	r0, r4
 80047a6:	f000 fbd3 	bl	8004f50 <_Bfree>
 80047aa:	e695      	b.n	80044d8 <_dtoa_r+0x6a0>
 80047ac:	2600      	movs	r6, #0
 80047ae:	4637      	mov	r7, r6
 80047b0:	e7e1      	b.n	8004776 <_dtoa_r+0x93e>
 80047b2:	9700      	str	r7, [sp, #0]
 80047b4:	4637      	mov	r7, r6
 80047b6:	e599      	b.n	80042ec <_dtoa_r+0x4b4>
 80047b8:	40240000 	.word	0x40240000
 80047bc:	9b08      	ldr	r3, [sp, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80ca 	beq.w	8004958 <_dtoa_r+0xb20>
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	9302      	str	r3, [sp, #8]
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	dd05      	ble.n	80047d8 <_dtoa_r+0x9a0>
 80047cc:	4639      	mov	r1, r7
 80047ce:	462a      	mov	r2, r5
 80047d0:	4620      	mov	r0, r4
 80047d2:	f000 fd8f 	bl	80052f4 <__lshift>
 80047d6:	4607      	mov	r7, r0
 80047d8:	f1b8 0f00 	cmp.w	r8, #0
 80047dc:	d05b      	beq.n	8004896 <_dtoa_r+0xa5e>
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4620      	mov	r0, r4
 80047e2:	f000 fb75 	bl	8004ed0 <_Balloc>
 80047e6:	4605      	mov	r5, r0
 80047e8:	b928      	cbnz	r0, 80047f6 <_dtoa_r+0x9be>
 80047ea:	4b87      	ldr	r3, [pc, #540]	; (8004a08 <_dtoa_r+0xbd0>)
 80047ec:	4602      	mov	r2, r0
 80047ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80047f2:	f7ff bb3b 	b.w	8003e6c <_dtoa_r+0x34>
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	3202      	adds	r2, #2
 80047fa:	0092      	lsls	r2, r2, #2
 80047fc:	f107 010c 	add.w	r1, r7, #12
 8004800:	300c      	adds	r0, #12
 8004802:	f000 fb57 	bl	8004eb4 <memcpy>
 8004806:	2201      	movs	r2, #1
 8004808:	4629      	mov	r1, r5
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fd72 	bl	80052f4 <__lshift>
 8004810:	9b01      	ldr	r3, [sp, #4]
 8004812:	f103 0901 	add.w	r9, r3, #1
 8004816:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800481a:	4413      	add	r3, r2
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	f00a 0301 	and.w	r3, sl, #1
 8004822:	46b8      	mov	r8, r7
 8004824:	9304      	str	r3, [sp, #16]
 8004826:	4607      	mov	r7, r0
 8004828:	4631      	mov	r1, r6
 800482a:	ee18 0a10 	vmov	r0, s16
 800482e:	f7ff fa77 	bl	8003d20 <quorem>
 8004832:	4641      	mov	r1, r8
 8004834:	9002      	str	r0, [sp, #8]
 8004836:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800483a:	ee18 0a10 	vmov	r0, s16
 800483e:	f000 fdc9 	bl	80053d4 <__mcmp>
 8004842:	463a      	mov	r2, r7
 8004844:	9003      	str	r0, [sp, #12]
 8004846:	4631      	mov	r1, r6
 8004848:	4620      	mov	r0, r4
 800484a:	f000 fddf 	bl	800540c <__mdiff>
 800484e:	68c2      	ldr	r2, [r0, #12]
 8004850:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004854:	4605      	mov	r5, r0
 8004856:	bb02      	cbnz	r2, 800489a <_dtoa_r+0xa62>
 8004858:	4601      	mov	r1, r0
 800485a:	ee18 0a10 	vmov	r0, s16
 800485e:	f000 fdb9 	bl	80053d4 <__mcmp>
 8004862:	4602      	mov	r2, r0
 8004864:	4629      	mov	r1, r5
 8004866:	4620      	mov	r0, r4
 8004868:	9207      	str	r2, [sp, #28]
 800486a:	f000 fb71 	bl	8004f50 <_Bfree>
 800486e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004872:	ea43 0102 	orr.w	r1, r3, r2
 8004876:	9b04      	ldr	r3, [sp, #16]
 8004878:	430b      	orrs	r3, r1
 800487a:	464d      	mov	r5, r9
 800487c:	d10f      	bne.n	800489e <_dtoa_r+0xa66>
 800487e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004882:	d02a      	beq.n	80048da <_dtoa_r+0xaa2>
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	dd02      	ble.n	8004890 <_dtoa_r+0xa58>
 800488a:	9b02      	ldr	r3, [sp, #8]
 800488c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004890:	f88b a000 	strb.w	sl, [fp]
 8004894:	e775      	b.n	8004782 <_dtoa_r+0x94a>
 8004896:	4638      	mov	r0, r7
 8004898:	e7ba      	b.n	8004810 <_dtoa_r+0x9d8>
 800489a:	2201      	movs	r2, #1
 800489c:	e7e2      	b.n	8004864 <_dtoa_r+0xa2c>
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db04      	blt.n	80048ae <_dtoa_r+0xa76>
 80048a4:	9906      	ldr	r1, [sp, #24]
 80048a6:	430b      	orrs	r3, r1
 80048a8:	9904      	ldr	r1, [sp, #16]
 80048aa:	430b      	orrs	r3, r1
 80048ac:	d122      	bne.n	80048f4 <_dtoa_r+0xabc>
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	ddee      	ble.n	8004890 <_dtoa_r+0xa58>
 80048b2:	ee18 1a10 	vmov	r1, s16
 80048b6:	2201      	movs	r2, #1
 80048b8:	4620      	mov	r0, r4
 80048ba:	f000 fd1b 	bl	80052f4 <__lshift>
 80048be:	4631      	mov	r1, r6
 80048c0:	ee08 0a10 	vmov	s16, r0
 80048c4:	f000 fd86 	bl	80053d4 <__mcmp>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	dc03      	bgt.n	80048d4 <_dtoa_r+0xa9c>
 80048cc:	d1e0      	bne.n	8004890 <_dtoa_r+0xa58>
 80048ce:	f01a 0f01 	tst.w	sl, #1
 80048d2:	d0dd      	beq.n	8004890 <_dtoa_r+0xa58>
 80048d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048d8:	d1d7      	bne.n	800488a <_dtoa_r+0xa52>
 80048da:	2339      	movs	r3, #57	; 0x39
 80048dc:	f88b 3000 	strb.w	r3, [fp]
 80048e0:	462b      	mov	r3, r5
 80048e2:	461d      	mov	r5, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80048ea:	2a39      	cmp	r2, #57	; 0x39
 80048ec:	d071      	beq.n	80049d2 <_dtoa_r+0xb9a>
 80048ee:	3201      	adds	r2, #1
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e746      	b.n	8004782 <_dtoa_r+0x94a>
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	dd07      	ble.n	8004908 <_dtoa_r+0xad0>
 80048f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048fc:	d0ed      	beq.n	80048da <_dtoa_r+0xaa2>
 80048fe:	f10a 0301 	add.w	r3, sl, #1
 8004902:	f88b 3000 	strb.w	r3, [fp]
 8004906:	e73c      	b.n	8004782 <_dtoa_r+0x94a>
 8004908:	9b05      	ldr	r3, [sp, #20]
 800490a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800490e:	4599      	cmp	r9, r3
 8004910:	d047      	beq.n	80049a2 <_dtoa_r+0xb6a>
 8004912:	ee18 1a10 	vmov	r1, s16
 8004916:	2300      	movs	r3, #0
 8004918:	220a      	movs	r2, #10
 800491a:	4620      	mov	r0, r4
 800491c:	f000 fb3a 	bl	8004f94 <__multadd>
 8004920:	45b8      	cmp	r8, r7
 8004922:	ee08 0a10 	vmov	s16, r0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f04f 020a 	mov.w	r2, #10
 800492e:	4641      	mov	r1, r8
 8004930:	4620      	mov	r0, r4
 8004932:	d106      	bne.n	8004942 <_dtoa_r+0xb0a>
 8004934:	f000 fb2e 	bl	8004f94 <__multadd>
 8004938:	4680      	mov	r8, r0
 800493a:	4607      	mov	r7, r0
 800493c:	f109 0901 	add.w	r9, r9, #1
 8004940:	e772      	b.n	8004828 <_dtoa_r+0x9f0>
 8004942:	f000 fb27 	bl	8004f94 <__multadd>
 8004946:	4639      	mov	r1, r7
 8004948:	4680      	mov	r8, r0
 800494a:	2300      	movs	r3, #0
 800494c:	220a      	movs	r2, #10
 800494e:	4620      	mov	r0, r4
 8004950:	f000 fb20 	bl	8004f94 <__multadd>
 8004954:	4607      	mov	r7, r0
 8004956:	e7f1      	b.n	800493c <_dtoa_r+0xb04>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	9d01      	ldr	r5, [sp, #4]
 800495e:	ee18 0a10 	vmov	r0, s16
 8004962:	4631      	mov	r1, r6
 8004964:	f7ff f9dc 	bl	8003d20 <quorem>
 8004968:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800496c:	9b01      	ldr	r3, [sp, #4]
 800496e:	f805 ab01 	strb.w	sl, [r5], #1
 8004972:	1aea      	subs	r2, r5, r3
 8004974:	9b02      	ldr	r3, [sp, #8]
 8004976:	4293      	cmp	r3, r2
 8004978:	dd09      	ble.n	800498e <_dtoa_r+0xb56>
 800497a:	ee18 1a10 	vmov	r1, s16
 800497e:	2300      	movs	r3, #0
 8004980:	220a      	movs	r2, #10
 8004982:	4620      	mov	r0, r4
 8004984:	f000 fb06 	bl	8004f94 <__multadd>
 8004988:	ee08 0a10 	vmov	s16, r0
 800498c:	e7e7      	b.n	800495e <_dtoa_r+0xb26>
 800498e:	9b02      	ldr	r3, [sp, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	bfc8      	it	gt
 8004994:	461d      	movgt	r5, r3
 8004996:	9b01      	ldr	r3, [sp, #4]
 8004998:	bfd8      	it	le
 800499a:	2501      	movle	r5, #1
 800499c:	441d      	add	r5, r3
 800499e:	f04f 0800 	mov.w	r8, #0
 80049a2:	ee18 1a10 	vmov	r1, s16
 80049a6:	2201      	movs	r2, #1
 80049a8:	4620      	mov	r0, r4
 80049aa:	f000 fca3 	bl	80052f4 <__lshift>
 80049ae:	4631      	mov	r1, r6
 80049b0:	ee08 0a10 	vmov	s16, r0
 80049b4:	f000 fd0e 	bl	80053d4 <__mcmp>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	dc91      	bgt.n	80048e0 <_dtoa_r+0xaa8>
 80049bc:	d102      	bne.n	80049c4 <_dtoa_r+0xb8c>
 80049be:	f01a 0f01 	tst.w	sl, #1
 80049c2:	d18d      	bne.n	80048e0 <_dtoa_r+0xaa8>
 80049c4:	462b      	mov	r3, r5
 80049c6:	461d      	mov	r5, r3
 80049c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049cc:	2a30      	cmp	r2, #48	; 0x30
 80049ce:	d0fa      	beq.n	80049c6 <_dtoa_r+0xb8e>
 80049d0:	e6d7      	b.n	8004782 <_dtoa_r+0x94a>
 80049d2:	9a01      	ldr	r2, [sp, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d184      	bne.n	80048e2 <_dtoa_r+0xaaa>
 80049d8:	9b00      	ldr	r3, [sp, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2331      	movs	r3, #49	; 0x31
 80049e0:	7013      	strb	r3, [r2, #0]
 80049e2:	e6ce      	b.n	8004782 <_dtoa_r+0x94a>
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <_dtoa_r+0xbd4>)
 80049e6:	f7ff ba95 	b.w	8003f14 <_dtoa_r+0xdc>
 80049ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f aa6e 	bne.w	8003ece <_dtoa_r+0x96>
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <_dtoa_r+0xbd8>)
 80049f4:	f7ff ba8e 	b.w	8003f14 <_dtoa_r+0xdc>
 80049f8:	9b02      	ldr	r3, [sp, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dcae      	bgt.n	800495c <_dtoa_r+0xb24>
 80049fe:	9b06      	ldr	r3, [sp, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	f73f aea8 	bgt.w	8004756 <_dtoa_r+0x91e>
 8004a06:	e7a9      	b.n	800495c <_dtoa_r+0xb24>
 8004a08:	08012696 	.word	0x08012696
 8004a0c:	0800865f 	.word	0x0800865f
 8004a10:	0801260c 	.word	0x0801260c

08004a14 <__sflush_r>:
 8004a14:	898a      	ldrh	r2, [r1, #12]
 8004a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	0710      	lsls	r0, r2, #28
 8004a1e:	460c      	mov	r4, r1
 8004a20:	d458      	bmi.n	8004ad4 <__sflush_r+0xc0>
 8004a22:	684b      	ldr	r3, [r1, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc05      	bgt.n	8004a34 <__sflush_r+0x20>
 8004a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dc02      	bgt.n	8004a34 <__sflush_r+0x20>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	d0f9      	beq.n	8004a2e <__sflush_r+0x1a>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a40:	682f      	ldr	r7, [r5, #0]
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	d032      	beq.n	8004aac <__sflush_r+0x98>
 8004a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	075a      	lsls	r2, r3, #29
 8004a4c:	d505      	bpl.n	8004a5a <__sflush_r+0x46>
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	1ac0      	subs	r0, r0, r3
 8004a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a54:	b10b      	cbz	r3, 8004a5a <__sflush_r+0x46>
 8004a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a58:	1ac0      	subs	r0, r0, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a60:	6a21      	ldr	r1, [r4, #32]
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b0      	blx	r6
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	d106      	bne.n	8004a7a <__sflush_r+0x66>
 8004a6c:	6829      	ldr	r1, [r5, #0]
 8004a6e:	291d      	cmp	r1, #29
 8004a70:	d82c      	bhi.n	8004acc <__sflush_r+0xb8>
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <__sflush_r+0x108>)
 8004a74:	40ca      	lsrs	r2, r1
 8004a76:	07d6      	lsls	r6, r2, #31
 8004a78:	d528      	bpl.n	8004acc <__sflush_r+0xb8>
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6062      	str	r2, [r4, #4]
 8004a7e:	04d9      	lsls	r1, r3, #19
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	6022      	str	r2, [r4, #0]
 8004a84:	d504      	bpl.n	8004a90 <__sflush_r+0x7c>
 8004a86:	1c42      	adds	r2, r0, #1
 8004a88:	d101      	bne.n	8004a8e <__sflush_r+0x7a>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b903      	cbnz	r3, 8004a90 <__sflush_r+0x7c>
 8004a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a92:	602f      	str	r7, [r5, #0]
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d0ca      	beq.n	8004a2e <__sflush_r+0x1a>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__sflush_r+0x92>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fda9 	bl	80055f8 <_free_r>
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8004aaa:	e7c1      	b.n	8004a30 <__sflush_r+0x1c>
 8004aac:	6a21      	ldr	r1, [r4, #32]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b0      	blx	r6
 8004ab4:	1c41      	adds	r1, r0, #1
 8004ab6:	d1c7      	bne.n	8004a48 <__sflush_r+0x34>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0c4      	beq.n	8004a48 <__sflush_r+0x34>
 8004abe:	2b1d      	cmp	r3, #29
 8004ac0:	d001      	beq.n	8004ac6 <__sflush_r+0xb2>
 8004ac2:	2b16      	cmp	r3, #22
 8004ac4:	d101      	bne.n	8004aca <__sflush_r+0xb6>
 8004ac6:	602f      	str	r7, [r5, #0]
 8004ac8:	e7b1      	b.n	8004a2e <__sflush_r+0x1a>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	e7ad      	b.n	8004a30 <__sflush_r+0x1c>
 8004ad4:	690f      	ldr	r7, [r1, #16]
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	d0a9      	beq.n	8004a2e <__sflush_r+0x1a>
 8004ada:	0793      	lsls	r3, r2, #30
 8004adc:	680e      	ldr	r6, [r1, #0]
 8004ade:	bf08      	it	eq
 8004ae0:	694b      	ldreq	r3, [r1, #20]
 8004ae2:	600f      	str	r7, [r1, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	eba6 0807 	sub.w	r8, r6, r7
 8004aec:	608b      	str	r3, [r1, #8]
 8004aee:	f1b8 0f00 	cmp.w	r8, #0
 8004af2:	dd9c      	ble.n	8004a2e <__sflush_r+0x1a>
 8004af4:	6a21      	ldr	r1, [r4, #32]
 8004af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004af8:	4643      	mov	r3, r8
 8004afa:	463a      	mov	r2, r7
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b0      	blx	r6
 8004b00:	2800      	cmp	r0, #0
 8004b02:	dc06      	bgt.n	8004b12 <__sflush_r+0xfe>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b10:	e78e      	b.n	8004a30 <__sflush_r+0x1c>
 8004b12:	4407      	add	r7, r0
 8004b14:	eba8 0800 	sub.w	r8, r8, r0
 8004b18:	e7e9      	b.n	8004aee <__sflush_r+0xda>
 8004b1a:	bf00      	nop
 8004b1c:	20400001 	.word	0x20400001

08004b20 <_fflush_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	4605      	mov	r5, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b913      	cbnz	r3, 8004b30 <_fflush_r+0x10>
 8004b2a:	2500      	movs	r5, #0
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	b118      	cbz	r0, 8004b3a <_fflush_r+0x1a>
 8004b32:	6983      	ldr	r3, [r0, #24]
 8004b34:	b90b      	cbnz	r3, 8004b3a <_fflush_r+0x1a>
 8004b36:	f000 f887 	bl	8004c48 <__sinit>
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <_fflush_r+0x6c>)
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	d11b      	bne.n	8004b78 <_fflush_r+0x58>
 8004b40:	686c      	ldr	r4, [r5, #4]
 8004b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <_fflush_r+0xa>
 8004b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b4c:	07d0      	lsls	r0, r2, #31
 8004b4e:	d404      	bmi.n	8004b5a <_fflush_r+0x3a>
 8004b50:	0599      	lsls	r1, r3, #22
 8004b52:	d402      	bmi.n	8004b5a <_fflush_r+0x3a>
 8004b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b56:	f000 f92c 	bl	8004db2 <__retarget_lock_acquire_recursive>
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f7ff ff59 	bl	8004a14 <__sflush_r>
 8004b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b64:	07da      	lsls	r2, r3, #31
 8004b66:	4605      	mov	r5, r0
 8004b68:	d4e0      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	059b      	lsls	r3, r3, #22
 8004b6e:	d4dd      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b72:	f000 f91f 	bl	8004db4 <__retarget_lock_release_recursive>
 8004b76:	e7d9      	b.n	8004b2c <_fflush_r+0xc>
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_fflush_r+0x70>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <_fflush_r+0x62>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7df      	b.n	8004b42 <_fflush_r+0x22>
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <_fflush_r+0x74>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7da      	b.n	8004b42 <_fflush_r+0x22>
 8004b8c:	080126c8 	.word	0x080126c8
 8004b90:	080126e8 	.word	0x080126e8
 8004b94:	080126a8 	.word	0x080126a8

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba6:	6083      	str	r3, [r0, #8]
 8004ba8:	8181      	strh	r1, [r0, #12]
 8004baa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bac:	81c2      	strh	r2, [r0, #14]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	; 0x5c
 8004bb6:	f7fe fa85 	bl	80030c4 <memset>
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std+0x38>)
 8004bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x3c>)
 8004bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x40>)
 8004bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x44>)
 8004bc8:	6224      	str	r4, [r4, #32]
 8004bca:	6323      	str	r3, [r4, #48]	; 0x30
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	080059f9 	.word	0x080059f9
 8004bd4:	08005a1b 	.word	0x08005a1b
 8004bd8:	08005a53 	.word	0x08005a53
 8004bdc:	08005a77 	.word	0x08005a77

08004be0 <_cleanup_r>:
 8004be0:	4901      	ldr	r1, [pc, #4]	; (8004be8 <_cleanup_r+0x8>)
 8004be2:	f000 b8c1 	b.w	8004d68 <_fwalk_reent>
 8004be6:	bf00      	nop
 8004be8:	08004b21 	.word	0x08004b21

08004bec <__sfmoreglue>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2268      	movs	r2, #104	; 0x68
 8004bf0:	1e4d      	subs	r5, r1, #1
 8004bf2:	4355      	muls	r5, r2
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bfa:	f000 fd49 	bl	8005690 <_malloc_r>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	b140      	cbz	r0, 8004c14 <__sfmoreglue+0x28>
 8004c02:	2100      	movs	r1, #0
 8004c04:	e9c0 1600 	strd	r1, r6, [r0]
 8004c08:	300c      	adds	r0, #12
 8004c0a:	60a0      	str	r0, [r4, #8]
 8004c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c10:	f7fe fa58 	bl	80030c4 <memset>
 8004c14:	4620      	mov	r0, r4
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <__sfp_lock_acquire>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__sfp_lock_acquire+0x8>)
 8004c1a:	f000 b8ca 	b.w	8004db2 <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	20000c01 	.word	0x20000c01

08004c24 <__sfp_lock_release>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__sfp_lock_release+0x8>)
 8004c26:	f000 b8c5 	b.w	8004db4 <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	20000c01 	.word	0x20000c01

08004c30 <__sinit_lock_acquire>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__sinit_lock_acquire+0x8>)
 8004c32:	f000 b8be 	b.w	8004db2 <__retarget_lock_acquire_recursive>
 8004c36:	bf00      	nop
 8004c38:	20000c02 	.word	0x20000c02

08004c3c <__sinit_lock_release>:
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <__sinit_lock_release+0x8>)
 8004c3e:	f000 b8b9 	b.w	8004db4 <__retarget_lock_release_recursive>
 8004c42:	bf00      	nop
 8004c44:	20000c02 	.word	0x20000c02

08004c48 <__sinit>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	f7ff fff0 	bl	8004c30 <__sinit_lock_acquire>
 8004c50:	69a3      	ldr	r3, [r4, #24]
 8004c52:	b11b      	cbz	r3, 8004c5c <__sinit+0x14>
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	f7ff bff0 	b.w	8004c3c <__sinit_lock_release>
 8004c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c60:	6523      	str	r3, [r4, #80]	; 0x50
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <__sinit+0x68>)
 8004c64:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <__sinit+0x6c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	bf04      	itt	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	61a3      	streq	r3, [r4, #24]
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 f820 	bl	8004cb8 <__sfp>
 8004c78:	6060      	str	r0, [r4, #4]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f81c 	bl	8004cb8 <__sfp>
 8004c80:	60a0      	str	r0, [r4, #8]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f818 	bl	8004cb8 <__sfp>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60e0      	str	r0, [r4, #12]
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	6860      	ldr	r0, [r4, #4]
 8004c90:	f7ff ff82 	bl	8004b98 <std>
 8004c94:	68a0      	ldr	r0, [r4, #8]
 8004c96:	2201      	movs	r2, #1
 8004c98:	2109      	movs	r1, #9
 8004c9a:	f7ff ff7d 	bl	8004b98 <std>
 8004c9e:	68e0      	ldr	r0, [r4, #12]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	2112      	movs	r1, #18
 8004ca4:	f7ff ff78 	bl	8004b98 <std>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	61a3      	str	r3, [r4, #24]
 8004cac:	e7d2      	b.n	8004c54 <__sinit+0xc>
 8004cae:	bf00      	nop
 8004cb0:	08012504 	.word	0x08012504
 8004cb4:	08004be1 	.word	0x08004be1

08004cb8 <__sfp>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	4607      	mov	r7, r0
 8004cbc:	f7ff ffac 	bl	8004c18 <__sfp_lock_acquire>
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <__sfp+0x84>)
 8004cc2:	681e      	ldr	r6, [r3, #0]
 8004cc4:	69b3      	ldr	r3, [r6, #24]
 8004cc6:	b913      	cbnz	r3, 8004cce <__sfp+0x16>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7ff ffbd 	bl	8004c48 <__sinit>
 8004cce:	3648      	adds	r6, #72	; 0x48
 8004cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	d503      	bpl.n	8004ce0 <__sfp+0x28>
 8004cd8:	6833      	ldr	r3, [r6, #0]
 8004cda:	b30b      	cbz	r3, 8004d20 <__sfp+0x68>
 8004cdc:	6836      	ldr	r6, [r6, #0]
 8004cde:	e7f7      	b.n	8004cd0 <__sfp+0x18>
 8004ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ce4:	b9d5      	cbnz	r5, 8004d1c <__sfp+0x64>
 8004ce6:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <__sfp+0x88>)
 8004ce8:	60e3      	str	r3, [r4, #12]
 8004cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cee:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf0:	f000 f85e 	bl	8004db0 <__retarget_lock_init_recursive>
 8004cf4:	f7ff ff96 	bl	8004c24 <__sfp_lock_release>
 8004cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d00:	6025      	str	r5, [r4, #0]
 8004d02:	61a5      	str	r5, [r4, #24]
 8004d04:	2208      	movs	r2, #8
 8004d06:	4629      	mov	r1, r5
 8004d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d0c:	f7fe f9da 	bl	80030c4 <memset>
 8004d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d18:	4620      	mov	r0, r4
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1c:	3468      	adds	r4, #104	; 0x68
 8004d1e:	e7d9      	b.n	8004cd4 <__sfp+0x1c>
 8004d20:	2104      	movs	r1, #4
 8004d22:	4638      	mov	r0, r7
 8004d24:	f7ff ff62 	bl	8004bec <__sfmoreglue>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	6030      	str	r0, [r6, #0]
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1d5      	bne.n	8004cdc <__sfp+0x24>
 8004d30:	f7ff ff78 	bl	8004c24 <__sfp_lock_release>
 8004d34:	230c      	movs	r3, #12
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	e7ee      	b.n	8004d18 <__sfp+0x60>
 8004d3a:	bf00      	nop
 8004d3c:	08012504 	.word	0x08012504
 8004d40:	ffff0001 	.word	0xffff0001

08004d44 <fiprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b503      	push	{r0, r1, lr}
 8004d48:	4601      	mov	r1, r0
 8004d4a:	ab03      	add	r3, sp, #12
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <fiprintf+0x20>)
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	f000 fd1f 	bl	8005798 <_vfiprintf_r>
 8004d5a:	b002      	add	sp, #8
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000018 	.word	0x20000018

08004d68 <_fwalk_reent>:
 8004d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	4688      	mov	r8, r1
 8004d70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d74:	2700      	movs	r7, #0
 8004d76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d7a:	f1b9 0901 	subs.w	r9, r9, #1
 8004d7e:	d505      	bpl.n	8004d8c <_fwalk_reent+0x24>
 8004d80:	6824      	ldr	r4, [r4, #0]
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d1f7      	bne.n	8004d76 <_fwalk_reent+0xe>
 8004d86:	4638      	mov	r0, r7
 8004d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d8c:	89ab      	ldrh	r3, [r5, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d907      	bls.n	8004da2 <_fwalk_reent+0x3a>
 8004d92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d96:	3301      	adds	r3, #1
 8004d98:	d003      	beq.n	8004da2 <_fwalk_reent+0x3a>
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	47c0      	blx	r8
 8004da0:	4307      	orrs	r7, r0
 8004da2:	3568      	adds	r5, #104	; 0x68
 8004da4:	e7e9      	b.n	8004d7a <_fwalk_reent+0x12>
	...

08004da8 <_localeconv_r>:
 8004da8:	4800      	ldr	r0, [pc, #0]	; (8004dac <_localeconv_r+0x4>)
 8004daa:	4770      	bx	lr
 8004dac:	2000016c 	.word	0x2000016c

08004db0 <__retarget_lock_init_recursive>:
 8004db0:	4770      	bx	lr

08004db2 <__retarget_lock_acquire_recursive>:
 8004db2:	4770      	bx	lr

08004db4 <__retarget_lock_release_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__swhatbuf_r>:
 8004db6:	b570      	push	{r4, r5, r6, lr}
 8004db8:	460e      	mov	r6, r1
 8004dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	b096      	sub	sp, #88	; 0x58
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	461d      	mov	r5, r3
 8004dc6:	da08      	bge.n	8004dda <__swhatbuf_r+0x24>
 8004dc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	061a      	lsls	r2, r3, #24
 8004dd2:	d410      	bmi.n	8004df6 <__swhatbuf_r+0x40>
 8004dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd8:	e00e      	b.n	8004df8 <__swhatbuf_r+0x42>
 8004dda:	466a      	mov	r2, sp
 8004ddc:	f7fd fce4 	bl	80027a8 <_fstat_r>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	dbf1      	blt.n	8004dc8 <__swhatbuf_r+0x12>
 8004de4:	9a01      	ldr	r2, [sp, #4]
 8004de6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dee:	425a      	negs	r2, r3
 8004df0:	415a      	adcs	r2, r3
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	e7ee      	b.n	8004dd4 <__swhatbuf_r+0x1e>
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	2000      	movs	r0, #0
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	b016      	add	sp, #88	; 0x58
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}

08004e00 <__smakebuf_r>:
 8004e00:	898b      	ldrh	r3, [r1, #12]
 8004e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e04:	079d      	lsls	r5, r3, #30
 8004e06:	4606      	mov	r6, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	d507      	bpl.n	8004e1c <__smakebuf_r+0x1c>
 8004e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	2301      	movs	r3, #1
 8004e16:	6163      	str	r3, [r4, #20]
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	ab01      	add	r3, sp, #4
 8004e1e:	466a      	mov	r2, sp
 8004e20:	f7ff ffc9 	bl	8004db6 <__swhatbuf_r>
 8004e24:	9900      	ldr	r1, [sp, #0]
 8004e26:	4605      	mov	r5, r0
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f000 fc31 	bl	8005690 <_malloc_r>
 8004e2e:	b948      	cbnz	r0, 8004e44 <__smakebuf_r+0x44>
 8004e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e34:	059a      	lsls	r2, r3, #22
 8004e36:	d4ef      	bmi.n	8004e18 <__smakebuf_r+0x18>
 8004e38:	f023 0303 	bic.w	r3, r3, #3
 8004e3c:	f043 0302 	orr.w	r3, r3, #2
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	e7e3      	b.n	8004e0c <__smakebuf_r+0xc>
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <__smakebuf_r+0x7c>)
 8004e46:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	6020      	str	r0, [r4, #0]
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e50:	81a3      	strh	r3, [r4, #12]
 8004e52:	9b00      	ldr	r3, [sp, #0]
 8004e54:	6163      	str	r3, [r4, #20]
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	6120      	str	r0, [r4, #16]
 8004e5a:	b15b      	cbz	r3, 8004e74 <__smakebuf_r+0x74>
 8004e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e60:	4630      	mov	r0, r6
 8004e62:	f7fd fca6 	bl	80027b2 <_isatty_r>
 8004e66:	b128      	cbz	r0, 8004e74 <__smakebuf_r+0x74>
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	81a3      	strh	r3, [r4, #12]
 8004e74:	89a0      	ldrh	r0, [r4, #12]
 8004e76:	4305      	orrs	r5, r0
 8004e78:	81a5      	strh	r5, [r4, #12]
 8004e7a:	e7cd      	b.n	8004e18 <__smakebuf_r+0x18>
 8004e7c:	08004be1 	.word	0x08004be1

08004e80 <malloc>:
 8004e80:	4b02      	ldr	r3, [pc, #8]	; (8004e8c <malloc+0xc>)
 8004e82:	4601      	mov	r1, r0
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	f000 bc03 	b.w	8005690 <_malloc_r>
 8004e8a:	bf00      	nop
 8004e8c:	20000018 	.word	0x20000018

08004e90 <__ascii_mbtowc>:
 8004e90:	b082      	sub	sp, #8
 8004e92:	b901      	cbnz	r1, 8004e96 <__ascii_mbtowc+0x6>
 8004e94:	a901      	add	r1, sp, #4
 8004e96:	b142      	cbz	r2, 8004eaa <__ascii_mbtowc+0x1a>
 8004e98:	b14b      	cbz	r3, 8004eae <__ascii_mbtowc+0x1e>
 8004e9a:	7813      	ldrb	r3, [r2, #0]
 8004e9c:	600b      	str	r3, [r1, #0]
 8004e9e:	7812      	ldrb	r2, [r2, #0]
 8004ea0:	1e10      	subs	r0, r2, #0
 8004ea2:	bf18      	it	ne
 8004ea4:	2001      	movne	r0, #1
 8004ea6:	b002      	add	sp, #8
 8004ea8:	4770      	bx	lr
 8004eaa:	4610      	mov	r0, r2
 8004eac:	e7fb      	b.n	8004ea6 <__ascii_mbtowc+0x16>
 8004eae:	f06f 0001 	mvn.w	r0, #1
 8004eb2:	e7f8      	b.n	8004ea6 <__ascii_mbtowc+0x16>

08004eb4 <memcpy>:
 8004eb4:	440a      	add	r2, r1
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ebc:	d100      	bne.n	8004ec0 <memcpy+0xc>
 8004ebe:	4770      	bx	lr
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	d1f9      	bne.n	8004ec2 <memcpy+0xe>
 8004ece:	bd10      	pop	{r4, pc}

08004ed0 <_Balloc>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	b976      	cbnz	r6, 8004ef8 <_Balloc+0x28>
 8004eda:	2010      	movs	r0, #16
 8004edc:	f7ff ffd0 	bl	8004e80 <malloc>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6260      	str	r0, [r4, #36]	; 0x24
 8004ee4:	b920      	cbnz	r0, 8004ef0 <_Balloc+0x20>
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <_Balloc+0x78>)
 8004ee8:	4818      	ldr	r0, [pc, #96]	; (8004f4c <_Balloc+0x7c>)
 8004eea:	2166      	movs	r1, #102	; 0x66
 8004eec:	f7fe fefa 	bl	8003ce4 <__assert_func>
 8004ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ef4:	6006      	str	r6, [r0, #0]
 8004ef6:	60c6      	str	r6, [r0, #12]
 8004ef8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004efa:	68f3      	ldr	r3, [r6, #12]
 8004efc:	b183      	cbz	r3, 8004f20 <_Balloc+0x50>
 8004efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f06:	b9b8      	cbnz	r0, 8004f38 <_Balloc+0x68>
 8004f08:	2101      	movs	r1, #1
 8004f0a:	fa01 f605 	lsl.w	r6, r1, r5
 8004f0e:	1d72      	adds	r2, r6, #5
 8004f10:	0092      	lsls	r2, r2, #2
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 fb60 	bl	80055d8 <_calloc_r>
 8004f18:	b160      	cbz	r0, 8004f34 <_Balloc+0x64>
 8004f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f1e:	e00e      	b.n	8004f3e <_Balloc+0x6e>
 8004f20:	2221      	movs	r2, #33	; 0x21
 8004f22:	2104      	movs	r1, #4
 8004f24:	4620      	mov	r0, r4
 8004f26:	f000 fb57 	bl	80055d8 <_calloc_r>
 8004f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f2c:	60f0      	str	r0, [r6, #12]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e4      	bne.n	8004efe <_Balloc+0x2e>
 8004f34:	2000      	movs	r0, #0
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	6802      	ldr	r2, [r0, #0]
 8004f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f44:	e7f7      	b.n	8004f36 <_Balloc+0x66>
 8004f46:	bf00      	nop
 8004f48:	0801253a 	.word	0x0801253a
 8004f4c:	0801270e 	.word	0x0801270e

08004f50 <_Bfree>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f54:	4605      	mov	r5, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	b976      	cbnz	r6, 8004f78 <_Bfree+0x28>
 8004f5a:	2010      	movs	r0, #16
 8004f5c:	f7ff ff90 	bl	8004e80 <malloc>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6268      	str	r0, [r5, #36]	; 0x24
 8004f64:	b920      	cbnz	r0, 8004f70 <_Bfree+0x20>
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <_Bfree+0x3c>)
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <_Bfree+0x40>)
 8004f6a:	218a      	movs	r1, #138	; 0x8a
 8004f6c:	f7fe feba 	bl	8003ce4 <__assert_func>
 8004f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f74:	6006      	str	r6, [r0, #0]
 8004f76:	60c6      	str	r6, [r0, #12]
 8004f78:	b13c      	cbz	r4, 8004f8a <_Bfree+0x3a>
 8004f7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f7c:	6862      	ldr	r2, [r4, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f84:	6021      	str	r1, [r4, #0]
 8004f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	0801253a 	.word	0x0801253a
 8004f90:	0801270e 	.word	0x0801270e

08004f94 <__multadd>:
 8004f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	690d      	ldr	r5, [r1, #16]
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	461e      	mov	r6, r3
 8004fa0:	f101 0c14 	add.w	ip, r1, #20
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8004faa:	b299      	uxth	r1, r3
 8004fac:	fb02 6101 	mla	r1, r2, r1, r6
 8004fb0:	0c1e      	lsrs	r6, r3, #16
 8004fb2:	0c0b      	lsrs	r3, r1, #16
 8004fb4:	fb02 3306 	mla	r3, r2, r6, r3
 8004fb8:	b289      	uxth	r1, r1
 8004fba:	3001      	adds	r0, #1
 8004fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fc0:	4285      	cmp	r5, r0
 8004fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8004fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fca:	dcec      	bgt.n	8004fa6 <__multadd+0x12>
 8004fcc:	b30e      	cbz	r6, 8005012 <__multadd+0x7e>
 8004fce:	68a3      	ldr	r3, [r4, #8]
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dc19      	bgt.n	8005008 <__multadd+0x74>
 8004fd4:	6861      	ldr	r1, [r4, #4]
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	3101      	adds	r1, #1
 8004fda:	f7ff ff79 	bl	8004ed0 <_Balloc>
 8004fde:	4680      	mov	r8, r0
 8004fe0:	b928      	cbnz	r0, 8004fee <__multadd+0x5a>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <__multadd+0x84>)
 8004fe6:	480d      	ldr	r0, [pc, #52]	; (800501c <__multadd+0x88>)
 8004fe8:	21b5      	movs	r1, #181	; 0xb5
 8004fea:	f7fe fe7b 	bl	8003ce4 <__assert_func>
 8004fee:	6922      	ldr	r2, [r4, #16]
 8004ff0:	3202      	adds	r2, #2
 8004ff2:	f104 010c 	add.w	r1, r4, #12
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	300c      	adds	r0, #12
 8004ffa:	f7ff ff5b 	bl	8004eb4 <memcpy>
 8004ffe:	4621      	mov	r1, r4
 8005000:	4638      	mov	r0, r7
 8005002:	f7ff ffa5 	bl	8004f50 <_Bfree>
 8005006:	4644      	mov	r4, r8
 8005008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800500c:	3501      	adds	r5, #1
 800500e:	615e      	str	r6, [r3, #20]
 8005010:	6125      	str	r5, [r4, #16]
 8005012:	4620      	mov	r0, r4
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	08012696 	.word	0x08012696
 800501c:	0801270e 	.word	0x0801270e

08005020 <__hi0bits>:
 8005020:	0c03      	lsrs	r3, r0, #16
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	b9d3      	cbnz	r3, 800505c <__hi0bits+0x3c>
 8005026:	0400      	lsls	r0, r0, #16
 8005028:	2310      	movs	r3, #16
 800502a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800502e:	bf04      	itt	eq
 8005030:	0200      	lsleq	r0, r0, #8
 8005032:	3308      	addeq	r3, #8
 8005034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005038:	bf04      	itt	eq
 800503a:	0100      	lsleq	r0, r0, #4
 800503c:	3304      	addeq	r3, #4
 800503e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005042:	bf04      	itt	eq
 8005044:	0080      	lsleq	r0, r0, #2
 8005046:	3302      	addeq	r3, #2
 8005048:	2800      	cmp	r0, #0
 800504a:	db05      	blt.n	8005058 <__hi0bits+0x38>
 800504c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005050:	f103 0301 	add.w	r3, r3, #1
 8005054:	bf08      	it	eq
 8005056:	2320      	moveq	r3, #32
 8005058:	4618      	mov	r0, r3
 800505a:	4770      	bx	lr
 800505c:	2300      	movs	r3, #0
 800505e:	e7e4      	b.n	800502a <__hi0bits+0xa>

08005060 <__lo0bits>:
 8005060:	6803      	ldr	r3, [r0, #0]
 8005062:	f013 0207 	ands.w	r2, r3, #7
 8005066:	4601      	mov	r1, r0
 8005068:	d00b      	beq.n	8005082 <__lo0bits+0x22>
 800506a:	07da      	lsls	r2, r3, #31
 800506c:	d423      	bmi.n	80050b6 <__lo0bits+0x56>
 800506e:	0798      	lsls	r0, r3, #30
 8005070:	bf49      	itett	mi
 8005072:	085b      	lsrmi	r3, r3, #1
 8005074:	089b      	lsrpl	r3, r3, #2
 8005076:	2001      	movmi	r0, #1
 8005078:	600b      	strmi	r3, [r1, #0]
 800507a:	bf5c      	itt	pl
 800507c:	600b      	strpl	r3, [r1, #0]
 800507e:	2002      	movpl	r0, #2
 8005080:	4770      	bx	lr
 8005082:	b298      	uxth	r0, r3
 8005084:	b9a8      	cbnz	r0, 80050b2 <__lo0bits+0x52>
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	2010      	movs	r0, #16
 800508a:	b2da      	uxtb	r2, r3
 800508c:	b90a      	cbnz	r2, 8005092 <__lo0bits+0x32>
 800508e:	3008      	adds	r0, #8
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	071a      	lsls	r2, r3, #28
 8005094:	bf04      	itt	eq
 8005096:	091b      	lsreq	r3, r3, #4
 8005098:	3004      	addeq	r0, #4
 800509a:	079a      	lsls	r2, r3, #30
 800509c:	bf04      	itt	eq
 800509e:	089b      	lsreq	r3, r3, #2
 80050a0:	3002      	addeq	r0, #2
 80050a2:	07da      	lsls	r2, r3, #31
 80050a4:	d403      	bmi.n	80050ae <__lo0bits+0x4e>
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	f100 0001 	add.w	r0, r0, #1
 80050ac:	d005      	beq.n	80050ba <__lo0bits+0x5a>
 80050ae:	600b      	str	r3, [r1, #0]
 80050b0:	4770      	bx	lr
 80050b2:	4610      	mov	r0, r2
 80050b4:	e7e9      	b.n	800508a <__lo0bits+0x2a>
 80050b6:	2000      	movs	r0, #0
 80050b8:	4770      	bx	lr
 80050ba:	2020      	movs	r0, #32
 80050bc:	4770      	bx	lr
	...

080050c0 <__i2b>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	460c      	mov	r4, r1
 80050c4:	2101      	movs	r1, #1
 80050c6:	f7ff ff03 	bl	8004ed0 <_Balloc>
 80050ca:	4602      	mov	r2, r0
 80050cc:	b928      	cbnz	r0, 80050da <__i2b+0x1a>
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <__i2b+0x24>)
 80050d0:	4805      	ldr	r0, [pc, #20]	; (80050e8 <__i2b+0x28>)
 80050d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050d6:	f7fe fe05 	bl	8003ce4 <__assert_func>
 80050da:	2301      	movs	r3, #1
 80050dc:	6144      	str	r4, [r0, #20]
 80050de:	6103      	str	r3, [r0, #16]
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	bf00      	nop
 80050e4:	08012696 	.word	0x08012696
 80050e8:	0801270e 	.word	0x0801270e

080050ec <__multiply>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	4691      	mov	r9, r2
 80050f2:	690a      	ldr	r2, [r1, #16]
 80050f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	bfb8      	it	lt
 80050fc:	460b      	movlt	r3, r1
 80050fe:	460c      	mov	r4, r1
 8005100:	bfbc      	itt	lt
 8005102:	464c      	movlt	r4, r9
 8005104:	4699      	movlt	r9, r3
 8005106:	6927      	ldr	r7, [r4, #16]
 8005108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800510c:	68a3      	ldr	r3, [r4, #8]
 800510e:	6861      	ldr	r1, [r4, #4]
 8005110:	eb07 060a 	add.w	r6, r7, sl
 8005114:	42b3      	cmp	r3, r6
 8005116:	b085      	sub	sp, #20
 8005118:	bfb8      	it	lt
 800511a:	3101      	addlt	r1, #1
 800511c:	f7ff fed8 	bl	8004ed0 <_Balloc>
 8005120:	b930      	cbnz	r0, 8005130 <__multiply+0x44>
 8005122:	4602      	mov	r2, r0
 8005124:	4b44      	ldr	r3, [pc, #272]	; (8005238 <__multiply+0x14c>)
 8005126:	4845      	ldr	r0, [pc, #276]	; (800523c <__multiply+0x150>)
 8005128:	f240 115d 	movw	r1, #349	; 0x15d
 800512c:	f7fe fdda 	bl	8003ce4 <__assert_func>
 8005130:	f100 0514 	add.w	r5, r0, #20
 8005134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005138:	462b      	mov	r3, r5
 800513a:	2200      	movs	r2, #0
 800513c:	4543      	cmp	r3, r8
 800513e:	d321      	bcc.n	8005184 <__multiply+0x98>
 8005140:	f104 0314 	add.w	r3, r4, #20
 8005144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005148:	f109 0314 	add.w	r3, r9, #20
 800514c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005150:	9202      	str	r2, [sp, #8]
 8005152:	1b3a      	subs	r2, r7, r4
 8005154:	3a15      	subs	r2, #21
 8005156:	f022 0203 	bic.w	r2, r2, #3
 800515a:	3204      	adds	r2, #4
 800515c:	f104 0115 	add.w	r1, r4, #21
 8005160:	428f      	cmp	r7, r1
 8005162:	bf38      	it	cc
 8005164:	2204      	movcc	r2, #4
 8005166:	9201      	str	r2, [sp, #4]
 8005168:	9a02      	ldr	r2, [sp, #8]
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	429a      	cmp	r2, r3
 800516e:	d80c      	bhi.n	800518a <__multiply+0x9e>
 8005170:	2e00      	cmp	r6, #0
 8005172:	dd03      	ble.n	800517c <__multiply+0x90>
 8005174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05a      	beq.n	8005232 <__multiply+0x146>
 800517c:	6106      	str	r6, [r0, #16]
 800517e:	b005      	add	sp, #20
 8005180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005184:	f843 2b04 	str.w	r2, [r3], #4
 8005188:	e7d8      	b.n	800513c <__multiply+0x50>
 800518a:	f8b3 a000 	ldrh.w	sl, [r3]
 800518e:	f1ba 0f00 	cmp.w	sl, #0
 8005192:	d024      	beq.n	80051de <__multiply+0xf2>
 8005194:	f104 0e14 	add.w	lr, r4, #20
 8005198:	46a9      	mov	r9, r5
 800519a:	f04f 0c00 	mov.w	ip, #0
 800519e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80051a2:	f8d9 1000 	ldr.w	r1, [r9]
 80051a6:	fa1f fb82 	uxth.w	fp, r2
 80051aa:	b289      	uxth	r1, r1
 80051ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80051b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051b4:	f8d9 2000 	ldr.w	r2, [r9]
 80051b8:	4461      	add	r1, ip
 80051ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051be:	fb0a c20b 	mla	r2, sl, fp, ip
 80051c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051c6:	b289      	uxth	r1, r1
 80051c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051cc:	4577      	cmp	r7, lr
 80051ce:	f849 1b04 	str.w	r1, [r9], #4
 80051d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051d6:	d8e2      	bhi.n	800519e <__multiply+0xb2>
 80051d8:	9a01      	ldr	r2, [sp, #4]
 80051da:	f845 c002 	str.w	ip, [r5, r2]
 80051de:	9a03      	ldr	r2, [sp, #12]
 80051e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80051e4:	3304      	adds	r3, #4
 80051e6:	f1b9 0f00 	cmp.w	r9, #0
 80051ea:	d020      	beq.n	800522e <__multiply+0x142>
 80051ec:	6829      	ldr	r1, [r5, #0]
 80051ee:	f104 0c14 	add.w	ip, r4, #20
 80051f2:	46ae      	mov	lr, r5
 80051f4:	f04f 0a00 	mov.w	sl, #0
 80051f8:	f8bc b000 	ldrh.w	fp, [ip]
 80051fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005200:	fb09 220b 	mla	r2, r9, fp, r2
 8005204:	4492      	add	sl, r2
 8005206:	b289      	uxth	r1, r1
 8005208:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800520c:	f84e 1b04 	str.w	r1, [lr], #4
 8005210:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005214:	f8be 1000 	ldrh.w	r1, [lr]
 8005218:	0c12      	lsrs	r2, r2, #16
 800521a:	fb09 1102 	mla	r1, r9, r2, r1
 800521e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005222:	4567      	cmp	r7, ip
 8005224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005228:	d8e6      	bhi.n	80051f8 <__multiply+0x10c>
 800522a:	9a01      	ldr	r2, [sp, #4]
 800522c:	50a9      	str	r1, [r5, r2]
 800522e:	3504      	adds	r5, #4
 8005230:	e79a      	b.n	8005168 <__multiply+0x7c>
 8005232:	3e01      	subs	r6, #1
 8005234:	e79c      	b.n	8005170 <__multiply+0x84>
 8005236:	bf00      	nop
 8005238:	08012696 	.word	0x08012696
 800523c:	0801270e 	.word	0x0801270e

08005240 <__pow5mult>:
 8005240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	4615      	mov	r5, r2
 8005246:	f012 0203 	ands.w	r2, r2, #3
 800524a:	4606      	mov	r6, r0
 800524c:	460f      	mov	r7, r1
 800524e:	d007      	beq.n	8005260 <__pow5mult+0x20>
 8005250:	4c25      	ldr	r4, [pc, #148]	; (80052e8 <__pow5mult+0xa8>)
 8005252:	3a01      	subs	r2, #1
 8005254:	2300      	movs	r3, #0
 8005256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800525a:	f7ff fe9b 	bl	8004f94 <__multadd>
 800525e:	4607      	mov	r7, r0
 8005260:	10ad      	asrs	r5, r5, #2
 8005262:	d03d      	beq.n	80052e0 <__pow5mult+0xa0>
 8005264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005266:	b97c      	cbnz	r4, 8005288 <__pow5mult+0x48>
 8005268:	2010      	movs	r0, #16
 800526a:	f7ff fe09 	bl	8004e80 <malloc>
 800526e:	4602      	mov	r2, r0
 8005270:	6270      	str	r0, [r6, #36]	; 0x24
 8005272:	b928      	cbnz	r0, 8005280 <__pow5mult+0x40>
 8005274:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <__pow5mult+0xac>)
 8005276:	481e      	ldr	r0, [pc, #120]	; (80052f0 <__pow5mult+0xb0>)
 8005278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800527c:	f7fe fd32 	bl	8003ce4 <__assert_func>
 8005280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005284:	6004      	str	r4, [r0, #0]
 8005286:	60c4      	str	r4, [r0, #12]
 8005288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800528c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005290:	b94c      	cbnz	r4, 80052a6 <__pow5mult+0x66>
 8005292:	f240 2171 	movw	r1, #625	; 0x271
 8005296:	4630      	mov	r0, r6
 8005298:	f7ff ff12 	bl	80050c0 <__i2b>
 800529c:	2300      	movs	r3, #0
 800529e:	f8c8 0008 	str.w	r0, [r8, #8]
 80052a2:	4604      	mov	r4, r0
 80052a4:	6003      	str	r3, [r0, #0]
 80052a6:	f04f 0900 	mov.w	r9, #0
 80052aa:	07eb      	lsls	r3, r5, #31
 80052ac:	d50a      	bpl.n	80052c4 <__pow5mult+0x84>
 80052ae:	4639      	mov	r1, r7
 80052b0:	4622      	mov	r2, r4
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ff1a 	bl	80050ec <__multiply>
 80052b8:	4639      	mov	r1, r7
 80052ba:	4680      	mov	r8, r0
 80052bc:	4630      	mov	r0, r6
 80052be:	f7ff fe47 	bl	8004f50 <_Bfree>
 80052c2:	4647      	mov	r7, r8
 80052c4:	106d      	asrs	r5, r5, #1
 80052c6:	d00b      	beq.n	80052e0 <__pow5mult+0xa0>
 80052c8:	6820      	ldr	r0, [r4, #0]
 80052ca:	b938      	cbnz	r0, 80052dc <__pow5mult+0x9c>
 80052cc:	4622      	mov	r2, r4
 80052ce:	4621      	mov	r1, r4
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7ff ff0b 	bl	80050ec <__multiply>
 80052d6:	6020      	str	r0, [r4, #0]
 80052d8:	f8c0 9000 	str.w	r9, [r0]
 80052dc:	4604      	mov	r4, r0
 80052de:	e7e4      	b.n	80052aa <__pow5mult+0x6a>
 80052e0:	4638      	mov	r0, r7
 80052e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e6:	bf00      	nop
 80052e8:	08012880 	.word	0x08012880
 80052ec:	0801253a 	.word	0x0801253a
 80052f0:	0801270e 	.word	0x0801270e

080052f4 <__lshift>:
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	460c      	mov	r4, r1
 80052fa:	6849      	ldr	r1, [r1, #4]
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005302:	68a3      	ldr	r3, [r4, #8]
 8005304:	4607      	mov	r7, r0
 8005306:	4691      	mov	r9, r2
 8005308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800530c:	f108 0601 	add.w	r6, r8, #1
 8005310:	42b3      	cmp	r3, r6
 8005312:	db0b      	blt.n	800532c <__lshift+0x38>
 8005314:	4638      	mov	r0, r7
 8005316:	f7ff fddb 	bl	8004ed0 <_Balloc>
 800531a:	4605      	mov	r5, r0
 800531c:	b948      	cbnz	r0, 8005332 <__lshift+0x3e>
 800531e:	4602      	mov	r2, r0
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <__lshift+0xd8>)
 8005322:	482b      	ldr	r0, [pc, #172]	; (80053d0 <__lshift+0xdc>)
 8005324:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005328:	f7fe fcdc 	bl	8003ce4 <__assert_func>
 800532c:	3101      	adds	r1, #1
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	e7ee      	b.n	8005310 <__lshift+0x1c>
 8005332:	2300      	movs	r3, #0
 8005334:	f100 0114 	add.w	r1, r0, #20
 8005338:	f100 0210 	add.w	r2, r0, #16
 800533c:	4618      	mov	r0, r3
 800533e:	4553      	cmp	r3, sl
 8005340:	db37      	blt.n	80053b2 <__lshift+0xbe>
 8005342:	6920      	ldr	r0, [r4, #16]
 8005344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005348:	f104 0314 	add.w	r3, r4, #20
 800534c:	f019 091f 	ands.w	r9, r9, #31
 8005350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005358:	d02f      	beq.n	80053ba <__lshift+0xc6>
 800535a:	f1c9 0e20 	rsb	lr, r9, #32
 800535e:	468a      	mov	sl, r1
 8005360:	f04f 0c00 	mov.w	ip, #0
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	fa02 f209 	lsl.w	r2, r2, r9
 800536a:	ea42 020c 	orr.w	r2, r2, ip
 800536e:	f84a 2b04 	str.w	r2, [sl], #4
 8005372:	f853 2b04 	ldr.w	r2, [r3], #4
 8005376:	4298      	cmp	r0, r3
 8005378:	fa22 fc0e 	lsr.w	ip, r2, lr
 800537c:	d8f2      	bhi.n	8005364 <__lshift+0x70>
 800537e:	1b03      	subs	r3, r0, r4
 8005380:	3b15      	subs	r3, #21
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	3304      	adds	r3, #4
 8005388:	f104 0215 	add.w	r2, r4, #21
 800538c:	4290      	cmp	r0, r2
 800538e:	bf38      	it	cc
 8005390:	2304      	movcc	r3, #4
 8005392:	f841 c003 	str.w	ip, [r1, r3]
 8005396:	f1bc 0f00 	cmp.w	ip, #0
 800539a:	d001      	beq.n	80053a0 <__lshift+0xac>
 800539c:	f108 0602 	add.w	r6, r8, #2
 80053a0:	3e01      	subs	r6, #1
 80053a2:	4638      	mov	r0, r7
 80053a4:	612e      	str	r6, [r5, #16]
 80053a6:	4621      	mov	r1, r4
 80053a8:	f7ff fdd2 	bl	8004f50 <_Bfree>
 80053ac:	4628      	mov	r0, r5
 80053ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80053b6:	3301      	adds	r3, #1
 80053b8:	e7c1      	b.n	800533e <__lshift+0x4a>
 80053ba:	3904      	subs	r1, #4
 80053bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80053c4:	4298      	cmp	r0, r3
 80053c6:	d8f9      	bhi.n	80053bc <__lshift+0xc8>
 80053c8:	e7ea      	b.n	80053a0 <__lshift+0xac>
 80053ca:	bf00      	nop
 80053cc:	08012696 	.word	0x08012696
 80053d0:	0801270e 	.word	0x0801270e

080053d4 <__mcmp>:
 80053d4:	b530      	push	{r4, r5, lr}
 80053d6:	6902      	ldr	r2, [r0, #16]
 80053d8:	690c      	ldr	r4, [r1, #16]
 80053da:	1b12      	subs	r2, r2, r4
 80053dc:	d10e      	bne.n	80053fc <__mcmp+0x28>
 80053de:	f100 0314 	add.w	r3, r0, #20
 80053e2:	3114      	adds	r1, #20
 80053e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80053e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80053ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80053f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80053f4:	42a5      	cmp	r5, r4
 80053f6:	d003      	beq.n	8005400 <__mcmp+0x2c>
 80053f8:	d305      	bcc.n	8005406 <__mcmp+0x32>
 80053fa:	2201      	movs	r2, #1
 80053fc:	4610      	mov	r0, r2
 80053fe:	bd30      	pop	{r4, r5, pc}
 8005400:	4283      	cmp	r3, r0
 8005402:	d3f3      	bcc.n	80053ec <__mcmp+0x18>
 8005404:	e7fa      	b.n	80053fc <__mcmp+0x28>
 8005406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800540a:	e7f7      	b.n	80053fc <__mcmp+0x28>

0800540c <__mdiff>:
 800540c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	460c      	mov	r4, r1
 8005412:	4606      	mov	r6, r0
 8005414:	4611      	mov	r1, r2
 8005416:	4620      	mov	r0, r4
 8005418:	4690      	mov	r8, r2
 800541a:	f7ff ffdb 	bl	80053d4 <__mcmp>
 800541e:	1e05      	subs	r5, r0, #0
 8005420:	d110      	bne.n	8005444 <__mdiff+0x38>
 8005422:	4629      	mov	r1, r5
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff fd53 	bl	8004ed0 <_Balloc>
 800542a:	b930      	cbnz	r0, 800543a <__mdiff+0x2e>
 800542c:	4b3a      	ldr	r3, [pc, #232]	; (8005518 <__mdiff+0x10c>)
 800542e:	4602      	mov	r2, r0
 8005430:	f240 2132 	movw	r1, #562	; 0x232
 8005434:	4839      	ldr	r0, [pc, #228]	; (800551c <__mdiff+0x110>)
 8005436:	f7fe fc55 	bl	8003ce4 <__assert_func>
 800543a:	2301      	movs	r3, #1
 800543c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	bfa4      	itt	ge
 8005446:	4643      	movge	r3, r8
 8005448:	46a0      	movge	r8, r4
 800544a:	4630      	mov	r0, r6
 800544c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005450:	bfa6      	itte	ge
 8005452:	461c      	movge	r4, r3
 8005454:	2500      	movge	r5, #0
 8005456:	2501      	movlt	r5, #1
 8005458:	f7ff fd3a 	bl	8004ed0 <_Balloc>
 800545c:	b920      	cbnz	r0, 8005468 <__mdiff+0x5c>
 800545e:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <__mdiff+0x10c>)
 8005460:	4602      	mov	r2, r0
 8005462:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005466:	e7e5      	b.n	8005434 <__mdiff+0x28>
 8005468:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800546c:	6926      	ldr	r6, [r4, #16]
 800546e:	60c5      	str	r5, [r0, #12]
 8005470:	f104 0914 	add.w	r9, r4, #20
 8005474:	f108 0514 	add.w	r5, r8, #20
 8005478:	f100 0e14 	add.w	lr, r0, #20
 800547c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005484:	f108 0210 	add.w	r2, r8, #16
 8005488:	46f2      	mov	sl, lr
 800548a:	2100      	movs	r1, #0
 800548c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005494:	fa1f f883 	uxth.w	r8, r3
 8005498:	fa11 f18b 	uxtah	r1, r1, fp
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	eba1 0808 	sub.w	r8, r1, r8
 80054a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80054aa:	fa1f f888 	uxth.w	r8, r8
 80054ae:	1419      	asrs	r1, r3, #16
 80054b0:	454e      	cmp	r6, r9
 80054b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054b6:	f84a 3b04 	str.w	r3, [sl], #4
 80054ba:	d8e7      	bhi.n	800548c <__mdiff+0x80>
 80054bc:	1b33      	subs	r3, r6, r4
 80054be:	3b15      	subs	r3, #21
 80054c0:	f023 0303 	bic.w	r3, r3, #3
 80054c4:	3304      	adds	r3, #4
 80054c6:	3415      	adds	r4, #21
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	bf38      	it	cc
 80054cc:	2304      	movcc	r3, #4
 80054ce:	441d      	add	r5, r3
 80054d0:	4473      	add	r3, lr
 80054d2:	469e      	mov	lr, r3
 80054d4:	462e      	mov	r6, r5
 80054d6:	4566      	cmp	r6, ip
 80054d8:	d30e      	bcc.n	80054f8 <__mdiff+0xec>
 80054da:	f10c 0203 	add.w	r2, ip, #3
 80054de:	1b52      	subs	r2, r2, r5
 80054e0:	f022 0203 	bic.w	r2, r2, #3
 80054e4:	3d03      	subs	r5, #3
 80054e6:	45ac      	cmp	ip, r5
 80054e8:	bf38      	it	cc
 80054ea:	2200      	movcc	r2, #0
 80054ec:	441a      	add	r2, r3
 80054ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80054f2:	b17b      	cbz	r3, 8005514 <__mdiff+0x108>
 80054f4:	6107      	str	r7, [r0, #16]
 80054f6:	e7a3      	b.n	8005440 <__mdiff+0x34>
 80054f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80054fc:	fa11 f288 	uxtah	r2, r1, r8
 8005500:	1414      	asrs	r4, r2, #16
 8005502:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005506:	b292      	uxth	r2, r2
 8005508:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800550c:	f84e 2b04 	str.w	r2, [lr], #4
 8005510:	1421      	asrs	r1, r4, #16
 8005512:	e7e0      	b.n	80054d6 <__mdiff+0xca>
 8005514:	3f01      	subs	r7, #1
 8005516:	e7ea      	b.n	80054ee <__mdiff+0xe2>
 8005518:	08012696 	.word	0x08012696
 800551c:	0801270e 	.word	0x0801270e

08005520 <__d2b>:
 8005520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005524:	4689      	mov	r9, r1
 8005526:	2101      	movs	r1, #1
 8005528:	ec57 6b10 	vmov	r6, r7, d0
 800552c:	4690      	mov	r8, r2
 800552e:	f7ff fccf 	bl	8004ed0 <_Balloc>
 8005532:	4604      	mov	r4, r0
 8005534:	b930      	cbnz	r0, 8005544 <__d2b+0x24>
 8005536:	4602      	mov	r2, r0
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <__d2b+0xb0>)
 800553a:	4826      	ldr	r0, [pc, #152]	; (80055d4 <__d2b+0xb4>)
 800553c:	f240 310a 	movw	r1, #778	; 0x30a
 8005540:	f7fe fbd0 	bl	8003ce4 <__assert_func>
 8005544:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800554c:	bb35      	cbnz	r5, 800559c <__d2b+0x7c>
 800554e:	2e00      	cmp	r6, #0
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	d028      	beq.n	80055a6 <__d2b+0x86>
 8005554:	4668      	mov	r0, sp
 8005556:	9600      	str	r6, [sp, #0]
 8005558:	f7ff fd82 	bl	8005060 <__lo0bits>
 800555c:	9900      	ldr	r1, [sp, #0]
 800555e:	b300      	cbz	r0, 80055a2 <__d2b+0x82>
 8005560:	9a01      	ldr	r2, [sp, #4]
 8005562:	f1c0 0320 	rsb	r3, r0, #32
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	430b      	orrs	r3, r1
 800556c:	40c2      	lsrs	r2, r0
 800556e:	6163      	str	r3, [r4, #20]
 8005570:	9201      	str	r2, [sp, #4]
 8005572:	9b01      	ldr	r3, [sp, #4]
 8005574:	61a3      	str	r3, [r4, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2202      	movne	r2, #2
 800557c:	2201      	moveq	r2, #1
 800557e:	6122      	str	r2, [r4, #16]
 8005580:	b1d5      	cbz	r5, 80055b8 <__d2b+0x98>
 8005582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005586:	4405      	add	r5, r0
 8005588:	f8c9 5000 	str.w	r5, [r9]
 800558c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005590:	f8c8 0000 	str.w	r0, [r8]
 8005594:	4620      	mov	r0, r4
 8005596:	b003      	add	sp, #12
 8005598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800559c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a0:	e7d5      	b.n	800554e <__d2b+0x2e>
 80055a2:	6161      	str	r1, [r4, #20]
 80055a4:	e7e5      	b.n	8005572 <__d2b+0x52>
 80055a6:	a801      	add	r0, sp, #4
 80055a8:	f7ff fd5a 	bl	8005060 <__lo0bits>
 80055ac:	9b01      	ldr	r3, [sp, #4]
 80055ae:	6163      	str	r3, [r4, #20]
 80055b0:	2201      	movs	r2, #1
 80055b2:	6122      	str	r2, [r4, #16]
 80055b4:	3020      	adds	r0, #32
 80055b6:	e7e3      	b.n	8005580 <__d2b+0x60>
 80055b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055c0:	f8c9 0000 	str.w	r0, [r9]
 80055c4:	6918      	ldr	r0, [r3, #16]
 80055c6:	f7ff fd2b 	bl	8005020 <__hi0bits>
 80055ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055ce:	e7df      	b.n	8005590 <__d2b+0x70>
 80055d0:	08012696 	.word	0x08012696
 80055d4:	0801270e 	.word	0x0801270e

080055d8 <_calloc_r>:
 80055d8:	b513      	push	{r0, r1, r4, lr}
 80055da:	434a      	muls	r2, r1
 80055dc:	4611      	mov	r1, r2
 80055de:	9201      	str	r2, [sp, #4]
 80055e0:	f000 f856 	bl	8005690 <_malloc_r>
 80055e4:	4604      	mov	r4, r0
 80055e6:	b118      	cbz	r0, 80055f0 <_calloc_r+0x18>
 80055e8:	9a01      	ldr	r2, [sp, #4]
 80055ea:	2100      	movs	r1, #0
 80055ec:	f7fd fd6a 	bl	80030c4 <memset>
 80055f0:	4620      	mov	r0, r4
 80055f2:	b002      	add	sp, #8
 80055f4:	bd10      	pop	{r4, pc}
	...

080055f8 <_free_r>:
 80055f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055fa:	2900      	cmp	r1, #0
 80055fc:	d044      	beq.n	8005688 <_free_r+0x90>
 80055fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005602:	9001      	str	r0, [sp, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f1a1 0404 	sub.w	r4, r1, #4
 800560a:	bfb8      	it	lt
 800560c:	18e4      	addlt	r4, r4, r3
 800560e:	f000 fb27 	bl	8005c60 <__malloc_lock>
 8005612:	4a1e      	ldr	r2, [pc, #120]	; (800568c <_free_r+0x94>)
 8005614:	9801      	ldr	r0, [sp, #4]
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	b933      	cbnz	r3, 8005628 <_free_r+0x30>
 800561a:	6063      	str	r3, [r4, #4]
 800561c:	6014      	str	r4, [r2, #0]
 800561e:	b003      	add	sp, #12
 8005620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005624:	f000 bb22 	b.w	8005c6c <__malloc_unlock>
 8005628:	42a3      	cmp	r3, r4
 800562a:	d908      	bls.n	800563e <_free_r+0x46>
 800562c:	6825      	ldr	r5, [r4, #0]
 800562e:	1961      	adds	r1, r4, r5
 8005630:	428b      	cmp	r3, r1
 8005632:	bf01      	itttt	eq
 8005634:	6819      	ldreq	r1, [r3, #0]
 8005636:	685b      	ldreq	r3, [r3, #4]
 8005638:	1949      	addeq	r1, r1, r5
 800563a:	6021      	streq	r1, [r4, #0]
 800563c:	e7ed      	b.n	800561a <_free_r+0x22>
 800563e:	461a      	mov	r2, r3
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	b10b      	cbz	r3, 8005648 <_free_r+0x50>
 8005644:	42a3      	cmp	r3, r4
 8005646:	d9fa      	bls.n	800563e <_free_r+0x46>
 8005648:	6811      	ldr	r1, [r2, #0]
 800564a:	1855      	adds	r5, r2, r1
 800564c:	42a5      	cmp	r5, r4
 800564e:	d10b      	bne.n	8005668 <_free_r+0x70>
 8005650:	6824      	ldr	r4, [r4, #0]
 8005652:	4421      	add	r1, r4
 8005654:	1854      	adds	r4, r2, r1
 8005656:	42a3      	cmp	r3, r4
 8005658:	6011      	str	r1, [r2, #0]
 800565a:	d1e0      	bne.n	800561e <_free_r+0x26>
 800565c:	681c      	ldr	r4, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	6053      	str	r3, [r2, #4]
 8005662:	4421      	add	r1, r4
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	e7da      	b.n	800561e <_free_r+0x26>
 8005668:	d902      	bls.n	8005670 <_free_r+0x78>
 800566a:	230c      	movs	r3, #12
 800566c:	6003      	str	r3, [r0, #0]
 800566e:	e7d6      	b.n	800561e <_free_r+0x26>
 8005670:	6825      	ldr	r5, [r4, #0]
 8005672:	1961      	adds	r1, r4, r5
 8005674:	428b      	cmp	r3, r1
 8005676:	bf04      	itt	eq
 8005678:	6819      	ldreq	r1, [r3, #0]
 800567a:	685b      	ldreq	r3, [r3, #4]
 800567c:	6063      	str	r3, [r4, #4]
 800567e:	bf04      	itt	eq
 8005680:	1949      	addeq	r1, r1, r5
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	6054      	str	r4, [r2, #4]
 8005686:	e7ca      	b.n	800561e <_free_r+0x26>
 8005688:	b003      	add	sp, #12
 800568a:	bd30      	pop	{r4, r5, pc}
 800568c:	20000c04 	.word	0x20000c04

08005690 <_malloc_r>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	1ccd      	adds	r5, r1, #3
 8005694:	f025 0503 	bic.w	r5, r5, #3
 8005698:	3508      	adds	r5, #8
 800569a:	2d0c      	cmp	r5, #12
 800569c:	bf38      	it	cc
 800569e:	250c      	movcc	r5, #12
 80056a0:	2d00      	cmp	r5, #0
 80056a2:	4606      	mov	r6, r0
 80056a4:	db01      	blt.n	80056aa <_malloc_r+0x1a>
 80056a6:	42a9      	cmp	r1, r5
 80056a8:	d903      	bls.n	80056b2 <_malloc_r+0x22>
 80056aa:	230c      	movs	r3, #12
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	2000      	movs	r0, #0
 80056b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b2:	f000 fad5 	bl	8005c60 <__malloc_lock>
 80056b6:	4921      	ldr	r1, [pc, #132]	; (800573c <_malloc_r+0xac>)
 80056b8:	680a      	ldr	r2, [r1, #0]
 80056ba:	4614      	mov	r4, r2
 80056bc:	b99c      	cbnz	r4, 80056e6 <_malloc_r+0x56>
 80056be:	4f20      	ldr	r7, [pc, #128]	; (8005740 <_malloc_r+0xb0>)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	b923      	cbnz	r3, 80056ce <_malloc_r+0x3e>
 80056c4:	4621      	mov	r1, r4
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7fd f854 	bl	8002774 <_sbrk_r>
 80056cc:	6038      	str	r0, [r7, #0]
 80056ce:	4629      	mov	r1, r5
 80056d0:	4630      	mov	r0, r6
 80056d2:	f7fd f84f 	bl	8002774 <_sbrk_r>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	d123      	bne.n	8005722 <_malloc_r+0x92>
 80056da:	230c      	movs	r3, #12
 80056dc:	6033      	str	r3, [r6, #0]
 80056de:	4630      	mov	r0, r6
 80056e0:	f000 fac4 	bl	8005c6c <__malloc_unlock>
 80056e4:	e7e3      	b.n	80056ae <_malloc_r+0x1e>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	1b5b      	subs	r3, r3, r5
 80056ea:	d417      	bmi.n	800571c <_malloc_r+0x8c>
 80056ec:	2b0b      	cmp	r3, #11
 80056ee:	d903      	bls.n	80056f8 <_malloc_r+0x68>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	441c      	add	r4, r3
 80056f4:	6025      	str	r5, [r4, #0]
 80056f6:	e004      	b.n	8005702 <_malloc_r+0x72>
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	42a2      	cmp	r2, r4
 80056fc:	bf0c      	ite	eq
 80056fe:	600b      	streq	r3, [r1, #0]
 8005700:	6053      	strne	r3, [r2, #4]
 8005702:	4630      	mov	r0, r6
 8005704:	f000 fab2 	bl	8005c6c <__malloc_unlock>
 8005708:	f104 000b 	add.w	r0, r4, #11
 800570c:	1d23      	adds	r3, r4, #4
 800570e:	f020 0007 	bic.w	r0, r0, #7
 8005712:	1ac2      	subs	r2, r0, r3
 8005714:	d0cc      	beq.n	80056b0 <_malloc_r+0x20>
 8005716:	1a1b      	subs	r3, r3, r0
 8005718:	50a3      	str	r3, [r4, r2]
 800571a:	e7c9      	b.n	80056b0 <_malloc_r+0x20>
 800571c:	4622      	mov	r2, r4
 800571e:	6864      	ldr	r4, [r4, #4]
 8005720:	e7cc      	b.n	80056bc <_malloc_r+0x2c>
 8005722:	1cc4      	adds	r4, r0, #3
 8005724:	f024 0403 	bic.w	r4, r4, #3
 8005728:	42a0      	cmp	r0, r4
 800572a:	d0e3      	beq.n	80056f4 <_malloc_r+0x64>
 800572c:	1a21      	subs	r1, r4, r0
 800572e:	4630      	mov	r0, r6
 8005730:	f7fd f820 	bl	8002774 <_sbrk_r>
 8005734:	3001      	adds	r0, #1
 8005736:	d1dd      	bne.n	80056f4 <_malloc_r+0x64>
 8005738:	e7cf      	b.n	80056da <_malloc_r+0x4a>
 800573a:	bf00      	nop
 800573c:	20000c04 	.word	0x20000c04
 8005740:	20000c08 	.word	0x20000c08

08005744 <__sfputc_r>:
 8005744:	6893      	ldr	r3, [r2, #8]
 8005746:	3b01      	subs	r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	b410      	push	{r4}
 800574c:	6093      	str	r3, [r2, #8]
 800574e:	da08      	bge.n	8005762 <__sfputc_r+0x1e>
 8005750:	6994      	ldr	r4, [r2, #24]
 8005752:	42a3      	cmp	r3, r4
 8005754:	db01      	blt.n	800575a <__sfputc_r+0x16>
 8005756:	290a      	cmp	r1, #10
 8005758:	d103      	bne.n	8005762 <__sfputc_r+0x1e>
 800575a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575e:	f000 b98f 	b.w	8005a80 <__swbuf_r>
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	1c58      	adds	r0, r3, #1
 8005766:	6010      	str	r0, [r2, #0]
 8005768:	7019      	strb	r1, [r3, #0]
 800576a:	4608      	mov	r0, r1
 800576c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005770:	4770      	bx	lr

08005772 <__sfputs_r>:
 8005772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	4614      	mov	r4, r2
 800577a:	18d5      	adds	r5, r2, r3
 800577c:	42ac      	cmp	r4, r5
 800577e:	d101      	bne.n	8005784 <__sfputs_r+0x12>
 8005780:	2000      	movs	r0, #0
 8005782:	e007      	b.n	8005794 <__sfputs_r+0x22>
 8005784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005788:	463a      	mov	r2, r7
 800578a:	4630      	mov	r0, r6
 800578c:	f7ff ffda 	bl	8005744 <__sfputc_r>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d1f3      	bne.n	800577c <__sfputs_r+0xa>
 8005794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005798 <_vfiprintf_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	460d      	mov	r5, r1
 800579e:	b09d      	sub	sp, #116	; 0x74
 80057a0:	4614      	mov	r4, r2
 80057a2:	4698      	mov	r8, r3
 80057a4:	4606      	mov	r6, r0
 80057a6:	b118      	cbz	r0, 80057b0 <_vfiprintf_r+0x18>
 80057a8:	6983      	ldr	r3, [r0, #24]
 80057aa:	b90b      	cbnz	r3, 80057b0 <_vfiprintf_r+0x18>
 80057ac:	f7ff fa4c 	bl	8004c48 <__sinit>
 80057b0:	4b89      	ldr	r3, [pc, #548]	; (80059d8 <_vfiprintf_r+0x240>)
 80057b2:	429d      	cmp	r5, r3
 80057b4:	d11b      	bne.n	80057ee <_vfiprintf_r+0x56>
 80057b6:	6875      	ldr	r5, [r6, #4]
 80057b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ba:	07d9      	lsls	r1, r3, #31
 80057bc:	d405      	bmi.n	80057ca <_vfiprintf_r+0x32>
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	059a      	lsls	r2, r3, #22
 80057c2:	d402      	bmi.n	80057ca <_vfiprintf_r+0x32>
 80057c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c6:	f7ff faf4 	bl	8004db2 <__retarget_lock_acquire_recursive>
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	071b      	lsls	r3, r3, #28
 80057ce:	d501      	bpl.n	80057d4 <_vfiprintf_r+0x3c>
 80057d0:	692b      	ldr	r3, [r5, #16]
 80057d2:	b9eb      	cbnz	r3, 8005810 <_vfiprintf_r+0x78>
 80057d4:	4629      	mov	r1, r5
 80057d6:	4630      	mov	r0, r6
 80057d8:	f000 f9b2 	bl	8005b40 <__swsetup_r>
 80057dc:	b1c0      	cbz	r0, 8005810 <_vfiprintf_r+0x78>
 80057de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057e0:	07dc      	lsls	r4, r3, #31
 80057e2:	d50e      	bpl.n	8005802 <_vfiprintf_r+0x6a>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e8:	b01d      	add	sp, #116	; 0x74
 80057ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ee:	4b7b      	ldr	r3, [pc, #492]	; (80059dc <_vfiprintf_r+0x244>)
 80057f0:	429d      	cmp	r5, r3
 80057f2:	d101      	bne.n	80057f8 <_vfiprintf_r+0x60>
 80057f4:	68b5      	ldr	r5, [r6, #8]
 80057f6:	e7df      	b.n	80057b8 <_vfiprintf_r+0x20>
 80057f8:	4b79      	ldr	r3, [pc, #484]	; (80059e0 <_vfiprintf_r+0x248>)
 80057fa:	429d      	cmp	r5, r3
 80057fc:	bf08      	it	eq
 80057fe:	68f5      	ldreq	r5, [r6, #12]
 8005800:	e7da      	b.n	80057b8 <_vfiprintf_r+0x20>
 8005802:	89ab      	ldrh	r3, [r5, #12]
 8005804:	0598      	lsls	r0, r3, #22
 8005806:	d4ed      	bmi.n	80057e4 <_vfiprintf_r+0x4c>
 8005808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800580a:	f7ff fad3 	bl	8004db4 <__retarget_lock_release_recursive>
 800580e:	e7e9      	b.n	80057e4 <_vfiprintf_r+0x4c>
 8005810:	2300      	movs	r3, #0
 8005812:	9309      	str	r3, [sp, #36]	; 0x24
 8005814:	2320      	movs	r3, #32
 8005816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800581a:	f8cd 800c 	str.w	r8, [sp, #12]
 800581e:	2330      	movs	r3, #48	; 0x30
 8005820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059e4 <_vfiprintf_r+0x24c>
 8005824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005828:	f04f 0901 	mov.w	r9, #1
 800582c:	4623      	mov	r3, r4
 800582e:	469a      	mov	sl, r3
 8005830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005834:	b10a      	cbz	r2, 800583a <_vfiprintf_r+0xa2>
 8005836:	2a25      	cmp	r2, #37	; 0x25
 8005838:	d1f9      	bne.n	800582e <_vfiprintf_r+0x96>
 800583a:	ebba 0b04 	subs.w	fp, sl, r4
 800583e:	d00b      	beq.n	8005858 <_vfiprintf_r+0xc0>
 8005840:	465b      	mov	r3, fp
 8005842:	4622      	mov	r2, r4
 8005844:	4629      	mov	r1, r5
 8005846:	4630      	mov	r0, r6
 8005848:	f7ff ff93 	bl	8005772 <__sfputs_r>
 800584c:	3001      	adds	r0, #1
 800584e:	f000 80aa 	beq.w	80059a6 <_vfiprintf_r+0x20e>
 8005852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005854:	445a      	add	r2, fp
 8005856:	9209      	str	r2, [sp, #36]	; 0x24
 8005858:	f89a 3000 	ldrb.w	r3, [sl]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80a2 	beq.w	80059a6 <_vfiprintf_r+0x20e>
 8005862:	2300      	movs	r3, #0
 8005864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800586c:	f10a 0a01 	add.w	sl, sl, #1
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	9307      	str	r3, [sp, #28]
 8005874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005878:	931a      	str	r3, [sp, #104]	; 0x68
 800587a:	4654      	mov	r4, sl
 800587c:	2205      	movs	r2, #5
 800587e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005882:	4858      	ldr	r0, [pc, #352]	; (80059e4 <_vfiprintf_r+0x24c>)
 8005884:	f7fa fcd4 	bl	8000230 <memchr>
 8005888:	9a04      	ldr	r2, [sp, #16]
 800588a:	b9d8      	cbnz	r0, 80058c4 <_vfiprintf_r+0x12c>
 800588c:	06d1      	lsls	r1, r2, #27
 800588e:	bf44      	itt	mi
 8005890:	2320      	movmi	r3, #32
 8005892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005896:	0713      	lsls	r3, r2, #28
 8005898:	bf44      	itt	mi
 800589a:	232b      	movmi	r3, #43	; 0x2b
 800589c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058a0:	f89a 3000 	ldrb.w	r3, [sl]
 80058a4:	2b2a      	cmp	r3, #42	; 0x2a
 80058a6:	d015      	beq.n	80058d4 <_vfiprintf_r+0x13c>
 80058a8:	9a07      	ldr	r2, [sp, #28]
 80058aa:	4654      	mov	r4, sl
 80058ac:	2000      	movs	r0, #0
 80058ae:	f04f 0c0a 	mov.w	ip, #10
 80058b2:	4621      	mov	r1, r4
 80058b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b8:	3b30      	subs	r3, #48	; 0x30
 80058ba:	2b09      	cmp	r3, #9
 80058bc:	d94e      	bls.n	800595c <_vfiprintf_r+0x1c4>
 80058be:	b1b0      	cbz	r0, 80058ee <_vfiprintf_r+0x156>
 80058c0:	9207      	str	r2, [sp, #28]
 80058c2:	e014      	b.n	80058ee <_vfiprintf_r+0x156>
 80058c4:	eba0 0308 	sub.w	r3, r0, r8
 80058c8:	fa09 f303 	lsl.w	r3, r9, r3
 80058cc:	4313      	orrs	r3, r2
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	46a2      	mov	sl, r4
 80058d2:	e7d2      	b.n	800587a <_vfiprintf_r+0xe2>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	1d19      	adds	r1, r3, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	9103      	str	r1, [sp, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bfbb      	ittet	lt
 80058e0:	425b      	neglt	r3, r3
 80058e2:	f042 0202 	orrlt.w	r2, r2, #2
 80058e6:	9307      	strge	r3, [sp, #28]
 80058e8:	9307      	strlt	r3, [sp, #28]
 80058ea:	bfb8      	it	lt
 80058ec:	9204      	strlt	r2, [sp, #16]
 80058ee:	7823      	ldrb	r3, [r4, #0]
 80058f0:	2b2e      	cmp	r3, #46	; 0x2e
 80058f2:	d10c      	bne.n	800590e <_vfiprintf_r+0x176>
 80058f4:	7863      	ldrb	r3, [r4, #1]
 80058f6:	2b2a      	cmp	r3, #42	; 0x2a
 80058f8:	d135      	bne.n	8005966 <_vfiprintf_r+0x1ce>
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	1d1a      	adds	r2, r3, #4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	9203      	str	r2, [sp, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	bfb8      	it	lt
 8005906:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800590a:	3402      	adds	r4, #2
 800590c:	9305      	str	r3, [sp, #20]
 800590e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059f4 <_vfiprintf_r+0x25c>
 8005912:	7821      	ldrb	r1, [r4, #0]
 8005914:	2203      	movs	r2, #3
 8005916:	4650      	mov	r0, sl
 8005918:	f7fa fc8a 	bl	8000230 <memchr>
 800591c:	b140      	cbz	r0, 8005930 <_vfiprintf_r+0x198>
 800591e:	2340      	movs	r3, #64	; 0x40
 8005920:	eba0 000a 	sub.w	r0, r0, sl
 8005924:	fa03 f000 	lsl.w	r0, r3, r0
 8005928:	9b04      	ldr	r3, [sp, #16]
 800592a:	4303      	orrs	r3, r0
 800592c:	3401      	adds	r4, #1
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005934:	482c      	ldr	r0, [pc, #176]	; (80059e8 <_vfiprintf_r+0x250>)
 8005936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800593a:	2206      	movs	r2, #6
 800593c:	f7fa fc78 	bl	8000230 <memchr>
 8005940:	2800      	cmp	r0, #0
 8005942:	d03f      	beq.n	80059c4 <_vfiprintf_r+0x22c>
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <_vfiprintf_r+0x254>)
 8005946:	bb1b      	cbnz	r3, 8005990 <_vfiprintf_r+0x1f8>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	3307      	adds	r3, #7
 800594c:	f023 0307 	bic.w	r3, r3, #7
 8005950:	3308      	adds	r3, #8
 8005952:	9303      	str	r3, [sp, #12]
 8005954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005956:	443b      	add	r3, r7
 8005958:	9309      	str	r3, [sp, #36]	; 0x24
 800595a:	e767      	b.n	800582c <_vfiprintf_r+0x94>
 800595c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005960:	460c      	mov	r4, r1
 8005962:	2001      	movs	r0, #1
 8005964:	e7a5      	b.n	80058b2 <_vfiprintf_r+0x11a>
 8005966:	2300      	movs	r3, #0
 8005968:	3401      	adds	r4, #1
 800596a:	9305      	str	r3, [sp, #20]
 800596c:	4619      	mov	r1, r3
 800596e:	f04f 0c0a 	mov.w	ip, #10
 8005972:	4620      	mov	r0, r4
 8005974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005978:	3a30      	subs	r2, #48	; 0x30
 800597a:	2a09      	cmp	r2, #9
 800597c:	d903      	bls.n	8005986 <_vfiprintf_r+0x1ee>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0c5      	beq.n	800590e <_vfiprintf_r+0x176>
 8005982:	9105      	str	r1, [sp, #20]
 8005984:	e7c3      	b.n	800590e <_vfiprintf_r+0x176>
 8005986:	fb0c 2101 	mla	r1, ip, r1, r2
 800598a:	4604      	mov	r4, r0
 800598c:	2301      	movs	r3, #1
 800598e:	e7f0      	b.n	8005972 <_vfiprintf_r+0x1da>
 8005990:	ab03      	add	r3, sp, #12
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	462a      	mov	r2, r5
 8005996:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <_vfiprintf_r+0x258>)
 8005998:	a904      	add	r1, sp, #16
 800599a:	4630      	mov	r0, r6
 800599c:	f7fd fc3a 	bl	8003214 <_printf_float>
 80059a0:	4607      	mov	r7, r0
 80059a2:	1c78      	adds	r0, r7, #1
 80059a4:	d1d6      	bne.n	8005954 <_vfiprintf_r+0x1bc>
 80059a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a8:	07d9      	lsls	r1, r3, #31
 80059aa:	d405      	bmi.n	80059b8 <_vfiprintf_r+0x220>
 80059ac:	89ab      	ldrh	r3, [r5, #12]
 80059ae:	059a      	lsls	r2, r3, #22
 80059b0:	d402      	bmi.n	80059b8 <_vfiprintf_r+0x220>
 80059b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059b4:	f7ff f9fe 	bl	8004db4 <__retarget_lock_release_recursive>
 80059b8:	89ab      	ldrh	r3, [r5, #12]
 80059ba:	065b      	lsls	r3, r3, #25
 80059bc:	f53f af12 	bmi.w	80057e4 <_vfiprintf_r+0x4c>
 80059c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059c2:	e711      	b.n	80057e8 <_vfiprintf_r+0x50>
 80059c4:	ab03      	add	r3, sp, #12
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	462a      	mov	r2, r5
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <_vfiprintf_r+0x258>)
 80059cc:	a904      	add	r1, sp, #16
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7fd fec4 	bl	800375c <_printf_i>
 80059d4:	e7e4      	b.n	80059a0 <_vfiprintf_r+0x208>
 80059d6:	bf00      	nop
 80059d8:	080126c8 	.word	0x080126c8
 80059dc:	080126e8 	.word	0x080126e8
 80059e0:	080126a8 	.word	0x080126a8
 80059e4:	0801288c 	.word	0x0801288c
 80059e8:	08012896 	.word	0x08012896
 80059ec:	08003215 	.word	0x08003215
 80059f0:	08005773 	.word	0x08005773
 80059f4:	08012892 	.word	0x08012892

080059f8 <__sread>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	f7fc fedb 	bl	80027ba <_read_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bfab      	itete	ge
 8005a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a0c:	181b      	addge	r3, r3, r0
 8005a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a12:	bfac      	ite	ge
 8005a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a16:	81a3      	strhlt	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__swrite>:
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	461f      	mov	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	05db      	lsls	r3, r3, #23
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1e>
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f7fc febf 	bl	80027b6 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	4632      	mov	r2, r6
 8005a46:	463b      	mov	r3, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	f7fc beb9 	b.w	80027c4 <_write_r>

08005a52 <__sseek>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f7fc feac 	bl	80027b6 <_lseek_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	bf15      	itete	ne
 8005a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a6e:	81a3      	strheq	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	81a3      	strhne	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__sclose>:
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f7fc be93 	b.w	80027a4 <_close_r>
	...

08005a80 <__swbuf_r>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	4605      	mov	r5, r0
 8005a88:	b118      	cbz	r0, 8005a92 <__swbuf_r+0x12>
 8005a8a:	6983      	ldr	r3, [r0, #24]
 8005a8c:	b90b      	cbnz	r3, 8005a92 <__swbuf_r+0x12>
 8005a8e:	f7ff f8db 	bl	8004c48 <__sinit>
 8005a92:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <__swbuf_r+0x98>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d12b      	bne.n	8005af0 <__swbuf_r+0x70>
 8005a98:	686c      	ldr	r4, [r5, #4]
 8005a9a:	69a3      	ldr	r3, [r4, #24]
 8005a9c:	60a3      	str	r3, [r4, #8]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	071a      	lsls	r2, r3, #28
 8005aa2:	d52f      	bpl.n	8005b04 <__swbuf_r+0x84>
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	b36b      	cbz	r3, 8005b04 <__swbuf_r+0x84>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1ac0      	subs	r0, r0, r3
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	b2f6      	uxtb	r6, r6
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	dc04      	bgt.n	8005ac2 <__swbuf_r+0x42>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7ff f830 	bl	8004b20 <_fflush_r>
 8005ac0:	bb30      	cbnz	r0, 8005b10 <__swbuf_r+0x90>
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	60a3      	str	r3, [r4, #8]
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	701e      	strb	r6, [r3, #0]
 8005ad0:	6963      	ldr	r3, [r4, #20]
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	4283      	cmp	r3, r0
 8005ad6:	d004      	beq.n	8005ae2 <__swbuf_r+0x62>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	07db      	lsls	r3, r3, #31
 8005adc:	d506      	bpl.n	8005aec <__swbuf_r+0x6c>
 8005ade:	2e0a      	cmp	r6, #10
 8005ae0:	d104      	bne.n	8005aec <__swbuf_r+0x6c>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f7ff f81b 	bl	8004b20 <_fflush_r>
 8005aea:	b988      	cbnz	r0, 8005b10 <__swbuf_r+0x90>
 8005aec:	4638      	mov	r0, r7
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <__swbuf_r+0x9c>)
 8005af2:	429c      	cmp	r4, r3
 8005af4:	d101      	bne.n	8005afa <__swbuf_r+0x7a>
 8005af6:	68ac      	ldr	r4, [r5, #8]
 8005af8:	e7cf      	b.n	8005a9a <__swbuf_r+0x1a>
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <__swbuf_r+0xa0>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	bf08      	it	eq
 8005b00:	68ec      	ldreq	r4, [r5, #12]
 8005b02:	e7ca      	b.n	8005a9a <__swbuf_r+0x1a>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 f81a 	bl	8005b40 <__swsetup_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d0cb      	beq.n	8005aa8 <__swbuf_r+0x28>
 8005b10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b14:	e7ea      	b.n	8005aec <__swbuf_r+0x6c>
 8005b16:	bf00      	nop
 8005b18:	080126c8 	.word	0x080126c8
 8005b1c:	080126e8 	.word	0x080126e8
 8005b20:	080126a8 	.word	0x080126a8

08005b24 <__ascii_wctomb>:
 8005b24:	b149      	cbz	r1, 8005b3a <__ascii_wctomb+0x16>
 8005b26:	2aff      	cmp	r2, #255	; 0xff
 8005b28:	bf85      	ittet	hi
 8005b2a:	238a      	movhi	r3, #138	; 0x8a
 8005b2c:	6003      	strhi	r3, [r0, #0]
 8005b2e:	700a      	strbls	r2, [r1, #0]
 8005b30:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005b34:	bf98      	it	ls
 8005b36:	2001      	movls	r0, #1
 8005b38:	4770      	bx	lr
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	4770      	bx	lr
	...

08005b40 <__swsetup_r>:
 8005b40:	4b32      	ldr	r3, [pc, #200]	; (8005c0c <__swsetup_r+0xcc>)
 8005b42:	b570      	push	{r4, r5, r6, lr}
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	4606      	mov	r6, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	b125      	cbz	r5, 8005b56 <__swsetup_r+0x16>
 8005b4c:	69ab      	ldr	r3, [r5, #24]
 8005b4e:	b913      	cbnz	r3, 8005b56 <__swsetup_r+0x16>
 8005b50:	4628      	mov	r0, r5
 8005b52:	f7ff f879 	bl	8004c48 <__sinit>
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <__swsetup_r+0xd0>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	d10f      	bne.n	8005b7c <__swsetup_r+0x3c>
 8005b5c:	686c      	ldr	r4, [r5, #4]
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b64:	0719      	lsls	r1, r3, #28
 8005b66:	d42c      	bmi.n	8005bc2 <__swsetup_r+0x82>
 8005b68:	06dd      	lsls	r5, r3, #27
 8005b6a:	d411      	bmi.n	8005b90 <__swsetup_r+0x50>
 8005b6c:	2309      	movs	r3, #9
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b7a:	e03e      	b.n	8005bfa <__swsetup_r+0xba>
 8005b7c:	4b25      	ldr	r3, [pc, #148]	; (8005c14 <__swsetup_r+0xd4>)
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d101      	bne.n	8005b86 <__swsetup_r+0x46>
 8005b82:	68ac      	ldr	r4, [r5, #8]
 8005b84:	e7eb      	b.n	8005b5e <__swsetup_r+0x1e>
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <__swsetup_r+0xd8>)
 8005b88:	429c      	cmp	r4, r3
 8005b8a:	bf08      	it	eq
 8005b8c:	68ec      	ldreq	r4, [r5, #12]
 8005b8e:	e7e6      	b.n	8005b5e <__swsetup_r+0x1e>
 8005b90:	0758      	lsls	r0, r3, #29
 8005b92:	d512      	bpl.n	8005bba <__swsetup_r+0x7a>
 8005b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b96:	b141      	cbz	r1, 8005baa <__swsetup_r+0x6a>
 8005b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d002      	beq.n	8005ba6 <__swsetup_r+0x66>
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff fd29 	bl	80055f8 <_free_r>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f043 0308 	orr.w	r3, r3, #8
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	b94b      	cbnz	r3, 8005bda <__swsetup_r+0x9a>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd0:	d003      	beq.n	8005bda <__swsetup_r+0x9a>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff f913 	bl	8004e00 <__smakebuf_r>
 8005bda:	89a0      	ldrh	r0, [r4, #12]
 8005bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be0:	f010 0301 	ands.w	r3, r0, #1
 8005be4:	d00a      	beq.n	8005bfc <__swsetup_r+0xbc>
 8005be6:	2300      	movs	r3, #0
 8005be8:	60a3      	str	r3, [r4, #8]
 8005bea:	6963      	ldr	r3, [r4, #20]
 8005bec:	425b      	negs	r3, r3
 8005bee:	61a3      	str	r3, [r4, #24]
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	b943      	cbnz	r3, 8005c06 <__swsetup_r+0xc6>
 8005bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bf8:	d1ba      	bne.n	8005b70 <__swsetup_r+0x30>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	0781      	lsls	r1, r0, #30
 8005bfe:	bf58      	it	pl
 8005c00:	6963      	ldrpl	r3, [r4, #20]
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	e7f4      	b.n	8005bf0 <__swsetup_r+0xb0>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e7f7      	b.n	8005bfa <__swsetup_r+0xba>
 8005c0a:	bf00      	nop
 8005c0c:	20000018 	.word	0x20000018
 8005c10:	080126c8 	.word	0x080126c8
 8005c14:	080126e8 	.word	0x080126e8
 8005c18:	080126a8 	.word	0x080126a8

08005c1c <abort>:
 8005c1c:	b508      	push	{r3, lr}
 8005c1e:	2006      	movs	r0, #6
 8005c20:	f000 f878 	bl	8005d14 <raise>
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7fc fdf0 	bl	800280a <_exit>

08005c2a <memmove>:
 8005c2a:	4288      	cmp	r0, r1
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	eb01 0402 	add.w	r4, r1, r2
 8005c32:	d902      	bls.n	8005c3a <memmove+0x10>
 8005c34:	4284      	cmp	r4, r0
 8005c36:	4623      	mov	r3, r4
 8005c38:	d807      	bhi.n	8005c4a <memmove+0x20>
 8005c3a:	1e43      	subs	r3, r0, #1
 8005c3c:	42a1      	cmp	r1, r4
 8005c3e:	d008      	beq.n	8005c52 <memmove+0x28>
 8005c40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c48:	e7f8      	b.n	8005c3c <memmove+0x12>
 8005c4a:	4402      	add	r2, r0
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	428a      	cmp	r2, r1
 8005c50:	d100      	bne.n	8005c54 <memmove+0x2a>
 8005c52:	bd10      	pop	{r4, pc}
 8005c54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c5c:	e7f7      	b.n	8005c4e <memmove+0x24>
	...

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f7ff b8a6 	b.w	8004db2 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	20000c00 	.word	0x20000c00

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f7ff b8a1 	b.w	8004db4 <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	20000c00 	.word	0x20000c00

08005c78 <_realloc_r>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	460e      	mov	r6, r1
 8005c80:	b921      	cbnz	r1, 8005c8c <_realloc_r+0x14>
 8005c82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c86:	4611      	mov	r1, r2
 8005c88:	f7ff bd02 	b.w	8005690 <_malloc_r>
 8005c8c:	b922      	cbnz	r2, 8005c98 <_realloc_r+0x20>
 8005c8e:	f7ff fcb3 	bl	80055f8 <_free_r>
 8005c92:	4625      	mov	r5, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c98:	f000 f858 	bl	8005d4c <_malloc_usable_size_r>
 8005c9c:	42a0      	cmp	r0, r4
 8005c9e:	d20f      	bcs.n	8005cc0 <_realloc_r+0x48>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f7ff fcf4 	bl	8005690 <_malloc_r>
 8005ca8:	4605      	mov	r5, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d0f2      	beq.n	8005c94 <_realloc_r+0x1c>
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	f7ff f8ff 	bl	8004eb4 <memcpy>
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff fc9d 	bl	80055f8 <_free_r>
 8005cbe:	e7e9      	b.n	8005c94 <_realloc_r+0x1c>
 8005cc0:	4635      	mov	r5, r6
 8005cc2:	e7e7      	b.n	8005c94 <_realloc_r+0x1c>

08005cc4 <_raise_r>:
 8005cc4:	291f      	cmp	r1, #31
 8005cc6:	b538      	push	{r3, r4, r5, lr}
 8005cc8:	4604      	mov	r4, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	d904      	bls.n	8005cd8 <_raise_r+0x14>
 8005cce:	2316      	movs	r3, #22
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cda:	b112      	cbz	r2, 8005ce2 <_raise_r+0x1e>
 8005cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ce0:	b94b      	cbnz	r3, 8005cf6 <_raise_r+0x32>
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 f830 	bl	8005d48 <_getpid_r>
 8005ce8:	462a      	mov	r2, r5
 8005cea:	4601      	mov	r1, r0
 8005cec:	4620      	mov	r0, r4
 8005cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf2:	f000 b817 	b.w	8005d24 <_kill_r>
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d00a      	beq.n	8005d10 <_raise_r+0x4c>
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	d103      	bne.n	8005d06 <_raise_r+0x42>
 8005cfe:	2316      	movs	r3, #22
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	2001      	movs	r0, #1
 8005d04:	e7e7      	b.n	8005cd6 <_raise_r+0x12>
 8005d06:	2400      	movs	r4, #0
 8005d08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4798      	blx	r3
 8005d10:	2000      	movs	r0, #0
 8005d12:	e7e0      	b.n	8005cd6 <_raise_r+0x12>

08005d14 <raise>:
 8005d14:	4b02      	ldr	r3, [pc, #8]	; (8005d20 <raise+0xc>)
 8005d16:	4601      	mov	r1, r0
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f7ff bfd3 	b.w	8005cc4 <_raise_r>
 8005d1e:	bf00      	nop
 8005d20:	20000018 	.word	0x20000018

08005d24 <_kill_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_kill_r+0x20>)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	f7fc fd67 	bl	8002804 <_kill>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d102      	bne.n	8005d40 <_kill_r+0x1c>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	b103      	cbz	r3, 8005d40 <_kill_r+0x1c>
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	20000c0c 	.word	0x20000c0c

08005d48 <_getpid_r>:
 8005d48:	f7fc bd60 	b.w	800280c <_getpid>

08005d4c <_malloc_usable_size_r>:
 8005d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d50:	1f18      	subs	r0, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bfbc      	itt	lt
 8005d56:	580b      	ldrlt	r3, [r1, r0]
 8005d58:	18c0      	addlt	r0, r0, r3
 8005d5a:	4770      	bx	lr

08005d5c <iprintf>:
 8005d5c:	b40f      	push	{r0, r1, r2, r3}
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <iprintf+0x2c>)
 8005d60:	b513      	push	{r0, r1, r4, lr}
 8005d62:	681c      	ldr	r4, [r3, #0]
 8005d64:	b124      	cbz	r4, 8005d70 <iprintf+0x14>
 8005d66:	69a3      	ldr	r3, [r4, #24]
 8005d68:	b913      	cbnz	r3, 8005d70 <iprintf+0x14>
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f7fe ff6c 	bl	8004c48 <__sinit>
 8005d70:	ab05      	add	r3, sp, #20
 8005d72:	9a04      	ldr	r2, [sp, #16]
 8005d74:	68a1      	ldr	r1, [r4, #8]
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7ff fd0d 	bl	8005798 <_vfiprintf_r>
 8005d7e:	b002      	add	sp, #8
 8005d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d84:	b004      	add	sp, #16
 8005d86:	4770      	bx	lr
 8005d88:	20000018 	.word	0x20000018

08005d8c <putchar>:
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <putchar+0x28>)
 8005d8e:	b513      	push	{r0, r1, r4, lr}
 8005d90:	681c      	ldr	r4, [r3, #0]
 8005d92:	4601      	mov	r1, r0
 8005d94:	b134      	cbz	r4, 8005da4 <putchar+0x18>
 8005d96:	69a3      	ldr	r3, [r4, #24]
 8005d98:	b923      	cbnz	r3, 8005da4 <putchar+0x18>
 8005d9a:	9001      	str	r0, [sp, #4]
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f7fe ff53 	bl	8004c48 <__sinit>
 8005da2:	9901      	ldr	r1, [sp, #4]
 8005da4:	68a2      	ldr	r2, [r4, #8]
 8005da6:	4620      	mov	r0, r4
 8005da8:	b002      	add	sp, #8
 8005daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dae:	f000 ba31 	b.w	8006214 <_putc_r>
 8005db2:	bf00      	nop
 8005db4:	20000018 	.word	0x20000018

08005db8 <_puts_r>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	460e      	mov	r6, r1
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	b118      	cbz	r0, 8005dc8 <_puts_r+0x10>
 8005dc0:	6983      	ldr	r3, [r0, #24]
 8005dc2:	b90b      	cbnz	r3, 8005dc8 <_puts_r+0x10>
 8005dc4:	f7fe ff40 	bl	8004c48 <__sinit>
 8005dc8:	69ab      	ldr	r3, [r5, #24]
 8005dca:	68ac      	ldr	r4, [r5, #8]
 8005dcc:	b913      	cbnz	r3, 8005dd4 <_puts_r+0x1c>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f7fe ff3a 	bl	8004c48 <__sinit>
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <_puts_r+0xd0>)
 8005dd6:	429c      	cmp	r4, r3
 8005dd8:	d120      	bne.n	8005e1c <_puts_r+0x64>
 8005dda:	686c      	ldr	r4, [r5, #4]
 8005ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dde:	07db      	lsls	r3, r3, #31
 8005de0:	d405      	bmi.n	8005dee <_puts_r+0x36>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	0598      	lsls	r0, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_puts_r+0x36>
 8005de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dea:	f7fe ffe2 	bl	8004db2 <__retarget_lock_acquire_recursive>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	0719      	lsls	r1, r3, #28
 8005df2:	d51d      	bpl.n	8005e30 <_puts_r+0x78>
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	b1db      	cbz	r3, 8005e30 <_puts_r+0x78>
 8005df8:	3e01      	subs	r6, #1
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e00:	3b01      	subs	r3, #1
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	bb39      	cbnz	r1, 8005e56 <_puts_r+0x9e>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da38      	bge.n	8005e7c <_puts_r+0xc4>
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	210a      	movs	r1, #10
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7ff fe36 	bl	8005a80 <__swbuf_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	d011      	beq.n	8005e3c <_puts_r+0x84>
 8005e18:	250a      	movs	r5, #10
 8005e1a:	e011      	b.n	8005e40 <_puts_r+0x88>
 8005e1c:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <_puts_r+0xd4>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	d101      	bne.n	8005e26 <_puts_r+0x6e>
 8005e22:	68ac      	ldr	r4, [r5, #8]
 8005e24:	e7da      	b.n	8005ddc <_puts_r+0x24>
 8005e26:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <_puts_r+0xd8>)
 8005e28:	429c      	cmp	r4, r3
 8005e2a:	bf08      	it	eq
 8005e2c:	68ec      	ldreq	r4, [r5, #12]
 8005e2e:	e7d5      	b.n	8005ddc <_puts_r+0x24>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f7ff fe84 	bl	8005b40 <__swsetup_r>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d0dd      	beq.n	8005df8 <_puts_r+0x40>
 8005e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e42:	07da      	lsls	r2, r3, #31
 8005e44:	d405      	bmi.n	8005e52 <_puts_r+0x9a>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	059b      	lsls	r3, r3, #22
 8005e4a:	d402      	bmi.n	8005e52 <_puts_r+0x9a>
 8005e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e4e:	f7fe ffb1 	bl	8004db4 <__retarget_lock_release_recursive>
 8005e52:	4628      	mov	r0, r5
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da04      	bge.n	8005e64 <_puts_r+0xac>
 8005e5a:	69a2      	ldr	r2, [r4, #24]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	dc06      	bgt.n	8005e6e <_puts_r+0xb6>
 8005e60:	290a      	cmp	r1, #10
 8005e62:	d004      	beq.n	8005e6e <_puts_r+0xb6>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	6022      	str	r2, [r4, #0]
 8005e6a:	7019      	strb	r1, [r3, #0]
 8005e6c:	e7c5      	b.n	8005dfa <_puts_r+0x42>
 8005e6e:	4622      	mov	r2, r4
 8005e70:	4628      	mov	r0, r5
 8005e72:	f7ff fe05 	bl	8005a80 <__swbuf_r>
 8005e76:	3001      	adds	r0, #1
 8005e78:	d1bf      	bne.n	8005dfa <_puts_r+0x42>
 8005e7a:	e7df      	b.n	8005e3c <_puts_r+0x84>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	250a      	movs	r5, #10
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	6022      	str	r2, [r4, #0]
 8005e84:	701d      	strb	r5, [r3, #0]
 8005e86:	e7db      	b.n	8005e40 <_puts_r+0x88>
 8005e88:	080126c8 	.word	0x080126c8
 8005e8c:	080126e8 	.word	0x080126e8
 8005e90:	080126a8 	.word	0x080126a8

08005e94 <puts>:
 8005e94:	4b02      	ldr	r3, [pc, #8]	; (8005ea0 <puts+0xc>)
 8005e96:	4601      	mov	r1, r0
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f7ff bf8d 	b.w	8005db8 <_puts_r>
 8005e9e:	bf00      	nop
 8005ea0:	20000018 	.word	0x20000018

08005ea4 <strcasecmp>:
 8005ea4:	b530      	push	{r4, r5, lr}
 8005ea6:	4d0b      	ldr	r5, [pc, #44]	; (8005ed4 <strcasecmp+0x30>)
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005eae:	5d5a      	ldrb	r2, [r3, r5]
 8005eb0:	f002 0203 	and.w	r2, r2, #3
 8005eb4:	2a01      	cmp	r2, #1
 8005eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eba:	5ca8      	ldrb	r0, [r5, r2]
 8005ebc:	f000 0003 	and.w	r0, r0, #3
 8005ec0:	bf08      	it	eq
 8005ec2:	3320      	addeq	r3, #32
 8005ec4:	2801      	cmp	r0, #1
 8005ec6:	bf08      	it	eq
 8005ec8:	3220      	addeq	r2, #32
 8005eca:	1a98      	subs	r0, r3, r2
 8005ecc:	d101      	bne.n	8005ed2 <strcasecmp+0x2e>
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	d1eb      	bne.n	8005eaa <strcasecmp+0x6>
 8005ed2:	bd30      	pop	{r4, r5, pc}
 8005ed4:	08012402 	.word	0x08012402

08005ed8 <strcpy>:
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ede:	f803 2b01 	strb.w	r2, [r3], #1
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d1f9      	bne.n	8005eda <strcpy+0x2>
 8005ee6:	4770      	bx	lr

08005ee8 <_vsniprintf_r>:
 8005ee8:	b530      	push	{r4, r5, lr}
 8005eea:	4614      	mov	r4, r2
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	b09b      	sub	sp, #108	; 0x6c
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	da05      	bge.n	8005f02 <_vsniprintf_r+0x1a>
 8005ef6:	238b      	movs	r3, #139	; 0x8b
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005efe:	b01b      	add	sp, #108	; 0x6c
 8005f00:	bd30      	pop	{r4, r5, pc}
 8005f02:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f06:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005f0a:	bf14      	ite	ne
 8005f0c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005f10:	4623      	moveq	r3, r4
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1a:	9100      	str	r1, [sp, #0]
 8005f1c:	9104      	str	r1, [sp, #16]
 8005f1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005f22:	4669      	mov	r1, sp
 8005f24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f26:	f000 f875 	bl	8006014 <_svfiprintf_r>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	bfbc      	itt	lt
 8005f2e:	238b      	movlt	r3, #139	; 0x8b
 8005f30:	602b      	strlt	r3, [r5, #0]
 8005f32:	2c00      	cmp	r4, #0
 8005f34:	d0e3      	beq.n	8005efe <_vsniprintf_r+0x16>
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e7df      	b.n	8005efe <_vsniprintf_r+0x16>
	...

08005f40 <vsniprintf>:
 8005f40:	b507      	push	{r0, r1, r2, lr}
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	460a      	mov	r2, r1
 8005f48:	4601      	mov	r1, r0
 8005f4a:	4803      	ldr	r0, [pc, #12]	; (8005f58 <vsniprintf+0x18>)
 8005f4c:	6800      	ldr	r0, [r0, #0]
 8005f4e:	f7ff ffcb 	bl	8005ee8 <_vsniprintf_r>
 8005f52:	b003      	add	sp, #12
 8005f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f58:	20000018 	.word	0x20000018

08005f5c <__ssputs_r>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	688e      	ldr	r6, [r1, #8]
 8005f62:	429e      	cmp	r6, r3
 8005f64:	4682      	mov	sl, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	461f      	mov	r7, r3
 8005f6c:	d838      	bhi.n	8005fe0 <__ssputs_r+0x84>
 8005f6e:	898a      	ldrh	r2, [r1, #12]
 8005f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f74:	d032      	beq.n	8005fdc <__ssputs_r+0x80>
 8005f76:	6825      	ldr	r5, [r4, #0]
 8005f78:	6909      	ldr	r1, [r1, #16]
 8005f7a:	eba5 0901 	sub.w	r9, r5, r1
 8005f7e:	6965      	ldr	r5, [r4, #20]
 8005f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f88:	3301      	adds	r3, #1
 8005f8a:	444b      	add	r3, r9
 8005f8c:	106d      	asrs	r5, r5, #1
 8005f8e:	429d      	cmp	r5, r3
 8005f90:	bf38      	it	cc
 8005f92:	461d      	movcc	r5, r3
 8005f94:	0553      	lsls	r3, r2, #21
 8005f96:	d531      	bpl.n	8005ffc <__ssputs_r+0xa0>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7ff fb79 	bl	8005690 <_malloc_r>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	b950      	cbnz	r0, 8005fb8 <__ssputs_r+0x5c>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	f8ca 3000 	str.w	r3, [sl]
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	6921      	ldr	r1, [r4, #16]
 8005fba:	464a      	mov	r2, r9
 8005fbc:	f7fe ff7a 	bl	8004eb4 <memcpy>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	6126      	str	r6, [r4, #16]
 8005fce:	6165      	str	r5, [r4, #20]
 8005fd0:	444e      	add	r6, r9
 8005fd2:	eba5 0509 	sub.w	r5, r5, r9
 8005fd6:	6026      	str	r6, [r4, #0]
 8005fd8:	60a5      	str	r5, [r4, #8]
 8005fda:	463e      	mov	r6, r7
 8005fdc:	42be      	cmp	r6, r7
 8005fde:	d900      	bls.n	8005fe2 <__ssputs_r+0x86>
 8005fe0:	463e      	mov	r6, r7
 8005fe2:	6820      	ldr	r0, [r4, #0]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	f7ff fe1f 	bl	8005c2a <memmove>
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	1b9b      	subs	r3, r3, r6
 8005ff0:	60a3      	str	r3, [r4, #8]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	4433      	add	r3, r6
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7db      	b.n	8005fb4 <__ssputs_r+0x58>
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	f7ff fe3b 	bl	8005c78 <_realloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d1e1      	bne.n	8005fcc <__ssputs_r+0x70>
 8006008:	6921      	ldr	r1, [r4, #16]
 800600a:	4650      	mov	r0, sl
 800600c:	f7ff faf4 	bl	80055f8 <_free_r>
 8006010:	e7c7      	b.n	8005fa2 <__ssputs_r+0x46>
	...

08006014 <_svfiprintf_r>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	4698      	mov	r8, r3
 800601a:	898b      	ldrh	r3, [r1, #12]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	b09d      	sub	sp, #116	; 0x74
 8006020:	4607      	mov	r7, r0
 8006022:	460d      	mov	r5, r1
 8006024:	4614      	mov	r4, r2
 8006026:	d50e      	bpl.n	8006046 <_svfiprintf_r+0x32>
 8006028:	690b      	ldr	r3, [r1, #16]
 800602a:	b963      	cbnz	r3, 8006046 <_svfiprintf_r+0x32>
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	f7ff fb2f 	bl	8005690 <_malloc_r>
 8006032:	6028      	str	r0, [r5, #0]
 8006034:	6128      	str	r0, [r5, #16]
 8006036:	b920      	cbnz	r0, 8006042 <_svfiprintf_r+0x2e>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006040:	e0d1      	b.n	80061e6 <_svfiprintf_r+0x1d2>
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	616b      	str	r3, [r5, #20]
 8006046:	2300      	movs	r3, #0
 8006048:	9309      	str	r3, [sp, #36]	; 0x24
 800604a:	2320      	movs	r3, #32
 800604c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006050:	f8cd 800c 	str.w	r8, [sp, #12]
 8006054:	2330      	movs	r3, #48	; 0x30
 8006056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006200 <_svfiprintf_r+0x1ec>
 800605a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800605e:	f04f 0901 	mov.w	r9, #1
 8006062:	4623      	mov	r3, r4
 8006064:	469a      	mov	sl, r3
 8006066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606a:	b10a      	cbz	r2, 8006070 <_svfiprintf_r+0x5c>
 800606c:	2a25      	cmp	r2, #37	; 0x25
 800606e:	d1f9      	bne.n	8006064 <_svfiprintf_r+0x50>
 8006070:	ebba 0b04 	subs.w	fp, sl, r4
 8006074:	d00b      	beq.n	800608e <_svfiprintf_r+0x7a>
 8006076:	465b      	mov	r3, fp
 8006078:	4622      	mov	r2, r4
 800607a:	4629      	mov	r1, r5
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff ff6d 	bl	8005f5c <__ssputs_r>
 8006082:	3001      	adds	r0, #1
 8006084:	f000 80aa 	beq.w	80061dc <_svfiprintf_r+0x1c8>
 8006088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608a:	445a      	add	r2, fp
 800608c:	9209      	str	r2, [sp, #36]	; 0x24
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80a2 	beq.w	80061dc <_svfiprintf_r+0x1c8>
 8006098:	2300      	movs	r3, #0
 800609a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800609e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a2:	f10a 0a01 	add.w	sl, sl, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	9307      	str	r3, [sp, #28]
 80060aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ae:	931a      	str	r3, [sp, #104]	; 0x68
 80060b0:	4654      	mov	r4, sl
 80060b2:	2205      	movs	r2, #5
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	4851      	ldr	r0, [pc, #324]	; (8006200 <_svfiprintf_r+0x1ec>)
 80060ba:	f7fa f8b9 	bl	8000230 <memchr>
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	b9d8      	cbnz	r0, 80060fa <_svfiprintf_r+0xe6>
 80060c2:	06d0      	lsls	r0, r2, #27
 80060c4:	bf44      	itt	mi
 80060c6:	2320      	movmi	r3, #32
 80060c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060cc:	0711      	lsls	r1, r2, #28
 80060ce:	bf44      	itt	mi
 80060d0:	232b      	movmi	r3, #43	; 0x2b
 80060d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b2a      	cmp	r3, #42	; 0x2a
 80060dc:	d015      	beq.n	800610a <_svfiprintf_r+0xf6>
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	4654      	mov	r4, sl
 80060e2:	2000      	movs	r0, #0
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4621      	mov	r1, r4
 80060ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ee:	3b30      	subs	r3, #48	; 0x30
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d94e      	bls.n	8006192 <_svfiprintf_r+0x17e>
 80060f4:	b1b0      	cbz	r0, 8006124 <_svfiprintf_r+0x110>
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	e014      	b.n	8006124 <_svfiprintf_r+0x110>
 80060fa:	eba0 0308 	sub.w	r3, r0, r8
 80060fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006102:	4313      	orrs	r3, r2
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	46a2      	mov	sl, r4
 8006108:	e7d2      	b.n	80060b0 <_svfiprintf_r+0x9c>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9103      	str	r1, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfbb      	ittet	lt
 8006116:	425b      	neglt	r3, r3
 8006118:	f042 0202 	orrlt.w	r2, r2, #2
 800611c:	9307      	strge	r3, [sp, #28]
 800611e:	9307      	strlt	r3, [sp, #28]
 8006120:	bfb8      	it	lt
 8006122:	9204      	strlt	r2, [sp, #16]
 8006124:	7823      	ldrb	r3, [r4, #0]
 8006126:	2b2e      	cmp	r3, #46	; 0x2e
 8006128:	d10c      	bne.n	8006144 <_svfiprintf_r+0x130>
 800612a:	7863      	ldrb	r3, [r4, #1]
 800612c:	2b2a      	cmp	r3, #42	; 0x2a
 800612e:	d135      	bne.n	800619c <_svfiprintf_r+0x188>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9203      	str	r2, [sp, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	bfb8      	it	lt
 800613c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006140:	3402      	adds	r4, #2
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006210 <_svfiprintf_r+0x1fc>
 8006148:	7821      	ldrb	r1, [r4, #0]
 800614a:	2203      	movs	r2, #3
 800614c:	4650      	mov	r0, sl
 800614e:	f7fa f86f 	bl	8000230 <memchr>
 8006152:	b140      	cbz	r0, 8006166 <_svfiprintf_r+0x152>
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	eba0 000a 	sub.w	r0, r0, sl
 800615a:	fa03 f000 	lsl.w	r0, r3, r0
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	4303      	orrs	r3, r0
 8006162:	3401      	adds	r4, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4826      	ldr	r0, [pc, #152]	; (8006204 <_svfiprintf_r+0x1f0>)
 800616c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006170:	2206      	movs	r2, #6
 8006172:	f7fa f85d 	bl	8000230 <memchr>
 8006176:	2800      	cmp	r0, #0
 8006178:	d038      	beq.n	80061ec <_svfiprintf_r+0x1d8>
 800617a:	4b23      	ldr	r3, [pc, #140]	; (8006208 <_svfiprintf_r+0x1f4>)
 800617c:	bb1b      	cbnz	r3, 80061c6 <_svfiprintf_r+0x1b2>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	3307      	adds	r3, #7
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	3308      	adds	r3, #8
 8006188:	9303      	str	r3, [sp, #12]
 800618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618c:	4433      	add	r3, r6
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	e767      	b.n	8006062 <_svfiprintf_r+0x4e>
 8006192:	fb0c 3202 	mla	r2, ip, r2, r3
 8006196:	460c      	mov	r4, r1
 8006198:	2001      	movs	r0, #1
 800619a:	e7a5      	b.n	80060e8 <_svfiprintf_r+0xd4>
 800619c:	2300      	movs	r3, #0
 800619e:	3401      	adds	r4, #1
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	4619      	mov	r1, r3
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4620      	mov	r0, r4
 80061aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ae:	3a30      	subs	r2, #48	; 0x30
 80061b0:	2a09      	cmp	r2, #9
 80061b2:	d903      	bls.n	80061bc <_svfiprintf_r+0x1a8>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0c5      	beq.n	8006144 <_svfiprintf_r+0x130>
 80061b8:	9105      	str	r1, [sp, #20]
 80061ba:	e7c3      	b.n	8006144 <_svfiprintf_r+0x130>
 80061bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80061c0:	4604      	mov	r4, r0
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7f0      	b.n	80061a8 <_svfiprintf_r+0x194>
 80061c6:	ab03      	add	r3, sp, #12
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	462a      	mov	r2, r5
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <_svfiprintf_r+0x1f8>)
 80061ce:	a904      	add	r1, sp, #16
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7fd f81f 	bl	8003214 <_printf_float>
 80061d6:	1c42      	adds	r2, r0, #1
 80061d8:	4606      	mov	r6, r0
 80061da:	d1d6      	bne.n	800618a <_svfiprintf_r+0x176>
 80061dc:	89ab      	ldrh	r3, [r5, #12]
 80061de:	065b      	lsls	r3, r3, #25
 80061e0:	f53f af2c 	bmi.w	800603c <_svfiprintf_r+0x28>
 80061e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061e6:	b01d      	add	sp, #116	; 0x74
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	462a      	mov	r2, r5
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <_svfiprintf_r+0x1f8>)
 80061f4:	a904      	add	r1, sp, #16
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7fd fab0 	bl	800375c <_printf_i>
 80061fc:	e7eb      	b.n	80061d6 <_svfiprintf_r+0x1c2>
 80061fe:	bf00      	nop
 8006200:	0801288c 	.word	0x0801288c
 8006204:	08012896 	.word	0x08012896
 8006208:	08003215 	.word	0x08003215
 800620c:	08005f5d 	.word	0x08005f5d
 8006210:	08012892 	.word	0x08012892

08006214 <_putc_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	460d      	mov	r5, r1
 8006218:	4614      	mov	r4, r2
 800621a:	4606      	mov	r6, r0
 800621c:	b118      	cbz	r0, 8006226 <_putc_r+0x12>
 800621e:	6983      	ldr	r3, [r0, #24]
 8006220:	b90b      	cbnz	r3, 8006226 <_putc_r+0x12>
 8006222:	f7fe fd11 	bl	8004c48 <__sinit>
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <_putc_r+0x84>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d124      	bne.n	8006276 <_putc_r+0x62>
 800622c:	6874      	ldr	r4, [r6, #4]
 800622e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006230:	07d8      	lsls	r0, r3, #31
 8006232:	d405      	bmi.n	8006240 <_putc_r+0x2c>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	0599      	lsls	r1, r3, #22
 8006238:	d402      	bmi.n	8006240 <_putc_r+0x2c>
 800623a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623c:	f7fe fdb9 	bl	8004db2 <__retarget_lock_acquire_recursive>
 8006240:	68a3      	ldr	r3, [r4, #8]
 8006242:	3b01      	subs	r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	da05      	bge.n	8006256 <_putc_r+0x42>
 800624a:	69a2      	ldr	r2, [r4, #24]
 800624c:	4293      	cmp	r3, r2
 800624e:	db1c      	blt.n	800628a <_putc_r+0x76>
 8006250:	b2eb      	uxtb	r3, r5
 8006252:	2b0a      	cmp	r3, #10
 8006254:	d019      	beq.n	800628a <_putc_r+0x76>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	6022      	str	r2, [r4, #0]
 800625c:	701d      	strb	r5, [r3, #0]
 800625e:	b2ed      	uxtb	r5, r5
 8006260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006262:	07da      	lsls	r2, r3, #31
 8006264:	d405      	bmi.n	8006272 <_putc_r+0x5e>
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	059b      	lsls	r3, r3, #22
 800626a:	d402      	bmi.n	8006272 <_putc_r+0x5e>
 800626c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626e:	f7fe fda1 	bl	8004db4 <__retarget_lock_release_recursive>
 8006272:	4628      	mov	r0, r5
 8006274:	bd70      	pop	{r4, r5, r6, pc}
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <_putc_r+0x88>)
 8006278:	429c      	cmp	r4, r3
 800627a:	d101      	bne.n	8006280 <_putc_r+0x6c>
 800627c:	68b4      	ldr	r4, [r6, #8]
 800627e:	e7d6      	b.n	800622e <_putc_r+0x1a>
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <_putc_r+0x8c>)
 8006282:	429c      	cmp	r4, r3
 8006284:	bf08      	it	eq
 8006286:	68f4      	ldreq	r4, [r6, #12]
 8006288:	e7d1      	b.n	800622e <_putc_r+0x1a>
 800628a:	4629      	mov	r1, r5
 800628c:	4622      	mov	r2, r4
 800628e:	4630      	mov	r0, r6
 8006290:	f7ff fbf6 	bl	8005a80 <__swbuf_r>
 8006294:	4605      	mov	r5, r0
 8006296:	e7e3      	b.n	8006260 <_putc_r+0x4c>
 8006298:	080126c8 	.word	0x080126c8
 800629c:	080126e8 	.word	0x080126e8
 80062a0:	080126a8 	.word	0x080126a8

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
