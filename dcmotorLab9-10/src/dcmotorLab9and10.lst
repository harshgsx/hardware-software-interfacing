
dcmotorLab9and10.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080065b8 l    d  .rodata	00000000 .rodata
08012cc4 l    d  .ARM	00000000 .ARM
08012ccc l    d  .init_array	00000000 .init_array
08012cd0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001ec l    d  .bss	00000000 .bss
20000ca4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
08003324 l       .text	00000000 LoopCopyDataInit
0800331e l       .text	00000000 CopyDataInit
08003336 l       .text	00000000 LoopFillZerobss
08003332 l       .text	00000000 FillZerobss
08003360 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800659c l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001ec l       .bss	00000001 completed.1
08012cd0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001f0 l       .bss	00000018 object.0
08012ccc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000efc l     F .text	00000028 HAL_TIM_IC_CaptureCallback
08000f24 l     F .text	0000004c TerminalRead
08000f70 l     F .text	0000007c Uncompress
08000fec l     F .text	00000190 HAL_GPIO_Init
0800117c l     F .text	00000140 HAL_TIM_IRQHandler
080012bc l     F .text	0000009c TIM_Base_SetConfig
08001358 l     F .text	0000004e HAL_TIM_OC_Init
08001358 l     F .text	0000004e HAL_TIM_PWM_Init
080013a8 l     F .text	00000050 TIM_OC1_SetConfig
080013f8 l     F .text	00000124 HAL_TIM_PWM_ConfigChannel
0800151c l     F .text	00000064 HAL_TIMEx_MasterConfigSynchronization.constprop.0
08001580 l     F .text	00000074 HAL_TIM_Base_Init.constprop.0
080015f4 l     F .text	00000058 HAL_NVIC_SetPriority.constprop.0
0800164c l     F .text	0000008c HAL_TIM_PWM_Start.part.0.constprop.0.isra.0
080016d8 l     F .text	00000050 HAL_InitTick.isra.0
08001728 l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
080017f0 l     F .text	00000024 CmdEncoder2
08001814 l     F .text	00000044 CmdTasks
08001858 l     F .text	00000054 DecodeReadRegister
080018ac l     F .text	00000020 CmdVersion
080018cc l     F .text	00000050 DecodeWriteRegister.isra.0
0800191c l     F .text	0000002c CmdTest
08001948 l     F .text	000002ac CmdDC
08001bf4 l     F .text	000002d8 CmdEncoder
08001ecc l     F .text	000000b8 DecodeRegister
08001f84 l     F .text	00000050 DecodePeripheral
08001fd4 l     F .text	00000060 DecodePrintRegisters
08002034 l     F .text	00000058 DecodePrintPeripherals.constprop.0
0800208c l     F .text	00000030 fetch_string_arg
080020bc l     F .text	00000204 TaskInput
080022c0 l     F .text	0000003c fetch_uint32_arg
080022fc l     F .text	00000058 CmdLed
08002354 l     F .text	00000124 CmdDC2
08002478 l     F .text	00000070 CmdR
080024e8 l     F .text	0000001e CmdW
08002508 l     F .text	000000f8 CmdDump
08002600 l     F .text	00000074 CmdSend
08002674 l     F .text	00000060 CmdReceive
080026d4 l     F .text	00000044 CmdTransparent
08002718 l     F .text	00000284 CmdDecode
0800299c l     F .text	0000003c PolledPrintf
080029d8 l     F .text	00000068 CmdStats
20000208 l     O .bss	00000004 AccumTicks
2000020c l     O .bss	00000004 LedState.0
20000210 l     O .bss	00000834 TerminalState
20000a44 l     O .bss	00000004 address.1
20000a48 l     O .bss	00000014 buf.0
20000a5c l     O .bss	00000004 cmdArgs
20000a60 l     O .bss	00000004 count
20000a64 l     O .bss	00000004 count.3
20000a68 l     O .bss	00000002 counterStart
20000a6c l     O .bss	00000004 crReceived
20000a70 l     O .bss	00000004 heap_end.0
20000a74 l     O .bss	0000000c hiwdg
20000a80 l     O .bss	00000048 htim1
20000ac8 l     O .bss	00000048 htim11
20000b10 l     O .bss	00000048 htim2
20000b58 l     O .bss	00000048 htim3
20000ba0 l     O .bss	00000044 huart2
20000be4 l     O .bss	00000050 input
20000c34 l     O .bss	00000050 input_b
20000c84 l     O .bss	00000002 oneSecondCount
20000c88 l     O .bss	00000004 saved.1
20000c8c l     O .bss	00000004 setTime
20000c90 l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000004 printPrompt.4
20000014 l     O .data	00000004 uwTickPrio
0800a0e4 l     O .rodata	00000070 ADC1_CR1_fields
0800a154 l     O .rodata	00000060 ADC1_CR2_fields
0800a1b4 l     O .rodata	00000008 ADC1_DR_fields
0800a1bc l     O .rodata	00000008 ADC1_HTR_fields
0800a1c4 l     O .rodata	00000008 ADC1_JDR1_fields
0800a1cc l     O .rodata	00000008 ADC1_JDR2_fields
0800a1d4 l     O .rodata	00000008 ADC1_JDR3_fields
0800a1dc l     O .rodata	00000008 ADC1_JDR4_fields
0800a1e4 l     O .rodata	00000008 ADC1_JOFR1_fields
0800a1ec l     O .rodata	00000008 ADC1_JOFR2_fields
0800a1f4 l     O .rodata	00000008 ADC1_JOFR3_fields
0800a1fc l     O .rodata	00000008 ADC1_JOFR4_fields
0800a204 l     O .rodata	00000028 ADC1_JSQR_fields
0800a22c l     O .rodata	00000008 ADC1_LTR_fields
0800a234 l     O .rodata	00000008 ADC1_SMPR1_fields
0800a23c l     O .rodata	00000008 ADC1_SMPR2_fields
0800a244 l     O .rodata	00000028 ADC1_SQR1_fields
0800a26c l     O .rodata	00000030 ADC1_SQR2_fields
0800a29c l     O .rodata	00000030 ADC1_SQR3_fields
0800a2cc l     O .rodata	00000030 ADC1_SR_fields
0800a2fc l     O .rodata	00000140 ADC1_registers
0800a43c l     O .rodata	00000030 ADC_Common_CCR_fields
0800a46c l     O .rodata	00000090 ADC_Common_CSR_fields
0800a4fc l     O .rodata	00000020 ADC_Common_registers
0800a51c l     O .rodata	00000010 AHBPrescTable
0800a52c l     O .rodata	00000008 APBPrescTable
0800a534 l     O .rodata	00000008 CRC_CR_fields
0800a53c l     O .rodata	00000008 CRC_DR_fields
0800a544 l     O .rodata	00000008 CRC_IDR_fields
0800a54c l     O .rodata	00000030 CRC_registers
0800a57c l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
0800a5cc l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800a5ec l     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800a614 l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
0800a624 l     O .rodata	00000040 DBG_registers
0800a664 l     O .rodata	000000a0 DMA2_HIFCR_fields
0800a704 l     O .rodata	000000a0 DMA2_HISR_fields
0800a7a4 l     O .rodata	000000a0 DMA2_LIFCR_fields
0800a844 l     O .rodata	000000a0 DMA2_LISR_fields
0800a8e4 l     O .rodata	00000098 DMA2_S0CR_fields
0800a97c l     O .rodata	00000020 DMA2_S0FCR_fields
0800a99c l     O .rodata	00000008 DMA2_S0M0AR_fields
0800a9a4 l     O .rodata	00000008 DMA2_S0M1AR_fields
0800a9ac l     O .rodata	00000008 DMA2_S0NDTR_fields
0800a9b4 l     O .rodata	00000008 DMA2_S0PAR_fields
0800a9bc l     O .rodata	000000a0 DMA2_S1CR_fields
0800aa5c l     O .rodata	00000020 DMA2_S1FCR_fields
0800aa7c l     O .rodata	00000008 DMA2_S1M0AR_fields
0800aa84 l     O .rodata	00000008 DMA2_S1M1AR_fields
0800aa8c l     O .rodata	00000008 DMA2_S1NDTR_fields
0800aa94 l     O .rodata	00000008 DMA2_S1PAR_fields
0800aa9c l     O .rodata	000000a0 DMA2_S2CR_fields
0800ab3c l     O .rodata	00000020 DMA2_S2FCR_fields
0800ab5c l     O .rodata	00000008 DMA2_S2M0AR_fields
0800ab64 l     O .rodata	00000008 DMA2_S2M1AR_fields
0800ab6c l     O .rodata	00000008 DMA2_S2NDTR_fields
0800ab74 l     O .rodata	00000008 DMA2_S2PAR_fields
0800ab7c l     O .rodata	000000a0 DMA2_S3CR_fields
0800ac1c l     O .rodata	00000020 DMA2_S3FCR_fields
0800ac3c l     O .rodata	00000008 DMA2_S3M0AR_fields
0800ac44 l     O .rodata	00000008 DMA2_S3M1AR_fields
0800ac4c l     O .rodata	00000008 DMA2_S3NDTR_fields
0800ac54 l     O .rodata	00000008 DMA2_S3PAR_fields
0800ac5c l     O .rodata	000000a0 DMA2_S4CR_fields
0800acfc l     O .rodata	00000020 DMA2_S4FCR_fields
0800ad1c l     O .rodata	00000008 DMA2_S4M0AR_fields
0800ad24 l     O .rodata	00000008 DMA2_S4M1AR_fields
0800ad2c l     O .rodata	00000008 DMA2_S4NDTR_fields
0800ad34 l     O .rodata	00000008 DMA2_S4PAR_fields
0800ad3c l     O .rodata	000000a0 DMA2_S5CR_fields
0800addc l     O .rodata	00000020 DMA2_S5FCR_fields
0800adfc l     O .rodata	00000008 DMA2_S5M0AR_fields
0800ae04 l     O .rodata	00000008 DMA2_S5M1AR_fields
0800ae0c l     O .rodata	00000008 DMA2_S5NDTR_fields
0800ae14 l     O .rodata	00000008 DMA2_S5PAR_fields
0800ae1c l     O .rodata	000000a0 DMA2_S6CR_fields
0800aebc l     O .rodata	00000020 DMA2_S6FCR_fields
0800aedc l     O .rodata	00000008 DMA2_S6M0AR_fields
0800aee4 l     O .rodata	00000008 DMA2_S6M1AR_fields
0800aeec l     O .rodata	00000008 DMA2_S6NDTR_fields
0800aef4 l     O .rodata	00000008 DMA2_S6PAR_fields
0800aefc l     O .rodata	000000a0 DMA2_S7CR_fields
0800af9c l     O .rodata	00000020 DMA2_S7FCR_fields
0800afbc l     O .rodata	00000008 DMA2_S7M0AR_fields
0800afc4 l     O .rodata	00000008 DMA2_S7M1AR_fields
0800afcc l     O .rodata	00000008 DMA2_S7NDTR_fields
0800afd4 l     O .rodata	00000008 DMA2_S7PAR_fields
0800afdc l     O .rodata	00000340 DMA2_registers
0800b31c l     O .rodata	000000b8 EXTI_EMR_fields
0800b3d4 l     O .rodata	000000b8 EXTI_FTSR_fields
0800b48c l     O .rodata	000000b8 EXTI_IMR_fields
0800b544 l     O .rodata	000000b8 EXTI_PR_fields
0800b5fc l     O .rodata	000000b8 EXTI_RTSR_fields
0800b6b4 l     O .rodata	000000b8 EXTI_SWIER_fields
0800b76c l     O .rodata	00000060 EXTI_registers
0800b7cc l     O .rodata	00000030 FLASH_ACR_fields
0800b7fc l     O .rodata	00000048 FLASH_CR_fields
0800b844 l     O .rodata	00000008 FLASH_KEYR_fields
0800b84c l     O .rodata	00000040 FLASH_OPTCR_fields
0800b88c l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800b894 l     O .rodata	00000038 FLASH_SR_fields
0800b8cc l     O .rodata	00000060 FLASH_registers
0800b92c l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800b934 l     O .rodata	00000010 FPU_CPACR_registers
0800b944 l     O .rodata	00000008 FPU_FPCAR_fields
0800b94c l     O .rodata	00000048 FPU_FPCCR_fields
0800b994 l     O .rodata	00000070 FPU_FPSCR_fields
0800ba04 l     O .rodata	00000030 FPU_registers
0800ba34 l     O .rodata	00000040 GPIOA_AFRH_fields
0800ba74 l     O .rodata	00000040 GPIOA_AFRL_fields
0800bab4 l     O .rodata	00000100 GPIOA_BSRR_fields
0800bbb4 l     O .rodata	00000080 GPIOA_IDR_fields
0800bc34 l     O .rodata	00000088 GPIOA_LCKR_fields
0800bcbc l     O .rodata	00000080 GPIOA_MODER_fields
0800bd3c l     O .rodata	00000080 GPIOA_ODR_fields
0800bdbc l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800be3c l     O .rodata	00000080 GPIOA_OTYPER_fields
0800bebc l     O .rodata	00000080 GPIOA_PUPDR_fields
0800bf3c l     O .rodata	000000a0 GPIOA_registers
0800bfdc l     O .rodata	00000040 GPIOB_AFRH_fields
0800c01c l     O .rodata	00000040 GPIOB_AFRL_fields
0800c05c l     O .rodata	00000100 GPIOB_BSRR_fields
0800c15c l     O .rodata	00000080 GPIOB_IDR_fields
0800c1dc l     O .rodata	00000088 GPIOB_LCKR_fields
0800c264 l     O .rodata	00000080 GPIOB_MODER_fields
0800c2e4 l     O .rodata	00000080 GPIOB_ODR_fields
0800c364 l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800c3e4 l     O .rodata	00000080 GPIOB_OTYPER_fields
0800c464 l     O .rodata	00000080 GPIOB_PUPDR_fields
0800c4e4 l     O .rodata	000000a0 GPIOB_registers
0800c584 l     O .rodata	00000040 GPIOH_AFRH_fields
0800c5c4 l     O .rodata	00000040 GPIOH_AFRL_fields
0800c604 l     O .rodata	00000100 GPIOH_BSRR_fields
0800c704 l     O .rodata	00000080 GPIOH_IDR_fields
0800c784 l     O .rodata	00000088 GPIOH_LCKR_fields
0800c80c l     O .rodata	00000080 GPIOH_MODER_fields
0800c88c l     O .rodata	00000080 GPIOH_ODR_fields
0800c90c l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800c98c l     O .rodata	00000080 GPIOH_OTYPER_fields
0800ca0c l     O .rodata	00000080 GPIOH_PUPDR_fields
0800ca8c l     O .rodata	000000a0 GPIOH_registers
0800cb2c l     O .rodata	00000018 I2C3_CCR_fields
0800cb44 l     O .rodata	00000070 I2C3_CR1_fields
0800cbb4 l     O .rodata	00000030 I2C3_CR2_fields
0800cbe4 l     O .rodata	00000008 I2C3_DR_fields
0800cbec l     O .rodata	00000020 I2C3_OAR1_fields
0800cc0c l     O .rodata	00000010 I2C3_OAR2_fields
0800cc1c l     O .rodata	00000070 I2C3_SR1_fields
0800cc8c l     O .rodata	00000040 I2C3_SR2_fields
0800cccc l     O .rodata	00000008 I2C3_TRISE_fields
0800ccd4 l     O .rodata	00000090 I2C3_registers
0800cd64 l     O .rodata	00000070 I2S2ext_CR1_fields
0800cdd4 l     O .rodata	00000038 I2S2ext_CR2_fields
0800ce0c l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800ce14 l     O .rodata	00000008 I2S2ext_DR_fields
0800ce1c l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800ce5c l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800ce74 l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800ce7c l     O .rodata	00000048 I2S2ext_SR_fields
0800cec4 l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800cecc l     O .rodata	00000090 I2S2ext_registers
0800cf5c l     O .rodata	00000008 IWDG_KR_fields
0800cf64 l     O .rodata	00000008 IWDG_PR_fields
0800cf6c l     O .rodata	00000008 IWDG_RLR_fields
0800cf74 l     O .rodata	00000010 IWDG_SR_fields
0800cf84 l     O .rodata	00000040 IWDG_registers
0800cfc4 l     O .rodata	00000194 InterruptNames
0800d158 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800d170 l     O .rodata	00000048 MPU_MPU_RASR_fields
0800d1b8 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800d1d0 l     O .rodata	00000008 MPU_MPU_RNR_fields
0800d1d8 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800d1f0 l     O .rodata	00000050 MPU_registers
0800d240 l     O .rodata	00000008 NVIC_IABR0_fields
0800d248 l     O .rodata	00000008 NVIC_IABR1_fields
0800d250 l     O .rodata	00000008 NVIC_IABR2_fields
0800d258 l     O .rodata	00000008 NVIC_ICER0_fields
0800d260 l     O .rodata	00000008 NVIC_ICER1_fields
0800d268 l     O .rodata	00000008 NVIC_ICER2_fields
0800d270 l     O .rodata	00000008 NVIC_ICPR0_fields
0800d278 l     O .rodata	00000008 NVIC_ICPR1_fields
0800d280 l     O .rodata	00000008 NVIC_ICPR2_fields
0800d288 l     O .rodata	00000020 NVIC_IPR0_fields
0800d2a8 l     O .rodata	00000020 NVIC_IPR10_fields
0800d2c8 l     O .rodata	00000020 NVIC_IPR11_fields
0800d2e8 l     O .rodata	00000020 NVIC_IPR12_fields
0800d308 l     O .rodata	00000020 NVIC_IPR13_fields
0800d328 l     O .rodata	00000020 NVIC_IPR14_fields
0800d348 l     O .rodata	00000020 NVIC_IPR15_fields
0800d368 l     O .rodata	00000020 NVIC_IPR16_fields
0800d388 l     O .rodata	00000020 NVIC_IPR17_fields
0800d3a8 l     O .rodata	00000020 NVIC_IPR18_fields
0800d3c8 l     O .rodata	00000020 NVIC_IPR19_fields
0800d3e8 l     O .rodata	00000020 NVIC_IPR1_fields
0800d408 l     O .rodata	00000020 NVIC_IPR2_fields
0800d428 l     O .rodata	00000020 NVIC_IPR3_fields
0800d448 l     O .rodata	00000020 NVIC_IPR4_fields
0800d468 l     O .rodata	00000020 NVIC_IPR5_fields
0800d488 l     O .rodata	00000020 NVIC_IPR6_fields
0800d4a8 l     O .rodata	00000020 NVIC_IPR7_fields
0800d4c8 l     O .rodata	00000020 NVIC_IPR8_fields
0800d4e8 l     O .rodata	00000020 NVIC_IPR9_fields
0800d508 l     O .rodata	00000008 NVIC_ISER0_fields
0800d510 l     O .rodata	00000008 NVIC_ISER1_fields
0800d518 l     O .rodata	00000008 NVIC_ISER2_fields
0800d520 l     O .rodata	00000008 NVIC_ISPR0_fields
0800d528 l     O .rodata	00000008 NVIC_ISPR1_fields
0800d530 l     O .rodata	00000008 NVIC_ISPR2_fields
0800d538 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800d540 l     O .rodata	00000010 NVIC_STIR_registers
0800d550 l     O .rodata	00000230 NVIC_registers
0800d780 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800d7e8 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800d850 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800d8b8 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800d8c0 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800d8f0 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800d920 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800d950 l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800d980 l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800d990 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800d9a8 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800d9c0 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800d9d8 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800da28 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800da90 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800daf8 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800db60 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800db88 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800dbb0 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800dbd8 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800dc00 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800dc18 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800dc30 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800dc48 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800dc60 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800dc68 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800dc70 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800dc78 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800dc80 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800dc88 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800dc90 l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800dca0 l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800dcb0 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800dcd0 l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800dd20 l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800dd70 l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800dda0 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800ddc0 l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800dde0 l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800e040 l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800e048 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800e058 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800e068 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800e078 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800e090 l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800e0b0 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800e178 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800e240 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800e250 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800e260 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800e278 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800e2c8 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800e2f8 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800e330 l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800e338 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800e360 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800e388 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800e3c8 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800e3d8 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
0800e508 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
0800e558 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800e5a8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
0800e5f8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
0800e648 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
0800e698 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800e6e8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800e738 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800e788 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
0800e798 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800e7e0 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
0800e828 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
0800e870 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
0800e8b8 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800e900 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
0800e948 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800e990 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800e9d8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
0800ea28 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
0800ea78 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800eac8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800eb18 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
0800eb68 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800ebb8 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
0800ec08 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
0800ec58 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
0800ec70 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800ec88 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800eca0 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
0800ecb8 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800ecd0 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
0800ece8 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
0800ed00 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800ed18 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
0800ed28 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
0800ed90 l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800eda8 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800edb0 l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
0800edb8 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
0800edc0 l     O .rodata	00000270 OTG_FS_HOST_registers
0800f030 l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
0800f048 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
0800f058 l     O .rodata	00000050 PWR_CR_fields
0800f0a8 l     O .rodata	00000038 PWR_CSR_fields
0800f0e0 l     O .rodata	00000020 PWR_registers
0800f100 l     O .rodata	00000380 Peripherals
08011798 l     O .rodata	00000150 TIM2_registers
08011c38 l     O .rodata	00000140 TIM3_registers
080120d0 l     O .rodata	00000150 TIM5_registers
08010020 l     O .rodata	00000270 RTC_registers
080126f8 l     O .rodata	00000030 WWDG_registers
08012630 l     O .rodata	00000070 USART1_registers
080112e0 l     O .rodata	00000160 TIM1_registers
08010918 l     O .rodata	00000120 SDIO_registers
08010b60 l     O .rodata	00000070 SYSCFG_registers
080123a8 l     O .rodata	000000e0 TIM9_registers
08010ca0 l     O .rodata	000000b0 TIM10_registers
08010e28 l     O .rodata	000000c0 TIM11_registers
0800fa70 l     O .rodata	00000140 RCC_registers
080102b8 l     O .rodata	00000010 SCB_ACTRL_registers
08010a80 l     O .rodata	00000040 STK_registers
08010518 l     O .rodata	000000f0 SCB_registers
0800f480 l     O .rodata	00000048 RCC_AHB1ENR_fields
0800f4c8 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0800f520 l     O .rodata	00000048 RCC_AHB1RSTR_fields
0800f568 l     O .rodata	00000008 RCC_AHB2ENR_fields
0800f570 l     O .rodata	00000008 RCC_AHB2LPENR_fields
0800f578 l     O .rodata	00000008 RCC_AHB2RSTR_fields
0800f580 l     O .rodata	00000060 RCC_APB1ENR_fields
0800f5e0 l     O .rodata	00000060 RCC_APB1LPENR_fields
0800f640 l     O .rodata	00000060 RCC_APB1RSTR_fields
0800f6a0 l     O .rodata	00000058 RCC_APB2ENR_fields
0800f6f8 l     O .rodata	00000058 RCC_APB2LPENR_fields
0800f750 l     O .rodata	00000050 RCC_APB2RSTR_fields
0800f7a0 l     O .rodata	00000038 RCC_BDCR_fields
0800f7d8 l     O .rodata	00000068 RCC_CFGR_fields
0800f840 l     O .rodata	000000a0 RCC_CIR_fields
0800f8e0 l     O .rodata	00000060 RCC_CR_fields
0800f940 l     O .rodata	00000050 RCC_CSR_fields
0800f990 l     O .rodata	000000b0 RCC_PLLCFGR_fields
0800fa40 l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800fa50 l     O .rodata	00000020 RCC_SSCGR_fields
0800fbb0 l     O .rodata	00000070 RTC_ALRMAR_fields
0800fc20 l     O .rodata	00000010 RTC_ALRMASSR_fields
0800fc30 l     O .rodata	00000070 RTC_ALRMBR_fields
0800fca0 l     O .rodata	00000010 RTC_ALRMBSSR_fields
0800fcb0 l     O .rodata	00000008 RTC_BKP0R_fields
0800fcb8 l     O .rodata	00000008 RTC_BKP10R_fields
0800fcc0 l     O .rodata	00000008 RTC_BKP11R_fields
0800fcc8 l     O .rodata	00000008 RTC_BKP12R_fields
0800fcd0 l     O .rodata	00000008 RTC_BKP13R_fields
0800fcd8 l     O .rodata	00000008 RTC_BKP14R_fields
0800fce0 l     O .rodata	00000008 RTC_BKP15R_fields
0800fce8 l     O .rodata	00000008 RTC_BKP16R_fields
0800fcf0 l     O .rodata	00000008 RTC_BKP17R_fields
0800fcf8 l     O .rodata	00000008 RTC_BKP18R_fields
0800fd00 l     O .rodata	00000008 RTC_BKP19R_fields
0800fd08 l     O .rodata	00000008 RTC_BKP1R_fields
0800fd10 l     O .rodata	00000008 RTC_BKP2R_fields
0800fd18 l     O .rodata	00000008 RTC_BKP3R_fields
0800fd20 l     O .rodata	00000008 RTC_BKP4R_fields
0800fd28 l     O .rodata	00000008 RTC_BKP5R_fields
0800fd30 l     O .rodata	00000008 RTC_BKP6R_fields
0800fd38 l     O .rodata	00000008 RTC_BKP7R_fields
0800fd40 l     O .rodata	00000008 RTC_BKP8R_fields
0800fd48 l     O .rodata	00000008 RTC_BKP9R_fields
0800fd50 l     O .rodata	00000010 RTC_CALIBR_fields
0800fd60 l     O .rodata	00000020 RTC_CALR_fields
0800fd80 l     O .rodata	000000a8 RTC_CR_fields
0800fe28 l     O .rodata	00000038 RTC_DR_fields
0800fe60 l     O .rodata	00000080 RTC_ISR_fields
0800fee0 l     O .rodata	00000010 RTC_PRER_fields
0800fef0 l     O .rodata	00000010 RTC_SHIFTR_fields
0800ff00 l     O .rodata	00000008 RTC_SSR_fields
0800ff08 l     O .rodata	00000068 RTC_TAFCR_fields
0800ff70 l     O .rodata	00000038 RTC_TR_fields
0800ffa8 l     O .rodata	00000028 RTC_TSDR_fields
0800ffd0 l     O .rodata	00000008 RTC_TSSSR_fields
0800ffd8 l     O .rodata	00000038 RTC_TSTR_fields
08010010 l     O .rodata	00000008 RTC_WPR_fields
08010018 l     O .rodata	00000008 RTC_WUTR_fields
08010290 l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
080102c8 l     O .rodata	00000008 SCB_AFSR_fields
080102d0 l     O .rodata	00000030 SCB_AIRCR_fields
08010300 l     O .rodata	00000008 SCB_BFAR_fields
08010308 l     O .rodata	00000030 SCB_CCR_fields
08010338 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
080103c8 l     O .rodata	00000028 SCB_CPUID_fields
080103f0 l     O .rodata	00000018 SCB_HFSR_fields
08010408 l     O .rodata	00000048 SCB_ICSR_fields
08010450 l     O .rodata	00000008 SCB_MMFAR_fields
08010458 l     O .rodata	00000018 SCB_SCR_fields
08010470 l     O .rodata	00000070 SCB_SHCRS_fields
080104e0 l     O .rodata	00000018 SCB_SHPR1_fields
080104f8 l     O .rodata	00000008 SCB_SHPR2_fields
08010500 l     O .rodata	00000010 SCB_SHPR3_fields
08010510 l     O .rodata	00000008 SCB_VTOR_fields
08010608 l     O .rodata	00000008 SDIO_ARG_fields
08010610 l     O .rodata	00000038 SDIO_CLKCR_fields
08010648 l     O .rodata	00000048 SDIO_CMD_fields
08010690 l     O .rodata	00000008 SDIO_DCOUNT_fields
08010698 l     O .rodata	00000048 SDIO_DCTRL_fields
080106e0 l     O .rodata	00000008 SDIO_DLEN_fields
080106e8 l     O .rodata	00000008 SDIO_DTIMER_fields
080106f0 l     O .rodata	00000008 SDIO_FIFOCNT_fields
080106f8 l     O .rodata	00000008 SDIO_FIFO_fields
08010700 l     O .rodata	00000068 SDIO_ICR_fields
08010768 l     O .rodata	000000c0 SDIO_MASK_fields
08010828 l     O .rodata	00000008 SDIO_POWER_fields
08010830 l     O .rodata	00000008 SDIO_RESP1_fields
08010838 l     O .rodata	00000008 SDIO_RESP2_fields
08010840 l     O .rodata	00000008 SDIO_RESP3_fields
08010848 l     O .rodata	00000008 SDIO_RESP4_fields
08010850 l     O .rodata	00000008 SDIO_RESPCMD_fields
08010858 l     O .rodata	000000c0 SDIO_STA_fields
08010a38 l     O .rodata	00000018 STK_CALIB_fields
08010a50 l     O .rodata	00000020 STK_CTRL_fields
08010a70 l     O .rodata	00000008 STK_LOAD_fields
08010a78 l     O .rodata	00000008 STK_VAL_fields
08010ac0 l     O .rodata	00000010 SYSCFG_CMPCR_fields
08010ad0 l     O .rodata	00000020 SYSCFG_EXTICR1_fields
08010af0 l     O .rodata	00000020 SYSCFG_EXTICR2_fields
08010b10 l     O .rodata	00000020 SYSCFG_EXTICR3_fields
08010b30 l     O .rodata	00000020 SYSCFG_EXTICR4_fields
08010b50 l     O .rodata	00000008 SYSCFG_MEMRM_fields
08010b58 l     O .rodata	00000008 SYSCFG_PMC_fields
08010bd0 l     O .rodata	00000008 TIM10_ARR_fields
08010bd8 l     O .rodata	00000018 TIM10_CCER_fields
08010bf0 l     O .rodata	00000018 TIM10_CCMR1_Input_fields
08010c08 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
08010c28 l     O .rodata	00000008 TIM10_CCR1_fields
08010c30 l     O .rodata	00000008 TIM10_CNT_fields
08010c38 l     O .rodata	00000028 TIM10_CR1_fields
08010c60 l     O .rodata	00000010 TIM10_DIER_fields
08010c70 l     O .rodata	00000010 TIM10_EGR_fields
08010c80 l     O .rodata	00000008 TIM10_PSC_fields
08010c88 l     O .rodata	00000018 TIM10_SR_fields
08010d50 l     O .rodata	00000008 TIM11_ARR_fields
08010d58 l     O .rodata	00000018 TIM11_CCER_fields
08010d70 l     O .rodata	00000018 TIM11_CCMR1_Input_fields
08010d88 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
08010da8 l     O .rodata	00000008 TIM11_CCR1_fields
08010db0 l     O .rodata	00000008 TIM11_CNT_fields
08010db8 l     O .rodata	00000028 TIM11_CR1_fields
08010de0 l     O .rodata	00000010 TIM11_DIER_fields
08010df0 l     O .rodata	00000010 TIM11_EGR_fields
08010e00 l     O .rodata	00000008 TIM11_OR_fields
08010e08 l     O .rodata	00000008 TIM11_PSC_fields
08010e10 l     O .rodata	00000018 TIM11_SR_fields
08010ee8 l     O .rodata	00000008 TIM1_ARR_fields
08010ef0 l     O .rodata	00000040 TIM1_BDTR_fields
08010f30 l     O .rodata	00000070 TIM1_CCER_fields
08010fa0 l     O .rodata	00000030 TIM1_CCMR1_Input_fields
08010fd0 l     O .rodata	00000050 TIM1_CCMR1_Output_fields
08011020 l     O .rodata	00000030 TIM1_CCMR2_Input_fields
08011050 l     O .rodata	00000050 TIM1_CCMR2_Output_fields
080110a0 l     O .rodata	00000008 TIM1_CCR1_fields
080110a8 l     O .rodata	00000008 TIM1_CCR2_fields
080110b0 l     O .rodata	00000008 TIM1_CCR3_fields
080110b8 l     O .rodata	00000008 TIM1_CCR4_fields
080110c0 l     O .rodata	00000008 TIM1_CNT_fields
080110c8 l     O .rodata	00000040 TIM1_CR1_fields
08011108 l     O .rodata	00000060 TIM1_CR2_fields
08011168 l     O .rodata	00000010 TIM1_DCR_fields
08011178 l     O .rodata	00000078 TIM1_DIER_fields
080111f0 l     O .rodata	00000008 TIM1_DMAR_fields
080111f8 l     O .rodata	00000040 TIM1_EGR_fields
08011238 l     O .rodata	00000008 TIM1_PSC_fields
08011240 l     O .rodata	00000008 TIM1_RCR_fields
08011248 l     O .rodata	00000038 TIM1_SMCR_fields
08011280 l     O .rodata	00000060 TIM1_SR_fields
08011440 l     O .rodata	00000010 TIM2_ARR_fields
08011450 l     O .rodata	00000060 TIM2_CCER_fields
080114b0 l     O .rodata	00000030 TIM2_CCMR1_Input_fields
080114e0 l     O .rodata	00000050 TIM2_CCMR1_Output_fields
08011530 l     O .rodata	00000030 TIM2_CCMR2_Input_fields
08011560 l     O .rodata	00000050 TIM2_CCMR2_Output_fields
080115b0 l     O .rodata	00000010 TIM2_CCR1_fields
080115c0 l     O .rodata	00000010 TIM2_CCR2_fields
080115d0 l     O .rodata	00000010 TIM2_CCR3_fields
080115e0 l     O .rodata	00000010 TIM2_CCR4_fields
080115f0 l     O .rodata	00000010 TIM2_CNT_fields
08011600 l     O .rodata	00000040 TIM2_CR1_fields
08011640 l     O .rodata	00000018 TIM2_CR2_fields
08011658 l     O .rodata	00000010 TIM2_DCR_fields
08011668 l     O .rodata	00000060 TIM2_DIER_fields
080116c8 l     O .rodata	00000008 TIM2_DMAR_fields
080116d0 l     O .rodata	00000030 TIM2_EGR_fields
08011700 l     O .rodata	00000008 TIM2_OR_fields
08011708 l     O .rodata	00000008 TIM2_PSC_fields
08011710 l     O .rodata	00000038 TIM2_SMCR_fields
08011748 l     O .rodata	00000050 TIM2_SR_fields
080118e8 l     O .rodata	00000010 TIM3_ARR_fields
080118f8 l     O .rodata	00000060 TIM3_CCER_fields
08011958 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
08011988 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
080119d8 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
08011a08 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
08011a58 l     O .rodata	00000010 TIM3_CCR1_fields
08011a68 l     O .rodata	00000010 TIM3_CCR2_fields
08011a78 l     O .rodata	00000010 TIM3_CCR3_fields
08011a88 l     O .rodata	00000010 TIM3_CCR4_fields
08011a98 l     O .rodata	00000010 TIM3_CNT_fields
08011aa8 l     O .rodata	00000040 TIM3_CR1_fields
08011ae8 l     O .rodata	00000018 TIM3_CR2_fields
08011b00 l     O .rodata	00000010 TIM3_DCR_fields
08011b10 l     O .rodata	00000060 TIM3_DIER_fields
08011b70 l     O .rodata	00000008 TIM3_DMAR_fields
08011b78 l     O .rodata	00000030 TIM3_EGR_fields
08011ba8 l     O .rodata	00000008 TIM3_PSC_fields
08011bb0 l     O .rodata	00000038 TIM3_SMCR_fields
08011be8 l     O .rodata	00000050 TIM3_SR_fields
08011d78 l     O .rodata	00000010 TIM5_ARR_fields
08011d88 l     O .rodata	00000060 TIM5_CCER_fields
08011de8 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
08011e18 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
08011e68 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
08011e98 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
08011ee8 l     O .rodata	00000010 TIM5_CCR1_fields
08011ef8 l     O .rodata	00000010 TIM5_CCR2_fields
08011f08 l     O .rodata	00000010 TIM5_CCR3_fields
08011f18 l     O .rodata	00000010 TIM5_CCR4_fields
08011f28 l     O .rodata	00000010 TIM5_CNT_fields
08011f38 l     O .rodata	00000040 TIM5_CR1_fields
08011f78 l     O .rodata	00000018 TIM5_CR2_fields
08011f90 l     O .rodata	00000010 TIM5_DCR_fields
08011fa0 l     O .rodata	00000060 TIM5_DIER_fields
08012000 l     O .rodata	00000008 TIM5_DMAR_fields
08012008 l     O .rodata	00000030 TIM5_EGR_fields
08012038 l     O .rodata	00000008 TIM5_OR_fields
08012040 l     O .rodata	00000008 TIM5_PSC_fields
08012048 l     O .rodata	00000038 TIM5_SMCR_fields
08012080 l     O .rodata	00000050 TIM5_SR_fields
08012220 l     O .rodata	00000008 TIM9_ARR_fields
08012228 l     O .rodata	00000030 TIM9_CCER_fields
08012258 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
08012288 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
080122c8 l     O .rodata	00000008 TIM9_CCR1_fields
080122d0 l     O .rodata	00000008 TIM9_CCR2_fields
080122d8 l     O .rodata	00000008 TIM9_CNT_fields
080122e0 l     O .rodata	00000030 TIM9_CR1_fields
08012310 l     O .rodata	00000008 TIM9_CR2_fields
08012318 l     O .rodata	00000020 TIM9_DIER_fields
08012338 l     O .rodata	00000020 TIM9_EGR_fields
08012358 l     O .rodata	00000008 TIM9_PSC_fields
08012360 l     O .rodata	00000018 TIM9_SMCR_fields
08012378 l     O .rodata	00000030 TIM9_SR_fields
08012488 l     O .rodata	00000010 TerminalInfo
08012498 l     O .rodata	00000010 USART1_BRR_fields
080124a8 l     O .rodata	00000078 USART1_CR1_fields
08012520 l     O .rodata	00000048 USART1_CR2_fields
08012568 l     O .rodata	00000060 USART1_CR3_fields
080125c8 l     O .rodata	00000008 USART1_DR_fields
080125d0 l     O .rodata	00000010 USART1_GTPR_fields
080125e0 l     O .rodata	00000050 USART1_SR_fields
080126a0 l     O .rodata	00000019 VersionBuildDateString
080126b9 l     O .rodata	00000006 VersionBuildUser
080126c0 l     O .rodata	00000020 WWDG_CFR_fields
080126e0 l     O .rodata	00000010 WWDG_CR_fields
080126f0 l     O .rodata	00000008 WWDG_SR_fields
08012728 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
0801272e l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003ee4 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
08004018 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004e90 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012bc0 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005a3c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
2000001c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00005955 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00005bae l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00005d2d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00006c25 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00007b81 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00009e22 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
0000aa79 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
0000ac42 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
0000b237 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
0000b4cf l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
0000c546 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
0000c8ff l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
0000cbf0 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
0000cebc l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
0000d430 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
0000dfc2 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
0000e06e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
0000ee71 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
0000f378 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
0000fbc3 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00010336 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00010e63 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00012457 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00012b29 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00012cd8 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00014f5a l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
000160d1 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012cd0 l       .init_array	00000000 __init_array_end
08012ccc l       .init_array	00000000 __preinit_array_end
08012ccc l       .init_array	00000000 __init_array_start
08012ccc l       .init_array	00000000 __preinit_array_start
08003360  w    F .text	00000006 RTC_Alarm_IRQHandler
08006044 g     F .text	00000010 _malloc_usable_size_r
080033cc g     F .text	000000c4 __cvt
08003360  w    F .text	00000006 EXTI2_IRQHandler
08006084 g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
08002aaa g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
080061d0 g     F .text	00000010 strcpy
08002b04 g     F .text	00000004 _getpid
080060b0 g     F .text	000000dc _puts_r
00012457  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.b36020d7
08000a7c g     F .text	0000007a .hidden __cmpdf2
08002aae g     F .text	00000004 _lseek_r
080032d8 g     F .text	00000002 DebugMon_Handler
08012bf8 g     O .rodata	0000000c CmdTestE
08003360  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
00005d2d  w      .debug_info	00000000 .hidden dc_example.c.c94b55e5
080005ec g     F .text	0000005a .hidden __floatdidf
0800601c g     F .text	00000024 _kill_r
0000c8ff  w      .debug_info	00000000 .hidden tasking.c.3c1ff15a
08006054 g     F .text	00000030 printf
0000fbc3  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.0fc8201d
08003360  w    F .text	00000006 TIM1_CC_IRQHandler
08005d4a g     F .text	00000024 __sseek
08004f40 g     F .text	00000070 __sinit
08003360  w    F .text	00000006 DMA2_Stream5_IRQHandler
08005d78 g     F .text	000000a4 __swbuf_r
080032ce g     F .text	00000002 HardFault_Handler
08004ee4 g     F .text	0000002c __sfmoreglue
08003360  w    F .text	00000006 DMA1_Stream5_IRQHandler
08005f64 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
080032dc g     F .text	00000020 SysTick_Handler
08012c40 g     O .rodata	0000000c CmdLedE
08003360  w    F .text	00000006 PVD_IRQHandler
08003360  w    F .text	00000006 SDIO_IRQHandler
08005f22 g     F .text	00000034 memmove
08003360  w    F .text	00000006 TAMP_STAMP_IRQHandler
08012cd4 g       *ABS*	00000000 _sidata
080032da g     F .text	00000002 PendSV_Handler
080032cc g     F .text	00000002 NMI_Handler
080051c8 g     F .text	00000080 _Balloc
08012ccc g       .ARM	00000000 __exidx_end
08003e94 g     F .text	00000050 __strtok_r
08003360  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
08012cc4 g       .rodata	00000000 _parsetable_end
08003368 g     F .text	0000000c __errno
08012cac g     O .rodata	0000000c CmdWE
08003360  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
08002aa0 g     F .text	0000000a _fstat_r
20000ca0 g     O .bss	00000004 errno
080065b4 g       .text	00000000 _etext
200001ec g       .bss	00000000 _sbss
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
00005bae  w      .debug_info	00000000 .hidden mytest.c.674274e8
08003360  w    F .text	00000006 I2C3_ER_IRQHandler
08012c10 g     O .rodata	0000000c CmdDC2E
080051ac g     F .text	0000001c memcpy
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08003ca0 g     F .text	0000018c setvbuf
08004ed8 g     F .text	0000000c _cleanup_r
0800630c g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
00014f5a  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim_ex.c.2bc70310
08003360  w    F .text	00000006 EXTI0_IRQHandler
08003360  w    F .text	00000006 I2C2_EV_IRQHandler
08000bf8 g     F .text	00000000 .hidden __aeabi_uldivmod
0800618c g     F .text	00000010 puts
0000ac42  w      .debug_info	00000000 .hidden parser.c.825010af
08003360  w    F .text	00000006 DMA1_Stream2_IRQHandler
08003360  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
08002a40 g     F .text	00000014 USR_LED_Toggle
08005178 g     F .text	00000010 malloc
08012bf8 g       .rodata	00000000 _tasktable_end
08005fbc g     F .text	00000050 _raise_r
08003fdc g     F .text	0000003c __assert_func
08012af8 g     O .rodata	000000c8 __mprec_tens
080032d4 g     F .text	00000002 UsageFault_Handler
08006238 g     F .text	0000001c vsnprintf
08012c1c g     O .rodata	0000000c CmdDCE
08003360  w    F .text	00000006 DMA2_Stream2_IRQHandler
08006040 g     F .text	00000004 _getpid_r
200001ec g       .bss	00000000 __bss_start__
08003fc8 g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
080050a0 g     F .text	00000008 _localeconv_r
080053b8 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
08003360  w    F .text	00000006 SPI1_IRQHandler
08000c28 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
08002a6c g     F .text	00000030 _sbrk_r
08002ab2 g     F .text	0000000a _read_r
00009e22  w      .debug_info	00000000 .hidden syscall.c.4e500076
08003360  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
00006c25  w      .debug_info	00000000 .hidden timer_irq.c.c583614a
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
0000b4cf  w      .debug_info	00000000 .hidden terminal.c.06c1db49
08012cc4 g       .ARM	00000000 __exidx_start
08000648 g     F .text	00000254 .hidden __aeabi_dmul
08003360  w    F .text	00000006 DMA2_Stream3_IRQHandler
08012ca0 g     O .rodata	0000000c CmdVersionE
20000c96 g     O .bss	00000001 __lock___sinit_recursive_mutex
08012844 g     O .rodata	00000004 _global_impure_ptr
08005f70 g     F .text	0000004c _realloc_r
00012cd8  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.594f5834
08003374 g     F .text	00000048 __libc_init_array
08012ad0 g     O .rodata	00000028 __mprec_bigtens
08005f14 g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
080056cc g     F .text	00000038 __mcmp
200001e8 g     O .data	00000004 TaskInputTaskState
08003360  w    F .text	00000006 USART6_IRQHandler
08012c34 g     O .rodata	0000000c CmdEncoderE
0800659c g     F .text	00000000 _init
08012bf8 g       .rodata	00000000 _parsetable_start
08012be0 g       .rodata	00000000 _tasktable_start
08012c58 g     O .rodata	0000000c CmdRE
20000ca4 g       .bss	00000000 _ebss
08003310  w    F .text	00000038 Reset_Handler
08006238 g     F .text	0000001c vsniprintf
08005318 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
20000c94 g     O .bss	00000001 __lock___malloc_recursive_mutex
08003360  w    F .text	00000006 DMA2_Stream0_IRQHandler
0800650c g     F .text	00000090 _putc_r
0800503c g     F .text	00000024 fprintf
08003360  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
0000cebc  w      .debug_info	00000000 .hidden decoder.c.18ea236f
08005538 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
080001e0 g     F .text	00000014 mytest
080129e8 g     O .rodata	00000020 __sf_fake_stderr
20000ca8 g       ._user_heap_stack	00000000 end
08003360  w    F .text	00000006 I2C1_EV_IRQHandler
080050ac g     F .text	00000002 __retarget_lock_release_recursive
08003360  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001e8 g       .data	00000000 _taskstate_start
08006254 g     F .text	000000b6 __ssputs_r
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08003360  w    F .text	00000006 DMA1_Stream1_IRQHandler
08005a6a g     F .text	00000024 __sfputs_r
08004f10 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
0800350c  w    F .text	0000046c _printf_float
20000ca4 g       .bss	00000000 __bss_end__
080058f0 g     F .text	00000098 _free_r
08002a60 g     F .text	0000000c TIM3_IRQHandler
08003360  w    F .text	00000006 RCC_IRQHandler
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
08003360 g       .text	00000006 Default_Handler
0000e06e  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.167a7f62
080005dc g     F .text	0000006a .hidden __floatundidf
00010336  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.2b93ffaa
080055ec g     F .text	000000e0 __lshift
08003360  w    F .text	00000006 EXTI15_10_IRQHandler
08003360  w    F .text	00000006 ADC_IRQHandler
080053e4 g     F .text	00000154 __multiply
08005818 g     F .text	000000b8 __d2b
0800619c g     F .text	00000034 strcasecmp
0000ee71  w      .debug_info	00000000 .hidden system_stm32f4xx.c.f0a82be1
08003360  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
08003360  w    F .text	00000006 SPI5_IRQHandler
08012c64 g     O .rodata	0000000c CmdReceiveE
08002a9c g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
08003360  w    F .text	00000006 TIM5_IRQHandler
08003e2c g     F .text	00000068 strtok
08012be0 g     O .rodata	00000018 TaskInputTask
08003360  w    F .text	00000006 DMA2_Stream7_IRQHandler
08003360  w    F .text	00000006 I2C3_EV_IRQHandler
00012b29  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.7d27ddf2
08005e38 g     F .text	000000dc __swsetup_r
08000ef8  w    F .text	00000002 .hidden __aeabi_ldiv0
08003360  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08004fb0 g     F .text	0000008c __sfp
08003360  w    F .text	00000006 RTC_WKUP_IRQHandler
08004f34 g     F .text	0000000c __sinit_lock_release
080061e0 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
08005cf0 g     F .text	00000022 __sread
08005f58 g     F .text	0000000c __malloc_lock
08004e18 g     F .text	00000078 _fflush_r
080058d0 g     F .text	0000001e _calloc_r
08003360  w    F .text	00000006 SPI2_IRQHandler
08012a08 g     O .rodata	00000020 __sf_fake_stdin
080050aa g     F .text	00000002 __retarget_lock_acquire_recursive
080033bc g     F .text	00000010 memset
080032d0 g     F .text	00000002 MemManage_Handler
08002c48 g     F .text	00000684 main
08003360  w    F .text	00000006 DMA1_Stream0_IRQHandler
080050a8 g     F .text	00000002 __retarget_lock_init_recursive
080032d6 g     F .text	00000002 SVC_Handler
08005d6e g     F .text	00000008 __sclose
08004130 g     F .text	00000bdc _dtoa_r
08005988 g     F .text	000000b4 _malloc_r
08005e1c g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
08003360  w    F .text	00000006 EXTI4_IRQHandler
0000b237  w      .debug_info	00000000 .hidden dump.c.80a332ec
080032fc g     F .text	00000014 SystemInit
08000a7c g     F .text	0000007a .hidden __nedf2
080065a8 g     F .text	00000000 _fini
08006054 g     F .text	00000030 iprintf
200001ec g       .data	00000000 _taskstate_end
08003490 g     F .text	0000007c __exponent
08002abc g     F .text	00000040 _write_r
00007b81  w      .debug_info	00000000 .hidden STM32F411.c.c8ef9f14
08003978 g     F .text	000000da _printf_common
20000018 g     O .data	00000004 _impure_ptr
000160d1  w      .debug_info	00000000 .hidden version.c.e0804c9a
08004d0c g     F .text	0000010c __sflush_r
0800630c g     F .text	00000200 _svfiprintf_r
08003360  w    F .text	00000006 WWDG_IRQHandler
08002bf0 g     F .text	00000058 Default_IRQHandler
08005188 g     F .text	00000024 __ascii_mbtowc
08012c94 g     O .rodata	0000000c CmdTransparentE
08003360  w    F .text	00000006 TIM2_IRQHandler
08000208 g     F .text	00000004 my_Loop
08012c28 g     O .rodata	0000000c CmdDecodeE
080061e0 g     F .text	00000056 _vsniprintf_r
20000000 g       .data	00000000 myTickCount
08003360  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
08002a54 g     F .text	0000000c TIM1_TRG_COM_TIM11_IRQHandler
080050ae g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
08003360  w    F .text	00000006 EXTI1_IRQHandler
08012c4c g     O .rodata	0000000c CmdEncoder2E
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
0000d430  w      .debug_info	00000000 .hidden main.c.2c6e82a5
200001ec g       .data	00000000 _edata
0000c546  w      .debug_info	00000000 .hidden wdog.c.16db08df
0000f378  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.11893d14
00005955  w      .debug_info	00000000 .hidden my_main.c.1913d6b0
08002b08 g     F .text	000000e8 USART2_IRQHandler
08005d12 g     F .text	00000038 __swrite
0800503c g     F .text	00000024 fiprintf
08005a90 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0000dfc2  w      .debug_info	00000000 .hidden stm32f4xx_it.c.9b5bb718
08005060 g     F .text	0000003e _fwalk_reent
08005704 g     F .text	00000114 __mdiff
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002afc g     F .text	00000006 _kill
08003360  w    F .text	00000006 I2C2_ER_IRQHandler
08004f1c g     F .text	0000000c __sfp_lock_release
00010e63  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.ecd62046
08012a28 g     O .rodata	00000020 __sf_fake_stdout
08012c04 g     O .rodata	0000000c CmdDumpE
08003360  w    F .text	00000006 DMA2_Stream1_IRQHandler
08012741 g     O .rodata	00000101 _ctype_
08000ef8  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
08012c88 g     O .rodata	0000000c CmdStatsE
08003360  w    F .text	00000006 FLASH_IRQHandler
08002b02 g     F .text	00000002 _exit
08012c7c g     O .rodata	0000000c CmdTasksE
08003360  w    F .text	00000006 DMA2_Stream4_IRQHandler
080032d2 g     F .text	00000002 BusFault_Handler
08003360  w    F .text	00000006 USART1_IRQHandler
080050f8 g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
08003360  w    F .text	00000006 OTG_FS_IRQHandler
08003a54 g     F .text	0000024c _printf_i
08003360  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
08003360  w    F .text	00000006 DMA1_Stream4_IRQHandler
20000c9c g     O .bss	00000004 __malloc_sbrk_start
08003360  w    F .text	00000006 I2C1_ER_IRQHandler
08012c70 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000c98 g     O .bss	00000004 __malloc_free_list
080002d8 g     F .text	0000027a .hidden __subdf3
08005a90 g     F .text	00000260 _vfprintf_r
0000cbf0  w      .debug_info	00000000 .hidden default.c.f4ae2258
08005358 g     F .text	0000005e __lo0bits
0000aa79  w      .debug_info	00000000 .hidden monitor.c.8a4174bc
08003360  w    F .text	00000006 DMA2_Stream6_IRQHandler
2000007c g     O .data	0000016c __global_locale
08003360  w    F .text	00000006 DMA1_Stream3_IRQHandler
20000c95 g     O .bss	00000001 __lock___sfp_recursive_mutex
0800600c g     F .text	00000010 raise
08004f28 g     F .text	0000000c __sinit_lock_acquire
0800528c g     F .text	0000008c __multadd
08005248 g     F .text	00000044 _Bfree



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800659c 	.word	0x0800659c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800659c 	.word	0x0800659c

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f002 fc2b 	bl	8002a40 <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_TIM_IC_CaptureCallback>:
//         
// RETURNS       :void
//   
  
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
   if(htim->Instance == TIM3){ 
 8000efc:	6801      	ldr	r1, [r0, #0]
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x20>)
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d109      	bne.n	8000f18 <HAL_TIM_IC_CaptureCallback+0x1c>
     count++;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	3201      	adds	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  
     if (count == 60){
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2a3c      	cmp	r2, #60	; 0x3c
       count  = 0;
 8000f10:	bf02      	ittt	eq
 8000f12:	2200      	moveq	r2, #0
 8000f14:	601a      	streq	r2, [r3, #0]
       TIM3->CNT = 0;
 8000f16:	624a      	streq	r2, [r1, #36]	; 0x24
       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); 
      }
  
     }
   
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40000400 	.word	0x40000400
 8000f20:	20000a60 	.word	0x20000a60

08000f24 <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 8000f24:	b530      	push	{r4, r5, lr}
 8000f26:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000f2a:	4c10      	ldr	r4, [pc, #64]	; (8000f6c <TerminalRead+0x48>)
 8000f2c:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8000f30:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 8000f32:	fb05 4303 	mla	r3, r5, r3, r4
 8000f36:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	b10c      	cbz	r4, 8000f42 <TerminalRead+0x1e>
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d101      	bne.n	8000f46 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 8000f44:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8000f46:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8000f4a:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000f4c:	5d1d      	ldrb	r5, [r3, r4]
 8000f4e:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000f50:	3401      	adds	r4, #1
 8000f52:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8000f56:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8000f5a:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000f5e:	3c01      	subs	r4, #1
 8000f60:	b2a4      	uxth	r4, r4
 8000f62:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 8000f66:	3001      	adds	r0, #1
 8000f68:	e7e5      	b.n	8000f36 <TerminalRead+0x12>
 8000f6a:	bf00      	nop
 8000f6c:	20000210 	.word	0x20000210

08000f70 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8000f70:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <Uncompress+0x74>)
{
 8000f74:	b08a      	sub	sp, #40	; 0x28
 8000f76:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000f78:	466c      	mov	r4, sp
 8000f7a:	f102 0620 	add.w	r6, r2, #32
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	6851      	ldr	r1, [r2, #4]
 8000f82:	4625      	mov	r5, r4
 8000f84:	c503      	stmia	r5!, {r0, r1}
 8000f86:	3208      	adds	r2, #8
 8000f88:	42b2      	cmp	r2, r6
 8000f8a:	462c      	mov	r4, r5
 8000f8c:	d1f7      	bne.n	8000f7e <Uncompress+0xe>
 8000f8e:	6810      	ldr	r0, [r2, #0]
 8000f90:	6028      	str	r0, [r5, #0]
 8000f92:	8892      	ldrh	r2, [r2, #4]
 8000f94:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8000f96:	4618      	mov	r0, r3
 8000f98:	4d13      	ldr	r5, [pc, #76]	; (8000fe8 <Uncompress+0x78>)
 8000f9a:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	ba5b      	rev16	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
  i = 0;
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8000fa8:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8000fac:	d103      	bne.n	8000fb6 <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <Uncompress+0x78>)
  buf[i]='\0';
 8000fb0:	5532      	strb	r2, [r6, r4]
}
 8000fb2:	b00a      	add	sp, #40	; 0x28
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8000fb6:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8000fb8:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8000fbc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8000fc0:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8000fc4:	4462      	add	r2, ip
    buf[i++] = c;
 8000fc6:	3401      	adds	r4, #1
 8000fc8:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8000fcc:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8000fd0:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8000fd2:	2a07      	cmp	r2, #7
      bits -= 8;
 8000fd4:	bf81      	itttt	hi
 8000fd6:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8000fd8:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8000fdc:	4091      	lslhi	r1, r2
 8000fde:	430b      	orrhi	r3, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	e7e1      	b.n	8000fa8 <Uncompress+0x38>
 8000fe4:	080069f8 	.word	0x080069f8
 8000fe8:	20000a48 	.word	0x20000a48

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001178 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4a5e      	ldr	r2, [pc, #376]	; (8001170 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000ffa:	2401      	movs	r4, #1
 8000ffc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001002:	43ac      	bics	r4, r5
 8001004:	f040 80a5 	bne.w	8001152 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001008:	684d      	ldr	r5, [r1, #4]
 800100a:	f005 0403 	and.w	r4, r5, #3
 800100e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001012:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001014:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001016:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001020:	d834      	bhi.n	800108c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001022:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001028:	68cf      	ldr	r7, [r1, #12]
 800102a:	fa07 f708 	lsl.w	r7, r7, r8
 800102e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001032:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001034:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800103e:	409f      	lsls	r7, r3
 8001040:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001044:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001046:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001048:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	688f      	ldr	r7, [r1, #8]
 800104e:	fa07 f708 	lsl.w	r7, r7, r8
 8001052:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001058:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	d119      	bne.n	8001090 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800105c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001060:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001064:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001068:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001070:	f04f 0e0f 	mov.w	lr, #15
 8001074:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001078:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	690f      	ldr	r7, [r1, #16]
 800107e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001082:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	f8ca 7020 	str.w	r7, [sl, #32]
 800108a:	e001      	b.n	8001090 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	2c03      	cmp	r4, #3
 800108e:	d1da      	bne.n	8001046 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001090:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001092:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800109e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a0:	d057      	beq.n	8001152 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	f04f 0a00 	mov.w	sl, #0
 80010a6:	f8cd a004 	str.w	sl, [sp, #4]
 80010aa:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	4c31      	ldr	r4, [pc, #196]	; (8001174 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80010b4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80010b8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80010bc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80010c0:	9601      	str	r6, [sp, #4]
 80010c2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80010c4:	f023 0603 	bic.w	r6, r3, #3
 80010c8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80010cc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80010d4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010dc:	270f      	movs	r7, #15
 80010de:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e8:	d03a      	beq.n	8001160 <HAL_GPIO_Init+0x174>
 80010ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010ee:	42a0      	cmp	r0, r4
 80010f0:	d038      	beq.n	8001164 <HAL_GPIO_Init+0x178>
 80010f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010f6:	42a0      	cmp	r0, r4
 80010f8:	d036      	beq.n	8001168 <HAL_GPIO_Init+0x17c>
 80010fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010fe:	42a0      	cmp	r0, r4
 8001100:	d034      	beq.n	800116c <HAL_GPIO_Init+0x180>
 8001102:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001106:	42a0      	cmp	r0, r4
 8001108:	bf0c      	ite	eq
 800110a:	2404      	moveq	r4, #4
 800110c:	2407      	movne	r4, #7
 800110e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001112:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001114:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001116:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001118:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111c:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800111e:	bf54      	ite	pl
 8001120:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001122:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001126:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001128:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800112c:	bf54      	ite	pl
 800112e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001130:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001134:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001138:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800113a:	bf54      	ite	pl
 800113c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800113e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001142:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001146:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001148:	bf54      	ite	pl
 800114a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800114c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001150:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	3301      	adds	r3, #1
 8001154:	2b10      	cmp	r3, #16
 8001156:	f47f af4f 	bne.w	8000ff8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800115a:	b003      	add	sp, #12
 800115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001160:	4654      	mov	r4, sl
 8001162:	e7d4      	b.n	800110e <HAL_GPIO_Init+0x122>
 8001164:	2401      	movs	r4, #1
 8001166:	e7d2      	b.n	800110e <HAL_GPIO_Init+0x122>
 8001168:	2402      	movs	r4, #2
 800116a:	e7d0      	b.n	800110e <HAL_GPIO_Init+0x122>
 800116c:	2403      	movs	r4, #3
 800116e:	e7ce      	b.n	800110e <HAL_GPIO_Init+0x122>
 8001170:	40013c00 	.word	0x40013c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40023800 	.word	0x40023800

0800117c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800117c:	6803      	ldr	r3, [r0, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	0791      	lsls	r1, r2, #30
{
 8001182:	b510      	push	{r4, lr}
 8001184:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001186:	d50e      	bpl.n	80011a6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	0792      	lsls	r2, r2, #30
 800118c:	d50b      	bpl.n	80011a6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800118e:	f06f 0202 	mvn.w	r2, #2
 8001192:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001194:	2201      	movs	r2, #1
 8001196:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	0799      	lsls	r1, r3, #30
 800119c:	d001      	beq.n	80011a2 <HAL_TIM_IRQHandler+0x26>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800119e:	f7ff fead 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011a2:	2300      	movs	r3, #0
 80011a4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	0752      	lsls	r2, r2, #29
 80011ac:	d510      	bpl.n	80011d0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	0750      	lsls	r0, r2, #29
 80011b2:	d50d      	bpl.n	80011d0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011b4:	f06f 0204 	mvn.w	r2, #4
 80011b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011ba:	2202      	movs	r2, #2
 80011bc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80011c4:	d002      	beq.n	80011cc <HAL_TIM_IRQHandler+0x50>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff fe98 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	0711      	lsls	r1, r2, #28
 80011d6:	d50f      	bpl.n	80011f8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	0712      	lsls	r2, r2, #28
 80011dc:	d50c      	bpl.n	80011f8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011de:	f06f 0208 	mvn.w	r2, #8
 80011e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011e4:	2204      	movs	r2, #4
 80011e6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	0798      	lsls	r0, r3, #30
 80011ec:	d002      	beq.n	80011f4 <HAL_TIM_IRQHandler+0x78>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fe84 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011f4:	2300      	movs	r3, #0
 80011f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	06d1      	lsls	r1, r2, #27
 80011fe:	d510      	bpl.n	8001222 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	06d2      	lsls	r2, r2, #27
 8001204:	d50d      	bpl.n	8001222 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001206:	f06f 0210 	mvn.w	r2, #16
 800120a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800120c:	2208      	movs	r2, #8
 800120e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001216:	d002      	beq.n	800121e <HAL_TIM_IRQHandler+0xa2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe6f 	bl	8000efc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800121e:	2300      	movs	r3, #0
 8001220:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	07d4      	lsls	r4, r2, #31
 8001228:	d522      	bpl.n	8001270 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	07d0      	lsls	r0, r2, #31
 800122e:	d51f      	bpl.n	8001270 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001230:	f06f 0201 	mvn.w	r2, #1
 8001234:	611a      	str	r2, [r3, #16]
//         
// RETURNS       :void
//   
  
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
   if(htim->Instance == TIM11){  
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_TIM_IRQHandler+0x12c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d119      	bne.n	8001270 <HAL_TIM_IRQHandler+0xf4>
     if(counterStart == 1){
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <HAL_TIM_IRQHandler+0x130>)
 800123e:	491c      	ldr	r1, [pc, #112]	; (80012b0 <HAL_TIM_IRQHandler+0x134>)
 8001240:	8812      	ldrh	r2, [r2, #0]
       ++oneSecondCount;
      }
     if (oneSecondCount == setTime){
 8001242:	481c      	ldr	r0, [pc, #112]	; (80012b4 <HAL_TIM_IRQHandler+0x138>)
     if(counterStart == 1){
 8001244:	b292      	uxth	r2, r2
 8001246:	2a01      	cmp	r2, #1
       ++oneSecondCount;
 8001248:	bf08      	it	eq
 800124a:	880a      	ldrheq	r2, [r1, #0]
     if (oneSecondCount == setTime){
 800124c:	6800      	ldr	r0, [r0, #0]
       ++oneSecondCount;
 800124e:	bf02      	ittt	eq
 8001250:	3201      	addeq	r2, #1
 8001252:	b292      	uxtheq	r2, r2
 8001254:	800a      	strheq	r2, [r1, #0]
     if (oneSecondCount == setTime){
 8001256:	880a      	ldrh	r2, [r1, #0]
 8001258:	b292      	uxth	r2, r2
 800125a:	4282      	cmp	r2, r0
 800125c:	d108      	bne.n	8001270 <HAL_TIM_IRQHandler+0xf4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_TIM_IRQHandler+0x13c>)
 8001260:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001264:	6190      	str	r0, [r2, #24]
 8001266:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800126a:	6190      	str	r0, [r2, #24]
      
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
      oneSecondCount =0;
 800126c:	2200      	movs	r2, #0
 800126e:	800a      	strh	r2, [r1, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	0611      	lsls	r1, r2, #24
 8001274:	d505      	bpl.n	8001282 <HAL_TIM_IRQHandler+0x106>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	0612      	lsls	r2, r2, #24
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800127a:	bf44      	itt	mi
 800127c:	f06f 0280 	mvnmi.w	r2, #128	; 0x80
 8001280:	611a      	strmi	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	0654      	lsls	r4, r2, #25
 8001286:	d505      	bpl.n	8001294 <HAL_TIM_IRQHandler+0x118>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	0650      	lsls	r0, r2, #25
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800128c:	bf44      	itt	mi
 800128e:	f06f 0240 	mvnmi.w	r2, #64	; 0x40
 8001292:	611a      	strmi	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	0691      	lsls	r1, r2, #26
 8001298:	d505      	bpl.n	80012a6 <HAL_TIM_IRQHandler+0x12a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	0692      	lsls	r2, r2, #26
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800129e:	bf44      	itt	mi
 80012a0:	f06f 0220 	mvnmi.w	r2, #32
 80012a4:	611a      	strmi	r2, [r3, #16]
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012a6:	bd10      	pop	{r4, pc}
 80012a8:	40014800 	.word	0x40014800
 80012ac:	20000a68 	.word	0x20000a68
 80012b0:	20000c84 	.word	0x20000c84
 80012b4:	20000c8c 	.word	0x20000c8c
 80012b8:	40020000 	.word	0x40020000

080012bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012bc:	4a24      	ldr	r2, [pc, #144]	; (8001350 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80012be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c0:	4290      	cmp	r0, r2
 80012c2:	d00e      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012c8:	d00b      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012ce:	4290      	cmp	r0, r2
 80012d0:	d007      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d6:	4290      	cmp	r0, r2
 80012d8:	d003      	beq.n	80012e2 <TIM_Base_SetConfig+0x26>
 80012da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012de:	4290      	cmp	r0, r2
 80012e0:	d115      	bne.n	800130e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012e2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012e8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <TIM_Base_SetConfig+0x94>)
 80012ec:	4290      	cmp	r0, r2
 80012ee:	d019      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 80012f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012f4:	d016      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 80012f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012fa:	4290      	cmp	r0, r2
 80012fc:	d012      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 80012fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001302:	4290      	cmp	r0, r2
 8001304:	d00e      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 8001306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800130a:	4290      	cmp	r0, r2
 800130c:	d00a      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 800130e:	4a11      	ldr	r2, [pc, #68]	; (8001354 <TIM_Base_SetConfig+0x98>)
 8001310:	4290      	cmp	r0, r2
 8001312:	d007      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 8001314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001318:	4290      	cmp	r0, r2
 800131a:	d003      	beq.n	8001324 <TIM_Base_SetConfig+0x68>
 800131c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001320:	4290      	cmp	r0, r2
 8001322:	d103      	bne.n	800132c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001324:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800132a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800132c:	694a      	ldr	r2, [r1, #20]
 800132e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001332:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001334:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001336:	688b      	ldr	r3, [r1, #8]
 8001338:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800133a:	680b      	ldr	r3, [r1, #0]
 800133c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <TIM_Base_SetConfig+0x94>)
 8001340:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001342:	bf04      	itt	eq
 8001344:	690b      	ldreq	r3, [r1, #16]
 8001346:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001348:	2301      	movs	r3, #1
 800134a:	6143      	str	r3, [r0, #20]
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40010000 	.word	0x40010000
 8001354:	40014000 	.word	0x40014000

08001358 <HAL_TIM_OC_Init>:
{
 8001358:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800135a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800135e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001364:	b90b      	cbnz	r3, 800136a <HAL_TIM_OC_Init+0x12>
    htim->Lock = HAL_UNLOCKED;
 8001366:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800136a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800136c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800136e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001372:	1d21      	adds	r1, r4, #4
 8001374:	f7ff ffa2 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001378:	2301      	movs	r3, #1
 800137a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 800137e:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001384:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001388:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800138c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001398:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800139c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80013a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80013a4:	bd10      	pop	{r4, pc}
	...

080013a8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013a8:	6a03      	ldr	r3, [r0, #32]
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013b0:	6a03      	ldr	r3, [r0, #32]
{
 80013b2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013b6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80013c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80013c2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80013c6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013c8:	4d0a      	ldr	r5, [pc, #40]	; (80013f4 <TIM_OC1_SetConfig+0x4c>)
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	d10b      	bne.n	80013e6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80013ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80013d0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80013d4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80013d6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80013da:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80013de:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80013e0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80013e4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013e8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80013ea:	684a      	ldr	r2, [r1, #4]
 80013ec:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013ee:	6203      	str	r3, [r0, #32]
}
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80013fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013fe:	2b01      	cmp	r3, #1
{
 8001400:	4605      	mov	r5, r0
 8001402:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8001404:	f000 8086 	beq.w	8001514 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8001408:	2001      	movs	r0, #1
  switch (Channel)
 800140a:	2a04      	cmp	r2, #4
  __HAL_LOCK(htim);
 800140c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8001410:	d017      	beq.n	8001442 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001412:	2a08      	cmp	r2, #8
 8001414:	d04a      	beq.n	80014ac <HAL_TIM_PWM_ConfigChannel+0xb4>
 8001416:	b982      	cbnz	r2, 800143a <HAL_TIM_PWM_ConfigChannel+0x42>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001418:	6828      	ldr	r0, [r5, #0]
 800141a:	f7ff ffc5 	bl	80013a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800141e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001420:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	f042 0208 	orr.w	r2, r2, #8
 8001428:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	f022 0204 	bic.w	r2, r2, #4
 8001430:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001436:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800143a:	2300      	movs	r3, #0
 800143c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8001440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001442:	682b      	ldr	r3, [r5, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001444:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	f022 0210 	bic.w	r2, r2, #16
 800144c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800144e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001450:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001452:	6999      	ldr	r1, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001454:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001458:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800145c:	68a6      	ldr	r6, [r4, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800145e:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001462:	ea42 1206 	orr.w	r2, r2, r6, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001466:	4e2c      	ldr	r6, [pc, #176]	; (8001518 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8001468:	42b3      	cmp	r3, r6
 800146a:	d10d      	bne.n	8001488 <HAL_TIM_PWM_ConfigChannel+0x90>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800146c:	68e6      	ldr	r6, [r4, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800146e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001472:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001476:	e9d4 6705 	ldrd	r6, r7, [r4, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800147a:	f420 6040 	bic.w	r0, r0, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800147e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8001480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001484:	ea40 0086 	orr.w	r0, r0, r6, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001488:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800148a:	6199      	str	r1, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800148c:	6861      	ldr	r1, [r4, #4]
 800148e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001490:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001492:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001494:	6921      	ldr	r1, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800149a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014aa:	e7c4      	b.n	8001436 <HAL_TIM_PWM_ConfigChannel+0x3e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014ac:	682b      	ldr	r3, [r5, #0]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014ae:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014b0:	6a1a      	ldr	r2, [r3, #32]
 80014b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80014b8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80014ba:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80014bc:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80014be:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014c2:	4331      	orrs	r1, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014c4:	68a6      	ldr	r6, [r4, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80014c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014ca:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014ce:	4e12      	ldr	r6, [pc, #72]	; (8001518 <HAL_TIM_PWM_ConfigChannel+0x120>)
 80014d0:	42b3      	cmp	r3, r6
 80014d2:	d10d      	bne.n	80014f0 <HAL_TIM_PWM_ConfigChannel+0xf8>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014d4:	68e6      	ldr	r6, [r4, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80014d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014da:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014de:	e9d4 6705 	ldrd	r6, r7, [r4, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80014e2:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014e6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80014e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014ec:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014f0:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014f2:	61d9      	str	r1, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80014f4:	6861      	ldr	r1, [r4, #4]
 80014f6:	63d9      	str	r1, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014f8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014fa:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014fc:	6921      	ldr	r1, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	f022 0204 	bic.w	r2, r2, #4
 800150a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800150c:	69da      	ldr	r2, [r3, #28]
 800150e:	430a      	orrs	r2, r1
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	e791      	b.n	8001438 <HAL_TIM_PWM_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 8001514:	2002      	movs	r0, #2
 8001516:	e793      	b.n	8001440 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001518:	40010000 	.word	0x40010000

0800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800151c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001520:	2b01      	cmp	r3, #1
 8001522:	f04f 0302 	mov.w	r3, #2
 8001526:	d026      	beq.n	8001576 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001528:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800152c:	6803      	ldr	r3, [r0, #0]
 800152e:	6859      	ldr	r1, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001530:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001532:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001536:	6059      	str	r1, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001538:	4910      	ldr	r1, [pc, #64]	; (800157c <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x60>)
 800153a:	428b      	cmp	r3, r1
 800153c:	d012      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800153e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001542:	d00f      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001544:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8001548:	428b      	cmp	r3, r1
 800154a:	d00b      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800154c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001550:	428b      	cmp	r3, r1
 8001552:	d007      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001554:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001558:	428b      	cmp	r3, r1
 800155a:	d003      	beq.n	8001564 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800155c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001560:	428b      	cmp	r3, r1
 8001562:	d102      	bne.n	800156a <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800156a:	2301      	movs	r3, #1
 800156c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001570:	2300      	movs	r3, #0
 8001572:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001576:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000

08001580 <HAL_TIM_Base_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001580:	b513      	push	{r0, r1, r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001582:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001586:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001588:	f002 03ff 	and.w	r3, r2, #255	; 0xff
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800158c:	6800      	ldr	r0, [r0, #0]
 800158e:	b97a      	cbnz	r2, 80015b0 <HAL_TIM_Base_Init.constprop.0+0x30>
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_TIM_Base_Init.constprop.0+0x6c>)
    htim->Lock = HAL_UNLOCKED;
 8001592:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001596:	4290      	cmp	r0, r2
 8001598:	d10a      	bne.n	80015b0 <HAL_TIM_Base_Init.constprop.0+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_TIM_Base_Init.constprop.0+0x70>)
 800159e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	9b01      	ldr	r3, [sp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b6:	1d21      	adds	r1, r4, #4
 80015b8:	f7ff fe80 	bl	80012bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80015c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80015cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80015d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80015e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80015e8:	b002      	add	sp, #8
 80015ea:	bd10      	pop	{r4, pc}
 80015ec:	40014800 	.word	0x40014800
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  * @param  SubPriority the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 80015fc:	b510      	push	{r4, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fe:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	2c04      	cmp	r4, #4
 8001606:	bf28      	it	cs
 8001608:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001610:	fa02 f204 	lsl.w	r2, r2, r4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001614:	bf8c      	ite	hi
 8001616:	3b03      	subhi	r3, #3
 8001618:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161a:	ea21 0102 	bic.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800161e:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	bf18      	it	ne
 8001622:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	bf08      	it	eq
 800162c:	4a06      	ldreq	r2, [pc, #24]	; (8001648 <HAL_NVIC_SetPriority.constprop.0+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001632:	bf18      	it	ne
 8001634:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 8001638:	b2db      	uxtb	r3, r3
 800163a:	bf14      	ite	ne
 800163c:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001644:	bd10      	pop	{r4, pc}
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x80>)
 800164e:	2202      	movs	r2, #2
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001650:	b9c8      	cbnz	r0, 8001686 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x3a>
 8001652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001656:	681b      	ldr	r3, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f000 	lsl.w	r0, r2, r0

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	ea22 0200 	bic.w	r2, r2, r0
 8001664:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	4310      	orrs	r0, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x84>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800166c:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800166e:	4293      	cmp	r3, r2
 8001670:	d115      	bne.n	800169e <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8001672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001680:	2a06      	cmp	r2, #6
 8001682:	d11e      	bne.n	80016c2 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x76>
}
 8001684:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001686:	2804      	cmp	r0, #4
 8001688:	d102      	bne.n	8001690 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x44>
 800168a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800168e:	e7e2      	b.n	8001656 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0xa>
 8001690:	2808      	cmp	r0, #8
 8001692:	bf0c      	ite	eq
 8001694:	f883 2040 	strbeq.w	r2, [r3, #64]	; 0x40
 8001698:	f883 2041 	strbne.w	r2, [r3, #65]	; 0x41
 800169c:	e7db      	b.n	8001656 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0xa>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800169e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a2:	d0ea      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x88>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d0e7      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d0e3      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d0df      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
 80016ba:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80016be:	4293      	cmp	r3, r2
 80016c0:	d0db      	beq.n	800167a <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0+0x2e>
    __HAL_TIM_ENABLE(htim);
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4770      	bx	lr
 80016cc:	20000a80 	.word	0x20000a80
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_InitTick.isra.0>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_InitTick.isra.0+0x44>)
 80016da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	3b01      	subs	r3, #1
 80016e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 80016ea:	b510      	push	{r4, lr}
 80016ec:	4604      	mov	r4, r0
 80016ee:	d214      	bcs.n	800171a <HAL_InitTick.isra.0+0x42>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_InitTick.isra.0+0x48>)
 80016fa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fe:	2300      	movs	r3, #0
 8001700:	6193      	str	r3, [r2, #24]
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	280f      	cmp	r0, #15
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001704:	f04f 0307 	mov.w	r3, #7
 8001708:	6113      	str	r3, [r2, #16]
 800170a:	d806      	bhi.n	800171a <HAL_InitTick.isra.0+0x42>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	4601      	mov	r1, r0
 800170e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001712:	f7ff ff6f 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_InitTick.isra.0+0x4c>)
 8001718:	601c      	str	r4, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800171a:	bd10      	pop	{r4, pc}
 800171c:	20000004 	.word	0x20000004
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	20000014 	.word	0x20000014

08001728 <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 8001728:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	4c2e      	ldr	r4, [pc, #184]	; (80017e8 <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 8001730:	d30a      	bcc.n	8001748 <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001732:	f640 0334 	movw	r3, #2100	; 0x834
 8001736:	fb03 4300 	mla	r3, r3, r0, r4
 800173a:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800173e:	3201      	adds	r2, #1
 8001740:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001748:	f640 0334 	movw	r3, #2100	; 0x834
 800174c:	fb03 4300 	mla	r3, r3, r0, r4
 8001750:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001754:	fa12 f585 	uxtah	r5, r2, r5
 8001758:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800175c:	d220      	bcs.n	80017a0 <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 800175e:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001760:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001764:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001766:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 800176a:	42b2      	cmp	r2, r6
 800176c:	d005      	beq.n	800177a <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800176e:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001772:	b2ad      	uxth	r5, r5
 8001774:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001778:	d320      	bcc.n	80017bc <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 800177a:	f640 0334 	movw	r3, #2100	; 0x834
 800177e:	fb03 4400 	mla	r4, r3, r0, r4
 8001782:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001786:	4433      	add	r3, r6
 8001788:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <TerminalOutputBufferWrite.isra.0+0xc4>)
 800178e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001792:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001794:	68d3      	ldr	r3, [r2, #12]
 8001796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800179c:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 80017a0:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 80017a4:	3501      	adds	r5, #1
 80017a6:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80017aa:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80017ae:	fa12 f585 	uxtah	r5, r2, r5
 80017b2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017b6:	d3d2      	bcc.n	800175e <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 80017b8:	bf00      	nop
 80017ba:	e7f6      	b.n	80017aa <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 80017bc:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 80017c0:	f811 c006 	ldrb.w	ip, [r1, r6]
 80017c4:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 80017c8:	3501      	adds	r5, #1
 80017ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80017ce:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 80017d2:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 80017d6:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 80017da:	3501      	adds	r5, #1
 80017dc:	b2ad      	uxth	r5, r5
 80017de:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 80017e2:	3601      	adds	r6, #1
 80017e4:	e7c1      	b.n	800176a <TerminalOutputBufferWrite.isra.0+0x42>
 80017e6:	bf00      	nop
 80017e8:	20000210 	.word	0x20000210
 80017ec:	08012488 	.word	0x08012488

080017f0 <CmdEncoder2>:
{
 80017f0:	b508      	push	{r3, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80017f2:	b948      	cbnz	r0, 8001808 <CmdEncoder2+0x18>
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <CmdEncoder2+0x1c>)
     printf("POS: %iº \n", position);
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <CmdEncoder2+0x20>)
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 80017f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017fa:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 80017fe:	fa03 f181 	sxtah	r1, r3, r1
     printf("POS: %iº \n", position);
 8001802:	1049      	asrs	r1, r1, #1
 8001804:	f004 fc26 	bl	8006054 <iprintf>
 }    
 8001808:	2000      	movs	r0, #0
 800180a:	bd08      	pop	{r3, pc}
 800180c:	40000400 	.word	0x40000400
 8001810:	08006a1e 	.word	0x08006a1e

08001814 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001816:	4604      	mov	r4, r0
 8001818:	b938      	cbnz	r0, 800182a <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 800181a:	480b      	ldr	r0, [pc, #44]	; (8001848 <CmdTasks+0x34>)
  p = _tasktable_start;
 800181c:	4d0b      	ldr	r5, [pc, #44]	; (800184c <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 800181e:	4e0c      	ldr	r6, [pc, #48]	; (8001850 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001820:	4f0c      	ldr	r7, [pc, #48]	; (8001854 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001822:	f004 fcb3 	bl	800618c <puts>
  while(p != _tasktable_end) {
 8001826:	42b5      	cmp	r5, r6
 8001828:	d102      	bne.n	8001830 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 800182a:	2000      	movs	r0, #0
 800182c:	b003      	add	sp, #12
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001830:	696b      	ldr	r3, [r5, #20]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4621      	mov	r1, r4
 8001836:	692b      	ldr	r3, [r5, #16]
 8001838:	f855 2b18 	ldr.w	r2, [r5], #24
 800183c:	4638      	mov	r0, r7
 800183e:	f004 fc09 	bl	8006054 <iprintf>
    i++;
 8001842:	3401      	adds	r4, #1
 8001844:	e7ef      	b.n	8001826 <CmdTasks+0x12>
 8001846:	bf00      	nop
 8001848:	08006a2a 	.word	0x08006a2a
 800184c:	08012be0 	.word	0x08012be0
 8001850:	08012bf8 	.word	0x08012bf8
 8001854:	08006a43 	.word	0x08006a43

08001858 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 800185c:	b1f9      	cbz	r1, 800189e <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800185e:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001860:	888a      	ldrh	r2, [r1, #4]
 8001862:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001864:	2d10      	cmp	r5, #16
 8001866:	d005      	beq.n	8001874 <DecodeReadRegister+0x1c>
 8001868:	2d20      	cmp	r5, #32
 800186a:	d005      	beq.n	8001878 <DecodeReadRegister+0x20>
 800186c:	2d08      	cmp	r5, #8
 800186e:	d105      	bne.n	800187c <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 8001870:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001872:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001874:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001876:	e7fc      	b.n	8001872 <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 8001878:	58d0      	ldr	r0, [r2, r3]
    break;
 800187a:	e7fa      	b.n	8001872 <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 800187c:	6808      	ldr	r0, [r1, #0]
 800187e:	f7ff fb77 	bl	8000f70 <Uncompress>
 8001882:	4629      	mov	r1, r5
 8001884:	4602      	mov	r2, r0
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <DecodeReadRegister+0x4c>)
 8001888:	f004 fbe4 	bl	8006054 <iprintf>
    printf(" in periphral %s!\n",
 800188c:	6820      	ldr	r0, [r4, #0]
 800188e:	f7ff fb6f 	bl	8000f70 <Uncompress>
 8001892:	4601      	mov	r1, r0
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <DecodeReadRegister+0x50>)
 8001896:	f004 fbdd 	bl	8006054 <iprintf>
    return 0;
 800189a:	2000      	movs	r0, #0
 800189c:	e7e9      	b.n	8001872 <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 800189e:	4608      	mov	r0, r1
 80018a0:	e7e7      	b.n	8001872 <DecodeReadRegister+0x1a>
 80018a2:	bf00      	nop
 80018a4:	08006a5b 	.word	0x08006a5b
 80018a8:	08006a7d 	.word	0x08006a7d

080018ac <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 80018ac:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018ae:	b920      	cbnz	r0, 80018ba <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <CmdVersion+0x14>)
 80018b2:	4904      	ldr	r1, [pc, #16]	; (80018c4 <CmdVersion+0x18>)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <CmdVersion+0x1c>)
 80018b6:	f004 fbcd 	bl	8006054 <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 80018ba:	2000      	movs	r0, #0
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop
 80018c0:	080126b9 	.word	0x080126b9
 80018c4:	080126a0 	.word	0x080126a0
 80018c8:	08006a90 	.word	0x08006a90

080018cc <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 80018d0:	b149      	cbz	r1, 80018e6 <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80018d2:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80018d4:	8888      	ldrh	r0, [r1, #4]
 80018d6:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 80018d8:	2d10      	cmp	r5, #16
 80018da:	d005      	beq.n	80018e8 <DecodeWriteRegister.isra.0+0x1c>
 80018dc:	2d20      	cmp	r5, #32
 80018de:	d005      	beq.n	80018ec <DecodeWriteRegister.isra.0+0x20>
 80018e0:	2d08      	cmp	r5, #8
 80018e2:	d105      	bne.n	80018f0 <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 80018e4:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 80018e8:	52c2      	strh	r2, [r0, r3]
    break;  
 80018ea:	e7fc      	b.n	80018e6 <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 80018ec:	50c2      	str	r2, [r0, r3]
    break;
 80018ee:	e7fa      	b.n	80018e6 <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 80018f0:	6808      	ldr	r0, [r1, #0]
 80018f2:	f7ff fb3d 	bl	8000f70 <Uncompress>
 80018f6:	4629      	mov	r1, r5
 80018f8:	4602      	mov	r2, r0
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <DecodeWriteRegister.isra.0+0x48>)
 80018fc:	f004 fbaa 	bl	8006054 <iprintf>
    printf(" in periphral %s!\n",
 8001900:	6820      	ldr	r0, [r4, #0]
 8001902:	f7ff fb35 	bl	8000f70 <Uncompress>
}
 8001906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 800190a:	4601      	mov	r1, r0
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DecodeWriteRegister.isra.0+0x4c>)
 800190e:	f004 bba1 	b.w	8006054 <iprintf>
 8001912:	bf00      	nop
 8001914:	08006a5b 	.word	0x08006a5b
 8001918:	08006a7d 	.word	0x08006a7d

0800191c <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800191c:	2801      	cmp	r0, #1
{
 800191e:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001920:	d004      	beq.n	800192c <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8001922:	2802      	cmp	r0, #2
 8001924:	d104      	bne.n	8001930 <CmdTest+0x14>
    printf("testasm\n\n"
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <CmdTest+0x24>)
 8001928:	f004 fc30 	bl	800618c <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 800192c:	2000      	movs	r0, #0
 800192e:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8001930:	204d      	movs	r0, #77	; 0x4d
 8001932:	f7fe fc55 	bl	80001e0 <mytest>
 8001936:	4601      	mov	r1, r0
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <CmdTest+0x28>)
 800193a:	f004 fb8b 	bl	8006054 <iprintf>
  return CmdReturnOk;
 800193e:	e7f5      	b.n	800192c <CmdTest+0x10>
 8001940:	08006aa0 	.word	0x08006aa0
 8001944:	08006ad9 	.word	0x08006ad9

08001948 <CmdDC>:
{
 8001948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800194c:	4604      	mov	r4, r0
{
 800194e:	b092      	sub	sp, #72	; 0x48
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001950:	2800      	cmp	r0, #0
 8001952:	f040 8125 	bne.w	8001ba0 <CmdDC+0x258>
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001956:	4b9d      	ldr	r3, [pc, #628]	; (8001bcc <CmdDC+0x284>)
 8001958:	9003      	str	r0, [sp, #12]
 800195a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  htim11.Instance = TIM11;
 800195c:	4d9c      	ldr	r5, [pc, #624]	; (8001bd0 <CmdDC+0x288>)
  __HAL_RCC_TIM11_CLK_ENABLE();
 800195e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
 8001964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001966:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800196a:	9203      	str	r2, [sp, #12]
 800196c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	9002      	str	r0, [sp, #8]
 8001970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800197e:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001980:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001982:	201a      	movs	r0, #26
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001984:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001986:	f7ff fe35 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <CmdDC+0x28c>)
 800198c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001990:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	4621      	mov	r1, r4
 8001994:	221c      	movs	r2, #28
 8001996:	a80b      	add	r0, sp, #44	; 0x2c
 8001998:	f001 fd10 	bl	80033bc <memset>
  htim11.Init.Prescaler = 49999;     // interrupt time period of 1000 msec
 800199c:	488e      	ldr	r0, [pc, #568]	; (8001bd8 <CmdDC+0x290>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	60ac      	str	r4, [r5, #8]
  htim11.Init.Prescaler = 49999;     // interrupt time period of 1000 msec
 80019a0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80019a4:	e9c5 0300 	strd	r0, r3, [r5]
  htim11.Init.Period = 1999;   // interrupt time period of 1000 msec
 80019a8:	f240 73cf 	movw	r3, #1999	; 0x7cf
  rc = HAL_TIM_Base_Init(&htim11) != HAL_OK;
 80019ac:	4628      	mov	r0, r5
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	61ac      	str	r4, [r5, #24]
  rc = HAL_TIM_Base_Init(&htim11) != HAL_OK;
 80019b4:	f7ff fde4 	bl	8001580 <HAL_TIM_Base_Init.constprop.0>
  if(rc != HAL_OK) {
 80019b8:	b110      	cbz	r0, 80019c0 <CmdDC+0x78>
    printf("TIM 11 initialization failed \n");
 80019ba:	4888      	ldr	r0, [pc, #544]	; (8001bdc <CmdDC+0x294>)
 80019bc:	f004 fbe6 	bl	800618c <puts>
  rc = HAL_TIM_OC_Init(&htim11) != HAL_OK;
 80019c0:	4883      	ldr	r0, [pc, #524]	; (8001bd0 <CmdDC+0x288>)
 80019c2:	f7ff fcc9 	bl	8001358 <HAL_TIM_OC_Init>
  if(rc != HAL_OK) {
 80019c6:	b110      	cbz	r0, 80019ce <CmdDC+0x86>
    printf("TIM 11 initialization failed \n");
 80019c8:	4884      	ldr	r0, [pc, #528]	; (8001bdc <CmdDC+0x294>)
 80019ca:	f004 fbdf 	bl	800618c <puts>
  __HAL_LOCK(htim);
 80019ce:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019d2:	2400      	movs	r4, #0
 80019d4:	2b01      	cmp	r3, #1
  sConfigOC.Pulse = 0;
 80019d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019da:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80019de:	f040 80e3 	bne.w	8001ba8 <CmdDC+0x260>
    printf("TIM 11 channel configuration failed \n");
 80019e2:	487f      	ldr	r0, [pc, #508]	; (8001be0 <CmdDC+0x298>)
 80019e4:	f004 fbd2 	bl	800618c <puts>
  htim1.Instance = TIM1;
 80019e8:	4c7e      	ldr	r4, [pc, #504]	; (8001be4 <CmdDC+0x29c>)
  htim1.Init.Prescaler = 49;
 80019ea:	497f      	ldr	r1, [pc, #508]	; (8001be8 <CmdDC+0x2a0>)
 80019ec:	2231      	movs	r2, #49	; 0x31
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 49;
 80019f0:	e9c4 1200 	strd	r1, r2, [r4]
  rc= HAL_TIM_Base_Init(&htim1);
 80019f4:	4620      	mov	r0, r4
  htim1.Init.Period = 199;
 80019f6:	22c7      	movs	r2, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	e9c4 2303 	strd	r2, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	e9c4 3305 	strd	r3, r3, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	60a3      	str	r3, [r4, #8]
  rc= HAL_TIM_Base_Init(&htim1);
 8001a06:	f7ff fdbb 	bl	8001580 <HAL_TIM_Base_Init.constprop.0>
   if(rc!= HAL_OK)
 8001a0a:	b110      	cbz	r0, 8001a12 <CmdDC+0xca>
    printf("Error");
 8001a0c:	4877      	ldr	r0, [pc, #476]	; (8001bec <CmdDC+0x2a4>)
 8001a0e:	f004 fb21 	bl	8006054 <iprintf>
  __HAL_LOCK(htim);
 8001a12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f000 80d0 	beq.w	8001bbc <CmdDC+0x274>
  tmpsmcr = htim->Instance->SMCR;
 8001a1c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a24:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a2e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a36:	2300      	movs	r3, #0
 8001a38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  rc = HAL_TIM_PWM_Init(&htim1) != HAL_OK;
 8001a3c:	4869      	ldr	r0, [pc, #420]	; (8001be4 <CmdDC+0x29c>)
 8001a3e:	f7ff fc8b 	bl	8001358 <HAL_TIM_OC_Init>
  if(rc!= HAL_OK)
 8001a42:	b110      	cbz	r0, 8001a4a <CmdDC+0x102>
    printf("Error");
 8001a44:	4869      	ldr	r0, [pc, #420]	; (8001bec <CmdDC+0x2a4>)
 8001a46:	f004 fb05 	bl	8006054 <iprintf>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
  rc = HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8001a4c:	4865      	ldr	r0, [pc, #404]	; (8001be4 <CmdDC+0x29c>)
 8001a4e:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	e9cd 3304 	strd	r3, r3, [sp, #16]
  rc = HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8001a54:	f7ff fd62 	bl	800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
  if(rc!= HAL_OK)
 8001a58:	b110      	cbz	r0, 8001a60 <CmdDC+0x118>
    printf("Error");
 8001a5a:	4864      	ldr	r0, [pc, #400]	; (8001bec <CmdDC+0x2a4>)
 8001a5c:	f004 fafa 	bl	8006054 <iprintf>
  sConfigOC.Pulse = 0;
 8001a60:	2200      	movs	r2, #0
 8001a62:	2360      	movs	r3, #96	; 0x60
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a64:	485f      	ldr	r0, [pc, #380]	; (8001be4 <CmdDC+0x29c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a66:	9211      	str	r2, [sp, #68]	; 0x44
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a68:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 0;
 8001a6a:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6e:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a72:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a76:	f7ff fcbf 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rc!= HAL_OK)
 8001a7a:	b110      	cbz	r0, 8001a82 <CmdDC+0x13a>
    printf("Error");
 8001a7c:	485b      	ldr	r0, [pc, #364]	; (8001bec <CmdDC+0x2a4>)
 8001a7e:	f004 fae9 	bl	8006054 <iprintf>
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8001a82:	4858      	ldr	r0, [pc, #352]	; (8001be4 <CmdDC+0x29c>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	a90b      	add	r1, sp, #44	; 0x2c
 8001a88:	f7ff fcb6 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rc!= HAL_OK)
 8001a8c:	b110      	cbz	r0, 8001a94 <CmdDC+0x14c>
    printf("Error");
 8001a8e:	4857      	ldr	r0, [pc, #348]	; (8001bec <CmdDC+0x2a4>)
 8001a90:	f004 fae0 	bl	8006054 <iprintf>
  rc = HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001a94:	4853      	ldr	r0, [pc, #332]	; (8001be4 <CmdDC+0x29c>)
 8001a96:	2208      	movs	r2, #8
 8001a98:	a90b      	add	r1, sp, #44	; 0x2c
 8001a9a:	f7ff fcad 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rc!= HAL_OK)
 8001a9e:	b110      	cbz	r0, 8001aa6 <CmdDC+0x15e>
    printf("Error");
 8001aa0:	4852      	ldr	r0, [pc, #328]	; (8001bec <CmdDC+0x2a4>)
 8001aa2:	f004 fad7 	bl	8006054 <iprintf>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001aa6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f000 808a 	beq.w	8001bc4 <CmdDC+0x27c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <CmdDC+0x284>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	484b      	ldr	r0, [pc, #300]	; (8001bf0 <CmdDC+0x2a8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2600      	movs	r6, #0
 8001ac4:	9601      	str	r6, [sp, #4]
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	f002 0201 	and.w	r2, r2, #1
 8001ad4:	9201      	str	r2, [sp, #4]
 8001ad6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	9600      	str	r6, [sp, #0]
 8001ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aea:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af0:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001af6:	f04f 0802 	mov.w	r8, #2
 8001afa:	e9cd 3806 	strd	r3, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 8001afe:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f7ff fa73 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001b06:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f7ff fa6c 	bl	8000fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	e9cd 7706 	strd	r7, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f7ff fa64 	bl	8000fec <HAL_GPIO_Init>
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001b28:	42bb      	cmp	r3, r7
 8001b2a:	d124      	bne.n	8001b76 <CmdDC+0x22e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b2c:	682b      	ldr	r3, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2e:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	433a      	orrs	r2, r7
 8001b36:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <CmdDC+0x2a0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d012      	beq.n	8001b64 <CmdDC+0x21c>
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	d00f      	beq.n	8001b64 <CmdDC+0x21c>
 8001b44:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00b      	beq.n	8001b64 <CmdDC+0x21c>
 8001b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <CmdDC+0x21c>
 8001b54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <CmdDC+0x21c>
 8001b5c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d104      	bne.n	8001b6e <CmdDC+0x226>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6a:	2a06      	cmp	r2, #6
 8001b6c:	d003      	beq.n	8001b76 <CmdDC+0x22e>
    __HAL_TIM_ENABLE(htim);
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b76:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <CmdDC+0x23c>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fd64 	bl	800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
 8001b84:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d102      	bne.n	8001b92 <CmdDC+0x24a>
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	f7ff fd5d 	bl	800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
 8001b92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <CmdDC+0x258>
 8001b9a:	2008      	movs	r0, #8
 8001b9c:	f7ff fd56 	bl	800164c <HAL_TIM_PWM_Start.part.0.constprop.0.isra.0>
}
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	b012      	add	sp, #72	; 0x48
 8001ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(htim);
 8001ba8:	2301      	movs	r3, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001baa:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 8001bac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bb0:	a90b      	add	r1, sp, #44	; 0x2c
 8001bb2:	f7ff fbf9 	bl	80013a8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001bb6:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if(rc != HAL_OK) {
 8001bba:	e715      	b.n	80019e8 <CmdDC+0xa0>
    printf("Error");
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <CmdDC+0x2a4>)
 8001bbe:	f004 fa49 	bl	8006054 <iprintf>
 8001bc2:	e73b      	b.n	8001a3c <CmdDC+0xf4>
    printf("Error");
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <CmdDC+0x2a4>)
 8001bc6:	f004 fa45 	bl	8006054 <iprintf>
 8001bca:	e778      	b.n	8001abe <CmdDC+0x176>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	20000ac8 	.word	0x20000ac8
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	40014800 	.word	0x40014800
 8001bdc:	08006ae7 	.word	0x08006ae7
 8001be0:	08006b05 	.word	0x08006b05
 8001be4:	20000a80 	.word	0x20000a80
 8001be8:	40010000 	.word	0x40010000
 8001bec:	08006b2a 	.word	0x08006b2a
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <CmdEncoder>:
{
 8001bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bf8:	4605      	mov	r5, r0
{
 8001bfa:	b092      	sub	sp, #72	; 0x48
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	f040 814e 	bne.w	8001e9e <CmdEncoder+0x2aa>
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c02:	4ba9      	ldr	r3, [pc, #676]	; (8001ea8 <CmdEncoder+0x2b4>)
 8001c04:	9003      	str	r0, [sp, #12]
 8001c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  htim2.Instance = TIM1;
 8001c08:	4ca8      	ldr	r4, [pc, #672]	; (8001eac <CmdEncoder+0x2b8>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c16:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c18:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c1a:	201d      	movs	r0, #29
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c1c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c1e:	f7ff fce9 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
 8001c22:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <CmdEncoder+0x2bc>)
 8001c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c28:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	221c      	movs	r2, #28
 8001c2e:	a80b      	add	r0, sp, #44	; 0x2c
 8001c30:	f001 fbc4 	bl	80033bc <memset>
  htim2.Init.Prescaler = 49;
 8001c34:	4a9f      	ldr	r2, [pc, #636]	; (8001eb4 <CmdEncoder+0x2c0>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	60a5      	str	r5, [r4, #8]
  htim2.Init.Prescaler = 49;
 8001c38:	2331      	movs	r3, #49	; 0x31
 8001c3a:	e9c4 2300 	strd	r2, r3, [r4]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8001c3e:	4620      	mov	r0, r4
  htim2.Init.Period = 199;
 8001c40:	23c7      	movs	r3, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	e9c4 5505 	strd	r5, r5, [r4, #20]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8001c4e:	f7ff fc97 	bl	8001580 <HAL_TIM_Base_Init.constprop.0>
   if(rcOne!= HAL_OK)
 8001c52:	b110      	cbz	r0, 8001c5a <CmdEncoder+0x66>
    printf("Error");
 8001c54:	4898      	ldr	r0, [pc, #608]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001c56:	f004 f9fd 	bl	8006054 <iprintf>
  __HAL_LOCK(htim);
 8001c5a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 8098 	bne.w	8001d94 <CmdEncoder+0x1a0>
    printf("Error");
 8001c64:	4894      	ldr	r0, [pc, #592]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001c66:	f004 f9f5 	bl	8006054 <iprintf>
  rcOne = HAL_TIM_PWM_Init(&htim2) != HAL_OK;
 8001c6a:	4890      	ldr	r0, [pc, #576]	; (8001eac <CmdEncoder+0x2b8>)
 8001c6c:	f7ff fb74 	bl	8001358 <HAL_TIM_OC_Init>
  if(rcOne != HAL_OK)
 8001c70:	b110      	cbz	r0, 8001c78 <CmdEncoder+0x84>
    printf("Error");
 8001c72:	4891      	ldr	r0, [pc, #580]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001c74:	f004 f9ee 	bl	8006054 <iprintf>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001c7a:	488c      	ldr	r0, [pc, #560]	; (8001eac <CmdEncoder+0x2b8>)
 8001c7c:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001c82:	f7ff fc4b 	bl	800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
  if(rcOne!= HAL_OK)
 8001c86:	b110      	cbz	r0, 8001c8e <CmdEncoder+0x9a>
    printf("Error");
 8001c88:	488b      	ldr	r0, [pc, #556]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001c8a:	f004 f9e3 	bl	8006054 <iprintf>
  sConfigOC.Pulse = 0;
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2360      	movs	r3, #96	; 0x60
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001c92:	4886      	ldr	r0, [pc, #536]	; (8001eac <CmdEncoder+0x2b8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c94:	9211      	str	r2, [sp, #68]	; 0x44
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001c96:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 0;
 8001c98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c9c:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ca0:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001ca4:	f7ff fba8 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 8001ca8:	b110      	cbz	r0, 8001cb0 <CmdEncoder+0xbc>
    printf("Error");
 8001caa:	4883      	ldr	r0, [pc, #524]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001cac:	f004 f9d2 	bl	8006054 <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8001cb0:	487e      	ldr	r0, [pc, #504]	; (8001eac <CmdEncoder+0x2b8>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	a90b      	add	r1, sp, #44	; 0x2c
 8001cb6:	f7ff fb9f 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 8001cba:	b110      	cbz	r0, 8001cc2 <CmdEncoder+0xce>
    printf("Error");
 8001cbc:	487e      	ldr	r0, [pc, #504]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001cbe:	f004 f9c9 	bl	8006054 <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8001cc2:	487a      	ldr	r0, [pc, #488]	; (8001eac <CmdEncoder+0x2b8>)
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	a90b      	add	r1, sp, #44	; 0x2c
 8001cc8:	f7ff fb96 	bl	80013f8 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 8001ccc:	b110      	cbz	r0, 8001cd4 <CmdEncoder+0xe0>
    printf("Error");
 8001cce:	487a      	ldr	r0, [pc, #488]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001cd0:	f004 f9c0 	bl	8006054 <iprintf>
  __HAL_LOCK(htim);
 8001cd4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d06c      	beq.n	8001db6 <CmdEncoder+0x1c2>
  htim->Instance->BDTR = tmpbdtr;
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   __HAL_RCC_TIM3_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	4a6e      	ldr	r2, [pc, #440]	; (8001ea8 <CmdEncoder+0x2b4>)
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	6c11      	ldr	r1, [r2, #64]	; 0x40
  htim3.Instance = TIM3;
 8001cf2:	4c72      	ldr	r4, [pc, #456]	; (8001ebc <CmdEncoder+0x2c8>)
   __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf4:	f041 0102 	orr.w	r1, r1, #2
 8001cf8:	6411      	str	r1, [r2, #64]	; 0x40
 8001cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	60a3      	str	r3, [r4, #8]
   __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfe:	f002 0202 	and.w	r2, r2, #2
 8001d02:	9202      	str	r2, [sp, #8]
 8001d04:	9a02      	ldr	r2, [sp, #8]
  htim3.Instance = TIM3;
 8001d06:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <CmdEncoder+0x2cc>)
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	61a3      	str	r3, [r4, #24]
  htim3.Init.Period = 65535;
 8001d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	e9c4 1303 	strd	r1, r3, [r4, #12]
  htim3.Init.Prescaler = 0;
 8001d12:	e9c4 2300 	strd	r2, r3, [r4]
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d16:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d1a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8001d1e:	b90b      	cbnz	r3, 8001d24 <CmdEncoder+0x130>
    htim->Lock = HAL_UNLOCKED;
 8001d20:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	2702      	movs	r7, #2
 8001d26:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d2a:	6893      	ldr	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <CmdEncoder+0x2d0>)
 8001d2e:	4864      	ldr	r0, [pc, #400]	; (8001ec0 <CmdEncoder+0x2cc>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d34:	f023 0307 	bic.w	r3, r3, #7
 8001d38:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3a:	f7ff fabf 	bl	80012bc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	6890      	ldr	r0, [r2, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001d42:	6993      	ldr	r3, [r2, #24]
  tmpccer = htim->Instance->CCER;
 8001d44:	6a11      	ldr	r1, [r2, #32]
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	041b      	lsls	r3, r3, #16
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001d4e:	f021 01aa 	bic.w	r1, r1, #170	; 0xaa
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d52:	2601      	movs	r6, #1
  tmpsmcr |= sConfig->EncoderMode;
 8001d54:	f040 0003 	orr.w	r0, r0, #3
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d58:	f043 0301 	orr.w	r3, r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001d5c:	f041 0122 	orr.w	r1, r1, #34	; 0x22
  htim->Instance->SMCR = tmpsmcr;
 8001d60:	6090      	str	r0, [r2, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001d62:	6193      	str	r3, [r2, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d64:	4855      	ldr	r0, [pc, #340]	; (8001ebc <CmdEncoder+0x2c8>)
  htim->Instance->CCER = tmpccer;
 8001d66:	6211      	str	r1, [r2, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6a:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6e:	a904      	add	r1, sp, #16
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d70:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	e9cd 3304 	strd	r3, r3, [sp, #16]
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d88:	f7ff fbc8 	bl	800151c <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	b1b0      	cbz	r0, 8001dbe <CmdEncoder+0x1ca>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <CmdEncoder+0x19e>
  tmpsmcr = htim->Instance->SMCR;
 8001d94:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d9c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001da6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001dae:	2300      	movs	r3, #0
 8001db0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if(rcOne!= HAL_OK)
 8001db4:	e759      	b.n	8001c6a <CmdEncoder+0x76>
    printf("Error");
 8001db6:	4840      	ldr	r0, [pc, #256]	; (8001eb8 <CmdEncoder+0x2c4>)
 8001db8:	f004 f94c 	bl	8006054 <iprintf>
 8001dbc:	e795      	b.n	8001cea <CmdEncoder+0xf6>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <CmdEncoder+0x2b4>)
 8001dc0:	9001      	str	r0, [sp, #4]
 8001dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8001ec8 <CmdEncoder+0x2d4>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd0:	960a      	str	r6, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 8001dda:	e9cd 0008 	strd	r0, r0, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001de2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	e9cd 3706 	strd	r3, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f7ff f8ff 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8001dee:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	e9cd 5508 	strd	r5, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f7ff f8f8 	bl	8000fec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f508 6080 	add.w	r0, r8, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	e9cd 6606 	strd	r6, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	e9cd 5508 	strd	r5, r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f7ff f8f0 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;  // encoder pin configuration
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8001e0e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e18:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8001e1a:	f7ff f8e7 	bl	8000fec <HAL_GPIO_Init>
 8001e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e22:	f8c8 3018 	str.w	r3, [r8, #24]
 8001e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2a:	f8c8 3018 	str.w	r3, [r8, #24]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001e2e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001e32:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001e36:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e3e:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001e40:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001e42:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001e44:	b2db      	uxtb	r3, r3
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e46:	d12a      	bne.n	8001e9e <CmdEncoder+0x2aa>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e48:	2901      	cmp	r1, #1
 8001e4a:	d128      	bne.n	8001e9e <CmdEncoder+0x2aa>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e4c:	2a01      	cmp	r2, #1
 8001e4e:	d126      	bne.n	8001e9e <CmdEncoder+0x2aa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d124      	bne.n	8001e9e <CmdEncoder+0x2aa>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001e54:	6823      	ldr	r3, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e56:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5a:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e62:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e6e:	6a1a      	ldr	r2, [r3, #32]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	f042 0210 	orr.w	r2, r2, #16
 8001e84:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	f042 0202 	orr.w	r2, r2, #2
 8001e8c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	b012      	add	sp, #72	; 0x48
 8001ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	20000b10 	.word	0x20000b10
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	08006b2a 	.word	0x08006b2a
 8001ebc:	20000b58 	.word	0x20000b58
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	20000b5c 	.word	0x20000b5c
 8001ec8:	40020000 	.word	0x40020000

08001ecc <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	4616      	mov	r6, r2
 8001ed6:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001ed8:	4605      	mov	r5, r0
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d046      	beq.n	8001f6c <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ede:	6800      	ldr	r0, [r0, #0]
 8001ee0:	f7ff f846 	bl	8000f70 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001ee4:	88aa      	ldrh	r2, [r5, #4]
 8001ee6:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	79ab      	ldrb	r3, [r5, #6]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	4601      	mov	r1, r0
 8001ef0:	4633      	mov	r3, r6
 8001ef2:	4820      	ldr	r0, [pc, #128]	; (8001f74 <DecodeRegister+0xa8>)
 8001ef4:	4632      	mov	r2, r6
 8001ef6:	f004 f8ad 	bl	8006054 <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001efa:	68ac      	ldr	r4, [r5, #8]
 8001efc:	b3a4      	cbz	r4, 8001f68 <DecodeRegister+0x9c>
 8001efe:	b3af      	cbz	r7, 8001f6c <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f00:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001f78 <DecodeRegister+0xac>
 8001f04:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001f7c <DecodeRegister+0xb0>
 8001f08:	f8df a074 	ldr.w	sl, [pc, #116]	; 8001f80 <DecodeRegister+0xb4>
 8001f0c:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001f0e:	2700      	movs	r7, #0
 8001f10:	89ab      	ldrh	r3, [r5, #12]
 8001f12:	429f      	cmp	r7, r3
 8001f14:	d305      	bcc.n	8001f22 <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001f16:	200a      	movs	r0, #10
  }

}
 8001f18:	b006      	add	sp, #24
 8001f1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 8001f1e:	f004 b8b1 	b.w	8006084 <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001f22:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f26:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	fa26 f202 	lsr.w	r2, r6, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f3c:	f7ff f818 	bl	8000f70 <Uncompress>
	 (unsigned int)(f->width),
 8001f40:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001f44:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 8001f48:	9b05      	ldr	r3, [sp, #20]
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	bf8c      	ite	hi
 8001f52:	4640      	movhi	r0, r8
 8001f54:	4648      	movls	r0, r9
 8001f56:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4650      	mov	r0, sl
 8001f5e:	f004 f879 	bl	8006054 <iprintf>
    for(i=0; i<r->numFields; i++) {
 8001f62:	3701      	adds	r7, #1
 8001f64:	3408      	adds	r4, #8
 8001f66:	e7d3      	b.n	8001f10 <DecodeRegister+0x44>
  if(decodeFields) {
 8001f68:	2f00      	cmp	r7, #0
 8001f6a:	d1d4      	bne.n	8001f16 <DecodeRegister+0x4a>
}
 8001f6c:	b006      	add	sp, #24
 8001f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f72:	bf00      	nop
 8001f74:	08006b3c 	.word	0x08006b3c
 8001f78:	08006b30 	.word	0x08006b30
 8001f7c:	08006b36 	.word	0x08006b36
 8001f80:	08006b77 	.word	0x08006b77

08001f84 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f88:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001f8a:	6800      	ldr	r0, [r0, #0]
{
 8001f8c:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001f8e:	f7fe ffef 	bl	8000f70 <Uncompress>
 8001f92:	6862      	ldr	r2, [r4, #4]
 8001f94:	4601      	mov	r1, r0
 8001f96:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <DecodePeripheral+0x4c>)
 8001f98:	f004 f85c 	bl	8006054 <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001f9c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001fa0:	f1b8 0f00 	cmp.w	r8, #0
 8001fa4:	d112      	bne.n	8001fcc <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001faa:	4639      	mov	r1, r7
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff fc53 	bl	8001858 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001fb2:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001fb4:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001fb6:	4633      	mov	r3, r6
 8001fb8:	4638      	mov	r0, r7
 8001fba:	f7ff ff87 	bl	8001ecc <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001fbe:	3501      	adds	r5, #1
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	429d      	cmp	r5, r3
 8001fc4:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001fc8:	d3ef      	bcc.n	8001faa <DecodePeripheral+0x26>
 8001fca:	e7ec      	b.n	8001fa6 <DecodePeripheral+0x22>
 8001fcc:	2500      	movs	r5, #0
 8001fce:	e7f7      	b.n	8001fc0 <DecodePeripheral+0x3c>
 8001fd0:	08006ba0 	.word	0x08006ba0

08001fd4 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd8:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001fda:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001fdc:	460e      	mov	r6, r1
  printf("\t");
 8001fde:	f004 f851 	bl	8006084 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001fe2:	4f11      	ldr	r7, [pc, #68]	; (8002028 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8001fe4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800202c <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001fe8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002030 <DecodePrintRegisters+0x5c>
 8001fec:	3510      	adds	r5, #16
  col = 8;
 8001fee:	2408      	movs	r4, #8
  while(count--) {
 8001ff0:	3e01      	subs	r6, #1
 8001ff2:	d201      	bcs.n	8001ff8 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8001ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001ff8:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8001ffc:	f7fe ffb8 	bl	8000f70 <Uncompress>
 8002000:	4601      	mov	r1, r0
 8002002:	4638      	mov	r0, r7
 8002004:	f004 f826 	bl	8006054 <iprintf>
 8002008:	4420      	add	r0, r4
 800200a:	b2c4      	uxtb	r4, r0
    if(count) {
 800200c:	b156      	cbz	r6, 8002024 <DecodePrintRegisters+0x50>
      col += printf(", ");
 800200e:	4640      	mov	r0, r8
 8002010:	f004 f820 	bl	8006054 <iprintf>
 8002014:	4420      	add	r0, r4
 8002016:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8002018:	2c46      	cmp	r4, #70	; 0x46
 800201a:	d903      	bls.n	8002024 <DecodePrintRegisters+0x50>
	printf("\n\t");
 800201c:	4648      	mov	r0, r9
 800201e:	f004 f819 	bl	8006054 <iprintf>
	col = 8;
 8002022:	2408      	movs	r4, #8
    r++;
 8002024:	3510      	adds	r5, #16
 8002026:	e7e3      	b.n	8001ff0 <DecodePrintRegisters+0x1c>
 8002028:	08006a7a 	.word	0x08006a7a
 800202c:	08006b39 	.word	0x08006b39
 8002030:	08006bc8 	.word	0x08006bc8

08002034 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 8002034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 8002038:	2009      	movs	r0, #9
 800203a:	f004 f823 	bl	8006084 <putchar>
  for(; p->name != NULL; p++) {
 800203e:	4d0f      	ldr	r5, [pc, #60]	; (800207c <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 8002040:	4e0f      	ldr	r6, [pc, #60]	; (8002080 <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 8002042:	4f10      	ldr	r7, [pc, #64]	; (8002084 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 8002044:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8002088 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 8002048:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 800204a:	6828      	ldr	r0, [r5, #0]
 800204c:	b908      	cbnz	r0, 8002052 <DecodePrintPeripherals.constprop.0+0x1e>
}
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8002052:	f7fe ff8d 	bl	8000f70 <Uncompress>
 8002056:	4601      	mov	r1, r0
 8002058:	4630      	mov	r0, r6
 800205a:	f003 fffb 	bl	8006054 <iprintf>
    if((p+1)->name != NULL) {
 800205e:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8002060:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8002062:	b14b      	cbz	r3, 8002078 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 8002064:	4638      	mov	r0, r7
 8002066:	f003 fff5 	bl	8006054 <iprintf>
 800206a:	4404      	add	r4, r0
      if(col > 70) {
 800206c:	2c46      	cmp	r4, #70	; 0x46
 800206e:	d903      	bls.n	8002078 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 8002070:	4640      	mov	r0, r8
 8002072:	f003 ffef 	bl	8006054 <iprintf>
	col = 8;
 8002076:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8002078:	3510      	adds	r5, #16
 800207a:	e7e6      	b.n	800204a <DecodePrintPeripherals.constprop.0+0x16>
 800207c:	0800f100 	.word	0x0800f100
 8002080:	08006a7a 	.word	0x08006a7a
 8002084:	08006b39 	.word	0x08006b39
 8002088:	08006bc8 	.word	0x08006bc8

0800208c <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 800208c:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800208e:	4909      	ldr	r1, [pc, #36]	; (80020b4 <fetch_string_arg+0x28>)
{
 8002090:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8002092:	2000      	movs	r0, #0
 8002094:	f001 feca 	bl	8003e2c <strtok>
  if(p == NULL) {
 8002098:	4604      	mov	r4, r0
 800209a:	b140      	cbz	r0, 80020ae <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800209c:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800209e:	f7fe f8b9 	bl	8000214 <strlen>
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <fetch_string_arg+0x2c>)
 80020a4:	3001      	adds	r0, #1
 80020a6:	4404      	add	r4, r0
 80020a8:	601c      	str	r4, [r3, #0]
  return 0;
 80020aa:	2000      	movs	r0, #0
}
 80020ac:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b2:	e7fb      	b.n	80020ac <fetch_string_arg+0x20>
 80020b4:	08006bcb 	.word	0x08006bcb
 80020b8:	20000a5c 	.word	0x20000a5c

080020bc <TaskInput>:
{
 80020bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 80020c0:	4d6b      	ldr	r5, [pc, #428]	; (8002270 <TaskInput+0x1b4>)
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	b123      	cbz	r3, 80020d0 <TaskInput+0x14>
    printf("ARMON>");
 80020c6:	486b      	ldr	r0, [pc, #428]	; (8002274 <TaskInput+0x1b8>)
 80020c8:	f003 ffc4 	bl	8006054 <iprintf>
    printPrompt = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	f10d 010f 	add.w	r1, sp, #15
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe ff24 	bl	8000f24 <TerminalRead>
  if(rc) goto ProcessCharacter;
 80020dc:	2800      	cmp	r0, #0
 80020de:	d054      	beq.n	800218a <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 80020e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d001      	beq.n	80020ec <TaskInput+0x30>
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d115      	bne.n	8002118 <TaskInput+0x5c>
 80020ec:	4c62      	ldr	r4, [pc, #392]	; (8002278 <TaskInput+0x1bc>)
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	b192      	cbz	r2, 8002118 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 80020f2:	4862      	ldr	r0, [pc, #392]	; (800227c <TaskInput+0x1c0>)
 80020f4:	f003 ffae 	bl	8006054 <iprintf>
    buf--;     /* Then remove it from the buffer */
 80020f8:	4a61      	ldr	r2, [pc, #388]	; (8002280 <TaskInput+0x1c4>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8002106:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800210a:	f1a3 020d 	sub.w	r2, r3, #13
 800210e:	4253      	negs	r3, r2
 8002110:	4153      	adcs	r3, r2
 8002112:	4a5c      	ldr	r2, [pc, #368]	; (8002284 <TaskInput+0x1c8>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e038      	b.n	800218a <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8002118:	2b21      	cmp	r3, #33	; 0x21
 800211a:	d12a      	bne.n	8002172 <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 800211c:	4b5a      	ldr	r3, [pc, #360]	; (8002288 <TaskInput+0x1cc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8002124:	4c59      	ldr	r4, [pc, #356]	; (800228c <TaskInput+0x1d0>)
 8002126:	495a      	ldr	r1, [pc, #360]	; (8002290 <TaskInput+0x1d4>)
 8002128:	4620      	mov	r0, r4
 800212a:	f004 f851 	bl	80061d0 <strcpy>
      printf("%s",input);
 800212e:	4621      	mov	r1, r4
 8002130:	4858      	ldr	r0, [pc, #352]	; (8002294 <TaskInput+0x1d8>)
 8002132:	f003 ff8f 	bl	8006054 <iprintf>
      count = strlen(input);
 8002136:	4620      	mov	r0, r4
 8002138:	f7fe f86c 	bl	8000214 <strlen>
 800213c:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <TaskInput+0x1bc>)
 800213e:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8002140:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <TaskInput+0x1c4>)
 8002142:	4404      	add	r4, r0
 8002144:	601c      	str	r4, [r3, #0]
    printf("\n");
 8002146:	200a      	movs	r0, #10
 8002148:	f003 ff9c 	bl	8006084 <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 800214c:	494f      	ldr	r1, [pc, #316]	; (800228c <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800214e:	4c52      	ldr	r4, [pc, #328]	; (8002298 <TaskInput+0x1dc>)
  i = len;
 8002150:	2350      	movs	r3, #80	; 0x50
 8002152:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8002154:	3b01      	subs	r3, #1
 8002156:	1c5f      	adds	r7, r3, #1
 8002158:	780a      	ldrb	r2, [r1, #0]
 800215a:	4608      	mov	r0, r1
 800215c:	f101 0101 	add.w	r1, r1, #1
 8002160:	d036      	beq.n	80021d0 <TaskInput+0x114>
 8002162:	2a00      	cmp	r2, #0
 8002164:	d060      	beq.n	8002228 <TaskInput+0x16c>
 8002166:	5d12      	ldrb	r2, [r2, r4]
 8002168:	0717      	lsls	r7, r2, #28
 800216a:	d4f3      	bmi.n	8002154 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 800216c:	2b00      	cmp	r3, #0
 800216e:	d130      	bne.n	80021d2 <TaskInput+0x116>
 8002170:	e05a      	b.n	8002228 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 8002172:	4a49      	ldr	r2, [pc, #292]	; (8002298 <TaskInput+0x1dc>)
 8002174:	5c9a      	ldrb	r2, [r3, r2]
 8002176:	f012 0f97 	tst.w	r2, #151	; 0x97
 800217a:	d015      	beq.n	80021a8 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 800217c:	493e      	ldr	r1, [pc, #248]	; (8002278 <TaskInput+0x1bc>)
 800217e:	680a      	ldr	r2, [r1, #0]
 8002180:	2a4f      	cmp	r2, #79	; 0x4f
 8002182:	d905      	bls.n	8002190 <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 8002184:	2007      	movs	r0, #7
 8002186:	f003 ff7d 	bl	8006084 <putchar>
}
 800218a:	b004      	add	sp, #16
 800218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 8002190:	4c3b      	ldr	r4, [pc, #236]	; (8002280 <TaskInput+0x1c4>)
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	7003      	strb	r3, [r0, #0]
 8002196:	1c45      	adds	r5, r0, #1
      count++;
 8002198:	3201      	adds	r2, #1
      printf("%c",c);
 800219a:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 800219e:	6025      	str	r5, [r4, #0]
      count++;
 80021a0:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 80021a2:	f003 ff6f 	bl	8006084 <putchar>
 80021a6:	e7ae      	b.n	8002106 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 80021a8:	2b0d      	cmp	r3, #13
 80021aa:	d005      	beq.n	80021b8 <TaskInput+0xfc>
 80021ac:	2b0a      	cmp	r3, #10
 80021ae:	d1aa      	bne.n	8002106 <TaskInput+0x4a>
 80021b0:	4b34      	ldr	r3, [pc, #208]	; (8002284 <TaskInput+0x1c8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1a6      	bne.n	8002106 <TaskInput+0x4a>
    *buf = '\0';
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <TaskInput+0x1c4>)
    strcpy(input_b,input);
 80021ba:	4934      	ldr	r1, [pc, #208]	; (800228c <TaskInput+0x1d0>)
    *buf = '\0';
 80021bc:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80021be:	4834      	ldr	r0, [pc, #208]	; (8002290 <TaskInput+0x1d4>)
    *buf = '\0';
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80021c4:	f004 f804 	bl	80061d0 <strcpy>
    saved = 1;
 80021c8:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <TaskInput+0x1cc>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e7ba      	b.n	8002146 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 80021d0:	b352      	cbz	r2, 8002228 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 80021d2:	4932      	ldr	r1, [pc, #200]	; (800229c <TaskInput+0x1e0>)
 80021d4:	f001 fe2a 	bl	8003e2c <strtok>
  if(p==NULL) {
 80021d8:	4604      	mov	r4, r0
 80021da:	b920      	cbnz	r0, 80021e6 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80021dc:	4930      	ldr	r1, [pc, #192]	; (80022a0 <TaskInput+0x1e4>)
 80021de:	4831      	ldr	r0, [pc, #196]	; (80022a4 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 80021e0:	f003 ff38 	bl	8006054 <iprintf>
  return CmdReturnNotFound;
 80021e4:	e020      	b.n	8002228 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 80021e6:	4930      	ldr	r1, [pc, #192]	; (80022a8 <TaskInput+0x1ec>)
 80021e8:	f003 ffd8 	bl	800619c <strcasecmp>
 80021ec:	bb58      	cbnz	r0, 8002246 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 80021ee:	492b      	ldr	r1, [pc, #172]	; (800229c <TaskInput+0x1e0>)
 80021f0:	f001 fe1c 	bl	8003e2c <strtok>
    if(p == NULL) {
 80021f4:	4604      	mov	r4, r0
 80021f6:	b318      	cbz	r0, 8002240 <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 80021f8:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fe f809 	bl	8000214 <strlen>
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8002204:	4f2a      	ldr	r7, [pc, #168]	; (80022b0 <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8002206:	3001      	adds	r0, #1
 8002208:	4420      	add	r0, r4
 800220a:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	b9e9      	cbnz	r1, 800224c <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8002210:	4828      	ldr	r0, [pc, #160]	; (80022b4 <TaskInput+0x1f8>)
 8002212:	4621      	mov	r1, r4
 8002214:	e7e4      	b.n	80021e0 <TaskInput+0x124>
	if(t->help != NULL) {
 8002216:	68a2      	ldr	r2, [r4, #8]
 8002218:	b172      	cbz	r2, 8002238 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800221a:	4638      	mov	r0, r7
 800221c:	f003 ff1a 	bl	8006054 <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8002220:	340c      	adds	r4, #12
 8002222:	6821      	ldr	r1, [r4, #0]
 8002224:	2900      	cmp	r1, #0
 8002226:	d1f6      	bne.n	8002216 <TaskInput+0x15a>
    printPrompt = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	602b      	str	r3, [r5, #0]
    buf = input;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <TaskInput+0x1c4>)
 800222e:	601e      	str	r6, [r3, #0]
    count = 0;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <TaskInput+0x1bc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e766      	b.n	8002106 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	2001      	movs	r0, #1
 800223c:	4798      	blx	r3
 800223e:	e7ef      	b.n	8002220 <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 8002240:	4c1b      	ldr	r4, [pc, #108]	; (80022b0 <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8002242:	4f1d      	ldr	r7, [pc, #116]	; (80022b8 <TaskInput+0x1fc>)
 8002244:	e7ed      	b.n	8002222 <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8002246:	f04f 0800 	mov.w	r8, #0
 800224a:	e7d7      	b.n	80021fc <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 800224c:	4620      	mov	r0, r4
 800224e:	9101      	str	r1, [sp, #4]
 8002250:	f003 ffa4 	bl	800619c <strcasecmp>
 8002254:	9901      	ldr	r1, [sp, #4]
 8002256:	b948      	cbnz	r0, 800226c <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 8002258:	f1b8 0f00 	cmp.w	r8, #0
 800225c:	d002      	beq.n	8002264 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 800225e:	4817      	ldr	r0, [pc, #92]	; (80022bc <TaskInput+0x200>)
 8002260:	f003 fef8 	bl	8006054 <iprintf>
      return t->func(arg);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4640      	mov	r0, r8
 8002268:	4798      	blx	r3
 800226a:	e7dd      	b.n	8002228 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 800226c:	370c      	adds	r7, #12
 800226e:	e7cd      	b.n	800220c <TaskInput+0x150>
 8002270:	20000010 	.word	0x20000010
 8002274:	08006bd2 	.word	0x08006bd2
 8002278:	20000a64 	.word	0x20000a64
 800227c:	08006bd9 	.word	0x08006bd9
 8002280:	20000008 	.word	0x20000008
 8002284:	20000a6c 	.word	0x20000a6c
 8002288:	20000c88 	.word	0x20000c88
 800228c:	20000be4 	.word	0x20000be4
 8002290:	20000c34 	.word	0x20000c34
 8002294:	08006a7a 	.word	0x08006a7a
 8002298:	08012742 	.word	0x08012742
 800229c:	08006bcb 	.word	0x08006bcb
 80022a0:	08012728 	.word	0x08012728
 80022a4:	08006bdd 	.word	0x08006bdd
 80022a8:	08006c0d 	.word	0x08006c0d
 80022ac:	20000a5c 	.word	0x20000a5c
 80022b0:	08012bf8 	.word	0x08012bf8
 80022b4:	08006c23 	.word	0x08006c23
 80022b8:	08006c12 	.word	0x08006c12
 80022bc:	08006c1e 	.word	0x08006c1e

080022c0 <fetch_uint32_arg>:
{
 80022c0:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 80022c2:	490c      	ldr	r1, [pc, #48]	; (80022f4 <fetch_uint32_arg+0x34>)
{
 80022c4:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f001 fdb0 	bl	8003e2c <strtok>
  if(p == NULL) {
 80022cc:	4604      	mov	r4, r0
 80022ce:	b168      	cbz	r0, 80022ec <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	4611      	mov	r1, r2
 80022d4:	f001 fe78 	bl	8003fc8 <strtoul>
 80022d8:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fd ff9a 	bl	8000214 <strlen>
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <fetch_uint32_arg+0x38>)
 80022e2:	3001      	adds	r0, #1
 80022e4:	4404      	add	r4, r0
 80022e6:	601c      	str	r4, [r3, #0]
  return 0;
 80022e8:	2000      	movs	r0, #0
}
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f0:	e7fb      	b.n	80022ea <fetch_uint32_arg+0x2a>
 80022f2:	bf00      	nop
 80022f4:	08006bcb 	.word	0x08006bcb
 80022f8:	20000a5c 	.word	0x20000a5c

080022fc <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 80022fc:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80022fe:	b9d8      	cbnz	r0, 8002338 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8002300:	a801      	add	r0, sp, #4
 8002302:	f7ff ffdd 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002306:	b128      	cbz	r0, 8002314 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8002308:	480e      	ldr	r0, [pc, #56]	; (8002344 <CmdLed+0x48>)
 800230a:	f003 ff3f 	bl	800618c <puts>
    return CmdReturnBadParameter1;
 800230e:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8002310:	b002      	add	sp, #8
 8002312:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8002314:	9901      	ldr	r1, [sp, #4]
 8002316:	480c      	ldr	r0, [pc, #48]	; (8002348 <CmdLed+0x4c>)
 8002318:	f003 fe9c 	bl	8006054 <iprintf>
  val = val ? 1 : 0;
 800231c:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 800231e:	480b      	ldr	r0, [pc, #44]	; (800234c <CmdLed+0x50>)
  val = val ? 1 : 0;
 8002320:	3b00      	subs	r3, #0
 8002322:	bf18      	it	ne
 8002324:	2301      	movne	r3, #1
 8002326:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8002328:	f003 ff30 	bl	800618c <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 800232c:	f89d 0004 	ldrb.w	r0, [sp, #4]
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <CmdLed+0x54>)
  if(PinState != GPIO_PIN_RESET)
 8002332:	b118      	cbz	r0, 800233c <CmdLed+0x40>
    GPIOx->BSRR = GPIO_Pin;
 8002334:	2220      	movs	r2, #32
 8002336:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002338:	2000      	movs	r0, #0
 800233a:	e7e9      	b.n	8002310 <CmdLed+0x14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	e7e5      	b.n	8002310 <CmdLed+0x14>
 8002344:	08006c58 	.word	0x08006c58
 8002348:	08006c86 	.word	0x08006c86
 800234c:	08006ca2 	.word	0x08006ca2
 8002350:	40020000 	.word	0x40020000

08002354 <CmdDC2>:
{
 8002354:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002356:	2800      	cmp	r0, #0
 8002358:	d15e      	bne.n	8002418 <CmdDC2+0xc4>
  uint32_t Motor_1_Speed = 0;
 800235a:	e9cd 0000 	strd	r0, r0, [sp]
  rc = fetch_uint32_arg(&Motor_1_Dir);
 800235e:	4668      	mov	r0, sp
 8002360:	f7ff ffae 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002364:	b110      	cbz	r0, 800236c <CmdDC2+0x18>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 8002366:	483b      	ldr	r0, [pc, #236]	; (8002454 <CmdDC2+0x100>)
 8002368:	f003 ff10 	bl	800618c <puts>
  rc = fetch_uint32_arg(&Motor_1_Speed);
 800236c:	a801      	add	r0, sp, #4
 800236e:	f7ff ffa7 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002372:	2800      	cmp	r0, #0
 8002374:	d054      	beq.n	8002420 <CmdDC2+0xcc>
   printf("Please Enter speed in percentage between 0 and 100 \n");
 8002376:	4838      	ldr	r0, [pc, #224]	; (8002458 <CmdDC2+0x104>)
 8002378:	f003 ff08 	bl	800618c <puts>
  rc = fetch_uint32_arg(&setTime);
 800237c:	4837      	ldr	r0, [pc, #220]	; (800245c <CmdDC2+0x108>)
 800237e:	f7ff ff9f 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002382:	b110      	cbz	r0, 800238a <CmdDC2+0x36>
   printf("Please Enter time in seconds\n");
 8002384:	4836      	ldr	r0, [pc, #216]	; (8002460 <CmdDC2+0x10c>)
 8002386:	f003 ff01 	bl	800618c <puts>
   switch (Motor_1_Dir) {
 800238a:	9b00      	ldr	r3, [sp, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d04b      	beq.n	8002428 <CmdDC2+0xd4>
 8002390:	2b02      	cmp	r3, #2
 8002392:	d055      	beq.n	8002440 <CmdDC2+0xec>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d159      	bne.n	800244c <CmdDC2+0xf8>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002398:	4932      	ldr	r1, [pc, #200]	; (8002464 <CmdDC2+0x110>)
 800239a:	680b      	ldr	r3, [r1, #0]
  TIMx->CCER &= ~tmp;
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023a8:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <CmdDC2+0x114>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <CmdDC2+0x76>
    __HAL_TIM_MOE_DISABLE(htim);
 80023ae:	6a18      	ldr	r0, [r3, #32]
 80023b0:	f241 1211 	movw	r2, #4369	; 0x1111
 80023b4:	4210      	tst	r0, r2
 80023b6:	d108      	bne.n	80023ca <CmdDC2+0x76>
 80023b8:	6a18      	ldr	r0, [r3, #32]
 80023ba:	f240 4244 	movw	r2, #1092	; 0x444
 80023be:	4210      	tst	r0, r2
 80023c0:	bf02      	ittt	eq
 80023c2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80023c4:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80023c8:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80023ca:	6a18      	ldr	r0, [r3, #32]
 80023cc:	f241 1211 	movw	r2, #4369	; 0x1111
 80023d0:	4210      	tst	r0, r2
 80023d2:	d108      	bne.n	80023e6 <CmdDC2+0x92>
 80023d4:	6a18      	ldr	r0, [r3, #32]
 80023d6:	f240 4244 	movw	r2, #1092	; 0x444
 80023da:	4210      	tst	r0, r2
 80023dc:	bf02      	ittt	eq
 80023de:	681a      	ldreq	r2, [r3, #0]
 80023e0:	f022 0201 	biceq.w	r2, r2, #1
 80023e4:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	2301      	movs	r3, #1
 80023e8:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <CmdDC2+0x118>)
 80023ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023f2:	619a      	str	r2, [r3, #24]
 80023f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f8:	619a      	str	r2, [r3, #24]
      oneSecondCount = 0;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <CmdDC2+0x11c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	801a      	strh	r2, [r3, #0]
   TIM1->CCR1  = (100 +(Motor_1_Speed))-1;
 8002400:	9b01      	ldr	r3, [sp, #4]
 8002402:	4a19      	ldr	r2, [pc, #100]	; (8002468 <CmdDC2+0x114>)
 8002404:	f103 0163 	add.w	r1, r3, #99	; 0x63
 8002408:	6351      	str	r1, [r2, #52]	; 0x34
   TIM1->CCR2 = (50 +((Motor_1_Speed  * 150)/ 100))-1;
 800240a:	2196      	movs	r1, #150	; 0x96
 800240c:	434b      	muls	r3, r1
 800240e:	2164      	movs	r1, #100	; 0x64
 8002410:	fbb3 f3f1 	udiv	r3, r3, r1
 8002414:	3331      	adds	r3, #49	; 0x31
 8002416:	6393      	str	r3, [r2, #56]	; 0x38
 }    
 8002418:	2000      	movs	r0, #0
 800241a:	b003      	add	sp, #12
 800241c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(Motor_1_Speed < 0 || Motor_1_Speed > 100) {
 8002420:	9b01      	ldr	r3, [sp, #4]
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d9aa      	bls.n	800237c <CmdDC2+0x28>
 8002426:	e7a6      	b.n	8002376 <CmdDC2+0x22>
 8002428:	4a10      	ldr	r2, [pc, #64]	; (800246c <CmdDC2+0x118>)
 800242a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800242e:	6191      	str	r1, [r2, #24]
    GPIOx->BSRR = GPIO_Pin;
 8002430:	2102      	movs	r1, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002432:	6191      	str	r1, [r2, #24]
     oneSecondCount = 0;
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <CmdDC2+0x11c>)
 8002436:	2100      	movs	r1, #0
 8002438:	8011      	strh	r1, [r2, #0]
     counterStart = 1;
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <CmdDC2+0x120>)
 800243c:	8013      	strh	r3, [r2, #0]
     break;
 800243e:	e7df      	b.n	8002400 <CmdDC2+0xac>
    GPIOx->BSRR = GPIO_Pin;
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <CmdDC2+0x118>)
 8002442:	2301      	movs	r3, #1
 8002444:	6193      	str	r3, [r2, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002446:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800244a:	e7f2      	b.n	8002432 <CmdDC2+0xde>
   printf("Please Enter 0 to stop 1 for forward 2 for reverse\n");
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <CmdDC2+0x100>)
 800244e:	f003 fe9d 	bl	800618c <puts>
   break;
 8002452:	e7d5      	b.n	8002400 <CmdDC2+0xac>
 8002454:	08006cb2 	.word	0x08006cb2
 8002458:	08006ce5 	.word	0x08006ce5
 800245c:	20000c8c 	.word	0x20000c8c
 8002460:	08006d19 	.word	0x08006d19
 8002464:	20000a80 	.word	0x20000a80
 8002468:	40010000 	.word	0x40010000
 800246c:	40020000 	.word	0x40020000
 8002470:	20000c84 	.word	0x20000c84
 8002474:	20000a68 	.word	0x20000a68

08002478 <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 8002478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800247c:	4604      	mov	r4, r0
 800247e:	b9f0      	cbnz	r0, 80024be <CmdR+0x46>

  fetch_uint32_arg(&addr);
 8002480:	a801      	add	r0, sp, #4
 8002482:	f7ff ff1d 	bl	80022c0 <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 8002486:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8002488:	4812      	ldr	r0, [pc, #72]	; (80024d4 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 800248a:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 800248c:	4e12      	ldr	r6, [pc, #72]	; (80024d8 <CmdR+0x60>)
 800248e:	4f13      	ldr	r7, [pc, #76]	; (80024dc <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8002490:	462a      	mov	r2, r5
 8002492:	f003 fddf 	bl	8006054 <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 8002496:	4812      	ldr	r0, [pc, #72]	; (80024e0 <CmdR+0x68>)
 8002498:	f003 fddc 	bl	8006054 <iprintf>
    printf("%s%c",
 800249c:	4911      	ldr	r1, [pc, #68]	; (80024e4 <CmdR+0x6c>)
 800249e:	4688      	mov	r8, r1
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	bfb4      	ite	lt
 80024a4:	2231      	movlt	r2, #49	; 0x31
 80024a6:	2230      	movge	r2, #48	; 0x30
 80024a8:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 80024aa:	3401      	adds	r4, #1
    printf("%s%c",
 80024ac:	f003 fdd2 	bl	8006054 <iprintf>
  for(i=0; i<32; i++) {
 80024b0:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 80024b2:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 80024b6:	d106      	bne.n	80024c6 <CmdR+0x4e>
  }
  printf("\n");
 80024b8:	200a      	movs	r0, #10
 80024ba:	f003 fde3 	bl	8006084 <putchar>
  return CmdReturnOk;
}
 80024be:	2000      	movs	r0, #0
 80024c0:	b002      	add	sp, #8
 80024c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 80024c6:	f014 0f03 	tst.w	r4, #3
 80024ca:	bf14      	ite	ne
 80024cc:	4639      	movne	r1, r7
 80024ce:	4641      	moveq	r1, r8
 80024d0:	e7e6      	b.n	80024a0 <CmdR+0x28>
 80024d2:	bf00      	nop
 80024d4:	08006d36 	.word	0x08006d36
 80024d8:	08006df0 	.word	0x08006df0
 80024dc:	080091c8 	.word	0x080091c8
 80024e0:	08006d48 	.word	0x08006d48
 80024e4:	0800916c 	.word	0x0800916c

080024e8 <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 80024e8:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80024ea:	b940      	cbnz	r0, 80024fe <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80024ec:	4668      	mov	r0, sp
 80024ee:	f7ff fee7 	bl	80022c0 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80024f2:	a801      	add	r0, sp, #4
 80024f4:	f7ff fee4 	bl	80022c0 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80024f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80024fc:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 80024fe:	2000      	movs	r0, #0
 8002500:	b003      	add	sp, #12
 8002502:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002508 <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800250c:	2801      	cmp	r0, #1
{
 800250e:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8002510:	d00b      	beq.n	800252a <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 8002512:	2802      	cmp	r0, #2
 8002514:	4f31      	ldr	r7, [pc, #196]	; (80025dc <CmdDump+0xd4>)
 8002516:	4e32      	ldr	r6, [pc, #200]	; (80025e0 <CmdDump+0xd8>)
 8002518:	d10b      	bne.n	8002532 <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 800251a:	4832      	ldr	r0, [pc, #200]	; (80025e4 <CmdDump+0xdc>)
 800251c:	f003 fe36 	bl	800618c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	6831      	ldr	r1, [r6, #0]
 8002524:	4830      	ldr	r0, [pc, #192]	; (80025e8 <CmdDump+0xe0>)
 8002526:	f003 fd95 	bl	8006054 <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 800252a:	2000      	movs	r0, #0
 800252c:	b00b      	add	sp, #44	; 0x2c
 800252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 8002532:	4630      	mov	r0, r6
 8002534:	f7ff fec4 	bl	80022c0 <fetch_uint32_arg>
  if(rc == 0) {
 8002538:	b910      	cbnz	r0, 8002540 <CmdDump+0x38>
    fetch_uint32_arg(&count);
 800253a:	4638      	mov	r0, r7
 800253c:	f7ff fec0 	bl	80022c0 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8002540:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 8002542:	2c00      	cmp	r4, #0
 8002544:	d043      	beq.n	80025ce <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 8002546:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 8002548:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80025f8 <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 800254c:	9301      	str	r3, [sp, #4]
  bufp = buf;
 800254e:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 8002552:	2500      	movs	r5, #0
 8002554:	46c8      	mov	r8, r9
 8002556:	9b01      	ldr	r3, [sp, #4]
 8002558:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 800255a:	f015 030f 	ands.w	r3, r5, #15
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	d13a      	bne.n	80025d8 <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 8002562:	4822      	ldr	r0, [pc, #136]	; (80025ec <CmdDump+0xe4>)
 8002564:	9103      	str	r1, [sp, #12]
 8002566:	f003 fd75 	bl	8006054 <iprintf>
      bufp = buf;
 800256a:	9903      	ldr	r1, [sp, #12]
 800256c:	46c3      	mov	fp, r8
    c = *p++;
 800256e:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <CmdDump+0xe8>)
 8002572:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8002576:	46d9      	mov	r9, fp
      *bufp++ = '.';
 8002578:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 800257c:	4601      	mov	r1, r0
      *bufp++ = '.';
 800257e:	bf08      	it	eq
 8002580:	202e      	moveq	r0, #46	; 0x2e
 8002582:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8002586:	4650      	mov	r0, sl
 8002588:	f003 fd64 	bl	8006054 <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800258c:	9b02      	ldr	r3, [sp, #8]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d106      	bne.n	80025a0 <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 8002592:	2100      	movs	r1, #0
 8002594:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 8002598:	4816      	ldr	r0, [pc, #88]	; (80025f4 <CmdDump+0xec>)
 800259a:	4641      	mov	r1, r8
 800259c:	f003 fd5a 	bl	8006054 <iprintf>
  for(i=0; i<count; i++) {
 80025a0:	3501      	adds	r5, #1
 80025a2:	42ac      	cmp	r4, r5
 80025a4:	d1d7      	bne.n	8002556 <CmdDump+0x4e>
  *bufp='\0';
 80025a6:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 80025a8:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80025ac:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 80025b0:	d00d      	beq.n	80025ce <CmdDump+0xc6>
      printf("   ");
 80025b2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80025fc <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80025b6:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 80025ba:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80025bc:	3501      	adds	r5, #1
      printf("   ");
 80025be:	f003 fd49 	bl	8006054 <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80025c2:	42a5      	cmp	r5, r4
 80025c4:	d3f9      	bcc.n	80025ba <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 80025c6:	480b      	ldr	r0, [pc, #44]	; (80025f4 <CmdDump+0xec>)
 80025c8:	4641      	mov	r1, r8
 80025ca:	f003 fd43 	bl	8006054 <iprintf>
  address = address+count;
 80025ce:	6833      	ldr	r3, [r6, #0]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 80025d6:	e7a8      	b.n	800252a <CmdDump+0x22>
 80025d8:	46cb      	mov	fp, r9
 80025da:	e7c8      	b.n	800256e <CmdDump+0x66>
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20000a44 	.word	0x20000a44
 80025e4:	08006df5 	.word	0x08006df5
 80025e8:	08006f8d 	.word	0x08006f8d
 80025ec:	08006fbf 	.word	0x08006fbf
 80025f0:	08012742 	.word	0x08012742
 80025f4:	08006fcc 	.word	0x08006fcc
 80025f8:	08006fc6 	.word	0x08006fc6
 80025fc:	08006dec 	.word	0x08006dec

08002600 <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 8002600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002602:	4604      	mov	r4, r0
 8002604:	bb50      	cbnz	r0, 800265c <CmdSend+0x5c>

  index = 0;
 8002606:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 8002608:	a803      	add	r0, sp, #12
 800260a:	f7ff fe59 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 800260e:	4602      	mov	r2, r0
 8002610:	b130      	cbz	r0, 8002620 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002612:	4813      	ldr	r0, [pc, #76]	; (8002660 <CmdSend+0x60>)
 8002614:	4621      	mov	r1, r4
 8002616:	f003 fd1d 	bl	8006054 <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 800261a:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 800261c:	b004      	add	sp, #16
 800261e:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002620:	9c03      	ldr	r4, [sp, #12]
 8002622:	b124      	cbz	r4, 800262e <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002624:	4621      	mov	r1, r4
 8002626:	480f      	ldr	r0, [pc, #60]	; (8002664 <CmdSend+0x64>)
 8002628:	f003 fd14 	bl	8006054 <iprintf>
 800262c:	e7f5      	b.n	800261a <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <CmdSend+0x68>)
 8002630:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 8002632:	9101      	str	r1, [sp, #4]
 8002634:	4608      	mov	r0, r1
 8002636:	f7fd fded 	bl	8000214 <strlen>
  if(len==0) {
 800263a:	9901      	ldr	r1, [sp, #4]
 800263c:	4602      	mov	r2, r0
 800263e:	b920      	cbnz	r0, 800264a <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 8002640:	480a      	ldr	r0, [pc, #40]	; (800266c <CmdSend+0x6c>)
 8002642:	f003 fda3 	bl	800618c <puts>
    return CmdReturnBadParameter2;
 8002646:	2005      	movs	r0, #5
 8002648:	e7e8      	b.n	800261c <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff f86c 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <CmdSend+0x70>)
 8002652:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002656:	2202      	movs	r2, #2
 8002658:	f7ff f866 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800265c:	2000      	movs	r0, #0
 800265e:	e7dd      	b.n	800261c <CmdSend+0x1c>
 8002660:	08006fd4 	.word	0x08006fd4
 8002664:	08007002 	.word	0x08007002
 8002668:	20000a5c 	.word	0x20000a5c
 800266c:	08007038 	.word	0x08007038
 8002670:	080075c6 	.word	0x080075c6

08002674 <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 8002674:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002676:	4604      	mov	r4, r0
 8002678:	bb18      	cbnz	r0, 80026c2 <CmdReceive+0x4e>

  index = 0;
 800267a:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 800267c:	a801      	add	r0, sp, #4
 800267e:	f7ff fe1f 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 8002682:	4602      	mov	r2, r0
 8002684:	b130      	cbz	r0, 8002694 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002686:	4810      	ldr	r0, [pc, #64]	; (80026c8 <CmdReceive+0x54>)
 8002688:	4621      	mov	r1, r4
 800268a:	f003 fce3 	bl	8006054 <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 800268e:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 8002690:	b002      	add	sp, #8
 8002692:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002694:	9901      	ldr	r1, [sp, #4]
 8002696:	b119      	cbz	r1, 80026a0 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <CmdReceive+0x58>)
 800269a:	f003 fcdb 	bl	8006054 <iprintf>
 800269e:	e7f6      	b.n	800268e <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 80026a0:	480b      	ldr	r0, [pc, #44]	; (80026d0 <CmdReceive+0x5c>)
 80026a2:	f003 fcd7 	bl	8006054 <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 80026a6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f10d 0103 	add.w	r1, sp, #3
 80026b0:	f7fe fc38 	bl	8000f24 <TerminalRead>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d0eb      	beq.n	8002690 <CmdReceive+0x1c>
    printf("%c",c);
 80026b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80026bc:	f003 fce2 	bl	8006084 <putchar>
 80026c0:	e7f1      	b.n	80026a6 <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80026c2:	2000      	movs	r0, #0
 80026c4:	e7e4      	b.n	8002690 <CmdReceive+0x1c>
 80026c6:	bf00      	nop
 80026c8:	08006fd4 	.word	0x08006fd4
 80026cc:	08007002 	.word	0x08007002
 80026d0:	08007062 	.word	0x08007062

080026d4 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 80026d4:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80026d6:	4604      	mov	r4, r0
 80026d8:	b9b0      	cbnz	r0, 8002708 <CmdTransparent+0x34>

  index = 0;
 80026da:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 80026dc:	a801      	add	r0, sp, #4
 80026de:	f7ff fdef 	bl	80022c0 <fetch_uint32_arg>
  if(rc) {
 80026e2:	4602      	mov	r2, r0
 80026e4:	b130      	cbz	r0, 80026f4 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80026e6:	4809      	ldr	r0, [pc, #36]	; (800270c <CmdTransparent+0x38>)
 80026e8:	4621      	mov	r1, r4
 80026ea:	f003 fcb3 	bl	8006054 <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 80026ee:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 80026f0:	b002      	add	sp, #8
 80026f2:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80026f4:	9901      	ldr	r1, [sp, #4]
 80026f6:	b119      	cbz	r1, 8002700 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <CmdTransparent+0x3c>)
 80026fa:	f003 fcab 	bl	8006054 <iprintf>
    return CmdReturnBadParameter1;
 80026fe:	e7f6      	b.n	80026ee <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <CmdTransparent+0x40>)
 8002702:	f003 fd43 	bl	800618c <puts>
 8002706:	e7f2      	b.n	80026ee <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002708:	2000      	movs	r0, #0
 800270a:	e7f1      	b.n	80026f0 <CmdTransparent+0x1c>
 800270c:	08006fd4 	.word	0x08006fd4
 8002710:	08007002 	.word	0x08007002
 8002714:	0800707d 	.word	0x0800707d

08002718 <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 8002718:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 800271c:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 800271e:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 8002720:	d132      	bne.n	8002788 <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 8002722:	f7ff fcb3 	bl	800208c <fetch_string_arg>
    if(rc) {
 8002726:	b160      	cbz	r0, 8002742 <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002728:	488b      	ldr	r0, [pc, #556]	; (8002958 <CmdDecode+0x240>)
 800272a:	f003 fd2f 	bl	800618c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800272e:	f7ff fc81 	bl	8002034 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 8002732:	488a      	ldr	r0, [pc, #552]	; (800295c <CmdDecode+0x244>)
 8002734:	f003 fd2a 	bl	800618c <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 8002738:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 800273a:	4620      	mov	r0, r4
 800273c:	b004      	add	sp, #16
 800273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8002742:	4d87      	ldr	r5, [pc, #540]	; (8002960 <CmdDecode+0x248>)
 8002744:	e008      	b.n	8002758 <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002746:	9c03      	ldr	r4, [sp, #12]
 8002748:	f7fe fc12 	bl	8000f70 <Uncompress>
 800274c:	4601      	mov	r1, r0
 800274e:	4620      	mov	r0, r4
 8002750:	f003 fd24 	bl	800619c <strcasecmp>
 8002754:	b118      	cbz	r0, 800275e <CmdDecode+0x46>
	p++;
 8002756:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002758:	6828      	ldr	r0, [r5, #0]
 800275a:	2800      	cmp	r0, #0
 800275c:	d1f3      	bne.n	8002746 <CmdDecode+0x2e>
      if(p->name == NULL) {
 800275e:	682c      	ldr	r4, [r5, #0]
 8002760:	b934      	cbnz	r4, 8002770 <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 8002762:	9903      	ldr	r1, [sp, #12]
 8002764:	487f      	ldr	r0, [pc, #508]	; (8002964 <CmdDecode+0x24c>)
 8002766:	f003 fc75 	bl	8006054 <iprintf>
	DecodePrintPeripherals(Peripherals);
 800276a:	f7ff fc63 	bl	8002034 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 800276e:	e7e4      	b.n	800273a <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 8002770:	4620      	mov	r0, r4
 8002772:	f7fe fbfd 	bl	8000f70 <Uncompress>
 8002776:	4601      	mov	r1, r0
 8002778:	487b      	ldr	r0, [pc, #492]	; (8002968 <CmdDecode+0x250>)
 800277a:	f003 fc6b 	bl	8006054 <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 800277e:	89a9      	ldrh	r1, [r5, #12]
 8002780:	68a8      	ldr	r0, [r5, #8]
 8002782:	f7ff fc27 	bl	8001fd4 <DecodePrintRegisters>
    printf("\n\n");
 8002786:	e007      	b.n	8002798 <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 8002788:	f7ff fc80 	bl	800208c <fetch_string_arg>
  if(rc) {
 800278c:	b178      	cbz	r0, 80027ae <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 800278e:	4877      	ldr	r0, [pc, #476]	; (800296c <CmdDecode+0x254>)
 8002790:	f003 fcfc 	bl	800618c <puts>
    DecodePrintPeripherals(Peripherals);
 8002794:	f7ff fc4e 	bl	8002034 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 8002798:	4875      	ldr	r0, [pc, #468]	; (8002970 <CmdDecode+0x258>)
 800279a:	e7cb      	b.n	8002734 <CmdDecode+0x1c>
    p++;
 800279c:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800279e:	6828      	ldr	r0, [r5, #0]
 80027a0:	9c03      	ldr	r4, [sp, #12]
 80027a2:	b930      	cbnz	r0, 80027b2 <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 80027a4:	9903      	ldr	r1, [sp, #12]
 80027a6:	4873      	ldr	r0, [pc, #460]	; (8002974 <CmdDecode+0x25c>)
 80027a8:	f003 fc54 	bl	8006054 <iprintf>
    DecodePrintPeripherals(Peripherals);
 80027ac:	e7f2      	b.n	8002794 <CmdDecode+0x7c>
  p = Peripherals;
 80027ae:	4d6c      	ldr	r5, [pc, #432]	; (8002960 <CmdDecode+0x248>)
 80027b0:	e7f5      	b.n	800279e <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80027b2:	f7fe fbdd 	bl	8000f70 <Uncompress>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4620      	mov	r0, r4
 80027ba:	f003 fcef 	bl	800619c <strcasecmp>
 80027be:	4604      	mov	r4, r0
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d1eb      	bne.n	800279c <CmdDecode+0x84>
  if(p->name == NULL) {
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ec      	beq.n	80027a4 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 80027ca:	a802      	add	r0, sp, #8
 80027cc:	f7ff fc5e 	bl	800208c <fetch_string_arg>
  if(rc) {
 80027d0:	b120      	cbz	r0, 80027dc <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f7ff fbd5 	bl	8001f84 <DecodePeripheral>
    return CmdReturnOk;
 80027da:	e7ae      	b.n	800273a <CmdDecode+0x22>
  r = p->registers;
 80027dc:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 80027de:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 80027e0:	9c02      	ldr	r4, [sp, #8]
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	f000 80a8 	beq.w	8002938 <CmdDecode+0x220>
 80027e8:	6830      	ldr	r0, [r6, #0]
 80027ea:	f7fe fbc1 	bl	8000f70 <Uncompress>
 80027ee:	4601      	mov	r1, r0
 80027f0:	4620      	mov	r0, r4
 80027f2:	f003 fcd3 	bl	800619c <strcasecmp>
 80027f6:	3f01      	subs	r7, #1
 80027f8:	4604      	mov	r4, r0
 80027fa:	b958      	cbnz	r0, 8002814 <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 80027fc:	a801      	add	r0, sp, #4
 80027fe:	f7ff fc45 	bl	800208c <fetch_string_arg>
  if(rc == 0) {
 8002802:	b170      	cbz	r0, 8002822 <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 8002804:	4631      	mov	r1, r6
 8002806:	4628      	mov	r0, r5
 8002808:	f7ff f826 	bl	8001858 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 800280c:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 800280e:	4602      	mov	r2, r0
 8002810:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 8002812:	e017      	b.n	8002844 <CmdDecode+0x12c>
    r++;
 8002814:	3610      	adds	r6, #16
 8002816:	e7e3      	b.n	80027e0 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8002818:	2101      	movs	r1, #1
 800281a:	4628      	mov	r0, r5
 800281c:	f7ff fbb2 	bl	8001f84 <DecodePeripheral>
      return CmdReturnOk;
 8002820:	e78a      	b.n	8002738 <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 8002822:	4955      	ldr	r1, [pc, #340]	; (8002978 <CmdDecode+0x260>)
 8002824:	9801      	ldr	r0, [sp, #4]
 8002826:	f003 fcb9 	bl	800619c <strcasecmp>
 800282a:	b980      	cbnz	r0, 800284e <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 800282c:	4668      	mov	r0, sp
 800282e:	f7ff fd47 	bl	80022c0 <fetch_uint32_arg>
      if(rc) {
 8002832:	4604      	mov	r4, r0
 8002834:	b120      	cbz	r0, 8002840 <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 8002836:	4851      	ldr	r0, [pc, #324]	; (800297c <CmdDecode+0x264>)
 8002838:	f003 fca8 	bl	800618c <puts>
	return CmdReturnBadParameter4;
 800283c:	2407      	movs	r4, #7
 800283e:	e77c      	b.n	800273a <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 8002840:	9a00      	ldr	r2, [sp, #0]
 8002842:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8002844:	6869      	ldr	r1, [r5, #4]
 8002846:	4630      	mov	r0, r6
 8002848:	f7ff fb40 	bl	8001ecc <DecodeRegister>
  return CmdReturnOk;
 800284c:	e775      	b.n	800273a <CmdDecode+0x22>
    f = r->fields;
 800284e:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8002850:	b15f      	cbz	r7, 800286a <CmdDecode+0x152>
	  && (f->name != NULL)
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	b148      	cbz	r0, 800286a <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 8002856:	9c01      	ldr	r4, [sp, #4]
 8002858:	f7fe fb8a 	bl	8000f70 <Uncompress>
 800285c:	4601      	mov	r1, r0
 800285e:	4620      	mov	r0, r4
 8002860:	f003 fc9c 	bl	800619c <strcasecmp>
 8002864:	b998      	cbnz	r0, 800288e <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b99b      	cbnz	r3, 8002892 <CmdDecode+0x17a>
    errno = 0;
 800286a:	f000 fd7d 	bl	8003368 <__errno>
 800286e:	2700      	movs	r7, #0
 8002870:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002872:	463a      	mov	r2, r7
 8002874:	4639      	mov	r1, r7
 8002876:	9801      	ldr	r0, [sp, #4]
 8002878:	f001 fba6 	bl	8003fc8 <strtoul>
 800287c:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 800287e:	f000 fd73 	bl	8003368 <__errno>
 8002882:	6804      	ldr	r4, [r0, #0]
 8002884:	2c00      	cmp	r4, #0
 8002886:	d042      	beq.n	800290e <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 8002888:	9901      	ldr	r1, [sp, #4]
 800288a:	483d      	ldr	r0, [pc, #244]	; (8002980 <CmdDecode+0x268>)
 800288c:	e00b      	b.n	80028a6 <CmdDecode+0x18e>
      f++;
 800288e:	3708      	adds	r7, #8
 8002890:	e7de      	b.n	8002850 <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 8002892:	4668      	mov	r0, sp
 8002894:	f7ff fd14 	bl	80022c0 <fetch_uint32_arg>
      if(rc) {
 8002898:	4604      	mov	r4, r0
 800289a:	b138      	cbz	r0, 80028ac <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 800289c:	6830      	ldr	r0, [r6, #0]
 800289e:	f7fe fb67 	bl	8000f70 <Uncompress>
 80028a2:	4601      	mov	r1, r0
 80028a4:	4837      	ldr	r0, [pc, #220]	; (8002984 <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 80028a6:	f003 fbd5 	bl	8006054 <iprintf>
      return CmdReturnOk;
 80028aa:	e745      	b.n	8002738 <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 80028ac:	4631      	mov	r1, r6
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7fe ffd2 	bl	8001858 <DecodeReadRegister>
      m = (1<<f->width)-1;
 80028b4:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 80028b6:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	4093      	lsls	r3, r2
 80028bc:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 80028be:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 80028c2:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 80028c6:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 80028ca:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 80028cc:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 80028d0:	4003      	ands	r3, r0
 80028d2:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 80028d4:	431a      	orrs	r2, r3
 80028d6:	4631      	mov	r1, r6
 80028d8:	4628      	mov	r0, r5
 80028da:	f7fe fff7 	bl	80018cc <DecodeWriteRegister.isra.0>
      printf("%s.",
 80028de:	6828      	ldr	r0, [r5, #0]
 80028e0:	f7fe fb46 	bl	8000f70 <Uncompress>
 80028e4:	4601      	mov	r1, r0
 80028e6:	4828      	ldr	r0, [pc, #160]	; (8002988 <CmdDecode+0x270>)
 80028e8:	f003 fbb4 	bl	8006054 <iprintf>
      printf("%s.",
 80028ec:	6830      	ldr	r0, [r6, #0]
 80028ee:	f7fe fb3f 	bl	8000f70 <Uncompress>
 80028f2:	4601      	mov	r1, r0
 80028f4:	4824      	ldr	r0, [pc, #144]	; (8002988 <CmdDecode+0x270>)
 80028f6:	f003 fbad 	bl	8006054 <iprintf>
      printf("%s (%d) -> (%d)\n",
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f7fe fb38 	bl	8000f70 <Uncompress>
 8002900:	9b00      	ldr	r3, [sp, #0]
 8002902:	4601      	mov	r1, r0
 8002904:	4642      	mov	r2, r8
 8002906:	4821      	ldr	r0, [pc, #132]	; (800298c <CmdDecode+0x274>)
 8002908:	f003 fba4 	bl	8006054 <iprintf>
      return CmdReturnOk;
 800290c:	e715      	b.n	800273a <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 800290e:	9a00      	ldr	r2, [sp, #0]
 8002910:	4631      	mov	r1, r6
 8002912:	4628      	mov	r0, r5
 8002914:	f7fe ffda 	bl	80018cc <DecodeWriteRegister.isra.0>
    printf("%s.",
 8002918:	6828      	ldr	r0, [r5, #0]
 800291a:	f7fe fb29 	bl	8000f70 <Uncompress>
 800291e:	4601      	mov	r1, r0
 8002920:	4819      	ldr	r0, [pc, #100]	; (8002988 <CmdDecode+0x270>)
 8002922:	f003 fb97 	bl	8006054 <iprintf>
    printf("%s = 0x%08x\n",
 8002926:	6830      	ldr	r0, [r6, #0]
 8002928:	f7fe fb22 	bl	8000f70 <Uncompress>
 800292c:	9a00      	ldr	r2, [sp, #0]
 800292e:	4601      	mov	r1, r0
 8002930:	4817      	ldr	r0, [pc, #92]	; (8002990 <CmdDecode+0x278>)
 8002932:	f003 fb8f 	bl	8006054 <iprintf>
    return CmdReturnOk;
 8002936:	e700      	b.n	800273a <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 8002938:	4916      	ldr	r1, [pc, #88]	; (8002994 <CmdDecode+0x27c>)
 800293a:	4620      	mov	r0, r4
 800293c:	f003 fc2e 	bl	800619c <strcasecmp>
 8002940:	2800      	cmp	r0, #0
 8002942:	f43f af69 	beq.w	8002818 <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002946:	6828      	ldr	r0, [r5, #0]
 8002948:	f7fe fb12 	bl	8000f70 <Uncompress>
 800294c:	4621      	mov	r1, r4
 800294e:	4602      	mov	r2, r0
 8002950:	4811      	ldr	r0, [pc, #68]	; (8002998 <CmdDecode+0x280>)
 8002952:	f003 fb7f 	bl	8006054 <iprintf>
 8002956:	e712      	b.n	800277e <CmdDecode+0x66>
 8002958:	080070a2 	.word	0x080070a2
 800295c:	080072b5 	.word	0x080072b5
 8002960:	0800f100 	.word	0x0800f100
 8002964:	0800730a 	.word	0x0800730a
 8002968:	08007345 	.word	0x08007345
 800296c:	0800736a 	.word	0x0800736a
 8002970:	080073d3 	.word	0x080073d3
 8002974:	08007399 	.word	0x08007399
 8002978:	08007412 	.word	0x08007412
 800297c:	08007416 	.word	0x08007416
 8002980:	08007475 	.word	0x08007475
 8002984:	08007435 	.word	0x08007435
 8002988:	08007460 	.word	0x08007460
 800298c:	08007464 	.word	0x08007464
 8002990:	08007493 	.word	0x08007493
 8002994:	080074a0 	.word	0x080074a0
 8002998:	080073d5 	.word	0x080073d5

0800299c <PolledPrintf>:
{
 800299c:	b40f      	push	{r0, r1, r2, r3}
 800299e:	b500      	push	{lr}
 80029a0:	b097      	sub	sp, #92	; 0x5c
 80029a2:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 80029a4:	2150      	movs	r1, #80	; 0x50
{
 80029a6:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 80029aa:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 80029ac:	a802      	add	r0, sp, #8
 80029ae:	f003 fc43 	bl	8006238 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <PolledPrintf+0x38>)
  while(len) {
 80029b4:	ab02      	add	r3, sp, #8
 80029b6:	b928      	cbnz	r0, 80029c4 <PolledPrintf+0x28>
}
 80029b8:	b017      	add	sp, #92	; 0x5c
 80029ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80029be:	b004      	add	sp, #16
 80029c0:	4770      	bx	lr
      asm volatile ("nop");
 80029c2:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 80029c4:	6811      	ldr	r1, [r2, #0]
 80029c6:	0609      	lsls	r1, r1, #24
 80029c8:	d5fb      	bpl.n	80029c2 <PolledPrintf+0x26>
    uart->DR = *p;
 80029ca:	f813 1b01 	ldrb.w	r1, [r3], #1
 80029ce:	6051      	str	r1, [r2, #4]
    len--;
 80029d0:	3801      	subs	r0, #1
 80029d2:	e7f0      	b.n	80029b6 <PolledPrintf+0x1a>
 80029d4:	40004400 	.word	0x40004400

080029d8 <CmdStats>:
{
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80029dc:	4601      	mov	r1, r0
{
 80029de:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80029e0:	bb10      	cbnz	r0, 8002a28 <CmdStats+0x50>
 80029e2:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 80029e4:	4812      	ldr	r0, [pc, #72]	; (8002a30 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80029e6:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 80029e8:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 80029ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80029ee:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 80029f2:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 80029fc:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 80029fe:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002a02:	f000 fcdb 	bl	80033bc <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a06:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 8002a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <CmdStats+0x5c>)
 8002a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a0e:	480a      	ldr	r0, [pc, #40]	; (8002a38 <CmdStats+0x60>)
 8002a10:	9400      	str	r4, [sp, #0]
 8002a12:	e9cd b307 	strd	fp, r3, [sp, #28]
 8002a16:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8002a1a:	e9cd 7803 	strd	r7, r8, [sp, #12]
 8002a1e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <CmdStats+0x64>)
 8002a24:	f003 fb16 	bl	8006054 <iprintf>
}
 8002a28:	2000      	movs	r0, #0
 8002a2a:	b00d      	add	sp, #52	; 0x34
 8002a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a30:	20000210 	.word	0x20000210
 8002a34:	080074ad 	.word	0x080074ad
 8002a38:	080074b5 	.word	0x080074b5
 8002a3c:	080074a5 	.word	0x080074a5

08002a40 <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8002a40:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <USR_LED_Toggle+0x10>)
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000020c 	.word	0x2000020c

08002a54 <TIM1_TRG_COM_TIM11_IRQHandler>:
   HAL_TIM_IRQHandler(&htim11);
 8002a54:	4801      	ldr	r0, [pc, #4]	; (8002a5c <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8002a56:	f7fe bb91 	b.w	800117c <HAL_TIM_IRQHandler>
 8002a5a:	bf00      	nop
 8002a5c:	20000ac8 	.word	0x20000ac8

08002a60 <TIM3_IRQHandler>:
  HAL_TIM_IRQHandler(&htim3);
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <TIM3_IRQHandler+0x8>)
 8002a62:	f7fe bb8b 	b.w	800117c <HAL_TIM_IRQHandler>
 8002a66:	bf00      	nop
 8002a68:	20000b58 	.word	0x20000b58

08002a6c <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8002a6c:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <_sbrk_r+0x28>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	b90a      	cbnz	r2, 8002a78 <_sbrk_r+0xc>
    heap_end = &end;
 8002a74:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <_sbrk_r+0x2c>)
 8002a76:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8002a78:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 8002a7a:	466a      	mov	r2, sp
 8002a7c:	4401      	add	r1, r0
 8002a7e:	4291      	cmp	r1, r2
 8002a80:	d906      	bls.n	8002a90 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8002a82:	f000 fc71 	bl	8003368 <__errno>
 8002a86:	230c      	movs	r3, #12
 8002a88:	6003      	str	r3, [r0, #0]
 8002a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8002a8e:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8002a90:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8002a92:	e7fc      	b.n	8002a8e <_sbrk_r+0x22>
 8002a94:	20000a70 	.word	0x20000a70
 8002a98:	20000ca8 	.word	0x20000ca8

08002a9c <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	4770      	bx	lr

08002aa0 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8002aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa4:	6053      	str	r3, [r2, #4]
   return 0;
}
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	4770      	bx	lr

08002aaa <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002aaa:	2001      	movs	r0, #1
 8002aac:	4770      	bx	lr

08002aae <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4770      	bx	lr

08002ab2 <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8002ab2:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7fe ba34 	b.w	8000f24 <TerminalRead>

08002abc <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8002abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002ac0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002af8 <_write_r+0x3c>
{
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8002aca:	42bc      	cmp	r4, r7
 8002acc:	4626      	mov	r6, r4
 8002ace:	d102      	bne.n	8002ad6 <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8002ad6:	7833      	ldrb	r3, [r6, #0]
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	f104 0401 	add.w	r4, r4, #1
 8002ade:	d104      	bne.n	8002aea <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe fe1f 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8002aea:	2201      	movs	r2, #1
 8002aec:	4631      	mov	r1, r6
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe fe1a 	bl	8001728 <TerminalOutputBufferWrite.isra.0>
    count--;
 8002af4:	e7e9      	b.n	8002aca <_write_r+0xe>
 8002af6:	bf00      	nop
 8002af8:	08007bdb 	.word	0x08007bdb

08002afc <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b00:	4770      	bx	lr

08002b02 <_exit>:

void _exit(int status)
{
  while(1) {}
 8002b02:	e7fe      	b.n	8002b02 <_exit>

08002b04 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8002b04:	2000      	movs	r0, #0
 8002b06:	4770      	bx	lr

08002b08 <USART2_IRQHandler>:
  isr = uart->SR;
 8002b08:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <USART2_IRQHandler+0xe0>)
 8002b0a:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002b0c:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8002b0e:	b510      	push	{r4, lr}
 8002b10:	d50d      	bpl.n	8002b2e <USART2_IRQHandler+0x26>
    c = uart->DR;
 8002b12:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8002b14:	4b35      	ldr	r3, [pc, #212]	; (8002bec <USART2_IRQHandler+0xe4>)
 8002b16:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002b1a:	b292      	uxth	r2, r2
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002b22:	d339      	bcc.n	8002b98 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 8002b24:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002b28:	3201      	adds	r2, #1
 8002b2a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 8002b2e:	060a      	lsls	r2, r1, #24
 8002b30:	d50a      	bpl.n	8002b48 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <USART2_IRQHandler+0xe4>)
 8002b34:	482c      	ldr	r0, [pc, #176]	; (8002be8 <USART2_IRQHandler+0xe0>)
 8002b36:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d140      	bne.n	8002bc2 <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8002b40:	68c3      	ldr	r3, [r0, #12]
 8002b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b46:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 8002b48:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8002b4a:	bf41      	itttt	mi
 8002b4c:	4a26      	ldrmi	r2, [pc, #152]	; (8002be8 <USART2_IRQHandler+0xe0>)
 8002b4e:	68d3      	ldrmi	r3, [r2, #12]
 8002b50:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8002b54:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 8002b56:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 8002b58:	bf41      	itttt	mi
 8002b5a:	4a24      	ldrmi	r2, [pc, #144]	; (8002bec <USART2_IRQHandler+0xe4>)
 8002b5c:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 8002b60:	3301      	addmi	r3, #1
 8002b62:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8002b66:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 8002b68:	bf41      	itttt	mi
 8002b6a:	4a20      	ldrmi	r2, [pc, #128]	; (8002bec <USART2_IRQHandler+0xe4>)
 8002b6c:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 8002b70:	3301      	addmi	r3, #1
 8002b72:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8002b76:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 8002b78:	bf41      	itttt	mi
 8002b7a:	4a1c      	ldrmi	r2, [pc, #112]	; (8002bec <USART2_IRQHandler+0xe4>)
 8002b7c:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 8002b80:	3301      	addmi	r3, #1
 8002b82:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8002b86:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 8002b88:	bf41      	itttt	mi
 8002b8a:	4a18      	ldrmi	r2, [pc, #96]	; (8002bec <USART2_IRQHandler+0xe4>)
 8002b8c:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 8002b90:	3301      	addmi	r3, #1
 8002b92:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 8002b96:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8002b98:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 8002b9c:	3201      	adds	r2, #1
 8002b9e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 8002ba2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002ba6:	b292      	uxth	r2, r2
    c = uart->DR;
 8002ba8:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002baa:	3201      	adds	r2, #1
 8002bac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002bb0:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 8002bb4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002bb8:	3201      	adds	r2, #1
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002bc0:	e7b5      	b.n	8002b2e <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 8002bc2:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8002bc6:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 8002bca:	3201      	adds	r2, #1
      uart->DR = c;
 8002bcc:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 8002bd0:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 8002bd2:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 8002bd6:	3801      	subs	r0, #1
 8002bd8:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 8002bda:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8002bde:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8002be2:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8002be6:	e7af      	b.n	8002b48 <USART2_IRQHandler+0x40>
 8002be8:	40004400 	.word	0x40004400
 8002bec:	20000210 	.word	0x20000210

08002bf0 <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 8002bf0:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002bf4:	490d      	ldr	r1, [pc, #52]	; (8002c2c <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 8002bf6:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002bf8:	480d      	ldr	r0, [pc, #52]	; (8002c30 <Default_IRQHandler+0x40>)
 8002bfa:	f7ff fecf 	bl	800299c <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8002bfe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8002c02:	480c      	ldr	r0, [pc, #48]	; (8002c34 <Default_IRQHandler+0x44>)
 8002c04:	f7ff feca 	bl	800299c <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <Default_IRQHandler+0x48>)
 8002c0a:	f1a4 0110 	sub.w	r1, r4, #16
 8002c0e:	f7ff fec5 	bl	800299c <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <Default_IRQHandler+0x4c>)
 8002c14:	480a      	ldr	r0, [pc, #40]	; (8002c40 <Default_IRQHandler+0x50>)
 8002c16:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002c1a:	f7ff febf 	bl	800299c <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8002c1e:	4809      	ldr	r0, [pc, #36]	; (8002c44 <Default_IRQHandler+0x54>)
 8002c20:	f7ff febc 	bl	800299c <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8002c24:	e7fe      	b.n	8002c24 <Default_IRQHandler+0x34>
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	0801272e 	.word	0x0801272e
 8002c30:	08007592 	.word	0x08007592
 8002c34:	080075c9 	.word	0x080075c9
 8002c38:	08007605 	.word	0x08007605
 8002c3c:	0800cfc4 	.word	0x0800cfc4
 8002c40:	0800762e 	.word	0x0800762e
 8002c44:	08007649 	.word	0x08007649

08002c48 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4a:	4c6a      	ldr	r4, [pc, #424]	; (8002df4 <main+0x1ac>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8002c52:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002c56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4f67      	ldr	r7, [pc, #412]	; (8002df8 <main+0x1b0>)
 8002c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c60:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002c6c:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 8002c72:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8002c74:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8002c76:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	b093      	sub	sp, #76	; 0x4c
 8002c7c:	f7fe fd2c 	bl	80016d8 <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c80:	4b5f      	ldr	r3, [pc, #380]	; (8002e00 <main+0x1b8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	920a      	str	r2, [sp, #40]	; 0x28
 8002c86:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c88:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002c8c:	6459      	str	r1, [r3, #68]	; 0x44
 8002c8e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c90:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002c94:	910a      	str	r1, [sp, #40]	; 0x28
 8002c96:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	9209      	str	r2, [sp, #36]	; 0x24
 8002c9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c9c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002ca0:	6419      	str	r1, [r3, #64]	; 0x40
 8002ca2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ca4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002ca8:	9109      	str	r1, [sp, #36]	; 0x24
 8002caa:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002cae:	4955      	ldr	r1, [pc, #340]	; (8002e04 <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb0:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 8002cb2:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 8002cb4:	60e1      	str	r1, [r4, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	9208      	str	r2, [sp, #32]
 8002cb8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002cbe:	6419      	str	r1, [r3, #64]	; 0x40
 8002cc0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cc2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002cc6:	9108      	str	r1, [sp, #32]
 8002cc8:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	9207      	str	r2, [sp, #28]
 8002ccc:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <main+0x1c0>)
 8002cce:	6811      	ldr	r1, [r2, #0]
 8002cd0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002cd4:	6011      	str	r1, [r2, #0]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002cdc:	9207      	str	r2, [sp, #28]
 8002cde:	9a07      	ldr	r2, [sp, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	f002 020c 	and.w	r2, r2, #12
 8002ce6:	2a04      	cmp	r2, #4
 8002ce8:	d007      	beq.n	8002cfa <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf0:	2a08      	cmp	r2, #8
 8002cf2:	d13c      	bne.n	8002d6e <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	0254      	lsls	r4, r2, #9
 8002cf8:	d539      	bpl.n	8002d6e <main+0x126>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <main+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <main+0x1c4>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d06:	6839      	ldr	r1, [r7, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d08:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <main+0x1b8>)
 8002d0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002d0c:	0792      	lsls	r2, r2, #30
 8002d0e:	d541      	bpl.n	8002d94 <main+0x14c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	f002 020c 	and.w	r2, r2, #12
 8002d16:	2a08      	cmp	r2, #8
 8002d18:	d04b      	beq.n	8002db2 <main+0x16a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <main+0x1c4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
 8002d20:	6839      	ldr	r1, [r7, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4a37      	ldr	r2, [pc, #220]	; (8002e00 <main+0x1b8>)
 8002d24:	6813      	ldr	r3, [r2, #0]
 8002d26:	019e      	lsls	r6, r3, #6
 8002d28:	d439      	bmi.n	8002d9e <main+0x156>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <main+0x1c8>)
 8002d2c:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <main+0x1c4>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	661a      	str	r2, [r3, #96]	; 0x60
 8002d34:	6839      	ldr	r1, [r7, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <main+0x1b8>)
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	019d      	lsls	r5, r3, #6
 8002d3c:	d534      	bpl.n	8002da8 <main+0x160>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <main+0x1a8>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f002 0207 	and.w	r2, r2, #7
 8002d46:	2a02      	cmp	r2, #2
 8002d48:	d949      	bls.n	8002dde <main+0x196>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4a:	492d      	ldr	r1, [pc, #180]	; (8002e00 <main+0x1b8>)
 8002d4c:	688b      	ldr	r3, [r1, #8]
 8002d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d52:	608b      	str	r3, [r1, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	688b      	ldr	r3, [r1, #8]
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5a:	608b      	str	r3, [r1, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	688b      	ldr	r3, [r1, #8]
 8002d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d62:	608b      	str	r3, [r1, #8]
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	680b      	ldr	r3, [r1, #0]
 8002d66:	0198      	lsls	r0, r3, #6
 8002d68:	d454      	bmi.n	8002e14 <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6a:	b672      	cpsid	i
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <main+0x1b8>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	0398      	lsls	r0, r3, #14
 8002d86:	d4ba      	bmi.n	8002cfe <main+0xb6>
 8002d88:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8a:	1a5b      	subs	r3, r3, r1
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d9f8      	bls.n	8002d82 <main+0x13a>
 8002d90:	b672      	cpsid	i
 8002d92:	e7fe      	b.n	8002d92 <main+0x14a>
 8002d94:	683a      	ldr	r2, [r7, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	1a52      	subs	r2, r2, r1
 8002d98:	2a02      	cmp	r2, #2
 8002d9a:	d9b6      	bls.n	8002d0a <main+0xc2>
 8002d9c:	e7f8      	b.n	8002d90 <main+0x148>
 8002d9e:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	1a5b      	subs	r3, r3, r1
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d9be      	bls.n	8002d24 <main+0xdc>
 8002da6:	e7f3      	b.n	8002d90 <main+0x148>
 8002da8:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002daa:	1a5b      	subs	r3, r3, r1
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d9c3      	bls.n	8002d38 <main+0xf0>
 8002db0:	e7ee      	b.n	8002d90 <main+0x148>
        pll_config = RCC->PLLCFGR;
 8002db2:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db4:	025c      	lsls	r4, r3, #9
 8002db6:	d5eb      	bpl.n	8002d90 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbc:	2a04      	cmp	r2, #4
 8002dbe:	d1e7      	bne.n	8002d90 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002dc4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc6:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 8002dca:	d1e1      	bne.n	8002d90 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dcc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002dd0:	d1de      	bne.n	8002d90 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dda:	d1d9      	bne.n	8002d90 <main+0x148>
 8002ddc:	e7af      	b.n	8002d3e <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	2203      	movs	r2, #3
 8002de0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d1be      	bne.n	8002d6a <main+0x122>
 8002dec:	e7ad      	b.n	8002d4a <main+0x102>
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00
 8002df4:	e000ed00 	.word	0xe000ed00
 8002df8:	20000c90 	.word	0x20000c90
 8002dfc:	05fa0300 	.word	0x05fa0300
 8002e00:	40023800 	.word	0x40023800
 8002e04:	05fa0700 	.word	0x05fa0700
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	04401904 	.word	0x04401904
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e14:	688b      	ldr	r3, [r1, #8]
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	608b      	str	r3, [r1, #8]
 8002e20:	683a      	ldr	r2, [r7, #0]
    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e22:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	688b      	ldr	r3, [r1, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	f040 81c9 	bne.w	80031c4 <main+0x57c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e32:	4bb5      	ldr	r3, [pc, #724]	; (8003108 <main+0x4c0>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	0752      	lsls	r2, r2, #29
 8002e38:	f100 81ca 	bmi.w	80031d0 <main+0x588>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	688b      	ldr	r3, [r1, #8]
 8002e3e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e46:	608b      	str	r3, [r1, #8]

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e48:	688b      	ldr	r3, [r1, #8]
 8002e4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e4e:	608b      	str	r3, [r1, #8]
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e50:	688b      	ldr	r3, [r1, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	f000 81de 	beq.w	8003218 <main+0x5d0>
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	f000 81c0 	beq.w	80031e2 <main+0x59a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e62:	4daa      	ldr	r5, [pc, #680]	; (800310c <main+0x4c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e64:	4eaa      	ldr	r6, [pc, #680]	; (8003110 <main+0x4c8>)
 8002e66:	4aab      	ldr	r2, [pc, #684]	; (8003114 <main+0x4cc>)
 8002e68:	68b3      	ldr	r3, [r6, #8]
 8002e6a:	4cab      	ldr	r4, [pc, #684]	; (8003118 <main+0x4d0>)
  huart2.Init.BaudRate = 115200;
 8002e6c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8003148 <main+0x500>
 8002e70:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f04f 0800 	mov.w	r8, #0
 8002e78:	5cd0      	ldrb	r0, [r2, r3]
 8002e7a:	4ba8      	ldr	r3, [pc, #672]	; (800311c <main+0x4d4>)
 8002e7c:	40c5      	lsrs	r5, r0
 8002e7e:	601d      	str	r5, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e80:	4ba7      	ldr	r3, [pc, #668]	; (8003120 <main+0x4d8>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	f7fe fc28 	bl	80016d8 <HAL_InitTick.isra.0>
 8002e88:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8c:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e94:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e96:	48a3      	ldr	r0, [pc, #652]	; (8003124 <main+0x4dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6333      	str	r3, [r6, #48]	; 0x30
 8002e9e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	9306      	str	r3, [sp, #24]
 8002ea6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ea8:	f8cd 8014 	str.w	r8, [sp, #20]
 8002eac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb2:	6333      	str	r3, [r6, #48]	; 0x30
 8002eb4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	9305      	str	r3, [sp, #20]
 8002ebc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	f8cd 8010 	str.w	r8, [sp, #16]
 8002ec2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6333      	str	r3, [r6, #48]	; 0x30
 8002eca:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	9304      	str	r3, [sp, #16]
 8002ed2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ed8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	6333      	str	r3, [r6, #48]	; 0x30
 8002ee0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eee:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ef0:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8002ef4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002efa:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f7fe f875 	bl	8000fec <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f08:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 8002f0a:	4c87      	ldr	r4, [pc, #540]	; (8003128 <main+0x4e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0c:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f7fe f86a 	bl	8000fec <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002f18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f1c:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f20:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f24:	f8c4 8010 	str.w	r8, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f28:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f2a:	e9c4 8802 	strd	r8, r8, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	e9c4 2805 	strd	r2, r8, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f32:	f8c4 801c 	str.w	r8, [r4, #28]
 8002f36:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002f3a:	bb4b      	cbnz	r3, 8002f90 <main+0x348>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f40:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f48:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	6433      	str	r3, [r6, #64]	; 0x40
 8002f50:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	930c      	str	r3, [sp, #48]	; 0x30
 8002f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002f5e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6333      	str	r3, [r6, #48]	; 0x30
 8002f66:	6b33      	ldr	r3, [r6, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f68:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f76:	2603      	movs	r6, #3
 8002f78:	2307      	movs	r3, #7
 8002f7a:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f7fe f835 	bl	8000fec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f82:	4641      	mov	r1, r8
 8002f84:	2026      	movs	r0, #38	; 0x26
 8002f86:	f7fe fb35 	bl	80015f4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	4b68      	ldr	r3, [pc, #416]	; (800312c <main+0x4e4>)
 8002f8c:	2240      	movs	r2, #64	; 0x40
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f90:	6826      	ldr	r6, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f92:	68e2      	ldr	r2, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f94:	2324      	movs	r3, #36	; 0x24
 8002f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002f9a:	68f3      	ldr	r3, [r6, #12]
 8002f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa0:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa2:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	6133      	str	r3, [r6, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fae:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fb0:	68f1      	ldr	r1, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fb2:	69e2      	ldr	r2, [r4, #28]
 8002fb4:	4303      	orrs	r3, r0
 8002fb6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002fb8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fbc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002fbe:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fc2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fc8:	6973      	ldr	r3, [r6, #20]
 8002fca:	69a1      	ldr	r1, [r4, #24]
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6173      	str	r3, [r6, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd4:	4b56      	ldr	r3, [pc, #344]	; (8003130 <main+0x4e8>)
 8002fd6:	4957      	ldr	r1, [pc, #348]	; (8003134 <main+0x4ec>)
 8002fd8:	429e      	cmp	r6, r3
 8002fda:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	d003      	beq.n	8002fea <main+0x3a2>
 8002fe2:	4855      	ldr	r0, [pc, #340]	; (8003138 <main+0x4f0>)
 8002fe4:	4286      	cmp	r6, r0
 8002fe6:	f040 8119 	bne.w	800321c <main+0x5d4>
 8002fea:	f3c3 3342 	ubfx	r3, r3, #13, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fee:	5cc9      	ldrb	r1, [r1, r3]
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ff0:	6863      	ldr	r3, [r4, #4]
 8002ff2:	40cd      	lsrs	r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ff8:	f04f 0119 	mov.w	r1, #25
 8002ffc:	fba5 0101 	umull	r0, r1, r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003000:	f040 810f 	bne.w	8003222 <main+0x5da>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003004:	18da      	adds	r2, r3, r3
 8003006:	f04f 0500 	mov.w	r5, #0
 800300a:	eb45 0305 	adc.w	r3, r5, r5
 800300e:	f7fd fdf3 	bl	8000bf8 <__aeabi_uldivmod>
 8003012:	2164      	movs	r1, #100	; 0x64
 8003014:	fbb0 f5f1 	udiv	r5, r0, r1
 8003018:	fb01 0315 	mls	r3, r1, r5, r0
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	fbb3 f3f1 	udiv	r3, r3, r1
 8003024:	f003 0207 	and.w	r2, r3, #7
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800302e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003032:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003034:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003036:	6933      	ldr	r3, [r6, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003038:	4a40      	ldr	r2, [pc, #256]	; (800313c <main+0x4f4>)
 800303a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800303e:	6133      	str	r3, [r6, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003040:	6973      	ldr	r3, [r6, #20]
 8003042:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003046:	6173      	str	r3, [r6, #20]
  __HAL_UART_ENABLE(huart);
 8003048:	68f3      	ldr	r3, [r6, #12]
 800304a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800304e:	60f3      	str	r3, [r6, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	2300      	movs	r3, #0
 8003052:	6423      	str	r3, [r4, #64]	; 0x40
  hiwdg.Instance = IWDG;
 8003054:	4e3a      	ldr	r6, [pc, #232]	; (8003140 <main+0x4f8>)
  huart->gState = HAL_UART_STATE_READY;
 8003056:	2320      	movs	r3, #32
 8003058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800305c:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 800305e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003062:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 8003066:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800306a:	e9c6 2100 	strd	r2, r1, [r6]
  hiwdg.Init.Reload = 4095;
 800306e:	60b3      	str	r3, [r6, #8]
 8003070:	6010      	str	r0, [r2, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003072:	f245 5055 	movw	r0, #21845	; 0x5555
 8003076:	6010      	str	r0, [r2, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003078:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	6839      	ldr	r1, [r7, #0]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800307e:	68d3      	ldr	r3, [r2, #12]
 8003080:	f013 0303 	ands.w	r3, r3, #3
 8003084:	f040 80dd 	bne.w	8003242 <main+0x5fa>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003088:	4c2e      	ldr	r4, [pc, #184]	; (8003144 <main+0x4fc>)
 800308a:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800308c:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8003090:	6011      	str	r1, [r2, #0]
 8003092:	6840      	ldr	r0, [r0, #4]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	4619      	mov	r1, r3
 8003098:	2202      	movs	r2, #2
 800309a:	f000 fe01 	bl	8003ca0 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	9b01      	ldr	r3, [sp, #4]
 80030a2:	6880      	ldr	r0, [r0, #8]
 80030a4:	4619      	mov	r1, r3
 80030a6:	2202      	movs	r2, #2
 80030a8:	f000 fdfa 	bl	8003ca0 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	9b01      	ldr	r3, [sp, #4]
 80030b0:	68c0      	ldr	r0, [r0, #12]
 80030b2:	2202      	movs	r2, #2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f000 fdf3 	bl	8003ca0 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <main+0x500>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80030c2:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 80030cc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80030d0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 80030d2:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 80030d6:	d052      	beq.n	800317e <main+0x536>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 80030d8:	481c      	ldr	r0, [pc, #112]	; (800314c <main+0x504>)
 80030da:	f003 f857 	bl	800618c <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 80030de:	2c00      	cmp	r4, #0
 80030e0:	da02      	bge.n	80030e8 <main+0x4a0>
 80030e2:	481b      	ldr	r0, [pc, #108]	; (8003150 <main+0x508>)
 80030e4:	f003 f852 	bl	800618c <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 80030e8:	0067      	lsls	r7, r4, #1
 80030ea:	d502      	bpl.n	80030f2 <main+0x4aa>
 80030ec:	4819      	ldr	r0, [pc, #100]	; (8003154 <main+0x50c>)
 80030ee:	f003 f84d 	bl	800618c <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 80030f2:	00a5      	lsls	r5, r4, #2
 80030f4:	d502      	bpl.n	80030fc <main+0x4b4>
 80030f6:	4818      	ldr	r0, [pc, #96]	; (8003158 <main+0x510>)
 80030f8:	f003 f848 	bl	800618c <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 80030fc:	00e0      	lsls	r0, r4, #3
 80030fe:	d52f      	bpl.n	8003160 <main+0x518>
 8003100:	4816      	ldr	r0, [pc, #88]	; (800315c <main+0x514>)
 8003102:	f003 f843 	bl	800618c <puts>
 8003106:	e02b      	b.n	8003160 <main+0x518>
 8003108:	40023c00 	.word	0x40023c00
 800310c:	00f42400 	.word	0x00f42400
 8003110:	40023800 	.word	0x40023800
 8003114:	0800a51c 	.word	0x0800a51c
 8003118:	40020000 	.word	0x40020000
 800311c:	20000004 	.word	0x20000004
 8003120:	20000014 	.word	0x20000014
 8003124:	40020800 	.word	0x40020800
 8003128:	20000ba0 	.word	0x20000ba0
 800312c:	e000e100 	.word	0xe000e100
 8003130:	40011000 	.word	0x40011000
 8003134:	0800a52c 	.word	0x0800a52c
 8003138:	40011400 	.word	0x40011400
 800313c:	40003000 	.word	0x40003000
 8003140:	20000a74 	.word	0x20000a74
 8003144:	20000018 	.word	0x20000018
 8003148:	40004400 	.word	0x40004400
 800314c:	08007673 	.word	0x08007673
 8003150:	080076ab 	.word	0x080076ab
 8003154:	080076b6 	.word	0x080076b6
 8003158:	080076c9 	.word	0x080076c9
 800315c:	080076e8 	.word	0x080076e8
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8003160:	01a1      	lsls	r1, r4, #6
 8003162:	d502      	bpl.n	800316a <main+0x522>
 8003164:	484f      	ldr	r0, [pc, #316]	; (80032a4 <main+0x65c>)
 8003166:	f003 f811 	bl	800618c <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 800316a:	0162      	lsls	r2, r4, #5
 800316c:	d502      	bpl.n	8003174 <main+0x52c>
 800316e:	484e      	ldr	r0, [pc, #312]	; (80032a8 <main+0x660>)
 8003170:	f003 f80c 	bl	800618c <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8003174:	0123      	lsls	r3, r4, #4
 8003176:	d502      	bpl.n	800317e <main+0x536>
 8003178:	484c      	ldr	r0, [pc, #304]	; (80032ac <main+0x664>)
 800317a:	f003 f807 	bl	800618c <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 800317e:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <main+0x668>)
 8003180:	4d4c      	ldr	r5, [pc, #304]	; (80032b4 <main+0x66c>)
  p = _tasktable_start;
 8003182:	4c4d      	ldr	r4, [pc, #308]	; (80032b8 <main+0x670>)
  while(p != _tasktable_end) {
 8003184:	4f4d      	ldr	r7, [pc, #308]	; (80032bc <main+0x674>)
 8003186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800318a:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 800318c:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 8003190:	42bc      	cmp	r4, r7
 8003192:	d161      	bne.n	8003258 <main+0x610>
  my_Init();
 8003194:	f7fd f83a 	bl	800020c <my_Init>
  ticks = AccumTicks;
 8003198:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80032c8 <main+0x680>
  AccumTicks = 0;
 800319c:	f04f 0a00 	mov.w	sl, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031a0:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 80031a4:	b672      	cpsid	i
  ticks = AccumTicks;
 80031a6:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 80031aa:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 80031ae:	b662      	cpsie	i
  s = _taskstate_start;
 80031b0:	4d40      	ldr	r5, [pc, #256]	; (80032b4 <main+0x66c>)
  p = _tasktable_start;
 80031b2:	4c41      	ldr	r4, [pc, #260]	; (80032b8 <main+0x670>)
  while(p != _tasktable_end) {
 80031b4:	42bc      	cmp	r4, r7
 80031b6:	d157      	bne.n	8003268 <main+0x620>
  my_Loop();
 80031b8:	f7fd f826 	bl	8000208 <my_Loop>
 80031bc:	6833      	ldr	r3, [r6, #0]
 80031be:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 80031c2:	e7ef      	b.n	80031a4 <main+0x55c>
 80031c4:	683b      	ldr	r3, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	4283      	cmp	r3, r0
 80031ca:	f67f ae2c 	bls.w	8002e26 <main+0x1de>
 80031ce:	e5cc      	b.n	8002d6a <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d0:	2203      	movs	r2, #3
 80031d2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	4293      	cmp	r3, r2
 80031dc:	f47f adc5 	bne.w	8002d6a <main+0x122>
 80031e0:	e62c      	b.n	8002e3c <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ec:	bf14      	ite	ne
 80031ee:	4834      	ldrne	r0, [pc, #208]	; (80032c0 <main+0x678>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f0:	4834      	ldreq	r0, [pc, #208]	; (80032c4 <main+0x67c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80031f6:	bf18      	it	ne
 80031f8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	fba1 0100 	umull	r0, r1, r1, r0
 8003202:	f7fd fcf9 	bl	8000bf8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <main+0x668>)
 8003208:	685d      	ldr	r5, [r3, #4]
 800320a:	f3c5 4501 	ubfx	r5, r5, #16, #2
 800320e:	3501      	adds	r5, #1
 8003210:	006d      	lsls	r5, r5, #1
      sysclockfreq = pllvco/pllp;
 8003212:	fbb0 f5f5 	udiv	r5, r0, r5
  return sysclockfreq;
 8003216:	e625      	b.n	8002e64 <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003218:	4d29      	ldr	r5, [pc, #164]	; (80032c0 <main+0x678>)
 800321a:	e623      	b.n	8002e64 <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800321c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003220:	e6e5      	b.n	8002fee <main+0x3a6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003222:	009a      	lsls	r2, r3, #2
 8003224:	0f9b      	lsrs	r3, r3, #30
 8003226:	f7fd fce7 	bl	8000bf8 <__aeabi_uldivmod>
 800322a:	2264      	movs	r2, #100	; 0x64
 800322c:	fbb0 f1f2 	udiv	r1, r0, r2
 8003230:	fb02 0311 	mls	r3, r2, r1, r0
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	fbb3 f3f2 	udiv	r3, r3, r2
 800323c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003240:	e6f8      	b.n	8003034 <main+0x3ec>
 8003242:	683b      	ldr	r3, [r7, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003244:	1a5b      	subs	r3, r3, r1
 8003246:	2b31      	cmp	r3, #49	; 0x31
 8003248:	f67f af19 	bls.w	800307e <main+0x436>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800324c:	68d3      	ldr	r3, [r2, #12]
 800324e:	079b      	lsls	r3, r3, #30
 8003250:	f43f af15 	beq.w	800307e <main+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
  while (1)
 8003256:	e7fe      	b.n	8003256 <main+0x60e>
    if(p->initFunc != NULL) {
 8003258:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 800325a:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 800325e:	b10b      	cbz	r3, 8003264 <main+0x61c>
      p->initFunc(p->data);
 8003260:	68e0      	ldr	r0, [r4, #12]
 8003262:	4798      	blx	r3
    p++;
 8003264:	3418      	adds	r4, #24
    s++;
 8003266:	e793      	b.n	8003190 <main+0x548>
    if(p->func != NULL) {
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	b11b      	cbz	r3, 8003274 <main+0x62c>
      if(p->interval == 0) {
 800326c:	6922      	ldr	r2, [r4, #16]
 800326e:	b9b2      	cbnz	r2, 800329e <main+0x656>
	p->func(p->data);
 8003270:	68e0      	ldr	r0, [r4, #12]
 8003272:	4798      	blx	r3
    p++;
 8003274:	3418      	adds	r4, #24
    s++;
 8003276:	3504      	adds	r5, #4
 8003278:	e79c      	b.n	80031b4 <main+0x56c>
	  if(s->interval) {
 800327a:	682b      	ldr	r3, [r5, #0]
 800327c:	b953      	cbnz	r3, 8003294 <main+0x64c>
	    p->func(p->data);
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	68e0      	ldr	r0, [r4, #12]
 8003282:	9201      	str	r2, [sp, #4]
 8003284:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	9a01      	ldr	r2, [sp, #4]
 800328a:	602b      	str	r3, [r5, #0]
 800328c:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 800328e:	2a00      	cmp	r2, #0
 8003290:	d1f3      	bne.n	800327a <main+0x632>
 8003292:	e7ef      	b.n	8003274 <main+0x62c>
	    s->interval--;
 8003294:	3b01      	subs	r3, #1
 8003296:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f7      	bne.n	800328c <main+0x644>
 800329c:	e7ef      	b.n	800327e <main+0x636>
 800329e:	465a      	mov	r2, fp
 80032a0:	e7f5      	b.n	800328e <main+0x646>
 80032a2:	bf00      	nop
 80032a4:	080076f2 	.word	0x080076f2
 80032a8:	080076fc 	.word	0x080076fc
 80032ac:	08007706 	.word	0x08007706
 80032b0:	40023800 	.word	0x40023800
 80032b4:	200001e8 	.word	0x200001e8
 80032b8:	08012be0 	.word	0x08012be0
 80032bc:	08012bf8 	.word	0x08012bf8
 80032c0:	007a1200 	.word	0x007a1200
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	20000208 	.word	0x20000208

080032cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <NMI_Handler>

080032ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler>

080032d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <MemManage_Handler>

080032d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <BusFault_Handler>

080032d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler>

080032d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032d6:	4770      	bx	lr

080032d8 <DebugMon_Handler>:
 80032d8:	4770      	bx	lr

080032da <PendSV_Handler>:
 80032da:	4770      	bx	lr

080032dc <SysTick_Handler>:
  uwTick += uwTickFreq;
 80032dc:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032de:	b508      	push	{r3, lr}
 80032e0:	6813      	ldr	r3, [r2, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 80032e6:	f7fc ff85 	bl	80001f4 <my_Tick>
  AccumTicks++;
 80032ea:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <SysTick_Handler+0x1c>)
 80032ec:	6813      	ldr	r3, [r2, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80032f2:	bd08      	pop	{r3, pc}
 80032f4:	20000c90 	.word	0x20000c90
 80032f8:	20000208 	.word	0x20000208

080032fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032fc:	4a03      	ldr	r2, [pc, #12]	; (800330c <SystemInit+0x10>)
 80032fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003306:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003316:	490e      	ldr	r1, [pc, #56]	; (8003350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800331c:	e002      	b.n	8003324 <LoopCopyDataInit>

0800331e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003322:	3304      	adds	r3, #4

08003324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003328:	d3f9      	bcc.n	800331e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800332c:	4c0b      	ldr	r4, [pc, #44]	; (800335c <LoopFillZerobss+0x26>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003330:	e001      	b.n	8003336 <LoopFillZerobss>

08003332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003334:	3204      	adds	r2, #4

08003336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003338:	d3fb      	bcc.n	8003332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800333a:	f7ff ffdf 	bl	80032fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800333e:	f000 f819 	bl	8003374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003342:	f7ff fc81 	bl	8002c48 <main>
  bx  lr    
 8003346:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003350:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003354:	08012cd4 	.word	0x08012cd4
  ldr r2, =_sbss
 8003358:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800335c:	20000ca4 	.word	0x20000ca4

08003360 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 8003360:	f7ff fc46 	bl	8002bf0 <Default_IRQHandler>
  b  Infinite_Loop
 8003364:	e7fc      	b.n	8003360 <ADC_IRQHandler>
	...

08003368 <__errno>:
 8003368:	4b01      	ldr	r3, [pc, #4]	; (8003370 <__errno+0x8>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000018 	.word	0x20000018

08003374 <__libc_init_array>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4d0d      	ldr	r5, [pc, #52]	; (80033ac <__libc_init_array+0x38>)
 8003378:	4c0d      	ldr	r4, [pc, #52]	; (80033b0 <__libc_init_array+0x3c>)
 800337a:	1b64      	subs	r4, r4, r5
 800337c:	10a4      	asrs	r4, r4, #2
 800337e:	2600      	movs	r6, #0
 8003380:	42a6      	cmp	r6, r4
 8003382:	d109      	bne.n	8003398 <__libc_init_array+0x24>
 8003384:	4d0b      	ldr	r5, [pc, #44]	; (80033b4 <__libc_init_array+0x40>)
 8003386:	4c0c      	ldr	r4, [pc, #48]	; (80033b8 <__libc_init_array+0x44>)
 8003388:	f003 f908 	bl	800659c <_init>
 800338c:	1b64      	subs	r4, r4, r5
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	2600      	movs	r6, #0
 8003392:	42a6      	cmp	r6, r4
 8003394:	d105      	bne.n	80033a2 <__libc_init_array+0x2e>
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	f855 3b04 	ldr.w	r3, [r5], #4
 800339c:	4798      	blx	r3
 800339e:	3601      	adds	r6, #1
 80033a0:	e7ee      	b.n	8003380 <__libc_init_array+0xc>
 80033a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a6:	4798      	blx	r3
 80033a8:	3601      	adds	r6, #1
 80033aa:	e7f2      	b.n	8003392 <__libc_init_array+0x1e>
 80033ac:	08012ccc 	.word	0x08012ccc
 80033b0:	08012ccc 	.word	0x08012ccc
 80033b4:	08012ccc 	.word	0x08012ccc
 80033b8:	08012cd0 	.word	0x08012cd0

080033bc <memset>:
 80033bc:	4402      	add	r2, r0
 80033be:	4603      	mov	r3, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <__cvt>:
 80033cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	ec55 4b10 	vmov	r4, r5, d0
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	460e      	mov	r6, r1
 80033d8:	4619      	mov	r1, r3
 80033da:	462b      	mov	r3, r5
 80033dc:	bfbb      	ittet	lt
 80033de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80033e2:	461d      	movlt	r5, r3
 80033e4:	2300      	movge	r3, #0
 80033e6:	232d      	movlt	r3, #45	; 0x2d
 80033e8:	700b      	strb	r3, [r1, #0]
 80033ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80033f0:	4691      	mov	r9, r2
 80033f2:	f023 0820 	bic.w	r8, r3, #32
 80033f6:	bfbc      	itt	lt
 80033f8:	4622      	movlt	r2, r4
 80033fa:	4614      	movlt	r4, r2
 80033fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003400:	d005      	beq.n	800340e <__cvt+0x42>
 8003402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003406:	d100      	bne.n	800340a <__cvt+0x3e>
 8003408:	3601      	adds	r6, #1
 800340a:	2102      	movs	r1, #2
 800340c:	e000      	b.n	8003410 <__cvt+0x44>
 800340e:	2103      	movs	r1, #3
 8003410:	ab03      	add	r3, sp, #12
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	ab02      	add	r3, sp, #8
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	ec45 4b10 	vmov	d0, r4, r5
 800341c:	4653      	mov	r3, sl
 800341e:	4632      	mov	r2, r6
 8003420:	f000 fe86 	bl	8004130 <_dtoa_r>
 8003424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003428:	4607      	mov	r7, r0
 800342a:	d102      	bne.n	8003432 <__cvt+0x66>
 800342c:	f019 0f01 	tst.w	r9, #1
 8003430:	d022      	beq.n	8003478 <__cvt+0xac>
 8003432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003436:	eb07 0906 	add.w	r9, r7, r6
 800343a:	d110      	bne.n	800345e <__cvt+0x92>
 800343c:	783b      	ldrb	r3, [r7, #0]
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d10a      	bne.n	8003458 <__cvt+0x8c>
 8003442:	2200      	movs	r2, #0
 8003444:	2300      	movs	r3, #0
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f7fd fb65 	bl	8000b18 <__aeabi_dcmpeq>
 800344e:	b918      	cbnz	r0, 8003458 <__cvt+0x8c>
 8003450:	f1c6 0601 	rsb	r6, r6, #1
 8003454:	f8ca 6000 	str.w	r6, [sl]
 8003458:	f8da 3000 	ldr.w	r3, [sl]
 800345c:	4499      	add	r9, r3
 800345e:	2200      	movs	r2, #0
 8003460:	2300      	movs	r3, #0
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd fb57 	bl	8000b18 <__aeabi_dcmpeq>
 800346a:	b108      	cbz	r0, 8003470 <__cvt+0xa4>
 800346c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003470:	2230      	movs	r2, #48	; 0x30
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	454b      	cmp	r3, r9
 8003476:	d307      	bcc.n	8003488 <__cvt+0xbc>
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347c:	1bdb      	subs	r3, r3, r7
 800347e:	4638      	mov	r0, r7
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	b004      	add	sp, #16
 8003484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	9103      	str	r1, [sp, #12]
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e7f0      	b.n	8003472 <__cvt+0xa6>

08003490 <__exponent>:
 8003490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003492:	4603      	mov	r3, r0
 8003494:	2900      	cmp	r1, #0
 8003496:	bfb8      	it	lt
 8003498:	4249      	neglt	r1, r1
 800349a:	f803 2b02 	strb.w	r2, [r3], #2
 800349e:	bfb4      	ite	lt
 80034a0:	222d      	movlt	r2, #45	; 0x2d
 80034a2:	222b      	movge	r2, #43	; 0x2b
 80034a4:	2909      	cmp	r1, #9
 80034a6:	7042      	strb	r2, [r0, #1]
 80034a8:	dd2a      	ble.n	8003500 <__exponent+0x70>
 80034aa:	f10d 0407 	add.w	r4, sp, #7
 80034ae:	46a4      	mov	ip, r4
 80034b0:	270a      	movs	r7, #10
 80034b2:	46a6      	mov	lr, r4
 80034b4:	460a      	mov	r2, r1
 80034b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80034ba:	fb07 1516 	mls	r5, r7, r6, r1
 80034be:	3530      	adds	r5, #48	; 0x30
 80034c0:	2a63      	cmp	r2, #99	; 0x63
 80034c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80034c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80034ca:	4631      	mov	r1, r6
 80034cc:	dcf1      	bgt.n	80034b2 <__exponent+0x22>
 80034ce:	3130      	adds	r1, #48	; 0x30
 80034d0:	f1ae 0502 	sub.w	r5, lr, #2
 80034d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80034d8:	1c44      	adds	r4, r0, #1
 80034da:	4629      	mov	r1, r5
 80034dc:	4561      	cmp	r1, ip
 80034de:	d30a      	bcc.n	80034f6 <__exponent+0x66>
 80034e0:	f10d 0209 	add.w	r2, sp, #9
 80034e4:	eba2 020e 	sub.w	r2, r2, lr
 80034e8:	4565      	cmp	r5, ip
 80034ea:	bf88      	it	hi
 80034ec:	2200      	movhi	r2, #0
 80034ee:	4413      	add	r3, r2
 80034f0:	1a18      	subs	r0, r3, r0
 80034f2:	b003      	add	sp, #12
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80034fe:	e7ed      	b.n	80034dc <__exponent+0x4c>
 8003500:	2330      	movs	r3, #48	; 0x30
 8003502:	3130      	adds	r1, #48	; 0x30
 8003504:	7083      	strb	r3, [r0, #2]
 8003506:	70c1      	strb	r1, [r0, #3]
 8003508:	1d03      	adds	r3, r0, #4
 800350a:	e7f1      	b.n	80034f0 <__exponent+0x60>

0800350c <_printf_float>:
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	ed2d 8b02 	vpush	{d8}
 8003514:	b08d      	sub	sp, #52	; 0x34
 8003516:	460c      	mov	r4, r1
 8003518:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800351c:	4616      	mov	r6, r2
 800351e:	461f      	mov	r7, r3
 8003520:	4605      	mov	r5, r0
 8003522:	f001 fdbd 	bl	80050a0 <_localeconv_r>
 8003526:	f8d0 a000 	ldr.w	sl, [r0]
 800352a:	4650      	mov	r0, sl
 800352c:	f7fc fe72 	bl	8000214 <strlen>
 8003530:	2300      	movs	r3, #0
 8003532:	930a      	str	r3, [sp, #40]	; 0x28
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	9305      	str	r3, [sp, #20]
 8003538:	f8d8 3000 	ldr.w	r3, [r8]
 800353c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003540:	3307      	adds	r3, #7
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	f103 0208 	add.w	r2, r3, #8
 800354a:	f8c8 2000 	str.w	r2, [r8]
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003556:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800355a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800355e:	9307      	str	r3, [sp, #28]
 8003560:	f8cd 8018 	str.w	r8, [sp, #24]
 8003564:	ee08 0a10 	vmov	s16, r0
 8003568:	4b9f      	ldr	r3, [pc, #636]	; (80037e8 <_printf_float+0x2dc>)
 800356a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800356e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003572:	f7fd fb03 	bl	8000b7c <__aeabi_dcmpun>
 8003576:	bb88      	cbnz	r0, 80035dc <_printf_float+0xd0>
 8003578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800357c:	4b9a      	ldr	r3, [pc, #616]	; (80037e8 <_printf_float+0x2dc>)
 800357e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003582:	f7fd fadd 	bl	8000b40 <__aeabi_dcmple>
 8003586:	bb48      	cbnz	r0, 80035dc <_printf_float+0xd0>
 8003588:	2200      	movs	r2, #0
 800358a:	2300      	movs	r3, #0
 800358c:	4640      	mov	r0, r8
 800358e:	4649      	mov	r1, r9
 8003590:	f7fd facc 	bl	8000b2c <__aeabi_dcmplt>
 8003594:	b110      	cbz	r0, 800359c <_printf_float+0x90>
 8003596:	232d      	movs	r3, #45	; 0x2d
 8003598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800359c:	4b93      	ldr	r3, [pc, #588]	; (80037ec <_printf_float+0x2e0>)
 800359e:	4894      	ldr	r0, [pc, #592]	; (80037f0 <_printf_float+0x2e4>)
 80035a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80035a4:	bf94      	ite	ls
 80035a6:	4698      	movls	r8, r3
 80035a8:	4680      	movhi	r8, r0
 80035aa:	2303      	movs	r3, #3
 80035ac:	6123      	str	r3, [r4, #16]
 80035ae:	9b05      	ldr	r3, [sp, #20]
 80035b0:	f023 0204 	bic.w	r2, r3, #4
 80035b4:	6022      	str	r2, [r4, #0]
 80035b6:	f04f 0900 	mov.w	r9, #0
 80035ba:	9700      	str	r7, [sp, #0]
 80035bc:	4633      	mov	r3, r6
 80035be:	aa0b      	add	r2, sp, #44	; 0x2c
 80035c0:	4621      	mov	r1, r4
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 f9d8 	bl	8003978 <_printf_common>
 80035c8:	3001      	adds	r0, #1
 80035ca:	f040 8090 	bne.w	80036ee <_printf_float+0x1e2>
 80035ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d2:	b00d      	add	sp, #52	; 0x34
 80035d4:	ecbd 8b02 	vpop	{d8}
 80035d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fd faca 	bl	8000b7c <__aeabi_dcmpun>
 80035e8:	b140      	cbz	r0, 80035fc <_printf_float+0xf0>
 80035ea:	464b      	mov	r3, r9
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bfbc      	itt	lt
 80035f0:	232d      	movlt	r3, #45	; 0x2d
 80035f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80035f6:	487f      	ldr	r0, [pc, #508]	; (80037f4 <_printf_float+0x2e8>)
 80035f8:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <_printf_float+0x2ec>)
 80035fa:	e7d1      	b.n	80035a0 <_printf_float+0x94>
 80035fc:	6863      	ldr	r3, [r4, #4]
 80035fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003602:	9206      	str	r2, [sp, #24]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	d13f      	bne.n	8003688 <_printf_float+0x17c>
 8003608:	2306      	movs	r3, #6
 800360a:	6063      	str	r3, [r4, #4]
 800360c:	9b05      	ldr	r3, [sp, #20]
 800360e:	6861      	ldr	r1, [r4, #4]
 8003610:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003614:	2300      	movs	r3, #0
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	ab0a      	add	r3, sp, #40	; 0x28
 800361a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800361e:	ab09      	add	r3, sp, #36	; 0x24
 8003620:	ec49 8b10 	vmov	d0, r8, r9
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	6022      	str	r2, [r4, #0]
 8003628:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800362c:	4628      	mov	r0, r5
 800362e:	f7ff fecd 	bl	80033cc <__cvt>
 8003632:	9b06      	ldr	r3, [sp, #24]
 8003634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003636:	2b47      	cmp	r3, #71	; 0x47
 8003638:	4680      	mov	r8, r0
 800363a:	d108      	bne.n	800364e <_printf_float+0x142>
 800363c:	1cc8      	adds	r0, r1, #3
 800363e:	db02      	blt.n	8003646 <_printf_float+0x13a>
 8003640:	6863      	ldr	r3, [r4, #4]
 8003642:	4299      	cmp	r1, r3
 8003644:	dd41      	ble.n	80036ca <_printf_float+0x1be>
 8003646:	f1ab 0b02 	sub.w	fp, fp, #2
 800364a:	fa5f fb8b 	uxtb.w	fp, fp
 800364e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003652:	d820      	bhi.n	8003696 <_printf_float+0x18a>
 8003654:	3901      	subs	r1, #1
 8003656:	465a      	mov	r2, fp
 8003658:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800365c:	9109      	str	r1, [sp, #36]	; 0x24
 800365e:	f7ff ff17 	bl	8003490 <__exponent>
 8003662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003664:	1813      	adds	r3, r2, r0
 8003666:	2a01      	cmp	r2, #1
 8003668:	4681      	mov	r9, r0
 800366a:	6123      	str	r3, [r4, #16]
 800366c:	dc02      	bgt.n	8003674 <_printf_float+0x168>
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	07d2      	lsls	r2, r2, #31
 8003672:	d501      	bpl.n	8003678 <_printf_float+0x16c>
 8003674:	3301      	adds	r3, #1
 8003676:	6123      	str	r3, [r4, #16]
 8003678:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800367c:	2b00      	cmp	r3, #0
 800367e:	d09c      	beq.n	80035ba <_printf_float+0xae>
 8003680:	232d      	movs	r3, #45	; 0x2d
 8003682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003686:	e798      	b.n	80035ba <_printf_float+0xae>
 8003688:	9a06      	ldr	r2, [sp, #24]
 800368a:	2a47      	cmp	r2, #71	; 0x47
 800368c:	d1be      	bne.n	800360c <_printf_float+0x100>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1bc      	bne.n	800360c <_printf_float+0x100>
 8003692:	2301      	movs	r3, #1
 8003694:	e7b9      	b.n	800360a <_printf_float+0xfe>
 8003696:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800369a:	d118      	bne.n	80036ce <_printf_float+0x1c2>
 800369c:	2900      	cmp	r1, #0
 800369e:	6863      	ldr	r3, [r4, #4]
 80036a0:	dd0b      	ble.n	80036ba <_printf_float+0x1ae>
 80036a2:	6121      	str	r1, [r4, #16]
 80036a4:	b913      	cbnz	r3, 80036ac <_printf_float+0x1a0>
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	07d0      	lsls	r0, r2, #31
 80036aa:	d502      	bpl.n	80036b2 <_printf_float+0x1a6>
 80036ac:	3301      	adds	r3, #1
 80036ae:	440b      	add	r3, r1
 80036b0:	6123      	str	r3, [r4, #16]
 80036b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80036b4:	f04f 0900 	mov.w	r9, #0
 80036b8:	e7de      	b.n	8003678 <_printf_float+0x16c>
 80036ba:	b913      	cbnz	r3, 80036c2 <_printf_float+0x1b6>
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	07d2      	lsls	r2, r2, #31
 80036c0:	d501      	bpl.n	80036c6 <_printf_float+0x1ba>
 80036c2:	3302      	adds	r3, #2
 80036c4:	e7f4      	b.n	80036b0 <_printf_float+0x1a4>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e7f2      	b.n	80036b0 <_printf_float+0x1a4>
 80036ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80036ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d0:	4299      	cmp	r1, r3
 80036d2:	db05      	blt.n	80036e0 <_printf_float+0x1d4>
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	6121      	str	r1, [r4, #16]
 80036d8:	07d8      	lsls	r0, r3, #31
 80036da:	d5ea      	bpl.n	80036b2 <_printf_float+0x1a6>
 80036dc:	1c4b      	adds	r3, r1, #1
 80036de:	e7e7      	b.n	80036b0 <_printf_float+0x1a4>
 80036e0:	2900      	cmp	r1, #0
 80036e2:	bfd4      	ite	le
 80036e4:	f1c1 0202 	rsble	r2, r1, #2
 80036e8:	2201      	movgt	r2, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	e7e0      	b.n	80036b0 <_printf_float+0x1a4>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	055a      	lsls	r2, r3, #21
 80036f2:	d407      	bmi.n	8003704 <_printf_float+0x1f8>
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	4642      	mov	r2, r8
 80036f8:	4631      	mov	r1, r6
 80036fa:	4628      	mov	r0, r5
 80036fc:	47b8      	blx	r7
 80036fe:	3001      	adds	r0, #1
 8003700:	d12c      	bne.n	800375c <_printf_float+0x250>
 8003702:	e764      	b.n	80035ce <_printf_float+0xc2>
 8003704:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003708:	f240 80e0 	bls.w	80038cc <_printf_float+0x3c0>
 800370c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003710:	2200      	movs	r2, #0
 8003712:	2300      	movs	r3, #0
 8003714:	f7fd fa00 	bl	8000b18 <__aeabi_dcmpeq>
 8003718:	2800      	cmp	r0, #0
 800371a:	d034      	beq.n	8003786 <_printf_float+0x27a>
 800371c:	4a37      	ldr	r2, [pc, #220]	; (80037fc <_printf_float+0x2f0>)
 800371e:	2301      	movs	r3, #1
 8003720:	4631      	mov	r1, r6
 8003722:	4628      	mov	r0, r5
 8003724:	47b8      	blx	r7
 8003726:	3001      	adds	r0, #1
 8003728:	f43f af51 	beq.w	80035ce <_printf_float+0xc2>
 800372c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003730:	429a      	cmp	r2, r3
 8003732:	db02      	blt.n	800373a <_printf_float+0x22e>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	07d8      	lsls	r0, r3, #31
 8003738:	d510      	bpl.n	800375c <_printf_float+0x250>
 800373a:	ee18 3a10 	vmov	r3, s16
 800373e:	4652      	mov	r2, sl
 8003740:	4631      	mov	r1, r6
 8003742:	4628      	mov	r0, r5
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	f43f af41 	beq.w	80035ce <_printf_float+0xc2>
 800374c:	f04f 0800 	mov.w	r8, #0
 8003750:	f104 091a 	add.w	r9, r4, #26
 8003754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	4543      	cmp	r3, r8
 800375a:	dc09      	bgt.n	8003770 <_printf_float+0x264>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	079b      	lsls	r3, r3, #30
 8003760:	f100 8105 	bmi.w	800396e <_printf_float+0x462>
 8003764:	68e0      	ldr	r0, [r4, #12]
 8003766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003768:	4298      	cmp	r0, r3
 800376a:	bfb8      	it	lt
 800376c:	4618      	movlt	r0, r3
 800376e:	e730      	b.n	80035d2 <_printf_float+0xc6>
 8003770:	2301      	movs	r3, #1
 8003772:	464a      	mov	r2, r9
 8003774:	4631      	mov	r1, r6
 8003776:	4628      	mov	r0, r5
 8003778:	47b8      	blx	r7
 800377a:	3001      	adds	r0, #1
 800377c:	f43f af27 	beq.w	80035ce <_printf_float+0xc2>
 8003780:	f108 0801 	add.w	r8, r8, #1
 8003784:	e7e6      	b.n	8003754 <_printf_float+0x248>
 8003786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	dc39      	bgt.n	8003800 <_printf_float+0x2f4>
 800378c:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <_printf_float+0x2f0>)
 800378e:	2301      	movs	r3, #1
 8003790:	4631      	mov	r1, r6
 8003792:	4628      	mov	r0, r5
 8003794:	47b8      	blx	r7
 8003796:	3001      	adds	r0, #1
 8003798:	f43f af19 	beq.w	80035ce <_printf_float+0xc2>
 800379c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037a0:	4313      	orrs	r3, r2
 80037a2:	d102      	bne.n	80037aa <_printf_float+0x29e>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	07d9      	lsls	r1, r3, #31
 80037a8:	d5d8      	bpl.n	800375c <_printf_float+0x250>
 80037aa:	ee18 3a10 	vmov	r3, s16
 80037ae:	4652      	mov	r2, sl
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	f43f af09 	beq.w	80035ce <_printf_float+0xc2>
 80037bc:	f04f 0900 	mov.w	r9, #0
 80037c0:	f104 0a1a 	add.w	sl, r4, #26
 80037c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c6:	425b      	negs	r3, r3
 80037c8:	454b      	cmp	r3, r9
 80037ca:	dc01      	bgt.n	80037d0 <_printf_float+0x2c4>
 80037cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ce:	e792      	b.n	80036f6 <_printf_float+0x1ea>
 80037d0:	2301      	movs	r3, #1
 80037d2:	4652      	mov	r2, sl
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	f43f aef7 	beq.w	80035ce <_printf_float+0xc2>
 80037e0:	f109 0901 	add.w	r9, r9, #1
 80037e4:	e7ee      	b.n	80037c4 <_printf_float+0x2b8>
 80037e6:	bf00      	nop
 80037e8:	7fefffff 	.word	0x7fefffff
 80037ec:	08012848 	.word	0x08012848
 80037f0:	0801284c 	.word	0x0801284c
 80037f4:	08012854 	.word	0x08012854
 80037f8:	08012850 	.word	0x08012850
 80037fc:	0800895f 	.word	0x0800895f
 8003800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003804:	429a      	cmp	r2, r3
 8003806:	bfa8      	it	ge
 8003808:	461a      	movge	r2, r3
 800380a:	2a00      	cmp	r2, #0
 800380c:	4691      	mov	r9, r2
 800380e:	dc37      	bgt.n	8003880 <_printf_float+0x374>
 8003810:	f04f 0b00 	mov.w	fp, #0
 8003814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003818:	f104 021a 	add.w	r2, r4, #26
 800381c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800381e:	9305      	str	r3, [sp, #20]
 8003820:	eba3 0309 	sub.w	r3, r3, r9
 8003824:	455b      	cmp	r3, fp
 8003826:	dc33      	bgt.n	8003890 <_printf_float+0x384>
 8003828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800382c:	429a      	cmp	r2, r3
 800382e:	db3b      	blt.n	80038a8 <_printf_float+0x39c>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	07da      	lsls	r2, r3, #31
 8003834:	d438      	bmi.n	80038a8 <_printf_float+0x39c>
 8003836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003838:	9a05      	ldr	r2, [sp, #20]
 800383a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800383c:	1a9a      	subs	r2, r3, r2
 800383e:	eba3 0901 	sub.w	r9, r3, r1
 8003842:	4591      	cmp	r9, r2
 8003844:	bfa8      	it	ge
 8003846:	4691      	movge	r9, r2
 8003848:	f1b9 0f00 	cmp.w	r9, #0
 800384c:	dc35      	bgt.n	80038ba <_printf_float+0x3ae>
 800384e:	f04f 0800 	mov.w	r8, #0
 8003852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003856:	f104 0a1a 	add.w	sl, r4, #26
 800385a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	eba3 0309 	sub.w	r3, r3, r9
 8003864:	4543      	cmp	r3, r8
 8003866:	f77f af79 	ble.w	800375c <_printf_float+0x250>
 800386a:	2301      	movs	r3, #1
 800386c:	4652      	mov	r2, sl
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f aeaa 	beq.w	80035ce <_printf_float+0xc2>
 800387a:	f108 0801 	add.w	r8, r8, #1
 800387e:	e7ec      	b.n	800385a <_printf_float+0x34e>
 8003880:	4613      	mov	r3, r2
 8003882:	4631      	mov	r1, r6
 8003884:	4642      	mov	r2, r8
 8003886:	4628      	mov	r0, r5
 8003888:	47b8      	blx	r7
 800388a:	3001      	adds	r0, #1
 800388c:	d1c0      	bne.n	8003810 <_printf_float+0x304>
 800388e:	e69e      	b.n	80035ce <_printf_float+0xc2>
 8003890:	2301      	movs	r3, #1
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	9205      	str	r2, [sp, #20]
 8003898:	47b8      	blx	r7
 800389a:	3001      	adds	r0, #1
 800389c:	f43f ae97 	beq.w	80035ce <_printf_float+0xc2>
 80038a0:	9a05      	ldr	r2, [sp, #20]
 80038a2:	f10b 0b01 	add.w	fp, fp, #1
 80038a6:	e7b9      	b.n	800381c <_printf_float+0x310>
 80038a8:	ee18 3a10 	vmov	r3, s16
 80038ac:	4652      	mov	r2, sl
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d1be      	bne.n	8003836 <_printf_float+0x32a>
 80038b8:	e689      	b.n	80035ce <_printf_float+0xc2>
 80038ba:	9a05      	ldr	r2, [sp, #20]
 80038bc:	464b      	mov	r3, r9
 80038be:	4442      	add	r2, r8
 80038c0:	4631      	mov	r1, r6
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	d1c1      	bne.n	800384e <_printf_float+0x342>
 80038ca:	e680      	b.n	80035ce <_printf_float+0xc2>
 80038cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038ce:	2a01      	cmp	r2, #1
 80038d0:	dc01      	bgt.n	80038d6 <_printf_float+0x3ca>
 80038d2:	07db      	lsls	r3, r3, #31
 80038d4:	d538      	bpl.n	8003948 <_printf_float+0x43c>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4642      	mov	r2, r8
 80038da:	4631      	mov	r1, r6
 80038dc:	4628      	mov	r0, r5
 80038de:	47b8      	blx	r7
 80038e0:	3001      	adds	r0, #1
 80038e2:	f43f ae74 	beq.w	80035ce <_printf_float+0xc2>
 80038e6:	ee18 3a10 	vmov	r3, s16
 80038ea:	4652      	mov	r2, sl
 80038ec:	4631      	mov	r1, r6
 80038ee:	4628      	mov	r0, r5
 80038f0:	47b8      	blx	r7
 80038f2:	3001      	adds	r0, #1
 80038f4:	f43f ae6b 	beq.w	80035ce <_printf_float+0xc2>
 80038f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038fc:	2200      	movs	r2, #0
 80038fe:	2300      	movs	r3, #0
 8003900:	f7fd f90a 	bl	8000b18 <__aeabi_dcmpeq>
 8003904:	b9d8      	cbnz	r0, 800393e <_printf_float+0x432>
 8003906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003908:	f108 0201 	add.w	r2, r8, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	47b8      	blx	r7
 8003914:	3001      	adds	r0, #1
 8003916:	d10e      	bne.n	8003936 <_printf_float+0x42a>
 8003918:	e659      	b.n	80035ce <_printf_float+0xc2>
 800391a:	2301      	movs	r3, #1
 800391c:	4652      	mov	r2, sl
 800391e:	4631      	mov	r1, r6
 8003920:	4628      	mov	r0, r5
 8003922:	47b8      	blx	r7
 8003924:	3001      	adds	r0, #1
 8003926:	f43f ae52 	beq.w	80035ce <_printf_float+0xc2>
 800392a:	f108 0801 	add.w	r8, r8, #1
 800392e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	4543      	cmp	r3, r8
 8003934:	dcf1      	bgt.n	800391a <_printf_float+0x40e>
 8003936:	464b      	mov	r3, r9
 8003938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800393c:	e6dc      	b.n	80036f8 <_printf_float+0x1ec>
 800393e:	f04f 0800 	mov.w	r8, #0
 8003942:	f104 0a1a 	add.w	sl, r4, #26
 8003946:	e7f2      	b.n	800392e <_printf_float+0x422>
 8003948:	2301      	movs	r3, #1
 800394a:	4642      	mov	r2, r8
 800394c:	e7df      	b.n	800390e <_printf_float+0x402>
 800394e:	2301      	movs	r3, #1
 8003950:	464a      	mov	r2, r9
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f ae38 	beq.w	80035ce <_printf_float+0xc2>
 800395e:	f108 0801 	add.w	r8, r8, #1
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	4543      	cmp	r3, r8
 800396a:	dcf0      	bgt.n	800394e <_printf_float+0x442>
 800396c:	e6fa      	b.n	8003764 <_printf_float+0x258>
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	f104 0919 	add.w	r9, r4, #25
 8003976:	e7f4      	b.n	8003962 <_printf_float+0x456>

08003978 <_printf_common>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	4616      	mov	r6, r2
 800397e:	4699      	mov	r9, r3
 8003980:	688a      	ldr	r2, [r1, #8]
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003988:	4293      	cmp	r3, r2
 800398a:	bfb8      	it	lt
 800398c:	4613      	movlt	r3, r2
 800398e:	6033      	str	r3, [r6, #0]
 8003990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003994:	4607      	mov	r7, r0
 8003996:	460c      	mov	r4, r1
 8003998:	b10a      	cbz	r2, 800399e <_printf_common+0x26>
 800399a:	3301      	adds	r3, #1
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	0699      	lsls	r1, r3, #26
 80039a2:	bf42      	ittt	mi
 80039a4:	6833      	ldrmi	r3, [r6, #0]
 80039a6:	3302      	addmi	r3, #2
 80039a8:	6033      	strmi	r3, [r6, #0]
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	f015 0506 	ands.w	r5, r5, #6
 80039b0:	d106      	bne.n	80039c0 <_printf_common+0x48>
 80039b2:	f104 0a19 	add.w	sl, r4, #25
 80039b6:	68e3      	ldr	r3, [r4, #12]
 80039b8:	6832      	ldr	r2, [r6, #0]
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	42ab      	cmp	r3, r5
 80039be:	dc26      	bgt.n	8003a0e <_printf_common+0x96>
 80039c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c4:	1e13      	subs	r3, r2, #0
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	bf18      	it	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	0692      	lsls	r2, r2, #26
 80039ce:	d42b      	bmi.n	8003a28 <_printf_common+0xb0>
 80039d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d4:	4649      	mov	r1, r9
 80039d6:	4638      	mov	r0, r7
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d01e      	beq.n	8003a1c <_printf_common+0xa4>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	68e5      	ldr	r5, [r4, #12]
 80039e2:	6832      	ldr	r2, [r6, #0]
 80039e4:	f003 0306 	and.w	r3, r3, #6
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	bf08      	it	eq
 80039ec:	1aad      	subeq	r5, r5, r2
 80039ee:	68a3      	ldr	r3, [r4, #8]
 80039f0:	6922      	ldr	r2, [r4, #16]
 80039f2:	bf0c      	ite	eq
 80039f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039f8:	2500      	movne	r5, #0
 80039fa:	4293      	cmp	r3, r2
 80039fc:	bfc4      	itt	gt
 80039fe:	1a9b      	subgt	r3, r3, r2
 8003a00:	18ed      	addgt	r5, r5, r3
 8003a02:	2600      	movs	r6, #0
 8003a04:	341a      	adds	r4, #26
 8003a06:	42b5      	cmp	r5, r6
 8003a08:	d11a      	bne.n	8003a40 <_printf_common+0xc8>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	e008      	b.n	8003a20 <_printf_common+0xa8>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4652      	mov	r2, sl
 8003a12:	4649      	mov	r1, r9
 8003a14:	4638      	mov	r0, r7
 8003a16:	47c0      	blx	r8
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d103      	bne.n	8003a24 <_printf_common+0xac>
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a24:	3501      	adds	r5, #1
 8003a26:	e7c6      	b.n	80039b6 <_printf_common+0x3e>
 8003a28:	18e1      	adds	r1, r4, r3
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	2030      	movs	r0, #48	; 0x30
 8003a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a32:	4422      	add	r2, r4
 8003a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	e7c7      	b.n	80039d0 <_printf_common+0x58>
 8003a40:	2301      	movs	r3, #1
 8003a42:	4622      	mov	r2, r4
 8003a44:	4649      	mov	r1, r9
 8003a46:	4638      	mov	r0, r7
 8003a48:	47c0      	blx	r8
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d0e6      	beq.n	8003a1c <_printf_common+0xa4>
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7d9      	b.n	8003a06 <_printf_common+0x8e>
	...

08003a54 <_printf_i>:
 8003a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	7e0f      	ldrb	r7, [r1, #24]
 8003a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a5c:	2f78      	cmp	r7, #120	; 0x78
 8003a5e:	4691      	mov	r9, r2
 8003a60:	4680      	mov	r8, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	469a      	mov	sl, r3
 8003a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a6a:	d807      	bhi.n	8003a7c <_printf_i+0x28>
 8003a6c:	2f62      	cmp	r7, #98	; 0x62
 8003a6e:	d80a      	bhi.n	8003a86 <_printf_i+0x32>
 8003a70:	2f00      	cmp	r7, #0
 8003a72:	f000 80d8 	beq.w	8003c26 <_printf_i+0x1d2>
 8003a76:	2f58      	cmp	r7, #88	; 0x58
 8003a78:	f000 80a3 	beq.w	8003bc2 <_printf_i+0x16e>
 8003a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a84:	e03a      	b.n	8003afc <_printf_i+0xa8>
 8003a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8a:	2b15      	cmp	r3, #21
 8003a8c:	d8f6      	bhi.n	8003a7c <_printf_i+0x28>
 8003a8e:	a101      	add	r1, pc, #4	; (adr r1, 8003a94 <_printf_i+0x40>)
 8003a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003b01 	.word	0x08003b01
 8003a9c:	08003a7d 	.word	0x08003a7d
 8003aa0:	08003a7d 	.word	0x08003a7d
 8003aa4:	08003a7d 	.word	0x08003a7d
 8003aa8:	08003a7d 	.word	0x08003a7d
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003a7d 	.word	0x08003a7d
 8003ab4:	08003a7d 	.word	0x08003a7d
 8003ab8:	08003a7d 	.word	0x08003a7d
 8003abc:	08003a7d 	.word	0x08003a7d
 8003ac0:	08003c0d 	.word	0x08003c0d
 8003ac4:	08003b31 	.word	0x08003b31
 8003ac8:	08003bef 	.word	0x08003bef
 8003acc:	08003a7d 	.word	0x08003a7d
 8003ad0:	08003a7d 	.word	0x08003a7d
 8003ad4:	08003c2f 	.word	0x08003c2f
 8003ad8:	08003a7d 	.word	0x08003a7d
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003a7d 	.word	0x08003a7d
 8003ae4:	08003a7d 	.word	0x08003a7d
 8003ae8:	08003bf7 	.word	0x08003bf7
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	602a      	str	r2, [r5, #0]
 8003af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0a3      	b.n	8003c48 <_printf_i+0x1f4>
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	6829      	ldr	r1, [r5, #0]
 8003b04:	0606      	lsls	r6, r0, #24
 8003b06:	f101 0304 	add.w	r3, r1, #4
 8003b0a:	d50a      	bpl.n	8003b22 <_printf_i+0xce>
 8003b0c:	680e      	ldr	r6, [r1, #0]
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	2e00      	cmp	r6, #0
 8003b12:	da03      	bge.n	8003b1c <_printf_i+0xc8>
 8003b14:	232d      	movs	r3, #45	; 0x2d
 8003b16:	4276      	negs	r6, r6
 8003b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b1c:	485e      	ldr	r0, [pc, #376]	; (8003c98 <_printf_i+0x244>)
 8003b1e:	230a      	movs	r3, #10
 8003b20:	e019      	b.n	8003b56 <_printf_i+0x102>
 8003b22:	680e      	ldr	r6, [r1, #0]
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b2a:	bf18      	it	ne
 8003b2c:	b236      	sxthne	r6, r6
 8003b2e:	e7ef      	b.n	8003b10 <_printf_i+0xbc>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	1d19      	adds	r1, r3, #4
 8003b36:	6029      	str	r1, [r5, #0]
 8003b38:	0601      	lsls	r1, r0, #24
 8003b3a:	d501      	bpl.n	8003b40 <_printf_i+0xec>
 8003b3c:	681e      	ldr	r6, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <_printf_i+0xf2>
 8003b40:	0646      	lsls	r6, r0, #25
 8003b42:	d5fb      	bpl.n	8003b3c <_printf_i+0xe8>
 8003b44:	881e      	ldrh	r6, [r3, #0]
 8003b46:	4854      	ldr	r0, [pc, #336]	; (8003c98 <_printf_i+0x244>)
 8003b48:	2f6f      	cmp	r7, #111	; 0x6f
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2308      	moveq	r3, #8
 8003b4e:	230a      	movne	r3, #10
 8003b50:	2100      	movs	r1, #0
 8003b52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b56:	6865      	ldr	r5, [r4, #4]
 8003b58:	60a5      	str	r5, [r4, #8]
 8003b5a:	2d00      	cmp	r5, #0
 8003b5c:	bfa2      	ittt	ge
 8003b5e:	6821      	ldrge	r1, [r4, #0]
 8003b60:	f021 0104 	bicge.w	r1, r1, #4
 8003b64:	6021      	strge	r1, [r4, #0]
 8003b66:	b90e      	cbnz	r6, 8003b6c <_printf_i+0x118>
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	d04d      	beq.n	8003c08 <_printf_i+0x1b4>
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b72:	fb03 6711 	mls	r7, r3, r1, r6
 8003b76:	5dc7      	ldrb	r7, [r0, r7]
 8003b78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b7c:	4637      	mov	r7, r6
 8003b7e:	42bb      	cmp	r3, r7
 8003b80:	460e      	mov	r6, r1
 8003b82:	d9f4      	bls.n	8003b6e <_printf_i+0x11a>
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d10b      	bne.n	8003ba0 <_printf_i+0x14c>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	07de      	lsls	r6, r3, #31
 8003b8c:	d508      	bpl.n	8003ba0 <_printf_i+0x14c>
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	6861      	ldr	r1, [r4, #4]
 8003b92:	4299      	cmp	r1, r3
 8003b94:	bfde      	ittt	le
 8003b96:	2330      	movle	r3, #48	; 0x30
 8003b98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ba0:	1b52      	subs	r2, r2, r5
 8003ba2:	6122      	str	r2, [r4, #16]
 8003ba4:	f8cd a000 	str.w	sl, [sp]
 8003ba8:	464b      	mov	r3, r9
 8003baa:	aa03      	add	r2, sp, #12
 8003bac:	4621      	mov	r1, r4
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f7ff fee2 	bl	8003978 <_printf_common>
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d14c      	bne.n	8003c52 <_printf_i+0x1fe>
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bbc:	b004      	add	sp, #16
 8003bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc2:	4835      	ldr	r0, [pc, #212]	; (8003c98 <_printf_i+0x244>)
 8003bc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bc8:	6829      	ldr	r1, [r5, #0]
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bd0:	6029      	str	r1, [r5, #0]
 8003bd2:	061d      	lsls	r5, r3, #24
 8003bd4:	d514      	bpl.n	8003c00 <_printf_i+0x1ac>
 8003bd6:	07df      	lsls	r7, r3, #31
 8003bd8:	bf44      	itt	mi
 8003bda:	f043 0320 	orrmi.w	r3, r3, #32
 8003bde:	6023      	strmi	r3, [r4, #0]
 8003be0:	b91e      	cbnz	r6, 8003bea <_printf_i+0x196>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	f023 0320 	bic.w	r3, r3, #32
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	2310      	movs	r3, #16
 8003bec:	e7b0      	b.n	8003b50 <_printf_i+0xfc>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	f043 0320 	orr.w	r3, r3, #32
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	2378      	movs	r3, #120	; 0x78
 8003bf8:	4828      	ldr	r0, [pc, #160]	; (8003c9c <_printf_i+0x248>)
 8003bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bfe:	e7e3      	b.n	8003bc8 <_printf_i+0x174>
 8003c00:	0659      	lsls	r1, r3, #25
 8003c02:	bf48      	it	mi
 8003c04:	b2b6      	uxthmi	r6, r6
 8003c06:	e7e6      	b.n	8003bd6 <_printf_i+0x182>
 8003c08:	4615      	mov	r5, r2
 8003c0a:	e7bb      	b.n	8003b84 <_printf_i+0x130>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	6826      	ldr	r6, [r4, #0]
 8003c10:	6961      	ldr	r1, [r4, #20]
 8003c12:	1d18      	adds	r0, r3, #4
 8003c14:	6028      	str	r0, [r5, #0]
 8003c16:	0635      	lsls	r5, r6, #24
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	d501      	bpl.n	8003c20 <_printf_i+0x1cc>
 8003c1c:	6019      	str	r1, [r3, #0]
 8003c1e:	e002      	b.n	8003c26 <_printf_i+0x1d2>
 8003c20:	0670      	lsls	r0, r6, #25
 8003c22:	d5fb      	bpl.n	8003c1c <_printf_i+0x1c8>
 8003c24:	8019      	strh	r1, [r3, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	6123      	str	r3, [r4, #16]
 8003c2a:	4615      	mov	r5, r2
 8003c2c:	e7ba      	b.n	8003ba4 <_printf_i+0x150>
 8003c2e:	682b      	ldr	r3, [r5, #0]
 8003c30:	1d1a      	adds	r2, r3, #4
 8003c32:	602a      	str	r2, [r5, #0]
 8003c34:	681d      	ldr	r5, [r3, #0]
 8003c36:	6862      	ldr	r2, [r4, #4]
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f7fc faf8 	bl	8000230 <memchr>
 8003c40:	b108      	cbz	r0, 8003c46 <_printf_i+0x1f2>
 8003c42:	1b40      	subs	r0, r0, r5
 8003c44:	6060      	str	r0, [r4, #4]
 8003c46:	6863      	ldr	r3, [r4, #4]
 8003c48:	6123      	str	r3, [r4, #16]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c50:	e7a8      	b.n	8003ba4 <_printf_i+0x150>
 8003c52:	6923      	ldr	r3, [r4, #16]
 8003c54:	462a      	mov	r2, r5
 8003c56:	4649      	mov	r1, r9
 8003c58:	4640      	mov	r0, r8
 8003c5a:	47d0      	blx	sl
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d0ab      	beq.n	8003bb8 <_printf_i+0x164>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	079b      	lsls	r3, r3, #30
 8003c64:	d413      	bmi.n	8003c8e <_printf_i+0x23a>
 8003c66:	68e0      	ldr	r0, [r4, #12]
 8003c68:	9b03      	ldr	r3, [sp, #12]
 8003c6a:	4298      	cmp	r0, r3
 8003c6c:	bfb8      	it	lt
 8003c6e:	4618      	movlt	r0, r3
 8003c70:	e7a4      	b.n	8003bbc <_printf_i+0x168>
 8003c72:	2301      	movs	r3, #1
 8003c74:	4632      	mov	r2, r6
 8003c76:	4649      	mov	r1, r9
 8003c78:	4640      	mov	r0, r8
 8003c7a:	47d0      	blx	sl
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d09b      	beq.n	8003bb8 <_printf_i+0x164>
 8003c80:	3501      	adds	r5, #1
 8003c82:	68e3      	ldr	r3, [r4, #12]
 8003c84:	9903      	ldr	r1, [sp, #12]
 8003c86:	1a5b      	subs	r3, r3, r1
 8003c88:	42ab      	cmp	r3, r5
 8003c8a:	dcf2      	bgt.n	8003c72 <_printf_i+0x21e>
 8003c8c:	e7eb      	b.n	8003c66 <_printf_i+0x212>
 8003c8e:	2500      	movs	r5, #0
 8003c90:	f104 0619 	add.w	r6, r4, #25
 8003c94:	e7f5      	b.n	8003c82 <_printf_i+0x22e>
 8003c96:	bf00      	nop
 8003c98:	08012858 	.word	0x08012858
 8003c9c:	08012869 	.word	0x08012869

08003ca0 <setvbuf>:
 8003ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ca4:	461d      	mov	r5, r3
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <setvbuf+0x17c>)
 8003ca8:	681f      	ldr	r7, [r3, #0]
 8003caa:	4604      	mov	r4, r0
 8003cac:	460e      	mov	r6, r1
 8003cae:	4690      	mov	r8, r2
 8003cb0:	b127      	cbz	r7, 8003cbc <setvbuf+0x1c>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	b913      	cbnz	r3, 8003cbc <setvbuf+0x1c>
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f001 f942 	bl	8004f40 <__sinit>
 8003cbc:	4b58      	ldr	r3, [pc, #352]	; (8003e20 <setvbuf+0x180>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d167      	bne.n	8003d92 <setvbuf+0xf2>
 8003cc2:	687c      	ldr	r4, [r7, #4]
 8003cc4:	f1b8 0f02 	cmp.w	r8, #2
 8003cc8:	d006      	beq.n	8003cd8 <setvbuf+0x38>
 8003cca:	f1b8 0f01 	cmp.w	r8, #1
 8003cce:	f200 809f 	bhi.w	8003e10 <setvbuf+0x170>
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	f2c0 809c 	blt.w	8003e10 <setvbuf+0x170>
 8003cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	d405      	bmi.n	8003cea <setvbuf+0x4a>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	0598      	lsls	r0, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <setvbuf+0x4a>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce6:	f001 f9e0 	bl	80050aa <__retarget_lock_acquire_recursive>
 8003cea:	4621      	mov	r1, r4
 8003cec:	4638      	mov	r0, r7
 8003cee:	f001 f893 	bl	8004e18 <_fflush_r>
 8003cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cf4:	b141      	cbz	r1, 8003d08 <setvbuf+0x68>
 8003cf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	d002      	beq.n	8003d04 <setvbuf+0x64>
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f001 fdf6 	bl	80058f0 <_free_r>
 8003d04:	2300      	movs	r3, #0
 8003d06:	6363      	str	r3, [r4, #52]	; 0x34
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61a3      	str	r3, [r4, #24]
 8003d0c:	6063      	str	r3, [r4, #4]
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	0619      	lsls	r1, r3, #24
 8003d12:	d503      	bpl.n	8003d1c <setvbuf+0x7c>
 8003d14:	6921      	ldr	r1, [r4, #16]
 8003d16:	4638      	mov	r0, r7
 8003d18:	f001 fdea 	bl	80058f0 <_free_r>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f1b8 0f02 	cmp.w	r8, #2
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	d06c      	beq.n	8003e08 <setvbuf+0x168>
 8003d2e:	ab01      	add	r3, sp, #4
 8003d30:	466a      	mov	r2, sp
 8003d32:	4621      	mov	r1, r4
 8003d34:	4638      	mov	r0, r7
 8003d36:	f001 f9ba 	bl	80050ae <__swhatbuf_r>
 8003d3a:	89a3      	ldrh	r3, [r4, #12]
 8003d3c:	4318      	orrs	r0, r3
 8003d3e:	81a0      	strh	r0, [r4, #12]
 8003d40:	2d00      	cmp	r5, #0
 8003d42:	d130      	bne.n	8003da6 <setvbuf+0x106>
 8003d44:	9d00      	ldr	r5, [sp, #0]
 8003d46:	4628      	mov	r0, r5
 8003d48:	f001 fa16 	bl	8005178 <malloc>
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d155      	bne.n	8003dfe <setvbuf+0x15e>
 8003d52:	f8dd 9000 	ldr.w	r9, [sp]
 8003d56:	45a9      	cmp	r9, r5
 8003d58:	d14a      	bne.n	8003df0 <setvbuf+0x150>
 8003d5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60a2      	str	r2, [r4, #8]
 8003d62:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	6122      	str	r2, [r4, #16]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d70:	6162      	str	r2, [r4, #20]
 8003d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	07d2      	lsls	r2, r2, #31
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	d405      	bmi.n	8003d8a <setvbuf+0xea>
 8003d7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d82:	d102      	bne.n	8003d8a <setvbuf+0xea>
 8003d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d86:	f001 f991 	bl	80050ac <__retarget_lock_release_recursive>
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	b003      	add	sp, #12
 8003d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <setvbuf+0x184>)
 8003d94:	429c      	cmp	r4, r3
 8003d96:	d101      	bne.n	8003d9c <setvbuf+0xfc>
 8003d98:	68bc      	ldr	r4, [r7, #8]
 8003d9a:	e793      	b.n	8003cc4 <setvbuf+0x24>
 8003d9c:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <setvbuf+0x188>)
 8003d9e:	429c      	cmp	r4, r3
 8003da0:	bf08      	it	eq
 8003da2:	68fc      	ldreq	r4, [r7, #12]
 8003da4:	e78e      	b.n	8003cc4 <setvbuf+0x24>
 8003da6:	2e00      	cmp	r6, #0
 8003da8:	d0cd      	beq.n	8003d46 <setvbuf+0xa6>
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	b913      	cbnz	r3, 8003db4 <setvbuf+0x114>
 8003dae:	4638      	mov	r0, r7
 8003db0:	f001 f8c6 	bl	8004f40 <__sinit>
 8003db4:	f1b8 0f01 	cmp.w	r8, #1
 8003db8:	bf08      	it	eq
 8003dba:	89a3      	ldrheq	r3, [r4, #12]
 8003dbc:	6026      	str	r6, [r4, #0]
 8003dbe:	bf04      	itt	eq
 8003dc0:	f043 0301 	orreq.w	r3, r3, #1
 8003dc4:	81a3      	strheq	r3, [r4, #12]
 8003dc6:	89a2      	ldrh	r2, [r4, #12]
 8003dc8:	f012 0308 	ands.w	r3, r2, #8
 8003dcc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003dd0:	d01c      	beq.n	8003e0c <setvbuf+0x16c>
 8003dd2:	07d3      	lsls	r3, r2, #31
 8003dd4:	bf41      	itttt	mi
 8003dd6:	2300      	movmi	r3, #0
 8003dd8:	426d      	negmi	r5, r5
 8003dda:	60a3      	strmi	r3, [r4, #8]
 8003ddc:	61a5      	strmi	r5, [r4, #24]
 8003dde:	bf58      	it	pl
 8003de0:	60a5      	strpl	r5, [r4, #8]
 8003de2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003de4:	f015 0501 	ands.w	r5, r5, #1
 8003de8:	d115      	bne.n	8003e16 <setvbuf+0x176>
 8003dea:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003dee:	e7c8      	b.n	8003d82 <setvbuf+0xe2>
 8003df0:	4648      	mov	r0, r9
 8003df2:	f001 f9c1 	bl	8005178 <malloc>
 8003df6:	4606      	mov	r6, r0
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d0ae      	beq.n	8003d5a <setvbuf+0xba>
 8003dfc:	464d      	mov	r5, r9
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	e7d0      	b.n	8003daa <setvbuf+0x10a>
 8003e08:	2500      	movs	r5, #0
 8003e0a:	e7a8      	b.n	8003d5e <setvbuf+0xbe>
 8003e0c:	60a3      	str	r3, [r4, #8]
 8003e0e:	e7e8      	b.n	8003de2 <setvbuf+0x142>
 8003e10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e14:	e7b9      	b.n	8003d8a <setvbuf+0xea>
 8003e16:	2500      	movs	r5, #0
 8003e18:	e7b7      	b.n	8003d8a <setvbuf+0xea>
 8003e1a:	bf00      	nop
 8003e1c:	20000018 	.word	0x20000018
 8003e20:	08012a08 	.word	0x08012a08
 8003e24:	08012a28 	.word	0x08012a28
 8003e28:	080129e8 	.word	0x080129e8

08003e2c <strtok>:
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <strtok+0x5c>)
 8003e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e30:	681e      	ldr	r6, [r3, #0]
 8003e32:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003e34:	4605      	mov	r5, r0
 8003e36:	b9fc      	cbnz	r4, 8003e78 <strtok+0x4c>
 8003e38:	2050      	movs	r0, #80	; 0x50
 8003e3a:	9101      	str	r1, [sp, #4]
 8003e3c:	f001 f99c 	bl	8005178 <malloc>
 8003e40:	9901      	ldr	r1, [sp, #4]
 8003e42:	65b0      	str	r0, [r6, #88]	; 0x58
 8003e44:	4602      	mov	r2, r0
 8003e46:	b920      	cbnz	r0, 8003e52 <strtok+0x26>
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <strtok+0x60>)
 8003e4a:	4811      	ldr	r0, [pc, #68]	; (8003e90 <strtok+0x64>)
 8003e4c:	2157      	movs	r1, #87	; 0x57
 8003e4e:	f000 f8c5 	bl	8003fdc <__assert_func>
 8003e52:	e9c0 4400 	strd	r4, r4, [r0]
 8003e56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003e5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003e5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003e62:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003e66:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003e6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003e6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003e72:	6184      	str	r4, [r0, #24]
 8003e74:	7704      	strb	r4, [r0, #28]
 8003e76:	6244      	str	r4, [r0, #36]	; 0x24
 8003e78:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	b002      	add	sp, #8
 8003e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e84:	f000 b806 	b.w	8003e94 <__strtok_r>
 8003e88:	20000018 	.word	0x20000018
 8003e8c:	0801287a 	.word	0x0801287a
 8003e90:	08012891 	.word	0x08012891

08003e94 <__strtok_r>:
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	b908      	cbnz	r0, 8003e9c <__strtok_r+0x8>
 8003e98:	6810      	ldr	r0, [r2, #0]
 8003e9a:	b188      	cbz	r0, 8003ec0 <__strtok_r+0x2c>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003eaa:	b91e      	cbnz	r6, 8003eb4 <__strtok_r+0x20>
 8003eac:	b965      	cbnz	r5, 8003ec8 <__strtok_r+0x34>
 8003eae:	6015      	str	r5, [r2, #0]
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	e005      	b.n	8003ec0 <__strtok_r+0x2c>
 8003eb4:	42b5      	cmp	r5, r6
 8003eb6:	d1f6      	bne.n	8003ea6 <__strtok_r+0x12>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <__strtok_r+0xa>
 8003ebc:	6014      	str	r4, [r2, #0]
 8003ebe:	7003      	strb	r3, [r0, #0]
 8003ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	e00c      	b.n	8003ee0 <__strtok_r+0x4c>
 8003ec6:	b915      	cbnz	r5, 8003ece <__strtok_r+0x3a>
 8003ec8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ecc:	460e      	mov	r6, r1
 8003ece:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003ed2:	42ab      	cmp	r3, r5
 8003ed4:	d1f7      	bne.n	8003ec6 <__strtok_r+0x32>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f3      	beq.n	8003ec2 <__strtok_r+0x2e>
 8003eda:	2300      	movs	r3, #0
 8003edc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003ee0:	6014      	str	r4, [r2, #0]
 8003ee2:	e7ed      	b.n	8003ec0 <__strtok_r+0x2c>

08003ee4 <_strtoul_l.constprop.0>:
 8003ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ee8:	4f36      	ldr	r7, [pc, #216]	; (8003fc4 <_strtoul_l.constprop.0+0xe0>)
 8003eea:	4686      	mov	lr, r0
 8003eec:	460d      	mov	r5, r1
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ef4:	5de6      	ldrb	r6, [r4, r7]
 8003ef6:	f016 0608 	ands.w	r6, r6, #8
 8003efa:	d1f8      	bne.n	8003eee <_strtoul_l.constprop.0+0xa>
 8003efc:	2c2d      	cmp	r4, #45	; 0x2d
 8003efe:	d12f      	bne.n	8003f60 <_strtoul_l.constprop.0+0x7c>
 8003f00:	782c      	ldrb	r4, [r5, #0]
 8003f02:	2601      	movs	r6, #1
 8003f04:	1c85      	adds	r5, r0, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d057      	beq.n	8003fba <_strtoul_l.constprop.0+0xd6>
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d109      	bne.n	8003f22 <_strtoul_l.constprop.0+0x3e>
 8003f0e:	2c30      	cmp	r4, #48	; 0x30
 8003f10:	d107      	bne.n	8003f22 <_strtoul_l.constprop.0+0x3e>
 8003f12:	7828      	ldrb	r0, [r5, #0]
 8003f14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003f18:	2858      	cmp	r0, #88	; 0x58
 8003f1a:	d149      	bne.n	8003fb0 <_strtoul_l.constprop.0+0xcc>
 8003f1c:	786c      	ldrb	r4, [r5, #1]
 8003f1e:	2310      	movs	r3, #16
 8003f20:	3502      	adds	r5, #2
 8003f22:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003f26:	2700      	movs	r7, #0
 8003f28:	fbb8 f8f3 	udiv	r8, r8, r3
 8003f2c:	fb03 f908 	mul.w	r9, r3, r8
 8003f30:	ea6f 0909 	mvn.w	r9, r9
 8003f34:	4638      	mov	r0, r7
 8003f36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003f3a:	f1bc 0f09 	cmp.w	ip, #9
 8003f3e:	d814      	bhi.n	8003f6a <_strtoul_l.constprop.0+0x86>
 8003f40:	4664      	mov	r4, ip
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	dd22      	ble.n	8003f8c <_strtoul_l.constprop.0+0xa8>
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	db1d      	blt.n	8003f86 <_strtoul_l.constprop.0+0xa2>
 8003f4a:	4580      	cmp	r8, r0
 8003f4c:	d31b      	bcc.n	8003f86 <_strtoul_l.constprop.0+0xa2>
 8003f4e:	d101      	bne.n	8003f54 <_strtoul_l.constprop.0+0x70>
 8003f50:	45a1      	cmp	r9, r4
 8003f52:	db18      	blt.n	8003f86 <_strtoul_l.constprop.0+0xa2>
 8003f54:	fb00 4003 	mla	r0, r0, r3, r4
 8003f58:	2701      	movs	r7, #1
 8003f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f5e:	e7ea      	b.n	8003f36 <_strtoul_l.constprop.0+0x52>
 8003f60:	2c2b      	cmp	r4, #43	; 0x2b
 8003f62:	bf04      	itt	eq
 8003f64:	782c      	ldrbeq	r4, [r5, #0]
 8003f66:	1c85      	addeq	r5, r0, #2
 8003f68:	e7cd      	b.n	8003f06 <_strtoul_l.constprop.0+0x22>
 8003f6a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003f6e:	f1bc 0f19 	cmp.w	ip, #25
 8003f72:	d801      	bhi.n	8003f78 <_strtoul_l.constprop.0+0x94>
 8003f74:	3c37      	subs	r4, #55	; 0x37
 8003f76:	e7e4      	b.n	8003f42 <_strtoul_l.constprop.0+0x5e>
 8003f78:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003f7c:	f1bc 0f19 	cmp.w	ip, #25
 8003f80:	d804      	bhi.n	8003f8c <_strtoul_l.constprop.0+0xa8>
 8003f82:	3c57      	subs	r4, #87	; 0x57
 8003f84:	e7dd      	b.n	8003f42 <_strtoul_l.constprop.0+0x5e>
 8003f86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f8a:	e7e6      	b.n	8003f5a <_strtoul_l.constprop.0+0x76>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	da07      	bge.n	8003fa0 <_strtoul_l.constprop.0+0xbc>
 8003f90:	2322      	movs	r3, #34	; 0x22
 8003f92:	f8ce 3000 	str.w	r3, [lr]
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9a:	b932      	cbnz	r2, 8003faa <_strtoul_l.constprop.0+0xc6>
 8003f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fa0:	b106      	cbz	r6, 8003fa4 <_strtoul_l.constprop.0+0xc0>
 8003fa2:	4240      	negs	r0, r0
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	d0f9      	beq.n	8003f9c <_strtoul_l.constprop.0+0xb8>
 8003fa8:	b107      	cbz	r7, 8003fac <_strtoul_l.constprop.0+0xc8>
 8003faa:	1e69      	subs	r1, r5, #1
 8003fac:	6011      	str	r1, [r2, #0]
 8003fae:	e7f5      	b.n	8003f9c <_strtoul_l.constprop.0+0xb8>
 8003fb0:	2430      	movs	r4, #48	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1b5      	bne.n	8003f22 <_strtoul_l.constprop.0+0x3e>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	e7b3      	b.n	8003f22 <_strtoul_l.constprop.0+0x3e>
 8003fba:	2c30      	cmp	r4, #48	; 0x30
 8003fbc:	d0a9      	beq.n	8003f12 <_strtoul_l.constprop.0+0x2e>
 8003fbe:	230a      	movs	r3, #10
 8003fc0:	e7af      	b.n	8003f22 <_strtoul_l.constprop.0+0x3e>
 8003fc2:	bf00      	nop
 8003fc4:	08012742 	.word	0x08012742

08003fc8 <strtoul>:
 8003fc8:	4613      	mov	r3, r2
 8003fca:	460a      	mov	r2, r1
 8003fcc:	4601      	mov	r1, r0
 8003fce:	4802      	ldr	r0, [pc, #8]	; (8003fd8 <strtoul+0x10>)
 8003fd0:	6800      	ldr	r0, [r0, #0]
 8003fd2:	f7ff bf87 	b.w	8003ee4 <_strtoul_l.constprop.0>
 8003fd6:	bf00      	nop
 8003fd8:	20000018 	.word	0x20000018

08003fdc <__assert_func>:
 8003fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fde:	4614      	mov	r4, r2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <__assert_func+0x2c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	68d8      	ldr	r0, [r3, #12]
 8003fea:	b14c      	cbz	r4, 8004000 <__assert_func+0x24>
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <__assert_func+0x30>)
 8003fee:	9100      	str	r1, [sp, #0]
 8003ff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ff4:	4906      	ldr	r1, [pc, #24]	; (8004010 <__assert_func+0x34>)
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	f001 f820 	bl	800503c <fiprintf>
 8003ffc:	f001 ff8a 	bl	8005f14 <abort>
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <__assert_func+0x38>)
 8004002:	461c      	mov	r4, r3
 8004004:	e7f3      	b.n	8003fee <__assert_func+0x12>
 8004006:	bf00      	nop
 8004008:	20000018 	.word	0x20000018
 800400c:	08012910 	.word	0x08012910
 8004010:	0801291d 	.word	0x0801291d
 8004014:	080091c8 	.word	0x080091c8

08004018 <quorem>:
 8004018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	6903      	ldr	r3, [r0, #16]
 800401e:	690c      	ldr	r4, [r1, #16]
 8004020:	42a3      	cmp	r3, r4
 8004022:	4607      	mov	r7, r0
 8004024:	f2c0 8081 	blt.w	800412a <quorem+0x112>
 8004028:	3c01      	subs	r4, #1
 800402a:	f101 0814 	add.w	r8, r1, #20
 800402e:	f100 0514 	add.w	r5, r0, #20
 8004032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800403c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004040:	3301      	adds	r3, #1
 8004042:	429a      	cmp	r2, r3
 8004044:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800404c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004050:	d331      	bcc.n	80040b6 <quorem+0x9e>
 8004052:	f04f 0e00 	mov.w	lr, #0
 8004056:	4640      	mov	r0, r8
 8004058:	46ac      	mov	ip, r5
 800405a:	46f2      	mov	sl, lr
 800405c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004060:	b293      	uxth	r3, r2
 8004062:	fb06 e303 	mla	r3, r6, r3, lr
 8004066:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800406a:	b29b      	uxth	r3, r3
 800406c:	ebaa 0303 	sub.w	r3, sl, r3
 8004070:	0c12      	lsrs	r2, r2, #16
 8004072:	f8dc a000 	ldr.w	sl, [ip]
 8004076:	fb06 e202 	mla	r2, r6, r2, lr
 800407a:	fa13 f38a 	uxtah	r3, r3, sl
 800407e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004082:	fa1f fa82 	uxth.w	sl, r2
 8004086:	f8dc 2000 	ldr.w	r2, [ip]
 800408a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800408e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004092:	b29b      	uxth	r3, r3
 8004094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004098:	4581      	cmp	r9, r0
 800409a:	f84c 3b04 	str.w	r3, [ip], #4
 800409e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80040a2:	d2db      	bcs.n	800405c <quorem+0x44>
 80040a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80040a8:	b92b      	cbnz	r3, 80040b6 <quorem+0x9e>
 80040aa:	9b01      	ldr	r3, [sp, #4]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	429d      	cmp	r5, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	d32e      	bcc.n	8004112 <quorem+0xfa>
 80040b4:	613c      	str	r4, [r7, #16]
 80040b6:	4638      	mov	r0, r7
 80040b8:	f001 fb08 	bl	80056cc <__mcmp>
 80040bc:	2800      	cmp	r0, #0
 80040be:	db24      	blt.n	800410a <quorem+0xf2>
 80040c0:	3601      	adds	r6, #1
 80040c2:	4628      	mov	r0, r5
 80040c4:	f04f 0c00 	mov.w	ip, #0
 80040c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80040cc:	f8d0 e000 	ldr.w	lr, [r0]
 80040d0:	b293      	uxth	r3, r2
 80040d2:	ebac 0303 	sub.w	r3, ip, r3
 80040d6:	0c12      	lsrs	r2, r2, #16
 80040d8:	fa13 f38e 	uxtah	r3, r3, lr
 80040dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040ea:	45c1      	cmp	r9, r8
 80040ec:	f840 3b04 	str.w	r3, [r0], #4
 80040f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040f4:	d2e8      	bcs.n	80040c8 <quorem+0xb0>
 80040f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040fe:	b922      	cbnz	r2, 800410a <quorem+0xf2>
 8004100:	3b04      	subs	r3, #4
 8004102:	429d      	cmp	r5, r3
 8004104:	461a      	mov	r2, r3
 8004106:	d30a      	bcc.n	800411e <quorem+0x106>
 8004108:	613c      	str	r4, [r7, #16]
 800410a:	4630      	mov	r0, r6
 800410c:	b003      	add	sp, #12
 800410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	3b04      	subs	r3, #4
 8004116:	2a00      	cmp	r2, #0
 8004118:	d1cc      	bne.n	80040b4 <quorem+0x9c>
 800411a:	3c01      	subs	r4, #1
 800411c:	e7c7      	b.n	80040ae <quorem+0x96>
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	3b04      	subs	r3, #4
 8004122:	2a00      	cmp	r2, #0
 8004124:	d1f0      	bne.n	8004108 <quorem+0xf0>
 8004126:	3c01      	subs	r4, #1
 8004128:	e7eb      	b.n	8004102 <quorem+0xea>
 800412a:	2000      	movs	r0, #0
 800412c:	e7ee      	b.n	800410c <quorem+0xf4>
	...

08004130 <_dtoa_r>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	ed2d 8b04 	vpush	{d8-d9}
 8004138:	ec57 6b10 	vmov	r6, r7, d0
 800413c:	b093      	sub	sp, #76	; 0x4c
 800413e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004144:	9106      	str	r1, [sp, #24]
 8004146:	ee10 aa10 	vmov	sl, s0
 800414a:	4604      	mov	r4, r0
 800414c:	9209      	str	r2, [sp, #36]	; 0x24
 800414e:	930c      	str	r3, [sp, #48]	; 0x30
 8004150:	46bb      	mov	fp, r7
 8004152:	b975      	cbnz	r5, 8004172 <_dtoa_r+0x42>
 8004154:	2010      	movs	r0, #16
 8004156:	f001 f80f 	bl	8005178 <malloc>
 800415a:	4602      	mov	r2, r0
 800415c:	6260      	str	r0, [r4, #36]	; 0x24
 800415e:	b920      	cbnz	r0, 800416a <_dtoa_r+0x3a>
 8004160:	4ba7      	ldr	r3, [pc, #668]	; (8004400 <_dtoa_r+0x2d0>)
 8004162:	21ea      	movs	r1, #234	; 0xea
 8004164:	48a7      	ldr	r0, [pc, #668]	; (8004404 <_dtoa_r+0x2d4>)
 8004166:	f7ff ff39 	bl	8003fdc <__assert_func>
 800416a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800416e:	6005      	str	r5, [r0, #0]
 8004170:	60c5      	str	r5, [r0, #12]
 8004172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	b151      	cbz	r1, 800418e <_dtoa_r+0x5e>
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	604a      	str	r2, [r1, #4]
 800417c:	2301      	movs	r3, #1
 800417e:	4093      	lsls	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
 8004182:	4620      	mov	r0, r4
 8004184:	f001 f860 	bl	8005248 <_Bfree>
 8004188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	1e3b      	subs	r3, r7, #0
 8004190:	bfaa      	itet	ge
 8004192:	2300      	movge	r3, #0
 8004194:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004198:	f8c8 3000 	strge.w	r3, [r8]
 800419c:	4b9a      	ldr	r3, [pc, #616]	; (8004408 <_dtoa_r+0x2d8>)
 800419e:	bfbc      	itt	lt
 80041a0:	2201      	movlt	r2, #1
 80041a2:	f8c8 2000 	strlt.w	r2, [r8]
 80041a6:	ea33 030b 	bics.w	r3, r3, fp
 80041aa:	d11b      	bne.n	80041e4 <_dtoa_r+0xb4>
 80041ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041b8:	4333      	orrs	r3, r6
 80041ba:	f000 8592 	beq.w	8004ce2 <_dtoa_r+0xbb2>
 80041be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041c0:	b963      	cbnz	r3, 80041dc <_dtoa_r+0xac>
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <_dtoa_r+0x2dc>)
 80041c4:	e022      	b.n	800420c <_dtoa_r+0xdc>
 80041c6:	4b92      	ldr	r3, [pc, #584]	; (8004410 <_dtoa_r+0x2e0>)
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	3308      	adds	r3, #8
 80041cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	9801      	ldr	r0, [sp, #4]
 80041d2:	b013      	add	sp, #76	; 0x4c
 80041d4:	ecbd 8b04 	vpop	{d8-d9}
 80041d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041dc:	4b8b      	ldr	r3, [pc, #556]	; (800440c <_dtoa_r+0x2dc>)
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	3303      	adds	r3, #3
 80041e2:	e7f3      	b.n	80041cc <_dtoa_r+0x9c>
 80041e4:	2200      	movs	r2, #0
 80041e6:	2300      	movs	r3, #0
 80041e8:	4650      	mov	r0, sl
 80041ea:	4659      	mov	r1, fp
 80041ec:	f7fc fc94 	bl	8000b18 <__aeabi_dcmpeq>
 80041f0:	ec4b ab19 	vmov	d9, sl, fp
 80041f4:	4680      	mov	r8, r0
 80041f6:	b158      	cbz	r0, 8004210 <_dtoa_r+0xe0>
 80041f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041fa:	2301      	movs	r3, #1
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 856b 	beq.w	8004cdc <_dtoa_r+0xbac>
 8004206:	4883      	ldr	r0, [pc, #524]	; (8004414 <_dtoa_r+0x2e4>)
 8004208:	6018      	str	r0, [r3, #0]
 800420a:	1e43      	subs	r3, r0, #1
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	e7df      	b.n	80041d0 <_dtoa_r+0xa0>
 8004210:	ec4b ab10 	vmov	d0, sl, fp
 8004214:	aa10      	add	r2, sp, #64	; 0x40
 8004216:	a911      	add	r1, sp, #68	; 0x44
 8004218:	4620      	mov	r0, r4
 800421a:	f001 fafd 	bl	8005818 <__d2b>
 800421e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004222:	ee08 0a10 	vmov	s16, r0
 8004226:	2d00      	cmp	r5, #0
 8004228:	f000 8084 	beq.w	8004334 <_dtoa_r+0x204>
 800422c:	ee19 3a90 	vmov	r3, s19
 8004230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004234:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004238:	4656      	mov	r6, sl
 800423a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800423e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004242:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004246:	4b74      	ldr	r3, [pc, #464]	; (8004418 <_dtoa_r+0x2e8>)
 8004248:	2200      	movs	r2, #0
 800424a:	4630      	mov	r0, r6
 800424c:	4639      	mov	r1, r7
 800424e:	f7fc f843 	bl	80002d8 <__aeabi_dsub>
 8004252:	a365      	add	r3, pc, #404	; (adr r3, 80043e8 <_dtoa_r+0x2b8>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f7fc f9f6 	bl	8000648 <__aeabi_dmul>
 800425c:	a364      	add	r3, pc, #400	; (adr r3, 80043f0 <_dtoa_r+0x2c0>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f7fc f83b 	bl	80002dc <__adddf3>
 8004266:	4606      	mov	r6, r0
 8004268:	4628      	mov	r0, r5
 800426a:	460f      	mov	r7, r1
 800426c:	f7fc f982 	bl	8000574 <__aeabi_i2d>
 8004270:	a361      	add	r3, pc, #388	; (adr r3, 80043f8 <_dtoa_r+0x2c8>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc f9e7 	bl	8000648 <__aeabi_dmul>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4630      	mov	r0, r6
 8004280:	4639      	mov	r1, r7
 8004282:	f7fc f82b 	bl	80002dc <__adddf3>
 8004286:	4606      	mov	r6, r0
 8004288:	460f      	mov	r7, r1
 800428a:	f7fc fc8d 	bl	8000ba8 <__aeabi_d2iz>
 800428e:	2200      	movs	r2, #0
 8004290:	9000      	str	r0, [sp, #0]
 8004292:	2300      	movs	r3, #0
 8004294:	4630      	mov	r0, r6
 8004296:	4639      	mov	r1, r7
 8004298:	f7fc fc48 	bl	8000b2c <__aeabi_dcmplt>
 800429c:	b150      	cbz	r0, 80042b4 <_dtoa_r+0x184>
 800429e:	9800      	ldr	r0, [sp, #0]
 80042a0:	f7fc f968 	bl	8000574 <__aeabi_i2d>
 80042a4:	4632      	mov	r2, r6
 80042a6:	463b      	mov	r3, r7
 80042a8:	f7fc fc36 	bl	8000b18 <__aeabi_dcmpeq>
 80042ac:	b910      	cbnz	r0, 80042b4 <_dtoa_r+0x184>
 80042ae:	9b00      	ldr	r3, [sp, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	9b00      	ldr	r3, [sp, #0]
 80042b6:	2b16      	cmp	r3, #22
 80042b8:	d85a      	bhi.n	8004370 <_dtoa_r+0x240>
 80042ba:	9a00      	ldr	r2, [sp, #0]
 80042bc:	4b57      	ldr	r3, [pc, #348]	; (800441c <_dtoa_r+0x2ec>)
 80042be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	ec51 0b19 	vmov	r0, r1, d9
 80042ca:	f7fc fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d050      	beq.n	8004374 <_dtoa_r+0x244>
 80042d2:	9b00      	ldr	r3, [sp, #0]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2300      	movs	r3, #0
 80042da:	930b      	str	r3, [sp, #44]	; 0x2c
 80042dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042de:	1b5d      	subs	r5, r3, r5
 80042e0:	1e6b      	subs	r3, r5, #1
 80042e2:	9305      	str	r3, [sp, #20]
 80042e4:	bf45      	ittet	mi
 80042e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80042ea:	9304      	strmi	r3, [sp, #16]
 80042ec:	2300      	movpl	r3, #0
 80042ee:	2300      	movmi	r3, #0
 80042f0:	bf4c      	ite	mi
 80042f2:	9305      	strmi	r3, [sp, #20]
 80042f4:	9304      	strpl	r3, [sp, #16]
 80042f6:	9b00      	ldr	r3, [sp, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db3d      	blt.n	8004378 <_dtoa_r+0x248>
 80042fc:	9b05      	ldr	r3, [sp, #20]
 80042fe:	9a00      	ldr	r2, [sp, #0]
 8004300:	920a      	str	r2, [sp, #40]	; 0x28
 8004302:	4413      	add	r3, r2
 8004304:	9305      	str	r3, [sp, #20]
 8004306:	2300      	movs	r3, #0
 8004308:	9307      	str	r3, [sp, #28]
 800430a:	9b06      	ldr	r3, [sp, #24]
 800430c:	2b09      	cmp	r3, #9
 800430e:	f200 8089 	bhi.w	8004424 <_dtoa_r+0x2f4>
 8004312:	2b05      	cmp	r3, #5
 8004314:	bfc4      	itt	gt
 8004316:	3b04      	subgt	r3, #4
 8004318:	9306      	strgt	r3, [sp, #24]
 800431a:	9b06      	ldr	r3, [sp, #24]
 800431c:	f1a3 0302 	sub.w	r3, r3, #2
 8004320:	bfcc      	ite	gt
 8004322:	2500      	movgt	r5, #0
 8004324:	2501      	movle	r5, #1
 8004326:	2b03      	cmp	r3, #3
 8004328:	f200 8087 	bhi.w	800443a <_dtoa_r+0x30a>
 800432c:	e8df f003 	tbb	[pc, r3]
 8004330:	59383a2d 	.word	0x59383a2d
 8004334:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004338:	441d      	add	r5, r3
 800433a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800433e:	2b20      	cmp	r3, #32
 8004340:	bfc1      	itttt	gt
 8004342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004346:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800434a:	fa0b f303 	lslgt.w	r3, fp, r3
 800434e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004352:	bfda      	itte	le
 8004354:	f1c3 0320 	rsble	r3, r3, #32
 8004358:	fa06 f003 	lslle.w	r0, r6, r3
 800435c:	4318      	orrgt	r0, r3
 800435e:	f7fc f8f9 	bl	8000554 <__aeabi_ui2d>
 8004362:	2301      	movs	r3, #1
 8004364:	4606      	mov	r6, r0
 8004366:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800436a:	3d01      	subs	r5, #1
 800436c:	930e      	str	r3, [sp, #56]	; 0x38
 800436e:	e76a      	b.n	8004246 <_dtoa_r+0x116>
 8004370:	2301      	movs	r3, #1
 8004372:	e7b2      	b.n	80042da <_dtoa_r+0x1aa>
 8004374:	900b      	str	r0, [sp, #44]	; 0x2c
 8004376:	e7b1      	b.n	80042dc <_dtoa_r+0x1ac>
 8004378:	9b04      	ldr	r3, [sp, #16]
 800437a:	9a00      	ldr	r2, [sp, #0]
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	9304      	str	r3, [sp, #16]
 8004380:	4253      	negs	r3, r2
 8004382:	9307      	str	r3, [sp, #28]
 8004384:	2300      	movs	r3, #0
 8004386:	930a      	str	r3, [sp, #40]	; 0x28
 8004388:	e7bf      	b.n	800430a <_dtoa_r+0x1da>
 800438a:	2300      	movs	r3, #0
 800438c:	9308      	str	r3, [sp, #32]
 800438e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	dc55      	bgt.n	8004440 <_dtoa_r+0x310>
 8004394:	2301      	movs	r3, #1
 8004396:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800439a:	461a      	mov	r2, r3
 800439c:	9209      	str	r2, [sp, #36]	; 0x24
 800439e:	e00c      	b.n	80043ba <_dtoa_r+0x28a>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e7f3      	b.n	800438c <_dtoa_r+0x25c>
 80043a4:	2300      	movs	r3, #0
 80043a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a8:	9308      	str	r3, [sp, #32]
 80043aa:	9b00      	ldr	r3, [sp, #0]
 80043ac:	4413      	add	r3, r2
 80043ae:	9302      	str	r3, [sp, #8]
 80043b0:	3301      	adds	r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	9303      	str	r3, [sp, #12]
 80043b6:	bfb8      	it	lt
 80043b8:	2301      	movlt	r3, #1
 80043ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043bc:	2200      	movs	r2, #0
 80043be:	6042      	str	r2, [r0, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	f102 0614 	add.w	r6, r2, #20
 80043c6:	429e      	cmp	r6, r3
 80043c8:	6841      	ldr	r1, [r0, #4]
 80043ca:	d93d      	bls.n	8004448 <_dtoa_r+0x318>
 80043cc:	4620      	mov	r0, r4
 80043ce:	f000 fefb 	bl	80051c8 <_Balloc>
 80043d2:	9001      	str	r0, [sp, #4]
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d13b      	bne.n	8004450 <_dtoa_r+0x320>
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <_dtoa_r+0x2f0>)
 80043da:	4602      	mov	r2, r0
 80043dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043e0:	e6c0      	b.n	8004164 <_dtoa_r+0x34>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e7df      	b.n	80043a6 <_dtoa_r+0x276>
 80043e6:	bf00      	nop
 80043e8:	636f4361 	.word	0x636f4361
 80043ec:	3fd287a7 	.word	0x3fd287a7
 80043f0:	8b60c8b3 	.word	0x8b60c8b3
 80043f4:	3fc68a28 	.word	0x3fc68a28
 80043f8:	509f79fb 	.word	0x509f79fb
 80043fc:	3fd34413 	.word	0x3fd34413
 8004400:	0801287a 	.word	0x0801287a
 8004404:	08012959 	.word	0x08012959
 8004408:	7ff00000 	.word	0x7ff00000
 800440c:	08012955 	.word	0x08012955
 8004410:	0801294c 	.word	0x0801294c
 8004414:	08008960 	.word	0x08008960
 8004418:	3ff80000 	.word	0x3ff80000
 800441c:	08012af8 	.word	0x08012af8
 8004420:	080129d6 	.word	0x080129d6
 8004424:	2501      	movs	r5, #1
 8004426:	2300      	movs	r3, #0
 8004428:	9306      	str	r3, [sp, #24]
 800442a:	9508      	str	r5, [sp, #32]
 800442c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004430:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004434:	2200      	movs	r2, #0
 8004436:	2312      	movs	r3, #18
 8004438:	e7b0      	b.n	800439c <_dtoa_r+0x26c>
 800443a:	2301      	movs	r3, #1
 800443c:	9308      	str	r3, [sp, #32]
 800443e:	e7f5      	b.n	800442c <_dtoa_r+0x2fc>
 8004440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004442:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004446:	e7b8      	b.n	80043ba <_dtoa_r+0x28a>
 8004448:	3101      	adds	r1, #1
 800444a:	6041      	str	r1, [r0, #4]
 800444c:	0052      	lsls	r2, r2, #1
 800444e:	e7b8      	b.n	80043c2 <_dtoa_r+0x292>
 8004450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004452:	9a01      	ldr	r2, [sp, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	2b0e      	cmp	r3, #14
 800445a:	f200 809d 	bhi.w	8004598 <_dtoa_r+0x468>
 800445e:	2d00      	cmp	r5, #0
 8004460:	f000 809a 	beq.w	8004598 <_dtoa_r+0x468>
 8004464:	9b00      	ldr	r3, [sp, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	dd32      	ble.n	80044d0 <_dtoa_r+0x3a0>
 800446a:	4ab7      	ldr	r2, [pc, #732]	; (8004748 <_dtoa_r+0x618>)
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004478:	9b00      	ldr	r3, [sp, #0]
 800447a:	05d8      	lsls	r0, r3, #23
 800447c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004480:	d516      	bpl.n	80044b0 <_dtoa_r+0x380>
 8004482:	4bb2      	ldr	r3, [pc, #712]	; (800474c <_dtoa_r+0x61c>)
 8004484:	ec51 0b19 	vmov	r0, r1, d9
 8004488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800448c:	f7fc fa06 	bl	800089c <__aeabi_ddiv>
 8004490:	f007 070f 	and.w	r7, r7, #15
 8004494:	4682      	mov	sl, r0
 8004496:	468b      	mov	fp, r1
 8004498:	2503      	movs	r5, #3
 800449a:	4eac      	ldr	r6, [pc, #688]	; (800474c <_dtoa_r+0x61c>)
 800449c:	b957      	cbnz	r7, 80044b4 <_dtoa_r+0x384>
 800449e:	4642      	mov	r2, r8
 80044a0:	464b      	mov	r3, r9
 80044a2:	4650      	mov	r0, sl
 80044a4:	4659      	mov	r1, fp
 80044a6:	f7fc f9f9 	bl	800089c <__aeabi_ddiv>
 80044aa:	4682      	mov	sl, r0
 80044ac:	468b      	mov	fp, r1
 80044ae:	e028      	b.n	8004502 <_dtoa_r+0x3d2>
 80044b0:	2502      	movs	r5, #2
 80044b2:	e7f2      	b.n	800449a <_dtoa_r+0x36a>
 80044b4:	07f9      	lsls	r1, r7, #31
 80044b6:	d508      	bpl.n	80044ca <_dtoa_r+0x39a>
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044c0:	f7fc f8c2 	bl	8000648 <__aeabi_dmul>
 80044c4:	3501      	adds	r5, #1
 80044c6:	4680      	mov	r8, r0
 80044c8:	4689      	mov	r9, r1
 80044ca:	107f      	asrs	r7, r7, #1
 80044cc:	3608      	adds	r6, #8
 80044ce:	e7e5      	b.n	800449c <_dtoa_r+0x36c>
 80044d0:	f000 809b 	beq.w	800460a <_dtoa_r+0x4da>
 80044d4:	9b00      	ldr	r3, [sp, #0]
 80044d6:	4f9d      	ldr	r7, [pc, #628]	; (800474c <_dtoa_r+0x61c>)
 80044d8:	425e      	negs	r6, r3
 80044da:	4b9b      	ldr	r3, [pc, #620]	; (8004748 <_dtoa_r+0x618>)
 80044dc:	f006 020f 	and.w	r2, r6, #15
 80044e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	ec51 0b19 	vmov	r0, r1, d9
 80044ec:	f7fc f8ac 	bl	8000648 <__aeabi_dmul>
 80044f0:	1136      	asrs	r6, r6, #4
 80044f2:	4682      	mov	sl, r0
 80044f4:	468b      	mov	fp, r1
 80044f6:	2300      	movs	r3, #0
 80044f8:	2502      	movs	r5, #2
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d17a      	bne.n	80045f4 <_dtoa_r+0x4c4>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1d3      	bne.n	80044aa <_dtoa_r+0x37a>
 8004502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8082 	beq.w	800460e <_dtoa_r+0x4de>
 800450a:	4b91      	ldr	r3, [pc, #580]	; (8004750 <_dtoa_r+0x620>)
 800450c:	2200      	movs	r2, #0
 800450e:	4650      	mov	r0, sl
 8004510:	4659      	mov	r1, fp
 8004512:	f7fc fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8004516:	2800      	cmp	r0, #0
 8004518:	d079      	beq.n	800460e <_dtoa_r+0x4de>
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d076      	beq.n	800460e <_dtoa_r+0x4de>
 8004520:	9b02      	ldr	r3, [sp, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	dd36      	ble.n	8004594 <_dtoa_r+0x464>
 8004526:	9b00      	ldr	r3, [sp, #0]
 8004528:	4650      	mov	r0, sl
 800452a:	4659      	mov	r1, fp
 800452c:	1e5f      	subs	r7, r3, #1
 800452e:	2200      	movs	r2, #0
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <_dtoa_r+0x624>)
 8004532:	f7fc f889 	bl	8000648 <__aeabi_dmul>
 8004536:	9e02      	ldr	r6, [sp, #8]
 8004538:	4682      	mov	sl, r0
 800453a:	468b      	mov	fp, r1
 800453c:	3501      	adds	r5, #1
 800453e:	4628      	mov	r0, r5
 8004540:	f7fc f818 	bl	8000574 <__aeabi_i2d>
 8004544:	4652      	mov	r2, sl
 8004546:	465b      	mov	r3, fp
 8004548:	f7fc f87e 	bl	8000648 <__aeabi_dmul>
 800454c:	4b82      	ldr	r3, [pc, #520]	; (8004758 <_dtoa_r+0x628>)
 800454e:	2200      	movs	r2, #0
 8004550:	f7fb fec4 	bl	80002dc <__adddf3>
 8004554:	46d0      	mov	r8, sl
 8004556:	46d9      	mov	r9, fp
 8004558:	4682      	mov	sl, r0
 800455a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800455e:	2e00      	cmp	r6, #0
 8004560:	d158      	bne.n	8004614 <_dtoa_r+0x4e4>
 8004562:	4b7e      	ldr	r3, [pc, #504]	; (800475c <_dtoa_r+0x62c>)
 8004564:	2200      	movs	r2, #0
 8004566:	4640      	mov	r0, r8
 8004568:	4649      	mov	r1, r9
 800456a:	f7fb feb5 	bl	80002d8 <__aeabi_dsub>
 800456e:	4652      	mov	r2, sl
 8004570:	465b      	mov	r3, fp
 8004572:	4680      	mov	r8, r0
 8004574:	4689      	mov	r9, r1
 8004576:	f7fc faf7 	bl	8000b68 <__aeabi_dcmpgt>
 800457a:	2800      	cmp	r0, #0
 800457c:	f040 8295 	bne.w	8004aaa <_dtoa_r+0x97a>
 8004580:	4652      	mov	r2, sl
 8004582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004586:	4640      	mov	r0, r8
 8004588:	4649      	mov	r1, r9
 800458a:	f7fc facf 	bl	8000b2c <__aeabi_dcmplt>
 800458e:	2800      	cmp	r0, #0
 8004590:	f040 8289 	bne.w	8004aa6 <_dtoa_r+0x976>
 8004594:	ec5b ab19 	vmov	sl, fp, d9
 8004598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800459a:	2b00      	cmp	r3, #0
 800459c:	f2c0 8148 	blt.w	8004830 <_dtoa_r+0x700>
 80045a0:	9a00      	ldr	r2, [sp, #0]
 80045a2:	2a0e      	cmp	r2, #14
 80045a4:	f300 8144 	bgt.w	8004830 <_dtoa_r+0x700>
 80045a8:	4b67      	ldr	r3, [pc, #412]	; (8004748 <_dtoa_r+0x618>)
 80045aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f280 80d5 	bge.w	8004764 <_dtoa_r+0x634>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f300 80d1 	bgt.w	8004764 <_dtoa_r+0x634>
 80045c2:	f040 826f 	bne.w	8004aa4 <_dtoa_r+0x974>
 80045c6:	4b65      	ldr	r3, [pc, #404]	; (800475c <_dtoa_r+0x62c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	4640      	mov	r0, r8
 80045cc:	4649      	mov	r1, r9
 80045ce:	f7fc f83b 	bl	8000648 <__aeabi_dmul>
 80045d2:	4652      	mov	r2, sl
 80045d4:	465b      	mov	r3, fp
 80045d6:	f7fc fabd 	bl	8000b54 <__aeabi_dcmpge>
 80045da:	9e03      	ldr	r6, [sp, #12]
 80045dc:	4637      	mov	r7, r6
 80045de:	2800      	cmp	r0, #0
 80045e0:	f040 8245 	bne.w	8004a6e <_dtoa_r+0x93e>
 80045e4:	9d01      	ldr	r5, [sp, #4]
 80045e6:	2331      	movs	r3, #49	; 0x31
 80045e8:	f805 3b01 	strb.w	r3, [r5], #1
 80045ec:	9b00      	ldr	r3, [sp, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	e240      	b.n	8004a76 <_dtoa_r+0x946>
 80045f4:	07f2      	lsls	r2, r6, #31
 80045f6:	d505      	bpl.n	8004604 <_dtoa_r+0x4d4>
 80045f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045fc:	f7fc f824 	bl	8000648 <__aeabi_dmul>
 8004600:	3501      	adds	r5, #1
 8004602:	2301      	movs	r3, #1
 8004604:	1076      	asrs	r6, r6, #1
 8004606:	3708      	adds	r7, #8
 8004608:	e777      	b.n	80044fa <_dtoa_r+0x3ca>
 800460a:	2502      	movs	r5, #2
 800460c:	e779      	b.n	8004502 <_dtoa_r+0x3d2>
 800460e:	9f00      	ldr	r7, [sp, #0]
 8004610:	9e03      	ldr	r6, [sp, #12]
 8004612:	e794      	b.n	800453e <_dtoa_r+0x40e>
 8004614:	9901      	ldr	r1, [sp, #4]
 8004616:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <_dtoa_r+0x618>)
 8004618:	4431      	add	r1, r6
 800461a:	910d      	str	r1, [sp, #52]	; 0x34
 800461c:	9908      	ldr	r1, [sp, #32]
 800461e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004626:	2900      	cmp	r1, #0
 8004628:	d043      	beq.n	80046b2 <_dtoa_r+0x582>
 800462a:	494d      	ldr	r1, [pc, #308]	; (8004760 <_dtoa_r+0x630>)
 800462c:	2000      	movs	r0, #0
 800462e:	f7fc f935 	bl	800089c <__aeabi_ddiv>
 8004632:	4652      	mov	r2, sl
 8004634:	465b      	mov	r3, fp
 8004636:	f7fb fe4f 	bl	80002d8 <__aeabi_dsub>
 800463a:	9d01      	ldr	r5, [sp, #4]
 800463c:	4682      	mov	sl, r0
 800463e:	468b      	mov	fp, r1
 8004640:	4649      	mov	r1, r9
 8004642:	4640      	mov	r0, r8
 8004644:	f7fc fab0 	bl	8000ba8 <__aeabi_d2iz>
 8004648:	4606      	mov	r6, r0
 800464a:	f7fb ff93 	bl	8000574 <__aeabi_i2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4640      	mov	r0, r8
 8004654:	4649      	mov	r1, r9
 8004656:	f7fb fe3f 	bl	80002d8 <__aeabi_dsub>
 800465a:	3630      	adds	r6, #48	; 0x30
 800465c:	f805 6b01 	strb.w	r6, [r5], #1
 8004660:	4652      	mov	r2, sl
 8004662:	465b      	mov	r3, fp
 8004664:	4680      	mov	r8, r0
 8004666:	4689      	mov	r9, r1
 8004668:	f7fc fa60 	bl	8000b2c <__aeabi_dcmplt>
 800466c:	2800      	cmp	r0, #0
 800466e:	d163      	bne.n	8004738 <_dtoa_r+0x608>
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	4936      	ldr	r1, [pc, #216]	; (8004750 <_dtoa_r+0x620>)
 8004676:	2000      	movs	r0, #0
 8004678:	f7fb fe2e 	bl	80002d8 <__aeabi_dsub>
 800467c:	4652      	mov	r2, sl
 800467e:	465b      	mov	r3, fp
 8004680:	f7fc fa54 	bl	8000b2c <__aeabi_dcmplt>
 8004684:	2800      	cmp	r0, #0
 8004686:	f040 80b5 	bne.w	80047f4 <_dtoa_r+0x6c4>
 800468a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800468c:	429d      	cmp	r5, r3
 800468e:	d081      	beq.n	8004594 <_dtoa_r+0x464>
 8004690:	4b30      	ldr	r3, [pc, #192]	; (8004754 <_dtoa_r+0x624>)
 8004692:	2200      	movs	r2, #0
 8004694:	4650      	mov	r0, sl
 8004696:	4659      	mov	r1, fp
 8004698:	f7fb ffd6 	bl	8000648 <__aeabi_dmul>
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <_dtoa_r+0x624>)
 800469e:	4682      	mov	sl, r0
 80046a0:	468b      	mov	fp, r1
 80046a2:	4640      	mov	r0, r8
 80046a4:	4649      	mov	r1, r9
 80046a6:	2200      	movs	r2, #0
 80046a8:	f7fb ffce 	bl	8000648 <__aeabi_dmul>
 80046ac:	4680      	mov	r8, r0
 80046ae:	4689      	mov	r9, r1
 80046b0:	e7c6      	b.n	8004640 <_dtoa_r+0x510>
 80046b2:	4650      	mov	r0, sl
 80046b4:	4659      	mov	r1, fp
 80046b6:	f7fb ffc7 	bl	8000648 <__aeabi_dmul>
 80046ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046bc:	9d01      	ldr	r5, [sp, #4]
 80046be:	930f      	str	r3, [sp, #60]	; 0x3c
 80046c0:	4682      	mov	sl, r0
 80046c2:	468b      	mov	fp, r1
 80046c4:	4649      	mov	r1, r9
 80046c6:	4640      	mov	r0, r8
 80046c8:	f7fc fa6e 	bl	8000ba8 <__aeabi_d2iz>
 80046cc:	4606      	mov	r6, r0
 80046ce:	f7fb ff51 	bl	8000574 <__aeabi_i2d>
 80046d2:	3630      	adds	r6, #48	; 0x30
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4640      	mov	r0, r8
 80046da:	4649      	mov	r1, r9
 80046dc:	f7fb fdfc 	bl	80002d8 <__aeabi_dsub>
 80046e0:	f805 6b01 	strb.w	r6, [r5], #1
 80046e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046e6:	429d      	cmp	r5, r3
 80046e8:	4680      	mov	r8, r0
 80046ea:	4689      	mov	r9, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	d124      	bne.n	800473c <_dtoa_r+0x60c>
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <_dtoa_r+0x630>)
 80046f4:	4650      	mov	r0, sl
 80046f6:	4659      	mov	r1, fp
 80046f8:	f7fb fdf0 	bl	80002dc <__adddf3>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fc fa30 	bl	8000b68 <__aeabi_dcmpgt>
 8004708:	2800      	cmp	r0, #0
 800470a:	d173      	bne.n	80047f4 <_dtoa_r+0x6c4>
 800470c:	4652      	mov	r2, sl
 800470e:	465b      	mov	r3, fp
 8004710:	4913      	ldr	r1, [pc, #76]	; (8004760 <_dtoa_r+0x630>)
 8004712:	2000      	movs	r0, #0
 8004714:	f7fb fde0 	bl	80002d8 <__aeabi_dsub>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fc fa04 	bl	8000b2c <__aeabi_dcmplt>
 8004724:	2800      	cmp	r0, #0
 8004726:	f43f af35 	beq.w	8004594 <_dtoa_r+0x464>
 800472a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800472c:	1e6b      	subs	r3, r5, #1
 800472e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004730:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004734:	2b30      	cmp	r3, #48	; 0x30
 8004736:	d0f8      	beq.n	800472a <_dtoa_r+0x5fa>
 8004738:	9700      	str	r7, [sp, #0]
 800473a:	e049      	b.n	80047d0 <_dtoa_r+0x6a0>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <_dtoa_r+0x624>)
 800473e:	f7fb ff83 	bl	8000648 <__aeabi_dmul>
 8004742:	4680      	mov	r8, r0
 8004744:	4689      	mov	r9, r1
 8004746:	e7bd      	b.n	80046c4 <_dtoa_r+0x594>
 8004748:	08012af8 	.word	0x08012af8
 800474c:	08012ad0 	.word	0x08012ad0
 8004750:	3ff00000 	.word	0x3ff00000
 8004754:	40240000 	.word	0x40240000
 8004758:	401c0000 	.word	0x401c0000
 800475c:	40140000 	.word	0x40140000
 8004760:	3fe00000 	.word	0x3fe00000
 8004764:	9d01      	ldr	r5, [sp, #4]
 8004766:	4656      	mov	r6, sl
 8004768:	465f      	mov	r7, fp
 800476a:	4642      	mov	r2, r8
 800476c:	464b      	mov	r3, r9
 800476e:	4630      	mov	r0, r6
 8004770:	4639      	mov	r1, r7
 8004772:	f7fc f893 	bl	800089c <__aeabi_ddiv>
 8004776:	f7fc fa17 	bl	8000ba8 <__aeabi_d2iz>
 800477a:	4682      	mov	sl, r0
 800477c:	f7fb fefa 	bl	8000574 <__aeabi_i2d>
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	f7fb ff60 	bl	8000648 <__aeabi_dmul>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004794:	f7fb fda0 	bl	80002d8 <__aeabi_dsub>
 8004798:	f805 6b01 	strb.w	r6, [r5], #1
 800479c:	9e01      	ldr	r6, [sp, #4]
 800479e:	9f03      	ldr	r7, [sp, #12]
 80047a0:	1bae      	subs	r6, r5, r6
 80047a2:	42b7      	cmp	r7, r6
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	d135      	bne.n	8004816 <_dtoa_r+0x6e6>
 80047aa:	f7fb fd97 	bl	80002dc <__adddf3>
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	4606      	mov	r6, r0
 80047b4:	460f      	mov	r7, r1
 80047b6:	f7fc f9d7 	bl	8000b68 <__aeabi_dcmpgt>
 80047ba:	b9d0      	cbnz	r0, 80047f2 <_dtoa_r+0x6c2>
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	4630      	mov	r0, r6
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fc f9a8 	bl	8000b18 <__aeabi_dcmpeq>
 80047c8:	b110      	cbz	r0, 80047d0 <_dtoa_r+0x6a0>
 80047ca:	f01a 0f01 	tst.w	sl, #1
 80047ce:	d110      	bne.n	80047f2 <_dtoa_r+0x6c2>
 80047d0:	4620      	mov	r0, r4
 80047d2:	ee18 1a10 	vmov	r1, s16
 80047d6:	f000 fd37 	bl	8005248 <_Bfree>
 80047da:	2300      	movs	r3, #0
 80047dc:	9800      	ldr	r0, [sp, #0]
 80047de:	702b      	strb	r3, [r5, #0]
 80047e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047e2:	3001      	adds	r0, #1
 80047e4:	6018      	str	r0, [r3, #0]
 80047e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f43f acf1 	beq.w	80041d0 <_dtoa_r+0xa0>
 80047ee:	601d      	str	r5, [r3, #0]
 80047f0:	e4ee      	b.n	80041d0 <_dtoa_r+0xa0>
 80047f2:	9f00      	ldr	r7, [sp, #0]
 80047f4:	462b      	mov	r3, r5
 80047f6:	461d      	mov	r5, r3
 80047f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047fc:	2a39      	cmp	r2, #57	; 0x39
 80047fe:	d106      	bne.n	800480e <_dtoa_r+0x6de>
 8004800:	9a01      	ldr	r2, [sp, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d1f7      	bne.n	80047f6 <_dtoa_r+0x6c6>
 8004806:	9901      	ldr	r1, [sp, #4]
 8004808:	2230      	movs	r2, #48	; 0x30
 800480a:	3701      	adds	r7, #1
 800480c:	700a      	strb	r2, [r1, #0]
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	3201      	adds	r2, #1
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e790      	b.n	8004738 <_dtoa_r+0x608>
 8004816:	4ba6      	ldr	r3, [pc, #664]	; (8004ab0 <_dtoa_r+0x980>)
 8004818:	2200      	movs	r2, #0
 800481a:	f7fb ff15 	bl	8000648 <__aeabi_dmul>
 800481e:	2200      	movs	r2, #0
 8004820:	2300      	movs	r3, #0
 8004822:	4606      	mov	r6, r0
 8004824:	460f      	mov	r7, r1
 8004826:	f7fc f977 	bl	8000b18 <__aeabi_dcmpeq>
 800482a:	2800      	cmp	r0, #0
 800482c:	d09d      	beq.n	800476a <_dtoa_r+0x63a>
 800482e:	e7cf      	b.n	80047d0 <_dtoa_r+0x6a0>
 8004830:	9a08      	ldr	r2, [sp, #32]
 8004832:	2a00      	cmp	r2, #0
 8004834:	f000 80d7 	beq.w	80049e6 <_dtoa_r+0x8b6>
 8004838:	9a06      	ldr	r2, [sp, #24]
 800483a:	2a01      	cmp	r2, #1
 800483c:	f300 80ba 	bgt.w	80049b4 <_dtoa_r+0x884>
 8004840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004842:	2a00      	cmp	r2, #0
 8004844:	f000 80b2 	beq.w	80049ac <_dtoa_r+0x87c>
 8004848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800484c:	9e07      	ldr	r6, [sp, #28]
 800484e:	9d04      	ldr	r5, [sp, #16]
 8004850:	9a04      	ldr	r2, [sp, #16]
 8004852:	441a      	add	r2, r3
 8004854:	9204      	str	r2, [sp, #16]
 8004856:	9a05      	ldr	r2, [sp, #20]
 8004858:	2101      	movs	r1, #1
 800485a:	441a      	add	r2, r3
 800485c:	4620      	mov	r0, r4
 800485e:	9205      	str	r2, [sp, #20]
 8004860:	f000 fdaa 	bl	80053b8 <__i2b>
 8004864:	4607      	mov	r7, r0
 8004866:	2d00      	cmp	r5, #0
 8004868:	dd0c      	ble.n	8004884 <_dtoa_r+0x754>
 800486a:	9b05      	ldr	r3, [sp, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	dd09      	ble.n	8004884 <_dtoa_r+0x754>
 8004870:	42ab      	cmp	r3, r5
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	bfa8      	it	ge
 8004876:	462b      	movge	r3, r5
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	9204      	str	r2, [sp, #16]
 800487c:	9a05      	ldr	r2, [sp, #20]
 800487e:	1aed      	subs	r5, r5, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	9b07      	ldr	r3, [sp, #28]
 8004886:	b31b      	cbz	r3, 80048d0 <_dtoa_r+0x7a0>
 8004888:	9b08      	ldr	r3, [sp, #32]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80af 	beq.w	80049ee <_dtoa_r+0x8be>
 8004890:	2e00      	cmp	r6, #0
 8004892:	dd13      	ble.n	80048bc <_dtoa_r+0x78c>
 8004894:	4639      	mov	r1, r7
 8004896:	4632      	mov	r2, r6
 8004898:	4620      	mov	r0, r4
 800489a:	f000 fe4d 	bl	8005538 <__pow5mult>
 800489e:	ee18 2a10 	vmov	r2, s16
 80048a2:	4601      	mov	r1, r0
 80048a4:	4607      	mov	r7, r0
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 fd9c 	bl	80053e4 <__multiply>
 80048ac:	ee18 1a10 	vmov	r1, s16
 80048b0:	4680      	mov	r8, r0
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 fcc8 	bl	8005248 <_Bfree>
 80048b8:	ee08 8a10 	vmov	s16, r8
 80048bc:	9b07      	ldr	r3, [sp, #28]
 80048be:	1b9a      	subs	r2, r3, r6
 80048c0:	d006      	beq.n	80048d0 <_dtoa_r+0x7a0>
 80048c2:	ee18 1a10 	vmov	r1, s16
 80048c6:	4620      	mov	r0, r4
 80048c8:	f000 fe36 	bl	8005538 <__pow5mult>
 80048cc:	ee08 0a10 	vmov	s16, r0
 80048d0:	2101      	movs	r1, #1
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fd70 	bl	80053b8 <__i2b>
 80048d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048da:	2b00      	cmp	r3, #0
 80048dc:	4606      	mov	r6, r0
 80048de:	f340 8088 	ble.w	80049f2 <_dtoa_r+0x8c2>
 80048e2:	461a      	mov	r2, r3
 80048e4:	4601      	mov	r1, r0
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 fe26 	bl	8005538 <__pow5mult>
 80048ec:	9b06      	ldr	r3, [sp, #24]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	4606      	mov	r6, r0
 80048f2:	f340 8081 	ble.w	80049f8 <_dtoa_r+0x8c8>
 80048f6:	f04f 0800 	mov.w	r8, #0
 80048fa:	6933      	ldr	r3, [r6, #16]
 80048fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004900:	6918      	ldr	r0, [r3, #16]
 8004902:	f000 fd09 	bl	8005318 <__hi0bits>
 8004906:	f1c0 0020 	rsb	r0, r0, #32
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	4418      	add	r0, r3
 800490e:	f010 001f 	ands.w	r0, r0, #31
 8004912:	f000 8092 	beq.w	8004a3a <_dtoa_r+0x90a>
 8004916:	f1c0 0320 	rsb	r3, r0, #32
 800491a:	2b04      	cmp	r3, #4
 800491c:	f340 808a 	ble.w	8004a34 <_dtoa_r+0x904>
 8004920:	f1c0 001c 	rsb	r0, r0, #28
 8004924:	9b04      	ldr	r3, [sp, #16]
 8004926:	4403      	add	r3, r0
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	9b05      	ldr	r3, [sp, #20]
 800492c:	4403      	add	r3, r0
 800492e:	4405      	add	r5, r0
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	9b04      	ldr	r3, [sp, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dd07      	ble.n	8004948 <_dtoa_r+0x818>
 8004938:	ee18 1a10 	vmov	r1, s16
 800493c:	461a      	mov	r2, r3
 800493e:	4620      	mov	r0, r4
 8004940:	f000 fe54 	bl	80055ec <__lshift>
 8004944:	ee08 0a10 	vmov	s16, r0
 8004948:	9b05      	ldr	r3, [sp, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	dd05      	ble.n	800495a <_dtoa_r+0x82a>
 800494e:	4631      	mov	r1, r6
 8004950:	461a      	mov	r2, r3
 8004952:	4620      	mov	r0, r4
 8004954:	f000 fe4a 	bl	80055ec <__lshift>
 8004958:	4606      	mov	r6, r0
 800495a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d06e      	beq.n	8004a3e <_dtoa_r+0x90e>
 8004960:	ee18 0a10 	vmov	r0, s16
 8004964:	4631      	mov	r1, r6
 8004966:	f000 feb1 	bl	80056cc <__mcmp>
 800496a:	2800      	cmp	r0, #0
 800496c:	da67      	bge.n	8004a3e <_dtoa_r+0x90e>
 800496e:	9b00      	ldr	r3, [sp, #0]
 8004970:	3b01      	subs	r3, #1
 8004972:	ee18 1a10 	vmov	r1, s16
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	220a      	movs	r2, #10
 800497a:	2300      	movs	r3, #0
 800497c:	4620      	mov	r0, r4
 800497e:	f000 fc85 	bl	800528c <__multadd>
 8004982:	9b08      	ldr	r3, [sp, #32]
 8004984:	ee08 0a10 	vmov	s16, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 81b1 	beq.w	8004cf0 <_dtoa_r+0xbc0>
 800498e:	2300      	movs	r3, #0
 8004990:	4639      	mov	r1, r7
 8004992:	220a      	movs	r2, #10
 8004994:	4620      	mov	r0, r4
 8004996:	f000 fc79 	bl	800528c <__multadd>
 800499a:	9b02      	ldr	r3, [sp, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	4607      	mov	r7, r0
 80049a0:	f300 808e 	bgt.w	8004ac0 <_dtoa_r+0x990>
 80049a4:	9b06      	ldr	r3, [sp, #24]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	dc51      	bgt.n	8004a4e <_dtoa_r+0x91e>
 80049aa:	e089      	b.n	8004ac0 <_dtoa_r+0x990>
 80049ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80049b2:	e74b      	b.n	800484c <_dtoa_r+0x71c>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	1e5e      	subs	r6, r3, #1
 80049b8:	9b07      	ldr	r3, [sp, #28]
 80049ba:	42b3      	cmp	r3, r6
 80049bc:	bfbf      	itttt	lt
 80049be:	9b07      	ldrlt	r3, [sp, #28]
 80049c0:	9607      	strlt	r6, [sp, #28]
 80049c2:	1af2      	sublt	r2, r6, r3
 80049c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80049c6:	bfb6      	itet	lt
 80049c8:	189b      	addlt	r3, r3, r2
 80049ca:	1b9e      	subge	r6, r3, r6
 80049cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	bfb8      	it	lt
 80049d2:	2600      	movlt	r6, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bfb7      	itett	lt
 80049d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80049dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80049e0:	1a9d      	sublt	r5, r3, r2
 80049e2:	2300      	movlt	r3, #0
 80049e4:	e734      	b.n	8004850 <_dtoa_r+0x720>
 80049e6:	9e07      	ldr	r6, [sp, #28]
 80049e8:	9d04      	ldr	r5, [sp, #16]
 80049ea:	9f08      	ldr	r7, [sp, #32]
 80049ec:	e73b      	b.n	8004866 <_dtoa_r+0x736>
 80049ee:	9a07      	ldr	r2, [sp, #28]
 80049f0:	e767      	b.n	80048c2 <_dtoa_r+0x792>
 80049f2:	9b06      	ldr	r3, [sp, #24]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	dc18      	bgt.n	8004a2a <_dtoa_r+0x8fa>
 80049f8:	f1ba 0f00 	cmp.w	sl, #0
 80049fc:	d115      	bne.n	8004a2a <_dtoa_r+0x8fa>
 80049fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a02:	b993      	cbnz	r3, 8004a2a <_dtoa_r+0x8fa>
 8004a04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a08:	0d1b      	lsrs	r3, r3, #20
 8004a0a:	051b      	lsls	r3, r3, #20
 8004a0c:	b183      	cbz	r3, 8004a30 <_dtoa_r+0x900>
 8004a0e:	9b04      	ldr	r3, [sp, #16]
 8004a10:	3301      	adds	r3, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	9b05      	ldr	r3, [sp, #20]
 8004a16:	3301      	adds	r3, #1
 8004a18:	9305      	str	r3, [sp, #20]
 8004a1a:	f04f 0801 	mov.w	r8, #1
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f47f af6a 	bne.w	80048fa <_dtoa_r+0x7ca>
 8004a26:	2001      	movs	r0, #1
 8004a28:	e76f      	b.n	800490a <_dtoa_r+0x7da>
 8004a2a:	f04f 0800 	mov.w	r8, #0
 8004a2e:	e7f6      	b.n	8004a1e <_dtoa_r+0x8ee>
 8004a30:	4698      	mov	r8, r3
 8004a32:	e7f4      	b.n	8004a1e <_dtoa_r+0x8ee>
 8004a34:	f43f af7d 	beq.w	8004932 <_dtoa_r+0x802>
 8004a38:	4618      	mov	r0, r3
 8004a3a:	301c      	adds	r0, #28
 8004a3c:	e772      	b.n	8004924 <_dtoa_r+0x7f4>
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dc37      	bgt.n	8004ab4 <_dtoa_r+0x984>
 8004a44:	9b06      	ldr	r3, [sp, #24]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	dd34      	ble.n	8004ab4 <_dtoa_r+0x984>
 8004a4a:	9b03      	ldr	r3, [sp, #12]
 8004a4c:	9302      	str	r3, [sp, #8]
 8004a4e:	9b02      	ldr	r3, [sp, #8]
 8004a50:	b96b      	cbnz	r3, 8004a6e <_dtoa_r+0x93e>
 8004a52:	4631      	mov	r1, r6
 8004a54:	2205      	movs	r2, #5
 8004a56:	4620      	mov	r0, r4
 8004a58:	f000 fc18 	bl	800528c <__multadd>
 8004a5c:	4601      	mov	r1, r0
 8004a5e:	4606      	mov	r6, r0
 8004a60:	ee18 0a10 	vmov	r0, s16
 8004a64:	f000 fe32 	bl	80056cc <__mcmp>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	f73f adbb 	bgt.w	80045e4 <_dtoa_r+0x4b4>
 8004a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a70:	9d01      	ldr	r5, [sp, #4]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 fbe3 	bl	8005248 <_Bfree>
 8004a82:	2f00      	cmp	r7, #0
 8004a84:	f43f aea4 	beq.w	80047d0 <_dtoa_r+0x6a0>
 8004a88:	f1b8 0f00 	cmp.w	r8, #0
 8004a8c:	d005      	beq.n	8004a9a <_dtoa_r+0x96a>
 8004a8e:	45b8      	cmp	r8, r7
 8004a90:	d003      	beq.n	8004a9a <_dtoa_r+0x96a>
 8004a92:	4641      	mov	r1, r8
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fbd7 	bl	8005248 <_Bfree>
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 fbd3 	bl	8005248 <_Bfree>
 8004aa2:	e695      	b.n	80047d0 <_dtoa_r+0x6a0>
 8004aa4:	2600      	movs	r6, #0
 8004aa6:	4637      	mov	r7, r6
 8004aa8:	e7e1      	b.n	8004a6e <_dtoa_r+0x93e>
 8004aaa:	9700      	str	r7, [sp, #0]
 8004aac:	4637      	mov	r7, r6
 8004aae:	e599      	b.n	80045e4 <_dtoa_r+0x4b4>
 8004ab0:	40240000 	.word	0x40240000
 8004ab4:	9b08      	ldr	r3, [sp, #32]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80ca 	beq.w	8004c50 <_dtoa_r+0xb20>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	9302      	str	r3, [sp, #8]
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	dd05      	ble.n	8004ad0 <_dtoa_r+0x9a0>
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fd8f 	bl	80055ec <__lshift>
 8004ace:	4607      	mov	r7, r0
 8004ad0:	f1b8 0f00 	cmp.w	r8, #0
 8004ad4:	d05b      	beq.n	8004b8e <_dtoa_r+0xa5e>
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f000 fb75 	bl	80051c8 <_Balloc>
 8004ade:	4605      	mov	r5, r0
 8004ae0:	b928      	cbnz	r0, 8004aee <_dtoa_r+0x9be>
 8004ae2:	4b87      	ldr	r3, [pc, #540]	; (8004d00 <_dtoa_r+0xbd0>)
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004aea:	f7ff bb3b 	b.w	8004164 <_dtoa_r+0x34>
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	3202      	adds	r2, #2
 8004af2:	0092      	lsls	r2, r2, #2
 8004af4:	f107 010c 	add.w	r1, r7, #12
 8004af8:	300c      	adds	r0, #12
 8004afa:	f000 fb57 	bl	80051ac <memcpy>
 8004afe:	2201      	movs	r2, #1
 8004b00:	4629      	mov	r1, r5
 8004b02:	4620      	mov	r0, r4
 8004b04:	f000 fd72 	bl	80055ec <__lshift>
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	f103 0901 	add.w	r9, r3, #1
 8004b0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	9305      	str	r3, [sp, #20]
 8004b16:	f00a 0301 	and.w	r3, sl, #1
 8004b1a:	46b8      	mov	r8, r7
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	4607      	mov	r7, r0
 8004b20:	4631      	mov	r1, r6
 8004b22:	ee18 0a10 	vmov	r0, s16
 8004b26:	f7ff fa77 	bl	8004018 <quorem>
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	9002      	str	r0, [sp, #8]
 8004b2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004b32:	ee18 0a10 	vmov	r0, s16
 8004b36:	f000 fdc9 	bl	80056cc <__mcmp>
 8004b3a:	463a      	mov	r2, r7
 8004b3c:	9003      	str	r0, [sp, #12]
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 fddf 	bl	8005704 <__mdiff>
 8004b46:	68c2      	ldr	r2, [r0, #12]
 8004b48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	bb02      	cbnz	r2, 8004b92 <_dtoa_r+0xa62>
 8004b50:	4601      	mov	r1, r0
 8004b52:	ee18 0a10 	vmov	r0, s16
 8004b56:	f000 fdb9 	bl	80056cc <__mcmp>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4620      	mov	r0, r4
 8004b60:	9207      	str	r2, [sp, #28]
 8004b62:	f000 fb71 	bl	8005248 <_Bfree>
 8004b66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004b6a:	ea43 0102 	orr.w	r1, r3, r2
 8004b6e:	9b04      	ldr	r3, [sp, #16]
 8004b70:	430b      	orrs	r3, r1
 8004b72:	464d      	mov	r5, r9
 8004b74:	d10f      	bne.n	8004b96 <_dtoa_r+0xa66>
 8004b76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b7a:	d02a      	beq.n	8004bd2 <_dtoa_r+0xaa2>
 8004b7c:	9b03      	ldr	r3, [sp, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dd02      	ble.n	8004b88 <_dtoa_r+0xa58>
 8004b82:	9b02      	ldr	r3, [sp, #8]
 8004b84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004b88:	f88b a000 	strb.w	sl, [fp]
 8004b8c:	e775      	b.n	8004a7a <_dtoa_r+0x94a>
 8004b8e:	4638      	mov	r0, r7
 8004b90:	e7ba      	b.n	8004b08 <_dtoa_r+0x9d8>
 8004b92:	2201      	movs	r2, #1
 8004b94:	e7e2      	b.n	8004b5c <_dtoa_r+0xa2c>
 8004b96:	9b03      	ldr	r3, [sp, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db04      	blt.n	8004ba6 <_dtoa_r+0xa76>
 8004b9c:	9906      	ldr	r1, [sp, #24]
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	9904      	ldr	r1, [sp, #16]
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	d122      	bne.n	8004bec <_dtoa_r+0xabc>
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	ddee      	ble.n	8004b88 <_dtoa_r+0xa58>
 8004baa:	ee18 1a10 	vmov	r1, s16
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fd1b 	bl	80055ec <__lshift>
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	ee08 0a10 	vmov	s16, r0
 8004bbc:	f000 fd86 	bl	80056cc <__mcmp>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	dc03      	bgt.n	8004bcc <_dtoa_r+0xa9c>
 8004bc4:	d1e0      	bne.n	8004b88 <_dtoa_r+0xa58>
 8004bc6:	f01a 0f01 	tst.w	sl, #1
 8004bca:	d0dd      	beq.n	8004b88 <_dtoa_r+0xa58>
 8004bcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bd0:	d1d7      	bne.n	8004b82 <_dtoa_r+0xa52>
 8004bd2:	2339      	movs	r3, #57	; 0x39
 8004bd4:	f88b 3000 	strb.w	r3, [fp]
 8004bd8:	462b      	mov	r3, r5
 8004bda:	461d      	mov	r5, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004be2:	2a39      	cmp	r2, #57	; 0x39
 8004be4:	d071      	beq.n	8004cca <_dtoa_r+0xb9a>
 8004be6:	3201      	adds	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e746      	b.n	8004a7a <_dtoa_r+0x94a>
 8004bec:	2a00      	cmp	r2, #0
 8004bee:	dd07      	ble.n	8004c00 <_dtoa_r+0xad0>
 8004bf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bf4:	d0ed      	beq.n	8004bd2 <_dtoa_r+0xaa2>
 8004bf6:	f10a 0301 	add.w	r3, sl, #1
 8004bfa:	f88b 3000 	strb.w	r3, [fp]
 8004bfe:	e73c      	b.n	8004a7a <_dtoa_r+0x94a>
 8004c00:	9b05      	ldr	r3, [sp, #20]
 8004c02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004c06:	4599      	cmp	r9, r3
 8004c08:	d047      	beq.n	8004c9a <_dtoa_r+0xb6a>
 8004c0a:	ee18 1a10 	vmov	r1, s16
 8004c0e:	2300      	movs	r3, #0
 8004c10:	220a      	movs	r2, #10
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 fb3a 	bl	800528c <__multadd>
 8004c18:	45b8      	cmp	r8, r7
 8004c1a:	ee08 0a10 	vmov	s16, r0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	f04f 020a 	mov.w	r2, #10
 8004c26:	4641      	mov	r1, r8
 8004c28:	4620      	mov	r0, r4
 8004c2a:	d106      	bne.n	8004c3a <_dtoa_r+0xb0a>
 8004c2c:	f000 fb2e 	bl	800528c <__multadd>
 8004c30:	4680      	mov	r8, r0
 8004c32:	4607      	mov	r7, r0
 8004c34:	f109 0901 	add.w	r9, r9, #1
 8004c38:	e772      	b.n	8004b20 <_dtoa_r+0x9f0>
 8004c3a:	f000 fb27 	bl	800528c <__multadd>
 8004c3e:	4639      	mov	r1, r7
 8004c40:	4680      	mov	r8, r0
 8004c42:	2300      	movs	r3, #0
 8004c44:	220a      	movs	r2, #10
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 fb20 	bl	800528c <__multadd>
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	e7f1      	b.n	8004c34 <_dtoa_r+0xb04>
 8004c50:	9b03      	ldr	r3, [sp, #12]
 8004c52:	9302      	str	r3, [sp, #8]
 8004c54:	9d01      	ldr	r5, [sp, #4]
 8004c56:	ee18 0a10 	vmov	r0, s16
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	f7ff f9dc 	bl	8004018 <quorem>
 8004c60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004c64:	9b01      	ldr	r3, [sp, #4]
 8004c66:	f805 ab01 	strb.w	sl, [r5], #1
 8004c6a:	1aea      	subs	r2, r5, r3
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	dd09      	ble.n	8004c86 <_dtoa_r+0xb56>
 8004c72:	ee18 1a10 	vmov	r1, s16
 8004c76:	2300      	movs	r3, #0
 8004c78:	220a      	movs	r2, #10
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 fb06 	bl	800528c <__multadd>
 8004c80:	ee08 0a10 	vmov	s16, r0
 8004c84:	e7e7      	b.n	8004c56 <_dtoa_r+0xb26>
 8004c86:	9b02      	ldr	r3, [sp, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bfc8      	it	gt
 8004c8c:	461d      	movgt	r5, r3
 8004c8e:	9b01      	ldr	r3, [sp, #4]
 8004c90:	bfd8      	it	le
 8004c92:	2501      	movle	r5, #1
 8004c94:	441d      	add	r5, r3
 8004c96:	f04f 0800 	mov.w	r8, #0
 8004c9a:	ee18 1a10 	vmov	r1, s16
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 fca3 	bl	80055ec <__lshift>
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	ee08 0a10 	vmov	s16, r0
 8004cac:	f000 fd0e 	bl	80056cc <__mcmp>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	dc91      	bgt.n	8004bd8 <_dtoa_r+0xaa8>
 8004cb4:	d102      	bne.n	8004cbc <_dtoa_r+0xb8c>
 8004cb6:	f01a 0f01 	tst.w	sl, #1
 8004cba:	d18d      	bne.n	8004bd8 <_dtoa_r+0xaa8>
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cc4:	2a30      	cmp	r2, #48	; 0x30
 8004cc6:	d0fa      	beq.n	8004cbe <_dtoa_r+0xb8e>
 8004cc8:	e6d7      	b.n	8004a7a <_dtoa_r+0x94a>
 8004cca:	9a01      	ldr	r2, [sp, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d184      	bne.n	8004bda <_dtoa_r+0xaaa>
 8004cd0:	9b00      	ldr	r3, [sp, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2331      	movs	r3, #49	; 0x31
 8004cd8:	7013      	strb	r3, [r2, #0]
 8004cda:	e6ce      	b.n	8004a7a <_dtoa_r+0x94a>
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <_dtoa_r+0xbd4>)
 8004cde:	f7ff ba95 	b.w	800420c <_dtoa_r+0xdc>
 8004ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f aa6e 	bne.w	80041c6 <_dtoa_r+0x96>
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <_dtoa_r+0xbd8>)
 8004cec:	f7ff ba8e 	b.w	800420c <_dtoa_r+0xdc>
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dcae      	bgt.n	8004c54 <_dtoa_r+0xb24>
 8004cf6:	9b06      	ldr	r3, [sp, #24]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f73f aea8 	bgt.w	8004a4e <_dtoa_r+0x91e>
 8004cfe:	e7a9      	b.n	8004c54 <_dtoa_r+0xb24>
 8004d00:	080129d6 	.word	0x080129d6
 8004d04:	0800895f 	.word	0x0800895f
 8004d08:	0801294c 	.word	0x0801294c

08004d0c <__sflush_r>:
 8004d0c:	898a      	ldrh	r2, [r1, #12]
 8004d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d12:	4605      	mov	r5, r0
 8004d14:	0710      	lsls	r0, r2, #28
 8004d16:	460c      	mov	r4, r1
 8004d18:	d458      	bmi.n	8004dcc <__sflush_r+0xc0>
 8004d1a:	684b      	ldr	r3, [r1, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dc05      	bgt.n	8004d2c <__sflush_r+0x20>
 8004d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dc02      	bgt.n	8004d2c <__sflush_r+0x20>
 8004d26:	2000      	movs	r0, #0
 8004d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	d0f9      	beq.n	8004d26 <__sflush_r+0x1a>
 8004d32:	2300      	movs	r3, #0
 8004d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d38:	682f      	ldr	r7, [r5, #0]
 8004d3a:	602b      	str	r3, [r5, #0]
 8004d3c:	d032      	beq.n	8004da4 <__sflush_r+0x98>
 8004d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	075a      	lsls	r2, r3, #29
 8004d44:	d505      	bpl.n	8004d52 <__sflush_r+0x46>
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	1ac0      	subs	r0, r0, r3
 8004d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d4c:	b10b      	cbz	r3, 8004d52 <__sflush_r+0x46>
 8004d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d50:	1ac0      	subs	r0, r0, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	4602      	mov	r2, r0
 8004d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d58:	6a21      	ldr	r1, [r4, #32]
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b0      	blx	r6
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	d106      	bne.n	8004d72 <__sflush_r+0x66>
 8004d64:	6829      	ldr	r1, [r5, #0]
 8004d66:	291d      	cmp	r1, #29
 8004d68:	d82c      	bhi.n	8004dc4 <__sflush_r+0xb8>
 8004d6a:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <__sflush_r+0x108>)
 8004d6c:	40ca      	lsrs	r2, r1
 8004d6e:	07d6      	lsls	r6, r2, #31
 8004d70:	d528      	bpl.n	8004dc4 <__sflush_r+0xb8>
 8004d72:	2200      	movs	r2, #0
 8004d74:	6062      	str	r2, [r4, #4]
 8004d76:	04d9      	lsls	r1, r3, #19
 8004d78:	6922      	ldr	r2, [r4, #16]
 8004d7a:	6022      	str	r2, [r4, #0]
 8004d7c:	d504      	bpl.n	8004d88 <__sflush_r+0x7c>
 8004d7e:	1c42      	adds	r2, r0, #1
 8004d80:	d101      	bne.n	8004d86 <__sflush_r+0x7a>
 8004d82:	682b      	ldr	r3, [r5, #0]
 8004d84:	b903      	cbnz	r3, 8004d88 <__sflush_r+0x7c>
 8004d86:	6560      	str	r0, [r4, #84]	; 0x54
 8004d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d8a:	602f      	str	r7, [r5, #0]
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d0ca      	beq.n	8004d26 <__sflush_r+0x1a>
 8004d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d94:	4299      	cmp	r1, r3
 8004d96:	d002      	beq.n	8004d9e <__sflush_r+0x92>
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 fda9 	bl	80058f0 <_free_r>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	6360      	str	r0, [r4, #52]	; 0x34
 8004da2:	e7c1      	b.n	8004d28 <__sflush_r+0x1c>
 8004da4:	6a21      	ldr	r1, [r4, #32]
 8004da6:	2301      	movs	r3, #1
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b0      	blx	r6
 8004dac:	1c41      	adds	r1, r0, #1
 8004dae:	d1c7      	bne.n	8004d40 <__sflush_r+0x34>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0c4      	beq.n	8004d40 <__sflush_r+0x34>
 8004db6:	2b1d      	cmp	r3, #29
 8004db8:	d001      	beq.n	8004dbe <__sflush_r+0xb2>
 8004dba:	2b16      	cmp	r3, #22
 8004dbc:	d101      	bne.n	8004dc2 <__sflush_r+0xb6>
 8004dbe:	602f      	str	r7, [r5, #0]
 8004dc0:	e7b1      	b.n	8004d26 <__sflush_r+0x1a>
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc8:	81a3      	strh	r3, [r4, #12]
 8004dca:	e7ad      	b.n	8004d28 <__sflush_r+0x1c>
 8004dcc:	690f      	ldr	r7, [r1, #16]
 8004dce:	2f00      	cmp	r7, #0
 8004dd0:	d0a9      	beq.n	8004d26 <__sflush_r+0x1a>
 8004dd2:	0793      	lsls	r3, r2, #30
 8004dd4:	680e      	ldr	r6, [r1, #0]
 8004dd6:	bf08      	it	eq
 8004dd8:	694b      	ldreq	r3, [r1, #20]
 8004dda:	600f      	str	r7, [r1, #0]
 8004ddc:	bf18      	it	ne
 8004dde:	2300      	movne	r3, #0
 8004de0:	eba6 0807 	sub.w	r8, r6, r7
 8004de4:	608b      	str	r3, [r1, #8]
 8004de6:	f1b8 0f00 	cmp.w	r8, #0
 8004dea:	dd9c      	ble.n	8004d26 <__sflush_r+0x1a>
 8004dec:	6a21      	ldr	r1, [r4, #32]
 8004dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004df0:	4643      	mov	r3, r8
 8004df2:	463a      	mov	r2, r7
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b0      	blx	r6
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	dc06      	bgt.n	8004e0a <__sflush_r+0xfe>
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e02:	81a3      	strh	r3, [r4, #12]
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e08:	e78e      	b.n	8004d28 <__sflush_r+0x1c>
 8004e0a:	4407      	add	r7, r0
 8004e0c:	eba8 0800 	sub.w	r8, r8, r0
 8004e10:	e7e9      	b.n	8004de6 <__sflush_r+0xda>
 8004e12:	bf00      	nop
 8004e14:	20400001 	.word	0x20400001

08004e18 <_fflush_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	690b      	ldr	r3, [r1, #16]
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	b913      	cbnz	r3, 8004e28 <_fflush_r+0x10>
 8004e22:	2500      	movs	r5, #0
 8004e24:	4628      	mov	r0, r5
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	b118      	cbz	r0, 8004e32 <_fflush_r+0x1a>
 8004e2a:	6983      	ldr	r3, [r0, #24]
 8004e2c:	b90b      	cbnz	r3, 8004e32 <_fflush_r+0x1a>
 8004e2e:	f000 f887 	bl	8004f40 <__sinit>
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <_fflush_r+0x6c>)
 8004e34:	429c      	cmp	r4, r3
 8004e36:	d11b      	bne.n	8004e70 <_fflush_r+0x58>
 8004e38:	686c      	ldr	r4, [r5, #4]
 8004e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0ef      	beq.n	8004e22 <_fflush_r+0xa>
 8004e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e44:	07d0      	lsls	r0, r2, #31
 8004e46:	d404      	bmi.n	8004e52 <_fflush_r+0x3a>
 8004e48:	0599      	lsls	r1, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_fflush_r+0x3a>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4e:	f000 f92c 	bl	80050aa <__retarget_lock_acquire_recursive>
 8004e52:	4628      	mov	r0, r5
 8004e54:	4621      	mov	r1, r4
 8004e56:	f7ff ff59 	bl	8004d0c <__sflush_r>
 8004e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e5c:	07da      	lsls	r2, r3, #31
 8004e5e:	4605      	mov	r5, r0
 8004e60:	d4e0      	bmi.n	8004e24 <_fflush_r+0xc>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	059b      	lsls	r3, r3, #22
 8004e66:	d4dd      	bmi.n	8004e24 <_fflush_r+0xc>
 8004e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e6a:	f000 f91f 	bl	80050ac <__retarget_lock_release_recursive>
 8004e6e:	e7d9      	b.n	8004e24 <_fflush_r+0xc>
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <_fflush_r+0x70>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d101      	bne.n	8004e7a <_fflush_r+0x62>
 8004e76:	68ac      	ldr	r4, [r5, #8]
 8004e78:	e7df      	b.n	8004e3a <_fflush_r+0x22>
 8004e7a:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <_fflush_r+0x74>)
 8004e7c:	429c      	cmp	r4, r3
 8004e7e:	bf08      	it	eq
 8004e80:	68ec      	ldreq	r4, [r5, #12]
 8004e82:	e7da      	b.n	8004e3a <_fflush_r+0x22>
 8004e84:	08012a08 	.word	0x08012a08
 8004e88:	08012a28 	.word	0x08012a28
 8004e8c:	080129e8 	.word	0x080129e8

08004e90 <std>:
 8004e90:	2300      	movs	r3, #0
 8004e92:	b510      	push	{r4, lr}
 8004e94:	4604      	mov	r4, r0
 8004e96:	e9c0 3300 	strd	r3, r3, [r0]
 8004e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e9e:	6083      	str	r3, [r0, #8]
 8004ea0:	8181      	strh	r1, [r0, #12]
 8004ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ea4:	81c2      	strh	r2, [r0, #14]
 8004ea6:	6183      	str	r3, [r0, #24]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	2208      	movs	r2, #8
 8004eac:	305c      	adds	r0, #92	; 0x5c
 8004eae:	f7fe fa85 	bl	80033bc <memset>
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <std+0x38>)
 8004eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <std+0x3c>)
 8004eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <std+0x40>)
 8004ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <std+0x44>)
 8004ec0:	6224      	str	r4, [r4, #32]
 8004ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	bf00      	nop
 8004ec8:	08005cf1 	.word	0x08005cf1
 8004ecc:	08005d13 	.word	0x08005d13
 8004ed0:	08005d4b 	.word	0x08005d4b
 8004ed4:	08005d6f 	.word	0x08005d6f

08004ed8 <_cleanup_r>:
 8004ed8:	4901      	ldr	r1, [pc, #4]	; (8004ee0 <_cleanup_r+0x8>)
 8004eda:	f000 b8c1 	b.w	8005060 <_fwalk_reent>
 8004ede:	bf00      	nop
 8004ee0:	08004e19 	.word	0x08004e19

08004ee4 <__sfmoreglue>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	2268      	movs	r2, #104	; 0x68
 8004ee8:	1e4d      	subs	r5, r1, #1
 8004eea:	4355      	muls	r5, r2
 8004eec:	460e      	mov	r6, r1
 8004eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ef2:	f000 fd49 	bl	8005988 <_malloc_r>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	b140      	cbz	r0, 8004f0c <__sfmoreglue+0x28>
 8004efa:	2100      	movs	r1, #0
 8004efc:	e9c0 1600 	strd	r1, r6, [r0]
 8004f00:	300c      	adds	r0, #12
 8004f02:	60a0      	str	r0, [r4, #8]
 8004f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f08:	f7fe fa58 	bl	80033bc <memset>
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}

08004f10 <__sfp_lock_acquire>:
 8004f10:	4801      	ldr	r0, [pc, #4]	; (8004f18 <__sfp_lock_acquire+0x8>)
 8004f12:	f000 b8ca 	b.w	80050aa <__retarget_lock_acquire_recursive>
 8004f16:	bf00      	nop
 8004f18:	20000c95 	.word	0x20000c95

08004f1c <__sfp_lock_release>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__sfp_lock_release+0x8>)
 8004f1e:	f000 b8c5 	b.w	80050ac <__retarget_lock_release_recursive>
 8004f22:	bf00      	nop
 8004f24:	20000c95 	.word	0x20000c95

08004f28 <__sinit_lock_acquire>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__sinit_lock_acquire+0x8>)
 8004f2a:	f000 b8be 	b.w	80050aa <__retarget_lock_acquire_recursive>
 8004f2e:	bf00      	nop
 8004f30:	20000c96 	.word	0x20000c96

08004f34 <__sinit_lock_release>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__sinit_lock_release+0x8>)
 8004f36:	f000 b8b9 	b.w	80050ac <__retarget_lock_release_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	20000c96 	.word	0x20000c96

08004f40 <__sinit>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4604      	mov	r4, r0
 8004f44:	f7ff fff0 	bl	8004f28 <__sinit_lock_acquire>
 8004f48:	69a3      	ldr	r3, [r4, #24]
 8004f4a:	b11b      	cbz	r3, 8004f54 <__sinit+0x14>
 8004f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f50:	f7ff bff0 	b.w	8004f34 <__sinit_lock_release>
 8004f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f58:	6523      	str	r3, [r4, #80]	; 0x50
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <__sinit+0x68>)
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <__sinit+0x6c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	bf04      	itt	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	61a3      	streq	r3, [r4, #24]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 f820 	bl	8004fb0 <__sfp>
 8004f70:	6060      	str	r0, [r4, #4]
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 f81c 	bl	8004fb0 <__sfp>
 8004f78:	60a0      	str	r0, [r4, #8]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 f818 	bl	8004fb0 <__sfp>
 8004f80:	2200      	movs	r2, #0
 8004f82:	60e0      	str	r0, [r4, #12]
 8004f84:	2104      	movs	r1, #4
 8004f86:	6860      	ldr	r0, [r4, #4]
 8004f88:	f7ff ff82 	bl	8004e90 <std>
 8004f8c:	68a0      	ldr	r0, [r4, #8]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	2109      	movs	r1, #9
 8004f92:	f7ff ff7d 	bl	8004e90 <std>
 8004f96:	68e0      	ldr	r0, [r4, #12]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	2112      	movs	r1, #18
 8004f9c:	f7ff ff78 	bl	8004e90 <std>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	61a3      	str	r3, [r4, #24]
 8004fa4:	e7d2      	b.n	8004f4c <__sinit+0xc>
 8004fa6:	bf00      	nop
 8004fa8:	08012844 	.word	0x08012844
 8004fac:	08004ed9 	.word	0x08004ed9

08004fb0 <__sfp>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	f7ff ffac 	bl	8004f10 <__sfp_lock_acquire>
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <__sfp+0x84>)
 8004fba:	681e      	ldr	r6, [r3, #0]
 8004fbc:	69b3      	ldr	r3, [r6, #24]
 8004fbe:	b913      	cbnz	r3, 8004fc6 <__sfp+0x16>
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7ff ffbd 	bl	8004f40 <__sinit>
 8004fc6:	3648      	adds	r6, #72	; 0x48
 8004fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	d503      	bpl.n	8004fd8 <__sfp+0x28>
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	b30b      	cbz	r3, 8005018 <__sfp+0x68>
 8004fd4:	6836      	ldr	r6, [r6, #0]
 8004fd6:	e7f7      	b.n	8004fc8 <__sfp+0x18>
 8004fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fdc:	b9d5      	cbnz	r5, 8005014 <__sfp+0x64>
 8004fde:	4b16      	ldr	r3, [pc, #88]	; (8005038 <__sfp+0x88>)
 8004fe0:	60e3      	str	r3, [r4, #12]
 8004fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8004fe8:	f000 f85e 	bl	80050a8 <__retarget_lock_init_recursive>
 8004fec:	f7ff ff96 	bl	8004f1c <__sfp_lock_release>
 8004ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ff8:	6025      	str	r5, [r4, #0]
 8004ffa:	61a5      	str	r5, [r4, #24]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	4629      	mov	r1, r5
 8005000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005004:	f7fe f9da 	bl	80033bc <memset>
 8005008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800500c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005010:	4620      	mov	r0, r4
 8005012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005014:	3468      	adds	r4, #104	; 0x68
 8005016:	e7d9      	b.n	8004fcc <__sfp+0x1c>
 8005018:	2104      	movs	r1, #4
 800501a:	4638      	mov	r0, r7
 800501c:	f7ff ff62 	bl	8004ee4 <__sfmoreglue>
 8005020:	4604      	mov	r4, r0
 8005022:	6030      	str	r0, [r6, #0]
 8005024:	2800      	cmp	r0, #0
 8005026:	d1d5      	bne.n	8004fd4 <__sfp+0x24>
 8005028:	f7ff ff78 	bl	8004f1c <__sfp_lock_release>
 800502c:	230c      	movs	r3, #12
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	e7ee      	b.n	8005010 <__sfp+0x60>
 8005032:	bf00      	nop
 8005034:	08012844 	.word	0x08012844
 8005038:	ffff0001 	.word	0xffff0001

0800503c <fiprintf>:
 800503c:	b40e      	push	{r1, r2, r3}
 800503e:	b503      	push	{r0, r1, lr}
 8005040:	4601      	mov	r1, r0
 8005042:	ab03      	add	r3, sp, #12
 8005044:	4805      	ldr	r0, [pc, #20]	; (800505c <fiprintf+0x20>)
 8005046:	f853 2b04 	ldr.w	r2, [r3], #4
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	f000 fd1f 	bl	8005a90 <_vfiprintf_r>
 8005052:	b002      	add	sp, #8
 8005054:	f85d eb04 	ldr.w	lr, [sp], #4
 8005058:	b003      	add	sp, #12
 800505a:	4770      	bx	lr
 800505c:	20000018 	.word	0x20000018

08005060 <_fwalk_reent>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	4606      	mov	r6, r0
 8005066:	4688      	mov	r8, r1
 8005068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800506c:	2700      	movs	r7, #0
 800506e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005072:	f1b9 0901 	subs.w	r9, r9, #1
 8005076:	d505      	bpl.n	8005084 <_fwalk_reent+0x24>
 8005078:	6824      	ldr	r4, [r4, #0]
 800507a:	2c00      	cmp	r4, #0
 800507c:	d1f7      	bne.n	800506e <_fwalk_reent+0xe>
 800507e:	4638      	mov	r0, r7
 8005080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005084:	89ab      	ldrh	r3, [r5, #12]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d907      	bls.n	800509a <_fwalk_reent+0x3a>
 800508a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800508e:	3301      	adds	r3, #1
 8005090:	d003      	beq.n	800509a <_fwalk_reent+0x3a>
 8005092:	4629      	mov	r1, r5
 8005094:	4630      	mov	r0, r6
 8005096:	47c0      	blx	r8
 8005098:	4307      	orrs	r7, r0
 800509a:	3568      	adds	r5, #104	; 0x68
 800509c:	e7e9      	b.n	8005072 <_fwalk_reent+0x12>
	...

080050a0 <_localeconv_r>:
 80050a0:	4800      	ldr	r0, [pc, #0]	; (80050a4 <_localeconv_r+0x4>)
 80050a2:	4770      	bx	lr
 80050a4:	2000016c 	.word	0x2000016c

080050a8 <__retarget_lock_init_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_acquire_recursive>:
 80050aa:	4770      	bx	lr

080050ac <__retarget_lock_release_recursive>:
 80050ac:	4770      	bx	lr

080050ae <__swhatbuf_r>:
 80050ae:	b570      	push	{r4, r5, r6, lr}
 80050b0:	460e      	mov	r6, r1
 80050b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b6:	2900      	cmp	r1, #0
 80050b8:	b096      	sub	sp, #88	; 0x58
 80050ba:	4614      	mov	r4, r2
 80050bc:	461d      	mov	r5, r3
 80050be:	da08      	bge.n	80050d2 <__swhatbuf_r+0x24>
 80050c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	602a      	str	r2, [r5, #0]
 80050c8:	061a      	lsls	r2, r3, #24
 80050ca:	d410      	bmi.n	80050ee <__swhatbuf_r+0x40>
 80050cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d0:	e00e      	b.n	80050f0 <__swhatbuf_r+0x42>
 80050d2:	466a      	mov	r2, sp
 80050d4:	f7fd fce4 	bl	8002aa0 <_fstat_r>
 80050d8:	2800      	cmp	r0, #0
 80050da:	dbf1      	blt.n	80050c0 <__swhatbuf_r+0x12>
 80050dc:	9a01      	ldr	r2, [sp, #4]
 80050de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050e6:	425a      	negs	r2, r3
 80050e8:	415a      	adcs	r2, r3
 80050ea:	602a      	str	r2, [r5, #0]
 80050ec:	e7ee      	b.n	80050cc <__swhatbuf_r+0x1e>
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	2000      	movs	r0, #0
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	b016      	add	sp, #88	; 0x58
 80050f6:	bd70      	pop	{r4, r5, r6, pc}

080050f8 <__smakebuf_r>:
 80050f8:	898b      	ldrh	r3, [r1, #12]
 80050fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050fc:	079d      	lsls	r5, r3, #30
 80050fe:	4606      	mov	r6, r0
 8005100:	460c      	mov	r4, r1
 8005102:	d507      	bpl.n	8005114 <__smakebuf_r+0x1c>
 8005104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	2301      	movs	r3, #1
 800510e:	6163      	str	r3, [r4, #20]
 8005110:	b002      	add	sp, #8
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	ab01      	add	r3, sp, #4
 8005116:	466a      	mov	r2, sp
 8005118:	f7ff ffc9 	bl	80050ae <__swhatbuf_r>
 800511c:	9900      	ldr	r1, [sp, #0]
 800511e:	4605      	mov	r5, r0
 8005120:	4630      	mov	r0, r6
 8005122:	f000 fc31 	bl	8005988 <_malloc_r>
 8005126:	b948      	cbnz	r0, 800513c <__smakebuf_r+0x44>
 8005128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512c:	059a      	lsls	r2, r3, #22
 800512e:	d4ef      	bmi.n	8005110 <__smakebuf_r+0x18>
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e7e3      	b.n	8005104 <__smakebuf_r+0xc>
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <__smakebuf_r+0x7c>)
 800513e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	6020      	str	r0, [r4, #0]
 8005144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	9b00      	ldr	r3, [sp, #0]
 800514c:	6163      	str	r3, [r4, #20]
 800514e:	9b01      	ldr	r3, [sp, #4]
 8005150:	6120      	str	r0, [r4, #16]
 8005152:	b15b      	cbz	r3, 800516c <__smakebuf_r+0x74>
 8005154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005158:	4630      	mov	r0, r6
 800515a:	f7fd fca6 	bl	8002aaa <_isatty_r>
 800515e:	b128      	cbz	r0, 800516c <__smakebuf_r+0x74>
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	89a0      	ldrh	r0, [r4, #12]
 800516e:	4305      	orrs	r5, r0
 8005170:	81a5      	strh	r5, [r4, #12]
 8005172:	e7cd      	b.n	8005110 <__smakebuf_r+0x18>
 8005174:	08004ed9 	.word	0x08004ed9

08005178 <malloc>:
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <malloc+0xc>)
 800517a:	4601      	mov	r1, r0
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	f000 bc03 	b.w	8005988 <_malloc_r>
 8005182:	bf00      	nop
 8005184:	20000018 	.word	0x20000018

08005188 <__ascii_mbtowc>:
 8005188:	b082      	sub	sp, #8
 800518a:	b901      	cbnz	r1, 800518e <__ascii_mbtowc+0x6>
 800518c:	a901      	add	r1, sp, #4
 800518e:	b142      	cbz	r2, 80051a2 <__ascii_mbtowc+0x1a>
 8005190:	b14b      	cbz	r3, 80051a6 <__ascii_mbtowc+0x1e>
 8005192:	7813      	ldrb	r3, [r2, #0]
 8005194:	600b      	str	r3, [r1, #0]
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	1e10      	subs	r0, r2, #0
 800519a:	bf18      	it	ne
 800519c:	2001      	movne	r0, #1
 800519e:	b002      	add	sp, #8
 80051a0:	4770      	bx	lr
 80051a2:	4610      	mov	r0, r2
 80051a4:	e7fb      	b.n	800519e <__ascii_mbtowc+0x16>
 80051a6:	f06f 0001 	mvn.w	r0, #1
 80051aa:	e7f8      	b.n	800519e <__ascii_mbtowc+0x16>

080051ac <memcpy>:
 80051ac:	440a      	add	r2, r1
 80051ae:	4291      	cmp	r1, r2
 80051b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051b4:	d100      	bne.n	80051b8 <memcpy+0xc>
 80051b6:	4770      	bx	lr
 80051b8:	b510      	push	{r4, lr}
 80051ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c2:	4291      	cmp	r1, r2
 80051c4:	d1f9      	bne.n	80051ba <memcpy+0xe>
 80051c6:	bd10      	pop	{r4, pc}

080051c8 <_Balloc>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	b976      	cbnz	r6, 80051f0 <_Balloc+0x28>
 80051d2:	2010      	movs	r0, #16
 80051d4:	f7ff ffd0 	bl	8005178 <malloc>
 80051d8:	4602      	mov	r2, r0
 80051da:	6260      	str	r0, [r4, #36]	; 0x24
 80051dc:	b920      	cbnz	r0, 80051e8 <_Balloc+0x20>
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <_Balloc+0x78>)
 80051e0:	4818      	ldr	r0, [pc, #96]	; (8005244 <_Balloc+0x7c>)
 80051e2:	2166      	movs	r1, #102	; 0x66
 80051e4:	f7fe fefa 	bl	8003fdc <__assert_func>
 80051e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051ec:	6006      	str	r6, [r0, #0]
 80051ee:	60c6      	str	r6, [r0, #12]
 80051f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051f2:	68f3      	ldr	r3, [r6, #12]
 80051f4:	b183      	cbz	r3, 8005218 <_Balloc+0x50>
 80051f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051fe:	b9b8      	cbnz	r0, 8005230 <_Balloc+0x68>
 8005200:	2101      	movs	r1, #1
 8005202:	fa01 f605 	lsl.w	r6, r1, r5
 8005206:	1d72      	adds	r2, r6, #5
 8005208:	0092      	lsls	r2, r2, #2
 800520a:	4620      	mov	r0, r4
 800520c:	f000 fb60 	bl	80058d0 <_calloc_r>
 8005210:	b160      	cbz	r0, 800522c <_Balloc+0x64>
 8005212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005216:	e00e      	b.n	8005236 <_Balloc+0x6e>
 8005218:	2221      	movs	r2, #33	; 0x21
 800521a:	2104      	movs	r1, #4
 800521c:	4620      	mov	r0, r4
 800521e:	f000 fb57 	bl	80058d0 <_calloc_r>
 8005222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005224:	60f0      	str	r0, [r6, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e4      	bne.n	80051f6 <_Balloc+0x2e>
 800522c:	2000      	movs	r0, #0
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	6802      	ldr	r2, [r0, #0]
 8005232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005236:	2300      	movs	r3, #0
 8005238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800523c:	e7f7      	b.n	800522e <_Balloc+0x66>
 800523e:	bf00      	nop
 8005240:	0801287a 	.word	0x0801287a
 8005244:	08012a4e 	.word	0x08012a4e

08005248 <_Bfree>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800524c:	4605      	mov	r5, r0
 800524e:	460c      	mov	r4, r1
 8005250:	b976      	cbnz	r6, 8005270 <_Bfree+0x28>
 8005252:	2010      	movs	r0, #16
 8005254:	f7ff ff90 	bl	8005178 <malloc>
 8005258:	4602      	mov	r2, r0
 800525a:	6268      	str	r0, [r5, #36]	; 0x24
 800525c:	b920      	cbnz	r0, 8005268 <_Bfree+0x20>
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <_Bfree+0x3c>)
 8005260:	4809      	ldr	r0, [pc, #36]	; (8005288 <_Bfree+0x40>)
 8005262:	218a      	movs	r1, #138	; 0x8a
 8005264:	f7fe feba 	bl	8003fdc <__assert_func>
 8005268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800526c:	6006      	str	r6, [r0, #0]
 800526e:	60c6      	str	r6, [r0, #12]
 8005270:	b13c      	cbz	r4, 8005282 <_Bfree+0x3a>
 8005272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005274:	6862      	ldr	r2, [r4, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800527c:	6021      	str	r1, [r4, #0]
 800527e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	0801287a 	.word	0x0801287a
 8005288:	08012a4e 	.word	0x08012a4e

0800528c <__multadd>:
 800528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005290:	690d      	ldr	r5, [r1, #16]
 8005292:	4607      	mov	r7, r0
 8005294:	460c      	mov	r4, r1
 8005296:	461e      	mov	r6, r3
 8005298:	f101 0c14 	add.w	ip, r1, #20
 800529c:	2000      	movs	r0, #0
 800529e:	f8dc 3000 	ldr.w	r3, [ip]
 80052a2:	b299      	uxth	r1, r3
 80052a4:	fb02 6101 	mla	r1, r2, r1, r6
 80052a8:	0c1e      	lsrs	r6, r3, #16
 80052aa:	0c0b      	lsrs	r3, r1, #16
 80052ac:	fb02 3306 	mla	r3, r2, r6, r3
 80052b0:	b289      	uxth	r1, r1
 80052b2:	3001      	adds	r0, #1
 80052b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052b8:	4285      	cmp	r5, r0
 80052ba:	f84c 1b04 	str.w	r1, [ip], #4
 80052be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80052c2:	dcec      	bgt.n	800529e <__multadd+0x12>
 80052c4:	b30e      	cbz	r6, 800530a <__multadd+0x7e>
 80052c6:	68a3      	ldr	r3, [r4, #8]
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	dc19      	bgt.n	8005300 <__multadd+0x74>
 80052cc:	6861      	ldr	r1, [r4, #4]
 80052ce:	4638      	mov	r0, r7
 80052d0:	3101      	adds	r1, #1
 80052d2:	f7ff ff79 	bl	80051c8 <_Balloc>
 80052d6:	4680      	mov	r8, r0
 80052d8:	b928      	cbnz	r0, 80052e6 <__multadd+0x5a>
 80052da:	4602      	mov	r2, r0
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <__multadd+0x84>)
 80052de:	480d      	ldr	r0, [pc, #52]	; (8005314 <__multadd+0x88>)
 80052e0:	21b5      	movs	r1, #181	; 0xb5
 80052e2:	f7fe fe7b 	bl	8003fdc <__assert_func>
 80052e6:	6922      	ldr	r2, [r4, #16]
 80052e8:	3202      	adds	r2, #2
 80052ea:	f104 010c 	add.w	r1, r4, #12
 80052ee:	0092      	lsls	r2, r2, #2
 80052f0:	300c      	adds	r0, #12
 80052f2:	f7ff ff5b 	bl	80051ac <memcpy>
 80052f6:	4621      	mov	r1, r4
 80052f8:	4638      	mov	r0, r7
 80052fa:	f7ff ffa5 	bl	8005248 <_Bfree>
 80052fe:	4644      	mov	r4, r8
 8005300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005304:	3501      	adds	r5, #1
 8005306:	615e      	str	r6, [r3, #20]
 8005308:	6125      	str	r5, [r4, #16]
 800530a:	4620      	mov	r0, r4
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	080129d6 	.word	0x080129d6
 8005314:	08012a4e 	.word	0x08012a4e

08005318 <__hi0bits>:
 8005318:	0c03      	lsrs	r3, r0, #16
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	b9d3      	cbnz	r3, 8005354 <__hi0bits+0x3c>
 800531e:	0400      	lsls	r0, r0, #16
 8005320:	2310      	movs	r3, #16
 8005322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005326:	bf04      	itt	eq
 8005328:	0200      	lsleq	r0, r0, #8
 800532a:	3308      	addeq	r3, #8
 800532c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005330:	bf04      	itt	eq
 8005332:	0100      	lsleq	r0, r0, #4
 8005334:	3304      	addeq	r3, #4
 8005336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800533a:	bf04      	itt	eq
 800533c:	0080      	lsleq	r0, r0, #2
 800533e:	3302      	addeq	r3, #2
 8005340:	2800      	cmp	r0, #0
 8005342:	db05      	blt.n	8005350 <__hi0bits+0x38>
 8005344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005348:	f103 0301 	add.w	r3, r3, #1
 800534c:	bf08      	it	eq
 800534e:	2320      	moveq	r3, #32
 8005350:	4618      	mov	r0, r3
 8005352:	4770      	bx	lr
 8005354:	2300      	movs	r3, #0
 8005356:	e7e4      	b.n	8005322 <__hi0bits+0xa>

08005358 <__lo0bits>:
 8005358:	6803      	ldr	r3, [r0, #0]
 800535a:	f013 0207 	ands.w	r2, r3, #7
 800535e:	4601      	mov	r1, r0
 8005360:	d00b      	beq.n	800537a <__lo0bits+0x22>
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d423      	bmi.n	80053ae <__lo0bits+0x56>
 8005366:	0798      	lsls	r0, r3, #30
 8005368:	bf49      	itett	mi
 800536a:	085b      	lsrmi	r3, r3, #1
 800536c:	089b      	lsrpl	r3, r3, #2
 800536e:	2001      	movmi	r0, #1
 8005370:	600b      	strmi	r3, [r1, #0]
 8005372:	bf5c      	itt	pl
 8005374:	600b      	strpl	r3, [r1, #0]
 8005376:	2002      	movpl	r0, #2
 8005378:	4770      	bx	lr
 800537a:	b298      	uxth	r0, r3
 800537c:	b9a8      	cbnz	r0, 80053aa <__lo0bits+0x52>
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	2010      	movs	r0, #16
 8005382:	b2da      	uxtb	r2, r3
 8005384:	b90a      	cbnz	r2, 800538a <__lo0bits+0x32>
 8005386:	3008      	adds	r0, #8
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	071a      	lsls	r2, r3, #28
 800538c:	bf04      	itt	eq
 800538e:	091b      	lsreq	r3, r3, #4
 8005390:	3004      	addeq	r0, #4
 8005392:	079a      	lsls	r2, r3, #30
 8005394:	bf04      	itt	eq
 8005396:	089b      	lsreq	r3, r3, #2
 8005398:	3002      	addeq	r0, #2
 800539a:	07da      	lsls	r2, r3, #31
 800539c:	d403      	bmi.n	80053a6 <__lo0bits+0x4e>
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	f100 0001 	add.w	r0, r0, #1
 80053a4:	d005      	beq.n	80053b2 <__lo0bits+0x5a>
 80053a6:	600b      	str	r3, [r1, #0]
 80053a8:	4770      	bx	lr
 80053aa:	4610      	mov	r0, r2
 80053ac:	e7e9      	b.n	8005382 <__lo0bits+0x2a>
 80053ae:	2000      	movs	r0, #0
 80053b0:	4770      	bx	lr
 80053b2:	2020      	movs	r0, #32
 80053b4:	4770      	bx	lr
	...

080053b8 <__i2b>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	460c      	mov	r4, r1
 80053bc:	2101      	movs	r1, #1
 80053be:	f7ff ff03 	bl	80051c8 <_Balloc>
 80053c2:	4602      	mov	r2, r0
 80053c4:	b928      	cbnz	r0, 80053d2 <__i2b+0x1a>
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <__i2b+0x24>)
 80053c8:	4805      	ldr	r0, [pc, #20]	; (80053e0 <__i2b+0x28>)
 80053ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80053ce:	f7fe fe05 	bl	8003fdc <__assert_func>
 80053d2:	2301      	movs	r3, #1
 80053d4:	6144      	str	r4, [r0, #20]
 80053d6:	6103      	str	r3, [r0, #16]
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	bf00      	nop
 80053dc:	080129d6 	.word	0x080129d6
 80053e0:	08012a4e 	.word	0x08012a4e

080053e4 <__multiply>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	4691      	mov	r9, r2
 80053ea:	690a      	ldr	r2, [r1, #16]
 80053ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	bfb8      	it	lt
 80053f4:	460b      	movlt	r3, r1
 80053f6:	460c      	mov	r4, r1
 80053f8:	bfbc      	itt	lt
 80053fa:	464c      	movlt	r4, r9
 80053fc:	4699      	movlt	r9, r3
 80053fe:	6927      	ldr	r7, [r4, #16]
 8005400:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005404:	68a3      	ldr	r3, [r4, #8]
 8005406:	6861      	ldr	r1, [r4, #4]
 8005408:	eb07 060a 	add.w	r6, r7, sl
 800540c:	42b3      	cmp	r3, r6
 800540e:	b085      	sub	sp, #20
 8005410:	bfb8      	it	lt
 8005412:	3101      	addlt	r1, #1
 8005414:	f7ff fed8 	bl	80051c8 <_Balloc>
 8005418:	b930      	cbnz	r0, 8005428 <__multiply+0x44>
 800541a:	4602      	mov	r2, r0
 800541c:	4b44      	ldr	r3, [pc, #272]	; (8005530 <__multiply+0x14c>)
 800541e:	4845      	ldr	r0, [pc, #276]	; (8005534 <__multiply+0x150>)
 8005420:	f240 115d 	movw	r1, #349	; 0x15d
 8005424:	f7fe fdda 	bl	8003fdc <__assert_func>
 8005428:	f100 0514 	add.w	r5, r0, #20
 800542c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005430:	462b      	mov	r3, r5
 8005432:	2200      	movs	r2, #0
 8005434:	4543      	cmp	r3, r8
 8005436:	d321      	bcc.n	800547c <__multiply+0x98>
 8005438:	f104 0314 	add.w	r3, r4, #20
 800543c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005440:	f109 0314 	add.w	r3, r9, #20
 8005444:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005448:	9202      	str	r2, [sp, #8]
 800544a:	1b3a      	subs	r2, r7, r4
 800544c:	3a15      	subs	r2, #21
 800544e:	f022 0203 	bic.w	r2, r2, #3
 8005452:	3204      	adds	r2, #4
 8005454:	f104 0115 	add.w	r1, r4, #21
 8005458:	428f      	cmp	r7, r1
 800545a:	bf38      	it	cc
 800545c:	2204      	movcc	r2, #4
 800545e:	9201      	str	r2, [sp, #4]
 8005460:	9a02      	ldr	r2, [sp, #8]
 8005462:	9303      	str	r3, [sp, #12]
 8005464:	429a      	cmp	r2, r3
 8005466:	d80c      	bhi.n	8005482 <__multiply+0x9e>
 8005468:	2e00      	cmp	r6, #0
 800546a:	dd03      	ble.n	8005474 <__multiply+0x90>
 800546c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05a      	beq.n	800552a <__multiply+0x146>
 8005474:	6106      	str	r6, [r0, #16]
 8005476:	b005      	add	sp, #20
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	f843 2b04 	str.w	r2, [r3], #4
 8005480:	e7d8      	b.n	8005434 <__multiply+0x50>
 8005482:	f8b3 a000 	ldrh.w	sl, [r3]
 8005486:	f1ba 0f00 	cmp.w	sl, #0
 800548a:	d024      	beq.n	80054d6 <__multiply+0xf2>
 800548c:	f104 0e14 	add.w	lr, r4, #20
 8005490:	46a9      	mov	r9, r5
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	f85e 2b04 	ldr.w	r2, [lr], #4
 800549a:	f8d9 1000 	ldr.w	r1, [r9]
 800549e:	fa1f fb82 	uxth.w	fp, r2
 80054a2:	b289      	uxth	r1, r1
 80054a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80054a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80054ac:	f8d9 2000 	ldr.w	r2, [r9]
 80054b0:	4461      	add	r1, ip
 80054b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80054ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80054be:	b289      	uxth	r1, r1
 80054c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054c4:	4577      	cmp	r7, lr
 80054c6:	f849 1b04 	str.w	r1, [r9], #4
 80054ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054ce:	d8e2      	bhi.n	8005496 <__multiply+0xb2>
 80054d0:	9a01      	ldr	r2, [sp, #4]
 80054d2:	f845 c002 	str.w	ip, [r5, r2]
 80054d6:	9a03      	ldr	r2, [sp, #12]
 80054d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054dc:	3304      	adds	r3, #4
 80054de:	f1b9 0f00 	cmp.w	r9, #0
 80054e2:	d020      	beq.n	8005526 <__multiply+0x142>
 80054e4:	6829      	ldr	r1, [r5, #0]
 80054e6:	f104 0c14 	add.w	ip, r4, #20
 80054ea:	46ae      	mov	lr, r5
 80054ec:	f04f 0a00 	mov.w	sl, #0
 80054f0:	f8bc b000 	ldrh.w	fp, [ip]
 80054f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80054f8:	fb09 220b 	mla	r2, r9, fp, r2
 80054fc:	4492      	add	sl, r2
 80054fe:	b289      	uxth	r1, r1
 8005500:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005504:	f84e 1b04 	str.w	r1, [lr], #4
 8005508:	f85c 2b04 	ldr.w	r2, [ip], #4
 800550c:	f8be 1000 	ldrh.w	r1, [lr]
 8005510:	0c12      	lsrs	r2, r2, #16
 8005512:	fb09 1102 	mla	r1, r9, r2, r1
 8005516:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800551a:	4567      	cmp	r7, ip
 800551c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005520:	d8e6      	bhi.n	80054f0 <__multiply+0x10c>
 8005522:	9a01      	ldr	r2, [sp, #4]
 8005524:	50a9      	str	r1, [r5, r2]
 8005526:	3504      	adds	r5, #4
 8005528:	e79a      	b.n	8005460 <__multiply+0x7c>
 800552a:	3e01      	subs	r6, #1
 800552c:	e79c      	b.n	8005468 <__multiply+0x84>
 800552e:	bf00      	nop
 8005530:	080129d6 	.word	0x080129d6
 8005534:	08012a4e 	.word	0x08012a4e

08005538 <__pow5mult>:
 8005538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800553c:	4615      	mov	r5, r2
 800553e:	f012 0203 	ands.w	r2, r2, #3
 8005542:	4606      	mov	r6, r0
 8005544:	460f      	mov	r7, r1
 8005546:	d007      	beq.n	8005558 <__pow5mult+0x20>
 8005548:	4c25      	ldr	r4, [pc, #148]	; (80055e0 <__pow5mult+0xa8>)
 800554a:	3a01      	subs	r2, #1
 800554c:	2300      	movs	r3, #0
 800554e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005552:	f7ff fe9b 	bl	800528c <__multadd>
 8005556:	4607      	mov	r7, r0
 8005558:	10ad      	asrs	r5, r5, #2
 800555a:	d03d      	beq.n	80055d8 <__pow5mult+0xa0>
 800555c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800555e:	b97c      	cbnz	r4, 8005580 <__pow5mult+0x48>
 8005560:	2010      	movs	r0, #16
 8005562:	f7ff fe09 	bl	8005178 <malloc>
 8005566:	4602      	mov	r2, r0
 8005568:	6270      	str	r0, [r6, #36]	; 0x24
 800556a:	b928      	cbnz	r0, 8005578 <__pow5mult+0x40>
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <__pow5mult+0xac>)
 800556e:	481e      	ldr	r0, [pc, #120]	; (80055e8 <__pow5mult+0xb0>)
 8005570:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005574:	f7fe fd32 	bl	8003fdc <__assert_func>
 8005578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800557c:	6004      	str	r4, [r0, #0]
 800557e:	60c4      	str	r4, [r0, #12]
 8005580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005588:	b94c      	cbnz	r4, 800559e <__pow5mult+0x66>
 800558a:	f240 2171 	movw	r1, #625	; 0x271
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff ff12 	bl	80053b8 <__i2b>
 8005594:	2300      	movs	r3, #0
 8005596:	f8c8 0008 	str.w	r0, [r8, #8]
 800559a:	4604      	mov	r4, r0
 800559c:	6003      	str	r3, [r0, #0]
 800559e:	f04f 0900 	mov.w	r9, #0
 80055a2:	07eb      	lsls	r3, r5, #31
 80055a4:	d50a      	bpl.n	80055bc <__pow5mult+0x84>
 80055a6:	4639      	mov	r1, r7
 80055a8:	4622      	mov	r2, r4
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff ff1a 	bl	80053e4 <__multiply>
 80055b0:	4639      	mov	r1, r7
 80055b2:	4680      	mov	r8, r0
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff fe47 	bl	8005248 <_Bfree>
 80055ba:	4647      	mov	r7, r8
 80055bc:	106d      	asrs	r5, r5, #1
 80055be:	d00b      	beq.n	80055d8 <__pow5mult+0xa0>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	b938      	cbnz	r0, 80055d4 <__pow5mult+0x9c>
 80055c4:	4622      	mov	r2, r4
 80055c6:	4621      	mov	r1, r4
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff ff0b 	bl	80053e4 <__multiply>
 80055ce:	6020      	str	r0, [r4, #0]
 80055d0:	f8c0 9000 	str.w	r9, [r0]
 80055d4:	4604      	mov	r4, r0
 80055d6:	e7e4      	b.n	80055a2 <__pow5mult+0x6a>
 80055d8:	4638      	mov	r0, r7
 80055da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055de:	bf00      	nop
 80055e0:	08012bc0 	.word	0x08012bc0
 80055e4:	0801287a 	.word	0x0801287a
 80055e8:	08012a4e 	.word	0x08012a4e

080055ec <__lshift>:
 80055ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	460c      	mov	r4, r1
 80055f2:	6849      	ldr	r1, [r1, #4]
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055fa:	68a3      	ldr	r3, [r4, #8]
 80055fc:	4607      	mov	r7, r0
 80055fe:	4691      	mov	r9, r2
 8005600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005604:	f108 0601 	add.w	r6, r8, #1
 8005608:	42b3      	cmp	r3, r6
 800560a:	db0b      	blt.n	8005624 <__lshift+0x38>
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff fddb 	bl	80051c8 <_Balloc>
 8005612:	4605      	mov	r5, r0
 8005614:	b948      	cbnz	r0, 800562a <__lshift+0x3e>
 8005616:	4602      	mov	r2, r0
 8005618:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <__lshift+0xd8>)
 800561a:	482b      	ldr	r0, [pc, #172]	; (80056c8 <__lshift+0xdc>)
 800561c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005620:	f7fe fcdc 	bl	8003fdc <__assert_func>
 8005624:	3101      	adds	r1, #1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	e7ee      	b.n	8005608 <__lshift+0x1c>
 800562a:	2300      	movs	r3, #0
 800562c:	f100 0114 	add.w	r1, r0, #20
 8005630:	f100 0210 	add.w	r2, r0, #16
 8005634:	4618      	mov	r0, r3
 8005636:	4553      	cmp	r3, sl
 8005638:	db37      	blt.n	80056aa <__lshift+0xbe>
 800563a:	6920      	ldr	r0, [r4, #16]
 800563c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005640:	f104 0314 	add.w	r3, r4, #20
 8005644:	f019 091f 	ands.w	r9, r9, #31
 8005648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800564c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005650:	d02f      	beq.n	80056b2 <__lshift+0xc6>
 8005652:	f1c9 0e20 	rsb	lr, r9, #32
 8005656:	468a      	mov	sl, r1
 8005658:	f04f 0c00 	mov.w	ip, #0
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	fa02 f209 	lsl.w	r2, r2, r9
 8005662:	ea42 020c 	orr.w	r2, r2, ip
 8005666:	f84a 2b04 	str.w	r2, [sl], #4
 800566a:	f853 2b04 	ldr.w	r2, [r3], #4
 800566e:	4298      	cmp	r0, r3
 8005670:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005674:	d8f2      	bhi.n	800565c <__lshift+0x70>
 8005676:	1b03      	subs	r3, r0, r4
 8005678:	3b15      	subs	r3, #21
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	3304      	adds	r3, #4
 8005680:	f104 0215 	add.w	r2, r4, #21
 8005684:	4290      	cmp	r0, r2
 8005686:	bf38      	it	cc
 8005688:	2304      	movcc	r3, #4
 800568a:	f841 c003 	str.w	ip, [r1, r3]
 800568e:	f1bc 0f00 	cmp.w	ip, #0
 8005692:	d001      	beq.n	8005698 <__lshift+0xac>
 8005694:	f108 0602 	add.w	r6, r8, #2
 8005698:	3e01      	subs	r6, #1
 800569a:	4638      	mov	r0, r7
 800569c:	612e      	str	r6, [r5, #16]
 800569e:	4621      	mov	r1, r4
 80056a0:	f7ff fdd2 	bl	8005248 <_Bfree>
 80056a4:	4628      	mov	r0, r5
 80056a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80056ae:	3301      	adds	r3, #1
 80056b0:	e7c1      	b.n	8005636 <__lshift+0x4a>
 80056b2:	3904      	subs	r1, #4
 80056b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80056bc:	4298      	cmp	r0, r3
 80056be:	d8f9      	bhi.n	80056b4 <__lshift+0xc8>
 80056c0:	e7ea      	b.n	8005698 <__lshift+0xac>
 80056c2:	bf00      	nop
 80056c4:	080129d6 	.word	0x080129d6
 80056c8:	08012a4e 	.word	0x08012a4e

080056cc <__mcmp>:
 80056cc:	b530      	push	{r4, r5, lr}
 80056ce:	6902      	ldr	r2, [r0, #16]
 80056d0:	690c      	ldr	r4, [r1, #16]
 80056d2:	1b12      	subs	r2, r2, r4
 80056d4:	d10e      	bne.n	80056f4 <__mcmp+0x28>
 80056d6:	f100 0314 	add.w	r3, r0, #20
 80056da:	3114      	adds	r1, #20
 80056dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056ec:	42a5      	cmp	r5, r4
 80056ee:	d003      	beq.n	80056f8 <__mcmp+0x2c>
 80056f0:	d305      	bcc.n	80056fe <__mcmp+0x32>
 80056f2:	2201      	movs	r2, #1
 80056f4:	4610      	mov	r0, r2
 80056f6:	bd30      	pop	{r4, r5, pc}
 80056f8:	4283      	cmp	r3, r0
 80056fa:	d3f3      	bcc.n	80056e4 <__mcmp+0x18>
 80056fc:	e7fa      	b.n	80056f4 <__mcmp+0x28>
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005702:	e7f7      	b.n	80056f4 <__mcmp+0x28>

08005704 <__mdiff>:
 8005704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	4606      	mov	r6, r0
 800570c:	4611      	mov	r1, r2
 800570e:	4620      	mov	r0, r4
 8005710:	4690      	mov	r8, r2
 8005712:	f7ff ffdb 	bl	80056cc <__mcmp>
 8005716:	1e05      	subs	r5, r0, #0
 8005718:	d110      	bne.n	800573c <__mdiff+0x38>
 800571a:	4629      	mov	r1, r5
 800571c:	4630      	mov	r0, r6
 800571e:	f7ff fd53 	bl	80051c8 <_Balloc>
 8005722:	b930      	cbnz	r0, 8005732 <__mdiff+0x2e>
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <__mdiff+0x10c>)
 8005726:	4602      	mov	r2, r0
 8005728:	f240 2132 	movw	r1, #562	; 0x232
 800572c:	4839      	ldr	r0, [pc, #228]	; (8005814 <__mdiff+0x110>)
 800572e:	f7fe fc55 	bl	8003fdc <__assert_func>
 8005732:	2301      	movs	r3, #1
 8005734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	bfa4      	itt	ge
 800573e:	4643      	movge	r3, r8
 8005740:	46a0      	movge	r8, r4
 8005742:	4630      	mov	r0, r6
 8005744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005748:	bfa6      	itte	ge
 800574a:	461c      	movge	r4, r3
 800574c:	2500      	movge	r5, #0
 800574e:	2501      	movlt	r5, #1
 8005750:	f7ff fd3a 	bl	80051c8 <_Balloc>
 8005754:	b920      	cbnz	r0, 8005760 <__mdiff+0x5c>
 8005756:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <__mdiff+0x10c>)
 8005758:	4602      	mov	r2, r0
 800575a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800575e:	e7e5      	b.n	800572c <__mdiff+0x28>
 8005760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005764:	6926      	ldr	r6, [r4, #16]
 8005766:	60c5      	str	r5, [r0, #12]
 8005768:	f104 0914 	add.w	r9, r4, #20
 800576c:	f108 0514 	add.w	r5, r8, #20
 8005770:	f100 0e14 	add.w	lr, r0, #20
 8005774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800577c:	f108 0210 	add.w	r2, r8, #16
 8005780:	46f2      	mov	sl, lr
 8005782:	2100      	movs	r1, #0
 8005784:	f859 3b04 	ldr.w	r3, [r9], #4
 8005788:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800578c:	fa1f f883 	uxth.w	r8, r3
 8005790:	fa11 f18b 	uxtah	r1, r1, fp
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	eba1 0808 	sub.w	r8, r1, r8
 800579a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800579e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80057a2:	fa1f f888 	uxth.w	r8, r8
 80057a6:	1419      	asrs	r1, r3, #16
 80057a8:	454e      	cmp	r6, r9
 80057aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80057ae:	f84a 3b04 	str.w	r3, [sl], #4
 80057b2:	d8e7      	bhi.n	8005784 <__mdiff+0x80>
 80057b4:	1b33      	subs	r3, r6, r4
 80057b6:	3b15      	subs	r3, #21
 80057b8:	f023 0303 	bic.w	r3, r3, #3
 80057bc:	3304      	adds	r3, #4
 80057be:	3415      	adds	r4, #21
 80057c0:	42a6      	cmp	r6, r4
 80057c2:	bf38      	it	cc
 80057c4:	2304      	movcc	r3, #4
 80057c6:	441d      	add	r5, r3
 80057c8:	4473      	add	r3, lr
 80057ca:	469e      	mov	lr, r3
 80057cc:	462e      	mov	r6, r5
 80057ce:	4566      	cmp	r6, ip
 80057d0:	d30e      	bcc.n	80057f0 <__mdiff+0xec>
 80057d2:	f10c 0203 	add.w	r2, ip, #3
 80057d6:	1b52      	subs	r2, r2, r5
 80057d8:	f022 0203 	bic.w	r2, r2, #3
 80057dc:	3d03      	subs	r5, #3
 80057de:	45ac      	cmp	ip, r5
 80057e0:	bf38      	it	cc
 80057e2:	2200      	movcc	r2, #0
 80057e4:	441a      	add	r2, r3
 80057e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80057ea:	b17b      	cbz	r3, 800580c <__mdiff+0x108>
 80057ec:	6107      	str	r7, [r0, #16]
 80057ee:	e7a3      	b.n	8005738 <__mdiff+0x34>
 80057f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80057f4:	fa11 f288 	uxtah	r2, r1, r8
 80057f8:	1414      	asrs	r4, r2, #16
 80057fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80057fe:	b292      	uxth	r2, r2
 8005800:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005804:	f84e 2b04 	str.w	r2, [lr], #4
 8005808:	1421      	asrs	r1, r4, #16
 800580a:	e7e0      	b.n	80057ce <__mdiff+0xca>
 800580c:	3f01      	subs	r7, #1
 800580e:	e7ea      	b.n	80057e6 <__mdiff+0xe2>
 8005810:	080129d6 	.word	0x080129d6
 8005814:	08012a4e 	.word	0x08012a4e

08005818 <__d2b>:
 8005818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800581c:	4689      	mov	r9, r1
 800581e:	2101      	movs	r1, #1
 8005820:	ec57 6b10 	vmov	r6, r7, d0
 8005824:	4690      	mov	r8, r2
 8005826:	f7ff fccf 	bl	80051c8 <_Balloc>
 800582a:	4604      	mov	r4, r0
 800582c:	b930      	cbnz	r0, 800583c <__d2b+0x24>
 800582e:	4602      	mov	r2, r0
 8005830:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <__d2b+0xb0>)
 8005832:	4826      	ldr	r0, [pc, #152]	; (80058cc <__d2b+0xb4>)
 8005834:	f240 310a 	movw	r1, #778	; 0x30a
 8005838:	f7fe fbd0 	bl	8003fdc <__assert_func>
 800583c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005844:	bb35      	cbnz	r5, 8005894 <__d2b+0x7c>
 8005846:	2e00      	cmp	r6, #0
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	d028      	beq.n	800589e <__d2b+0x86>
 800584c:	4668      	mov	r0, sp
 800584e:	9600      	str	r6, [sp, #0]
 8005850:	f7ff fd82 	bl	8005358 <__lo0bits>
 8005854:	9900      	ldr	r1, [sp, #0]
 8005856:	b300      	cbz	r0, 800589a <__d2b+0x82>
 8005858:	9a01      	ldr	r2, [sp, #4]
 800585a:	f1c0 0320 	rsb	r3, r0, #32
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	430b      	orrs	r3, r1
 8005864:	40c2      	lsrs	r2, r0
 8005866:	6163      	str	r3, [r4, #20]
 8005868:	9201      	str	r2, [sp, #4]
 800586a:	9b01      	ldr	r3, [sp, #4]
 800586c:	61a3      	str	r3, [r4, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf14      	ite	ne
 8005872:	2202      	movne	r2, #2
 8005874:	2201      	moveq	r2, #1
 8005876:	6122      	str	r2, [r4, #16]
 8005878:	b1d5      	cbz	r5, 80058b0 <__d2b+0x98>
 800587a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800587e:	4405      	add	r5, r0
 8005880:	f8c9 5000 	str.w	r5, [r9]
 8005884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005888:	f8c8 0000 	str.w	r0, [r8]
 800588c:	4620      	mov	r0, r4
 800588e:	b003      	add	sp, #12
 8005890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005898:	e7d5      	b.n	8005846 <__d2b+0x2e>
 800589a:	6161      	str	r1, [r4, #20]
 800589c:	e7e5      	b.n	800586a <__d2b+0x52>
 800589e:	a801      	add	r0, sp, #4
 80058a0:	f7ff fd5a 	bl	8005358 <__lo0bits>
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	6163      	str	r3, [r4, #20]
 80058a8:	2201      	movs	r2, #1
 80058aa:	6122      	str	r2, [r4, #16]
 80058ac:	3020      	adds	r0, #32
 80058ae:	e7e3      	b.n	8005878 <__d2b+0x60>
 80058b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80058b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058b8:	f8c9 0000 	str.w	r0, [r9]
 80058bc:	6918      	ldr	r0, [r3, #16]
 80058be:	f7ff fd2b 	bl	8005318 <__hi0bits>
 80058c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80058c6:	e7df      	b.n	8005888 <__d2b+0x70>
 80058c8:	080129d6 	.word	0x080129d6
 80058cc:	08012a4e 	.word	0x08012a4e

080058d0 <_calloc_r>:
 80058d0:	b513      	push	{r0, r1, r4, lr}
 80058d2:	434a      	muls	r2, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	9201      	str	r2, [sp, #4]
 80058d8:	f000 f856 	bl	8005988 <_malloc_r>
 80058dc:	4604      	mov	r4, r0
 80058de:	b118      	cbz	r0, 80058e8 <_calloc_r+0x18>
 80058e0:	9a01      	ldr	r2, [sp, #4]
 80058e2:	2100      	movs	r1, #0
 80058e4:	f7fd fd6a 	bl	80033bc <memset>
 80058e8:	4620      	mov	r0, r4
 80058ea:	b002      	add	sp, #8
 80058ec:	bd10      	pop	{r4, pc}
	...

080058f0 <_free_r>:
 80058f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d044      	beq.n	8005980 <_free_r+0x90>
 80058f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058fa:	9001      	str	r0, [sp, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005902:	bfb8      	it	lt
 8005904:	18e4      	addlt	r4, r4, r3
 8005906:	f000 fb27 	bl	8005f58 <__malloc_lock>
 800590a:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <_free_r+0x94>)
 800590c:	9801      	ldr	r0, [sp, #4]
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	b933      	cbnz	r3, 8005920 <_free_r+0x30>
 8005912:	6063      	str	r3, [r4, #4]
 8005914:	6014      	str	r4, [r2, #0]
 8005916:	b003      	add	sp, #12
 8005918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800591c:	f000 bb22 	b.w	8005f64 <__malloc_unlock>
 8005920:	42a3      	cmp	r3, r4
 8005922:	d908      	bls.n	8005936 <_free_r+0x46>
 8005924:	6825      	ldr	r5, [r4, #0]
 8005926:	1961      	adds	r1, r4, r5
 8005928:	428b      	cmp	r3, r1
 800592a:	bf01      	itttt	eq
 800592c:	6819      	ldreq	r1, [r3, #0]
 800592e:	685b      	ldreq	r3, [r3, #4]
 8005930:	1949      	addeq	r1, r1, r5
 8005932:	6021      	streq	r1, [r4, #0]
 8005934:	e7ed      	b.n	8005912 <_free_r+0x22>
 8005936:	461a      	mov	r2, r3
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b10b      	cbz	r3, 8005940 <_free_r+0x50>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d9fa      	bls.n	8005936 <_free_r+0x46>
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	1855      	adds	r5, r2, r1
 8005944:	42a5      	cmp	r5, r4
 8005946:	d10b      	bne.n	8005960 <_free_r+0x70>
 8005948:	6824      	ldr	r4, [r4, #0]
 800594a:	4421      	add	r1, r4
 800594c:	1854      	adds	r4, r2, r1
 800594e:	42a3      	cmp	r3, r4
 8005950:	6011      	str	r1, [r2, #0]
 8005952:	d1e0      	bne.n	8005916 <_free_r+0x26>
 8005954:	681c      	ldr	r4, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	6053      	str	r3, [r2, #4]
 800595a:	4421      	add	r1, r4
 800595c:	6011      	str	r1, [r2, #0]
 800595e:	e7da      	b.n	8005916 <_free_r+0x26>
 8005960:	d902      	bls.n	8005968 <_free_r+0x78>
 8005962:	230c      	movs	r3, #12
 8005964:	6003      	str	r3, [r0, #0]
 8005966:	e7d6      	b.n	8005916 <_free_r+0x26>
 8005968:	6825      	ldr	r5, [r4, #0]
 800596a:	1961      	adds	r1, r4, r5
 800596c:	428b      	cmp	r3, r1
 800596e:	bf04      	itt	eq
 8005970:	6819      	ldreq	r1, [r3, #0]
 8005972:	685b      	ldreq	r3, [r3, #4]
 8005974:	6063      	str	r3, [r4, #4]
 8005976:	bf04      	itt	eq
 8005978:	1949      	addeq	r1, r1, r5
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	6054      	str	r4, [r2, #4]
 800597e:	e7ca      	b.n	8005916 <_free_r+0x26>
 8005980:	b003      	add	sp, #12
 8005982:	bd30      	pop	{r4, r5, pc}
 8005984:	20000c98 	.word	0x20000c98

08005988 <_malloc_r>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	1ccd      	adds	r5, r1, #3
 800598c:	f025 0503 	bic.w	r5, r5, #3
 8005990:	3508      	adds	r5, #8
 8005992:	2d0c      	cmp	r5, #12
 8005994:	bf38      	it	cc
 8005996:	250c      	movcc	r5, #12
 8005998:	2d00      	cmp	r5, #0
 800599a:	4606      	mov	r6, r0
 800599c:	db01      	blt.n	80059a2 <_malloc_r+0x1a>
 800599e:	42a9      	cmp	r1, r5
 80059a0:	d903      	bls.n	80059aa <_malloc_r+0x22>
 80059a2:	230c      	movs	r3, #12
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	2000      	movs	r0, #0
 80059a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059aa:	f000 fad5 	bl	8005f58 <__malloc_lock>
 80059ae:	4921      	ldr	r1, [pc, #132]	; (8005a34 <_malloc_r+0xac>)
 80059b0:	680a      	ldr	r2, [r1, #0]
 80059b2:	4614      	mov	r4, r2
 80059b4:	b99c      	cbnz	r4, 80059de <_malloc_r+0x56>
 80059b6:	4f20      	ldr	r7, [pc, #128]	; (8005a38 <_malloc_r+0xb0>)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	b923      	cbnz	r3, 80059c6 <_malloc_r+0x3e>
 80059bc:	4621      	mov	r1, r4
 80059be:	4630      	mov	r0, r6
 80059c0:	f7fd f854 	bl	8002a6c <_sbrk_r>
 80059c4:	6038      	str	r0, [r7, #0]
 80059c6:	4629      	mov	r1, r5
 80059c8:	4630      	mov	r0, r6
 80059ca:	f7fd f84f 	bl	8002a6c <_sbrk_r>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d123      	bne.n	8005a1a <_malloc_r+0x92>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 fac4 	bl	8005f64 <__malloc_unlock>
 80059dc:	e7e3      	b.n	80059a6 <_malloc_r+0x1e>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	1b5b      	subs	r3, r3, r5
 80059e2:	d417      	bmi.n	8005a14 <_malloc_r+0x8c>
 80059e4:	2b0b      	cmp	r3, #11
 80059e6:	d903      	bls.n	80059f0 <_malloc_r+0x68>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	441c      	add	r4, r3
 80059ec:	6025      	str	r5, [r4, #0]
 80059ee:	e004      	b.n	80059fa <_malloc_r+0x72>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	42a2      	cmp	r2, r4
 80059f4:	bf0c      	ite	eq
 80059f6:	600b      	streq	r3, [r1, #0]
 80059f8:	6053      	strne	r3, [r2, #4]
 80059fa:	4630      	mov	r0, r6
 80059fc:	f000 fab2 	bl	8005f64 <__malloc_unlock>
 8005a00:	f104 000b 	add.w	r0, r4, #11
 8005a04:	1d23      	adds	r3, r4, #4
 8005a06:	f020 0007 	bic.w	r0, r0, #7
 8005a0a:	1ac2      	subs	r2, r0, r3
 8005a0c:	d0cc      	beq.n	80059a8 <_malloc_r+0x20>
 8005a0e:	1a1b      	subs	r3, r3, r0
 8005a10:	50a3      	str	r3, [r4, r2]
 8005a12:	e7c9      	b.n	80059a8 <_malloc_r+0x20>
 8005a14:	4622      	mov	r2, r4
 8005a16:	6864      	ldr	r4, [r4, #4]
 8005a18:	e7cc      	b.n	80059b4 <_malloc_r+0x2c>
 8005a1a:	1cc4      	adds	r4, r0, #3
 8005a1c:	f024 0403 	bic.w	r4, r4, #3
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d0e3      	beq.n	80059ec <_malloc_r+0x64>
 8005a24:	1a21      	subs	r1, r4, r0
 8005a26:	4630      	mov	r0, r6
 8005a28:	f7fd f820 	bl	8002a6c <_sbrk_r>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d1dd      	bne.n	80059ec <_malloc_r+0x64>
 8005a30:	e7cf      	b.n	80059d2 <_malloc_r+0x4a>
 8005a32:	bf00      	nop
 8005a34:	20000c98 	.word	0x20000c98
 8005a38:	20000c9c 	.word	0x20000c9c

08005a3c <__sfputc_r>:
 8005a3c:	6893      	ldr	r3, [r2, #8]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	b410      	push	{r4}
 8005a44:	6093      	str	r3, [r2, #8]
 8005a46:	da08      	bge.n	8005a5a <__sfputc_r+0x1e>
 8005a48:	6994      	ldr	r4, [r2, #24]
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	db01      	blt.n	8005a52 <__sfputc_r+0x16>
 8005a4e:	290a      	cmp	r1, #10
 8005a50:	d103      	bne.n	8005a5a <__sfputc_r+0x1e>
 8005a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a56:	f000 b98f 	b.w	8005d78 <__swbuf_r>
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	1c58      	adds	r0, r3, #1
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	7019      	strb	r1, [r3, #0]
 8005a62:	4608      	mov	r0, r1
 8005a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <__sfputs_r>:
 8005a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	460f      	mov	r7, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	18d5      	adds	r5, r2, r3
 8005a74:	42ac      	cmp	r4, r5
 8005a76:	d101      	bne.n	8005a7c <__sfputs_r+0x12>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e007      	b.n	8005a8c <__sfputs_r+0x22>
 8005a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a80:	463a      	mov	r2, r7
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff ffda 	bl	8005a3c <__sfputc_r>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d1f3      	bne.n	8005a74 <__sfputs_r+0xa>
 8005a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a90 <_vfiprintf_r>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	460d      	mov	r5, r1
 8005a96:	b09d      	sub	sp, #116	; 0x74
 8005a98:	4614      	mov	r4, r2
 8005a9a:	4698      	mov	r8, r3
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	b118      	cbz	r0, 8005aa8 <_vfiprintf_r+0x18>
 8005aa0:	6983      	ldr	r3, [r0, #24]
 8005aa2:	b90b      	cbnz	r3, 8005aa8 <_vfiprintf_r+0x18>
 8005aa4:	f7ff fa4c 	bl	8004f40 <__sinit>
 8005aa8:	4b89      	ldr	r3, [pc, #548]	; (8005cd0 <_vfiprintf_r+0x240>)
 8005aaa:	429d      	cmp	r5, r3
 8005aac:	d11b      	bne.n	8005ae6 <_vfiprintf_r+0x56>
 8005aae:	6875      	ldr	r5, [r6, #4]
 8005ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d405      	bmi.n	8005ac2 <_vfiprintf_r+0x32>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_vfiprintf_r+0x32>
 8005abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005abe:	f7ff faf4 	bl	80050aa <__retarget_lock_acquire_recursive>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	071b      	lsls	r3, r3, #28
 8005ac6:	d501      	bpl.n	8005acc <_vfiprintf_r+0x3c>
 8005ac8:	692b      	ldr	r3, [r5, #16]
 8005aca:	b9eb      	cbnz	r3, 8005b08 <_vfiprintf_r+0x78>
 8005acc:	4629      	mov	r1, r5
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 f9b2 	bl	8005e38 <__swsetup_r>
 8005ad4:	b1c0      	cbz	r0, 8005b08 <_vfiprintf_r+0x78>
 8005ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad8:	07dc      	lsls	r4, r3, #31
 8005ada:	d50e      	bpl.n	8005afa <_vfiprintf_r+0x6a>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae0:	b01d      	add	sp, #116	; 0x74
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	4b7b      	ldr	r3, [pc, #492]	; (8005cd4 <_vfiprintf_r+0x244>)
 8005ae8:	429d      	cmp	r5, r3
 8005aea:	d101      	bne.n	8005af0 <_vfiprintf_r+0x60>
 8005aec:	68b5      	ldr	r5, [r6, #8]
 8005aee:	e7df      	b.n	8005ab0 <_vfiprintf_r+0x20>
 8005af0:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <_vfiprintf_r+0x248>)
 8005af2:	429d      	cmp	r5, r3
 8005af4:	bf08      	it	eq
 8005af6:	68f5      	ldreq	r5, [r6, #12]
 8005af8:	e7da      	b.n	8005ab0 <_vfiprintf_r+0x20>
 8005afa:	89ab      	ldrh	r3, [r5, #12]
 8005afc:	0598      	lsls	r0, r3, #22
 8005afe:	d4ed      	bmi.n	8005adc <_vfiprintf_r+0x4c>
 8005b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b02:	f7ff fad3 	bl	80050ac <__retarget_lock_release_recursive>
 8005b06:	e7e9      	b.n	8005adc <_vfiprintf_r+0x4c>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b16:	2330      	movs	r3, #48	; 0x30
 8005b18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005cdc <_vfiprintf_r+0x24c>
 8005b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b20:	f04f 0901 	mov.w	r9, #1
 8005b24:	4623      	mov	r3, r4
 8005b26:	469a      	mov	sl, r3
 8005b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b2c:	b10a      	cbz	r2, 8005b32 <_vfiprintf_r+0xa2>
 8005b2e:	2a25      	cmp	r2, #37	; 0x25
 8005b30:	d1f9      	bne.n	8005b26 <_vfiprintf_r+0x96>
 8005b32:	ebba 0b04 	subs.w	fp, sl, r4
 8005b36:	d00b      	beq.n	8005b50 <_vfiprintf_r+0xc0>
 8005b38:	465b      	mov	r3, fp
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff ff93 	bl	8005a6a <__sfputs_r>
 8005b44:	3001      	adds	r0, #1
 8005b46:	f000 80aa 	beq.w	8005c9e <_vfiprintf_r+0x20e>
 8005b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b4c:	445a      	add	r2, fp
 8005b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b50:	f89a 3000 	ldrb.w	r3, [sl]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80a2 	beq.w	8005c9e <_vfiprintf_r+0x20e>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b64:	f10a 0a01 	add.w	sl, sl, #1
 8005b68:	9304      	str	r3, [sp, #16]
 8005b6a:	9307      	str	r3, [sp, #28]
 8005b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b70:	931a      	str	r3, [sp, #104]	; 0x68
 8005b72:	4654      	mov	r4, sl
 8005b74:	2205      	movs	r2, #5
 8005b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7a:	4858      	ldr	r0, [pc, #352]	; (8005cdc <_vfiprintf_r+0x24c>)
 8005b7c:	f7fa fb58 	bl	8000230 <memchr>
 8005b80:	9a04      	ldr	r2, [sp, #16]
 8005b82:	b9d8      	cbnz	r0, 8005bbc <_vfiprintf_r+0x12c>
 8005b84:	06d1      	lsls	r1, r2, #27
 8005b86:	bf44      	itt	mi
 8005b88:	2320      	movmi	r3, #32
 8005b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b8e:	0713      	lsls	r3, r2, #28
 8005b90:	bf44      	itt	mi
 8005b92:	232b      	movmi	r3, #43	; 0x2b
 8005b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b98:	f89a 3000 	ldrb.w	r3, [sl]
 8005b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b9e:	d015      	beq.n	8005bcc <_vfiprintf_r+0x13c>
 8005ba0:	9a07      	ldr	r2, [sp, #28]
 8005ba2:	4654      	mov	r4, sl
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f04f 0c0a 	mov.w	ip, #10
 8005baa:	4621      	mov	r1, r4
 8005bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb0:	3b30      	subs	r3, #48	; 0x30
 8005bb2:	2b09      	cmp	r3, #9
 8005bb4:	d94e      	bls.n	8005c54 <_vfiprintf_r+0x1c4>
 8005bb6:	b1b0      	cbz	r0, 8005be6 <_vfiprintf_r+0x156>
 8005bb8:	9207      	str	r2, [sp, #28]
 8005bba:	e014      	b.n	8005be6 <_vfiprintf_r+0x156>
 8005bbc:	eba0 0308 	sub.w	r3, r0, r8
 8005bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	9304      	str	r3, [sp, #16]
 8005bc8:	46a2      	mov	sl, r4
 8005bca:	e7d2      	b.n	8005b72 <_vfiprintf_r+0xe2>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	1d19      	adds	r1, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	9103      	str	r1, [sp, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bfbb      	ittet	lt
 8005bd8:	425b      	neglt	r3, r3
 8005bda:	f042 0202 	orrlt.w	r2, r2, #2
 8005bde:	9307      	strge	r3, [sp, #28]
 8005be0:	9307      	strlt	r3, [sp, #28]
 8005be2:	bfb8      	it	lt
 8005be4:	9204      	strlt	r2, [sp, #16]
 8005be6:	7823      	ldrb	r3, [r4, #0]
 8005be8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bea:	d10c      	bne.n	8005c06 <_vfiprintf_r+0x176>
 8005bec:	7863      	ldrb	r3, [r4, #1]
 8005bee:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf0:	d135      	bne.n	8005c5e <_vfiprintf_r+0x1ce>
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	9203      	str	r2, [sp, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bfb8      	it	lt
 8005bfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c02:	3402      	adds	r4, #2
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005cec <_vfiprintf_r+0x25c>
 8005c0a:	7821      	ldrb	r1, [r4, #0]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	4650      	mov	r0, sl
 8005c10:	f7fa fb0e 	bl	8000230 <memchr>
 8005c14:	b140      	cbz	r0, 8005c28 <_vfiprintf_r+0x198>
 8005c16:	2340      	movs	r3, #64	; 0x40
 8005c18:	eba0 000a 	sub.w	r0, r0, sl
 8005c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c20:	9b04      	ldr	r3, [sp, #16]
 8005c22:	4303      	orrs	r3, r0
 8005c24:	3401      	adds	r4, #1
 8005c26:	9304      	str	r3, [sp, #16]
 8005c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2c:	482c      	ldr	r0, [pc, #176]	; (8005ce0 <_vfiprintf_r+0x250>)
 8005c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c32:	2206      	movs	r2, #6
 8005c34:	f7fa fafc 	bl	8000230 <memchr>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d03f      	beq.n	8005cbc <_vfiprintf_r+0x22c>
 8005c3c:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <_vfiprintf_r+0x254>)
 8005c3e:	bb1b      	cbnz	r3, 8005c88 <_vfiprintf_r+0x1f8>
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	3307      	adds	r3, #7
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	3308      	adds	r3, #8
 8005c4a:	9303      	str	r3, [sp, #12]
 8005c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4e:	443b      	add	r3, r7
 8005c50:	9309      	str	r3, [sp, #36]	; 0x24
 8005c52:	e767      	b.n	8005b24 <_vfiprintf_r+0x94>
 8005c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c58:	460c      	mov	r4, r1
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	e7a5      	b.n	8005baa <_vfiprintf_r+0x11a>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	3401      	adds	r4, #1
 8005c62:	9305      	str	r3, [sp, #20]
 8005c64:	4619      	mov	r1, r3
 8005c66:	f04f 0c0a 	mov.w	ip, #10
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c70:	3a30      	subs	r2, #48	; 0x30
 8005c72:	2a09      	cmp	r2, #9
 8005c74:	d903      	bls.n	8005c7e <_vfiprintf_r+0x1ee>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0c5      	beq.n	8005c06 <_vfiprintf_r+0x176>
 8005c7a:	9105      	str	r1, [sp, #20]
 8005c7c:	e7c3      	b.n	8005c06 <_vfiprintf_r+0x176>
 8005c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c82:	4604      	mov	r4, r0
 8005c84:	2301      	movs	r3, #1
 8005c86:	e7f0      	b.n	8005c6a <_vfiprintf_r+0x1da>
 8005c88:	ab03      	add	r3, sp, #12
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <_vfiprintf_r+0x258>)
 8005c90:	a904      	add	r1, sp, #16
 8005c92:	4630      	mov	r0, r6
 8005c94:	f7fd fc3a 	bl	800350c <_printf_float>
 8005c98:	4607      	mov	r7, r0
 8005c9a:	1c78      	adds	r0, r7, #1
 8005c9c:	d1d6      	bne.n	8005c4c <_vfiprintf_r+0x1bc>
 8005c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca0:	07d9      	lsls	r1, r3, #31
 8005ca2:	d405      	bmi.n	8005cb0 <_vfiprintf_r+0x220>
 8005ca4:	89ab      	ldrh	r3, [r5, #12]
 8005ca6:	059a      	lsls	r2, r3, #22
 8005ca8:	d402      	bmi.n	8005cb0 <_vfiprintf_r+0x220>
 8005caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cac:	f7ff f9fe 	bl	80050ac <__retarget_lock_release_recursive>
 8005cb0:	89ab      	ldrh	r3, [r5, #12]
 8005cb2:	065b      	lsls	r3, r3, #25
 8005cb4:	f53f af12 	bmi.w	8005adc <_vfiprintf_r+0x4c>
 8005cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cba:	e711      	b.n	8005ae0 <_vfiprintf_r+0x50>
 8005cbc:	ab03      	add	r3, sp, #12
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <_vfiprintf_r+0x258>)
 8005cc4:	a904      	add	r1, sp, #16
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7fd fec4 	bl	8003a54 <_printf_i>
 8005ccc:	e7e4      	b.n	8005c98 <_vfiprintf_r+0x208>
 8005cce:	bf00      	nop
 8005cd0:	08012a08 	.word	0x08012a08
 8005cd4:	08012a28 	.word	0x08012a28
 8005cd8:	080129e8 	.word	0x080129e8
 8005cdc:	08012bcc 	.word	0x08012bcc
 8005ce0:	08012bd6 	.word	0x08012bd6
 8005ce4:	0800350d 	.word	0x0800350d
 8005ce8:	08005a6b 	.word	0x08005a6b
 8005cec:	08012bd2 	.word	0x08012bd2

08005cf0 <__sread>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf8:	f7fc fedb 	bl	8002ab2 <_read_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	bfab      	itete	ge
 8005d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d02:	89a3      	ldrhlt	r3, [r4, #12]
 8005d04:	181b      	addge	r3, r3, r0
 8005d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d0a:	bfac      	ite	ge
 8005d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d0e:	81a3      	strhlt	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__swrite>:
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	461f      	mov	r7, r3
 8005d18:	898b      	ldrh	r3, [r1, #12]
 8005d1a:	05db      	lsls	r3, r3, #23
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4616      	mov	r6, r2
 8005d22:	d505      	bpl.n	8005d30 <__swrite+0x1e>
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	2302      	movs	r3, #2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f7fc febf 	bl	8002aae <_lseek_r>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	463b      	mov	r3, r7
 8005d40:	4628      	mov	r0, r5
 8005d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	f7fc beb9 	b.w	8002abc <_write_r>

08005d4a <__sseek>:
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d52:	f7fc feac 	bl	8002aae <_lseek_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	bf15      	itete	ne
 8005d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d66:	81a3      	strheq	r3, [r4, #12]
 8005d68:	bf18      	it	ne
 8005d6a:	81a3      	strhne	r3, [r4, #12]
 8005d6c:	bd10      	pop	{r4, pc}

08005d6e <__sclose>:
 8005d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d72:	f7fc be93 	b.w	8002a9c <_close_r>
	...

08005d78 <__swbuf_r>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	460e      	mov	r6, r1
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	4605      	mov	r5, r0
 8005d80:	b118      	cbz	r0, 8005d8a <__swbuf_r+0x12>
 8005d82:	6983      	ldr	r3, [r0, #24]
 8005d84:	b90b      	cbnz	r3, 8005d8a <__swbuf_r+0x12>
 8005d86:	f7ff f8db 	bl	8004f40 <__sinit>
 8005d8a:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <__swbuf_r+0x98>)
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	d12b      	bne.n	8005de8 <__swbuf_r+0x70>
 8005d90:	686c      	ldr	r4, [r5, #4]
 8005d92:	69a3      	ldr	r3, [r4, #24]
 8005d94:	60a3      	str	r3, [r4, #8]
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	071a      	lsls	r2, r3, #28
 8005d9a:	d52f      	bpl.n	8005dfc <__swbuf_r+0x84>
 8005d9c:	6923      	ldr	r3, [r4, #16]
 8005d9e:	b36b      	cbz	r3, 8005dfc <__swbuf_r+0x84>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	6820      	ldr	r0, [r4, #0]
 8005da4:	1ac0      	subs	r0, r0, r3
 8005da6:	6963      	ldr	r3, [r4, #20]
 8005da8:	b2f6      	uxtb	r6, r6
 8005daa:	4283      	cmp	r3, r0
 8005dac:	4637      	mov	r7, r6
 8005dae:	dc04      	bgt.n	8005dba <__swbuf_r+0x42>
 8005db0:	4621      	mov	r1, r4
 8005db2:	4628      	mov	r0, r5
 8005db4:	f7ff f830 	bl	8004e18 <_fflush_r>
 8005db8:	bb30      	cbnz	r0, 8005e08 <__swbuf_r+0x90>
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	60a3      	str	r3, [r4, #8]
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	701e      	strb	r6, [r3, #0]
 8005dc8:	6963      	ldr	r3, [r4, #20]
 8005dca:	3001      	adds	r0, #1
 8005dcc:	4283      	cmp	r3, r0
 8005dce:	d004      	beq.n	8005dda <__swbuf_r+0x62>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	07db      	lsls	r3, r3, #31
 8005dd4:	d506      	bpl.n	8005de4 <__swbuf_r+0x6c>
 8005dd6:	2e0a      	cmp	r6, #10
 8005dd8:	d104      	bne.n	8005de4 <__swbuf_r+0x6c>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7ff f81b 	bl	8004e18 <_fflush_r>
 8005de2:	b988      	cbnz	r0, 8005e08 <__swbuf_r+0x90>
 8005de4:	4638      	mov	r0, r7
 8005de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <__swbuf_r+0x9c>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d101      	bne.n	8005df2 <__swbuf_r+0x7a>
 8005dee:	68ac      	ldr	r4, [r5, #8]
 8005df0:	e7cf      	b.n	8005d92 <__swbuf_r+0x1a>
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <__swbuf_r+0xa0>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	bf08      	it	eq
 8005df8:	68ec      	ldreq	r4, [r5, #12]
 8005dfa:	e7ca      	b.n	8005d92 <__swbuf_r+0x1a>
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f81a 	bl	8005e38 <__swsetup_r>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d0cb      	beq.n	8005da0 <__swbuf_r+0x28>
 8005e08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e0c:	e7ea      	b.n	8005de4 <__swbuf_r+0x6c>
 8005e0e:	bf00      	nop
 8005e10:	08012a08 	.word	0x08012a08
 8005e14:	08012a28 	.word	0x08012a28
 8005e18:	080129e8 	.word	0x080129e8

08005e1c <__ascii_wctomb>:
 8005e1c:	b149      	cbz	r1, 8005e32 <__ascii_wctomb+0x16>
 8005e1e:	2aff      	cmp	r2, #255	; 0xff
 8005e20:	bf85      	ittet	hi
 8005e22:	238a      	movhi	r3, #138	; 0x8a
 8005e24:	6003      	strhi	r3, [r0, #0]
 8005e26:	700a      	strbls	r2, [r1, #0]
 8005e28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005e2c:	bf98      	it	ls
 8005e2e:	2001      	movls	r0, #1
 8005e30:	4770      	bx	lr
 8005e32:	4608      	mov	r0, r1
 8005e34:	4770      	bx	lr
	...

08005e38 <__swsetup_r>:
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <__swsetup_r+0xcc>)
 8005e3a:	b570      	push	{r4, r5, r6, lr}
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	b125      	cbz	r5, 8005e4e <__swsetup_r+0x16>
 8005e44:	69ab      	ldr	r3, [r5, #24]
 8005e46:	b913      	cbnz	r3, 8005e4e <__swsetup_r+0x16>
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f7ff f879 	bl	8004f40 <__sinit>
 8005e4e:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <__swsetup_r+0xd0>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d10f      	bne.n	8005e74 <__swsetup_r+0x3c>
 8005e54:	686c      	ldr	r4, [r5, #4]
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5c:	0719      	lsls	r1, r3, #28
 8005e5e:	d42c      	bmi.n	8005eba <__swsetup_r+0x82>
 8005e60:	06dd      	lsls	r5, r3, #27
 8005e62:	d411      	bmi.n	8005e88 <__swsetup_r+0x50>
 8005e64:	2309      	movs	r3, #9
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e72:	e03e      	b.n	8005ef2 <__swsetup_r+0xba>
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <__swsetup_r+0xd4>)
 8005e76:	429c      	cmp	r4, r3
 8005e78:	d101      	bne.n	8005e7e <__swsetup_r+0x46>
 8005e7a:	68ac      	ldr	r4, [r5, #8]
 8005e7c:	e7eb      	b.n	8005e56 <__swsetup_r+0x1e>
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <__swsetup_r+0xd8>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	bf08      	it	eq
 8005e84:	68ec      	ldreq	r4, [r5, #12]
 8005e86:	e7e6      	b.n	8005e56 <__swsetup_r+0x1e>
 8005e88:	0758      	lsls	r0, r3, #29
 8005e8a:	d512      	bpl.n	8005eb2 <__swsetup_r+0x7a>
 8005e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8e:	b141      	cbz	r1, 8005ea2 <__swsetup_r+0x6a>
 8005e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d002      	beq.n	8005e9e <__swsetup_r+0x66>
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7ff fd29 	bl	80058f0 <_free_r>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6063      	str	r3, [r4, #4]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	b94b      	cbnz	r3, 8005ed2 <__swsetup_r+0x9a>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec8:	d003      	beq.n	8005ed2 <__swsetup_r+0x9a>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7ff f913 	bl	80050f8 <__smakebuf_r>
 8005ed2:	89a0      	ldrh	r0, [r4, #12]
 8005ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ed8:	f010 0301 	ands.w	r3, r0, #1
 8005edc:	d00a      	beq.n	8005ef4 <__swsetup_r+0xbc>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	6963      	ldr	r3, [r4, #20]
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	61a3      	str	r3, [r4, #24]
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	b943      	cbnz	r3, 8005efe <__swsetup_r+0xc6>
 8005eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ef0:	d1ba      	bne.n	8005e68 <__swsetup_r+0x30>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	0781      	lsls	r1, r0, #30
 8005ef6:	bf58      	it	pl
 8005ef8:	6963      	ldrpl	r3, [r4, #20]
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	e7f4      	b.n	8005ee8 <__swsetup_r+0xb0>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e7f7      	b.n	8005ef2 <__swsetup_r+0xba>
 8005f02:	bf00      	nop
 8005f04:	20000018 	.word	0x20000018
 8005f08:	08012a08 	.word	0x08012a08
 8005f0c:	08012a28 	.word	0x08012a28
 8005f10:	080129e8 	.word	0x080129e8

08005f14 <abort>:
 8005f14:	b508      	push	{r3, lr}
 8005f16:	2006      	movs	r0, #6
 8005f18:	f000 f878 	bl	800600c <raise>
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f7fc fdf0 	bl	8002b02 <_exit>

08005f22 <memmove>:
 8005f22:	4288      	cmp	r0, r1
 8005f24:	b510      	push	{r4, lr}
 8005f26:	eb01 0402 	add.w	r4, r1, r2
 8005f2a:	d902      	bls.n	8005f32 <memmove+0x10>
 8005f2c:	4284      	cmp	r4, r0
 8005f2e:	4623      	mov	r3, r4
 8005f30:	d807      	bhi.n	8005f42 <memmove+0x20>
 8005f32:	1e43      	subs	r3, r0, #1
 8005f34:	42a1      	cmp	r1, r4
 8005f36:	d008      	beq.n	8005f4a <memmove+0x28>
 8005f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f40:	e7f8      	b.n	8005f34 <memmove+0x12>
 8005f42:	4402      	add	r2, r0
 8005f44:	4601      	mov	r1, r0
 8005f46:	428a      	cmp	r2, r1
 8005f48:	d100      	bne.n	8005f4c <memmove+0x2a>
 8005f4a:	bd10      	pop	{r4, pc}
 8005f4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f54:	e7f7      	b.n	8005f46 <memmove+0x24>
	...

08005f58 <__malloc_lock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__malloc_lock+0x8>)
 8005f5a:	f7ff b8a6 	b.w	80050aa <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20000c94 	.word	0x20000c94

08005f64 <__malloc_unlock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_unlock+0x8>)
 8005f66:	f7ff b8a1 	b.w	80050ac <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20000c94 	.word	0x20000c94

08005f70 <_realloc_r>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	4607      	mov	r7, r0
 8005f74:	4614      	mov	r4, r2
 8005f76:	460e      	mov	r6, r1
 8005f78:	b921      	cbnz	r1, 8005f84 <_realloc_r+0x14>
 8005f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f7e:	4611      	mov	r1, r2
 8005f80:	f7ff bd02 	b.w	8005988 <_malloc_r>
 8005f84:	b922      	cbnz	r2, 8005f90 <_realloc_r+0x20>
 8005f86:	f7ff fcb3 	bl	80058f0 <_free_r>
 8005f8a:	4625      	mov	r5, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f90:	f000 f858 	bl	8006044 <_malloc_usable_size_r>
 8005f94:	42a0      	cmp	r0, r4
 8005f96:	d20f      	bcs.n	8005fb8 <_realloc_r+0x48>
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	f7ff fcf4 	bl	8005988 <_malloc_r>
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d0f2      	beq.n	8005f8c <_realloc_r+0x1c>
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4622      	mov	r2, r4
 8005faa:	f7ff f8ff 	bl	80051ac <memcpy>
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7ff fc9d 	bl	80058f0 <_free_r>
 8005fb6:	e7e9      	b.n	8005f8c <_realloc_r+0x1c>
 8005fb8:	4635      	mov	r5, r6
 8005fba:	e7e7      	b.n	8005f8c <_realloc_r+0x1c>

08005fbc <_raise_r>:
 8005fbc:	291f      	cmp	r1, #31
 8005fbe:	b538      	push	{r3, r4, r5, lr}
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	d904      	bls.n	8005fd0 <_raise_r+0x14>
 8005fc6:	2316      	movs	r3, #22
 8005fc8:	6003      	str	r3, [r0, #0]
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fd2:	b112      	cbz	r2, 8005fda <_raise_r+0x1e>
 8005fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fd8:	b94b      	cbnz	r3, 8005fee <_raise_r+0x32>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f830 	bl	8006040 <_getpid_r>
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fea:	f000 b817 	b.w	800601c <_kill_r>
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d00a      	beq.n	8006008 <_raise_r+0x4c>
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	d103      	bne.n	8005ffe <_raise_r+0x42>
 8005ff6:	2316      	movs	r3, #22
 8005ff8:	6003      	str	r3, [r0, #0]
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e7e7      	b.n	8005fce <_raise_r+0x12>
 8005ffe:	2400      	movs	r4, #0
 8006000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006004:	4628      	mov	r0, r5
 8006006:	4798      	blx	r3
 8006008:	2000      	movs	r0, #0
 800600a:	e7e0      	b.n	8005fce <_raise_r+0x12>

0800600c <raise>:
 800600c:	4b02      	ldr	r3, [pc, #8]	; (8006018 <raise+0xc>)
 800600e:	4601      	mov	r1, r0
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	f7ff bfd3 	b.w	8005fbc <_raise_r>
 8006016:	bf00      	nop
 8006018:	20000018 	.word	0x20000018

0800601c <_kill_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_kill_r+0x20>)
 8006020:	2300      	movs	r3, #0
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	f7fc fd67 	bl	8002afc <_kill>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d102      	bne.n	8006038 <_kill_r+0x1c>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	b103      	cbz	r3, 8006038 <_kill_r+0x1c>
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	bf00      	nop
 800603c:	20000ca0 	.word	0x20000ca0

08006040 <_getpid_r>:
 8006040:	f7fc bd60 	b.w	8002b04 <_getpid>

08006044 <_malloc_usable_size_r>:
 8006044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006048:	1f18      	subs	r0, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfbc      	itt	lt
 800604e:	580b      	ldrlt	r3, [r1, r0]
 8006050:	18c0      	addlt	r0, r0, r3
 8006052:	4770      	bx	lr

08006054 <iprintf>:
 8006054:	b40f      	push	{r0, r1, r2, r3}
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <iprintf+0x2c>)
 8006058:	b513      	push	{r0, r1, r4, lr}
 800605a:	681c      	ldr	r4, [r3, #0]
 800605c:	b124      	cbz	r4, 8006068 <iprintf+0x14>
 800605e:	69a3      	ldr	r3, [r4, #24]
 8006060:	b913      	cbnz	r3, 8006068 <iprintf+0x14>
 8006062:	4620      	mov	r0, r4
 8006064:	f7fe ff6c 	bl	8004f40 <__sinit>
 8006068:	ab05      	add	r3, sp, #20
 800606a:	9a04      	ldr	r2, [sp, #16]
 800606c:	68a1      	ldr	r1, [r4, #8]
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	4620      	mov	r0, r4
 8006072:	f7ff fd0d 	bl	8005a90 <_vfiprintf_r>
 8006076:	b002      	add	sp, #8
 8006078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800607c:	b004      	add	sp, #16
 800607e:	4770      	bx	lr
 8006080:	20000018 	.word	0x20000018

08006084 <putchar>:
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <putchar+0x28>)
 8006086:	b513      	push	{r0, r1, r4, lr}
 8006088:	681c      	ldr	r4, [r3, #0]
 800608a:	4601      	mov	r1, r0
 800608c:	b134      	cbz	r4, 800609c <putchar+0x18>
 800608e:	69a3      	ldr	r3, [r4, #24]
 8006090:	b923      	cbnz	r3, 800609c <putchar+0x18>
 8006092:	9001      	str	r0, [sp, #4]
 8006094:	4620      	mov	r0, r4
 8006096:	f7fe ff53 	bl	8004f40 <__sinit>
 800609a:	9901      	ldr	r1, [sp, #4]
 800609c:	68a2      	ldr	r2, [r4, #8]
 800609e:	4620      	mov	r0, r4
 80060a0:	b002      	add	sp, #8
 80060a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a6:	f000 ba31 	b.w	800650c <_putc_r>
 80060aa:	bf00      	nop
 80060ac:	20000018 	.word	0x20000018

080060b0 <_puts_r>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	460e      	mov	r6, r1
 80060b4:	4605      	mov	r5, r0
 80060b6:	b118      	cbz	r0, 80060c0 <_puts_r+0x10>
 80060b8:	6983      	ldr	r3, [r0, #24]
 80060ba:	b90b      	cbnz	r3, 80060c0 <_puts_r+0x10>
 80060bc:	f7fe ff40 	bl	8004f40 <__sinit>
 80060c0:	69ab      	ldr	r3, [r5, #24]
 80060c2:	68ac      	ldr	r4, [r5, #8]
 80060c4:	b913      	cbnz	r3, 80060cc <_puts_r+0x1c>
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7fe ff3a 	bl	8004f40 <__sinit>
 80060cc:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <_puts_r+0xd0>)
 80060ce:	429c      	cmp	r4, r3
 80060d0:	d120      	bne.n	8006114 <_puts_r+0x64>
 80060d2:	686c      	ldr	r4, [r5, #4]
 80060d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060d6:	07db      	lsls	r3, r3, #31
 80060d8:	d405      	bmi.n	80060e6 <_puts_r+0x36>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	0598      	lsls	r0, r3, #22
 80060de:	d402      	bmi.n	80060e6 <_puts_r+0x36>
 80060e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e2:	f7fe ffe2 	bl	80050aa <__retarget_lock_acquire_recursive>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	0719      	lsls	r1, r3, #28
 80060ea:	d51d      	bpl.n	8006128 <_puts_r+0x78>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	b1db      	cbz	r3, 8006128 <_puts_r+0x78>
 80060f0:	3e01      	subs	r6, #1
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060f8:	3b01      	subs	r3, #1
 80060fa:	60a3      	str	r3, [r4, #8]
 80060fc:	bb39      	cbnz	r1, 800614e <_puts_r+0x9e>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da38      	bge.n	8006174 <_puts_r+0xc4>
 8006102:	4622      	mov	r2, r4
 8006104:	210a      	movs	r1, #10
 8006106:	4628      	mov	r0, r5
 8006108:	f7ff fe36 	bl	8005d78 <__swbuf_r>
 800610c:	3001      	adds	r0, #1
 800610e:	d011      	beq.n	8006134 <_puts_r+0x84>
 8006110:	250a      	movs	r5, #10
 8006112:	e011      	b.n	8006138 <_puts_r+0x88>
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <_puts_r+0xd4>)
 8006116:	429c      	cmp	r4, r3
 8006118:	d101      	bne.n	800611e <_puts_r+0x6e>
 800611a:	68ac      	ldr	r4, [r5, #8]
 800611c:	e7da      	b.n	80060d4 <_puts_r+0x24>
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <_puts_r+0xd8>)
 8006120:	429c      	cmp	r4, r3
 8006122:	bf08      	it	eq
 8006124:	68ec      	ldreq	r4, [r5, #12]
 8006126:	e7d5      	b.n	80060d4 <_puts_r+0x24>
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f7ff fe84 	bl	8005e38 <__swsetup_r>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0dd      	beq.n	80060f0 <_puts_r+0x40>
 8006134:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800613a:	07da      	lsls	r2, r3, #31
 800613c:	d405      	bmi.n	800614a <_puts_r+0x9a>
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	059b      	lsls	r3, r3, #22
 8006142:	d402      	bmi.n	800614a <_puts_r+0x9a>
 8006144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006146:	f7fe ffb1 	bl	80050ac <__retarget_lock_release_recursive>
 800614a:	4628      	mov	r0, r5
 800614c:	bd70      	pop	{r4, r5, r6, pc}
 800614e:	2b00      	cmp	r3, #0
 8006150:	da04      	bge.n	800615c <_puts_r+0xac>
 8006152:	69a2      	ldr	r2, [r4, #24]
 8006154:	429a      	cmp	r2, r3
 8006156:	dc06      	bgt.n	8006166 <_puts_r+0xb6>
 8006158:	290a      	cmp	r1, #10
 800615a:	d004      	beq.n	8006166 <_puts_r+0xb6>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	6022      	str	r2, [r4, #0]
 8006162:	7019      	strb	r1, [r3, #0]
 8006164:	e7c5      	b.n	80060f2 <_puts_r+0x42>
 8006166:	4622      	mov	r2, r4
 8006168:	4628      	mov	r0, r5
 800616a:	f7ff fe05 	bl	8005d78 <__swbuf_r>
 800616e:	3001      	adds	r0, #1
 8006170:	d1bf      	bne.n	80060f2 <_puts_r+0x42>
 8006172:	e7df      	b.n	8006134 <_puts_r+0x84>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	250a      	movs	r5, #10
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	6022      	str	r2, [r4, #0]
 800617c:	701d      	strb	r5, [r3, #0]
 800617e:	e7db      	b.n	8006138 <_puts_r+0x88>
 8006180:	08012a08 	.word	0x08012a08
 8006184:	08012a28 	.word	0x08012a28
 8006188:	080129e8 	.word	0x080129e8

0800618c <puts>:
 800618c:	4b02      	ldr	r3, [pc, #8]	; (8006198 <puts+0xc>)
 800618e:	4601      	mov	r1, r0
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f7ff bf8d 	b.w	80060b0 <_puts_r>
 8006196:	bf00      	nop
 8006198:	20000018 	.word	0x20000018

0800619c <strcasecmp>:
 800619c:	b530      	push	{r4, r5, lr}
 800619e:	4d0b      	ldr	r5, [pc, #44]	; (80061cc <strcasecmp+0x30>)
 80061a0:	4604      	mov	r4, r0
 80061a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061a6:	5d5a      	ldrb	r2, [r3, r5]
 80061a8:	f002 0203 	and.w	r2, r2, #3
 80061ac:	2a01      	cmp	r2, #1
 80061ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b2:	5ca8      	ldrb	r0, [r5, r2]
 80061b4:	f000 0003 	and.w	r0, r0, #3
 80061b8:	bf08      	it	eq
 80061ba:	3320      	addeq	r3, #32
 80061bc:	2801      	cmp	r0, #1
 80061be:	bf08      	it	eq
 80061c0:	3220      	addeq	r2, #32
 80061c2:	1a98      	subs	r0, r3, r2
 80061c4:	d101      	bne.n	80061ca <strcasecmp+0x2e>
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d1eb      	bne.n	80061a2 <strcasecmp+0x6>
 80061ca:	bd30      	pop	{r4, r5, pc}
 80061cc:	08012742 	.word	0x08012742

080061d0 <strcpy>:
 80061d0:	4603      	mov	r3, r0
 80061d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061d6:	f803 2b01 	strb.w	r2, [r3], #1
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d1f9      	bne.n	80061d2 <strcpy+0x2>
 80061de:	4770      	bx	lr

080061e0 <_vsniprintf_r>:
 80061e0:	b530      	push	{r4, r5, lr}
 80061e2:	4614      	mov	r4, r2
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	b09b      	sub	sp, #108	; 0x6c
 80061e8:	4605      	mov	r5, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	da05      	bge.n	80061fa <_vsniprintf_r+0x1a>
 80061ee:	238b      	movs	r3, #139	; 0x8b
 80061f0:	6003      	str	r3, [r0, #0]
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061f6:	b01b      	add	sp, #108	; 0x6c
 80061f8:	bd30      	pop	{r4, r5, pc}
 80061fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006202:	bf14      	ite	ne
 8006204:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006208:	4623      	moveq	r3, r4
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006212:	9100      	str	r1, [sp, #0]
 8006214:	9104      	str	r1, [sp, #16]
 8006216:	f8ad 300e 	strh.w	r3, [sp, #14]
 800621a:	4669      	mov	r1, sp
 800621c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800621e:	f000 f875 	bl	800630c <_svfiprintf_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	bfbc      	itt	lt
 8006226:	238b      	movlt	r3, #139	; 0x8b
 8006228:	602b      	strlt	r3, [r5, #0]
 800622a:	2c00      	cmp	r4, #0
 800622c:	d0e3      	beq.n	80061f6 <_vsniprintf_r+0x16>
 800622e:	9b00      	ldr	r3, [sp, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e7df      	b.n	80061f6 <_vsniprintf_r+0x16>
	...

08006238 <vsniprintf>:
 8006238:	b507      	push	{r0, r1, r2, lr}
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	460a      	mov	r2, r1
 8006240:	4601      	mov	r1, r0
 8006242:	4803      	ldr	r0, [pc, #12]	; (8006250 <vsniprintf+0x18>)
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	f7ff ffcb 	bl	80061e0 <_vsniprintf_r>
 800624a:	b003      	add	sp, #12
 800624c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006250:	20000018 	.word	0x20000018

08006254 <__ssputs_r>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	688e      	ldr	r6, [r1, #8]
 800625a:	429e      	cmp	r6, r3
 800625c:	4682      	mov	sl, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4690      	mov	r8, r2
 8006262:	461f      	mov	r7, r3
 8006264:	d838      	bhi.n	80062d8 <__ssputs_r+0x84>
 8006266:	898a      	ldrh	r2, [r1, #12]
 8006268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800626c:	d032      	beq.n	80062d4 <__ssputs_r+0x80>
 800626e:	6825      	ldr	r5, [r4, #0]
 8006270:	6909      	ldr	r1, [r1, #16]
 8006272:	eba5 0901 	sub.w	r9, r5, r1
 8006276:	6965      	ldr	r5, [r4, #20]
 8006278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800627c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006280:	3301      	adds	r3, #1
 8006282:	444b      	add	r3, r9
 8006284:	106d      	asrs	r5, r5, #1
 8006286:	429d      	cmp	r5, r3
 8006288:	bf38      	it	cc
 800628a:	461d      	movcc	r5, r3
 800628c:	0553      	lsls	r3, r2, #21
 800628e:	d531      	bpl.n	80062f4 <__ssputs_r+0xa0>
 8006290:	4629      	mov	r1, r5
 8006292:	f7ff fb79 	bl	8005988 <_malloc_r>
 8006296:	4606      	mov	r6, r0
 8006298:	b950      	cbnz	r0, 80062b0 <__ssputs_r+0x5c>
 800629a:	230c      	movs	r3, #12
 800629c:	f8ca 3000 	str.w	r3, [sl]
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	6921      	ldr	r1, [r4, #16]
 80062b2:	464a      	mov	r2, r9
 80062b4:	f7fe ff7a 	bl	80051ac <memcpy>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	81a3      	strh	r3, [r4, #12]
 80062c4:	6126      	str	r6, [r4, #16]
 80062c6:	6165      	str	r5, [r4, #20]
 80062c8:	444e      	add	r6, r9
 80062ca:	eba5 0509 	sub.w	r5, r5, r9
 80062ce:	6026      	str	r6, [r4, #0]
 80062d0:	60a5      	str	r5, [r4, #8]
 80062d2:	463e      	mov	r6, r7
 80062d4:	42be      	cmp	r6, r7
 80062d6:	d900      	bls.n	80062da <__ssputs_r+0x86>
 80062d8:	463e      	mov	r6, r7
 80062da:	6820      	ldr	r0, [r4, #0]
 80062dc:	4632      	mov	r2, r6
 80062de:	4641      	mov	r1, r8
 80062e0:	f7ff fe1f 	bl	8005f22 <memmove>
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	1b9b      	subs	r3, r3, r6
 80062e8:	60a3      	str	r3, [r4, #8]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	4433      	add	r3, r6
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7db      	b.n	80062ac <__ssputs_r+0x58>
 80062f4:	462a      	mov	r2, r5
 80062f6:	f7ff fe3b 	bl	8005f70 <_realloc_r>
 80062fa:	4606      	mov	r6, r0
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d1e1      	bne.n	80062c4 <__ssputs_r+0x70>
 8006300:	6921      	ldr	r1, [r4, #16]
 8006302:	4650      	mov	r0, sl
 8006304:	f7ff faf4 	bl	80058f0 <_free_r>
 8006308:	e7c7      	b.n	800629a <__ssputs_r+0x46>
	...

0800630c <_svfiprintf_r>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4698      	mov	r8, r3
 8006312:	898b      	ldrh	r3, [r1, #12]
 8006314:	061b      	lsls	r3, r3, #24
 8006316:	b09d      	sub	sp, #116	; 0x74
 8006318:	4607      	mov	r7, r0
 800631a:	460d      	mov	r5, r1
 800631c:	4614      	mov	r4, r2
 800631e:	d50e      	bpl.n	800633e <_svfiprintf_r+0x32>
 8006320:	690b      	ldr	r3, [r1, #16]
 8006322:	b963      	cbnz	r3, 800633e <_svfiprintf_r+0x32>
 8006324:	2140      	movs	r1, #64	; 0x40
 8006326:	f7ff fb2f 	bl	8005988 <_malloc_r>
 800632a:	6028      	str	r0, [r5, #0]
 800632c:	6128      	str	r0, [r5, #16]
 800632e:	b920      	cbnz	r0, 800633a <_svfiprintf_r+0x2e>
 8006330:	230c      	movs	r3, #12
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006338:	e0d1      	b.n	80064de <_svfiprintf_r+0x1d2>
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	616b      	str	r3, [r5, #20]
 800633e:	2300      	movs	r3, #0
 8006340:	9309      	str	r3, [sp, #36]	; 0x24
 8006342:	2320      	movs	r3, #32
 8006344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006348:	f8cd 800c 	str.w	r8, [sp, #12]
 800634c:	2330      	movs	r3, #48	; 0x30
 800634e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064f8 <_svfiprintf_r+0x1ec>
 8006352:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006356:	f04f 0901 	mov.w	r9, #1
 800635a:	4623      	mov	r3, r4
 800635c:	469a      	mov	sl, r3
 800635e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006362:	b10a      	cbz	r2, 8006368 <_svfiprintf_r+0x5c>
 8006364:	2a25      	cmp	r2, #37	; 0x25
 8006366:	d1f9      	bne.n	800635c <_svfiprintf_r+0x50>
 8006368:	ebba 0b04 	subs.w	fp, sl, r4
 800636c:	d00b      	beq.n	8006386 <_svfiprintf_r+0x7a>
 800636e:	465b      	mov	r3, fp
 8006370:	4622      	mov	r2, r4
 8006372:	4629      	mov	r1, r5
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff ff6d 	bl	8006254 <__ssputs_r>
 800637a:	3001      	adds	r0, #1
 800637c:	f000 80aa 	beq.w	80064d4 <_svfiprintf_r+0x1c8>
 8006380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006382:	445a      	add	r2, fp
 8006384:	9209      	str	r2, [sp, #36]	; 0x24
 8006386:	f89a 3000 	ldrb.w	r3, [sl]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80a2 	beq.w	80064d4 <_svfiprintf_r+0x1c8>
 8006390:	2300      	movs	r3, #0
 8006392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800639a:	f10a 0a01 	add.w	sl, sl, #1
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	9307      	str	r3, [sp, #28]
 80063a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a6:	931a      	str	r3, [sp, #104]	; 0x68
 80063a8:	4654      	mov	r4, sl
 80063aa:	2205      	movs	r2, #5
 80063ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b0:	4851      	ldr	r0, [pc, #324]	; (80064f8 <_svfiprintf_r+0x1ec>)
 80063b2:	f7f9 ff3d 	bl	8000230 <memchr>
 80063b6:	9a04      	ldr	r2, [sp, #16]
 80063b8:	b9d8      	cbnz	r0, 80063f2 <_svfiprintf_r+0xe6>
 80063ba:	06d0      	lsls	r0, r2, #27
 80063bc:	bf44      	itt	mi
 80063be:	2320      	movmi	r3, #32
 80063c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c4:	0711      	lsls	r1, r2, #28
 80063c6:	bf44      	itt	mi
 80063c8:	232b      	movmi	r3, #43	; 0x2b
 80063ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ce:	f89a 3000 	ldrb.w	r3, [sl]
 80063d2:	2b2a      	cmp	r3, #42	; 0x2a
 80063d4:	d015      	beq.n	8006402 <_svfiprintf_r+0xf6>
 80063d6:	9a07      	ldr	r2, [sp, #28]
 80063d8:	4654      	mov	r4, sl
 80063da:	2000      	movs	r0, #0
 80063dc:	f04f 0c0a 	mov.w	ip, #10
 80063e0:	4621      	mov	r1, r4
 80063e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e6:	3b30      	subs	r3, #48	; 0x30
 80063e8:	2b09      	cmp	r3, #9
 80063ea:	d94e      	bls.n	800648a <_svfiprintf_r+0x17e>
 80063ec:	b1b0      	cbz	r0, 800641c <_svfiprintf_r+0x110>
 80063ee:	9207      	str	r2, [sp, #28]
 80063f0:	e014      	b.n	800641c <_svfiprintf_r+0x110>
 80063f2:	eba0 0308 	sub.w	r3, r0, r8
 80063f6:	fa09 f303 	lsl.w	r3, r9, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	46a2      	mov	sl, r4
 8006400:	e7d2      	b.n	80063a8 <_svfiprintf_r+0x9c>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	1d19      	adds	r1, r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	9103      	str	r1, [sp, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfbb      	ittet	lt
 800640e:	425b      	neglt	r3, r3
 8006410:	f042 0202 	orrlt.w	r2, r2, #2
 8006414:	9307      	strge	r3, [sp, #28]
 8006416:	9307      	strlt	r3, [sp, #28]
 8006418:	bfb8      	it	lt
 800641a:	9204      	strlt	r2, [sp, #16]
 800641c:	7823      	ldrb	r3, [r4, #0]
 800641e:	2b2e      	cmp	r3, #46	; 0x2e
 8006420:	d10c      	bne.n	800643c <_svfiprintf_r+0x130>
 8006422:	7863      	ldrb	r3, [r4, #1]
 8006424:	2b2a      	cmp	r3, #42	; 0x2a
 8006426:	d135      	bne.n	8006494 <_svfiprintf_r+0x188>
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	9203      	str	r2, [sp, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	bfb8      	it	lt
 8006434:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006438:	3402      	adds	r4, #2
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006508 <_svfiprintf_r+0x1fc>
 8006440:	7821      	ldrb	r1, [r4, #0]
 8006442:	2203      	movs	r2, #3
 8006444:	4650      	mov	r0, sl
 8006446:	f7f9 fef3 	bl	8000230 <memchr>
 800644a:	b140      	cbz	r0, 800645e <_svfiprintf_r+0x152>
 800644c:	2340      	movs	r3, #64	; 0x40
 800644e:	eba0 000a 	sub.w	r0, r0, sl
 8006452:	fa03 f000 	lsl.w	r0, r3, r0
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	4303      	orrs	r3, r0
 800645a:	3401      	adds	r4, #1
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006462:	4826      	ldr	r0, [pc, #152]	; (80064fc <_svfiprintf_r+0x1f0>)
 8006464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006468:	2206      	movs	r2, #6
 800646a:	f7f9 fee1 	bl	8000230 <memchr>
 800646e:	2800      	cmp	r0, #0
 8006470:	d038      	beq.n	80064e4 <_svfiprintf_r+0x1d8>
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <_svfiprintf_r+0x1f4>)
 8006474:	bb1b      	cbnz	r3, 80064be <_svfiprintf_r+0x1b2>
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	3307      	adds	r3, #7
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	3308      	adds	r3, #8
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006484:	4433      	add	r3, r6
 8006486:	9309      	str	r3, [sp, #36]	; 0x24
 8006488:	e767      	b.n	800635a <_svfiprintf_r+0x4e>
 800648a:	fb0c 3202 	mla	r2, ip, r2, r3
 800648e:	460c      	mov	r4, r1
 8006490:	2001      	movs	r0, #1
 8006492:	e7a5      	b.n	80063e0 <_svfiprintf_r+0xd4>
 8006494:	2300      	movs	r3, #0
 8006496:	3401      	adds	r4, #1
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	4619      	mov	r1, r3
 800649c:	f04f 0c0a 	mov.w	ip, #10
 80064a0:	4620      	mov	r0, r4
 80064a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a6:	3a30      	subs	r2, #48	; 0x30
 80064a8:	2a09      	cmp	r2, #9
 80064aa:	d903      	bls.n	80064b4 <_svfiprintf_r+0x1a8>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0c5      	beq.n	800643c <_svfiprintf_r+0x130>
 80064b0:	9105      	str	r1, [sp, #20]
 80064b2:	e7c3      	b.n	800643c <_svfiprintf_r+0x130>
 80064b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b8:	4604      	mov	r4, r0
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7f0      	b.n	80064a0 <_svfiprintf_r+0x194>
 80064be:	ab03      	add	r3, sp, #12
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	462a      	mov	r2, r5
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <_svfiprintf_r+0x1f8>)
 80064c6:	a904      	add	r1, sp, #16
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7fd f81f 	bl	800350c <_printf_float>
 80064ce:	1c42      	adds	r2, r0, #1
 80064d0:	4606      	mov	r6, r0
 80064d2:	d1d6      	bne.n	8006482 <_svfiprintf_r+0x176>
 80064d4:	89ab      	ldrh	r3, [r5, #12]
 80064d6:	065b      	lsls	r3, r3, #25
 80064d8:	f53f af2c 	bmi.w	8006334 <_svfiprintf_r+0x28>
 80064dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064de:	b01d      	add	sp, #116	; 0x74
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	ab03      	add	r3, sp, #12
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	462a      	mov	r2, r5
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <_svfiprintf_r+0x1f8>)
 80064ec:	a904      	add	r1, sp, #16
 80064ee:	4638      	mov	r0, r7
 80064f0:	f7fd fab0 	bl	8003a54 <_printf_i>
 80064f4:	e7eb      	b.n	80064ce <_svfiprintf_r+0x1c2>
 80064f6:	bf00      	nop
 80064f8:	08012bcc 	.word	0x08012bcc
 80064fc:	08012bd6 	.word	0x08012bd6
 8006500:	0800350d 	.word	0x0800350d
 8006504:	08006255 	.word	0x08006255
 8006508:	08012bd2 	.word	0x08012bd2

0800650c <_putc_r>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	460d      	mov	r5, r1
 8006510:	4614      	mov	r4, r2
 8006512:	4606      	mov	r6, r0
 8006514:	b118      	cbz	r0, 800651e <_putc_r+0x12>
 8006516:	6983      	ldr	r3, [r0, #24]
 8006518:	b90b      	cbnz	r3, 800651e <_putc_r+0x12>
 800651a:	f7fe fd11 	bl	8004f40 <__sinit>
 800651e:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <_putc_r+0x84>)
 8006520:	429c      	cmp	r4, r3
 8006522:	d124      	bne.n	800656e <_putc_r+0x62>
 8006524:	6874      	ldr	r4, [r6, #4]
 8006526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006528:	07d8      	lsls	r0, r3, #31
 800652a:	d405      	bmi.n	8006538 <_putc_r+0x2c>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	0599      	lsls	r1, r3, #22
 8006530:	d402      	bmi.n	8006538 <_putc_r+0x2c>
 8006532:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006534:	f7fe fdb9 	bl	80050aa <__retarget_lock_acquire_recursive>
 8006538:	68a3      	ldr	r3, [r4, #8]
 800653a:	3b01      	subs	r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	60a3      	str	r3, [r4, #8]
 8006540:	da05      	bge.n	800654e <_putc_r+0x42>
 8006542:	69a2      	ldr	r2, [r4, #24]
 8006544:	4293      	cmp	r3, r2
 8006546:	db1c      	blt.n	8006582 <_putc_r+0x76>
 8006548:	b2eb      	uxtb	r3, r5
 800654a:	2b0a      	cmp	r3, #10
 800654c:	d019      	beq.n	8006582 <_putc_r+0x76>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	701d      	strb	r5, [r3, #0]
 8006556:	b2ed      	uxtb	r5, r5
 8006558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655a:	07da      	lsls	r2, r3, #31
 800655c:	d405      	bmi.n	800656a <_putc_r+0x5e>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	059b      	lsls	r3, r3, #22
 8006562:	d402      	bmi.n	800656a <_putc_r+0x5e>
 8006564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006566:	f7fe fda1 	bl	80050ac <__retarget_lock_release_recursive>
 800656a:	4628      	mov	r0, r5
 800656c:	bd70      	pop	{r4, r5, r6, pc}
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <_putc_r+0x88>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d101      	bne.n	8006578 <_putc_r+0x6c>
 8006574:	68b4      	ldr	r4, [r6, #8]
 8006576:	e7d6      	b.n	8006526 <_putc_r+0x1a>
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <_putc_r+0x8c>)
 800657a:	429c      	cmp	r4, r3
 800657c:	bf08      	it	eq
 800657e:	68f4      	ldreq	r4, [r6, #12]
 8006580:	e7d1      	b.n	8006526 <_putc_r+0x1a>
 8006582:	4629      	mov	r1, r5
 8006584:	4622      	mov	r2, r4
 8006586:	4630      	mov	r0, r6
 8006588:	f7ff fbf6 	bl	8005d78 <__swbuf_r>
 800658c:	4605      	mov	r5, r0
 800658e:	e7e3      	b.n	8006558 <_putc_r+0x4c>
 8006590:	08012a08 	.word	0x08012a08
 8006594:	08012a28 	.word	0x08012a28
 8006598:	080129e8 	.word	0x080129e8

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
