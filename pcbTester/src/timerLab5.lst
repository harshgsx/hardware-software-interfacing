
timerLab5.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08005e30 l    d  .rodata	00000000 .rodata
0801255c l    d  .ARM	00000000 .ARM
08012564 l    d  .init_array	00000000 .init_array
08012568 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001ec l    d  .bss	00000000 .bss
20000bbc l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
08002a80 l       .text	00000000 LoopCopyDataInit
08002a7a l       .text	00000000 CopyDataInit
08002a92 l       .text	00000000 LoopFillZerobss
08002a8e l       .text	00000000 FillZerobss
08002abc l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08005e14 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001ec l       .bss	00000001 completed.1
08012568 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001f0 l       .bss	00000018 object.0
08012564 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000efc l     F .text	000000d8 Stepper
08000fd4 l     F .text	0000004c TerminalRead
08001020 l     F .text	0000007c Uncompress
0800109c l     F .text	00000190 HAL_GPIO_Init
0800122c l     F .text	00000058 HAL_NVIC_SetPriority.constprop.0
08001284 l     F .text	00000050 HAL_InitTick.isra.0
080012d4 l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
0800139c l     F .text	0000016c CmdStepperInit
08001508 l     F .text	00000044 CmdTasks
0800154c l     F .text	00000054 DecodeReadRegister
080015a0 l     F .text	00000020 CmdVersion
080015c0 l     F .text	00000050 DecodeWriteRegister.isra.0
08001610 l     F .text	0000002c CmdTest
0800163c l     F .text	000000b8 DecodeRegister
080016f4 l     F .text	00000050 DecodePeripheral
08001744 l     F .text	00000060 DecodePrintRegisters
080017a4 l     F .text	00000058 DecodePrintPeripherals.constprop.0
080017fc l     F .text	00000030 fetch_string_arg
0800182c l     F .text	00000204 TaskInput
08001a30 l     F .text	0000003c fetch_int32_arg
08001a6c l     F .text	0000003c fetch_uint32_arg
08001aa8 l     F .text	00000058 CmdLed
08001b00 l     F .text	00000078 CmdStepperEnable
08001b78 l     F .text	00000038 CmdStep
08001bb0 l     F .text	0000003c CmdAngle
08001bec l     F .text	00000070 CmdR
08001c5c l     F .text	0000001e CmdW
08001c7c l     F .text	000000f8 CmdDump
08001d74 l     F .text	00000074 CmdSend
08001de8 l     F .text	00000060 CmdReceive
08001e48 l     F .text	00000044 CmdTransparent
08001e8c l     F .text	00000284 CmdDecode
08002110 l     F .text	0000003c PolledPrintf
0800214c l     F .text	00000068 CmdStats
20000208 l     O .bss	00000004 AccumTicks
2000020c l     O .bss	00000004 LedState.0
20000210 l     O .bss	00000834 TerminalState
20000a44 l     O .bss	00000004 address.1
20000a48 l     O .bss	00000014 buf.0
20000a5c l     O .bss	00000004 cmdArgs
20000a60 l     O .bss	00000004 count.3
20000a64 l     O .bss	00000004 crReceived
20000a68 l     O .bss	00000004 heap_end.0
20000a6c l     O .bss	0000000c hiwdg
20000a78 l     O .bss	00000044 huart2
20000abc l     O .bss	00000050 input
20000b0c l     O .bss	00000050 input_b
20000b5c l     O .bss	00000004 saved.1
20000b60 l     O .bss	00000048 tim11
20000ba8 l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000004 printPrompt.4
20000014 l     O .data	00000004 uwTickPrio
08009980 l     O .rodata	00000070 ADC1_CR1_fields
080099f0 l     O .rodata	00000060 ADC1_CR2_fields
08009a50 l     O .rodata	00000008 ADC1_DR_fields
08009a58 l     O .rodata	00000008 ADC1_HTR_fields
08009a60 l     O .rodata	00000008 ADC1_JDR1_fields
08009a68 l     O .rodata	00000008 ADC1_JDR2_fields
08009a70 l     O .rodata	00000008 ADC1_JDR3_fields
08009a78 l     O .rodata	00000008 ADC1_JDR4_fields
08009a80 l     O .rodata	00000008 ADC1_JOFR1_fields
08009a88 l     O .rodata	00000008 ADC1_JOFR2_fields
08009a90 l     O .rodata	00000008 ADC1_JOFR3_fields
08009a98 l     O .rodata	00000008 ADC1_JOFR4_fields
08009aa0 l     O .rodata	00000028 ADC1_JSQR_fields
08009ac8 l     O .rodata	00000008 ADC1_LTR_fields
08009ad0 l     O .rodata	00000008 ADC1_SMPR1_fields
08009ad8 l     O .rodata	00000008 ADC1_SMPR2_fields
08009ae0 l     O .rodata	00000028 ADC1_SQR1_fields
08009b08 l     O .rodata	00000030 ADC1_SQR2_fields
08009b38 l     O .rodata	00000030 ADC1_SQR3_fields
08009b68 l     O .rodata	00000030 ADC1_SR_fields
08009b98 l     O .rodata	00000140 ADC1_registers
08009cd8 l     O .rodata	00000030 ADC_Common_CCR_fields
08009d08 l     O .rodata	00000090 ADC_Common_CSR_fields
08009d98 l     O .rodata	00000020 ADC_Common_registers
08009db8 l     O .rodata	00000010 AHBPrescTable
08009dc8 l     O .rodata	00000008 APBPrescTable
08009dd0 l     O .rodata	00000008 CRC_CR_fields
08009dd8 l     O .rodata	00000008 CRC_DR_fields
08009de0 l     O .rodata	00000008 CRC_IDR_fields
08009de8 l     O .rodata	00000030 CRC_registers
08009e18 l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
08009e68 l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
08009e88 l     O .rodata	00000028 DBG_DBGMCU_CR_fields
08009eb0 l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
08009ec0 l     O .rodata	00000040 DBG_registers
08009f00 l     O .rodata	000000a0 DMA2_HIFCR_fields
08009fa0 l     O .rodata	000000a0 DMA2_HISR_fields
0800a040 l     O .rodata	000000a0 DMA2_LIFCR_fields
0800a0e0 l     O .rodata	000000a0 DMA2_LISR_fields
0800a180 l     O .rodata	00000098 DMA2_S0CR_fields
0800a218 l     O .rodata	00000020 DMA2_S0FCR_fields
0800a238 l     O .rodata	00000008 DMA2_S0M0AR_fields
0800a240 l     O .rodata	00000008 DMA2_S0M1AR_fields
0800a248 l     O .rodata	00000008 DMA2_S0NDTR_fields
0800a250 l     O .rodata	00000008 DMA2_S0PAR_fields
0800a258 l     O .rodata	000000a0 DMA2_S1CR_fields
0800a2f8 l     O .rodata	00000020 DMA2_S1FCR_fields
0800a318 l     O .rodata	00000008 DMA2_S1M0AR_fields
0800a320 l     O .rodata	00000008 DMA2_S1M1AR_fields
0800a328 l     O .rodata	00000008 DMA2_S1NDTR_fields
0800a330 l     O .rodata	00000008 DMA2_S1PAR_fields
0800a338 l     O .rodata	000000a0 DMA2_S2CR_fields
0800a3d8 l     O .rodata	00000020 DMA2_S2FCR_fields
0800a3f8 l     O .rodata	00000008 DMA2_S2M0AR_fields
0800a400 l     O .rodata	00000008 DMA2_S2M1AR_fields
0800a408 l     O .rodata	00000008 DMA2_S2NDTR_fields
0800a410 l     O .rodata	00000008 DMA2_S2PAR_fields
0800a418 l     O .rodata	000000a0 DMA2_S3CR_fields
0800a4b8 l     O .rodata	00000020 DMA2_S3FCR_fields
0800a4d8 l     O .rodata	00000008 DMA2_S3M0AR_fields
0800a4e0 l     O .rodata	00000008 DMA2_S3M1AR_fields
0800a4e8 l     O .rodata	00000008 DMA2_S3NDTR_fields
0800a4f0 l     O .rodata	00000008 DMA2_S3PAR_fields
0800a4f8 l     O .rodata	000000a0 DMA2_S4CR_fields
0800a598 l     O .rodata	00000020 DMA2_S4FCR_fields
0800a5b8 l     O .rodata	00000008 DMA2_S4M0AR_fields
0800a5c0 l     O .rodata	00000008 DMA2_S4M1AR_fields
0800a5c8 l     O .rodata	00000008 DMA2_S4NDTR_fields
0800a5d0 l     O .rodata	00000008 DMA2_S4PAR_fields
0800a5d8 l     O .rodata	000000a0 DMA2_S5CR_fields
0800a678 l     O .rodata	00000020 DMA2_S5FCR_fields
0800a698 l     O .rodata	00000008 DMA2_S5M0AR_fields
0800a6a0 l     O .rodata	00000008 DMA2_S5M1AR_fields
0800a6a8 l     O .rodata	00000008 DMA2_S5NDTR_fields
0800a6b0 l     O .rodata	00000008 DMA2_S5PAR_fields
0800a6b8 l     O .rodata	000000a0 DMA2_S6CR_fields
0800a758 l     O .rodata	00000020 DMA2_S6FCR_fields
0800a778 l     O .rodata	00000008 DMA2_S6M0AR_fields
0800a780 l     O .rodata	00000008 DMA2_S6M1AR_fields
0800a788 l     O .rodata	00000008 DMA2_S6NDTR_fields
0800a790 l     O .rodata	00000008 DMA2_S6PAR_fields
0800a798 l     O .rodata	000000a0 DMA2_S7CR_fields
0800a838 l     O .rodata	00000020 DMA2_S7FCR_fields
0800a858 l     O .rodata	00000008 DMA2_S7M0AR_fields
0800a860 l     O .rodata	00000008 DMA2_S7M1AR_fields
0800a868 l     O .rodata	00000008 DMA2_S7NDTR_fields
0800a870 l     O .rodata	00000008 DMA2_S7PAR_fields
0800a878 l     O .rodata	00000340 DMA2_registers
0800abb8 l     O .rodata	000000b8 EXTI_EMR_fields
0800ac70 l     O .rodata	000000b8 EXTI_FTSR_fields
0800ad28 l     O .rodata	000000b8 EXTI_IMR_fields
0800ade0 l     O .rodata	000000b8 EXTI_PR_fields
0800ae98 l     O .rodata	000000b8 EXTI_RTSR_fields
0800af50 l     O .rodata	000000b8 EXTI_SWIER_fields
0800b008 l     O .rodata	00000060 EXTI_registers
0800b068 l     O .rodata	00000030 FLASH_ACR_fields
0800b098 l     O .rodata	00000048 FLASH_CR_fields
0800b0e0 l     O .rodata	00000008 FLASH_KEYR_fields
0800b0e8 l     O .rodata	00000040 FLASH_OPTCR_fields
0800b128 l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800b130 l     O .rodata	00000038 FLASH_SR_fields
0800b168 l     O .rodata	00000060 FLASH_registers
0800b1c8 l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800b1d0 l     O .rodata	00000010 FPU_CPACR_registers
0800b1e0 l     O .rodata	00000008 FPU_FPCAR_fields
0800b1e8 l     O .rodata	00000048 FPU_FPCCR_fields
0800b230 l     O .rodata	00000070 FPU_FPSCR_fields
0800b2a0 l     O .rodata	00000030 FPU_registers
0800b2d0 l     O .rodata	00000040 GPIOA_AFRH_fields
0800b310 l     O .rodata	00000040 GPIOA_AFRL_fields
0800b350 l     O .rodata	00000100 GPIOA_BSRR_fields
0800b450 l     O .rodata	00000080 GPIOA_IDR_fields
0800b4d0 l     O .rodata	00000088 GPIOA_LCKR_fields
0800b558 l     O .rodata	00000080 GPIOA_MODER_fields
0800b5d8 l     O .rodata	00000080 GPIOA_ODR_fields
0800b658 l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800b6d8 l     O .rodata	00000080 GPIOA_OTYPER_fields
0800b758 l     O .rodata	00000080 GPIOA_PUPDR_fields
0800b7d8 l     O .rodata	000000a0 GPIOA_registers
0800b878 l     O .rodata	00000040 GPIOB_AFRH_fields
0800b8b8 l     O .rodata	00000040 GPIOB_AFRL_fields
0800b8f8 l     O .rodata	00000100 GPIOB_BSRR_fields
0800b9f8 l     O .rodata	00000080 GPIOB_IDR_fields
0800ba78 l     O .rodata	00000088 GPIOB_LCKR_fields
0800bb00 l     O .rodata	00000080 GPIOB_MODER_fields
0800bb80 l     O .rodata	00000080 GPIOB_ODR_fields
0800bc00 l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800bc80 l     O .rodata	00000080 GPIOB_OTYPER_fields
0800bd00 l     O .rodata	00000080 GPIOB_PUPDR_fields
0800bd80 l     O .rodata	000000a0 GPIOB_registers
0800be20 l     O .rodata	00000040 GPIOH_AFRH_fields
0800be60 l     O .rodata	00000040 GPIOH_AFRL_fields
0800bea0 l     O .rodata	00000100 GPIOH_BSRR_fields
0800bfa0 l     O .rodata	00000080 GPIOH_IDR_fields
0800c020 l     O .rodata	00000088 GPIOH_LCKR_fields
0800c0a8 l     O .rodata	00000080 GPIOH_MODER_fields
0800c128 l     O .rodata	00000080 GPIOH_ODR_fields
0800c1a8 l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800c228 l     O .rodata	00000080 GPIOH_OTYPER_fields
0800c2a8 l     O .rodata	00000080 GPIOH_PUPDR_fields
0800c328 l     O .rodata	000000a0 GPIOH_registers
0800c3c8 l     O .rodata	00000018 I2C3_CCR_fields
0800c3e0 l     O .rodata	00000070 I2C3_CR1_fields
0800c450 l     O .rodata	00000030 I2C3_CR2_fields
0800c480 l     O .rodata	00000008 I2C3_DR_fields
0800c488 l     O .rodata	00000020 I2C3_OAR1_fields
0800c4a8 l     O .rodata	00000010 I2C3_OAR2_fields
0800c4b8 l     O .rodata	00000070 I2C3_SR1_fields
0800c528 l     O .rodata	00000040 I2C3_SR2_fields
0800c568 l     O .rodata	00000008 I2C3_TRISE_fields
0800c570 l     O .rodata	00000090 I2C3_registers
0800c600 l     O .rodata	00000070 I2S2ext_CR1_fields
0800c670 l     O .rodata	00000038 I2S2ext_CR2_fields
0800c6a8 l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800c6b0 l     O .rodata	00000008 I2S2ext_DR_fields
0800c6b8 l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800c6f8 l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800c710 l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800c718 l     O .rodata	00000048 I2S2ext_SR_fields
0800c760 l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800c768 l     O .rodata	00000090 I2S2ext_registers
0800c7f8 l     O .rodata	00000008 IWDG_KR_fields
0800c800 l     O .rodata	00000008 IWDG_PR_fields
0800c808 l     O .rodata	00000008 IWDG_RLR_fields
0800c810 l     O .rodata	00000010 IWDG_SR_fields
0800c820 l     O .rodata	00000040 IWDG_registers
0800c860 l     O .rodata	00000194 InterruptNames
0800c9f4 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800ca0c l     O .rodata	00000048 MPU_MPU_RASR_fields
0800ca54 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800ca6c l     O .rodata	00000008 MPU_MPU_RNR_fields
0800ca74 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800ca8c l     O .rodata	00000050 MPU_registers
0800cadc l     O .rodata	00000008 NVIC_IABR0_fields
0800cae4 l     O .rodata	00000008 NVIC_IABR1_fields
0800caec l     O .rodata	00000008 NVIC_IABR2_fields
0800caf4 l     O .rodata	00000008 NVIC_ICER0_fields
0800cafc l     O .rodata	00000008 NVIC_ICER1_fields
0800cb04 l     O .rodata	00000008 NVIC_ICER2_fields
0800cb0c l     O .rodata	00000008 NVIC_ICPR0_fields
0800cb14 l     O .rodata	00000008 NVIC_ICPR1_fields
0800cb1c l     O .rodata	00000008 NVIC_ICPR2_fields
0800cb24 l     O .rodata	00000020 NVIC_IPR0_fields
0800cb44 l     O .rodata	00000020 NVIC_IPR10_fields
0800cb64 l     O .rodata	00000020 NVIC_IPR11_fields
0800cb84 l     O .rodata	00000020 NVIC_IPR12_fields
0800cba4 l     O .rodata	00000020 NVIC_IPR13_fields
0800cbc4 l     O .rodata	00000020 NVIC_IPR14_fields
0800cbe4 l     O .rodata	00000020 NVIC_IPR15_fields
0800cc04 l     O .rodata	00000020 NVIC_IPR16_fields
0800cc24 l     O .rodata	00000020 NVIC_IPR17_fields
0800cc44 l     O .rodata	00000020 NVIC_IPR18_fields
0800cc64 l     O .rodata	00000020 NVIC_IPR19_fields
0800cc84 l     O .rodata	00000020 NVIC_IPR1_fields
0800cca4 l     O .rodata	00000020 NVIC_IPR2_fields
0800ccc4 l     O .rodata	00000020 NVIC_IPR3_fields
0800cce4 l     O .rodata	00000020 NVIC_IPR4_fields
0800cd04 l     O .rodata	00000020 NVIC_IPR5_fields
0800cd24 l     O .rodata	00000020 NVIC_IPR6_fields
0800cd44 l     O .rodata	00000020 NVIC_IPR7_fields
0800cd64 l     O .rodata	00000020 NVIC_IPR8_fields
0800cd84 l     O .rodata	00000020 NVIC_IPR9_fields
0800cda4 l     O .rodata	00000008 NVIC_ISER0_fields
0800cdac l     O .rodata	00000008 NVIC_ISER1_fields
0800cdb4 l     O .rodata	00000008 NVIC_ISER2_fields
0800cdbc l     O .rodata	00000008 NVIC_ISPR0_fields
0800cdc4 l     O .rodata	00000008 NVIC_ISPR1_fields
0800cdcc l     O .rodata	00000008 NVIC_ISPR2_fields
0800cdd4 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800cddc l     O .rodata	00000010 NVIC_STIR_registers
0800cdec l     O .rodata	00000230 NVIC_registers
0800d01c l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800d084 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800d0ec l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800d154 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800d15c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800d18c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800d1bc l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800d1ec l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800d21c l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800d22c l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800d244 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800d25c l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800d274 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800d2c4 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800d32c l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800d394 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800d3fc l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800d424 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800d44c l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800d474 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800d49c l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800d4b4 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800d4cc l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800d4e4 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800d4fc l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800d504 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800d50c l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800d514 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800d51c l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800d524 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800d52c l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800d53c l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800d54c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800d56c l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800d5bc l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800d60c l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800d63c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800d65c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800d67c l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800d8dc l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800d8e4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800d8f4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800d904 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800d914 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800d92c l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800d94c l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800da14 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800dadc l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800daec l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800dafc l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800db14 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800db64 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800db94 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800dbcc l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800dbd4 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800dbfc l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800dc24 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800dc64 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800dc74 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
0800dda4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
0800ddf4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800de44 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
0800de94 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
0800dee4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
0800df34 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800df84 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800dfd4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800e024 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
0800e034 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800e07c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
0800e0c4 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
0800e10c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
0800e154 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800e19c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
0800e1e4 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800e22c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800e274 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
0800e2c4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
0800e314 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800e364 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800e3b4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
0800e404 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800e454 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
0800e4a4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
0800e4f4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
0800e50c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800e524 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800e53c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
0800e554 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800e56c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
0800e584 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
0800e59c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800e5b4 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
0800e5c4 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
0800e62c l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800e644 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800e64c l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
0800e654 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
0800e65c l     O .rodata	00000270 OTG_FS_HOST_registers
0800e8cc l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
0800e8e4 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
0800e8f4 l     O .rodata	00000050 PWR_CR_fields
0800e944 l     O .rodata	00000038 PWR_CSR_fields
0800e97c l     O .rodata	00000020 PWR_registers
0800e99c l     O .rodata	00000380 Peripherals
08011034 l     O .rodata	00000150 TIM2_registers
080114d4 l     O .rodata	00000140 TIM3_registers
0801196c l     O .rodata	00000150 TIM5_registers
0800f8bc l     O .rodata	00000270 RTC_registers
08011f94 l     O .rodata	00000030 WWDG_registers
08011ecc l     O .rodata	00000070 USART1_registers
08010b7c l     O .rodata	00000160 TIM1_registers
080101b4 l     O .rodata	00000120 SDIO_registers
080103fc l     O .rodata	00000070 SYSCFG_registers
08011c44 l     O .rodata	000000e0 TIM9_registers
0801053c l     O .rodata	000000b0 TIM10_registers
080106c4 l     O .rodata	000000c0 TIM11_registers
0800f30c l     O .rodata	00000140 RCC_registers
0800fb54 l     O .rodata	00000010 SCB_ACTRL_registers
0801031c l     O .rodata	00000040 STK_registers
0800fdb4 l     O .rodata	000000f0 SCB_registers
0800ed1c l     O .rodata	00000048 RCC_AHB1ENR_fields
0800ed64 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0800edbc l     O .rodata	00000048 RCC_AHB1RSTR_fields
0800ee04 l     O .rodata	00000008 RCC_AHB2ENR_fields
0800ee0c l     O .rodata	00000008 RCC_AHB2LPENR_fields
0800ee14 l     O .rodata	00000008 RCC_AHB2RSTR_fields
0800ee1c l     O .rodata	00000060 RCC_APB1ENR_fields
0800ee7c l     O .rodata	00000060 RCC_APB1LPENR_fields
0800eedc l     O .rodata	00000060 RCC_APB1RSTR_fields
0800ef3c l     O .rodata	00000058 RCC_APB2ENR_fields
0800ef94 l     O .rodata	00000058 RCC_APB2LPENR_fields
0800efec l     O .rodata	00000050 RCC_APB2RSTR_fields
0800f03c l     O .rodata	00000038 RCC_BDCR_fields
0800f074 l     O .rodata	00000068 RCC_CFGR_fields
0800f0dc l     O .rodata	000000a0 RCC_CIR_fields
0800f17c l     O .rodata	00000060 RCC_CR_fields
0800f1dc l     O .rodata	00000050 RCC_CSR_fields
0800f22c l     O .rodata	000000b0 RCC_PLLCFGR_fields
0800f2dc l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800f2ec l     O .rodata	00000020 RCC_SSCGR_fields
0800f44c l     O .rodata	00000070 RTC_ALRMAR_fields
0800f4bc l     O .rodata	00000010 RTC_ALRMASSR_fields
0800f4cc l     O .rodata	00000070 RTC_ALRMBR_fields
0800f53c l     O .rodata	00000010 RTC_ALRMBSSR_fields
0800f54c l     O .rodata	00000008 RTC_BKP0R_fields
0800f554 l     O .rodata	00000008 RTC_BKP10R_fields
0800f55c l     O .rodata	00000008 RTC_BKP11R_fields
0800f564 l     O .rodata	00000008 RTC_BKP12R_fields
0800f56c l     O .rodata	00000008 RTC_BKP13R_fields
0800f574 l     O .rodata	00000008 RTC_BKP14R_fields
0800f57c l     O .rodata	00000008 RTC_BKP15R_fields
0800f584 l     O .rodata	00000008 RTC_BKP16R_fields
0800f58c l     O .rodata	00000008 RTC_BKP17R_fields
0800f594 l     O .rodata	00000008 RTC_BKP18R_fields
0800f59c l     O .rodata	00000008 RTC_BKP19R_fields
0800f5a4 l     O .rodata	00000008 RTC_BKP1R_fields
0800f5ac l     O .rodata	00000008 RTC_BKP2R_fields
0800f5b4 l     O .rodata	00000008 RTC_BKP3R_fields
0800f5bc l     O .rodata	00000008 RTC_BKP4R_fields
0800f5c4 l     O .rodata	00000008 RTC_BKP5R_fields
0800f5cc l     O .rodata	00000008 RTC_BKP6R_fields
0800f5d4 l     O .rodata	00000008 RTC_BKP7R_fields
0800f5dc l     O .rodata	00000008 RTC_BKP8R_fields
0800f5e4 l     O .rodata	00000008 RTC_BKP9R_fields
0800f5ec l     O .rodata	00000010 RTC_CALIBR_fields
0800f5fc l     O .rodata	00000020 RTC_CALR_fields
0800f61c l     O .rodata	000000a8 RTC_CR_fields
0800f6c4 l     O .rodata	00000038 RTC_DR_fields
0800f6fc l     O .rodata	00000080 RTC_ISR_fields
0800f77c l     O .rodata	00000010 RTC_PRER_fields
0800f78c l     O .rodata	00000010 RTC_SHIFTR_fields
0800f79c l     O .rodata	00000008 RTC_SSR_fields
0800f7a4 l     O .rodata	00000068 RTC_TAFCR_fields
0800f80c l     O .rodata	00000038 RTC_TR_fields
0800f844 l     O .rodata	00000028 RTC_TSDR_fields
0800f86c l     O .rodata	00000008 RTC_TSSSR_fields
0800f874 l     O .rodata	00000038 RTC_TSTR_fields
0800f8ac l     O .rodata	00000008 RTC_WPR_fields
0800f8b4 l     O .rodata	00000008 RTC_WUTR_fields
0800fb2c l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
0800fb64 l     O .rodata	00000008 SCB_AFSR_fields
0800fb6c l     O .rodata	00000030 SCB_AIRCR_fields
0800fb9c l     O .rodata	00000008 SCB_BFAR_fields
0800fba4 l     O .rodata	00000030 SCB_CCR_fields
0800fbd4 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
0800fc64 l     O .rodata	00000028 SCB_CPUID_fields
0800fc8c l     O .rodata	00000018 SCB_HFSR_fields
0800fca4 l     O .rodata	00000048 SCB_ICSR_fields
0800fcec l     O .rodata	00000008 SCB_MMFAR_fields
0800fcf4 l     O .rodata	00000018 SCB_SCR_fields
0800fd0c l     O .rodata	00000070 SCB_SHCRS_fields
0800fd7c l     O .rodata	00000018 SCB_SHPR1_fields
0800fd94 l     O .rodata	00000008 SCB_SHPR2_fields
0800fd9c l     O .rodata	00000010 SCB_SHPR3_fields
0800fdac l     O .rodata	00000008 SCB_VTOR_fields
0800fea4 l     O .rodata	00000008 SDIO_ARG_fields
0800feac l     O .rodata	00000038 SDIO_CLKCR_fields
0800fee4 l     O .rodata	00000048 SDIO_CMD_fields
0800ff2c l     O .rodata	00000008 SDIO_DCOUNT_fields
0800ff34 l     O .rodata	00000048 SDIO_DCTRL_fields
0800ff7c l     O .rodata	00000008 SDIO_DLEN_fields
0800ff84 l     O .rodata	00000008 SDIO_DTIMER_fields
0800ff8c l     O .rodata	00000008 SDIO_FIFOCNT_fields
0800ff94 l     O .rodata	00000008 SDIO_FIFO_fields
0800ff9c l     O .rodata	00000068 SDIO_ICR_fields
08010004 l     O .rodata	000000c0 SDIO_MASK_fields
080100c4 l     O .rodata	00000008 SDIO_POWER_fields
080100cc l     O .rodata	00000008 SDIO_RESP1_fields
080100d4 l     O .rodata	00000008 SDIO_RESP2_fields
080100dc l     O .rodata	00000008 SDIO_RESP3_fields
080100e4 l     O .rodata	00000008 SDIO_RESP4_fields
080100ec l     O .rodata	00000008 SDIO_RESPCMD_fields
080100f4 l     O .rodata	000000c0 SDIO_STA_fields
080102d4 l     O .rodata	00000018 STK_CALIB_fields
080102ec l     O .rodata	00000020 STK_CTRL_fields
0801030c l     O .rodata	00000008 STK_LOAD_fields
08010314 l     O .rodata	00000008 STK_VAL_fields
0801035c l     O .rodata	00000010 SYSCFG_CMPCR_fields
0801036c l     O .rodata	00000020 SYSCFG_EXTICR1_fields
0801038c l     O .rodata	00000020 SYSCFG_EXTICR2_fields
080103ac l     O .rodata	00000020 SYSCFG_EXTICR3_fields
080103cc l     O .rodata	00000020 SYSCFG_EXTICR4_fields
080103ec l     O .rodata	00000008 SYSCFG_MEMRM_fields
080103f4 l     O .rodata	00000008 SYSCFG_PMC_fields
0801046c l     O .rodata	00000008 TIM10_ARR_fields
08010474 l     O .rodata	00000018 TIM10_CCER_fields
0801048c l     O .rodata	00000018 TIM10_CCMR1_Input_fields
080104a4 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
080104c4 l     O .rodata	00000008 TIM10_CCR1_fields
080104cc l     O .rodata	00000008 TIM10_CNT_fields
080104d4 l     O .rodata	00000028 TIM10_CR1_fields
080104fc l     O .rodata	00000010 TIM10_DIER_fields
0801050c l     O .rodata	00000010 TIM10_EGR_fields
0801051c l     O .rodata	00000008 TIM10_PSC_fields
08010524 l     O .rodata	00000018 TIM10_SR_fields
080105ec l     O .rodata	00000008 TIM11_ARR_fields
080105f4 l     O .rodata	00000018 TIM11_CCER_fields
0801060c l     O .rodata	00000018 TIM11_CCMR1_Input_fields
08010624 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
08010644 l     O .rodata	00000008 TIM11_CCR1_fields
0801064c l     O .rodata	00000008 TIM11_CNT_fields
08010654 l     O .rodata	00000028 TIM11_CR1_fields
0801067c l     O .rodata	00000010 TIM11_DIER_fields
0801068c l     O .rodata	00000010 TIM11_EGR_fields
0801069c l     O .rodata	00000008 TIM11_OR_fields
080106a4 l     O .rodata	00000008 TIM11_PSC_fields
080106ac l     O .rodata	00000018 TIM11_SR_fields
08010784 l     O .rodata	00000008 TIM1_ARR_fields
0801078c l     O .rodata	00000040 TIM1_BDTR_fields
080107cc l     O .rodata	00000070 TIM1_CCER_fields
0801083c l     O .rodata	00000030 TIM1_CCMR1_Input_fields
0801086c l     O .rodata	00000050 TIM1_CCMR1_Output_fields
080108bc l     O .rodata	00000030 TIM1_CCMR2_Input_fields
080108ec l     O .rodata	00000050 TIM1_CCMR2_Output_fields
0801093c l     O .rodata	00000008 TIM1_CCR1_fields
08010944 l     O .rodata	00000008 TIM1_CCR2_fields
0801094c l     O .rodata	00000008 TIM1_CCR3_fields
08010954 l     O .rodata	00000008 TIM1_CCR4_fields
0801095c l     O .rodata	00000008 TIM1_CNT_fields
08010964 l     O .rodata	00000040 TIM1_CR1_fields
080109a4 l     O .rodata	00000060 TIM1_CR2_fields
08010a04 l     O .rodata	00000010 TIM1_DCR_fields
08010a14 l     O .rodata	00000078 TIM1_DIER_fields
08010a8c l     O .rodata	00000008 TIM1_DMAR_fields
08010a94 l     O .rodata	00000040 TIM1_EGR_fields
08010ad4 l     O .rodata	00000008 TIM1_PSC_fields
08010adc l     O .rodata	00000008 TIM1_RCR_fields
08010ae4 l     O .rodata	00000038 TIM1_SMCR_fields
08010b1c l     O .rodata	00000060 TIM1_SR_fields
08010cdc l     O .rodata	00000010 TIM2_ARR_fields
08010cec l     O .rodata	00000060 TIM2_CCER_fields
08010d4c l     O .rodata	00000030 TIM2_CCMR1_Input_fields
08010d7c l     O .rodata	00000050 TIM2_CCMR1_Output_fields
08010dcc l     O .rodata	00000030 TIM2_CCMR2_Input_fields
08010dfc l     O .rodata	00000050 TIM2_CCMR2_Output_fields
08010e4c l     O .rodata	00000010 TIM2_CCR1_fields
08010e5c l     O .rodata	00000010 TIM2_CCR2_fields
08010e6c l     O .rodata	00000010 TIM2_CCR3_fields
08010e7c l     O .rodata	00000010 TIM2_CCR4_fields
08010e8c l     O .rodata	00000010 TIM2_CNT_fields
08010e9c l     O .rodata	00000040 TIM2_CR1_fields
08010edc l     O .rodata	00000018 TIM2_CR2_fields
08010ef4 l     O .rodata	00000010 TIM2_DCR_fields
08010f04 l     O .rodata	00000060 TIM2_DIER_fields
08010f64 l     O .rodata	00000008 TIM2_DMAR_fields
08010f6c l     O .rodata	00000030 TIM2_EGR_fields
08010f9c l     O .rodata	00000008 TIM2_OR_fields
08010fa4 l     O .rodata	00000008 TIM2_PSC_fields
08010fac l     O .rodata	00000038 TIM2_SMCR_fields
08010fe4 l     O .rodata	00000050 TIM2_SR_fields
08011184 l     O .rodata	00000010 TIM3_ARR_fields
08011194 l     O .rodata	00000060 TIM3_CCER_fields
080111f4 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
08011224 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
08011274 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
080112a4 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
080112f4 l     O .rodata	00000010 TIM3_CCR1_fields
08011304 l     O .rodata	00000010 TIM3_CCR2_fields
08011314 l     O .rodata	00000010 TIM3_CCR3_fields
08011324 l     O .rodata	00000010 TIM3_CCR4_fields
08011334 l     O .rodata	00000010 TIM3_CNT_fields
08011344 l     O .rodata	00000040 TIM3_CR1_fields
08011384 l     O .rodata	00000018 TIM3_CR2_fields
0801139c l     O .rodata	00000010 TIM3_DCR_fields
080113ac l     O .rodata	00000060 TIM3_DIER_fields
0801140c l     O .rodata	00000008 TIM3_DMAR_fields
08011414 l     O .rodata	00000030 TIM3_EGR_fields
08011444 l     O .rodata	00000008 TIM3_PSC_fields
0801144c l     O .rodata	00000038 TIM3_SMCR_fields
08011484 l     O .rodata	00000050 TIM3_SR_fields
08011614 l     O .rodata	00000010 TIM5_ARR_fields
08011624 l     O .rodata	00000060 TIM5_CCER_fields
08011684 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
080116b4 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
08011704 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
08011734 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
08011784 l     O .rodata	00000010 TIM5_CCR1_fields
08011794 l     O .rodata	00000010 TIM5_CCR2_fields
080117a4 l     O .rodata	00000010 TIM5_CCR3_fields
080117b4 l     O .rodata	00000010 TIM5_CCR4_fields
080117c4 l     O .rodata	00000010 TIM5_CNT_fields
080117d4 l     O .rodata	00000040 TIM5_CR1_fields
08011814 l     O .rodata	00000018 TIM5_CR2_fields
0801182c l     O .rodata	00000010 TIM5_DCR_fields
0801183c l     O .rodata	00000060 TIM5_DIER_fields
0801189c l     O .rodata	00000008 TIM5_DMAR_fields
080118a4 l     O .rodata	00000030 TIM5_EGR_fields
080118d4 l     O .rodata	00000008 TIM5_OR_fields
080118dc l     O .rodata	00000008 TIM5_PSC_fields
080118e4 l     O .rodata	00000038 TIM5_SMCR_fields
0801191c l     O .rodata	00000050 TIM5_SR_fields
08011abc l     O .rodata	00000008 TIM9_ARR_fields
08011ac4 l     O .rodata	00000030 TIM9_CCER_fields
08011af4 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
08011b24 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
08011b64 l     O .rodata	00000008 TIM9_CCR1_fields
08011b6c l     O .rodata	00000008 TIM9_CCR2_fields
08011b74 l     O .rodata	00000008 TIM9_CNT_fields
08011b7c l     O .rodata	00000030 TIM9_CR1_fields
08011bac l     O .rodata	00000008 TIM9_CR2_fields
08011bb4 l     O .rodata	00000020 TIM9_DIER_fields
08011bd4 l     O .rodata	00000020 TIM9_EGR_fields
08011bf4 l     O .rodata	00000008 TIM9_PSC_fields
08011bfc l     O .rodata	00000018 TIM9_SMCR_fields
08011c14 l     O .rodata	00000030 TIM9_SR_fields
08011d24 l     O .rodata	00000010 TerminalInfo
08011d34 l     O .rodata	00000010 USART1_BRR_fields
08011d44 l     O .rodata	00000078 USART1_CR1_fields
08011dbc l     O .rodata	00000048 USART1_CR2_fields
08011e04 l     O .rodata	00000060 USART1_CR3_fields
08011e64 l     O .rodata	00000008 USART1_DR_fields
08011e6c l     O .rodata	00000010 USART1_GTPR_fields
08011e7c l     O .rodata	00000050 USART1_SR_fields
08011f3c l     O .rodata	00000019 VersionBuildDateString
08011f55 l     O .rodata	00000006 VersionBuildUser
08011f5c l     O .rodata	00000020 WWDG_CFR_fields
08011f7c l     O .rodata	00000010 WWDG_CR_fields
08011f8c l     O .rodata	00000008 WWDG_SR_fields
08011fc4 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
08011fca l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
08003640 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
08003758 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
0800388c l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004708 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08012458 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080052b4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
2000001c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00004d4e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00004fa7 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00005126 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00005cef l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00007f90 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00008be7 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00008db0 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
000093a5 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
0000963d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
0000a6b4 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
0000aa6d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
0000ad5e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
0000b02a l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
0000b59e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
0000c130 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
0000c1dc l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
0000cfdf l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
0000d4e6 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
0000dd31 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
0000e4a4 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
0000efd1 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
000105c5 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00010c97 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00010e46 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
000130c8 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012568 l       .init_array	00000000 __init_array_end
08012564 l       .init_array	00000000 __preinit_array_end
08012564 l       .init_array	00000000 __init_array_start
08012564 l       .init_array	00000000 __preinit_array_start
08002abc  w    F .text	00000006 RTC_Alarm_IRQHandler
080058bc g     F .text	00000010 _malloc_usable_size_r
08002b28 g     F .text	000000c4 __cvt
08002abc  w    F .text	00000006 EXTI2_IRQHandler
080058fc g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
08002206 g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
08005a48 g     F .text	00000010 strcpy
08002260 g     F .text	00000004 _getpid
08005928 g     F .text	000000dc _puts_r
08000a7c g     F .text	0000007a .hidden __cmpdf2
0800220a g     F .text	00000004 _lseek_r
08002a34 g     F .text	00000002 DebugMon_Handler
0000c1dc  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.b33f3707
0801249c g     O .rodata	0000000c CmdTestE
08002abc  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
080005ec g     F .text	0000005a .hidden __floatdidf
08005894 g     F .text	00000024 _kill_r
080058cc g     F .text	00000030 printf
08002abc  w    F .text	00000006 TIM1_CC_IRQHandler
080055c2 g     F .text	00000024 __sseek
080047b8 g     F .text	00000070 __sinit
08002abc  w    F .text	00000006 DMA2_Stream5_IRQHandler
080055f0 g     F .text	000000a4 __swbuf_r
08002a2a g     F .text	00000002 HardFault_Handler
0800475c g     F .text	0000002c __sfmoreglue
08002abc  w    F .text	00000006 DMA1_Stream5_IRQHandler
080057dc g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08002a38 g     F .text	00000020 SysTick_Handler
080124c0 g     O .rodata	0000000c CmdLedE
08002abc  w    F .text	00000006 PVD_IRQHandler
08002abc  w    F .text	00000006 SDIO_IRQHandler
0800579a g     F .text	00000034 memmove
08002abc  w    F .text	00000006 TAMP_STAMP_IRQHandler
0801256c g       *ABS*	00000000 _sidata
08002a36 g     F .text	00000002 PendSV_Handler
08002a28 g     F .text	00000002 NMI_Handler
08004a40 g     F .text	00000080 _Balloc
08012564 g       .ARM	00000000 __exidx_end
080035f0 g     F .text	00000050 __strtok_r
00005cef  w      .debug_info	00000000 .hidden STM32F411.c.4f3d6be2
08002abc  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
0801255c g       .rodata	00000000 _parsetable_end
08002ac4 g     F .text	0000000c __errno
08012544 g     O .rodata	0000000c CmdWE
08002abc  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
080021fc g     F .text	0000000a _fstat_r
20000bb8 g     O .bss	00000004 errno
08005e2c g       .text	00000000 _etext
200001ec g       .bss	00000000 _sbss
0000e4a4  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.bef4368f
0000963d  w      .debug_info	00000000 .hidden terminal.c.9391c471
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
00008db0  w      .debug_info	00000000 .hidden parser.c.91355ccd
08002abc  w    F .text	00000006 I2C3_ER_IRQHandler
08004a24 g     F .text	0000001c memcpy
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
080033fc g     F .text	0000018c setvbuf
08004750 g     F .text	0000000c _cleanup_r
08005b84 g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
08002abc  w    F .text	00000006 EXTI0_IRQHandler
08002abc  w    F .text	00000006 I2C2_EV_IRQHandler
08000bf8 g     F .text	00000000 .hidden __aeabi_uldivmod
08005a04 g     F .text	00000010 puts
08002abc  w    F .text	00000006 DMA1_Stream2_IRQHandler
080124f0 g     O .rodata	0000000c CmdStepE
08002abc  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
080021b4 g     F .text	00000014 USR_LED_Toggle
080049f0 g     F .text	00000010 malloc
00007f90  w      .debug_info	00000000 .hidden syscall.c.e97f87b1
08012490 g       .rodata	00000000 _tasktable_end
08005834 g     F .text	00000050 _raise_r
08003850 g     F .text	0000003c __assert_func
08012390 g     O .rodata	000000c8 __mprec_tens
08002a30 g     F .text	00000002 UsageFault_Handler
08005ab0 g     F .text	0000001c vsnprintf
08002abc  w    F .text	00000006 DMA2_Stream2_IRQHandler
080058b8 g     F .text	00000004 _getpid_r
200001ec g       .bss	00000000 __bss_start__
0800383c g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
08004918 g     F .text	00000008 _localeconv_r
08004c30 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
08002abc  w    F .text	00000006 SPI1_IRQHandler
08000c28 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
080021c8 g     F .text	00000030 _sbrk_r
0800220e g     F .text	0000000a _read_r
08002abc  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
0801255c g       .ARM	00000000 __exidx_start
08000648 g     F .text	00000254 .hidden __aeabi_dmul
08002abc  w    F .text	00000006 DMA2_Stream3_IRQHandler
0000efd1  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.4d779714
08012538 g     O .rodata	0000000c CmdVersionE
20000bae g     O .bss	00000001 __lock___sinit_recursive_mutex
080120e0 g     O .rodata	00000004 _global_impure_ptr
080057e8 g     F .text	0000004c _realloc_r
08002ad0 g     F .text	00000048 __libc_init_array
08012368 g     O .rodata	00000028 __mprec_bigtens
0800578c g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
08004f44 g     F .text	00000038 __mcmp
00004fa7  w      .debug_info	00000000 .hidden mytest.c.e35314ec
200001e8 g     O .data	00000004 TaskInputTaskState
08002abc  w    F .text	00000006 USART6_IRQHandler
08005e14 g     F .text	00000000 _init
08012490 g       .rodata	00000000 _parsetable_start
08003744 g     F .text	00000014 strtol
08012478 g       .rodata	00000000 _tasktable_start
080124cc g     O .rodata	0000000c CmdRE
0000dd31  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.db490788
20000bbc g       .bss	00000000 _ebss
08002a6c  w    F .text	00000038 Reset_Handler
08005ab0 g     F .text	0000001c vsniprintf
08004b90 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
0000c130  w      .debug_info	00000000 .hidden stm32f4xx_it.c.e5c3f700
20000bac g     O .bss	00000001 __lock___malloc_recursive_mutex
08002abc  w    F .text	00000006 DMA2_Stream0_IRQHandler
08005d84 g     F .text	00000090 _putc_r
080048b4 g     F .text	00000024 fprintf
08002abc  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
08004db0 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
0000b02a  w      .debug_info	00000000 .hidden decoder.c.6d65c94f
080001e0 g     F .text	00000014 mytest
08012284 g     O .rodata	00000020 __sf_fake_stderr
20000bc0 g       ._user_heap_stack	00000000 end
08002abc  w    F .text	00000006 I2C1_EV_IRQHandler
08004924 g     F .text	00000002 __retarget_lock_release_recursive
08002abc  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001e8 g       .data	00000000 _taskstate_start
08005acc g     F .text	000000b6 __ssputs_r
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
08002abc  w    F .text	00000006 DMA1_Stream1_IRQHandler
080052e2 g     F .text	00000024 __sfputs_r
08004788 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
08002c68  w    F .text	0000046c _printf_float
20000bbc g       .bss	00000000 __bss_end__
08005168 g     F .text	00000098 _free_r
08002abc  w    F .text	00000006 TIM3_IRQHandler
08002abc  w    F .text	00000006 RCC_IRQHandler
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
08002abc g       .text	00000006 Default_Handler
080005dc g     F .text	0000006a .hidden __floatundidf
08004e64 g     F .text	000000e0 __lshift
08002abc  w    F .text	00000006 EXTI15_10_IRQHandler
00010c97  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.f198c305
08002abc  w    F .text	00000006 ADC_IRQHandler
08012508 g     O .rodata	0000000c CmdStepperInitE
08004c5c g     F .text	00000154 __multiply
08005090 g     F .text	000000b8 __d2b
08005a14 g     F .text	00000034 strcasecmp
08002abc  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
08002abc  w    F .text	00000006 SPI5_IRQHandler
080124d8 g     O .rodata	0000000c CmdReceiveE
080021f8 g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
000105c5  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.767cae1d
08002abc  w    F .text	00000006 TIM5_IRQHandler
08003588 g     F .text	00000068 strtok
08012478 g     O .rodata	00000018 TaskInputTask
08002abc  w    F .text	00000006 DMA2_Stream7_IRQHandler
08002abc  w    F .text	00000006 I2C3_EV_IRQHandler
080056b0 g     F .text	000000dc __swsetup_r
08000ef8  w    F .text	00000002 .hidden __aeabi_ldiv0
08002abc  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08004828 g     F .text	0000008c __sfp
0000ad5e  w      .debug_info	00000000 .hidden default.c.59fb61aa
08002abc  w    F .text	00000006 RTC_WKUP_IRQHandler
080047ac g     F .text	0000000c __sinit_lock_release
08005a58 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
0000a6b4  w      .debug_info	00000000 .hidden wdog.c.82518416
08005568 g     F .text	00000022 __sread
080057d0 g     F .text	0000000c __malloc_lock
08004690 g     F .text	00000078 _fflush_r
08005148 g     F .text	0000001e _calloc_r
08002abc  w    F .text	00000006 SPI2_IRQHandler
080122a4 g     O .rodata	00000020 __sf_fake_stdin
08004922 g     F .text	00000002 __retarget_lock_acquire_recursive
08002b18 g     F .text	00000010 memset
08002a2c g     F .text	00000002 MemManage_Handler
0000d4e6  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.491f3266
080023a4 g     F .text	00000684 main
0000b59e  w      .debug_info	00000000 .hidden main.c.fad53303
08002abc  w    F .text	00000006 DMA1_Stream0_IRQHandler
08004920 g     F .text	00000002 __retarget_lock_init_recursive
08002a32 g     F .text	00000002 SVC_Handler
080055e6 g     F .text	00000008 __sclose
080039a8 g     F .text	00000bdc _dtoa_r
08005200 g     F .text	000000b4 _malloc_r
08005694 g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
08002abc  w    F .text	00000006 EXTI4_IRQHandler
080124fc g     O .rodata	0000000c CmdStepperEnableE
0000cfdf  w      .debug_info	00000000 .hidden system_stm32f4xx.c.1033f2d0
000093a5  w      .debug_info	00000000 .hidden dump.c.5cf62a59
08002a58 g     F .text	00000014 SystemInit
08000a7c g     F .text	0000007a .hidden __nedf2
08005e20 g     F .text	00000000 _fini
080058cc g     F .text	00000030 iprintf
200001ec g       .data	00000000 _taskstate_end
0000aa6d  w      .debug_info	00000000 .hidden tasking.c.011ad733
08002bec g     F .text	0000007c __exponent
08002218 g     F .text	00000040 _write_r
080030d4 g     F .text	000000da _printf_common
20000018 g     O .data	00000004 _impure_ptr
08004584 g     F .text	0000010c __sflush_r
08005b84 g     F .text	00000200 _svfiprintf_r
08002abc  w    F .text	00000006 WWDG_IRQHandler
0800234c g     F .text	00000058 Default_IRQHandler
08004a00 g     F .text	00000024 __ascii_mbtowc
0801252c g     O .rodata	0000000c CmdTransparentE
000130c8  w      .debug_info	00000000 .hidden version.c.1ebd1112
08002abc  w    F .text	00000006 TIM2_IRQHandler
08000208 g     F .text	00000004 my_Loop
080124b4 g     O .rodata	0000000c CmdDecodeE
08005a58 g     F .text	00000056 _vsniprintf_r
20000000 g       .data	00000000 myTickCount
08002abc  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
08002abc  w    F .text	00000006 TIM1_TRG_COM_TIM11_IRQHandler
08004926 g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
08002abc  w    F .text	00000006 EXTI1_IRQHandler
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
00010e46  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.1f165f1c
200001ec g       .data	00000000 _edata
00005126  w      .debug_info	00000000 .hidden pwm_example.c.46fc7826
08002264 g     F .text	000000e8 USART2_IRQHandler
0800558a g     F .text	00000038 __swrite
080048b4 g     F .text	00000024 fiprintf
08005308 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080048d8 g     F .text	0000003e _fwalk_reent
08004f7c g     F .text	00000114 __mdiff
00004d4e  w      .debug_info	00000000 .hidden my_main.c.9aeed373
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002258 g     F .text	00000006 _kill
08002abc  w    F .text	00000006 I2C2_ER_IRQHandler
08004794 g     F .text	0000000c __sfp_lock_release
080122c4 g     O .rodata	00000020 __sf_fake_stdout
080124a8 g     O .rodata	0000000c CmdDumpE
08002abc  w    F .text	00000006 DMA2_Stream1_IRQHandler
08011fdd g     O .rodata	00000101 _ctype_
08000ef8  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
08012520 g     O .rodata	0000000c CmdStatsE
08002abc  w    F .text	00000006 FLASH_IRQHandler
0800225e g     F .text	00000002 _exit
08012514 g     O .rodata	0000000c CmdTasksE
08002abc  w    F .text	00000006 DMA2_Stream4_IRQHandler
08002a2e g     F .text	00000002 BusFault_Handler
08002abc  w    F .text	00000006 USART1_IRQHandler
08004970 g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
08002abc  w    F .text	00000006 OTG_FS_IRQHandler
080031b0 g     F .text	0000024c _printf_i
08002abc  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
08002abc  w    F .text	00000006 DMA1_Stream4_IRQHandler
20000bb4 g     O .bss	00000004 __malloc_sbrk_start
08002abc  w    F .text	00000006 I2C1_ER_IRQHandler
080124e4 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000bb0 g     O .bss	00000004 __malloc_free_list
00008be7  w      .debug_info	00000000 .hidden monitor.c.0a6f2025
080002d8 g     F .text	0000027a .hidden __subdf3
08005308 g     F .text	00000260 _vfprintf_r
08004bd0 g     F .text	0000005e __lo0bits
08002abc  w    F .text	00000006 DMA2_Stream6_IRQHandler
2000007c g     O .data	0000016c __global_locale
08002abc  w    F .text	00000006 DMA1_Stream3_IRQHandler
20000bad g     O .bss	00000001 __lock___sfp_recursive_mutex
08005884 g     F .text	00000010 raise
080047a0 g     F .text	0000000c __sinit_lock_acquire
08004b04 g     F .text	0000008c __multadd
08004ac0 g     F .text	00000044 _Bfree
08012490 g     O .rodata	0000000c CmdAngleE



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e14 	.word	0x08005e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08005e14 	.word	0x08005e14

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f001 ffe5 	bl	80021b4 <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <Stepper>:

void Stepper(int32_t steps, uint32_t delay)
{
	int32_t i;

	if (steps < 0)	// check if going backwards
 8000efc:	2800      	cmp	r0, #0
{
 8000efe:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (steps < 0)	// check if going backwards
 8000f00:	da3b      	bge.n	8000f7a <Stepper+0x7e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <Stepper+0xbc>)
	{
		steps = ~steps;	// change the value to positive number since stepper handles the reverse via GPIOA pin 10
 8000f04:	43c0      	mvns	r0, r0
 8000f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0a:	619a      	str	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <Stepper+0xc0>)
 8000f0e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000f12:	2a01      	cmp	r2, #1
 8000f14:	d126      	bne.n	8000f64 <Stepper+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f16:	2202      	movs	r2, #2
 8000f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f26:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <Stepper+0xc4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d012      	beq.n	8000f52 <Stepper+0x56>
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d00f      	beq.n	8000f52 <Stepper+0x56>
 8000f32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00b      	beq.n	8000f52 <Stepper+0x56>
 8000f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <Stepper+0x56>
 8000f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d003      	beq.n	8000f52 <Stepper+0x56>
 8000f4a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d104      	bne.n	8000f5c <Stepper+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f58:	2a06      	cmp	r2, #6
 8000f5a:	d003      	beq.n	8000f64 <Stepper+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
{
 8000f64:	2400      	movs	r4, #0

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f66:	4d17      	ldr	r5, [pc, #92]	; (8000fc4 <Stepper+0xc8>)
	
	// cause the stepper to move "steps" with a small delay between each step
	for (i = 0; i < steps; i++)
	{
	 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);        //STEP is toggled
	 TIM11->CNT = 0;      				// To Reset the counter
 8000f68:	4e17      	ldr	r6, [pc, #92]	; (8000fc8 <Stepper+0xcc>)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f6a:	f8df c064 	ldr.w	ip, [pc, #100]	; 8000fd0 <Stepper+0xd4>
 8000f6e:	4627      	mov	r7, r4
 8000f70:	f64a 2eaa 	movw	lr, #43690	; 0xaaaa
	for (i = 0; i < steps; i++)
 8000f74:	42a0      	cmp	r0, r4
 8000f76:	d109      	bne.n	8000f8c <Stepper+0x90>
		asm  volatile  ("nop\n");
	 }
	  WDTFeed();

	}
}
 8000f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(steps > 0)
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <Stepper+0xd0>)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7c:	bf05      	ittet	eq
 8000f7e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8000f82:	619a      	streq	r2, [r3, #24]
 8000f84:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
    GPIOx->BSRR = GPIO_Pin;
 8000f88:	2210      	moveq	r2, #16
 8000f8a:	e7be      	b.n	8000f0a <Stepper+0xe>
  odr = GPIOx->ODR;
 8000f8c:	696b      	ldr	r3, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f8e:	041a      	lsls	r2, r3, #16
 8000f90:	43db      	mvns	r3, r3
 8000f92:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61ab      	str	r3, [r5, #24]
	 TIM11->CNT = 0;      				// To Reset the counter
 8000f9e:	6277      	str	r7, [r6, #36]	; 0x24
	 while (TIM11->CNT < delay) 
 8000fa0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d305      	bcc.n	8000fb2 <Stepper+0xb6>
 8000fa6:	f8dc 3000 	ldr.w	r3, [ip]
	for (i = 0; i < steps; i++)
 8000faa:	3401      	adds	r4, #1
 8000fac:	f8c3 e000 	str.w	lr, [r3]
 8000fb0:	e7e0      	b.n	8000f74 <Stepper+0x78>
		asm  volatile  ("nop\n");
 8000fb2:	bf00      	nop
 8000fb4:	e7f4      	b.n	8000fa0 <Stepper+0xa4>
 8000fb6:	bf00      	nop
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	20000b60 	.word	0x20000b60
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40014800 	.word	0x40014800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	20000a6c 	.word	0x20000a6c

08000fd4 <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 8000fd4:	b530      	push	{r4, r5, lr}
 8000fd6:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000fda:	4c10      	ldr	r4, [pc, #64]	; (800101c <TerminalRead+0x48>)
 8000fdc:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8000fe0:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 8000fe2:	fb05 4303 	mla	r3, r5, r3, r4
 8000fe6:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000fea:	b2a4      	uxth	r4, r4
 8000fec:	b10c      	cbz	r4, 8000ff2 <TerminalRead+0x1e>
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d101      	bne.n	8000ff6 <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ff2:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 8000ff4:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8000ff6:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8000ffa:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000ffc:	5d1d      	ldrb	r5, [r3, r4]
 8000ffe:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001000:	3401      	adds	r4, #1
 8001002:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8001006:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 800100a:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 800100e:	3c01      	subs	r4, #1
 8001010:	b2a4      	uxth	r4, r4
 8001012:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 8001016:	3001      	adds	r0, #1
 8001018:	e7e5      	b.n	8000fe6 <TerminalRead+0x12>
 800101a:	bf00      	nop
 800101c:	20000210 	.word	0x20000210

08001020 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001020:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <Uncompress+0x74>)
{
 8001024:	b08a      	sub	sp, #40	; 0x28
 8001026:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001028:	466c      	mov	r4, sp
 800102a:	f102 0620 	add.w	r6, r2, #32
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6851      	ldr	r1, [r2, #4]
 8001032:	4625      	mov	r5, r4
 8001034:	c503      	stmia	r5!, {r0, r1}
 8001036:	3208      	adds	r2, #8
 8001038:	42b2      	cmp	r2, r6
 800103a:	462c      	mov	r4, r5
 800103c:	d1f7      	bne.n	800102e <Uncompress+0xe>
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	6028      	str	r0, [r5, #0]
 8001042:	8892      	ldrh	r2, [r2, #4]
 8001044:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001046:	4618      	mov	r0, r3
 8001048:	4d13      	ldr	r5, [pc, #76]	; (8001098 <Uncompress+0x78>)
 800104a:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 800104e:	2100      	movs	r1, #0
 8001050:	ba5b      	rev16	r3, r3
 8001052:	b29b      	uxth	r3, r3
  i = 0;
 8001054:	460c      	mov	r4, r1
 8001056:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001058:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 800105c:	d103      	bne.n	8001066 <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <Uncompress+0x78>)
  buf[i]='\0';
 8001060:	5532      	strb	r2, [r6, r4]
}
 8001062:	b00a      	add	sp, #40	; 0x28
 8001064:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8001066:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8001068:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 800106c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001070:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8001074:	4462      	add	r2, ip
    buf[i++] = c;
 8001076:	3401      	adds	r4, #1
 8001078:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 800107c:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001080:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8001082:	2a07      	cmp	r2, #7
      bits -= 8;
 8001084:	bf81      	itttt	hi
 8001086:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001088:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 800108c:	4091      	lslhi	r1, r2
 800108e:	430b      	orrhi	r3, r1
 8001090:	4611      	mov	r1, r2
 8001092:	e7e1      	b.n	8001058 <Uncompress+0x38>
 8001094:	08006270 	.word	0x08006270
 8001098:	20000a48 	.word	0x20000a48

0800109c <HAL_GPIO_Init>:
{
 800109c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001228 <HAL_GPIO_Init+0x18c>
        temp = EXTI->IMR;
 80010a4:	4a5e      	ldr	r2, [pc, #376]	; (8001220 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80010aa:	2401      	movs	r4, #1
 80010ac:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80010b2:	43ac      	bics	r4, r5
 80010b4:	f040 80a5 	bne.w	8001202 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b8:	684d      	ldr	r5, [r1, #4]
 80010ba:	f005 0403 	and.w	r4, r5, #3
 80010be:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d0:	d834      	bhi.n	800113c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80010d2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d8:	68cf      	ldr	r7, [r1, #12]
 80010da:	fa07 f708 	lsl.w	r7, r7, r8
 80010de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80010e2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010e4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ea:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80010ee:	409f      	lsls	r7, r3
 80010f0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010f4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80010f6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	688f      	ldr	r7, [r1, #8]
 80010fe:	fa07 f708 	lsl.w	r7, r7, r8
 8001102:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001108:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	d119      	bne.n	8001140 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800110c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001110:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001114:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001118:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001120:	f04f 0e0f 	mov.w	lr, #15
 8001124:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001128:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	690f      	ldr	r7, [r1, #16]
 800112e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001132:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001136:	f8ca 7020 	str.w	r7, [sl, #32]
 800113a:	e001      	b.n	8001140 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	2c03      	cmp	r4, #3
 800113e:	d1da      	bne.n	80010f6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001140:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001142:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800114e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001150:	d057      	beq.n	8001202 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	f04f 0a00 	mov.w	sl, #0
 8001156:	f8cd a004 	str.w	sl, [sp, #4]
 800115a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	4c31      	ldr	r4, [pc, #196]	; (8001224 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001164:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001168:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800116c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001170:	9601      	str	r6, [sp, #4]
 8001172:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001174:	f023 0603 	bic.w	r6, r3, #3
 8001178:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800117c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001184:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800118c:	270f      	movs	r7, #15
 800118e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001198:	d03a      	beq.n	8001210 <HAL_GPIO_Init+0x174>
 800119a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800119e:	42a0      	cmp	r0, r4
 80011a0:	d038      	beq.n	8001214 <HAL_GPIO_Init+0x178>
 80011a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011a6:	42a0      	cmp	r0, r4
 80011a8:	d036      	beq.n	8001218 <HAL_GPIO_Init+0x17c>
 80011aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011ae:	42a0      	cmp	r0, r4
 80011b0:	d034      	beq.n	800121c <HAL_GPIO_Init+0x180>
 80011b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011b6:	42a0      	cmp	r0, r4
 80011b8:	bf0c      	ite	eq
 80011ba:	2404      	moveq	r4, #4
 80011bc:	2407      	movne	r4, #7
 80011be:	fa04 f40e 	lsl.w	r4, r4, lr
 80011c2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80011c6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80011ce:	bf54      	ite	pl
 80011d0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80011d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->IMR = temp;
 80011d6:	6014      	str	r4, [r2, #0]
        temp = EXTI->EMR;
 80011d8:	6854      	ldr	r4, [r2, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80011dc:	bf54      	ite	pl
 80011de:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80011e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;
 80011e4:	6054      	str	r4, [r2, #4]
        temp = EXTI->RTSR;
 80011e6:	6894      	ldr	r4, [r2, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80011ea:	bf54      	ite	pl
 80011ec:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80011ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->RTSR = temp;
 80011f2:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80011f4:	68d4      	ldr	r4, [r2, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f6:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80011f8:	bf54      	ite	pl
 80011fa:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80011fc:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->FTSR = temp;
 8001200:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	3301      	adds	r3, #1
 8001204:	2b10      	cmp	r3, #16
 8001206:	f47f af4f 	bne.w	80010a8 <HAL_GPIO_Init+0xc>
}
 800120a:	b003      	add	sp, #12
 800120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001210:	4654      	mov	r4, sl
 8001212:	e7d4      	b.n	80011be <HAL_GPIO_Init+0x122>
 8001214:	2401      	movs	r4, #1
 8001216:	e7d2      	b.n	80011be <HAL_GPIO_Init+0x122>
 8001218:	2402      	movs	r4, #2
 800121a:	e7d0      	b.n	80011be <HAL_GPIO_Init+0x122>
 800121c:	2403      	movs	r4, #3
 800121e:	e7ce      	b.n	80011be <HAL_GPIO_Init+0x122>
 8001220:	40013c00 	.word	0x40013c00
 8001224:	40020000 	.word	0x40020000
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f3c3 2302 	ubfx	r3, r3, #8, #3
  * @param  SubPriority the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 8001234:	b510      	push	{r4, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001236:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	2c04      	cmp	r4, #4
 800123e:	bf28      	it	cs
 8001240:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001248:	fa02 f204 	lsl.w	r2, r2, r4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124c:	bf8c      	ite	hi
 800124e:	3b03      	subhi	r3, #3
 8001250:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001252:	ea21 0102 	bic.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001256:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	bf18      	it	ne
 800125a:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	bf08      	it	eq
 8001264:	4a06      	ldreq	r2, [pc, #24]	; (8001280 <HAL_NVIC_SetPriority.constprop.0+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800126a:	bf18      	it	ne
 800126c:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 8001270:	b2db      	uxtb	r3, r3
 8001272:	bf14      	ite	ne
 8001274:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800127c:	bd10      	pop	{r4, pc}
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <HAL_InitTick.isra.0>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_InitTick.isra.0+0x44>)
 8001286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	3b01      	subs	r3, #1
 8001292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001296:	b510      	push	{r4, lr}
 8001298:	4604      	mov	r4, r0
 800129a:	d214      	bcs.n	80012c6 <HAL_InitTick.isra.0+0x42>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_InitTick.isra.0+0x48>)
 80012a6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012aa:	2300      	movs	r3, #0
 80012ac:	6193      	str	r3, [r2, #24]
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	280f      	cmp	r0, #15
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b0:	f04f 0307 	mov.w	r3, #7
 80012b4:	6113      	str	r3, [r2, #16]
 80012b6:	d806      	bhi.n	80012c6 <HAL_InitTick.isra.0+0x42>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	4601      	mov	r1, r0
 80012ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012be:	f7ff ffb5 	bl	800122c <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_InitTick.isra.0+0x4c>)
 80012c4:	601c      	str	r4, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	20000004 	.word	0x20000004
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	20000014 	.word	0x20000014

080012d4 <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 80012d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	4c2e      	ldr	r4, [pc, #184]	; (8001394 <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 80012dc:	d30a      	bcc.n	80012f4 <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 80012de:	f640 0334 	movw	r3, #2100	; 0x834
 80012e2:	fb03 4300 	mla	r3, r3, r0, r4
 80012e6:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80012ea:	3201      	adds	r2, #1
 80012ec:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80012f4:	f640 0334 	movw	r3, #2100	; 0x834
 80012f8:	fb03 4300 	mla	r3, r3, r0, r4
 80012fc:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001300:	fa12 f585 	uxtah	r5, r2, r5
 8001304:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001308:	d220      	bcs.n	800134c <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 800130a:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800130c:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001310:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001312:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 8001316:	42b2      	cmp	r2, r6
 8001318:	d005      	beq.n	8001326 <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 800131a:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 800131e:	b2ad      	uxth	r5, r5
 8001320:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001324:	d320      	bcc.n	8001368 <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 8001326:	f640 0334 	movw	r3, #2100	; 0x834
 800132a:	fb03 4400 	mla	r4, r3, r0, r4
 800132e:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001332:	4433      	add	r3, r6
 8001334:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <TerminalOutputBufferWrite.isra.0+0xc4>)
 800133a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800133e:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001340:	68d3      	ldr	r3, [r2, #12]
 8001342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001346:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001348:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 800134c:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001350:	3501      	adds	r5, #1
 8001352:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001356:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 800135a:	fa12 f585 	uxtah	r5, r2, r5
 800135e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001362:	d3d2      	bcc.n	800130a <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 8001364:	bf00      	nop
 8001366:	e7f6      	b.n	8001356 <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 8001368:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 800136c:	f811 c006 	ldrb.w	ip, [r1, r6]
 8001370:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8001374:	3501      	adds	r5, #1
 8001376:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800137a:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 800137e:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001382:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 8001386:	3501      	adds	r5, #1
 8001388:	b2ad      	uxth	r5, r5
 800138a:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 800138e:	3601      	adds	r6, #1
 8001390:	e7c1      	b.n	8001316 <TerminalOutputBufferWrite.isra.0+0x42>
 8001392:	bf00      	nop
 8001394:	20000210 	.word	0x20000210
 8001398:	08011d24 	.word	0x08011d24

0800139c <CmdStepperInit>:


ParserReturnVal_t CmdStepperInit(int action)
{
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}

    if (action == CMD_SHORT_HELP)
 800139e:	2801      	cmp	r0, #1
{
 80013a0:	b08b      	sub	sp, #44	; 0x2c
    if (action == CMD_SHORT_HELP)
 80013a2:	d004      	beq.n	80013ae <CmdStepperInit+0x12>
        return CmdReturnOk;
    if (action == CMD_LONG_HELP)
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d105      	bne.n	80013b4 <CmdStepperInit+0x18>
    {
        printf("timinit\n\n"
 80013a8:	4850      	ldr	r0, [pc, #320]	; (80014ec <CmdStepperInit+0x150>)
 80013aa:	f004 fb2b 	bl	8005a04 <puts>

        return CmdReturnOk;
    }
    init(); 
    return CmdReturnOk;
}
 80013ae:	2000      	movs	r0, #0
 80013b0:	b00b      	add	sp, #44	; 0x2c
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013b4:	2000      	movs	r0, #0
 80013b6:	494e      	ldr	r1, [pc, #312]	; (80014f0 <CmdStepperInit+0x154>)
 80013b8:	9003      	str	r0, [sp, #12]
 80013ba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    tim11.Instance = TIM11;
 80013bc:	4a4d      	ldr	r2, [pc, #308]	; (80014f4 <CmdStepperInit+0x158>)
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013be:	4c4e      	ldr	r4, [pc, #312]	; (80014f8 <CmdStepperInit+0x15c>)
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	644b      	str	r3, [r1, #68]	; 0x44
 80013c6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	9303      	str	r3, [sp, #12]
 80013ce:	9b03      	ldr	r3, [sp, #12]
    tim11.Instance = TIM11;
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <CmdStepperInit+0x160>)
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	688a      	ldr	r2, [r1, #8]
    tim11.Init.RepetitionCounter = 0;
 80013d6:	6158      	str	r0, [r3, #20]
 80013d8:	f3c2 3242 	ubfx	r2, r2, #13, #3
 80013dc:	5ca4      	ldrb	r4, [r4, r2]
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <CmdStepperInit+0x164>)
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	40e2      	lsrs	r2, r4
    tim11.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 10000 - 1;  
 80013e4:	f242 7410 	movw	r4, #10000	; 0x2710
 80013e8:	fbb2 f2f4 	udiv	r2, r2, r4
    tim11.Init.Period = 0xffff;  //10000;
 80013ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
    tim11.Init.ClockDivision =
 80013f0:	e9c3 4003 	strd	r4, r0, [r3, #12]
  if (htim->State == HAL_TIM_STATE_RESET)
 80013f4:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
    tim11.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 10000 - 1;  
 80013f8:	3a01      	subs	r2, #1
    tim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	e9c3 2001 	strd	r2, r0, [r3, #4]
 80013fe:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8001402:	b95c      	cbnz	r4, 800141c <CmdStepperInit+0x80>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001404:	9004      	str	r0, [sp, #16]
    htim->Lock = HAL_UNLOCKED;
 8001406:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
 800140a:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800140c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8001410:	6448      	str	r0, [r1, #68]	; 0x44
 8001412:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001414:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 8001418:	9104      	str	r1, [sp, #16]
 800141a:	9904      	ldr	r1, [sp, #16]
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800141c:	4935      	ldr	r1, [pc, #212]	; (80014f4 <CmdStepperInit+0x158>)
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800141e:	699c      	ldr	r4, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	4f38      	ldr	r7, [pc, #224]	; (8001504 <CmdStepperInit+0x168>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001422:	2602      	movs	r6, #2
 8001424:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  tmpcr1 = TIMx->CR1;
 8001428:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800142a:	f420 7060 	bic.w	r0, r0, #896	; 0x380
 800142e:	4320      	orrs	r0, r4

  TIMx->CR1 = tmpcr1;
 8001430:	6008      	str	r0, [r1, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001432:	2401      	movs	r4, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001434:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001438:	62c8      	str	r0, [r1, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2500      	movs	r5, #0
  TIMx->PSC = Structure->Prescaler;
 800143c:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800143e:	614c      	str	r4, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001440:	f883 4046 	strb.w	r4, [r3, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001444:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
 8001448:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 800144c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
 8001450:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001454:	f883 4042 	strb.w	r4, [r3, #66]	; 0x42
 8001458:	f883 4043 	strb.w	r4, [r3, #67]	; 0x43
 800145c:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
 8001460:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001464:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <CmdStepperInit+0x154>)
 800146a:	9502      	str	r5, [sp, #8]
 800146c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146e:	4322      	orrs	r2, r4
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
 8001472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001474:	4022      	ands	r2, r4
 8001476:	9202      	str	r2, [sp, #8]
 8001478:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	9501      	str	r5, [sp, #4]
 800147c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147e:	4332      	orrs	r2, r6
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
 8001482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001484:	4032      	ands	r2, r6
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	9500      	str	r5, [sp, #0]
 800148c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148e:	f042 0204 	orr.w	r2, r2, #4
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = 0;
 8001496:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	4638      	mov	r0, r7
    GPIO_InitStruct.Pin = GPIO_PIN_4  |
 80014a4:	f641 3310 	movw	r3, #6928	; 0x1b10
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	e9cd 5607 	strd	r5, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f7ff fdf4 	bl	800109c <HAL_GPIO_Init>
       GPIO_InitStruct.Pin = (GPIO_PIN_14);
 80014b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);  
 80014b8:	f507 6080 	add.w	r0, r7, #1024	; 0x400
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	e9cd 3405 	strd	r3, r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c0:	e9cd 5607 	strd	r5, r6, [sp, #28]
	GPIO_InitStruct.Alternate = 0;
 80014c4:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);  
 80014c6:	f7ff fde9 	bl	800109c <HAL_GPIO_Init>
	    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_5 | GPIO_PIN_3 | GPIO_PIN_4;
 80014ca:	f44f 739c 	mov.w	r3, #312	; 0x138
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);  
 80014ce:	f500 6080 	add.w	r0, r0, #1024	; 0x400
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	e9cd 3405 	strd	r3, r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	e9cd 5607 	strd	r5, r6, [sp, #28]
	GPIO_InitStruct.Alternate = 0;
 80014da:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);  
 80014dc:	f7ff fdde 	bl	800109c <HAL_GPIO_Init>
    GPIOx->BSRR = GPIO_Pin;
 80014e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e4:	6183      	str	r3, [r0, #24]
 80014e6:	2310      	movs	r3, #16
 80014e8:	61bb      	str	r3, [r7, #24]
}
 80014ea:	e760      	b.n	80013ae <CmdStepperInit+0x12>
 80014ec:	08006296 	.word	0x08006296
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40014800 	.word	0x40014800
 80014f8:	08009dc8 	.word	0x08009dc8
 80014fc:	20000b60 	.word	0x20000b60
 8001500:	20000004 	.word	0x20000004
 8001504:	40020000 	.word	0x40020000

08001508 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800150a:	4604      	mov	r4, r0
 800150c:	b938      	cbnz	r0, 800151e <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <CmdTasks+0x34>)
  p = _tasktable_start;
 8001510:	4d0b      	ldr	r5, [pc, #44]	; (8001540 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001512:	4e0c      	ldr	r6, [pc, #48]	; (8001544 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001514:	4f0c      	ldr	r7, [pc, #48]	; (8001548 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001516:	f004 fa75 	bl	8005a04 <puts>
  while(p != _tasktable_end) {
 800151a:	42b5      	cmp	r5, r6
 800151c:	d102      	bne.n	8001524 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 800151e:	2000      	movs	r0, #0
 8001520:	b003      	add	sp, #12
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001524:	696b      	ldr	r3, [r5, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4621      	mov	r1, r4
 800152a:	692b      	ldr	r3, [r5, #16]
 800152c:	f855 2b18 	ldr.w	r2, [r5], #24
 8001530:	4638      	mov	r0, r7
 8001532:	f004 f9cb 	bl	80058cc <iprintf>
    i++;
 8001536:	3401      	adds	r4, #1
 8001538:	e7ef      	b.n	800151a <CmdTasks+0x12>
 800153a:	bf00      	nop
 800153c:	080062c0 	.word	0x080062c0
 8001540:	08012478 	.word	0x08012478
 8001544:	08012490 	.word	0x08012490
 8001548:	080062d9 	.word	0x080062d9

0800154c <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 800154c:	b538      	push	{r3, r4, r5, lr}
 800154e:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 8001550:	b1f9      	cbz	r1, 8001592 <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001552:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001554:	888a      	ldrh	r2, [r1, #4]
 8001556:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001558:	2d10      	cmp	r5, #16
 800155a:	d005      	beq.n	8001568 <DecodeReadRegister+0x1c>
 800155c:	2d20      	cmp	r5, #32
 800155e:	d005      	beq.n	800156c <DecodeReadRegister+0x20>
 8001560:	2d08      	cmp	r5, #8
 8001562:	d105      	bne.n	8001570 <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 8001564:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001566:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001568:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 800156a:	e7fc      	b.n	8001566 <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 800156c:	58d0      	ldr	r0, [r2, r3]
    break;
 800156e:	e7fa      	b.n	8001566 <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001570:	6808      	ldr	r0, [r1, #0]
 8001572:	f7ff fd55 	bl	8001020 <Uncompress>
 8001576:	4629      	mov	r1, r5
 8001578:	4602      	mov	r2, r0
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <DecodeReadRegister+0x4c>)
 800157c:	f004 f9a6 	bl	80058cc <iprintf>
    printf(" in periphral %s!\n",
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	f7ff fd4d 	bl	8001020 <Uncompress>
 8001586:	4601      	mov	r1, r0
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <DecodeReadRegister+0x50>)
 800158a:	f004 f99f 	bl	80058cc <iprintf>
    return 0;
 800158e:	2000      	movs	r0, #0
 8001590:	e7e9      	b.n	8001566 <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 8001592:	4608      	mov	r0, r1
 8001594:	e7e7      	b.n	8001566 <DecodeReadRegister+0x1a>
 8001596:	bf00      	nop
 8001598:	080062f1 	.word	0x080062f1
 800159c:	08006313 	.word	0x08006313

080015a0 <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 80015a0:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80015a2:	b920      	cbnz	r0, 80015ae <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <CmdVersion+0x14>)
 80015a6:	4904      	ldr	r1, [pc, #16]	; (80015b8 <CmdVersion+0x18>)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <CmdVersion+0x1c>)
 80015aa:	f004 f98f 	bl	80058cc <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 80015ae:	2000      	movs	r0, #0
 80015b0:	bd08      	pop	{r3, pc}
 80015b2:	bf00      	nop
 80015b4:	08011f55 	.word	0x08011f55
 80015b8:	08011f3c 	.word	0x08011f3c
 80015bc:	08006326 	.word	0x08006326

080015c0 <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 80015c4:	b149      	cbz	r1, 80015da <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80015c6:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80015c8:	8888      	ldrh	r0, [r1, #4]
 80015ca:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 80015cc:	2d10      	cmp	r5, #16
 80015ce:	d005      	beq.n	80015dc <DecodeWriteRegister.isra.0+0x1c>
 80015d0:	2d20      	cmp	r5, #32
 80015d2:	d005      	beq.n	80015e0 <DecodeWriteRegister.isra.0+0x20>
 80015d4:	2d08      	cmp	r5, #8
 80015d6:	d105      	bne.n	80015e4 <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 80015d8:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 80015da:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 80015dc:	52c2      	strh	r2, [r0, r3]
    break;  
 80015de:	e7fc      	b.n	80015da <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 80015e0:	50c2      	str	r2, [r0, r3]
    break;
 80015e2:	e7fa      	b.n	80015da <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 80015e4:	6808      	ldr	r0, [r1, #0]
 80015e6:	f7ff fd1b 	bl	8001020 <Uncompress>
 80015ea:	4629      	mov	r1, r5
 80015ec:	4602      	mov	r2, r0
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <DecodeWriteRegister.isra.0+0x48>)
 80015f0:	f004 f96c 	bl	80058cc <iprintf>
    printf(" in periphral %s!\n",
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	f7ff fd13 	bl	8001020 <Uncompress>
}
 80015fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 80015fe:	4601      	mov	r1, r0
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DecodeWriteRegister.isra.0+0x4c>)
 8001602:	f004 b963 	b.w	80058cc <iprintf>
 8001606:	bf00      	nop
 8001608:	080062f1 	.word	0x080062f1
 800160c:	08006313 	.word	0x08006313

08001610 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001610:	2801      	cmp	r0, #1
{
 8001612:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001614:	d004      	beq.n	8001620 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8001616:	2802      	cmp	r0, #2
 8001618:	d104      	bne.n	8001624 <CmdTest+0x14>
    printf("testasm\n\n"
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <CmdTest+0x24>)
 800161c:	f004 f9f2 	bl	8005a04 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8001620:	2000      	movs	r0, #0
 8001622:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8001624:	204d      	movs	r0, #77	; 0x4d
 8001626:	f7fe fddb 	bl	80001e0 <mytest>
 800162a:	4601      	mov	r1, r0
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <CmdTest+0x28>)
 800162e:	f004 f94d 	bl	80058cc <iprintf>
  return CmdReturnOk;
 8001632:	e7f5      	b.n	8001620 <CmdTest+0x10>
 8001634:	08006336 	.word	0x08006336
 8001638:	0800636f 	.word	0x0800636f

0800163c <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 800163c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001640:	460c      	mov	r4, r1
 8001642:	b086      	sub	sp, #24
 8001644:	4616      	mov	r6, r2
 8001646:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001648:	4605      	mov	r5, r0
 800164a:	2800      	cmp	r0, #0
 800164c:	d046      	beq.n	80016dc <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800164e:	6800      	ldr	r0, [r0, #0]
 8001650:	f7ff fce6 	bl	8001020 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001654:	88aa      	ldrh	r2, [r5, #4]
 8001656:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	79ab      	ldrb	r3, [r5, #6]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	4601      	mov	r1, r0
 8001660:	4633      	mov	r3, r6
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <DecodeRegister+0xa8>)
 8001664:	4632      	mov	r2, r6
 8001666:	f004 f931 	bl	80058cc <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 800166a:	68ac      	ldr	r4, [r5, #8]
 800166c:	b3a4      	cbz	r4, 80016d8 <DecodeRegister+0x9c>
 800166e:	b3af      	cbz	r7, 80016dc <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001670:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80016e8 <DecodeRegister+0xac>
 8001674:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80016ec <DecodeRegister+0xb0>
 8001678:	f8df a074 	ldr.w	sl, [pc, #116]	; 80016f0 <DecodeRegister+0xb4>
 800167c:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 800167e:	2700      	movs	r7, #0
 8001680:	89ab      	ldrh	r3, [r5, #12]
 8001682:	429f      	cmp	r7, r3
 8001684:	d305      	bcc.n	8001692 <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001686:	200a      	movs	r0, #10
  }

}
 8001688:	b006      	add	sp, #24
 800168a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 800168e:	f004 b935 	b.w	80058fc <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001692:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001696:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800169a:	2301      	movs	r3, #1
 800169c:	4093      	lsls	r3, r2
 800169e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	fa26 f202 	lsr.w	r2, r6, r2
 80016a8:	4013      	ands	r3, r2
 80016aa:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80016ac:	f7ff fcb8 	bl	8001020 <Uncompress>
	 (unsigned int)(f->width),
 80016b0:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80016b4:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 80016b8:	9b05      	ldr	r3, [sp, #20]
 80016ba:	9200      	str	r2, [sp, #0]
 80016bc:	4601      	mov	r1, r0
 80016be:	2a01      	cmp	r2, #1
 80016c0:	bf8c      	ite	hi
 80016c2:	4640      	movhi	r0, r8
 80016c4:	4648      	movls	r0, r9
 80016c6:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4650      	mov	r0, sl
 80016ce:	f004 f8fd 	bl	80058cc <iprintf>
    for(i=0; i<r->numFields; i++) {
 80016d2:	3701      	adds	r7, #1
 80016d4:	3408      	adds	r4, #8
 80016d6:	e7d3      	b.n	8001680 <DecodeRegister+0x44>
  if(decodeFields) {
 80016d8:	2f00      	cmp	r7, #0
 80016da:	d1d4      	bne.n	8001686 <DecodeRegister+0x4a>
}
 80016dc:	b006      	add	sp, #24
 80016de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016e2:	bf00      	nop
 80016e4:	08006389 	.word	0x08006389
 80016e8:	0800637d 	.word	0x0800637d
 80016ec:	08006383 	.word	0x08006383
 80016f0:	080063c4 	.word	0x080063c4

080016f4 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80016f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016f8:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80016fa:	6800      	ldr	r0, [r0, #0]
{
 80016fc:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80016fe:	f7ff fc8f 	bl	8001020 <Uncompress>
 8001702:	6862      	ldr	r2, [r4, #4]
 8001704:	4601      	mov	r1, r0
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <DecodePeripheral+0x4c>)
 8001708:	f004 f8e0 	bl	80058cc <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 800170c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001710:	f1b8 0f00 	cmp.w	r8, #0
 8001714:	d112      	bne.n	800173c <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 800171a:	4639      	mov	r1, r7
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff ff15 	bl	800154c <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001722:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001724:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001726:	4633      	mov	r3, r6
 8001728:	4638      	mov	r0, r7
 800172a:	f7ff ff87 	bl	800163c <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 800172e:	3501      	adds	r5, #1
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	429d      	cmp	r5, r3
 8001734:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001738:	d3ef      	bcc.n	800171a <DecodePeripheral+0x26>
 800173a:	e7ec      	b.n	8001716 <DecodePeripheral+0x22>
 800173c:	2500      	movs	r5, #0
 800173e:	e7f7      	b.n	8001730 <DecodePeripheral+0x3c>
 8001740:	080063ed 	.word	0x080063ed

08001744 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001748:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 800174a:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 800174c:	460e      	mov	r6, r1
  printf("\t");
 800174e:	f004 f8d5 	bl	80058fc <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001752:	4f11      	ldr	r7, [pc, #68]	; (8001798 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8001754:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800179c <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001758:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80017a0 <DecodePrintRegisters+0x5c>
 800175c:	3510      	adds	r5, #16
  col = 8;
 800175e:	2408      	movs	r4, #8
  while(count--) {
 8001760:	3e01      	subs	r6, #1
 8001762:	d201      	bcs.n	8001768 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8001764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001768:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800176c:	f7ff fc58 	bl	8001020 <Uncompress>
 8001770:	4601      	mov	r1, r0
 8001772:	4638      	mov	r0, r7
 8001774:	f004 f8aa 	bl	80058cc <iprintf>
 8001778:	4420      	add	r0, r4
 800177a:	b2c4      	uxtb	r4, r0
    if(count) {
 800177c:	b156      	cbz	r6, 8001794 <DecodePrintRegisters+0x50>
      col += printf(", ");
 800177e:	4640      	mov	r0, r8
 8001780:	f004 f8a4 	bl	80058cc <iprintf>
 8001784:	4420      	add	r0, r4
 8001786:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001788:	2c46      	cmp	r4, #70	; 0x46
 800178a:	d903      	bls.n	8001794 <DecodePrintRegisters+0x50>
	printf("\n\t");
 800178c:	4648      	mov	r0, r9
 800178e:	f004 f89d 	bl	80058cc <iprintf>
	col = 8;
 8001792:	2408      	movs	r4, #8
    r++;
 8001794:	3510      	adds	r5, #16
 8001796:	e7e3      	b.n	8001760 <DecodePrintRegisters+0x1c>
 8001798:	08006310 	.word	0x08006310
 800179c:	08006386 	.word	0x08006386
 80017a0:	08006415 	.word	0x08006415

080017a4 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 80017a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 80017a8:	2009      	movs	r0, #9
 80017aa:	f004 f8a7 	bl	80058fc <putchar>
  for(; p->name != NULL; p++) {
 80017ae:	4d0f      	ldr	r5, [pc, #60]	; (80017ec <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 80017b0:	4e0f      	ldr	r6, [pc, #60]	; (80017f0 <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 80017b2:	4f10      	ldr	r7, [pc, #64]	; (80017f4 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 80017b4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80017f8 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 80017b8:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 80017ba:	6828      	ldr	r0, [r5, #0]
 80017bc:	b908      	cbnz	r0, 80017c2 <DecodePrintPeripherals.constprop.0+0x1e>
}
 80017be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 80017c2:	f7ff fc2d 	bl	8001020 <Uncompress>
 80017c6:	4601      	mov	r1, r0
 80017c8:	4630      	mov	r0, r6
 80017ca:	f004 f87f 	bl	80058cc <iprintf>
    if((p+1)->name != NULL) {
 80017ce:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 80017d0:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 80017d2:	b14b      	cbz	r3, 80017e8 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 80017d4:	4638      	mov	r0, r7
 80017d6:	f004 f879 	bl	80058cc <iprintf>
 80017da:	4404      	add	r4, r0
      if(col > 70) {
 80017dc:	2c46      	cmp	r4, #70	; 0x46
 80017de:	d903      	bls.n	80017e8 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 80017e0:	4640      	mov	r0, r8
 80017e2:	f004 f873 	bl	80058cc <iprintf>
	col = 8;
 80017e6:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 80017e8:	3510      	adds	r5, #16
 80017ea:	e7e6      	b.n	80017ba <DecodePrintPeripherals.constprop.0+0x16>
 80017ec:	0800e99c 	.word	0x0800e99c
 80017f0:	08006310 	.word	0x08006310
 80017f4:	08006386 	.word	0x08006386
 80017f8:	08006415 	.word	0x08006415

080017fc <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80017fc:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80017fe:	4909      	ldr	r1, [pc, #36]	; (8001824 <fetch_string_arg+0x28>)
{
 8001800:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001802:	2000      	movs	r0, #0
 8001804:	f001 fec0 	bl	8003588 <strtok>
  if(p == NULL) {
 8001808:	4604      	mov	r4, r0
 800180a:	b140      	cbz	r0, 800181e <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800180c:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800180e:	f7fe fd01 	bl	8000214 <strlen>
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <fetch_string_arg+0x2c>)
 8001814:	3001      	adds	r0, #1
 8001816:	4404      	add	r4, r0
 8001818:	601c      	str	r4, [r3, #0]
  return 0;
 800181a:	2000      	movs	r0, #0
}
 800181c:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 800181e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001822:	e7fb      	b.n	800181c <fetch_string_arg+0x20>
 8001824:	08006418 	.word	0x08006418
 8001828:	20000a5c 	.word	0x20000a5c

0800182c <TaskInput>:
{
 800182c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 8001830:	4d6b      	ldr	r5, [pc, #428]	; (80019e0 <TaskInput+0x1b4>)
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	b123      	cbz	r3, 8001840 <TaskInput+0x14>
    printf("ARMON>");
 8001836:	486b      	ldr	r0, [pc, #428]	; (80019e4 <TaskInput+0x1b8>)
 8001838:	f004 f848 	bl	80058cc <iprintf>
    printPrompt = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 8001840:	2201      	movs	r2, #1
 8001842:	f10d 010f 	add.w	r1, sp, #15
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff fbc4 	bl	8000fd4 <TerminalRead>
  if(rc) goto ProcessCharacter;
 800184c:	2800      	cmp	r0, #0
 800184e:	d054      	beq.n	80018fa <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 8001850:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001854:	2b08      	cmp	r3, #8
 8001856:	d001      	beq.n	800185c <TaskInput+0x30>
 8001858:	2b7f      	cmp	r3, #127	; 0x7f
 800185a:	d115      	bne.n	8001888 <TaskInput+0x5c>
 800185c:	4c62      	ldr	r4, [pc, #392]	; (80019e8 <TaskInput+0x1bc>)
 800185e:	6822      	ldr	r2, [r4, #0]
 8001860:	b192      	cbz	r2, 8001888 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 8001862:	4862      	ldr	r0, [pc, #392]	; (80019ec <TaskInput+0x1c0>)
 8001864:	f004 f832 	bl	80058cc <iprintf>
    buf--;     /* Then remove it from the buffer */
 8001868:	4a61      	ldr	r2, [pc, #388]	; (80019f0 <TaskInput+0x1c4>)
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8001876:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800187a:	f1a3 020d 	sub.w	r2, r3, #13
 800187e:	4253      	negs	r3, r2
 8001880:	4153      	adcs	r3, r2
 8001882:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <TaskInput+0x1c8>)
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e038      	b.n	80018fa <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8001888:	2b21      	cmp	r3, #33	; 0x21
 800188a:	d12a      	bne.n	80018e2 <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 800188c:	4b5a      	ldr	r3, [pc, #360]	; (80019f8 <TaskInput+0x1cc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8001894:	4c59      	ldr	r4, [pc, #356]	; (80019fc <TaskInput+0x1d0>)
 8001896:	495a      	ldr	r1, [pc, #360]	; (8001a00 <TaskInput+0x1d4>)
 8001898:	4620      	mov	r0, r4
 800189a:	f004 f8d5 	bl	8005a48 <strcpy>
      printf("%s",input);
 800189e:	4621      	mov	r1, r4
 80018a0:	4858      	ldr	r0, [pc, #352]	; (8001a04 <TaskInput+0x1d8>)
 80018a2:	f004 f813 	bl	80058cc <iprintf>
      count = strlen(input);
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7fe fcb4 	bl	8000214 <strlen>
 80018ac:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <TaskInput+0x1bc>)
 80018ae:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80018b0:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <TaskInput+0x1c4>)
 80018b2:	4404      	add	r4, r0
 80018b4:	601c      	str	r4, [r3, #0]
    printf("\n");
 80018b6:	200a      	movs	r0, #10
 80018b8:	f004 f820 	bl	80058fc <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 80018bc:	494f      	ldr	r1, [pc, #316]	; (80019fc <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80018be:	4c52      	ldr	r4, [pc, #328]	; (8001a08 <TaskInput+0x1dc>)
  i = len;
 80018c0:	2350      	movs	r3, #80	; 0x50
 80018c2:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80018c4:	3b01      	subs	r3, #1
 80018c6:	1c5f      	adds	r7, r3, #1
 80018c8:	780a      	ldrb	r2, [r1, #0]
 80018ca:	4608      	mov	r0, r1
 80018cc:	f101 0101 	add.w	r1, r1, #1
 80018d0:	d036      	beq.n	8001940 <TaskInput+0x114>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d060      	beq.n	8001998 <TaskInput+0x16c>
 80018d6:	5d12      	ldrb	r2, [r2, r4]
 80018d8:	0717      	lsls	r7, r2, #28
 80018da:	d4f3      	bmi.n	80018c4 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d130      	bne.n	8001942 <TaskInput+0x116>
 80018e0:	e05a      	b.n	8001998 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 80018e2:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <TaskInput+0x1dc>)
 80018e4:	5c9a      	ldrb	r2, [r3, r2]
 80018e6:	f012 0f97 	tst.w	r2, #151	; 0x97
 80018ea:	d015      	beq.n	8001918 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 80018ec:	493e      	ldr	r1, [pc, #248]	; (80019e8 <TaskInput+0x1bc>)
 80018ee:	680a      	ldr	r2, [r1, #0]
 80018f0:	2a4f      	cmp	r2, #79	; 0x4f
 80018f2:	d905      	bls.n	8001900 <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 80018f4:	2007      	movs	r0, #7
 80018f6:	f004 f801 	bl	80058fc <putchar>
}
 80018fa:	b004      	add	sp, #16
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 8001900:	4c3b      	ldr	r4, [pc, #236]	; (80019f0 <TaskInput+0x1c4>)
 8001902:	6820      	ldr	r0, [r4, #0]
 8001904:	7003      	strb	r3, [r0, #0]
 8001906:	1c45      	adds	r5, r0, #1
      count++;
 8001908:	3201      	adds	r2, #1
      printf("%c",c);
 800190a:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 800190e:	6025      	str	r5, [r4, #0]
      count++;
 8001910:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8001912:	f003 fff3 	bl	80058fc <putchar>
 8001916:	e7ae      	b.n	8001876 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 8001918:	2b0d      	cmp	r3, #13
 800191a:	d005      	beq.n	8001928 <TaskInput+0xfc>
 800191c:	2b0a      	cmp	r3, #10
 800191e:	d1aa      	bne.n	8001876 <TaskInput+0x4a>
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <TaskInput+0x1c8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1a6      	bne.n	8001876 <TaskInput+0x4a>
    *buf = '\0';
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <TaskInput+0x1c4>)
    strcpy(input_b,input);
 800192a:	4934      	ldr	r1, [pc, #208]	; (80019fc <TaskInput+0x1d0>)
    *buf = '\0';
 800192c:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 800192e:	4834      	ldr	r0, [pc, #208]	; (8001a00 <TaskInput+0x1d4>)
    *buf = '\0';
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8001934:	f004 f888 	bl	8005a48 <strcpy>
    saved = 1;
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <TaskInput+0x1cc>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e7ba      	b.n	80018b6 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 8001940:	b352      	cbz	r2, 8001998 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 8001942:	4932      	ldr	r1, [pc, #200]	; (8001a0c <TaskInput+0x1e0>)
 8001944:	f001 fe20 	bl	8003588 <strtok>
  if(p==NULL) {
 8001948:	4604      	mov	r4, r0
 800194a:	b920      	cbnz	r0, 8001956 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 800194c:	4930      	ldr	r1, [pc, #192]	; (8001a10 <TaskInput+0x1e4>)
 800194e:	4831      	ldr	r0, [pc, #196]	; (8001a14 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001950:	f003 ffbc 	bl	80058cc <iprintf>
  return CmdReturnNotFound;
 8001954:	e020      	b.n	8001998 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 8001956:	4930      	ldr	r1, [pc, #192]	; (8001a18 <TaskInput+0x1ec>)
 8001958:	f004 f85c 	bl	8005a14 <strcasecmp>
 800195c:	bb58      	cbnz	r0, 80019b6 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 800195e:	492b      	ldr	r1, [pc, #172]	; (8001a0c <TaskInput+0x1e0>)
 8001960:	f001 fe12 	bl	8003588 <strtok>
    if(p == NULL) {
 8001964:	4604      	mov	r4, r0
 8001966:	b318      	cbz	r0, 80019b0 <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 8001968:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 800196c:	4620      	mov	r0, r4
 800196e:	f7fe fc51 	bl	8000214 <strlen>
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8001974:	4f2a      	ldr	r7, [pc, #168]	; (8001a20 <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8001976:	3001      	adds	r0, #1
 8001978:	4420      	add	r0, r4
 800197a:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	b9e9      	cbnz	r1, 80019bc <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <TaskInput+0x1f8>)
 8001982:	4621      	mov	r1, r4
 8001984:	e7e4      	b.n	8001950 <TaskInput+0x124>
	if(t->help != NULL) {
 8001986:	68a2      	ldr	r2, [r4, #8]
 8001988:	b172      	cbz	r2, 80019a8 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800198a:	4638      	mov	r0, r7
 800198c:	f003 ff9e 	bl	80058cc <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8001990:	340c      	adds	r4, #12
 8001992:	6821      	ldr	r1, [r4, #0]
 8001994:	2900      	cmp	r1, #0
 8001996:	d1f6      	bne.n	8001986 <TaskInput+0x15a>
    printPrompt = 1;
 8001998:	2301      	movs	r3, #1
 800199a:	602b      	str	r3, [r5, #0]
    buf = input;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <TaskInput+0x1c4>)
 800199e:	601e      	str	r6, [r3, #0]
    count = 0;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <TaskInput+0x1bc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e766      	b.n	8001876 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80019a8:	6863      	ldr	r3, [r4, #4]
 80019aa:	2001      	movs	r0, #1
 80019ac:	4798      	blx	r3
 80019ae:	e7ef      	b.n	8001990 <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 80019b0:	4c1b      	ldr	r4, [pc, #108]	; (8001a20 <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80019b2:	4f1d      	ldr	r7, [pc, #116]	; (8001a28 <TaskInput+0x1fc>)
 80019b4:	e7ed      	b.n	8001992 <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80019b6:	f04f 0800 	mov.w	r8, #0
 80019ba:	e7d7      	b.n	800196c <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 80019bc:	4620      	mov	r0, r4
 80019be:	9101      	str	r1, [sp, #4]
 80019c0:	f004 f828 	bl	8005a14 <strcasecmp>
 80019c4:	9901      	ldr	r1, [sp, #4]
 80019c6:	b948      	cbnz	r0, 80019dc <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 80019c8:	f1b8 0f00 	cmp.w	r8, #0
 80019cc:	d002      	beq.n	80019d4 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 80019ce:	4817      	ldr	r0, [pc, #92]	; (8001a2c <TaskInput+0x200>)
 80019d0:	f003 ff7c 	bl	80058cc <iprintf>
      return t->func(arg);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4640      	mov	r0, r8
 80019d8:	4798      	blx	r3
 80019da:	e7dd      	b.n	8001998 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 80019dc:	370c      	adds	r7, #12
 80019de:	e7cd      	b.n	800197c <TaskInput+0x150>
 80019e0:	20000010 	.word	0x20000010
 80019e4:	0800641f 	.word	0x0800641f
 80019e8:	20000a60 	.word	0x20000a60
 80019ec:	08006426 	.word	0x08006426
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000a64 	.word	0x20000a64
 80019f8:	20000b5c 	.word	0x20000b5c
 80019fc:	20000abc 	.word	0x20000abc
 8001a00:	20000b0c 	.word	0x20000b0c
 8001a04:	08006310 	.word	0x08006310
 8001a08:	08011fde 	.word	0x08011fde
 8001a0c:	08006418 	.word	0x08006418
 8001a10:	08011fc4 	.word	0x08011fc4
 8001a14:	0800642a 	.word	0x0800642a
 8001a18:	0800645a 	.word	0x0800645a
 8001a1c:	20000a5c 	.word	0x20000a5c
 8001a20:	08012490 	.word	0x08012490
 8001a24:	08006470 	.word	0x08006470
 8001a28:	0800645f 	.word	0x0800645f
 8001a2c:	0800646b 	.word	0x0800646b

08001a30 <fetch_int32_arg>:
{
 8001a30:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 8001a32:	490c      	ldr	r1, [pc, #48]	; (8001a64 <fetch_int32_arg+0x34>)
{
 8001a34:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f001 fda6 	bl	8003588 <strtok>
  if(p == NULL) {
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	b168      	cbz	r0, 8001a5c <fetch_int32_arg+0x2c>
  *dest = strtol(p,NULL,0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	4611      	mov	r1, r2
 8001a44:	f001 fe7e 	bl	8003744 <strtol>
 8001a48:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7fe fbe2 	bl	8000214 <strlen>
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <fetch_int32_arg+0x38>)
 8001a52:	3001      	adds	r0, #1
 8001a54:	4404      	add	r4, r0
 8001a56:	601c      	str	r4, [r3, #0]
  return 0;
 8001a58:	2000      	movs	r0, #0
}     
 8001a5a:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	e7fb      	b.n	8001a5a <fetch_int32_arg+0x2a>
 8001a62:	bf00      	nop
 8001a64:	08006418 	.word	0x08006418
 8001a68:	20000a5c 	.word	0x20000a5c

08001a6c <fetch_uint32_arg>:
{
 8001a6c:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 8001a6e:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <fetch_uint32_arg+0x34>)
{
 8001a70:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fd88 	bl	8003588 <strtok>
  if(p == NULL) {
 8001a78:	4604      	mov	r4, r0
 8001a7a:	b168      	cbz	r0, 8001a98 <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4611      	mov	r1, r2
 8001a80:	f001 fedc 	bl	800383c <strtoul>
 8001a84:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7fe fbc4 	bl	8000214 <strlen>
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <fetch_uint32_arg+0x38>)
 8001a8e:	3001      	adds	r0, #1
 8001a90:	4404      	add	r4, r0
 8001a92:	601c      	str	r4, [r3, #0]
  return 0;
 8001a94:	2000      	movs	r0, #0
}
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a9c:	e7fb      	b.n	8001a96 <fetch_uint32_arg+0x2a>
 8001a9e:	bf00      	nop
 8001aa0:	08006418 	.word	0x08006418
 8001aa4:	20000a5c 	.word	0x20000a5c

08001aa8 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8001aa8:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001aaa:	b9d8      	cbnz	r0, 8001ae4 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8001aac:	a801      	add	r0, sp, #4
 8001aae:	f7ff ffdd 	bl	8001a6c <fetch_uint32_arg>
  if(rc) {
 8001ab2:	b128      	cbz	r0, 8001ac0 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8001ab4:	480e      	ldr	r0, [pc, #56]	; (8001af0 <CmdLed+0x48>)
 8001ab6:	f003 ffa5 	bl	8005a04 <puts>
    return CmdReturnBadParameter1;
 8001aba:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8001abc:	b002      	add	sp, #8
 8001abe:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8001ac0:	9901      	ldr	r1, [sp, #4]
 8001ac2:	480c      	ldr	r0, [pc, #48]	; (8001af4 <CmdLed+0x4c>)
 8001ac4:	f003 ff02 	bl	80058cc <iprintf>
  val = val ? 1 : 0;
 8001ac8:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <CmdLed+0x50>)
  val = val ? 1 : 0;
 8001acc:	3b00      	subs	r3, #0
 8001ace:	bf18      	it	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8001ad4:	f003 ff96 	bl	8005a04 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8001ad8:	f89d 0004 	ldrb.w	r0, [sp, #4]
  if(PinState != GPIO_PIN_RESET)
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <CmdLed+0x54>)
 8001ade:	b118      	cbz	r0, 8001ae8 <CmdLed+0x40>
    GPIOx->BSRR = GPIO_Pin;
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e7e9      	b.n	8001abc <CmdLed+0x14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ae8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	e7e5      	b.n	8001abc <CmdLed+0x14>
 8001af0:	080064a5 	.word	0x080064a5
 8001af4:	080064d3 	.word	0x080064d3
 8001af8:	080064ef 	.word	0x080064ef
 8001afc:	40020000 	.word	0x40020000

08001b00 <CmdStepperEnable>:
ADD_CMD("stepperinit", CmdStepperInit, "Initialize Timer 11")



ParserReturnVal_t CmdStepperEnable(int mode)
{
 8001b00:	b507      	push	{r0, r1, r2, lr}
  uint32_t val,rc;
  
  if((mode != CMD_INTERACTIVE)) return CmdReturnOk;
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d130      	bne.n	8001b68 <CmdStepperEnable+0x68>

  rc = fetch_uint32_arg(&val);					//fetches value from cmd line in minicom
 8001b06:	a801      	add	r0, sp, #4
 8001b08:	f7ff ffb0 	bl	8001a6c <fetch_uint32_arg>
  
  if(rc) {
 8001b0c:	b130      	cbz	r0, 8001b1c <CmdStepperEnable+0x1c>
    printf("Please supply 1 | 0 to enable or disable the stepper motor\n");
 8001b0e:	4817      	ldr	r0, [pc, #92]	; (8001b6c <CmdStepperEnable+0x6c>)
 8001b10:	f003 ff78 	bl	8005a04 <puts>
    return CmdReturnBadParameter1;
 8001b14:	2004      	movs	r0, #4
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
  HAL_TIM_Base_Stop(&tim11);  
  }
  
  return CmdReturnOk;
}
 8001b16:	b003      	add	sp, #12
 8001b18:	f85d fb04 	ldr.w	pc, [sp], #4
  val = val ? 1 : 0;
 8001b1c:	9b01      	ldr	r3, [sp, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
  if(val == 1)					//motor enabled - operation mode
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <CmdStepperEnable+0x70>)
 8001b2a:	d005      	beq.n	8001b38 <CmdStepperEnable+0x38>
 8001b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b30:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = GPIO_Pin;
 8001b32:	2208      	movs	r2, #8
 8001b34:	619a      	str	r2, [r3, #24]
 8001b36:	e7ee      	b.n	8001b16 <CmdStepperEnable+0x16>
 8001b38:	2210      	movs	r2, #16
  __HAL_TIM_DISABLE(htim);
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <CmdStepperEnable+0x74>)
 8001b3c:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	680b      	ldr	r3, [r1, #0]
 8001b46:	6a18      	ldr	r0, [r3, #32]
 8001b48:	f241 1211 	movw	r2, #4369	; 0x1111
 8001b4c:	4210      	tst	r0, r2
 8001b4e:	d108      	bne.n	8001b62 <CmdStepperEnable+0x62>
 8001b50:	6a18      	ldr	r0, [r3, #32]
 8001b52:	f240 4244 	movw	r2, #1092	; 0x444
 8001b56:	4210      	tst	r0, r2
 8001b58:	bf02      	ittt	eq
 8001b5a:	681a      	ldreq	r2, [r3, #0]
 8001b5c:	f022 0201 	biceq.w	r2, r2, #1
 8001b60:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  if((mode != CMD_INTERACTIVE)) return CmdReturnOk;
 8001b68:	2000      	movs	r0, #0
 8001b6a:	e7d4      	b.n	8001b16 <CmdStepperEnable+0x16>
 8001b6c:	080064ff 	.word	0x080064ff
 8001b70:	40020800 	.word	0x40020800
 8001b74:	20000b60 	.word	0x20000b60

08001b78 <CmdStep>:




ParserReturnVal_t CmdStep(int mode)
{
 8001b78:	b513      	push	{r0, r1, r4, lr}
	int rc;
	int32_t steps;
	uint32_t delayVal;

	if (mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b7a:	b998      	cbnz	r0, 8001ba4 <CmdStep+0x2c>

	rc = fetch_int32_arg(&steps);
 8001b7c:	4668      	mov	r0, sp
 8001b7e:	f7ff ff57 	bl	8001a30 <fetch_int32_arg>
	if (rc) {
 8001b82:	b128      	cbz	r0, 8001b90 <CmdStep+0x18>
		printf("Specify the steps\n");
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <CmdStep+0x30>)
		return CmdReturnBadParameter1;
	}

	rc = fetch_uint32_arg(&delayVal);
	if (rc) {
		printf("Specify the delayVal\n");
 8001b86:	f003 ff3d 	bl	8005a04 <puts>
		return CmdReturnBadParameter1;
 8001b8a:	2004      	movs	r0, #4
	}

	// execute our command to have stepper work
	Stepper(steps, delayVal);
	return CmdReturnOk;
}
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd10      	pop	{r4, pc}
	rc = fetch_uint32_arg(&delayVal);
 8001b90:	a801      	add	r0, sp, #4
 8001b92:	f7ff ff6b 	bl	8001a6c <fetch_uint32_arg>
	if (rc) {
 8001b96:	b108      	cbz	r0, 8001b9c <CmdStep+0x24>
		printf("Specify the delayVal\n");
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <CmdStep+0x34>)
 8001b9a:	e7f4      	b.n	8001b86 <CmdStep+0xe>
	Stepper(steps, delayVal);
 8001b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001ba0:	f7ff f9ac 	bl	8000efc <Stepper>
	if (mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e7f1      	b.n	8001b8c <CmdStep+0x14>
 8001ba8:	0800653a 	.word	0x0800653a
 8001bac:	0800654c 	.word	0x0800654c

08001bb0 <CmdAngle>:




ParserReturnVal_t CmdAngle(int mode)
{
 8001bb0:	b513      	push	{r0, r1, r4, lr}
	int32_t angle;
	int32_t steps;
	uint32_t delayVal;
	

	if (mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bb2:	b9a8      	cbnz	r0, 8001be0 <CmdAngle+0x30>

	rc = fetch_int32_arg(&angle);
 8001bb4:	4668      	mov	r0, sp
 8001bb6:	f7ff ff3b 	bl	8001a30 <fetch_int32_arg>
	if (rc) {
 8001bba:	b128      	cbz	r0, 8001bc8 <CmdAngle+0x18>
		printf("Specify the Angle\n");
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <CmdAngle+0x34>)
		return CmdReturnBadParameter1;
	}

	rc = fetch_uint32_arg(&delayVal);
	if (rc) {
		printf("Specify the delayVal\n");
 8001bbe:	f003 ff21 	bl	8005a04 <puts>
		return CmdReturnBadParameter1;
 8001bc2:	2004      	movs	r0, #4
	}
	steps = angle * 9;
	Stepper(steps, delayVal);
	return CmdReturnOk;
}
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd10      	pop	{r4, pc}
	rc = fetch_uint32_arg(&delayVal);
 8001bc8:	a801      	add	r0, sp, #4
 8001bca:	f7ff ff4f 	bl	8001a6c <fetch_uint32_arg>
	if (rc) {
 8001bce:	b108      	cbz	r0, 8001bd4 <CmdAngle+0x24>
		printf("Specify the delayVal\n");
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <CmdAngle+0x38>)
 8001bd2:	e7f4      	b.n	8001bbe <CmdAngle+0xe>
	Stepper(steps, delayVal);
 8001bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bd8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001bdc:	f7ff f98e 	bl	8000efc <Stepper>
	if (mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001be0:	2000      	movs	r0, #0
 8001be2:	e7ef      	b.n	8001bc4 <CmdAngle+0x14>
 8001be4:	08006561 	.word	0x08006561
 8001be8:	0800654c 	.word	0x0800654c

08001bec <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 8001bec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	b9f0      	cbnz	r0, 8001c32 <CmdR+0x46>

  fetch_uint32_arg(&addr);
 8001bf4:	a801      	add	r0, sp, #4
 8001bf6:	f7ff ff39 	bl	8001a6c <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 8001bfa:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 8001bfe:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 8001c00:	4e12      	ldr	r6, [pc, #72]	; (8001c4c <CmdR+0x60>)
 8001c02:	4f13      	ldr	r7, [pc, #76]	; (8001c50 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8001c04:	462a      	mov	r2, r5
 8001c06:	f003 fe61 	bl	80058cc <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 8001c0a:	4812      	ldr	r0, [pc, #72]	; (8001c54 <CmdR+0x68>)
 8001c0c:	f003 fe5e 	bl	80058cc <iprintf>
    printf("%s%c",
 8001c10:	4911      	ldr	r1, [pc, #68]	; (8001c58 <CmdR+0x6c>)
 8001c12:	4688      	mov	r8, r1
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	bfb4      	ite	lt
 8001c18:	2231      	movlt	r2, #49	; 0x31
 8001c1a:	2230      	movge	r2, #48	; 0x30
 8001c1c:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 8001c1e:	3401      	adds	r4, #1
    printf("%s%c",
 8001c20:	f003 fe54 	bl	80058cc <iprintf>
  for(i=0; i<32; i++) {
 8001c24:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 8001c26:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 8001c2a:	d106      	bne.n	8001c3a <CmdR+0x4e>
  }
  printf("\n");
 8001c2c:	200a      	movs	r0, #10
 8001c2e:	f003 fe65 	bl	80058fc <putchar>
  return CmdReturnOk;
}
 8001c32:	2000      	movs	r0, #0
 8001c34:	b002      	add	sp, #8
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 8001c3a:	f014 0f03 	tst.w	r4, #3
 8001c3e:	bf14      	ite	ne
 8001c40:	4639      	movne	r1, r7
 8001c42:	4641      	moveq	r1, r8
 8001c44:	e7e6      	b.n	8001c14 <CmdR+0x28>
 8001c46:	bf00      	nop
 8001c48:	08006573 	.word	0x08006573
 8001c4c:	0800662d 	.word	0x0800662d
 8001c50:	08008a05 	.word	0x08008a05
 8001c54:	08006585 	.word	0x08006585
 8001c58:	080089a9 	.word	0x080089a9

08001c5c <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 8001c5c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001c5e:	b940      	cbnz	r0, 8001c72 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001c60:	4668      	mov	r0, sp
 8001c62:	f7ff ff03 	bl	8001a6c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8001c66:	a801      	add	r0, sp, #4
 8001c68:	f7ff ff00 	bl	8001a6c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8001c6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001c70:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 8001c72:	2000      	movs	r0, #0
 8001c74:	b003      	add	sp, #12
 8001c76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c7c <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001c80:	2801      	cmp	r0, #1
{
 8001c82:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001c84:	d00b      	beq.n	8001c9e <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 8001c86:	2802      	cmp	r0, #2
 8001c88:	4f31      	ldr	r7, [pc, #196]	; (8001d50 <CmdDump+0xd4>)
 8001c8a:	4e32      	ldr	r6, [pc, #200]	; (8001d54 <CmdDump+0xd8>)
 8001c8c:	d10b      	bne.n	8001ca6 <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 8001c8e:	4832      	ldr	r0, [pc, #200]	; (8001d58 <CmdDump+0xdc>)
 8001c90:	f003 feb8 	bl	8005a04 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	6831      	ldr	r1, [r6, #0]
 8001c98:	4830      	ldr	r0, [pc, #192]	; (8001d5c <CmdDump+0xe0>)
 8001c9a:	f003 fe17 	bl	80058cc <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	b00b      	add	sp, #44	; 0x2c
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f7ff fee0 	bl	8001a6c <fetch_uint32_arg>
  if(rc == 0) {
 8001cac:	b910      	cbnz	r0, 8001cb4 <CmdDump+0x38>
    fetch_uint32_arg(&count);
 8001cae:	4638      	mov	r0, r7
 8001cb0:	f7ff fedc 	bl	8001a6c <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8001cb4:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 8001cb6:	2c00      	cmp	r4, #0
 8001cb8:	d043      	beq.n	8001d42 <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 8001cba:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 8001cbc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8001d6c <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 8001cc0:	9301      	str	r3, [sp, #4]
  bufp = buf;
 8001cc2:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	46c8      	mov	r8, r9
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 8001cce:	f015 030f 	ands.w	r3, r5, #15
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	d13a      	bne.n	8001d4c <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 8001cd6:	4822      	ldr	r0, [pc, #136]	; (8001d60 <CmdDump+0xe4>)
 8001cd8:	9103      	str	r1, [sp, #12]
 8001cda:	f003 fdf7 	bl	80058cc <iprintf>
      bufp = buf;
 8001cde:	9903      	ldr	r1, [sp, #12]
 8001ce0:	46c3      	mov	fp, r8
    c = *p++;
 8001ce2:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <CmdDump+0xe8>)
 8001ce6:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8001cea:	46d9      	mov	r9, fp
      *bufp++ = '.';
 8001cec:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8001cf0:	4601      	mov	r1, r0
      *bufp++ = '.';
 8001cf2:	bf08      	it	eq
 8001cf4:	202e      	moveq	r0, #46	; 0x2e
 8001cf6:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8001cfa:	4650      	mov	r0, sl
 8001cfc:	f003 fde6 	bl	80058cc <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8001d00:	9b02      	ldr	r3, [sp, #8]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	d106      	bne.n	8001d14 <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 8001d06:	2100      	movs	r1, #0
 8001d08:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 8001d0c:	4816      	ldr	r0, [pc, #88]	; (8001d68 <CmdDump+0xec>)
 8001d0e:	4641      	mov	r1, r8
 8001d10:	f003 fddc 	bl	80058cc <iprintf>
  for(i=0; i<count; i++) {
 8001d14:	3501      	adds	r5, #1
 8001d16:	42ac      	cmp	r4, r5
 8001d18:	d1d7      	bne.n	8001cca <CmdDump+0x4e>
  *bufp='\0';
 8001d1a:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8001d1c:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8001d20:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 8001d24:	d00d      	beq.n	8001d42 <CmdDump+0xc6>
      printf("   ");
 8001d26:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001d70 <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001d2a:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8001d2e:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001d30:	3501      	adds	r5, #1
      printf("   ");
 8001d32:	f003 fdcb 	bl	80058cc <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001d36:	42a5      	cmp	r5, r4
 8001d38:	d3f9      	bcc.n	8001d2e <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 8001d3a:	480b      	ldr	r0, [pc, #44]	; (8001d68 <CmdDump+0xec>)
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	f003 fdc5 	bl	80058cc <iprintf>
  address = address+count;
 8001d42:	6833      	ldr	r3, [r6, #0]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 8001d4a:	e7a8      	b.n	8001c9e <CmdDump+0x22>
 8001d4c:	46cb      	mov	fp, r9
 8001d4e:	e7c8      	b.n	8001ce2 <CmdDump+0x66>
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000a44 	.word	0x20000a44
 8001d58:	08006632 	.word	0x08006632
 8001d5c:	080067ca 	.word	0x080067ca
 8001d60:	080067fc 	.word	0x080067fc
 8001d64:	08011fde 	.word	0x08011fde
 8001d68:	08006809 	.word	0x08006809
 8001d6c:	08006803 	.word	0x08006803
 8001d70:	08006629 	.word	0x08006629

08001d74 <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 8001d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001d76:	4604      	mov	r4, r0
 8001d78:	bb50      	cbnz	r0, 8001dd0 <CmdSend+0x5c>

  index = 0;
 8001d7a:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 8001d7c:	a803      	add	r0, sp, #12
 8001d7e:	f7ff fe75 	bl	8001a6c <fetch_uint32_arg>
  if(rc) {
 8001d82:	4602      	mov	r2, r0
 8001d84:	b130      	cbz	r0, 8001d94 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <CmdSend+0x60>)
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f003 fd9f 	bl	80058cc <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 8001d8e:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 8001d90:	b004      	add	sp, #16
 8001d92:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001d94:	9c03      	ldr	r4, [sp, #12]
 8001d96:	b124      	cbz	r4, 8001da2 <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001d98:	4621      	mov	r1, r4
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <CmdSend+0x64>)
 8001d9c:	f003 fd96 	bl	80058cc <iprintf>
 8001da0:	e7f5      	b.n	8001d8e <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <CmdSend+0x68>)
 8001da4:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 8001da6:	9101      	str	r1, [sp, #4]
 8001da8:	4608      	mov	r0, r1
 8001daa:	f7fe fa33 	bl	8000214 <strlen>
  if(len==0) {
 8001dae:	9901      	ldr	r1, [sp, #4]
 8001db0:	4602      	mov	r2, r0
 8001db2:	b920      	cbnz	r0, 8001dbe <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 8001db4:	480a      	ldr	r0, [pc, #40]	; (8001de0 <CmdSend+0x6c>)
 8001db6:	f003 fe25 	bl	8005a04 <puts>
    return CmdReturnBadParameter2;
 8001dba:	2005      	movs	r0, #5
 8001dbc:	e7e8      	b.n	8001d90 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff fa88 	bl	80012d4 <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <CmdSend+0x70>)
 8001dc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f7ff fa82 	bl	80012d4 <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	e7dd      	b.n	8001d90 <CmdSend+0x1c>
 8001dd4:	08006811 	.word	0x08006811
 8001dd8:	0800683f 	.word	0x0800683f
 8001ddc:	20000a5c 	.word	0x20000a5c
 8001de0:	08006875 	.word	0x08006875
 8001de4:	08006e03 	.word	0x08006e03

08001de8 <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 8001de8:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001dea:	4604      	mov	r4, r0
 8001dec:	bb18      	cbnz	r0, 8001e36 <CmdReceive+0x4e>

  index = 0;
 8001dee:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8001df0:	a801      	add	r0, sp, #4
 8001df2:	f7ff fe3b 	bl	8001a6c <fetch_uint32_arg>
  if(rc) {
 8001df6:	4602      	mov	r2, r0
 8001df8:	b130      	cbz	r0, 8001e08 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8001dfa:	4810      	ldr	r0, [pc, #64]	; (8001e3c <CmdReceive+0x54>)
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	f003 fd65 	bl	80058cc <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 8001e02:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 8001e04:	b002      	add	sp, #8
 8001e06:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001e08:	9901      	ldr	r1, [sp, #4]
 8001e0a:	b119      	cbz	r1, 8001e14 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <CmdReceive+0x58>)
 8001e0e:	f003 fd5d 	bl	80058cc <iprintf>
 8001e12:	e7f6      	b.n	8001e02 <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <CmdReceive+0x5c>)
 8001e16:	f003 fd59 	bl	80058cc <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 8001e1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f10d 0103 	add.w	r1, sp, #3
 8001e24:	f7ff f8d6 	bl	8000fd4 <TerminalRead>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d0eb      	beq.n	8001e04 <CmdReceive+0x1c>
    printf("%c",c);
 8001e2c:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001e30:	f003 fd64 	bl	80058fc <putchar>
 8001e34:	e7f1      	b.n	8001e1a <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001e36:	2000      	movs	r0, #0
 8001e38:	e7e4      	b.n	8001e04 <CmdReceive+0x1c>
 8001e3a:	bf00      	nop
 8001e3c:	08006811 	.word	0x08006811
 8001e40:	0800683f 	.word	0x0800683f
 8001e44:	0800689f 	.word	0x0800689f

08001e48 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 8001e48:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b9b0      	cbnz	r0, 8001e7c <CmdTransparent+0x34>

  index = 0;
 8001e4e:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8001e50:	a801      	add	r0, sp, #4
 8001e52:	f7ff fe0b 	bl	8001a6c <fetch_uint32_arg>
  if(rc) {
 8001e56:	4602      	mov	r2, r0
 8001e58:	b130      	cbz	r0, 8001e68 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8001e5a:	4809      	ldr	r0, [pc, #36]	; (8001e80 <CmdTransparent+0x38>)
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	f003 fd35 	bl	80058cc <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 8001e62:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8001e64:	b002      	add	sp, #8
 8001e66:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001e68:	9901      	ldr	r1, [sp, #4]
 8001e6a:	b119      	cbz	r1, 8001e74 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <CmdTransparent+0x3c>)
 8001e6e:	f003 fd2d 	bl	80058cc <iprintf>
    return CmdReturnBadParameter1;
 8001e72:	e7f6      	b.n	8001e62 <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <CmdTransparent+0x40>)
 8001e76:	f003 fdc5 	bl	8005a04 <puts>
 8001e7a:	e7f2      	b.n	8001e62 <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	e7f1      	b.n	8001e64 <CmdTransparent+0x1c>
 8001e80:	08006811 	.word	0x08006811
 8001e84:	0800683f 	.word	0x0800683f
 8001e88:	080068ba 	.word	0x080068ba

08001e8c <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 8001e8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8001e90:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8001e92:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 8001e94:	d132      	bne.n	8001efc <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 8001e96:	f7ff fcb1 	bl	80017fc <fetch_string_arg>
    if(rc) {
 8001e9a:	b160      	cbz	r0, 8001eb6 <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8001e9c:	488b      	ldr	r0, [pc, #556]	; (80020cc <CmdDecode+0x240>)
 8001e9e:	f003 fdb1 	bl	8005a04 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8001ea2:	f7ff fc7f 	bl	80017a4 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 8001ea6:	488a      	ldr	r0, [pc, #552]	; (80020d0 <CmdDecode+0x244>)
 8001ea8:	f003 fdac 	bl	8005a04 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 8001eac:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 8001eae:	4620      	mov	r0, r4
 8001eb0:	b004      	add	sp, #16
 8001eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8001eb6:	4d87      	ldr	r5, [pc, #540]	; (80020d4 <CmdDecode+0x248>)
 8001eb8:	e008      	b.n	8001ecc <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001eba:	9c03      	ldr	r4, [sp, #12]
 8001ebc:	f7ff f8b0 	bl	8001020 <Uncompress>
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f003 fda6 	bl	8005a14 <strcasecmp>
 8001ec8:	b118      	cbz	r0, 8001ed2 <CmdDecode+0x46>
	p++;
 8001eca:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8001ecc:	6828      	ldr	r0, [r5, #0]
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d1f3      	bne.n	8001eba <CmdDecode+0x2e>
      if(p->name == NULL) {
 8001ed2:	682c      	ldr	r4, [r5, #0]
 8001ed4:	b934      	cbnz	r4, 8001ee4 <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 8001ed6:	9903      	ldr	r1, [sp, #12]
 8001ed8:	487f      	ldr	r0, [pc, #508]	; (80020d8 <CmdDecode+0x24c>)
 8001eda:	f003 fcf7 	bl	80058cc <iprintf>
	DecodePrintPeripherals(Peripherals);
 8001ede:	f7ff fc61 	bl	80017a4 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 8001ee2:	e7e4      	b.n	8001eae <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff f89b 	bl	8001020 <Uncompress>
 8001eea:	4601      	mov	r1, r0
 8001eec:	487b      	ldr	r0, [pc, #492]	; (80020dc <CmdDecode+0x250>)
 8001eee:	f003 fced 	bl	80058cc <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8001ef2:	89a9      	ldrh	r1, [r5, #12]
 8001ef4:	68a8      	ldr	r0, [r5, #8]
 8001ef6:	f7ff fc25 	bl	8001744 <DecodePrintRegisters>
    printf("\n\n");
 8001efa:	e007      	b.n	8001f0c <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 8001efc:	f7ff fc7e 	bl	80017fc <fetch_string_arg>
  if(rc) {
 8001f00:	b178      	cbz	r0, 8001f22 <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 8001f02:	4877      	ldr	r0, [pc, #476]	; (80020e0 <CmdDecode+0x254>)
 8001f04:	f003 fd7e 	bl	8005a04 <puts>
    DecodePrintPeripherals(Peripherals);
 8001f08:	f7ff fc4c 	bl	80017a4 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 8001f0c:	4875      	ldr	r0, [pc, #468]	; (80020e4 <CmdDecode+0x258>)
 8001f0e:	e7cb      	b.n	8001ea8 <CmdDecode+0x1c>
    p++;
 8001f10:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8001f12:	6828      	ldr	r0, [r5, #0]
 8001f14:	9c03      	ldr	r4, [sp, #12]
 8001f16:	b930      	cbnz	r0, 8001f26 <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8001f18:	9903      	ldr	r1, [sp, #12]
 8001f1a:	4873      	ldr	r0, [pc, #460]	; (80020e8 <CmdDecode+0x25c>)
 8001f1c:	f003 fcd6 	bl	80058cc <iprintf>
    DecodePrintPeripherals(Peripherals);
 8001f20:	e7f2      	b.n	8001f08 <CmdDecode+0x7c>
  p = Peripherals;
 8001f22:	4d6c      	ldr	r5, [pc, #432]	; (80020d4 <CmdDecode+0x248>)
 8001f24:	e7f5      	b.n	8001f12 <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8001f26:	f7ff f87b 	bl	8001020 <Uncompress>
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f003 fd71 	bl	8005a14 <strcasecmp>
 8001f32:	4604      	mov	r4, r0
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d1eb      	bne.n	8001f10 <CmdDecode+0x84>
  if(p->name == NULL) {
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0ec      	beq.n	8001f18 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8001f3e:	a802      	add	r0, sp, #8
 8001f40:	f7ff fc5c 	bl	80017fc <fetch_string_arg>
  if(rc) {
 8001f44:	b120      	cbz	r0, 8001f50 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 8001f46:	4621      	mov	r1, r4
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f7ff fbd3 	bl	80016f4 <DecodePeripheral>
    return CmdReturnOk;
 8001f4e:	e7ae      	b.n	8001eae <CmdDecode+0x22>
  r = p->registers;
 8001f50:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 8001f52:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8001f54:	9c02      	ldr	r4, [sp, #8]
 8001f56:	2f00      	cmp	r7, #0
 8001f58:	f000 80a8 	beq.w	80020ac <CmdDecode+0x220>
 8001f5c:	6830      	ldr	r0, [r6, #0]
 8001f5e:	f7ff f85f 	bl	8001020 <Uncompress>
 8001f62:	4601      	mov	r1, r0
 8001f64:	4620      	mov	r0, r4
 8001f66:	f003 fd55 	bl	8005a14 <strcasecmp>
 8001f6a:	3f01      	subs	r7, #1
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	b958      	cbnz	r0, 8001f88 <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 8001f70:	a801      	add	r0, sp, #4
 8001f72:	f7ff fc43 	bl	80017fc <fetch_string_arg>
  if(rc == 0) {
 8001f76:	b170      	cbz	r0, 8001f96 <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 8001f78:	4631      	mov	r1, r6
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f7ff fae6 	bl	800154c <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8001f80:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8001f82:	4602      	mov	r2, r0
 8001f84:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 8001f86:	e017      	b.n	8001fb8 <CmdDecode+0x12c>
    r++;
 8001f88:	3610      	adds	r6, #16
 8001f8a:	e7e3      	b.n	8001f54 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f7ff fbb0 	bl	80016f4 <DecodePeripheral>
      return CmdReturnOk;
 8001f94:	e78a      	b.n	8001eac <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 8001f96:	4955      	ldr	r1, [pc, #340]	; (80020ec <CmdDecode+0x260>)
 8001f98:	9801      	ldr	r0, [sp, #4]
 8001f9a:	f003 fd3b 	bl	8005a14 <strcasecmp>
 8001f9e:	b980      	cbnz	r0, 8001fc2 <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 8001fa0:	4668      	mov	r0, sp
 8001fa2:	f7ff fd63 	bl	8001a6c <fetch_uint32_arg>
      if(rc) {
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	b120      	cbz	r0, 8001fb4 <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 8001faa:	4851      	ldr	r0, [pc, #324]	; (80020f0 <CmdDecode+0x264>)
 8001fac:	f003 fd2a 	bl	8005a04 <puts>
	return CmdReturnBadParameter4;
 8001fb0:	2407      	movs	r4, #7
 8001fb2:	e77c      	b.n	8001eae <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 8001fb4:	9a00      	ldr	r2, [sp, #0]
 8001fb6:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8001fb8:	6869      	ldr	r1, [r5, #4]
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff fb3e 	bl	800163c <DecodeRegister>
  return CmdReturnOk;
 8001fc0:	e775      	b.n	8001eae <CmdDecode+0x22>
    f = r->fields;
 8001fc2:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8001fc4:	b15f      	cbz	r7, 8001fde <CmdDecode+0x152>
	  && (f->name != NULL)
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	b148      	cbz	r0, 8001fde <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 8001fca:	9c01      	ldr	r4, [sp, #4]
 8001fcc:	f7ff f828 	bl	8001020 <Uncompress>
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f003 fd1e 	bl	8005a14 <strcasecmp>
 8001fd8:	b998      	cbnz	r0, 8002002 <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b99b      	cbnz	r3, 8002006 <CmdDecode+0x17a>
    errno = 0;
 8001fde:	f000 fd71 	bl	8002ac4 <__errno>
 8001fe2:	2700      	movs	r7, #0
 8001fe4:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8001fe6:	463a      	mov	r2, r7
 8001fe8:	4639      	mov	r1, r7
 8001fea:	9801      	ldr	r0, [sp, #4]
 8001fec:	f001 fc26 	bl	800383c <strtoul>
 8001ff0:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 8001ff2:	f000 fd67 	bl	8002ac4 <__errno>
 8001ff6:	6804      	ldr	r4, [r0, #0]
 8001ff8:	2c00      	cmp	r4, #0
 8001ffa:	d042      	beq.n	8002082 <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 8001ffc:	9901      	ldr	r1, [sp, #4]
 8001ffe:	483d      	ldr	r0, [pc, #244]	; (80020f4 <CmdDecode+0x268>)
 8002000:	e00b      	b.n	800201a <CmdDecode+0x18e>
      f++;
 8002002:	3708      	adds	r7, #8
 8002004:	e7de      	b.n	8001fc4 <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 8002006:	4668      	mov	r0, sp
 8002008:	f7ff fd30 	bl	8001a6c <fetch_uint32_arg>
      if(rc) {
 800200c:	4604      	mov	r4, r0
 800200e:	b138      	cbz	r0, 8002020 <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 8002010:	6830      	ldr	r0, [r6, #0]
 8002012:	f7ff f805 	bl	8001020 <Uncompress>
 8002016:	4601      	mov	r1, r0
 8002018:	4837      	ldr	r0, [pc, #220]	; (80020f8 <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 800201a:	f003 fc57 	bl	80058cc <iprintf>
      return CmdReturnOk;
 800201e:	e745      	b.n	8001eac <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 8002020:	4631      	mov	r1, r6
 8002022:	4628      	mov	r0, r5
 8002024:	f7ff fa92 	bl	800154c <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002028:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 800202a:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 800202c:	2301      	movs	r3, #1
 800202e:	4093      	lsls	r3, r2
 8002030:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8002032:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 8002036:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 800203a:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 800203e:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 8002040:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 8002044:	4003      	ands	r3, r0
 8002046:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002048:	431a      	orrs	r2, r3
 800204a:	4631      	mov	r1, r6
 800204c:	4628      	mov	r0, r5
 800204e:	f7ff fab7 	bl	80015c0 <DecodeWriteRegister.isra.0>
      printf("%s.",
 8002052:	6828      	ldr	r0, [r5, #0]
 8002054:	f7fe ffe4 	bl	8001020 <Uncompress>
 8002058:	4601      	mov	r1, r0
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <CmdDecode+0x270>)
 800205c:	f003 fc36 	bl	80058cc <iprintf>
      printf("%s.",
 8002060:	6830      	ldr	r0, [r6, #0]
 8002062:	f7fe ffdd 	bl	8001020 <Uncompress>
 8002066:	4601      	mov	r1, r0
 8002068:	4824      	ldr	r0, [pc, #144]	; (80020fc <CmdDecode+0x270>)
 800206a:	f003 fc2f 	bl	80058cc <iprintf>
      printf("%s (%d) -> (%d)\n",
 800206e:	6838      	ldr	r0, [r7, #0]
 8002070:	f7fe ffd6 	bl	8001020 <Uncompress>
 8002074:	9b00      	ldr	r3, [sp, #0]
 8002076:	4601      	mov	r1, r0
 8002078:	4642      	mov	r2, r8
 800207a:	4821      	ldr	r0, [pc, #132]	; (8002100 <CmdDecode+0x274>)
 800207c:	f003 fc26 	bl	80058cc <iprintf>
      return CmdReturnOk;
 8002080:	e715      	b.n	8001eae <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 8002082:	9a00      	ldr	r2, [sp, #0]
 8002084:	4631      	mov	r1, r6
 8002086:	4628      	mov	r0, r5
 8002088:	f7ff fa9a 	bl	80015c0 <DecodeWriteRegister.isra.0>
    printf("%s.",
 800208c:	6828      	ldr	r0, [r5, #0]
 800208e:	f7fe ffc7 	bl	8001020 <Uncompress>
 8002092:	4601      	mov	r1, r0
 8002094:	4819      	ldr	r0, [pc, #100]	; (80020fc <CmdDecode+0x270>)
 8002096:	f003 fc19 	bl	80058cc <iprintf>
    printf("%s = 0x%08x\n",
 800209a:	6830      	ldr	r0, [r6, #0]
 800209c:	f7fe ffc0 	bl	8001020 <Uncompress>
 80020a0:	9a00      	ldr	r2, [sp, #0]
 80020a2:	4601      	mov	r1, r0
 80020a4:	4817      	ldr	r0, [pc, #92]	; (8002104 <CmdDecode+0x278>)
 80020a6:	f003 fc11 	bl	80058cc <iprintf>
    return CmdReturnOk;
 80020aa:	e700      	b.n	8001eae <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <CmdDecode+0x27c>)
 80020ae:	4620      	mov	r0, r4
 80020b0:	f003 fcb0 	bl	8005a14 <strcasecmp>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	f43f af69 	beq.w	8001f8c <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80020ba:	6828      	ldr	r0, [r5, #0]
 80020bc:	f7fe ffb0 	bl	8001020 <Uncompress>
 80020c0:	4621      	mov	r1, r4
 80020c2:	4602      	mov	r2, r0
 80020c4:	4811      	ldr	r0, [pc, #68]	; (800210c <CmdDecode+0x280>)
 80020c6:	f003 fc01 	bl	80058cc <iprintf>
 80020ca:	e712      	b.n	8001ef2 <CmdDecode+0x66>
 80020cc:	080068df 	.word	0x080068df
 80020d0:	08006af2 	.word	0x08006af2
 80020d4:	0800e99c 	.word	0x0800e99c
 80020d8:	08006b47 	.word	0x08006b47
 80020dc:	08006b82 	.word	0x08006b82
 80020e0:	08006ba7 	.word	0x08006ba7
 80020e4:	08006c10 	.word	0x08006c10
 80020e8:	08006bd6 	.word	0x08006bd6
 80020ec:	08006c4f 	.word	0x08006c4f
 80020f0:	08006c53 	.word	0x08006c53
 80020f4:	08006cb2 	.word	0x08006cb2
 80020f8:	08006c72 	.word	0x08006c72
 80020fc:	08006c9d 	.word	0x08006c9d
 8002100:	08006ca1 	.word	0x08006ca1
 8002104:	08006cd0 	.word	0x08006cd0
 8002108:	08006cdd 	.word	0x08006cdd
 800210c:	08006c12 	.word	0x08006c12

08002110 <PolledPrintf>:
{
 8002110:	b40f      	push	{r0, r1, r2, r3}
 8002112:	b500      	push	{lr}
 8002114:	b097      	sub	sp, #92	; 0x5c
 8002116:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002118:	2150      	movs	r1, #80	; 0x50
{
 800211a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 800211e:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002120:	a802      	add	r0, sp, #8
 8002122:	f003 fcc5 	bl	8005ab0 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <PolledPrintf+0x38>)
  while(len) {
 8002128:	ab02      	add	r3, sp, #8
 800212a:	b928      	cbnz	r0, 8002138 <PolledPrintf+0x28>
}
 800212c:	b017      	add	sp, #92	; 0x5c
 800212e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002132:	b004      	add	sp, #16
 8002134:	4770      	bx	lr
      asm volatile ("nop");
 8002136:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	0609      	lsls	r1, r1, #24
 800213c:	d5fb      	bpl.n	8002136 <PolledPrintf+0x26>
    uart->DR = *p;
 800213e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002142:	6051      	str	r1, [r2, #4]
    len--;
 8002144:	3801      	subs	r0, #1
 8002146:	e7f0      	b.n	800212a <PolledPrintf+0x1a>
 8002148:	40004400 	.word	0x40004400

0800214c <CmdStats>:
{
 800214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002150:	4601      	mov	r1, r0
{
 8002152:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002154:	bb10      	cbnz	r0, 800219c <CmdStats+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002156:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 8002158:	4812      	ldr	r0, [pc, #72]	; (80021a4 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800215a:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 800215c:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8002160:	930b      	str	r3, [sp, #44]	; 0x2c
 8002162:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 8002166:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8002170:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8002172:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002176:	f000 fccf 	bl	8002b18 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 800217a:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 800217c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <CmdStats+0x5c>)
 8002180:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002182:	480a      	ldr	r0, [pc, #40]	; (80021ac <CmdStats+0x60>)
 8002184:	9400      	str	r4, [sp, #0]
 8002186:	e9cd b307 	strd	fp, r3, [sp, #28]
 800218a:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 800218e:	e9cd 7803 	strd	r7, r8, [sp, #12]
 8002192:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <CmdStats+0x64>)
 8002198:	f003 fb98 	bl	80058cc <iprintf>
}
 800219c:	2000      	movs	r0, #0
 800219e:	b00d      	add	sp, #52	; 0x34
 80021a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a4:	20000210 	.word	0x20000210
 80021a8:	08006cea 	.word	0x08006cea
 80021ac:	08006cf2 	.word	0x08006cf2
 80021b0:	08006ce2 	.word	0x08006ce2

080021b4 <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 80021b4:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <USR_LED_Toggle+0x10>)
 80021b6:	6813      	ldr	r3, [r2, #0]
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000020c 	.word	0x2000020c

080021c8 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80021c8:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <_sbrk_r+0x28>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	b90a      	cbnz	r2, 80021d4 <_sbrk_r+0xc>
    heap_end = &end;
 80021d0:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <_sbrk_r+0x2c>)
 80021d2:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 80021d4:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 80021d6:	466a      	mov	r2, sp
 80021d8:	4401      	add	r1, r0
 80021da:	4291      	cmp	r1, r2
 80021dc:	d906      	bls.n	80021ec <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 80021de:	f000 fc71 	bl	8002ac4 <__errno>
 80021e2:	230c      	movs	r3, #12
 80021e4:	6003      	str	r3, [r0, #0]
 80021e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 80021ea:	bd08      	pop	{r3, pc}
  heap_end += incr;
 80021ec:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 80021ee:	e7fc      	b.n	80021ea <_sbrk_r+0x22>
 80021f0:	20000a68 	.word	0x20000a68
 80021f4:	20000bc0 	.word	0x20000bc0

080021f8 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 80021f8:	2000      	movs	r0, #0
 80021fa:	4770      	bx	lr

080021fc <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 80021fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002200:	6053      	str	r3, [r2, #4]
   return 0;
}
 8002202:	2000      	movs	r0, #0
 8002204:	4770      	bx	lr

08002206 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002206:	2001      	movs	r0, #1
 8002208:	4770      	bx	lr

0800220a <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 800220a:	2000      	movs	r0, #0
 800220c:	4770      	bx	lr

0800220e <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 800220e:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8002210:	2000      	movs	r0, #0
 8002212:	461a      	mov	r2, r3
 8002214:	f7fe bede 	b.w	8000fd4 <TerminalRead>

08002218 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 800221c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002254 <_write_r+0x3c>
{
 8002220:	461d      	mov	r5, r3
 8002222:	4614      	mov	r4, r2
 8002224:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8002226:	42bc      	cmp	r4, r7
 8002228:	4626      	mov	r6, r4
 800222a:	d102      	bne.n	8002232 <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 800222c:	4628      	mov	r0, r5
 800222e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8002232:	7833      	ldrb	r3, [r6, #0]
 8002234:	2b0a      	cmp	r3, #10
 8002236:	f104 0401 	add.w	r4, r4, #1
 800223a:	d104      	bne.n	8002246 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 800223c:	2201      	movs	r2, #1
 800223e:	4641      	mov	r1, r8
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff f847 	bl	80012d4 <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8002246:	2201      	movs	r2, #1
 8002248:	4631      	mov	r1, r6
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff f842 	bl	80012d4 <TerminalOutputBufferWrite.isra.0>
    count--;
 8002250:	e7e9      	b.n	8002226 <_write_r+0xe>
 8002252:	bf00      	nop
 8002254:	08007418 	.word	0x08007418

08002258 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800225c:	4770      	bx	lr

0800225e <_exit>:

void _exit(int status)
{
  while(1) {}
 800225e:	e7fe      	b.n	800225e <_exit>

08002260 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8002260:	2000      	movs	r0, #0
 8002262:	4770      	bx	lr

08002264 <USART2_IRQHandler>:
  isr = uart->SR;
 8002264:	4b37      	ldr	r3, [pc, #220]	; (8002344 <USART2_IRQHandler+0xe0>)
 8002266:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002268:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 800226a:	b510      	push	{r4, lr}
 800226c:	d50d      	bpl.n	800228a <USART2_IRQHandler+0x26>
    c = uart->DR;
 800226e:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <USART2_IRQHandler+0xe4>)
 8002272:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002276:	b292      	uxth	r2, r2
 8002278:	3201      	adds	r2, #1
 800227a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800227e:	d339      	bcc.n	80022f4 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 8002280:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002284:	3201      	adds	r2, #1
 8002286:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 800228a:	060a      	lsls	r2, r1, #24
 800228c:	d50a      	bpl.n	80022a4 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <USART2_IRQHandler+0xe4>)
 8002290:	482c      	ldr	r0, [pc, #176]	; (8002344 <USART2_IRQHandler+0xe0>)
 8002292:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002296:	b292      	uxth	r2, r2
 8002298:	2a00      	cmp	r2, #0
 800229a:	d140      	bne.n	800231e <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 800229c:	68c3      	ldr	r3, [r0, #12]
 800229e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a2:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 80022a4:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 80022a6:	bf41      	itttt	mi
 80022a8:	4a26      	ldrmi	r2, [pc, #152]	; (8002344 <USART2_IRQHandler+0xe0>)
 80022aa:	68d3      	ldrmi	r3, [r2, #12]
 80022ac:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 80022b0:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 80022b2:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 80022b4:	bf41      	itttt	mi
 80022b6:	4a24      	ldrmi	r2, [pc, #144]	; (8002348 <USART2_IRQHandler+0xe4>)
 80022b8:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 80022bc:	3301      	addmi	r3, #1
 80022be:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 80022c2:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 80022c4:	bf41      	itttt	mi
 80022c6:	4a20      	ldrmi	r2, [pc, #128]	; (8002348 <USART2_IRQHandler+0xe4>)
 80022c8:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 80022cc:	3301      	addmi	r3, #1
 80022ce:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 80022d2:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 80022d4:	bf41      	itttt	mi
 80022d6:	4a1c      	ldrmi	r2, [pc, #112]	; (8002348 <USART2_IRQHandler+0xe4>)
 80022d8:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 80022dc:	3301      	addmi	r3, #1
 80022de:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 80022e2:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 80022e4:	bf41      	itttt	mi
 80022e6:	4a18      	ldrmi	r2, [pc, #96]	; (8002348 <USART2_IRQHandler+0xe4>)
 80022e8:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 80022ec:	3301      	addmi	r3, #1
 80022ee:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 80022f2:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 80022f4:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 80022f8:	3201      	adds	r2, #1
 80022fa:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 80022fe:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002302:	b292      	uxth	r2, r2
    c = uart->DR;
 8002304:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002306:	3201      	adds	r2, #1
 8002308:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800230c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 8002310:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002314:	3201      	adds	r2, #1
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800231c:	e7b5      	b.n	800228a <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 800231e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8002322:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 8002326:	3201      	adds	r2, #1
      uart->DR = c;
 8002328:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 800232c:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 800232e:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 8002332:	3801      	subs	r0, #1
 8002334:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 8002336:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 800233a:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 800233e:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8002342:	e7af      	b.n	80022a4 <USART2_IRQHandler+0x40>
 8002344:	40004400 	.word	0x40004400
 8002348:	20000210 	.word	0x20000210

0800234c <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 800234c:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002350:	490d      	ldr	r1, [pc, #52]	; (8002388 <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 8002352:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <Default_IRQHandler+0x40>)
 8002356:	f7ff fedb 	bl	8002110 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 800235a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 800235e:	480c      	ldr	r0, [pc, #48]	; (8002390 <Default_IRQHandler+0x44>)
 8002360:	f7ff fed6 	bl	8002110 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8002364:	480b      	ldr	r0, [pc, #44]	; (8002394 <Default_IRQHandler+0x48>)
 8002366:	f1a4 0110 	sub.w	r1, r4, #16
 800236a:	f7ff fed1 	bl	8002110 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <Default_IRQHandler+0x4c>)
 8002370:	480a      	ldr	r0, [pc, #40]	; (800239c <Default_IRQHandler+0x50>)
 8002372:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002376:	f7ff fecb 	bl	8002110 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <Default_IRQHandler+0x54>)
 800237c:	f7ff fec8 	bl	8002110 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8002380:	e7fe      	b.n	8002380 <Default_IRQHandler+0x34>
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	08011fca 	.word	0x08011fca
 800238c:	08006dcf 	.word	0x08006dcf
 8002390:	08006e06 	.word	0x08006e06
 8002394:	08006e42 	.word	0x08006e42
 8002398:	0800c860 	.word	0x0800c860
 800239c:	08006e6b 	.word	0x08006e6b
 80023a0:	08006e86 	.word	0x08006e86

080023a4 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a6:	4c6a      	ldr	r4, [pc, #424]	; (8002550 <main+0x1ac>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ae:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80023b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4f67      	ldr	r7, [pc, #412]	; (8002554 <main+0x1b0>)
 80023b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023bc:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 80023c8:	4b63      	ldr	r3, [pc, #396]	; (8002558 <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 80023ce:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 80023d0:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80023d2:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d4:	2000      	movs	r0, #0
 80023d6:	b093      	sub	sp, #76	; 0x4c
 80023d8:	f7fe ff54 	bl	8001284 <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	4b5f      	ldr	r3, [pc, #380]	; (800255c <main+0x1b8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	920a      	str	r2, [sp, #40]	; 0x28
 80023e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80023e8:	6459      	str	r1, [r3, #68]	; 0x44
 80023ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023ec:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80023f0:	910a      	str	r1, [sp, #40]	; 0x28
 80023f2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	9209      	str	r2, [sp, #36]	; 0x24
 80023f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80023fc:	6419      	str	r1, [r3, #64]	; 0x40
 80023fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002400:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002404:	9109      	str	r1, [sp, #36]	; 0x24
 8002406:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 800240a:	4955      	ldr	r1, [pc, #340]	; (8002560 <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240c:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 800240e:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 8002410:	60e1      	str	r1, [r4, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	9208      	str	r2, [sp, #32]
 8002414:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002416:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800241a:	6419      	str	r1, [r3, #64]	; 0x40
 800241c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800241e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002422:	9108      	str	r1, [sp, #32]
 8002424:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002426:	9207      	str	r2, [sp, #28]
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <main+0x1c0>)
 800242a:	6811      	ldr	r1, [r2, #0]
 800242c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002430:	6011      	str	r1, [r2, #0]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002438:	9207      	str	r2, [sp, #28]
 800243a:	9a07      	ldr	r2, [sp, #28]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	f002 020c 	and.w	r2, r2, #12
 8002442:	2a04      	cmp	r2, #4
 8002444:	d007      	beq.n	8002456 <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244c:	2a08      	cmp	r2, #8
 800244e:	d13c      	bne.n	80024ca <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	0254      	lsls	r4, r2, #9
 8002454:	d539      	bpl.n	80024ca <main+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <main+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b43      	ldr	r3, [pc, #268]	; (8002568 <main+0x1c4>)
 800245c:	2201      	movs	r2, #1
 800245e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002462:	6839      	ldr	r1, [r7, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002464:	4b3d      	ldr	r3, [pc, #244]	; (800255c <main+0x1b8>)
 8002466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002468:	0792      	lsls	r2, r2, #30
 800246a:	d541      	bpl.n	80024f0 <main+0x14c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	f002 020c 	and.w	r2, r2, #12
 8002472:	2a08      	cmp	r2, #8
 8002474:	d04b      	beq.n	800250e <main+0x16a>
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <main+0x1c4>)
 8002478:	2200      	movs	r2, #0
 800247a:	661a      	str	r2, [r3, #96]	; 0x60
 800247c:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4a37      	ldr	r2, [pc, #220]	; (800255c <main+0x1b8>)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	019e      	lsls	r6, r3, #6
 8002484:	d439      	bmi.n	80024fa <main+0x156>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <main+0x1c8>)
 8002488:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <main+0x1c4>)
 800248c:	2201      	movs	r2, #1
 800248e:	661a      	str	r2, [r3, #96]	; 0x60
 8002490:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4a32      	ldr	r2, [pc, #200]	; (800255c <main+0x1b8>)
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	019d      	lsls	r5, r3, #6
 8002498:	d534      	bpl.n	8002504 <main+0x160>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <main+0x1a8>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	f002 0207 	and.w	r2, r2, #7
 80024a2:	2a02      	cmp	r2, #2
 80024a4:	d949      	bls.n	800253a <main+0x196>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a6:	492d      	ldr	r1, [pc, #180]	; (800255c <main+0x1b8>)
 80024a8:	688b      	ldr	r3, [r1, #8]
 80024aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ae:	608b      	str	r3, [r1, #8]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	688b      	ldr	r3, [r1, #8]
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b6:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	688b      	ldr	r3, [r1, #8]
 80024ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024be:	608b      	str	r3, [r1, #8]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	680b      	ldr	r3, [r1, #0]
 80024c2:	0198      	lsls	r0, r3, #6
 80024c4:	d454      	bmi.n	8002570 <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 80024c6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <main+0x1b8>)
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	0398      	lsls	r0, r3, #14
 80024e2:	d4ba      	bmi.n	800245a <main+0xb6>
 80024e4:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e6:	1a5b      	subs	r3, r3, r1
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d9f8      	bls.n	80024de <main+0x13a>
 80024ec:	b672      	cpsid	i
 80024ee:	e7fe      	b.n	80024ee <main+0x14a>
 80024f0:	683a      	ldr	r2, [r7, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	2a02      	cmp	r2, #2
 80024f6:	d9b6      	bls.n	8002466 <main+0xc2>
 80024f8:	e7f8      	b.n	80024ec <main+0x148>
 80024fa:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	1a5b      	subs	r3, r3, r1
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d9be      	bls.n	8002480 <main+0xdc>
 8002502:	e7f3      	b.n	80024ec <main+0x148>
 8002504:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	1a5b      	subs	r3, r3, r1
 8002508:	2b02      	cmp	r3, #2
 800250a:	d9c3      	bls.n	8002494 <main+0xf0>
 800250c:	e7ee      	b.n	80024ec <main+0x148>
        pll_config = RCC->PLLCFGR;
 800250e:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002510:	025c      	lsls	r4, r3, #9
 8002512:	d5eb      	bpl.n	80024ec <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	2a04      	cmp	r2, #4
 800251a:	d1e7      	bne.n	80024ec <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002520:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002522:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 8002526:	d1e1      	bne.n	80024ec <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002528:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800252c:	d1de      	bne.n	80024ec <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800252e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002536:	d1d9      	bne.n	80024ec <main+0x148>
 8002538:	e7af      	b.n	800249a <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	2203      	movs	r2, #3
 800253c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4293      	cmp	r3, r2
 8002546:	d1be      	bne.n	80024c6 <main+0x122>
 8002548:	e7ad      	b.n	80024a6 <main+0x102>
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00
 8002550:	e000ed00 	.word	0xe000ed00
 8002554:	20000ba8 	.word	0x20000ba8
 8002558:	05fa0300 	.word	0x05fa0300
 800255c:	40023800 	.word	0x40023800
 8002560:	05fa0700 	.word	0x05fa0700
 8002564:	40007000 	.word	0x40007000
 8002568:	42470000 	.word	0x42470000
 800256c:	04401904 	.word	0x04401904
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002570:	688b      	ldr	r3, [r1, #8]
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0302 	orr.w	r3, r3, #2
 800257a:	608b      	str	r3, [r1, #8]
 800257c:	683a      	ldr	r2, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	688b      	ldr	r3, [r1, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	f040 81c9 	bne.w	8002920 <main+0x57c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800258e:	4bb5      	ldr	r3, [pc, #724]	; (8002864 <main+0x4c0>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	0752      	lsls	r2, r2, #29
 8002594:	f100 81ca 	bmi.w	800292c <main+0x588>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	688b      	ldr	r3, [r1, #8]
 800259a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800259e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a2:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a4:	688b      	ldr	r3, [r1, #8]
 80025a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025aa:	608b      	str	r3, [r1, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ac:	688b      	ldr	r3, [r1, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	f000 81de 	beq.w	8002974 <main+0x5d0>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	f000 81c0 	beq.w	800293e <main+0x59a>
      sysclockfreq = HSI_VALUE;
 80025be:	4daa      	ldr	r5, [pc, #680]	; (8002868 <main+0x4c4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c0:	4eaa      	ldr	r6, [pc, #680]	; (800286c <main+0x4c8>)
 80025c2:	4aab      	ldr	r2, [pc, #684]	; (8002870 <main+0x4cc>)
 80025c4:	68b3      	ldr	r3, [r6, #8]
 80025c6:	4cab      	ldr	r4, [pc, #684]	; (8002874 <main+0x4d0>)
  huart2.Init.BaudRate = 115200;
 80025c8:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 80028a4 <main+0x500>
 80025cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f04f 0800 	mov.w	r8, #0
 80025d4:	5cd0      	ldrb	r0, [r2, r3]
 80025d6:	4ba8      	ldr	r3, [pc, #672]	; (8002878 <main+0x4d4>)
 80025d8:	40c5      	lsrs	r5, r0
 80025da:	601d      	str	r5, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80025dc:	4ba7      	ldr	r3, [pc, #668]	; (800287c <main+0x4d8>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	f7fe fe50 	bl	8001284 <HAL_InitTick.isra.0>
 80025e4:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025f2:	48a3      	ldr	r0, [pc, #652]	; (8002880 <main+0x4dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6333      	str	r3, [r6, #48]	; 0x30
 80025fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	9306      	str	r3, [sp, #24]
 8002602:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002604:	f8cd 8014 	str.w	r8, [sp, #20]
 8002608:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800260a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260e:	6333      	str	r3, [r6, #48]	; 0x30
 8002610:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	9305      	str	r3, [sp, #20]
 8002618:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	f8cd 8010 	str.w	r8, [sp, #16]
 800261e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6333      	str	r3, [r6, #48]	; 0x30
 8002626:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	9304      	str	r3, [sp, #16]
 800262e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002630:	f8cd 800c 	str.w	r8, [sp, #12]
 8002634:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	6333      	str	r3, [r6, #48]	; 0x30
 800263c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	9303      	str	r3, [sp, #12]
 8002644:	9b03      	ldr	r3, [sp, #12]
 8002646:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800264a:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800264c:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8002650:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002654:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002656:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800265a:	f7fe fd1f 	bl	800109c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265e:	2301      	movs	r3, #1
 8002660:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002664:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 8002666:	4c87      	ldr	r4, [pc, #540]	; (8002884 <main+0x4e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002670:	f7fe fd14 	bl	800109c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002674:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002678:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800267c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 8002680:	f8c4 8010 	str.w	r8, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002684:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002686:	e9c4 8802 	strd	r8, r8, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	e9c4 2805 	strd	r2, r8, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800268e:	f8c4 801c 	str.w	r8, [r4, #28]
 8002692:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002696:	bb4b      	cbnz	r3, 80026ec <main+0x348>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002698:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269c:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 80026a4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80026a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026aa:	6433      	str	r3, [r6, #64]	; 0x40
 80026ac:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	930c      	str	r3, [sp, #48]	; 0x30
 80026b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80026ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6333      	str	r3, [r6, #48]	; 0x30
 80026c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026c4:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80026cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d2:	2603      	movs	r6, #3
 80026d4:	2307      	movs	r3, #7
 80026d6:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f7fe fcdf 	bl	800109c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026de:	4641      	mov	r1, r8
 80026e0:	2026      	movs	r0, #38	; 0x26
 80026e2:	f7fe fda3 	bl	800122c <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e6:	4b68      	ldr	r3, [pc, #416]	; (8002888 <main+0x4e4>)
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	605a      	str	r2, [r3, #4]
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ec:	6826      	ldr	r6, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ee:	68e2      	ldr	r2, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80026f0:	2324      	movs	r3, #36	; 0x24
 80026f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80026f6:	68f3      	ldr	r3, [r6, #12]
 80026f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026fc:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fe:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002700:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002702:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002706:	4313      	orrs	r3, r2
 8002708:	6133      	str	r3, [r6, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800270a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800270c:	68f1      	ldr	r1, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800270e:	69e2      	ldr	r2, [r4, #28]
 8002710:	4303      	orrs	r3, r0
 8002712:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002714:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002718:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800271a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8002720:	430b      	orrs	r3, r1
 8002722:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002724:	6973      	ldr	r3, [r6, #20]
 8002726:	69a1      	ldr	r1, [r4, #24]
 8002728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272c:	430b      	orrs	r3, r1
 800272e:	6173      	str	r3, [r6, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <main+0x4e8>)
 8002732:	4957      	ldr	r1, [pc, #348]	; (8002890 <main+0x4ec>)
 8002734:	429e      	cmp	r6, r3
 8002736:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	d003      	beq.n	8002746 <main+0x3a2>
 800273e:	4855      	ldr	r0, [pc, #340]	; (8002894 <main+0x4f0>)
 8002740:	4286      	cmp	r6, r0
 8002742:	f040 8119 	bne.w	8002978 <main+0x5d4>
 8002746:	f3c3 3342 	ubfx	r3, r3, #13, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800274a:	5cc9      	ldrb	r1, [r1, r3]
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800274c:	6863      	ldr	r3, [r4, #4]
 800274e:	40cd      	lsrs	r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002750:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002754:	f04f 0119 	mov.w	r1, #25
 8002758:	fba5 0101 	umull	r0, r1, r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275c:	f040 810f 	bne.w	800297e <main+0x5da>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002760:	18da      	adds	r2, r3, r3
 8002762:	f04f 0500 	mov.w	r5, #0
 8002766:	eb45 0305 	adc.w	r3, r5, r5
 800276a:	f7fe fa45 	bl	8000bf8 <__aeabi_uldivmod>
 800276e:	2164      	movs	r1, #100	; 0x64
 8002770:	fbb0 f5f1 	udiv	r5, r0, r1
 8002774:	fb01 0315 	mls	r3, r1, r5, r0
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002780:	f003 0207 	and.w	r2, r3, #7
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800278a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800278e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002790:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	6933      	ldr	r3, [r6, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002794:	4a40      	ldr	r2, [pc, #256]	; (8002898 <main+0x4f4>)
 8002796:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800279a:	6133      	str	r3, [r6, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279c:	6973      	ldr	r3, [r6, #20]
 800279e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80027a2:	6173      	str	r3, [r6, #20]
  __HAL_UART_ENABLE(huart);
 80027a4:	68f3      	ldr	r3, [r6, #12]
 80027a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027aa:	60f3      	str	r3, [r6, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	6423      	str	r3, [r4, #64]	; 0x40
  hiwdg.Instance = IWDG;
 80027b0:	4e3a      	ldr	r6, [pc, #232]	; (800289c <main+0x4f8>)
  huart->gState = HAL_UART_STATE_READY;
 80027b2:	2320      	movs	r3, #32
 80027b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80027b8:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  __HAL_IWDG_START(hiwdg);
 80027be:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 80027c2:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80027c6:	e9c6 2100 	strd	r2, r1, [r6]
  hiwdg.Init.Reload = 4095;
 80027ca:	60b3      	str	r3, [r6, #8]
 80027cc:	6010      	str	r0, [r2, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80027ce:	f245 5055 	movw	r0, #21845	; 0x5555
 80027d2:	6010      	str	r0, [r2, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80027d4:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80027d6:	6093      	str	r3, [r2, #8]
 80027d8:	6839      	ldr	r1, [r7, #0]
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027da:	68d3      	ldr	r3, [r2, #12]
 80027dc:	f013 0303 	ands.w	r3, r3, #3
 80027e0:	f040 80dd 	bne.w	800299e <main+0x5fa>
  setvbuf(stdin, NULL, _IONBF, 0);
 80027e4:	4c2e      	ldr	r4, [pc, #184]	; (80028a0 <main+0x4fc>)
 80027e6:	6820      	ldr	r0, [r4, #0]
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027e8:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 80027ec:	6011      	str	r1, [r2, #0]
 80027ee:	6840      	ldr	r0, [r0, #4]
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	4619      	mov	r1, r3
 80027f4:	2202      	movs	r2, #2
 80027f6:	f000 fe01 	bl	80033fc <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	6880      	ldr	r0, [r0, #8]
 8002800:	4619      	mov	r1, r3
 8002802:	2202      	movs	r2, #2
 8002804:	f000 fdfa 	bl	80033fc <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	68c0      	ldr	r0, [r0, #12]
 800280e:	2202      	movs	r2, #2
 8002810:	4619      	mov	r1, r3
 8002812:	f000 fdf3 	bl	80033fc <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <main+0x500>)
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800281e:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8002828:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800282c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 800282e:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8002832:	d052      	beq.n	80028da <main+0x536>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8002834:	481c      	ldr	r0, [pc, #112]	; (80028a8 <main+0x504>)
 8002836:	f003 f8e5 	bl	8005a04 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 800283a:	2c00      	cmp	r4, #0
 800283c:	da02      	bge.n	8002844 <main+0x4a0>
 800283e:	481b      	ldr	r0, [pc, #108]	; (80028ac <main+0x508>)
 8002840:	f003 f8e0 	bl	8005a04 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8002844:	0067      	lsls	r7, r4, #1
 8002846:	d502      	bpl.n	800284e <main+0x4aa>
 8002848:	4819      	ldr	r0, [pc, #100]	; (80028b0 <main+0x50c>)
 800284a:	f003 f8db 	bl	8005a04 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 800284e:	00a5      	lsls	r5, r4, #2
 8002850:	d502      	bpl.n	8002858 <main+0x4b4>
 8002852:	4818      	ldr	r0, [pc, #96]	; (80028b4 <main+0x510>)
 8002854:	f003 f8d6 	bl	8005a04 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8002858:	00e0      	lsls	r0, r4, #3
 800285a:	d52f      	bpl.n	80028bc <main+0x518>
 800285c:	4816      	ldr	r0, [pc, #88]	; (80028b8 <main+0x514>)
 800285e:	f003 f8d1 	bl	8005a04 <puts>
 8002862:	e02b      	b.n	80028bc <main+0x518>
 8002864:	40023c00 	.word	0x40023c00
 8002868:	00f42400 	.word	0x00f42400
 800286c:	40023800 	.word	0x40023800
 8002870:	08009db8 	.word	0x08009db8
 8002874:	40020000 	.word	0x40020000
 8002878:	20000004 	.word	0x20000004
 800287c:	20000014 	.word	0x20000014
 8002880:	40020800 	.word	0x40020800
 8002884:	20000a78 	.word	0x20000a78
 8002888:	e000e100 	.word	0xe000e100
 800288c:	40011000 	.word	0x40011000
 8002890:	08009dc8 	.word	0x08009dc8
 8002894:	40011400 	.word	0x40011400
 8002898:	40003000 	.word	0x40003000
 800289c:	20000a6c 	.word	0x20000a6c
 80028a0:	20000018 	.word	0x20000018
 80028a4:	40004400 	.word	0x40004400
 80028a8:	08006eb0 	.word	0x08006eb0
 80028ac:	08006ee8 	.word	0x08006ee8
 80028b0:	08006ef3 	.word	0x08006ef3
 80028b4:	08006f06 	.word	0x08006f06
 80028b8:	08006f25 	.word	0x08006f25
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 80028bc:	01a1      	lsls	r1, r4, #6
 80028be:	d502      	bpl.n	80028c6 <main+0x522>
 80028c0:	484f      	ldr	r0, [pc, #316]	; (8002a00 <main+0x65c>)
 80028c2:	f003 f89f 	bl	8005a04 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 80028c6:	0162      	lsls	r2, r4, #5
 80028c8:	d502      	bpl.n	80028d0 <main+0x52c>
 80028ca:	484e      	ldr	r0, [pc, #312]	; (8002a04 <main+0x660>)
 80028cc:	f003 f89a 	bl	8005a04 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 80028d0:	0123      	lsls	r3, r4, #4
 80028d2:	d502      	bpl.n	80028da <main+0x536>
 80028d4:	484c      	ldr	r0, [pc, #304]	; (8002a08 <main+0x664>)
 80028d6:	f003 f895 	bl	8005a04 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <main+0x668>)
 80028dc:	4d4c      	ldr	r5, [pc, #304]	; (8002a10 <main+0x66c>)
  p = _tasktable_start;
 80028de:	4c4d      	ldr	r4, [pc, #308]	; (8002a14 <main+0x670>)
  while(p != _tasktable_end) {
 80028e0:	4f4d      	ldr	r7, [pc, #308]	; (8002a18 <main+0x674>)
 80028e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e6:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 80028e8:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 80028ec:	42bc      	cmp	r4, r7
 80028ee:	d161      	bne.n	80029b4 <main+0x610>
  my_Init();
 80028f0:	f7fd fc8c 	bl	800020c <my_Init>
  ticks = AccumTicks;
 80028f4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002a24 <main+0x680>
  AccumTicks = 0;
 80028f8:	f04f 0a00 	mov.w	sl, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80028fc:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 8002900:	b672      	cpsid	i
  ticks = AccumTicks;
 8002902:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 8002906:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 800290a:	b662      	cpsie	i
  s = _taskstate_start;
 800290c:	4d40      	ldr	r5, [pc, #256]	; (8002a10 <main+0x66c>)
  p = _tasktable_start;
 800290e:	4c41      	ldr	r4, [pc, #260]	; (8002a14 <main+0x670>)
  while(p != _tasktable_end) {
 8002910:	42bc      	cmp	r4, r7
 8002912:	d157      	bne.n	80029c4 <main+0x620>
  my_Loop();
 8002914:	f7fd fc78 	bl	8000208 <my_Loop>
 8002918:	6833      	ldr	r3, [r6, #0]
 800291a:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 800291e:	e7ef      	b.n	8002900 <main+0x55c>
 8002920:	683b      	ldr	r3, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	4283      	cmp	r3, r0
 8002926:	f67f ae2c 	bls.w	8002582 <main+0x1de>
 800292a:	e5cc      	b.n	80024c6 <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292c:	2203      	movs	r2, #3
 800292e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	4293      	cmp	r3, r2
 8002938:	f47f adc5 	bne.w	80024c6 <main+0x122>
 800293c:	e62c      	b.n	8002598 <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800293e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002940:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002944:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002948:	bf14      	ite	ne
 800294a:	4834      	ldrne	r0, [pc, #208]	; (8002a1c <main+0x678>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4834      	ldreq	r0, [pc, #208]	; (8002a20 <main+0x67c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002952:	bf18      	it	ne
 8002954:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002956:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295a:	fba1 0100 	umull	r0, r1, r1, r0
 800295e:	f7fe f94b 	bl	8000bf8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <main+0x668>)
 8002964:	685d      	ldr	r5, [r3, #4]
 8002966:	f3c5 4501 	ubfx	r5, r5, #16, #2
 800296a:	3501      	adds	r5, #1
 800296c:	006d      	lsls	r5, r5, #1
      sysclockfreq = pllvco/pllp;
 800296e:	fbb0 f5f5 	udiv	r5, r0, r5
  return sysclockfreq;
 8002972:	e625      	b.n	80025c0 <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002974:	4d29      	ldr	r5, [pc, #164]	; (8002a1c <main+0x678>)
 8002976:	e623      	b.n	80025c0 <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002978:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800297c:	e6e5      	b.n	800274a <main+0x3a6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	0f9b      	lsrs	r3, r3, #30
 8002982:	f7fe f939 	bl	8000bf8 <__aeabi_uldivmod>
 8002986:	2264      	movs	r2, #100	; 0x64
 8002988:	fbb0 f1f2 	udiv	r1, r0, r2
 800298c:	fb02 0311 	mls	r3, r2, r1, r0
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	3332      	adds	r3, #50	; 0x32
 8002994:	fbb3 f3f2 	udiv	r3, r3, r2
 8002998:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800299c:	e6f8      	b.n	8002790 <main+0x3ec>
 800299e:	683b      	ldr	r3, [r7, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80029a0:	1a5b      	subs	r3, r3, r1
 80029a2:	2b31      	cmp	r3, #49	; 0x31
 80029a4:	f67f af19 	bls.w	80027da <main+0x436>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80029a8:	68d3      	ldr	r3, [r2, #12]
 80029aa:	079b      	lsls	r3, r3, #30
 80029ac:	f43f af15 	beq.w	80027da <main+0x436>
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <main+0x60e>
    if(p->initFunc != NULL) {
 80029b4:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 80029b6:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 80029ba:	b10b      	cbz	r3, 80029c0 <main+0x61c>
      p->initFunc(p->data);
 80029bc:	68e0      	ldr	r0, [r4, #12]
 80029be:	4798      	blx	r3
    p++;
 80029c0:	3418      	adds	r4, #24
    s++;
 80029c2:	e793      	b.n	80028ec <main+0x548>
    if(p->func != NULL) {
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	b11b      	cbz	r3, 80029d0 <main+0x62c>
      if(p->interval == 0) {
 80029c8:	6922      	ldr	r2, [r4, #16]
 80029ca:	b9b2      	cbnz	r2, 80029fa <main+0x656>
	p->func(p->data);
 80029cc:	68e0      	ldr	r0, [r4, #12]
 80029ce:	4798      	blx	r3
    p++;
 80029d0:	3418      	adds	r4, #24
    s++;
 80029d2:	3504      	adds	r5, #4
 80029d4:	e79c      	b.n	8002910 <main+0x56c>
	  if(s->interval) {
 80029d6:	682b      	ldr	r3, [r5, #0]
 80029d8:	b953      	cbnz	r3, 80029f0 <main+0x64c>
	    p->func(p->data);
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	68e0      	ldr	r0, [r4, #12]
 80029de:	9201      	str	r2, [sp, #4]
 80029e0:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 80029e2:	6923      	ldr	r3, [r4, #16]
 80029e4:	9a01      	ldr	r2, [sp, #4]
 80029e6:	602b      	str	r3, [r5, #0]
 80029e8:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 80029ea:	2a00      	cmp	r2, #0
 80029ec:	d1f3      	bne.n	80029d6 <main+0x632>
 80029ee:	e7ef      	b.n	80029d0 <main+0x62c>
	    s->interval--;
 80029f0:	3b01      	subs	r3, #1
 80029f2:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f7      	bne.n	80029e8 <main+0x644>
 80029f8:	e7ef      	b.n	80029da <main+0x636>
 80029fa:	465a      	mov	r2, fp
 80029fc:	e7f5      	b.n	80029ea <main+0x646>
 80029fe:	bf00      	nop
 8002a00:	08006f2f 	.word	0x08006f2f
 8002a04:	08006f39 	.word	0x08006f39
 8002a08:	08006f43 	.word	0x08006f43
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	200001e8 	.word	0x200001e8
 8002a14:	08012478 	.word	0x08012478
 8002a18:	08012490 	.word	0x08012490
 8002a1c:	007a1200 	.word	0x007a1200
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	20000208 	.word	0x20000208

08002a28 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <NMI_Handler>

08002a2a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <HardFault_Handler>

08002a2c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <MemManage_Handler>

08002a2e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <BusFault_Handler>

08002a30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <UsageFault_Handler>

08002a32 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a32:	4770      	bx	lr

08002a34 <DebugMon_Handler>:
 8002a34:	4770      	bx	lr

08002a36 <PendSV_Handler>:
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8002a38:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3a:	b508      	push	{r3, lr}
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 8002a42:	f7fd fbd7 	bl	80001f4 <my_Tick>
  AccumTicks++;
 8002a46:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <SysTick_Handler+0x1c>)
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002a4e:	bd08      	pop	{r3, pc}
 8002a50:	20000ba8 	.word	0x20000ba8
 8002a54:	20000208 	.word	0x20000208

08002a58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <SystemInit+0x10>)
 8002a5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a70:	480d      	ldr	r0, [pc, #52]	; (8002aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a72:	490e      	ldr	r1, [pc, #56]	; (8002aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a74:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a78:	e002      	b.n	8002a80 <LoopCopyDataInit>

08002a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7e:	3304      	adds	r3, #4

08002a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a84:	d3f9      	bcc.n	8002a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a88:	4c0b      	ldr	r4, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a8c:	e001      	b.n	8002a92 <LoopFillZerobss>

08002a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a90:	3204      	adds	r2, #4

08002a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a94:	d3fb      	bcc.n	8002a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a96:	f7ff ffdf 	bl	8002a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f000 f819 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9e:	f7ff fc81 	bl	80023a4 <main>
  bx  lr    
 8002aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aac:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002ab0:	0801256c 	.word	0x0801256c
  ldr r2, =_sbss
 8002ab4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002ab8:	20000bbc 	.word	0x20000bbc

08002abc <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 8002abc:	f7ff fc46 	bl	800234c <Default_IRQHandler>
  b  Infinite_Loop
 8002ac0:	e7fc      	b.n	8002abc <ADC_IRQHandler>
	...

08002ac4 <__errno>:
 8002ac4:	4b01      	ldr	r3, [pc, #4]	; (8002acc <__errno+0x8>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000018 	.word	0x20000018

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	4d0d      	ldr	r5, [pc, #52]	; (8002b08 <__libc_init_array+0x38>)
 8002ad4:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad6:	1b64      	subs	r4, r4, r5
 8002ad8:	10a4      	asrs	r4, r4, #2
 8002ada:	2600      	movs	r6, #0
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	4d0b      	ldr	r5, [pc, #44]	; (8002b10 <__libc_init_array+0x40>)
 8002ae2:	4c0c      	ldr	r4, [pc, #48]	; (8002b14 <__libc_init_array+0x44>)
 8002ae4:	f003 f996 	bl	8005e14 <_init>
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	2600      	movs	r6, #0
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08012564 	.word	0x08012564
 8002b0c:	08012564 	.word	0x08012564
 8002b10:	08012564 	.word	0x08012564
 8002b14:	08012568 	.word	0x08012568

08002b18 <memset>:
 8002b18:	4402      	add	r2, r0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	f803 1b01 	strb.w	r1, [r3], #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <__cvt>:
 8002b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b2c:	ec55 4b10 	vmov	r4, r5, d0
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	460e      	mov	r6, r1
 8002b34:	4619      	mov	r1, r3
 8002b36:	462b      	mov	r3, r5
 8002b38:	bfbb      	ittet	lt
 8002b3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002b3e:	461d      	movlt	r5, r3
 8002b40:	2300      	movge	r3, #0
 8002b42:	232d      	movlt	r3, #45	; 0x2d
 8002b44:	700b      	strb	r3, [r1, #0]
 8002b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002b4c:	4691      	mov	r9, r2
 8002b4e:	f023 0820 	bic.w	r8, r3, #32
 8002b52:	bfbc      	itt	lt
 8002b54:	4622      	movlt	r2, r4
 8002b56:	4614      	movlt	r4, r2
 8002b58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b5c:	d005      	beq.n	8002b6a <__cvt+0x42>
 8002b5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b62:	d100      	bne.n	8002b66 <__cvt+0x3e>
 8002b64:	3601      	adds	r6, #1
 8002b66:	2102      	movs	r1, #2
 8002b68:	e000      	b.n	8002b6c <__cvt+0x44>
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	ab03      	add	r3, sp, #12
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	ab02      	add	r3, sp, #8
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	ec45 4b10 	vmov	d0, r4, r5
 8002b78:	4653      	mov	r3, sl
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	f000 ff14 	bl	80039a8 <_dtoa_r>
 8002b80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b84:	4607      	mov	r7, r0
 8002b86:	d102      	bne.n	8002b8e <__cvt+0x66>
 8002b88:	f019 0f01 	tst.w	r9, #1
 8002b8c:	d022      	beq.n	8002bd4 <__cvt+0xac>
 8002b8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b92:	eb07 0906 	add.w	r9, r7, r6
 8002b96:	d110      	bne.n	8002bba <__cvt+0x92>
 8002b98:	783b      	ldrb	r3, [r7, #0]
 8002b9a:	2b30      	cmp	r3, #48	; 0x30
 8002b9c:	d10a      	bne.n	8002bb4 <__cvt+0x8c>
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd ffb7 	bl	8000b18 <__aeabi_dcmpeq>
 8002baa:	b918      	cbnz	r0, 8002bb4 <__cvt+0x8c>
 8002bac:	f1c6 0601 	rsb	r6, r6, #1
 8002bb0:	f8ca 6000 	str.w	r6, [sl]
 8002bb4:	f8da 3000 	ldr.w	r3, [sl]
 8002bb8:	4499      	add	r9, r3
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd ffa9 	bl	8000b18 <__aeabi_dcmpeq>
 8002bc6:	b108      	cbz	r0, 8002bcc <__cvt+0xa4>
 8002bc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002bcc:	2230      	movs	r2, #48	; 0x30
 8002bce:	9b03      	ldr	r3, [sp, #12]
 8002bd0:	454b      	cmp	r3, r9
 8002bd2:	d307      	bcc.n	8002be4 <__cvt+0xbc>
 8002bd4:	9b03      	ldr	r3, [sp, #12]
 8002bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bd8:	1bdb      	subs	r3, r3, r7
 8002bda:	4638      	mov	r0, r7
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	b004      	add	sp, #16
 8002be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be4:	1c59      	adds	r1, r3, #1
 8002be6:	9103      	str	r1, [sp, #12]
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e7f0      	b.n	8002bce <__cvt+0xa6>

08002bec <__exponent>:
 8002bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	bfb8      	it	lt
 8002bf4:	4249      	neglt	r1, r1
 8002bf6:	f803 2b02 	strb.w	r2, [r3], #2
 8002bfa:	bfb4      	ite	lt
 8002bfc:	222d      	movlt	r2, #45	; 0x2d
 8002bfe:	222b      	movge	r2, #43	; 0x2b
 8002c00:	2909      	cmp	r1, #9
 8002c02:	7042      	strb	r2, [r0, #1]
 8002c04:	dd2a      	ble.n	8002c5c <__exponent+0x70>
 8002c06:	f10d 0407 	add.w	r4, sp, #7
 8002c0a:	46a4      	mov	ip, r4
 8002c0c:	270a      	movs	r7, #10
 8002c0e:	46a6      	mov	lr, r4
 8002c10:	460a      	mov	r2, r1
 8002c12:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c16:	fb07 1516 	mls	r5, r7, r6, r1
 8002c1a:	3530      	adds	r5, #48	; 0x30
 8002c1c:	2a63      	cmp	r2, #99	; 0x63
 8002c1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002c22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c26:	4631      	mov	r1, r6
 8002c28:	dcf1      	bgt.n	8002c0e <__exponent+0x22>
 8002c2a:	3130      	adds	r1, #48	; 0x30
 8002c2c:	f1ae 0502 	sub.w	r5, lr, #2
 8002c30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c34:	1c44      	adds	r4, r0, #1
 8002c36:	4629      	mov	r1, r5
 8002c38:	4561      	cmp	r1, ip
 8002c3a:	d30a      	bcc.n	8002c52 <__exponent+0x66>
 8002c3c:	f10d 0209 	add.w	r2, sp, #9
 8002c40:	eba2 020e 	sub.w	r2, r2, lr
 8002c44:	4565      	cmp	r5, ip
 8002c46:	bf88      	it	hi
 8002c48:	2200      	movhi	r2, #0
 8002c4a:	4413      	add	r3, r2
 8002c4c:	1a18      	subs	r0, r3, r0
 8002c4e:	b003      	add	sp, #12
 8002c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c5a:	e7ed      	b.n	8002c38 <__exponent+0x4c>
 8002c5c:	2330      	movs	r3, #48	; 0x30
 8002c5e:	3130      	adds	r1, #48	; 0x30
 8002c60:	7083      	strb	r3, [r0, #2]
 8002c62:	70c1      	strb	r1, [r0, #3]
 8002c64:	1d03      	adds	r3, r0, #4
 8002c66:	e7f1      	b.n	8002c4c <__exponent+0x60>

08002c68 <_printf_float>:
 8002c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	ed2d 8b02 	vpush	{d8}
 8002c70:	b08d      	sub	sp, #52	; 0x34
 8002c72:	460c      	mov	r4, r1
 8002c74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002c78:	4616      	mov	r6, r2
 8002c7a:	461f      	mov	r7, r3
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	f001 fe4b 	bl	8004918 <_localeconv_r>
 8002c82:	f8d0 a000 	ldr.w	sl, [r0]
 8002c86:	4650      	mov	r0, sl
 8002c88:	f7fd fac4 	bl	8000214 <strlen>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	9305      	str	r3, [sp, #20]
 8002c94:	f8d8 3000 	ldr.w	r3, [r8]
 8002c98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002c9c:	3307      	adds	r3, #7
 8002c9e:	f023 0307 	bic.w	r3, r3, #7
 8002ca2:	f103 0208 	add.w	r2, r3, #8
 8002ca6:	f8c8 2000 	str.w	r2, [r8]
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002cb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002cba:	9307      	str	r3, [sp, #28]
 8002cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8002cc0:	ee08 0a10 	vmov	s16, r0
 8002cc4:	4b9f      	ldr	r3, [pc, #636]	; (8002f44 <_printf_float+0x2dc>)
 8002cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cce:	f7fd ff55 	bl	8000b7c <__aeabi_dcmpun>
 8002cd2:	bb88      	cbnz	r0, 8002d38 <_printf_float+0xd0>
 8002cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cd8:	4b9a      	ldr	r3, [pc, #616]	; (8002f44 <_printf_float+0x2dc>)
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cde:	f7fd ff2f 	bl	8000b40 <__aeabi_dcmple>
 8002ce2:	bb48      	cbnz	r0, 8002d38 <_printf_float+0xd0>
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4640      	mov	r0, r8
 8002cea:	4649      	mov	r1, r9
 8002cec:	f7fd ff1e 	bl	8000b2c <__aeabi_dcmplt>
 8002cf0:	b110      	cbz	r0, 8002cf8 <_printf_float+0x90>
 8002cf2:	232d      	movs	r3, #45	; 0x2d
 8002cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cf8:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <_printf_float+0x2e0>)
 8002cfa:	4894      	ldr	r0, [pc, #592]	; (8002f4c <_printf_float+0x2e4>)
 8002cfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002d00:	bf94      	ite	ls
 8002d02:	4698      	movls	r8, r3
 8002d04:	4680      	movhi	r8, r0
 8002d06:	2303      	movs	r3, #3
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	9b05      	ldr	r3, [sp, #20]
 8002d0c:	f023 0204 	bic.w	r2, r3, #4
 8002d10:	6022      	str	r2, [r4, #0]
 8002d12:	f04f 0900 	mov.w	r9, #0
 8002d16:	9700      	str	r7, [sp, #0]
 8002d18:	4633      	mov	r3, r6
 8002d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f000 f9d8 	bl	80030d4 <_printf_common>
 8002d24:	3001      	adds	r0, #1
 8002d26:	f040 8090 	bne.w	8002e4a <_printf_float+0x1e2>
 8002d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d2e:	b00d      	add	sp, #52	; 0x34
 8002d30:	ecbd 8b02 	vpop	{d8}
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	4640      	mov	r0, r8
 8002d3e:	4649      	mov	r1, r9
 8002d40:	f7fd ff1c 	bl	8000b7c <__aeabi_dcmpun>
 8002d44:	b140      	cbz	r0, 8002d58 <_printf_float+0xf0>
 8002d46:	464b      	mov	r3, r9
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bfbc      	itt	lt
 8002d4c:	232d      	movlt	r3, #45	; 0x2d
 8002d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d52:	487f      	ldr	r0, [pc, #508]	; (8002f50 <_printf_float+0x2e8>)
 8002d54:	4b7f      	ldr	r3, [pc, #508]	; (8002f54 <_printf_float+0x2ec>)
 8002d56:	e7d1      	b.n	8002cfc <_printf_float+0x94>
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002d5e:	9206      	str	r2, [sp, #24]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	d13f      	bne.n	8002de4 <_printf_float+0x17c>
 8002d64:	2306      	movs	r3, #6
 8002d66:	6063      	str	r3, [r4, #4]
 8002d68:	9b05      	ldr	r3, [sp, #20]
 8002d6a:	6861      	ldr	r1, [r4, #4]
 8002d6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d70:	2300      	movs	r3, #0
 8002d72:	9303      	str	r3, [sp, #12]
 8002d74:	ab0a      	add	r3, sp, #40	; 0x28
 8002d76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002d7a:	ab09      	add	r3, sp, #36	; 0x24
 8002d7c:	ec49 8b10 	vmov	d0, r8, r9
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	6022      	str	r2, [r4, #0]
 8002d84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7ff fecd 	bl	8002b28 <__cvt>
 8002d8e:	9b06      	ldr	r3, [sp, #24]
 8002d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d92:	2b47      	cmp	r3, #71	; 0x47
 8002d94:	4680      	mov	r8, r0
 8002d96:	d108      	bne.n	8002daa <_printf_float+0x142>
 8002d98:	1cc8      	adds	r0, r1, #3
 8002d9a:	db02      	blt.n	8002da2 <_printf_float+0x13a>
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	4299      	cmp	r1, r3
 8002da0:	dd41      	ble.n	8002e26 <_printf_float+0x1be>
 8002da2:	f1ab 0b02 	sub.w	fp, fp, #2
 8002da6:	fa5f fb8b 	uxtb.w	fp, fp
 8002daa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002dae:	d820      	bhi.n	8002df2 <_printf_float+0x18a>
 8002db0:	3901      	subs	r1, #1
 8002db2:	465a      	mov	r2, fp
 8002db4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002db8:	9109      	str	r1, [sp, #36]	; 0x24
 8002dba:	f7ff ff17 	bl	8002bec <__exponent>
 8002dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dc0:	1813      	adds	r3, r2, r0
 8002dc2:	2a01      	cmp	r2, #1
 8002dc4:	4681      	mov	r9, r0
 8002dc6:	6123      	str	r3, [r4, #16]
 8002dc8:	dc02      	bgt.n	8002dd0 <_printf_float+0x168>
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	07d2      	lsls	r2, r2, #31
 8002dce:	d501      	bpl.n	8002dd4 <_printf_float+0x16c>
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	6123      	str	r3, [r4, #16]
 8002dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d09c      	beq.n	8002d16 <_printf_float+0xae>
 8002ddc:	232d      	movs	r3, #45	; 0x2d
 8002dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de2:	e798      	b.n	8002d16 <_printf_float+0xae>
 8002de4:	9a06      	ldr	r2, [sp, #24]
 8002de6:	2a47      	cmp	r2, #71	; 0x47
 8002de8:	d1be      	bne.n	8002d68 <_printf_float+0x100>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1bc      	bne.n	8002d68 <_printf_float+0x100>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e7b9      	b.n	8002d66 <_printf_float+0xfe>
 8002df2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002df6:	d118      	bne.n	8002e2a <_printf_float+0x1c2>
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	6863      	ldr	r3, [r4, #4]
 8002dfc:	dd0b      	ble.n	8002e16 <_printf_float+0x1ae>
 8002dfe:	6121      	str	r1, [r4, #16]
 8002e00:	b913      	cbnz	r3, 8002e08 <_printf_float+0x1a0>
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	07d0      	lsls	r0, r2, #31
 8002e06:	d502      	bpl.n	8002e0e <_printf_float+0x1a6>
 8002e08:	3301      	adds	r3, #1
 8002e0a:	440b      	add	r3, r1
 8002e0c:	6123      	str	r3, [r4, #16]
 8002e0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e10:	f04f 0900 	mov.w	r9, #0
 8002e14:	e7de      	b.n	8002dd4 <_printf_float+0x16c>
 8002e16:	b913      	cbnz	r3, 8002e1e <_printf_float+0x1b6>
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	07d2      	lsls	r2, r2, #31
 8002e1c:	d501      	bpl.n	8002e22 <_printf_float+0x1ba>
 8002e1e:	3302      	adds	r3, #2
 8002e20:	e7f4      	b.n	8002e0c <_printf_float+0x1a4>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e7f2      	b.n	8002e0c <_printf_float+0x1a4>
 8002e26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e2c:	4299      	cmp	r1, r3
 8002e2e:	db05      	blt.n	8002e3c <_printf_float+0x1d4>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	6121      	str	r1, [r4, #16]
 8002e34:	07d8      	lsls	r0, r3, #31
 8002e36:	d5ea      	bpl.n	8002e0e <_printf_float+0x1a6>
 8002e38:	1c4b      	adds	r3, r1, #1
 8002e3a:	e7e7      	b.n	8002e0c <_printf_float+0x1a4>
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	bfd4      	ite	le
 8002e40:	f1c1 0202 	rsble	r2, r1, #2
 8002e44:	2201      	movgt	r2, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	e7e0      	b.n	8002e0c <_printf_float+0x1a4>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	055a      	lsls	r2, r3, #21
 8002e4e:	d407      	bmi.n	8002e60 <_printf_float+0x1f8>
 8002e50:	6923      	ldr	r3, [r4, #16]
 8002e52:	4642      	mov	r2, r8
 8002e54:	4631      	mov	r1, r6
 8002e56:	4628      	mov	r0, r5
 8002e58:	47b8      	blx	r7
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d12c      	bne.n	8002eb8 <_printf_float+0x250>
 8002e5e:	e764      	b.n	8002d2a <_printf_float+0xc2>
 8002e60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e64:	f240 80e0 	bls.w	8003028 <_printf_float+0x3c0>
 8002e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f7fd fe52 	bl	8000b18 <__aeabi_dcmpeq>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d034      	beq.n	8002ee2 <_printf_float+0x27a>
 8002e78:	4a37      	ldr	r2, [pc, #220]	; (8002f58 <_printf_float+0x2f0>)
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	4628      	mov	r0, r5
 8002e80:	47b8      	blx	r7
 8002e82:	3001      	adds	r0, #1
 8002e84:	f43f af51 	beq.w	8002d2a <_printf_float+0xc2>
 8002e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	db02      	blt.n	8002e96 <_printf_float+0x22e>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	07d8      	lsls	r0, r3, #31
 8002e94:	d510      	bpl.n	8002eb8 <_printf_float+0x250>
 8002e96:	ee18 3a10 	vmov	r3, s16
 8002e9a:	4652      	mov	r2, sl
 8002e9c:	4631      	mov	r1, r6
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	47b8      	blx	r7
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	f43f af41 	beq.w	8002d2a <_printf_float+0xc2>
 8002ea8:	f04f 0800 	mov.w	r8, #0
 8002eac:	f104 091a 	add.w	r9, r4, #26
 8002eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	4543      	cmp	r3, r8
 8002eb6:	dc09      	bgt.n	8002ecc <_printf_float+0x264>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	079b      	lsls	r3, r3, #30
 8002ebc:	f100 8105 	bmi.w	80030ca <_printf_float+0x462>
 8002ec0:	68e0      	ldr	r0, [r4, #12]
 8002ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ec4:	4298      	cmp	r0, r3
 8002ec6:	bfb8      	it	lt
 8002ec8:	4618      	movlt	r0, r3
 8002eca:	e730      	b.n	8002d2e <_printf_float+0xc6>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	464a      	mov	r2, r9
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	47b8      	blx	r7
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	f43f af27 	beq.w	8002d2a <_printf_float+0xc2>
 8002edc:	f108 0801 	add.w	r8, r8, #1
 8002ee0:	e7e6      	b.n	8002eb0 <_printf_float+0x248>
 8002ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dc39      	bgt.n	8002f5c <_printf_float+0x2f4>
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <_printf_float+0x2f0>)
 8002eea:	2301      	movs	r3, #1
 8002eec:	4631      	mov	r1, r6
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b8      	blx	r7
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f43f af19 	beq.w	8002d2a <_printf_float+0xc2>
 8002ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002efc:	4313      	orrs	r3, r2
 8002efe:	d102      	bne.n	8002f06 <_printf_float+0x29e>
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	07d9      	lsls	r1, r3, #31
 8002f04:	d5d8      	bpl.n	8002eb8 <_printf_float+0x250>
 8002f06:	ee18 3a10 	vmov	r3, s16
 8002f0a:	4652      	mov	r2, sl
 8002f0c:	4631      	mov	r1, r6
 8002f0e:	4628      	mov	r0, r5
 8002f10:	47b8      	blx	r7
 8002f12:	3001      	adds	r0, #1
 8002f14:	f43f af09 	beq.w	8002d2a <_printf_float+0xc2>
 8002f18:	f04f 0900 	mov.w	r9, #0
 8002f1c:	f104 0a1a 	add.w	sl, r4, #26
 8002f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f22:	425b      	negs	r3, r3
 8002f24:	454b      	cmp	r3, r9
 8002f26:	dc01      	bgt.n	8002f2c <_printf_float+0x2c4>
 8002f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f2a:	e792      	b.n	8002e52 <_printf_float+0x1ea>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	4652      	mov	r2, sl
 8002f30:	4631      	mov	r1, r6
 8002f32:	4628      	mov	r0, r5
 8002f34:	47b8      	blx	r7
 8002f36:	3001      	adds	r0, #1
 8002f38:	f43f aef7 	beq.w	8002d2a <_printf_float+0xc2>
 8002f3c:	f109 0901 	add.w	r9, r9, #1
 8002f40:	e7ee      	b.n	8002f20 <_printf_float+0x2b8>
 8002f42:	bf00      	nop
 8002f44:	7fefffff 	.word	0x7fefffff
 8002f48:	080120e4 	.word	0x080120e4
 8002f4c:	080120e8 	.word	0x080120e8
 8002f50:	080120f0 	.word	0x080120f0
 8002f54:	080120ec 	.word	0x080120ec
 8002f58:	0800819c 	.word	0x0800819c
 8002f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f60:	429a      	cmp	r2, r3
 8002f62:	bfa8      	it	ge
 8002f64:	461a      	movge	r2, r3
 8002f66:	2a00      	cmp	r2, #0
 8002f68:	4691      	mov	r9, r2
 8002f6a:	dc37      	bgt.n	8002fdc <_printf_float+0x374>
 8002f6c:	f04f 0b00 	mov.w	fp, #0
 8002f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f74:	f104 021a 	add.w	r2, r4, #26
 8002f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f7a:	9305      	str	r3, [sp, #20]
 8002f7c:	eba3 0309 	sub.w	r3, r3, r9
 8002f80:	455b      	cmp	r3, fp
 8002f82:	dc33      	bgt.n	8002fec <_printf_float+0x384>
 8002f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	db3b      	blt.n	8003004 <_printf_float+0x39c>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	07da      	lsls	r2, r3, #31
 8002f90:	d438      	bmi.n	8003004 <_printf_float+0x39c>
 8002f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f94:	9a05      	ldr	r2, [sp, #20]
 8002f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f98:	1a9a      	subs	r2, r3, r2
 8002f9a:	eba3 0901 	sub.w	r9, r3, r1
 8002f9e:	4591      	cmp	r9, r2
 8002fa0:	bfa8      	it	ge
 8002fa2:	4691      	movge	r9, r2
 8002fa4:	f1b9 0f00 	cmp.w	r9, #0
 8002fa8:	dc35      	bgt.n	8003016 <_printf_float+0x3ae>
 8002faa:	f04f 0800 	mov.w	r8, #0
 8002fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fb2:	f104 0a1a 	add.w	sl, r4, #26
 8002fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	eba3 0309 	sub.w	r3, r3, r9
 8002fc0:	4543      	cmp	r3, r8
 8002fc2:	f77f af79 	ble.w	8002eb8 <_printf_float+0x250>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	4652      	mov	r2, sl
 8002fca:	4631      	mov	r1, r6
 8002fcc:	4628      	mov	r0, r5
 8002fce:	47b8      	blx	r7
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	f43f aeaa 	beq.w	8002d2a <_printf_float+0xc2>
 8002fd6:	f108 0801 	add.w	r8, r8, #1
 8002fda:	e7ec      	b.n	8002fb6 <_printf_float+0x34e>
 8002fdc:	4613      	mov	r3, r2
 8002fde:	4631      	mov	r1, r6
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	47b8      	blx	r7
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d1c0      	bne.n	8002f6c <_printf_float+0x304>
 8002fea:	e69e      	b.n	8002d2a <_printf_float+0xc2>
 8002fec:	2301      	movs	r3, #1
 8002fee:	4631      	mov	r1, r6
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	9205      	str	r2, [sp, #20]
 8002ff4:	47b8      	blx	r7
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	f43f ae97 	beq.w	8002d2a <_printf_float+0xc2>
 8002ffc:	9a05      	ldr	r2, [sp, #20]
 8002ffe:	f10b 0b01 	add.w	fp, fp, #1
 8003002:	e7b9      	b.n	8002f78 <_printf_float+0x310>
 8003004:	ee18 3a10 	vmov	r3, s16
 8003008:	4652      	mov	r2, sl
 800300a:	4631      	mov	r1, r6
 800300c:	4628      	mov	r0, r5
 800300e:	47b8      	blx	r7
 8003010:	3001      	adds	r0, #1
 8003012:	d1be      	bne.n	8002f92 <_printf_float+0x32a>
 8003014:	e689      	b.n	8002d2a <_printf_float+0xc2>
 8003016:	9a05      	ldr	r2, [sp, #20]
 8003018:	464b      	mov	r3, r9
 800301a:	4442      	add	r2, r8
 800301c:	4631      	mov	r1, r6
 800301e:	4628      	mov	r0, r5
 8003020:	47b8      	blx	r7
 8003022:	3001      	adds	r0, #1
 8003024:	d1c1      	bne.n	8002faa <_printf_float+0x342>
 8003026:	e680      	b.n	8002d2a <_printf_float+0xc2>
 8003028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800302a:	2a01      	cmp	r2, #1
 800302c:	dc01      	bgt.n	8003032 <_printf_float+0x3ca>
 800302e:	07db      	lsls	r3, r3, #31
 8003030:	d538      	bpl.n	80030a4 <_printf_float+0x43c>
 8003032:	2301      	movs	r3, #1
 8003034:	4642      	mov	r2, r8
 8003036:	4631      	mov	r1, r6
 8003038:	4628      	mov	r0, r5
 800303a:	47b8      	blx	r7
 800303c:	3001      	adds	r0, #1
 800303e:	f43f ae74 	beq.w	8002d2a <_printf_float+0xc2>
 8003042:	ee18 3a10 	vmov	r3, s16
 8003046:	4652      	mov	r2, sl
 8003048:	4631      	mov	r1, r6
 800304a:	4628      	mov	r0, r5
 800304c:	47b8      	blx	r7
 800304e:	3001      	adds	r0, #1
 8003050:	f43f ae6b 	beq.w	8002d2a <_printf_float+0xc2>
 8003054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003058:	2200      	movs	r2, #0
 800305a:	2300      	movs	r3, #0
 800305c:	f7fd fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8003060:	b9d8      	cbnz	r0, 800309a <_printf_float+0x432>
 8003062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003064:	f108 0201 	add.w	r2, r8, #1
 8003068:	3b01      	subs	r3, #1
 800306a:	4631      	mov	r1, r6
 800306c:	4628      	mov	r0, r5
 800306e:	47b8      	blx	r7
 8003070:	3001      	adds	r0, #1
 8003072:	d10e      	bne.n	8003092 <_printf_float+0x42a>
 8003074:	e659      	b.n	8002d2a <_printf_float+0xc2>
 8003076:	2301      	movs	r3, #1
 8003078:	4652      	mov	r2, sl
 800307a:	4631      	mov	r1, r6
 800307c:	4628      	mov	r0, r5
 800307e:	47b8      	blx	r7
 8003080:	3001      	adds	r0, #1
 8003082:	f43f ae52 	beq.w	8002d2a <_printf_float+0xc2>
 8003086:	f108 0801 	add.w	r8, r8, #1
 800308a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	4543      	cmp	r3, r8
 8003090:	dcf1      	bgt.n	8003076 <_printf_float+0x40e>
 8003092:	464b      	mov	r3, r9
 8003094:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003098:	e6dc      	b.n	8002e54 <_printf_float+0x1ec>
 800309a:	f04f 0800 	mov.w	r8, #0
 800309e:	f104 0a1a 	add.w	sl, r4, #26
 80030a2:	e7f2      	b.n	800308a <_printf_float+0x422>
 80030a4:	2301      	movs	r3, #1
 80030a6:	4642      	mov	r2, r8
 80030a8:	e7df      	b.n	800306a <_printf_float+0x402>
 80030aa:	2301      	movs	r3, #1
 80030ac:	464a      	mov	r2, r9
 80030ae:	4631      	mov	r1, r6
 80030b0:	4628      	mov	r0, r5
 80030b2:	47b8      	blx	r7
 80030b4:	3001      	adds	r0, #1
 80030b6:	f43f ae38 	beq.w	8002d2a <_printf_float+0xc2>
 80030ba:	f108 0801 	add.w	r8, r8, #1
 80030be:	68e3      	ldr	r3, [r4, #12]
 80030c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030c2:	1a5b      	subs	r3, r3, r1
 80030c4:	4543      	cmp	r3, r8
 80030c6:	dcf0      	bgt.n	80030aa <_printf_float+0x442>
 80030c8:	e6fa      	b.n	8002ec0 <_printf_float+0x258>
 80030ca:	f04f 0800 	mov.w	r8, #0
 80030ce:	f104 0919 	add.w	r9, r4, #25
 80030d2:	e7f4      	b.n	80030be <_printf_float+0x456>

080030d4 <_printf_common>:
 80030d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	4616      	mov	r6, r2
 80030da:	4699      	mov	r9, r3
 80030dc:	688a      	ldr	r2, [r1, #8]
 80030de:	690b      	ldr	r3, [r1, #16]
 80030e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bfb8      	it	lt
 80030e8:	4613      	movlt	r3, r2
 80030ea:	6033      	str	r3, [r6, #0]
 80030ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f0:	4607      	mov	r7, r0
 80030f2:	460c      	mov	r4, r1
 80030f4:	b10a      	cbz	r2, 80030fa <_printf_common+0x26>
 80030f6:	3301      	adds	r3, #1
 80030f8:	6033      	str	r3, [r6, #0]
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	0699      	lsls	r1, r3, #26
 80030fe:	bf42      	ittt	mi
 8003100:	6833      	ldrmi	r3, [r6, #0]
 8003102:	3302      	addmi	r3, #2
 8003104:	6033      	strmi	r3, [r6, #0]
 8003106:	6825      	ldr	r5, [r4, #0]
 8003108:	f015 0506 	ands.w	r5, r5, #6
 800310c:	d106      	bne.n	800311c <_printf_common+0x48>
 800310e:	f104 0a19 	add.w	sl, r4, #25
 8003112:	68e3      	ldr	r3, [r4, #12]
 8003114:	6832      	ldr	r2, [r6, #0]
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	42ab      	cmp	r3, r5
 800311a:	dc26      	bgt.n	800316a <_printf_common+0x96>
 800311c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003120:	1e13      	subs	r3, r2, #0
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	bf18      	it	ne
 8003126:	2301      	movne	r3, #1
 8003128:	0692      	lsls	r2, r2, #26
 800312a:	d42b      	bmi.n	8003184 <_printf_common+0xb0>
 800312c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003130:	4649      	mov	r1, r9
 8003132:	4638      	mov	r0, r7
 8003134:	47c0      	blx	r8
 8003136:	3001      	adds	r0, #1
 8003138:	d01e      	beq.n	8003178 <_printf_common+0xa4>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	68e5      	ldr	r5, [r4, #12]
 800313e:	6832      	ldr	r2, [r6, #0]
 8003140:	f003 0306 	and.w	r3, r3, #6
 8003144:	2b04      	cmp	r3, #4
 8003146:	bf08      	it	eq
 8003148:	1aad      	subeq	r5, r5, r2
 800314a:	68a3      	ldr	r3, [r4, #8]
 800314c:	6922      	ldr	r2, [r4, #16]
 800314e:	bf0c      	ite	eq
 8003150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003154:	2500      	movne	r5, #0
 8003156:	4293      	cmp	r3, r2
 8003158:	bfc4      	itt	gt
 800315a:	1a9b      	subgt	r3, r3, r2
 800315c:	18ed      	addgt	r5, r5, r3
 800315e:	2600      	movs	r6, #0
 8003160:	341a      	adds	r4, #26
 8003162:	42b5      	cmp	r5, r6
 8003164:	d11a      	bne.n	800319c <_printf_common+0xc8>
 8003166:	2000      	movs	r0, #0
 8003168:	e008      	b.n	800317c <_printf_common+0xa8>
 800316a:	2301      	movs	r3, #1
 800316c:	4652      	mov	r2, sl
 800316e:	4649      	mov	r1, r9
 8003170:	4638      	mov	r0, r7
 8003172:	47c0      	blx	r8
 8003174:	3001      	adds	r0, #1
 8003176:	d103      	bne.n	8003180 <_printf_common+0xac>
 8003178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003180:	3501      	adds	r5, #1
 8003182:	e7c6      	b.n	8003112 <_printf_common+0x3e>
 8003184:	18e1      	adds	r1, r4, r3
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	2030      	movs	r0, #48	; 0x30
 800318a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800318e:	4422      	add	r2, r4
 8003190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003198:	3302      	adds	r3, #2
 800319a:	e7c7      	b.n	800312c <_printf_common+0x58>
 800319c:	2301      	movs	r3, #1
 800319e:	4622      	mov	r2, r4
 80031a0:	4649      	mov	r1, r9
 80031a2:	4638      	mov	r0, r7
 80031a4:	47c0      	blx	r8
 80031a6:	3001      	adds	r0, #1
 80031a8:	d0e6      	beq.n	8003178 <_printf_common+0xa4>
 80031aa:	3601      	adds	r6, #1
 80031ac:	e7d9      	b.n	8003162 <_printf_common+0x8e>
	...

080031b0 <_printf_i>:
 80031b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031b4:	7e0f      	ldrb	r7, [r1, #24]
 80031b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031b8:	2f78      	cmp	r7, #120	; 0x78
 80031ba:	4691      	mov	r9, r2
 80031bc:	4680      	mov	r8, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	469a      	mov	sl, r3
 80031c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031c6:	d807      	bhi.n	80031d8 <_printf_i+0x28>
 80031c8:	2f62      	cmp	r7, #98	; 0x62
 80031ca:	d80a      	bhi.n	80031e2 <_printf_i+0x32>
 80031cc:	2f00      	cmp	r7, #0
 80031ce:	f000 80d8 	beq.w	8003382 <_printf_i+0x1d2>
 80031d2:	2f58      	cmp	r7, #88	; 0x58
 80031d4:	f000 80a3 	beq.w	800331e <_printf_i+0x16e>
 80031d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031e0:	e03a      	b.n	8003258 <_printf_i+0xa8>
 80031e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031e6:	2b15      	cmp	r3, #21
 80031e8:	d8f6      	bhi.n	80031d8 <_printf_i+0x28>
 80031ea:	a101      	add	r1, pc, #4	; (adr r1, 80031f0 <_printf_i+0x40>)
 80031ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031f0:	08003249 	.word	0x08003249
 80031f4:	0800325d 	.word	0x0800325d
 80031f8:	080031d9 	.word	0x080031d9
 80031fc:	080031d9 	.word	0x080031d9
 8003200:	080031d9 	.word	0x080031d9
 8003204:	080031d9 	.word	0x080031d9
 8003208:	0800325d 	.word	0x0800325d
 800320c:	080031d9 	.word	0x080031d9
 8003210:	080031d9 	.word	0x080031d9
 8003214:	080031d9 	.word	0x080031d9
 8003218:	080031d9 	.word	0x080031d9
 800321c:	08003369 	.word	0x08003369
 8003220:	0800328d 	.word	0x0800328d
 8003224:	0800334b 	.word	0x0800334b
 8003228:	080031d9 	.word	0x080031d9
 800322c:	080031d9 	.word	0x080031d9
 8003230:	0800338b 	.word	0x0800338b
 8003234:	080031d9 	.word	0x080031d9
 8003238:	0800328d 	.word	0x0800328d
 800323c:	080031d9 	.word	0x080031d9
 8003240:	080031d9 	.word	0x080031d9
 8003244:	08003353 	.word	0x08003353
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	1d1a      	adds	r2, r3, #4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	602a      	str	r2, [r5, #0]
 8003250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003258:	2301      	movs	r3, #1
 800325a:	e0a3      	b.n	80033a4 <_printf_i+0x1f4>
 800325c:	6820      	ldr	r0, [r4, #0]
 800325e:	6829      	ldr	r1, [r5, #0]
 8003260:	0606      	lsls	r6, r0, #24
 8003262:	f101 0304 	add.w	r3, r1, #4
 8003266:	d50a      	bpl.n	800327e <_printf_i+0xce>
 8003268:	680e      	ldr	r6, [r1, #0]
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	2e00      	cmp	r6, #0
 800326e:	da03      	bge.n	8003278 <_printf_i+0xc8>
 8003270:	232d      	movs	r3, #45	; 0x2d
 8003272:	4276      	negs	r6, r6
 8003274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003278:	485e      	ldr	r0, [pc, #376]	; (80033f4 <_printf_i+0x244>)
 800327a:	230a      	movs	r3, #10
 800327c:	e019      	b.n	80032b2 <_printf_i+0x102>
 800327e:	680e      	ldr	r6, [r1, #0]
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003286:	bf18      	it	ne
 8003288:	b236      	sxthne	r6, r6
 800328a:	e7ef      	b.n	800326c <_printf_i+0xbc>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	1d19      	adds	r1, r3, #4
 8003292:	6029      	str	r1, [r5, #0]
 8003294:	0601      	lsls	r1, r0, #24
 8003296:	d501      	bpl.n	800329c <_printf_i+0xec>
 8003298:	681e      	ldr	r6, [r3, #0]
 800329a:	e002      	b.n	80032a2 <_printf_i+0xf2>
 800329c:	0646      	lsls	r6, r0, #25
 800329e:	d5fb      	bpl.n	8003298 <_printf_i+0xe8>
 80032a0:	881e      	ldrh	r6, [r3, #0]
 80032a2:	4854      	ldr	r0, [pc, #336]	; (80033f4 <_printf_i+0x244>)
 80032a4:	2f6f      	cmp	r7, #111	; 0x6f
 80032a6:	bf0c      	ite	eq
 80032a8:	2308      	moveq	r3, #8
 80032aa:	230a      	movne	r3, #10
 80032ac:	2100      	movs	r1, #0
 80032ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032b2:	6865      	ldr	r5, [r4, #4]
 80032b4:	60a5      	str	r5, [r4, #8]
 80032b6:	2d00      	cmp	r5, #0
 80032b8:	bfa2      	ittt	ge
 80032ba:	6821      	ldrge	r1, [r4, #0]
 80032bc:	f021 0104 	bicge.w	r1, r1, #4
 80032c0:	6021      	strge	r1, [r4, #0]
 80032c2:	b90e      	cbnz	r6, 80032c8 <_printf_i+0x118>
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	d04d      	beq.n	8003364 <_printf_i+0x1b4>
 80032c8:	4615      	mov	r5, r2
 80032ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80032ce:	fb03 6711 	mls	r7, r3, r1, r6
 80032d2:	5dc7      	ldrb	r7, [r0, r7]
 80032d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032d8:	4637      	mov	r7, r6
 80032da:	42bb      	cmp	r3, r7
 80032dc:	460e      	mov	r6, r1
 80032de:	d9f4      	bls.n	80032ca <_printf_i+0x11a>
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d10b      	bne.n	80032fc <_printf_i+0x14c>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	07de      	lsls	r6, r3, #31
 80032e8:	d508      	bpl.n	80032fc <_printf_i+0x14c>
 80032ea:	6923      	ldr	r3, [r4, #16]
 80032ec:	6861      	ldr	r1, [r4, #4]
 80032ee:	4299      	cmp	r1, r3
 80032f0:	bfde      	ittt	le
 80032f2:	2330      	movle	r3, #48	; 0x30
 80032f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80032fc:	1b52      	subs	r2, r2, r5
 80032fe:	6122      	str	r2, [r4, #16]
 8003300:	f8cd a000 	str.w	sl, [sp]
 8003304:	464b      	mov	r3, r9
 8003306:	aa03      	add	r2, sp, #12
 8003308:	4621      	mov	r1, r4
 800330a:	4640      	mov	r0, r8
 800330c:	f7ff fee2 	bl	80030d4 <_printf_common>
 8003310:	3001      	adds	r0, #1
 8003312:	d14c      	bne.n	80033ae <_printf_i+0x1fe>
 8003314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003318:	b004      	add	sp, #16
 800331a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331e:	4835      	ldr	r0, [pc, #212]	; (80033f4 <_printf_i+0x244>)
 8003320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003324:	6829      	ldr	r1, [r5, #0]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	f851 6b04 	ldr.w	r6, [r1], #4
 800332c:	6029      	str	r1, [r5, #0]
 800332e:	061d      	lsls	r5, r3, #24
 8003330:	d514      	bpl.n	800335c <_printf_i+0x1ac>
 8003332:	07df      	lsls	r7, r3, #31
 8003334:	bf44      	itt	mi
 8003336:	f043 0320 	orrmi.w	r3, r3, #32
 800333a:	6023      	strmi	r3, [r4, #0]
 800333c:	b91e      	cbnz	r6, 8003346 <_printf_i+0x196>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	f023 0320 	bic.w	r3, r3, #32
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	2310      	movs	r3, #16
 8003348:	e7b0      	b.n	80032ac <_printf_i+0xfc>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	f043 0320 	orr.w	r3, r3, #32
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	2378      	movs	r3, #120	; 0x78
 8003354:	4828      	ldr	r0, [pc, #160]	; (80033f8 <_printf_i+0x248>)
 8003356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800335a:	e7e3      	b.n	8003324 <_printf_i+0x174>
 800335c:	0659      	lsls	r1, r3, #25
 800335e:	bf48      	it	mi
 8003360:	b2b6      	uxthmi	r6, r6
 8003362:	e7e6      	b.n	8003332 <_printf_i+0x182>
 8003364:	4615      	mov	r5, r2
 8003366:	e7bb      	b.n	80032e0 <_printf_i+0x130>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	6826      	ldr	r6, [r4, #0]
 800336c:	6961      	ldr	r1, [r4, #20]
 800336e:	1d18      	adds	r0, r3, #4
 8003370:	6028      	str	r0, [r5, #0]
 8003372:	0635      	lsls	r5, r6, #24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	d501      	bpl.n	800337c <_printf_i+0x1cc>
 8003378:	6019      	str	r1, [r3, #0]
 800337a:	e002      	b.n	8003382 <_printf_i+0x1d2>
 800337c:	0670      	lsls	r0, r6, #25
 800337e:	d5fb      	bpl.n	8003378 <_printf_i+0x1c8>
 8003380:	8019      	strh	r1, [r3, #0]
 8003382:	2300      	movs	r3, #0
 8003384:	6123      	str	r3, [r4, #16]
 8003386:	4615      	mov	r5, r2
 8003388:	e7ba      	b.n	8003300 <_printf_i+0x150>
 800338a:	682b      	ldr	r3, [r5, #0]
 800338c:	1d1a      	adds	r2, r3, #4
 800338e:	602a      	str	r2, [r5, #0]
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	6862      	ldr	r2, [r4, #4]
 8003394:	2100      	movs	r1, #0
 8003396:	4628      	mov	r0, r5
 8003398:	f7fc ff4a 	bl	8000230 <memchr>
 800339c:	b108      	cbz	r0, 80033a2 <_printf_i+0x1f2>
 800339e:	1b40      	subs	r0, r0, r5
 80033a0:	6060      	str	r0, [r4, #4]
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	2300      	movs	r3, #0
 80033a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ac:	e7a8      	b.n	8003300 <_printf_i+0x150>
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	462a      	mov	r2, r5
 80033b2:	4649      	mov	r1, r9
 80033b4:	4640      	mov	r0, r8
 80033b6:	47d0      	blx	sl
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0ab      	beq.n	8003314 <_printf_i+0x164>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	079b      	lsls	r3, r3, #30
 80033c0:	d413      	bmi.n	80033ea <_printf_i+0x23a>
 80033c2:	68e0      	ldr	r0, [r4, #12]
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	4298      	cmp	r0, r3
 80033c8:	bfb8      	it	lt
 80033ca:	4618      	movlt	r0, r3
 80033cc:	e7a4      	b.n	8003318 <_printf_i+0x168>
 80033ce:	2301      	movs	r3, #1
 80033d0:	4632      	mov	r2, r6
 80033d2:	4649      	mov	r1, r9
 80033d4:	4640      	mov	r0, r8
 80033d6:	47d0      	blx	sl
 80033d8:	3001      	adds	r0, #1
 80033da:	d09b      	beq.n	8003314 <_printf_i+0x164>
 80033dc:	3501      	adds	r5, #1
 80033de:	68e3      	ldr	r3, [r4, #12]
 80033e0:	9903      	ldr	r1, [sp, #12]
 80033e2:	1a5b      	subs	r3, r3, r1
 80033e4:	42ab      	cmp	r3, r5
 80033e6:	dcf2      	bgt.n	80033ce <_printf_i+0x21e>
 80033e8:	e7eb      	b.n	80033c2 <_printf_i+0x212>
 80033ea:	2500      	movs	r5, #0
 80033ec:	f104 0619 	add.w	r6, r4, #25
 80033f0:	e7f5      	b.n	80033de <_printf_i+0x22e>
 80033f2:	bf00      	nop
 80033f4:	080120f4 	.word	0x080120f4
 80033f8:	08012105 	.word	0x08012105

080033fc <setvbuf>:
 80033fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003400:	461d      	mov	r5, r3
 8003402:	4b5d      	ldr	r3, [pc, #372]	; (8003578 <setvbuf+0x17c>)
 8003404:	681f      	ldr	r7, [r3, #0]
 8003406:	4604      	mov	r4, r0
 8003408:	460e      	mov	r6, r1
 800340a:	4690      	mov	r8, r2
 800340c:	b127      	cbz	r7, 8003418 <setvbuf+0x1c>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	b913      	cbnz	r3, 8003418 <setvbuf+0x1c>
 8003412:	4638      	mov	r0, r7
 8003414:	f001 f9d0 	bl	80047b8 <__sinit>
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <setvbuf+0x180>)
 800341a:	429c      	cmp	r4, r3
 800341c:	d167      	bne.n	80034ee <setvbuf+0xf2>
 800341e:	687c      	ldr	r4, [r7, #4]
 8003420:	f1b8 0f02 	cmp.w	r8, #2
 8003424:	d006      	beq.n	8003434 <setvbuf+0x38>
 8003426:	f1b8 0f01 	cmp.w	r8, #1
 800342a:	f200 809f 	bhi.w	800356c <setvbuf+0x170>
 800342e:	2d00      	cmp	r5, #0
 8003430:	f2c0 809c 	blt.w	800356c <setvbuf+0x170>
 8003434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003436:	07db      	lsls	r3, r3, #31
 8003438:	d405      	bmi.n	8003446 <setvbuf+0x4a>
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	0598      	lsls	r0, r3, #22
 800343e:	d402      	bmi.n	8003446 <setvbuf+0x4a>
 8003440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003442:	f001 fa6e 	bl	8004922 <__retarget_lock_acquire_recursive>
 8003446:	4621      	mov	r1, r4
 8003448:	4638      	mov	r0, r7
 800344a:	f001 f921 	bl	8004690 <_fflush_r>
 800344e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003450:	b141      	cbz	r1, 8003464 <setvbuf+0x68>
 8003452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003456:	4299      	cmp	r1, r3
 8003458:	d002      	beq.n	8003460 <setvbuf+0x64>
 800345a:	4638      	mov	r0, r7
 800345c:	f001 fe84 	bl	8005168 <_free_r>
 8003460:	2300      	movs	r3, #0
 8003462:	6363      	str	r3, [r4, #52]	; 0x34
 8003464:	2300      	movs	r3, #0
 8003466:	61a3      	str	r3, [r4, #24]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	0619      	lsls	r1, r3, #24
 800346e:	d503      	bpl.n	8003478 <setvbuf+0x7c>
 8003470:	6921      	ldr	r1, [r4, #16]
 8003472:	4638      	mov	r0, r7
 8003474:	f001 fe78 	bl	8005168 <_free_r>
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	f1b8 0f02 	cmp.w	r8, #2
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	d06c      	beq.n	8003564 <setvbuf+0x168>
 800348a:	ab01      	add	r3, sp, #4
 800348c:	466a      	mov	r2, sp
 800348e:	4621      	mov	r1, r4
 8003490:	4638      	mov	r0, r7
 8003492:	f001 fa48 	bl	8004926 <__swhatbuf_r>
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	4318      	orrs	r0, r3
 800349a:	81a0      	strh	r0, [r4, #12]
 800349c:	2d00      	cmp	r5, #0
 800349e:	d130      	bne.n	8003502 <setvbuf+0x106>
 80034a0:	9d00      	ldr	r5, [sp, #0]
 80034a2:	4628      	mov	r0, r5
 80034a4:	f001 faa4 	bl	80049f0 <malloc>
 80034a8:	4606      	mov	r6, r0
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d155      	bne.n	800355a <setvbuf+0x15e>
 80034ae:	f8dd 9000 	ldr.w	r9, [sp]
 80034b2:	45a9      	cmp	r9, r5
 80034b4:	d14a      	bne.n	800354c <setvbuf+0x150>
 80034b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80034ba:	2200      	movs	r2, #0
 80034bc:	60a2      	str	r2, [r4, #8]
 80034be:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80034c2:	6022      	str	r2, [r4, #0]
 80034c4:	6122      	str	r2, [r4, #16]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034cc:	6162      	str	r2, [r4, #20]
 80034ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	07d2      	lsls	r2, r2, #31
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	d405      	bmi.n	80034e6 <setvbuf+0xea>
 80034da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034de:	d102      	bne.n	80034e6 <setvbuf+0xea>
 80034e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e2:	f001 fa1f 	bl	8004924 <__retarget_lock_release_recursive>
 80034e6:	4628      	mov	r0, r5
 80034e8:	b003      	add	sp, #12
 80034ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <setvbuf+0x184>)
 80034f0:	429c      	cmp	r4, r3
 80034f2:	d101      	bne.n	80034f8 <setvbuf+0xfc>
 80034f4:	68bc      	ldr	r4, [r7, #8]
 80034f6:	e793      	b.n	8003420 <setvbuf+0x24>
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <setvbuf+0x188>)
 80034fa:	429c      	cmp	r4, r3
 80034fc:	bf08      	it	eq
 80034fe:	68fc      	ldreq	r4, [r7, #12]
 8003500:	e78e      	b.n	8003420 <setvbuf+0x24>
 8003502:	2e00      	cmp	r6, #0
 8003504:	d0cd      	beq.n	80034a2 <setvbuf+0xa6>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	b913      	cbnz	r3, 8003510 <setvbuf+0x114>
 800350a:	4638      	mov	r0, r7
 800350c:	f001 f954 	bl	80047b8 <__sinit>
 8003510:	f1b8 0f01 	cmp.w	r8, #1
 8003514:	bf08      	it	eq
 8003516:	89a3      	ldrheq	r3, [r4, #12]
 8003518:	6026      	str	r6, [r4, #0]
 800351a:	bf04      	itt	eq
 800351c:	f043 0301 	orreq.w	r3, r3, #1
 8003520:	81a3      	strheq	r3, [r4, #12]
 8003522:	89a2      	ldrh	r2, [r4, #12]
 8003524:	f012 0308 	ands.w	r3, r2, #8
 8003528:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800352c:	d01c      	beq.n	8003568 <setvbuf+0x16c>
 800352e:	07d3      	lsls	r3, r2, #31
 8003530:	bf41      	itttt	mi
 8003532:	2300      	movmi	r3, #0
 8003534:	426d      	negmi	r5, r5
 8003536:	60a3      	strmi	r3, [r4, #8]
 8003538:	61a5      	strmi	r5, [r4, #24]
 800353a:	bf58      	it	pl
 800353c:	60a5      	strpl	r5, [r4, #8]
 800353e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003540:	f015 0501 	ands.w	r5, r5, #1
 8003544:	d115      	bne.n	8003572 <setvbuf+0x176>
 8003546:	f412 7f00 	tst.w	r2, #512	; 0x200
 800354a:	e7c8      	b.n	80034de <setvbuf+0xe2>
 800354c:	4648      	mov	r0, r9
 800354e:	f001 fa4f 	bl	80049f0 <malloc>
 8003552:	4606      	mov	r6, r0
 8003554:	2800      	cmp	r0, #0
 8003556:	d0ae      	beq.n	80034b6 <setvbuf+0xba>
 8003558:	464d      	mov	r5, r9
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	e7d0      	b.n	8003506 <setvbuf+0x10a>
 8003564:	2500      	movs	r5, #0
 8003566:	e7a8      	b.n	80034ba <setvbuf+0xbe>
 8003568:	60a3      	str	r3, [r4, #8]
 800356a:	e7e8      	b.n	800353e <setvbuf+0x142>
 800356c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003570:	e7b9      	b.n	80034e6 <setvbuf+0xea>
 8003572:	2500      	movs	r5, #0
 8003574:	e7b7      	b.n	80034e6 <setvbuf+0xea>
 8003576:	bf00      	nop
 8003578:	20000018 	.word	0x20000018
 800357c:	080122a4 	.word	0x080122a4
 8003580:	080122c4 	.word	0x080122c4
 8003584:	08012284 	.word	0x08012284

08003588 <strtok>:
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <strtok+0x5c>)
 800358a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800358c:	681e      	ldr	r6, [r3, #0]
 800358e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003590:	4605      	mov	r5, r0
 8003592:	b9fc      	cbnz	r4, 80035d4 <strtok+0x4c>
 8003594:	2050      	movs	r0, #80	; 0x50
 8003596:	9101      	str	r1, [sp, #4]
 8003598:	f001 fa2a 	bl	80049f0 <malloc>
 800359c:	9901      	ldr	r1, [sp, #4]
 800359e:	65b0      	str	r0, [r6, #88]	; 0x58
 80035a0:	4602      	mov	r2, r0
 80035a2:	b920      	cbnz	r0, 80035ae <strtok+0x26>
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <strtok+0x60>)
 80035a6:	4811      	ldr	r0, [pc, #68]	; (80035ec <strtok+0x64>)
 80035a8:	2157      	movs	r1, #87	; 0x57
 80035aa:	f000 f951 	bl	8003850 <__assert_func>
 80035ae:	e9c0 4400 	strd	r4, r4, [r0]
 80035b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80035b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80035ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80035be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80035c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80035c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80035ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80035ce:	6184      	str	r4, [r0, #24]
 80035d0:	7704      	strb	r4, [r0, #28]
 80035d2:	6244      	str	r4, [r0, #36]	; 0x24
 80035d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80035d6:	2301      	movs	r3, #1
 80035d8:	4628      	mov	r0, r5
 80035da:	b002      	add	sp, #8
 80035dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035e0:	f000 b806 	b.w	80035f0 <__strtok_r>
 80035e4:	20000018 	.word	0x20000018
 80035e8:	08012116 	.word	0x08012116
 80035ec:	0801212d 	.word	0x0801212d

080035f0 <__strtok_r>:
 80035f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f2:	b908      	cbnz	r0, 80035f8 <__strtok_r+0x8>
 80035f4:	6810      	ldr	r0, [r2, #0]
 80035f6:	b188      	cbz	r0, 800361c <__strtok_r+0x2c>
 80035f8:	4604      	mov	r4, r0
 80035fa:	4620      	mov	r0, r4
 80035fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003600:	460f      	mov	r7, r1
 8003602:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003606:	b91e      	cbnz	r6, 8003610 <__strtok_r+0x20>
 8003608:	b965      	cbnz	r5, 8003624 <__strtok_r+0x34>
 800360a:	6015      	str	r5, [r2, #0]
 800360c:	4628      	mov	r0, r5
 800360e:	e005      	b.n	800361c <__strtok_r+0x2c>
 8003610:	42b5      	cmp	r5, r6
 8003612:	d1f6      	bne.n	8003602 <__strtok_r+0x12>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <__strtok_r+0xa>
 8003618:	6014      	str	r4, [r2, #0]
 800361a:	7003      	strb	r3, [r0, #0]
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361e:	461c      	mov	r4, r3
 8003620:	e00c      	b.n	800363c <__strtok_r+0x4c>
 8003622:	b915      	cbnz	r5, 800362a <__strtok_r+0x3a>
 8003624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003628:	460e      	mov	r6, r1
 800362a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800362e:	42ab      	cmp	r3, r5
 8003630:	d1f7      	bne.n	8003622 <__strtok_r+0x32>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f3      	beq.n	800361e <__strtok_r+0x2e>
 8003636:	2300      	movs	r3, #0
 8003638:	f804 3c01 	strb.w	r3, [r4, #-1]
 800363c:	6014      	str	r4, [r2, #0]
 800363e:	e7ed      	b.n	800361c <__strtok_r+0x2c>

08003640 <_strtol_l.constprop.0>:
 8003640:	2b01      	cmp	r3, #1
 8003642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003646:	d001      	beq.n	800364c <_strtol_l.constprop.0+0xc>
 8003648:	2b24      	cmp	r3, #36	; 0x24
 800364a:	d906      	bls.n	800365a <_strtol_l.constprop.0+0x1a>
 800364c:	f7ff fa3a 	bl	8002ac4 <__errno>
 8003650:	2316      	movs	r3, #22
 8003652:	6003      	str	r3, [r0, #0]
 8003654:	2000      	movs	r0, #0
 8003656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003740 <_strtol_l.constprop.0+0x100>
 800365e:	460d      	mov	r5, r1
 8003660:	462e      	mov	r6, r5
 8003662:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003666:	f814 700c 	ldrb.w	r7, [r4, ip]
 800366a:	f017 0708 	ands.w	r7, r7, #8
 800366e:	d1f7      	bne.n	8003660 <_strtol_l.constprop.0+0x20>
 8003670:	2c2d      	cmp	r4, #45	; 0x2d
 8003672:	d132      	bne.n	80036da <_strtol_l.constprop.0+0x9a>
 8003674:	782c      	ldrb	r4, [r5, #0]
 8003676:	2701      	movs	r7, #1
 8003678:	1cb5      	adds	r5, r6, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d05b      	beq.n	8003736 <_strtol_l.constprop.0+0xf6>
 800367e:	2b10      	cmp	r3, #16
 8003680:	d109      	bne.n	8003696 <_strtol_l.constprop.0+0x56>
 8003682:	2c30      	cmp	r4, #48	; 0x30
 8003684:	d107      	bne.n	8003696 <_strtol_l.constprop.0+0x56>
 8003686:	782c      	ldrb	r4, [r5, #0]
 8003688:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800368c:	2c58      	cmp	r4, #88	; 0x58
 800368e:	d14d      	bne.n	800372c <_strtol_l.constprop.0+0xec>
 8003690:	786c      	ldrb	r4, [r5, #1]
 8003692:	2310      	movs	r3, #16
 8003694:	3502      	adds	r5, #2
 8003696:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800369a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800369e:	f04f 0c00 	mov.w	ip, #0
 80036a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80036a6:	4666      	mov	r6, ip
 80036a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80036ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80036b0:	f1be 0f09 	cmp.w	lr, #9
 80036b4:	d816      	bhi.n	80036e4 <_strtol_l.constprop.0+0xa4>
 80036b6:	4674      	mov	r4, lr
 80036b8:	42a3      	cmp	r3, r4
 80036ba:	dd24      	ble.n	8003706 <_strtol_l.constprop.0+0xc6>
 80036bc:	f1bc 0f00 	cmp.w	ip, #0
 80036c0:	db1e      	blt.n	8003700 <_strtol_l.constprop.0+0xc0>
 80036c2:	45b1      	cmp	r9, r6
 80036c4:	d31c      	bcc.n	8003700 <_strtol_l.constprop.0+0xc0>
 80036c6:	d101      	bne.n	80036cc <_strtol_l.constprop.0+0x8c>
 80036c8:	45a2      	cmp	sl, r4
 80036ca:	db19      	blt.n	8003700 <_strtol_l.constprop.0+0xc0>
 80036cc:	fb06 4603 	mla	r6, r6, r3, r4
 80036d0:	f04f 0c01 	mov.w	ip, #1
 80036d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036d8:	e7e8      	b.n	80036ac <_strtol_l.constprop.0+0x6c>
 80036da:	2c2b      	cmp	r4, #43	; 0x2b
 80036dc:	bf04      	itt	eq
 80036de:	782c      	ldrbeq	r4, [r5, #0]
 80036e0:	1cb5      	addeq	r5, r6, #2
 80036e2:	e7ca      	b.n	800367a <_strtol_l.constprop.0+0x3a>
 80036e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80036e8:	f1be 0f19 	cmp.w	lr, #25
 80036ec:	d801      	bhi.n	80036f2 <_strtol_l.constprop.0+0xb2>
 80036ee:	3c37      	subs	r4, #55	; 0x37
 80036f0:	e7e2      	b.n	80036b8 <_strtol_l.constprop.0+0x78>
 80036f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80036f6:	f1be 0f19 	cmp.w	lr, #25
 80036fa:	d804      	bhi.n	8003706 <_strtol_l.constprop.0+0xc6>
 80036fc:	3c57      	subs	r4, #87	; 0x57
 80036fe:	e7db      	b.n	80036b8 <_strtol_l.constprop.0+0x78>
 8003700:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003704:	e7e6      	b.n	80036d4 <_strtol_l.constprop.0+0x94>
 8003706:	f1bc 0f00 	cmp.w	ip, #0
 800370a:	da05      	bge.n	8003718 <_strtol_l.constprop.0+0xd8>
 800370c:	2322      	movs	r3, #34	; 0x22
 800370e:	6003      	str	r3, [r0, #0]
 8003710:	4646      	mov	r6, r8
 8003712:	b942      	cbnz	r2, 8003726 <_strtol_l.constprop.0+0xe6>
 8003714:	4630      	mov	r0, r6
 8003716:	e79e      	b.n	8003656 <_strtol_l.constprop.0+0x16>
 8003718:	b107      	cbz	r7, 800371c <_strtol_l.constprop.0+0xdc>
 800371a:	4276      	negs	r6, r6
 800371c:	2a00      	cmp	r2, #0
 800371e:	d0f9      	beq.n	8003714 <_strtol_l.constprop.0+0xd4>
 8003720:	f1bc 0f00 	cmp.w	ip, #0
 8003724:	d000      	beq.n	8003728 <_strtol_l.constprop.0+0xe8>
 8003726:	1e69      	subs	r1, r5, #1
 8003728:	6011      	str	r1, [r2, #0]
 800372a:	e7f3      	b.n	8003714 <_strtol_l.constprop.0+0xd4>
 800372c:	2430      	movs	r4, #48	; 0x30
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1b1      	bne.n	8003696 <_strtol_l.constprop.0+0x56>
 8003732:	2308      	movs	r3, #8
 8003734:	e7af      	b.n	8003696 <_strtol_l.constprop.0+0x56>
 8003736:	2c30      	cmp	r4, #48	; 0x30
 8003738:	d0a5      	beq.n	8003686 <_strtol_l.constprop.0+0x46>
 800373a:	230a      	movs	r3, #10
 800373c:	e7ab      	b.n	8003696 <_strtol_l.constprop.0+0x56>
 800373e:	bf00      	nop
 8003740:	08011fde 	.word	0x08011fde

08003744 <strtol>:
 8003744:	4613      	mov	r3, r2
 8003746:	460a      	mov	r2, r1
 8003748:	4601      	mov	r1, r0
 800374a:	4802      	ldr	r0, [pc, #8]	; (8003754 <strtol+0x10>)
 800374c:	6800      	ldr	r0, [r0, #0]
 800374e:	f7ff bf77 	b.w	8003640 <_strtol_l.constprop.0>
 8003752:	bf00      	nop
 8003754:	20000018 	.word	0x20000018

08003758 <_strtoul_l.constprop.0>:
 8003758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800375c:	4f36      	ldr	r7, [pc, #216]	; (8003838 <_strtoul_l.constprop.0+0xe0>)
 800375e:	4686      	mov	lr, r0
 8003760:	460d      	mov	r5, r1
 8003762:	4628      	mov	r0, r5
 8003764:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003768:	5de6      	ldrb	r6, [r4, r7]
 800376a:	f016 0608 	ands.w	r6, r6, #8
 800376e:	d1f8      	bne.n	8003762 <_strtoul_l.constprop.0+0xa>
 8003770:	2c2d      	cmp	r4, #45	; 0x2d
 8003772:	d12f      	bne.n	80037d4 <_strtoul_l.constprop.0+0x7c>
 8003774:	782c      	ldrb	r4, [r5, #0]
 8003776:	2601      	movs	r6, #1
 8003778:	1c85      	adds	r5, r0, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d057      	beq.n	800382e <_strtoul_l.constprop.0+0xd6>
 800377e:	2b10      	cmp	r3, #16
 8003780:	d109      	bne.n	8003796 <_strtoul_l.constprop.0+0x3e>
 8003782:	2c30      	cmp	r4, #48	; 0x30
 8003784:	d107      	bne.n	8003796 <_strtoul_l.constprop.0+0x3e>
 8003786:	7828      	ldrb	r0, [r5, #0]
 8003788:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800378c:	2858      	cmp	r0, #88	; 0x58
 800378e:	d149      	bne.n	8003824 <_strtoul_l.constprop.0+0xcc>
 8003790:	786c      	ldrb	r4, [r5, #1]
 8003792:	2310      	movs	r3, #16
 8003794:	3502      	adds	r5, #2
 8003796:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800379a:	2700      	movs	r7, #0
 800379c:	fbb8 f8f3 	udiv	r8, r8, r3
 80037a0:	fb03 f908 	mul.w	r9, r3, r8
 80037a4:	ea6f 0909 	mvn.w	r9, r9
 80037a8:	4638      	mov	r0, r7
 80037aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80037ae:	f1bc 0f09 	cmp.w	ip, #9
 80037b2:	d814      	bhi.n	80037de <_strtoul_l.constprop.0+0x86>
 80037b4:	4664      	mov	r4, ip
 80037b6:	42a3      	cmp	r3, r4
 80037b8:	dd22      	ble.n	8003800 <_strtoul_l.constprop.0+0xa8>
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	db1d      	blt.n	80037fa <_strtoul_l.constprop.0+0xa2>
 80037be:	4580      	cmp	r8, r0
 80037c0:	d31b      	bcc.n	80037fa <_strtoul_l.constprop.0+0xa2>
 80037c2:	d101      	bne.n	80037c8 <_strtoul_l.constprop.0+0x70>
 80037c4:	45a1      	cmp	r9, r4
 80037c6:	db18      	blt.n	80037fa <_strtoul_l.constprop.0+0xa2>
 80037c8:	fb00 4003 	mla	r0, r0, r3, r4
 80037cc:	2701      	movs	r7, #1
 80037ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037d2:	e7ea      	b.n	80037aa <_strtoul_l.constprop.0+0x52>
 80037d4:	2c2b      	cmp	r4, #43	; 0x2b
 80037d6:	bf04      	itt	eq
 80037d8:	782c      	ldrbeq	r4, [r5, #0]
 80037da:	1c85      	addeq	r5, r0, #2
 80037dc:	e7cd      	b.n	800377a <_strtoul_l.constprop.0+0x22>
 80037de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80037e2:	f1bc 0f19 	cmp.w	ip, #25
 80037e6:	d801      	bhi.n	80037ec <_strtoul_l.constprop.0+0x94>
 80037e8:	3c37      	subs	r4, #55	; 0x37
 80037ea:	e7e4      	b.n	80037b6 <_strtoul_l.constprop.0+0x5e>
 80037ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80037f0:	f1bc 0f19 	cmp.w	ip, #25
 80037f4:	d804      	bhi.n	8003800 <_strtoul_l.constprop.0+0xa8>
 80037f6:	3c57      	subs	r4, #87	; 0x57
 80037f8:	e7dd      	b.n	80037b6 <_strtoul_l.constprop.0+0x5e>
 80037fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80037fe:	e7e6      	b.n	80037ce <_strtoul_l.constprop.0+0x76>
 8003800:	2f00      	cmp	r7, #0
 8003802:	da07      	bge.n	8003814 <_strtoul_l.constprop.0+0xbc>
 8003804:	2322      	movs	r3, #34	; 0x22
 8003806:	f8ce 3000 	str.w	r3, [lr]
 800380a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800380e:	b932      	cbnz	r2, 800381e <_strtoul_l.constprop.0+0xc6>
 8003810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003814:	b106      	cbz	r6, 8003818 <_strtoul_l.constprop.0+0xc0>
 8003816:	4240      	negs	r0, r0
 8003818:	2a00      	cmp	r2, #0
 800381a:	d0f9      	beq.n	8003810 <_strtoul_l.constprop.0+0xb8>
 800381c:	b107      	cbz	r7, 8003820 <_strtoul_l.constprop.0+0xc8>
 800381e:	1e69      	subs	r1, r5, #1
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	e7f5      	b.n	8003810 <_strtoul_l.constprop.0+0xb8>
 8003824:	2430      	movs	r4, #48	; 0x30
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1b5      	bne.n	8003796 <_strtoul_l.constprop.0+0x3e>
 800382a:	2308      	movs	r3, #8
 800382c:	e7b3      	b.n	8003796 <_strtoul_l.constprop.0+0x3e>
 800382e:	2c30      	cmp	r4, #48	; 0x30
 8003830:	d0a9      	beq.n	8003786 <_strtoul_l.constprop.0+0x2e>
 8003832:	230a      	movs	r3, #10
 8003834:	e7af      	b.n	8003796 <_strtoul_l.constprop.0+0x3e>
 8003836:	bf00      	nop
 8003838:	08011fde 	.word	0x08011fde

0800383c <strtoul>:
 800383c:	4613      	mov	r3, r2
 800383e:	460a      	mov	r2, r1
 8003840:	4601      	mov	r1, r0
 8003842:	4802      	ldr	r0, [pc, #8]	; (800384c <strtoul+0x10>)
 8003844:	6800      	ldr	r0, [r0, #0]
 8003846:	f7ff bf87 	b.w	8003758 <_strtoul_l.constprop.0>
 800384a:	bf00      	nop
 800384c:	20000018 	.word	0x20000018

08003850 <__assert_func>:
 8003850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003852:	4614      	mov	r4, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <__assert_func+0x2c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4605      	mov	r5, r0
 800385c:	68d8      	ldr	r0, [r3, #12]
 800385e:	b14c      	cbz	r4, 8003874 <__assert_func+0x24>
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <__assert_func+0x30>)
 8003862:	9100      	str	r1, [sp, #0]
 8003864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003868:	4906      	ldr	r1, [pc, #24]	; (8003884 <__assert_func+0x34>)
 800386a:	462b      	mov	r3, r5
 800386c:	f001 f822 	bl	80048b4 <fiprintf>
 8003870:	f001 ff8c 	bl	800578c <abort>
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <__assert_func+0x38>)
 8003876:	461c      	mov	r4, r3
 8003878:	e7f3      	b.n	8003862 <__assert_func+0x12>
 800387a:	bf00      	nop
 800387c:	20000018 	.word	0x20000018
 8003880:	080121ac 	.word	0x080121ac
 8003884:	080121b9 	.word	0x080121b9
 8003888:	08008a05 	.word	0x08008a05

0800388c <quorem>:
 800388c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003890:	6903      	ldr	r3, [r0, #16]
 8003892:	690c      	ldr	r4, [r1, #16]
 8003894:	42a3      	cmp	r3, r4
 8003896:	4607      	mov	r7, r0
 8003898:	f2c0 8081 	blt.w	800399e <quorem+0x112>
 800389c:	3c01      	subs	r4, #1
 800389e:	f101 0814 	add.w	r8, r1, #20
 80038a2:	f100 0514 	add.w	r5, r0, #20
 80038a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80038b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038b4:	3301      	adds	r3, #1
 80038b6:	429a      	cmp	r2, r3
 80038b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80038bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80038c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80038c4:	d331      	bcc.n	800392a <quorem+0x9e>
 80038c6:	f04f 0e00 	mov.w	lr, #0
 80038ca:	4640      	mov	r0, r8
 80038cc:	46ac      	mov	ip, r5
 80038ce:	46f2      	mov	sl, lr
 80038d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80038d4:	b293      	uxth	r3, r2
 80038d6:	fb06 e303 	mla	r3, r6, r3, lr
 80038da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80038de:	b29b      	uxth	r3, r3
 80038e0:	ebaa 0303 	sub.w	r3, sl, r3
 80038e4:	0c12      	lsrs	r2, r2, #16
 80038e6:	f8dc a000 	ldr.w	sl, [ip]
 80038ea:	fb06 e202 	mla	r2, r6, r2, lr
 80038ee:	fa13 f38a 	uxtah	r3, r3, sl
 80038f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038f6:	fa1f fa82 	uxth.w	sl, r2
 80038fa:	f8dc 2000 	ldr.w	r2, [ip]
 80038fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003906:	b29b      	uxth	r3, r3
 8003908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800390c:	4581      	cmp	r9, r0
 800390e:	f84c 3b04 	str.w	r3, [ip], #4
 8003912:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003916:	d2db      	bcs.n	80038d0 <quorem+0x44>
 8003918:	f855 300b 	ldr.w	r3, [r5, fp]
 800391c:	b92b      	cbnz	r3, 800392a <quorem+0x9e>
 800391e:	9b01      	ldr	r3, [sp, #4]
 8003920:	3b04      	subs	r3, #4
 8003922:	429d      	cmp	r5, r3
 8003924:	461a      	mov	r2, r3
 8003926:	d32e      	bcc.n	8003986 <quorem+0xfa>
 8003928:	613c      	str	r4, [r7, #16]
 800392a:	4638      	mov	r0, r7
 800392c:	f001 fb0a 	bl	8004f44 <__mcmp>
 8003930:	2800      	cmp	r0, #0
 8003932:	db24      	blt.n	800397e <quorem+0xf2>
 8003934:	3601      	adds	r6, #1
 8003936:	4628      	mov	r0, r5
 8003938:	f04f 0c00 	mov.w	ip, #0
 800393c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003940:	f8d0 e000 	ldr.w	lr, [r0]
 8003944:	b293      	uxth	r3, r2
 8003946:	ebac 0303 	sub.w	r3, ip, r3
 800394a:	0c12      	lsrs	r2, r2, #16
 800394c:	fa13 f38e 	uxtah	r3, r3, lr
 8003950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003958:	b29b      	uxth	r3, r3
 800395a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800395e:	45c1      	cmp	r9, r8
 8003960:	f840 3b04 	str.w	r3, [r0], #4
 8003964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003968:	d2e8      	bcs.n	800393c <quorem+0xb0>
 800396a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800396e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003972:	b922      	cbnz	r2, 800397e <quorem+0xf2>
 8003974:	3b04      	subs	r3, #4
 8003976:	429d      	cmp	r5, r3
 8003978:	461a      	mov	r2, r3
 800397a:	d30a      	bcc.n	8003992 <quorem+0x106>
 800397c:	613c      	str	r4, [r7, #16]
 800397e:	4630      	mov	r0, r6
 8003980:	b003      	add	sp, #12
 8003982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	3b04      	subs	r3, #4
 800398a:	2a00      	cmp	r2, #0
 800398c:	d1cc      	bne.n	8003928 <quorem+0x9c>
 800398e:	3c01      	subs	r4, #1
 8003990:	e7c7      	b.n	8003922 <quorem+0x96>
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	3b04      	subs	r3, #4
 8003996:	2a00      	cmp	r2, #0
 8003998:	d1f0      	bne.n	800397c <quorem+0xf0>
 800399a:	3c01      	subs	r4, #1
 800399c:	e7eb      	b.n	8003976 <quorem+0xea>
 800399e:	2000      	movs	r0, #0
 80039a0:	e7ee      	b.n	8003980 <quorem+0xf4>
 80039a2:	0000      	movs	r0, r0
 80039a4:	0000      	movs	r0, r0
	...

080039a8 <_dtoa_r>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	ed2d 8b04 	vpush	{d8-d9}
 80039b0:	ec57 6b10 	vmov	r6, r7, d0
 80039b4:	b093      	sub	sp, #76	; 0x4c
 80039b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80039b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80039bc:	9106      	str	r1, [sp, #24]
 80039be:	ee10 aa10 	vmov	sl, s0
 80039c2:	4604      	mov	r4, r0
 80039c4:	9209      	str	r2, [sp, #36]	; 0x24
 80039c6:	930c      	str	r3, [sp, #48]	; 0x30
 80039c8:	46bb      	mov	fp, r7
 80039ca:	b975      	cbnz	r5, 80039ea <_dtoa_r+0x42>
 80039cc:	2010      	movs	r0, #16
 80039ce:	f001 f80f 	bl	80049f0 <malloc>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6260      	str	r0, [r4, #36]	; 0x24
 80039d6:	b920      	cbnz	r0, 80039e2 <_dtoa_r+0x3a>
 80039d8:	4ba7      	ldr	r3, [pc, #668]	; (8003c78 <_dtoa_r+0x2d0>)
 80039da:	21ea      	movs	r1, #234	; 0xea
 80039dc:	48a7      	ldr	r0, [pc, #668]	; (8003c7c <_dtoa_r+0x2d4>)
 80039de:	f7ff ff37 	bl	8003850 <__assert_func>
 80039e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80039e6:	6005      	str	r5, [r0, #0]
 80039e8:	60c5      	str	r5, [r0, #12]
 80039ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	b151      	cbz	r1, 8003a06 <_dtoa_r+0x5e>
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	604a      	str	r2, [r1, #4]
 80039f4:	2301      	movs	r3, #1
 80039f6:	4093      	lsls	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
 80039fa:	4620      	mov	r0, r4
 80039fc:	f001 f860 	bl	8004ac0 <_Bfree>
 8003a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	1e3b      	subs	r3, r7, #0
 8003a08:	bfaa      	itet	ge
 8003a0a:	2300      	movge	r3, #0
 8003a0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003a10:	f8c8 3000 	strge.w	r3, [r8]
 8003a14:	4b9a      	ldr	r3, [pc, #616]	; (8003c80 <_dtoa_r+0x2d8>)
 8003a16:	bfbc      	itt	lt
 8003a18:	2201      	movlt	r2, #1
 8003a1a:	f8c8 2000 	strlt.w	r2, [r8]
 8003a1e:	ea33 030b 	bics.w	r3, r3, fp
 8003a22:	d11b      	bne.n	8003a5c <_dtoa_r+0xb4>
 8003a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a26:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003a30:	4333      	orrs	r3, r6
 8003a32:	f000 8592 	beq.w	800455a <_dtoa_r+0xbb2>
 8003a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a38:	b963      	cbnz	r3, 8003a54 <_dtoa_r+0xac>
 8003a3a:	4b92      	ldr	r3, [pc, #584]	; (8003c84 <_dtoa_r+0x2dc>)
 8003a3c:	e022      	b.n	8003a84 <_dtoa_r+0xdc>
 8003a3e:	4b92      	ldr	r3, [pc, #584]	; (8003c88 <_dtoa_r+0x2e0>)
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	3308      	adds	r3, #8
 8003a44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	9801      	ldr	r0, [sp, #4]
 8003a4a:	b013      	add	sp, #76	; 0x4c
 8003a4c:	ecbd 8b04 	vpop	{d8-d9}
 8003a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a54:	4b8b      	ldr	r3, [pc, #556]	; (8003c84 <_dtoa_r+0x2dc>)
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	3303      	adds	r3, #3
 8003a5a:	e7f3      	b.n	8003a44 <_dtoa_r+0x9c>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4650      	mov	r0, sl
 8003a62:	4659      	mov	r1, fp
 8003a64:	f7fd f858 	bl	8000b18 <__aeabi_dcmpeq>
 8003a68:	ec4b ab19 	vmov	d9, sl, fp
 8003a6c:	4680      	mov	r8, r0
 8003a6e:	b158      	cbz	r0, 8003a88 <_dtoa_r+0xe0>
 8003a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a72:	2301      	movs	r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 856b 	beq.w	8004554 <_dtoa_r+0xbac>
 8003a7e:	4883      	ldr	r0, [pc, #524]	; (8003c8c <_dtoa_r+0x2e4>)
 8003a80:	6018      	str	r0, [r3, #0]
 8003a82:	1e43      	subs	r3, r0, #1
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	e7df      	b.n	8003a48 <_dtoa_r+0xa0>
 8003a88:	ec4b ab10 	vmov	d0, sl, fp
 8003a8c:	aa10      	add	r2, sp, #64	; 0x40
 8003a8e:	a911      	add	r1, sp, #68	; 0x44
 8003a90:	4620      	mov	r0, r4
 8003a92:	f001 fafd 	bl	8005090 <__d2b>
 8003a96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003a9a:	ee08 0a10 	vmov	s16, r0
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	f000 8084 	beq.w	8003bac <_dtoa_r+0x204>
 8003aa4:	ee19 3a90 	vmov	r3, s19
 8003aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003ab0:	4656      	mov	r6, sl
 8003ab2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003ab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003aba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003abe:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <_dtoa_r+0x2e8>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fc fc07 	bl	80002d8 <__aeabi_dsub>
 8003aca:	a365      	add	r3, pc, #404	; (adr r3, 8003c60 <_dtoa_r+0x2b8>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f7fc fdba 	bl	8000648 <__aeabi_dmul>
 8003ad4:	a364      	add	r3, pc, #400	; (adr r3, 8003c68 <_dtoa_r+0x2c0>)
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	f7fc fbff 	bl	80002dc <__adddf3>
 8003ade:	4606      	mov	r6, r0
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	460f      	mov	r7, r1
 8003ae4:	f7fc fd46 	bl	8000574 <__aeabi_i2d>
 8003ae8:	a361      	add	r3, pc, #388	; (adr r3, 8003c70 <_dtoa_r+0x2c8>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fdab 	bl	8000648 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4630      	mov	r0, r6
 8003af8:	4639      	mov	r1, r7
 8003afa:	f7fc fbef 	bl	80002dc <__adddf3>
 8003afe:	4606      	mov	r6, r0
 8003b00:	460f      	mov	r7, r1
 8003b02:	f7fd f851 	bl	8000ba8 <__aeabi_d2iz>
 8003b06:	2200      	movs	r2, #0
 8003b08:	9000      	str	r0, [sp, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	4639      	mov	r1, r7
 8003b10:	f7fd f80c 	bl	8000b2c <__aeabi_dcmplt>
 8003b14:	b150      	cbz	r0, 8003b2c <_dtoa_r+0x184>
 8003b16:	9800      	ldr	r0, [sp, #0]
 8003b18:	f7fc fd2c 	bl	8000574 <__aeabi_i2d>
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	463b      	mov	r3, r7
 8003b20:	f7fc fffa 	bl	8000b18 <__aeabi_dcmpeq>
 8003b24:	b910      	cbnz	r0, 8003b2c <_dtoa_r+0x184>
 8003b26:	9b00      	ldr	r3, [sp, #0]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	9b00      	ldr	r3, [sp, #0]
 8003b2e:	2b16      	cmp	r3, #22
 8003b30:	d85a      	bhi.n	8003be8 <_dtoa_r+0x240>
 8003b32:	9a00      	ldr	r2, [sp, #0]
 8003b34:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <_dtoa_r+0x2ec>)
 8003b36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	ec51 0b19 	vmov	r0, r1, d9
 8003b42:	f7fc fff3 	bl	8000b2c <__aeabi_dcmplt>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d050      	beq.n	8003bec <_dtoa_r+0x244>
 8003b4a:	9b00      	ldr	r3, [sp, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b56:	1b5d      	subs	r5, r3, r5
 8003b58:	1e6b      	subs	r3, r5, #1
 8003b5a:	9305      	str	r3, [sp, #20]
 8003b5c:	bf45      	ittet	mi
 8003b5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8003b62:	9304      	strmi	r3, [sp, #16]
 8003b64:	2300      	movpl	r3, #0
 8003b66:	2300      	movmi	r3, #0
 8003b68:	bf4c      	ite	mi
 8003b6a:	9305      	strmi	r3, [sp, #20]
 8003b6c:	9304      	strpl	r3, [sp, #16]
 8003b6e:	9b00      	ldr	r3, [sp, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db3d      	blt.n	8003bf0 <_dtoa_r+0x248>
 8003b74:	9b05      	ldr	r3, [sp, #20]
 8003b76:	9a00      	ldr	r2, [sp, #0]
 8003b78:	920a      	str	r2, [sp, #40]	; 0x28
 8003b7a:	4413      	add	r3, r2
 8003b7c:	9305      	str	r3, [sp, #20]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9307      	str	r3, [sp, #28]
 8003b82:	9b06      	ldr	r3, [sp, #24]
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	f200 8089 	bhi.w	8003c9c <_dtoa_r+0x2f4>
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	bfc4      	itt	gt
 8003b8e:	3b04      	subgt	r3, #4
 8003b90:	9306      	strgt	r3, [sp, #24]
 8003b92:	9b06      	ldr	r3, [sp, #24]
 8003b94:	f1a3 0302 	sub.w	r3, r3, #2
 8003b98:	bfcc      	ite	gt
 8003b9a:	2500      	movgt	r5, #0
 8003b9c:	2501      	movle	r5, #1
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	f200 8087 	bhi.w	8003cb2 <_dtoa_r+0x30a>
 8003ba4:	e8df f003 	tbb	[pc, r3]
 8003ba8:	59383a2d 	.word	0x59383a2d
 8003bac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003bb0:	441d      	add	r5, r3
 8003bb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	bfc1      	itttt	gt
 8003bba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003bbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003bc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8003bc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003bca:	bfda      	itte	le
 8003bcc:	f1c3 0320 	rsble	r3, r3, #32
 8003bd0:	fa06 f003 	lslle.w	r0, r6, r3
 8003bd4:	4318      	orrgt	r0, r3
 8003bd6:	f7fc fcbd 	bl	8000554 <__aeabi_ui2d>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4606      	mov	r6, r0
 8003bde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003be2:	3d01      	subs	r5, #1
 8003be4:	930e      	str	r3, [sp, #56]	; 0x38
 8003be6:	e76a      	b.n	8003abe <_dtoa_r+0x116>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e7b2      	b.n	8003b52 <_dtoa_r+0x1aa>
 8003bec:	900b      	str	r0, [sp, #44]	; 0x2c
 8003bee:	e7b1      	b.n	8003b54 <_dtoa_r+0x1ac>
 8003bf0:	9b04      	ldr	r3, [sp, #16]
 8003bf2:	9a00      	ldr	r2, [sp, #0]
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	9304      	str	r3, [sp, #16]
 8003bf8:	4253      	negs	r3, r2
 8003bfa:	9307      	str	r3, [sp, #28]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8003c00:	e7bf      	b.n	8003b82 <_dtoa_r+0x1da>
 8003c02:	2300      	movs	r3, #0
 8003c04:	9308      	str	r3, [sp, #32]
 8003c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	dc55      	bgt.n	8003cb8 <_dtoa_r+0x310>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c12:	461a      	mov	r2, r3
 8003c14:	9209      	str	r2, [sp, #36]	; 0x24
 8003c16:	e00c      	b.n	8003c32 <_dtoa_r+0x28a>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e7f3      	b.n	8003c04 <_dtoa_r+0x25c>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c20:	9308      	str	r3, [sp, #32]
 8003c22:	9b00      	ldr	r3, [sp, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	9302      	str	r3, [sp, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	9303      	str	r3, [sp, #12]
 8003c2e:	bfb8      	it	lt
 8003c30:	2301      	movlt	r3, #1
 8003c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c34:	2200      	movs	r2, #0
 8003c36:	6042      	str	r2, [r0, #4]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	f102 0614 	add.w	r6, r2, #20
 8003c3e:	429e      	cmp	r6, r3
 8003c40:	6841      	ldr	r1, [r0, #4]
 8003c42:	d93d      	bls.n	8003cc0 <_dtoa_r+0x318>
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 fefb 	bl	8004a40 <_Balloc>
 8003c4a:	9001      	str	r0, [sp, #4]
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d13b      	bne.n	8003cc8 <_dtoa_r+0x320>
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <_dtoa_r+0x2f0>)
 8003c52:	4602      	mov	r2, r0
 8003c54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c58:	e6c0      	b.n	80039dc <_dtoa_r+0x34>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e7df      	b.n	8003c1e <_dtoa_r+0x276>
 8003c5e:	bf00      	nop
 8003c60:	636f4361 	.word	0x636f4361
 8003c64:	3fd287a7 	.word	0x3fd287a7
 8003c68:	8b60c8b3 	.word	0x8b60c8b3
 8003c6c:	3fc68a28 	.word	0x3fc68a28
 8003c70:	509f79fb 	.word	0x509f79fb
 8003c74:	3fd34413 	.word	0x3fd34413
 8003c78:	08012116 	.word	0x08012116
 8003c7c:	080121f5 	.word	0x080121f5
 8003c80:	7ff00000 	.word	0x7ff00000
 8003c84:	080121f1 	.word	0x080121f1
 8003c88:	080121e8 	.word	0x080121e8
 8003c8c:	0800819d 	.word	0x0800819d
 8003c90:	3ff80000 	.word	0x3ff80000
 8003c94:	08012390 	.word	0x08012390
 8003c98:	08012272 	.word	0x08012272
 8003c9c:	2501      	movs	r5, #1
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9306      	str	r3, [sp, #24]
 8003ca2:	9508      	str	r5, [sp, #32]
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ca8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2312      	movs	r3, #18
 8003cb0:	e7b0      	b.n	8003c14 <_dtoa_r+0x26c>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	9308      	str	r3, [sp, #32]
 8003cb6:	e7f5      	b.n	8003ca4 <_dtoa_r+0x2fc>
 8003cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003cbe:	e7b8      	b.n	8003c32 <_dtoa_r+0x28a>
 8003cc0:	3101      	adds	r1, #1
 8003cc2:	6041      	str	r1, [r0, #4]
 8003cc4:	0052      	lsls	r2, r2, #1
 8003cc6:	e7b8      	b.n	8003c3a <_dtoa_r+0x292>
 8003cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cca:	9a01      	ldr	r2, [sp, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	2b0e      	cmp	r3, #14
 8003cd2:	f200 809d 	bhi.w	8003e10 <_dtoa_r+0x468>
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	f000 809a 	beq.w	8003e10 <_dtoa_r+0x468>
 8003cdc:	9b00      	ldr	r3, [sp, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	dd32      	ble.n	8003d48 <_dtoa_r+0x3a0>
 8003ce2:	4ab7      	ldr	r2, [pc, #732]	; (8003fc0 <_dtoa_r+0x618>)
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003cec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cf0:	9b00      	ldr	r3, [sp, #0]
 8003cf2:	05d8      	lsls	r0, r3, #23
 8003cf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003cf8:	d516      	bpl.n	8003d28 <_dtoa_r+0x380>
 8003cfa:	4bb2      	ldr	r3, [pc, #712]	; (8003fc4 <_dtoa_r+0x61c>)
 8003cfc:	ec51 0b19 	vmov	r0, r1, d9
 8003d00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d04:	f7fc fdca 	bl	800089c <__aeabi_ddiv>
 8003d08:	f007 070f 	and.w	r7, r7, #15
 8003d0c:	4682      	mov	sl, r0
 8003d0e:	468b      	mov	fp, r1
 8003d10:	2503      	movs	r5, #3
 8003d12:	4eac      	ldr	r6, [pc, #688]	; (8003fc4 <_dtoa_r+0x61c>)
 8003d14:	b957      	cbnz	r7, 8003d2c <_dtoa_r+0x384>
 8003d16:	4642      	mov	r2, r8
 8003d18:	464b      	mov	r3, r9
 8003d1a:	4650      	mov	r0, sl
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	f7fc fdbd 	bl	800089c <__aeabi_ddiv>
 8003d22:	4682      	mov	sl, r0
 8003d24:	468b      	mov	fp, r1
 8003d26:	e028      	b.n	8003d7a <_dtoa_r+0x3d2>
 8003d28:	2502      	movs	r5, #2
 8003d2a:	e7f2      	b.n	8003d12 <_dtoa_r+0x36a>
 8003d2c:	07f9      	lsls	r1, r7, #31
 8003d2e:	d508      	bpl.n	8003d42 <_dtoa_r+0x39a>
 8003d30:	4640      	mov	r0, r8
 8003d32:	4649      	mov	r1, r9
 8003d34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d38:	f7fc fc86 	bl	8000648 <__aeabi_dmul>
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	4680      	mov	r8, r0
 8003d40:	4689      	mov	r9, r1
 8003d42:	107f      	asrs	r7, r7, #1
 8003d44:	3608      	adds	r6, #8
 8003d46:	e7e5      	b.n	8003d14 <_dtoa_r+0x36c>
 8003d48:	f000 809b 	beq.w	8003e82 <_dtoa_r+0x4da>
 8003d4c:	9b00      	ldr	r3, [sp, #0]
 8003d4e:	4f9d      	ldr	r7, [pc, #628]	; (8003fc4 <_dtoa_r+0x61c>)
 8003d50:	425e      	negs	r6, r3
 8003d52:	4b9b      	ldr	r3, [pc, #620]	; (8003fc0 <_dtoa_r+0x618>)
 8003d54:	f006 020f 	and.w	r2, r6, #15
 8003d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	ec51 0b19 	vmov	r0, r1, d9
 8003d64:	f7fc fc70 	bl	8000648 <__aeabi_dmul>
 8003d68:	1136      	asrs	r6, r6, #4
 8003d6a:	4682      	mov	sl, r0
 8003d6c:	468b      	mov	fp, r1
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2502      	movs	r5, #2
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	d17a      	bne.n	8003e6c <_dtoa_r+0x4c4>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1d3      	bne.n	8003d22 <_dtoa_r+0x37a>
 8003d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8082 	beq.w	8003e86 <_dtoa_r+0x4de>
 8003d82:	4b91      	ldr	r3, [pc, #580]	; (8003fc8 <_dtoa_r+0x620>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	4650      	mov	r0, sl
 8003d88:	4659      	mov	r1, fp
 8003d8a:	f7fc fecf 	bl	8000b2c <__aeabi_dcmplt>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d079      	beq.n	8003e86 <_dtoa_r+0x4de>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d076      	beq.n	8003e86 <_dtoa_r+0x4de>
 8003d98:	9b02      	ldr	r3, [sp, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	dd36      	ble.n	8003e0c <_dtoa_r+0x464>
 8003d9e:	9b00      	ldr	r3, [sp, #0]
 8003da0:	4650      	mov	r0, sl
 8003da2:	4659      	mov	r1, fp
 8003da4:	1e5f      	subs	r7, r3, #1
 8003da6:	2200      	movs	r2, #0
 8003da8:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <_dtoa_r+0x624>)
 8003daa:	f7fc fc4d 	bl	8000648 <__aeabi_dmul>
 8003dae:	9e02      	ldr	r6, [sp, #8]
 8003db0:	4682      	mov	sl, r0
 8003db2:	468b      	mov	fp, r1
 8003db4:	3501      	adds	r5, #1
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fc fbdc 	bl	8000574 <__aeabi_i2d>
 8003dbc:	4652      	mov	r2, sl
 8003dbe:	465b      	mov	r3, fp
 8003dc0:	f7fc fc42 	bl	8000648 <__aeabi_dmul>
 8003dc4:	4b82      	ldr	r3, [pc, #520]	; (8003fd0 <_dtoa_r+0x628>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f7fc fa88 	bl	80002dc <__adddf3>
 8003dcc:	46d0      	mov	r8, sl
 8003dce:	46d9      	mov	r9, fp
 8003dd0:	4682      	mov	sl, r0
 8003dd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d158      	bne.n	8003e8c <_dtoa_r+0x4e4>
 8003dda:	4b7e      	ldr	r3, [pc, #504]	; (8003fd4 <_dtoa_r+0x62c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4640      	mov	r0, r8
 8003de0:	4649      	mov	r1, r9
 8003de2:	f7fc fa79 	bl	80002d8 <__aeabi_dsub>
 8003de6:	4652      	mov	r2, sl
 8003de8:	465b      	mov	r3, fp
 8003dea:	4680      	mov	r8, r0
 8003dec:	4689      	mov	r9, r1
 8003dee:	f7fc febb 	bl	8000b68 <__aeabi_dcmpgt>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	f040 8295 	bne.w	8004322 <_dtoa_r+0x97a>
 8003df8:	4652      	mov	r2, sl
 8003dfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003dfe:	4640      	mov	r0, r8
 8003e00:	4649      	mov	r1, r9
 8003e02:	f7fc fe93 	bl	8000b2c <__aeabi_dcmplt>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f040 8289 	bne.w	800431e <_dtoa_r+0x976>
 8003e0c:	ec5b ab19 	vmov	sl, fp, d9
 8003e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f2c0 8148 	blt.w	80040a8 <_dtoa_r+0x700>
 8003e18:	9a00      	ldr	r2, [sp, #0]
 8003e1a:	2a0e      	cmp	r2, #14
 8003e1c:	f300 8144 	bgt.w	80040a8 <_dtoa_r+0x700>
 8003e20:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <_dtoa_r+0x618>)
 8003e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f280 80d5 	bge.w	8003fdc <_dtoa_r+0x634>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f300 80d1 	bgt.w	8003fdc <_dtoa_r+0x634>
 8003e3a:	f040 826f 	bne.w	800431c <_dtoa_r+0x974>
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <_dtoa_r+0x62c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	4640      	mov	r0, r8
 8003e44:	4649      	mov	r1, r9
 8003e46:	f7fc fbff 	bl	8000648 <__aeabi_dmul>
 8003e4a:	4652      	mov	r2, sl
 8003e4c:	465b      	mov	r3, fp
 8003e4e:	f7fc fe81 	bl	8000b54 <__aeabi_dcmpge>
 8003e52:	9e03      	ldr	r6, [sp, #12]
 8003e54:	4637      	mov	r7, r6
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f040 8245 	bne.w	80042e6 <_dtoa_r+0x93e>
 8003e5c:	9d01      	ldr	r5, [sp, #4]
 8003e5e:	2331      	movs	r3, #49	; 0x31
 8003e60:	f805 3b01 	strb.w	r3, [r5], #1
 8003e64:	9b00      	ldr	r3, [sp, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	e240      	b.n	80042ee <_dtoa_r+0x946>
 8003e6c:	07f2      	lsls	r2, r6, #31
 8003e6e:	d505      	bpl.n	8003e7c <_dtoa_r+0x4d4>
 8003e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e74:	f7fc fbe8 	bl	8000648 <__aeabi_dmul>
 8003e78:	3501      	adds	r5, #1
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	1076      	asrs	r6, r6, #1
 8003e7e:	3708      	adds	r7, #8
 8003e80:	e777      	b.n	8003d72 <_dtoa_r+0x3ca>
 8003e82:	2502      	movs	r5, #2
 8003e84:	e779      	b.n	8003d7a <_dtoa_r+0x3d2>
 8003e86:	9f00      	ldr	r7, [sp, #0]
 8003e88:	9e03      	ldr	r6, [sp, #12]
 8003e8a:	e794      	b.n	8003db6 <_dtoa_r+0x40e>
 8003e8c:	9901      	ldr	r1, [sp, #4]
 8003e8e:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <_dtoa_r+0x618>)
 8003e90:	4431      	add	r1, r6
 8003e92:	910d      	str	r1, [sp, #52]	; 0x34
 8003e94:	9908      	ldr	r1, [sp, #32]
 8003e96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d043      	beq.n	8003f2a <_dtoa_r+0x582>
 8003ea2:	494d      	ldr	r1, [pc, #308]	; (8003fd8 <_dtoa_r+0x630>)
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fc fcf9 	bl	800089c <__aeabi_ddiv>
 8003eaa:	4652      	mov	r2, sl
 8003eac:	465b      	mov	r3, fp
 8003eae:	f7fc fa13 	bl	80002d8 <__aeabi_dsub>
 8003eb2:	9d01      	ldr	r5, [sp, #4]
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	468b      	mov	fp, r1
 8003eb8:	4649      	mov	r1, r9
 8003eba:	4640      	mov	r0, r8
 8003ebc:	f7fc fe74 	bl	8000ba8 <__aeabi_d2iz>
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	f7fc fb57 	bl	8000574 <__aeabi_i2d>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4640      	mov	r0, r8
 8003ecc:	4649      	mov	r1, r9
 8003ece:	f7fc fa03 	bl	80002d8 <__aeabi_dsub>
 8003ed2:	3630      	adds	r6, #48	; 0x30
 8003ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8003ed8:	4652      	mov	r2, sl
 8003eda:	465b      	mov	r3, fp
 8003edc:	4680      	mov	r8, r0
 8003ede:	4689      	mov	r9, r1
 8003ee0:	f7fc fe24 	bl	8000b2c <__aeabi_dcmplt>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d163      	bne.n	8003fb0 <_dtoa_r+0x608>
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	4936      	ldr	r1, [pc, #216]	; (8003fc8 <_dtoa_r+0x620>)
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f7fc f9f2 	bl	80002d8 <__aeabi_dsub>
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	465b      	mov	r3, fp
 8003ef8:	f7fc fe18 	bl	8000b2c <__aeabi_dcmplt>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	f040 80b5 	bne.w	800406c <_dtoa_r+0x6c4>
 8003f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f04:	429d      	cmp	r5, r3
 8003f06:	d081      	beq.n	8003e0c <_dtoa_r+0x464>
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <_dtoa_r+0x624>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	4659      	mov	r1, fp
 8003f10:	f7fc fb9a 	bl	8000648 <__aeabi_dmul>
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <_dtoa_r+0x624>)
 8003f16:	4682      	mov	sl, r0
 8003f18:	468b      	mov	fp, r1
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f7fc fb92 	bl	8000648 <__aeabi_dmul>
 8003f24:	4680      	mov	r8, r0
 8003f26:	4689      	mov	r9, r1
 8003f28:	e7c6      	b.n	8003eb8 <_dtoa_r+0x510>
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	f7fc fb8b 	bl	8000648 <__aeabi_dmul>
 8003f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f34:	9d01      	ldr	r5, [sp, #4]
 8003f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f38:	4682      	mov	sl, r0
 8003f3a:	468b      	mov	fp, r1
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	4640      	mov	r0, r8
 8003f40:	f7fc fe32 	bl	8000ba8 <__aeabi_d2iz>
 8003f44:	4606      	mov	r6, r0
 8003f46:	f7fc fb15 	bl	8000574 <__aeabi_i2d>
 8003f4a:	3630      	adds	r6, #48	; 0x30
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc f9c0 	bl	80002d8 <__aeabi_dsub>
 8003f58:	f805 6b01 	strb.w	r6, [r5], #1
 8003f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f5e:	429d      	cmp	r5, r3
 8003f60:	4680      	mov	r8, r0
 8003f62:	4689      	mov	r9, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	d124      	bne.n	8003fb4 <_dtoa_r+0x60c>
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <_dtoa_r+0x630>)
 8003f6c:	4650      	mov	r0, sl
 8003f6e:	4659      	mov	r1, fp
 8003f70:	f7fc f9b4 	bl	80002dc <__adddf3>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4640      	mov	r0, r8
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	f7fc fdf4 	bl	8000b68 <__aeabi_dcmpgt>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d173      	bne.n	800406c <_dtoa_r+0x6c4>
 8003f84:	4652      	mov	r2, sl
 8003f86:	465b      	mov	r3, fp
 8003f88:	4913      	ldr	r1, [pc, #76]	; (8003fd8 <_dtoa_r+0x630>)
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7fc f9a4 	bl	80002d8 <__aeabi_dsub>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4640      	mov	r0, r8
 8003f96:	4649      	mov	r1, r9
 8003f98:	f7fc fdc8 	bl	8000b2c <__aeabi_dcmplt>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f43f af35 	beq.w	8003e0c <_dtoa_r+0x464>
 8003fa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003fa4:	1e6b      	subs	r3, r5, #1
 8003fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d0f8      	beq.n	8003fa2 <_dtoa_r+0x5fa>
 8003fb0:	9700      	str	r7, [sp, #0]
 8003fb2:	e049      	b.n	8004048 <_dtoa_r+0x6a0>
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <_dtoa_r+0x624>)
 8003fb6:	f7fc fb47 	bl	8000648 <__aeabi_dmul>
 8003fba:	4680      	mov	r8, r0
 8003fbc:	4689      	mov	r9, r1
 8003fbe:	e7bd      	b.n	8003f3c <_dtoa_r+0x594>
 8003fc0:	08012390 	.word	0x08012390
 8003fc4:	08012368 	.word	0x08012368
 8003fc8:	3ff00000 	.word	0x3ff00000
 8003fcc:	40240000 	.word	0x40240000
 8003fd0:	401c0000 	.word	0x401c0000
 8003fd4:	40140000 	.word	0x40140000
 8003fd8:	3fe00000 	.word	0x3fe00000
 8003fdc:	9d01      	ldr	r5, [sp, #4]
 8003fde:	4656      	mov	r6, sl
 8003fe0:	465f      	mov	r7, fp
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	4639      	mov	r1, r7
 8003fea:	f7fc fc57 	bl	800089c <__aeabi_ddiv>
 8003fee:	f7fc fddb 	bl	8000ba8 <__aeabi_d2iz>
 8003ff2:	4682      	mov	sl, r0
 8003ff4:	f7fc fabe 	bl	8000574 <__aeabi_i2d>
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	f7fc fb24 	bl	8000648 <__aeabi_dmul>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4630      	mov	r0, r6
 8004006:	4639      	mov	r1, r7
 8004008:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800400c:	f7fc f964 	bl	80002d8 <__aeabi_dsub>
 8004010:	f805 6b01 	strb.w	r6, [r5], #1
 8004014:	9e01      	ldr	r6, [sp, #4]
 8004016:	9f03      	ldr	r7, [sp, #12]
 8004018:	1bae      	subs	r6, r5, r6
 800401a:	42b7      	cmp	r7, r6
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	d135      	bne.n	800408e <_dtoa_r+0x6e6>
 8004022:	f7fc f95b 	bl	80002dc <__adddf3>
 8004026:	4642      	mov	r2, r8
 8004028:	464b      	mov	r3, r9
 800402a:	4606      	mov	r6, r0
 800402c:	460f      	mov	r7, r1
 800402e:	f7fc fd9b 	bl	8000b68 <__aeabi_dcmpgt>
 8004032:	b9d0      	cbnz	r0, 800406a <_dtoa_r+0x6c2>
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	4630      	mov	r0, r6
 800403a:	4639      	mov	r1, r7
 800403c:	f7fc fd6c 	bl	8000b18 <__aeabi_dcmpeq>
 8004040:	b110      	cbz	r0, 8004048 <_dtoa_r+0x6a0>
 8004042:	f01a 0f01 	tst.w	sl, #1
 8004046:	d110      	bne.n	800406a <_dtoa_r+0x6c2>
 8004048:	4620      	mov	r0, r4
 800404a:	ee18 1a10 	vmov	r1, s16
 800404e:	f000 fd37 	bl	8004ac0 <_Bfree>
 8004052:	2300      	movs	r3, #0
 8004054:	9800      	ldr	r0, [sp, #0]
 8004056:	702b      	strb	r3, [r5, #0]
 8004058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800405a:	3001      	adds	r0, #1
 800405c:	6018      	str	r0, [r3, #0]
 800405e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004060:	2b00      	cmp	r3, #0
 8004062:	f43f acf1 	beq.w	8003a48 <_dtoa_r+0xa0>
 8004066:	601d      	str	r5, [r3, #0]
 8004068:	e4ee      	b.n	8003a48 <_dtoa_r+0xa0>
 800406a:	9f00      	ldr	r7, [sp, #0]
 800406c:	462b      	mov	r3, r5
 800406e:	461d      	mov	r5, r3
 8004070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004074:	2a39      	cmp	r2, #57	; 0x39
 8004076:	d106      	bne.n	8004086 <_dtoa_r+0x6de>
 8004078:	9a01      	ldr	r2, [sp, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d1f7      	bne.n	800406e <_dtoa_r+0x6c6>
 800407e:	9901      	ldr	r1, [sp, #4]
 8004080:	2230      	movs	r2, #48	; 0x30
 8004082:	3701      	adds	r7, #1
 8004084:	700a      	strb	r2, [r1, #0]
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	3201      	adds	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e790      	b.n	8003fb0 <_dtoa_r+0x608>
 800408e:	4ba6      	ldr	r3, [pc, #664]	; (8004328 <_dtoa_r+0x980>)
 8004090:	2200      	movs	r2, #0
 8004092:	f7fc fad9 	bl	8000648 <__aeabi_dmul>
 8004096:	2200      	movs	r2, #0
 8004098:	2300      	movs	r3, #0
 800409a:	4606      	mov	r6, r0
 800409c:	460f      	mov	r7, r1
 800409e:	f7fc fd3b 	bl	8000b18 <__aeabi_dcmpeq>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d09d      	beq.n	8003fe2 <_dtoa_r+0x63a>
 80040a6:	e7cf      	b.n	8004048 <_dtoa_r+0x6a0>
 80040a8:	9a08      	ldr	r2, [sp, #32]
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	f000 80d7 	beq.w	800425e <_dtoa_r+0x8b6>
 80040b0:	9a06      	ldr	r2, [sp, #24]
 80040b2:	2a01      	cmp	r2, #1
 80040b4:	f300 80ba 	bgt.w	800422c <_dtoa_r+0x884>
 80040b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	f000 80b2 	beq.w	8004224 <_dtoa_r+0x87c>
 80040c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040c4:	9e07      	ldr	r6, [sp, #28]
 80040c6:	9d04      	ldr	r5, [sp, #16]
 80040c8:	9a04      	ldr	r2, [sp, #16]
 80040ca:	441a      	add	r2, r3
 80040cc:	9204      	str	r2, [sp, #16]
 80040ce:	9a05      	ldr	r2, [sp, #20]
 80040d0:	2101      	movs	r1, #1
 80040d2:	441a      	add	r2, r3
 80040d4:	4620      	mov	r0, r4
 80040d6:	9205      	str	r2, [sp, #20]
 80040d8:	f000 fdaa 	bl	8004c30 <__i2b>
 80040dc:	4607      	mov	r7, r0
 80040de:	2d00      	cmp	r5, #0
 80040e0:	dd0c      	ble.n	80040fc <_dtoa_r+0x754>
 80040e2:	9b05      	ldr	r3, [sp, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dd09      	ble.n	80040fc <_dtoa_r+0x754>
 80040e8:	42ab      	cmp	r3, r5
 80040ea:	9a04      	ldr	r2, [sp, #16]
 80040ec:	bfa8      	it	ge
 80040ee:	462b      	movge	r3, r5
 80040f0:	1ad2      	subs	r2, r2, r3
 80040f2:	9204      	str	r2, [sp, #16]
 80040f4:	9a05      	ldr	r2, [sp, #20]
 80040f6:	1aed      	subs	r5, r5, r3
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	9305      	str	r3, [sp, #20]
 80040fc:	9b07      	ldr	r3, [sp, #28]
 80040fe:	b31b      	cbz	r3, 8004148 <_dtoa_r+0x7a0>
 8004100:	9b08      	ldr	r3, [sp, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80af 	beq.w	8004266 <_dtoa_r+0x8be>
 8004108:	2e00      	cmp	r6, #0
 800410a:	dd13      	ble.n	8004134 <_dtoa_r+0x78c>
 800410c:	4639      	mov	r1, r7
 800410e:	4632      	mov	r2, r6
 8004110:	4620      	mov	r0, r4
 8004112:	f000 fe4d 	bl	8004db0 <__pow5mult>
 8004116:	ee18 2a10 	vmov	r2, s16
 800411a:	4601      	mov	r1, r0
 800411c:	4607      	mov	r7, r0
 800411e:	4620      	mov	r0, r4
 8004120:	f000 fd9c 	bl	8004c5c <__multiply>
 8004124:	ee18 1a10 	vmov	r1, s16
 8004128:	4680      	mov	r8, r0
 800412a:	4620      	mov	r0, r4
 800412c:	f000 fcc8 	bl	8004ac0 <_Bfree>
 8004130:	ee08 8a10 	vmov	s16, r8
 8004134:	9b07      	ldr	r3, [sp, #28]
 8004136:	1b9a      	subs	r2, r3, r6
 8004138:	d006      	beq.n	8004148 <_dtoa_r+0x7a0>
 800413a:	ee18 1a10 	vmov	r1, s16
 800413e:	4620      	mov	r0, r4
 8004140:	f000 fe36 	bl	8004db0 <__pow5mult>
 8004144:	ee08 0a10 	vmov	s16, r0
 8004148:	2101      	movs	r1, #1
 800414a:	4620      	mov	r0, r4
 800414c:	f000 fd70 	bl	8004c30 <__i2b>
 8004150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	4606      	mov	r6, r0
 8004156:	f340 8088 	ble.w	800426a <_dtoa_r+0x8c2>
 800415a:	461a      	mov	r2, r3
 800415c:	4601      	mov	r1, r0
 800415e:	4620      	mov	r0, r4
 8004160:	f000 fe26 	bl	8004db0 <__pow5mult>
 8004164:	9b06      	ldr	r3, [sp, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	4606      	mov	r6, r0
 800416a:	f340 8081 	ble.w	8004270 <_dtoa_r+0x8c8>
 800416e:	f04f 0800 	mov.w	r8, #0
 8004172:	6933      	ldr	r3, [r6, #16]
 8004174:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004178:	6918      	ldr	r0, [r3, #16]
 800417a:	f000 fd09 	bl	8004b90 <__hi0bits>
 800417e:	f1c0 0020 	rsb	r0, r0, #32
 8004182:	9b05      	ldr	r3, [sp, #20]
 8004184:	4418      	add	r0, r3
 8004186:	f010 001f 	ands.w	r0, r0, #31
 800418a:	f000 8092 	beq.w	80042b2 <_dtoa_r+0x90a>
 800418e:	f1c0 0320 	rsb	r3, r0, #32
 8004192:	2b04      	cmp	r3, #4
 8004194:	f340 808a 	ble.w	80042ac <_dtoa_r+0x904>
 8004198:	f1c0 001c 	rsb	r0, r0, #28
 800419c:	9b04      	ldr	r3, [sp, #16]
 800419e:	4403      	add	r3, r0
 80041a0:	9304      	str	r3, [sp, #16]
 80041a2:	9b05      	ldr	r3, [sp, #20]
 80041a4:	4403      	add	r3, r0
 80041a6:	4405      	add	r5, r0
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	9b04      	ldr	r3, [sp, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dd07      	ble.n	80041c0 <_dtoa_r+0x818>
 80041b0:	ee18 1a10 	vmov	r1, s16
 80041b4:	461a      	mov	r2, r3
 80041b6:	4620      	mov	r0, r4
 80041b8:	f000 fe54 	bl	8004e64 <__lshift>
 80041bc:	ee08 0a10 	vmov	s16, r0
 80041c0:	9b05      	ldr	r3, [sp, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	dd05      	ble.n	80041d2 <_dtoa_r+0x82a>
 80041c6:	4631      	mov	r1, r6
 80041c8:	461a      	mov	r2, r3
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fe4a 	bl	8004e64 <__lshift>
 80041d0:	4606      	mov	r6, r0
 80041d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d06e      	beq.n	80042b6 <_dtoa_r+0x90e>
 80041d8:	ee18 0a10 	vmov	r0, s16
 80041dc:	4631      	mov	r1, r6
 80041de:	f000 feb1 	bl	8004f44 <__mcmp>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	da67      	bge.n	80042b6 <_dtoa_r+0x90e>
 80041e6:	9b00      	ldr	r3, [sp, #0]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	ee18 1a10 	vmov	r1, s16
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	220a      	movs	r2, #10
 80041f2:	2300      	movs	r3, #0
 80041f4:	4620      	mov	r0, r4
 80041f6:	f000 fc85 	bl	8004b04 <__multadd>
 80041fa:	9b08      	ldr	r3, [sp, #32]
 80041fc:	ee08 0a10 	vmov	s16, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 81b1 	beq.w	8004568 <_dtoa_r+0xbc0>
 8004206:	2300      	movs	r3, #0
 8004208:	4639      	mov	r1, r7
 800420a:	220a      	movs	r2, #10
 800420c:	4620      	mov	r0, r4
 800420e:	f000 fc79 	bl	8004b04 <__multadd>
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	4607      	mov	r7, r0
 8004218:	f300 808e 	bgt.w	8004338 <_dtoa_r+0x990>
 800421c:	9b06      	ldr	r3, [sp, #24]
 800421e:	2b02      	cmp	r3, #2
 8004220:	dc51      	bgt.n	80042c6 <_dtoa_r+0x91e>
 8004222:	e089      	b.n	8004338 <_dtoa_r+0x990>
 8004224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800422a:	e74b      	b.n	80040c4 <_dtoa_r+0x71c>
 800422c:	9b03      	ldr	r3, [sp, #12]
 800422e:	1e5e      	subs	r6, r3, #1
 8004230:	9b07      	ldr	r3, [sp, #28]
 8004232:	42b3      	cmp	r3, r6
 8004234:	bfbf      	itttt	lt
 8004236:	9b07      	ldrlt	r3, [sp, #28]
 8004238:	9607      	strlt	r6, [sp, #28]
 800423a:	1af2      	sublt	r2, r6, r3
 800423c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800423e:	bfb6      	itet	lt
 8004240:	189b      	addlt	r3, r3, r2
 8004242:	1b9e      	subge	r6, r3, r6
 8004244:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004246:	9b03      	ldr	r3, [sp, #12]
 8004248:	bfb8      	it	lt
 800424a:	2600      	movlt	r6, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	bfb7      	itett	lt
 8004250:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004254:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004258:	1a9d      	sublt	r5, r3, r2
 800425a:	2300      	movlt	r3, #0
 800425c:	e734      	b.n	80040c8 <_dtoa_r+0x720>
 800425e:	9e07      	ldr	r6, [sp, #28]
 8004260:	9d04      	ldr	r5, [sp, #16]
 8004262:	9f08      	ldr	r7, [sp, #32]
 8004264:	e73b      	b.n	80040de <_dtoa_r+0x736>
 8004266:	9a07      	ldr	r2, [sp, #28]
 8004268:	e767      	b.n	800413a <_dtoa_r+0x792>
 800426a:	9b06      	ldr	r3, [sp, #24]
 800426c:	2b01      	cmp	r3, #1
 800426e:	dc18      	bgt.n	80042a2 <_dtoa_r+0x8fa>
 8004270:	f1ba 0f00 	cmp.w	sl, #0
 8004274:	d115      	bne.n	80042a2 <_dtoa_r+0x8fa>
 8004276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800427a:	b993      	cbnz	r3, 80042a2 <_dtoa_r+0x8fa>
 800427c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004280:	0d1b      	lsrs	r3, r3, #20
 8004282:	051b      	lsls	r3, r3, #20
 8004284:	b183      	cbz	r3, 80042a8 <_dtoa_r+0x900>
 8004286:	9b04      	ldr	r3, [sp, #16]
 8004288:	3301      	adds	r3, #1
 800428a:	9304      	str	r3, [sp, #16]
 800428c:	9b05      	ldr	r3, [sp, #20]
 800428e:	3301      	adds	r3, #1
 8004290:	9305      	str	r3, [sp, #20]
 8004292:	f04f 0801 	mov.w	r8, #1
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f af6a 	bne.w	8004172 <_dtoa_r+0x7ca>
 800429e:	2001      	movs	r0, #1
 80042a0:	e76f      	b.n	8004182 <_dtoa_r+0x7da>
 80042a2:	f04f 0800 	mov.w	r8, #0
 80042a6:	e7f6      	b.n	8004296 <_dtoa_r+0x8ee>
 80042a8:	4698      	mov	r8, r3
 80042aa:	e7f4      	b.n	8004296 <_dtoa_r+0x8ee>
 80042ac:	f43f af7d 	beq.w	80041aa <_dtoa_r+0x802>
 80042b0:	4618      	mov	r0, r3
 80042b2:	301c      	adds	r0, #28
 80042b4:	e772      	b.n	800419c <_dtoa_r+0x7f4>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dc37      	bgt.n	800432c <_dtoa_r+0x984>
 80042bc:	9b06      	ldr	r3, [sp, #24]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	dd34      	ble.n	800432c <_dtoa_r+0x984>
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	9302      	str	r3, [sp, #8]
 80042c6:	9b02      	ldr	r3, [sp, #8]
 80042c8:	b96b      	cbnz	r3, 80042e6 <_dtoa_r+0x93e>
 80042ca:	4631      	mov	r1, r6
 80042cc:	2205      	movs	r2, #5
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 fc18 	bl	8004b04 <__multadd>
 80042d4:	4601      	mov	r1, r0
 80042d6:	4606      	mov	r6, r0
 80042d8:	ee18 0a10 	vmov	r0, s16
 80042dc:	f000 fe32 	bl	8004f44 <__mcmp>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	f73f adbb 	bgt.w	8003e5c <_dtoa_r+0x4b4>
 80042e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e8:	9d01      	ldr	r5, [sp, #4]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 0800 	mov.w	r8, #0
 80042f2:	4631      	mov	r1, r6
 80042f4:	4620      	mov	r0, r4
 80042f6:	f000 fbe3 	bl	8004ac0 <_Bfree>
 80042fa:	2f00      	cmp	r7, #0
 80042fc:	f43f aea4 	beq.w	8004048 <_dtoa_r+0x6a0>
 8004300:	f1b8 0f00 	cmp.w	r8, #0
 8004304:	d005      	beq.n	8004312 <_dtoa_r+0x96a>
 8004306:	45b8      	cmp	r8, r7
 8004308:	d003      	beq.n	8004312 <_dtoa_r+0x96a>
 800430a:	4641      	mov	r1, r8
 800430c:	4620      	mov	r0, r4
 800430e:	f000 fbd7 	bl	8004ac0 <_Bfree>
 8004312:	4639      	mov	r1, r7
 8004314:	4620      	mov	r0, r4
 8004316:	f000 fbd3 	bl	8004ac0 <_Bfree>
 800431a:	e695      	b.n	8004048 <_dtoa_r+0x6a0>
 800431c:	2600      	movs	r6, #0
 800431e:	4637      	mov	r7, r6
 8004320:	e7e1      	b.n	80042e6 <_dtoa_r+0x93e>
 8004322:	9700      	str	r7, [sp, #0]
 8004324:	4637      	mov	r7, r6
 8004326:	e599      	b.n	8003e5c <_dtoa_r+0x4b4>
 8004328:	40240000 	.word	0x40240000
 800432c:	9b08      	ldr	r3, [sp, #32]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80ca 	beq.w	80044c8 <_dtoa_r+0xb20>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	9302      	str	r3, [sp, #8]
 8004338:	2d00      	cmp	r5, #0
 800433a:	dd05      	ble.n	8004348 <_dtoa_r+0x9a0>
 800433c:	4639      	mov	r1, r7
 800433e:	462a      	mov	r2, r5
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fd8f 	bl	8004e64 <__lshift>
 8004346:	4607      	mov	r7, r0
 8004348:	f1b8 0f00 	cmp.w	r8, #0
 800434c:	d05b      	beq.n	8004406 <_dtoa_r+0xa5e>
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4620      	mov	r0, r4
 8004352:	f000 fb75 	bl	8004a40 <_Balloc>
 8004356:	4605      	mov	r5, r0
 8004358:	b928      	cbnz	r0, 8004366 <_dtoa_r+0x9be>
 800435a:	4b87      	ldr	r3, [pc, #540]	; (8004578 <_dtoa_r+0xbd0>)
 800435c:	4602      	mov	r2, r0
 800435e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004362:	f7ff bb3b 	b.w	80039dc <_dtoa_r+0x34>
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	3202      	adds	r2, #2
 800436a:	0092      	lsls	r2, r2, #2
 800436c:	f107 010c 	add.w	r1, r7, #12
 8004370:	300c      	adds	r0, #12
 8004372:	f000 fb57 	bl	8004a24 <memcpy>
 8004376:	2201      	movs	r2, #1
 8004378:	4629      	mov	r1, r5
 800437a:	4620      	mov	r0, r4
 800437c:	f000 fd72 	bl	8004e64 <__lshift>
 8004380:	9b01      	ldr	r3, [sp, #4]
 8004382:	f103 0901 	add.w	r9, r3, #1
 8004386:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800438a:	4413      	add	r3, r2
 800438c:	9305      	str	r3, [sp, #20]
 800438e:	f00a 0301 	and.w	r3, sl, #1
 8004392:	46b8      	mov	r8, r7
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	4607      	mov	r7, r0
 8004398:	4631      	mov	r1, r6
 800439a:	ee18 0a10 	vmov	r0, s16
 800439e:	f7ff fa75 	bl	800388c <quorem>
 80043a2:	4641      	mov	r1, r8
 80043a4:	9002      	str	r0, [sp, #8]
 80043a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80043aa:	ee18 0a10 	vmov	r0, s16
 80043ae:	f000 fdc9 	bl	8004f44 <__mcmp>
 80043b2:	463a      	mov	r2, r7
 80043b4:	9003      	str	r0, [sp, #12]
 80043b6:	4631      	mov	r1, r6
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fddf 	bl	8004f7c <__mdiff>
 80043be:	68c2      	ldr	r2, [r0, #12]
 80043c0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80043c4:	4605      	mov	r5, r0
 80043c6:	bb02      	cbnz	r2, 800440a <_dtoa_r+0xa62>
 80043c8:	4601      	mov	r1, r0
 80043ca:	ee18 0a10 	vmov	r0, s16
 80043ce:	f000 fdb9 	bl	8004f44 <__mcmp>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4629      	mov	r1, r5
 80043d6:	4620      	mov	r0, r4
 80043d8:	9207      	str	r2, [sp, #28]
 80043da:	f000 fb71 	bl	8004ac0 <_Bfree>
 80043de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80043e2:	ea43 0102 	orr.w	r1, r3, r2
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	464d      	mov	r5, r9
 80043ec:	d10f      	bne.n	800440e <_dtoa_r+0xa66>
 80043ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80043f2:	d02a      	beq.n	800444a <_dtoa_r+0xaa2>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dd02      	ble.n	8004400 <_dtoa_r+0xa58>
 80043fa:	9b02      	ldr	r3, [sp, #8]
 80043fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004400:	f88b a000 	strb.w	sl, [fp]
 8004404:	e775      	b.n	80042f2 <_dtoa_r+0x94a>
 8004406:	4638      	mov	r0, r7
 8004408:	e7ba      	b.n	8004380 <_dtoa_r+0x9d8>
 800440a:	2201      	movs	r2, #1
 800440c:	e7e2      	b.n	80043d4 <_dtoa_r+0xa2c>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	db04      	blt.n	800441e <_dtoa_r+0xa76>
 8004414:	9906      	ldr	r1, [sp, #24]
 8004416:	430b      	orrs	r3, r1
 8004418:	9904      	ldr	r1, [sp, #16]
 800441a:	430b      	orrs	r3, r1
 800441c:	d122      	bne.n	8004464 <_dtoa_r+0xabc>
 800441e:	2a00      	cmp	r2, #0
 8004420:	ddee      	ble.n	8004400 <_dtoa_r+0xa58>
 8004422:	ee18 1a10 	vmov	r1, s16
 8004426:	2201      	movs	r2, #1
 8004428:	4620      	mov	r0, r4
 800442a:	f000 fd1b 	bl	8004e64 <__lshift>
 800442e:	4631      	mov	r1, r6
 8004430:	ee08 0a10 	vmov	s16, r0
 8004434:	f000 fd86 	bl	8004f44 <__mcmp>
 8004438:	2800      	cmp	r0, #0
 800443a:	dc03      	bgt.n	8004444 <_dtoa_r+0xa9c>
 800443c:	d1e0      	bne.n	8004400 <_dtoa_r+0xa58>
 800443e:	f01a 0f01 	tst.w	sl, #1
 8004442:	d0dd      	beq.n	8004400 <_dtoa_r+0xa58>
 8004444:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004448:	d1d7      	bne.n	80043fa <_dtoa_r+0xa52>
 800444a:	2339      	movs	r3, #57	; 0x39
 800444c:	f88b 3000 	strb.w	r3, [fp]
 8004450:	462b      	mov	r3, r5
 8004452:	461d      	mov	r5, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800445a:	2a39      	cmp	r2, #57	; 0x39
 800445c:	d071      	beq.n	8004542 <_dtoa_r+0xb9a>
 800445e:	3201      	adds	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e746      	b.n	80042f2 <_dtoa_r+0x94a>
 8004464:	2a00      	cmp	r2, #0
 8004466:	dd07      	ble.n	8004478 <_dtoa_r+0xad0>
 8004468:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800446c:	d0ed      	beq.n	800444a <_dtoa_r+0xaa2>
 800446e:	f10a 0301 	add.w	r3, sl, #1
 8004472:	f88b 3000 	strb.w	r3, [fp]
 8004476:	e73c      	b.n	80042f2 <_dtoa_r+0x94a>
 8004478:	9b05      	ldr	r3, [sp, #20]
 800447a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800447e:	4599      	cmp	r9, r3
 8004480:	d047      	beq.n	8004512 <_dtoa_r+0xb6a>
 8004482:	ee18 1a10 	vmov	r1, s16
 8004486:	2300      	movs	r3, #0
 8004488:	220a      	movs	r2, #10
 800448a:	4620      	mov	r0, r4
 800448c:	f000 fb3a 	bl	8004b04 <__multadd>
 8004490:	45b8      	cmp	r8, r7
 8004492:	ee08 0a10 	vmov	s16, r0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	f04f 020a 	mov.w	r2, #10
 800449e:	4641      	mov	r1, r8
 80044a0:	4620      	mov	r0, r4
 80044a2:	d106      	bne.n	80044b2 <_dtoa_r+0xb0a>
 80044a4:	f000 fb2e 	bl	8004b04 <__multadd>
 80044a8:	4680      	mov	r8, r0
 80044aa:	4607      	mov	r7, r0
 80044ac:	f109 0901 	add.w	r9, r9, #1
 80044b0:	e772      	b.n	8004398 <_dtoa_r+0x9f0>
 80044b2:	f000 fb27 	bl	8004b04 <__multadd>
 80044b6:	4639      	mov	r1, r7
 80044b8:	4680      	mov	r8, r0
 80044ba:	2300      	movs	r3, #0
 80044bc:	220a      	movs	r2, #10
 80044be:	4620      	mov	r0, r4
 80044c0:	f000 fb20 	bl	8004b04 <__multadd>
 80044c4:	4607      	mov	r7, r0
 80044c6:	e7f1      	b.n	80044ac <_dtoa_r+0xb04>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	9302      	str	r3, [sp, #8]
 80044cc:	9d01      	ldr	r5, [sp, #4]
 80044ce:	ee18 0a10 	vmov	r0, s16
 80044d2:	4631      	mov	r1, r6
 80044d4:	f7ff f9da 	bl	800388c <quorem>
 80044d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80044dc:	9b01      	ldr	r3, [sp, #4]
 80044de:	f805 ab01 	strb.w	sl, [r5], #1
 80044e2:	1aea      	subs	r2, r5, r3
 80044e4:	9b02      	ldr	r3, [sp, #8]
 80044e6:	4293      	cmp	r3, r2
 80044e8:	dd09      	ble.n	80044fe <_dtoa_r+0xb56>
 80044ea:	ee18 1a10 	vmov	r1, s16
 80044ee:	2300      	movs	r3, #0
 80044f0:	220a      	movs	r2, #10
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 fb06 	bl	8004b04 <__multadd>
 80044f8:	ee08 0a10 	vmov	s16, r0
 80044fc:	e7e7      	b.n	80044ce <_dtoa_r+0xb26>
 80044fe:	9b02      	ldr	r3, [sp, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	bfc8      	it	gt
 8004504:	461d      	movgt	r5, r3
 8004506:	9b01      	ldr	r3, [sp, #4]
 8004508:	bfd8      	it	le
 800450a:	2501      	movle	r5, #1
 800450c:	441d      	add	r5, r3
 800450e:	f04f 0800 	mov.w	r8, #0
 8004512:	ee18 1a10 	vmov	r1, s16
 8004516:	2201      	movs	r2, #1
 8004518:	4620      	mov	r0, r4
 800451a:	f000 fca3 	bl	8004e64 <__lshift>
 800451e:	4631      	mov	r1, r6
 8004520:	ee08 0a10 	vmov	s16, r0
 8004524:	f000 fd0e 	bl	8004f44 <__mcmp>
 8004528:	2800      	cmp	r0, #0
 800452a:	dc91      	bgt.n	8004450 <_dtoa_r+0xaa8>
 800452c:	d102      	bne.n	8004534 <_dtoa_r+0xb8c>
 800452e:	f01a 0f01 	tst.w	sl, #1
 8004532:	d18d      	bne.n	8004450 <_dtoa_r+0xaa8>
 8004534:	462b      	mov	r3, r5
 8004536:	461d      	mov	r5, r3
 8004538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800453c:	2a30      	cmp	r2, #48	; 0x30
 800453e:	d0fa      	beq.n	8004536 <_dtoa_r+0xb8e>
 8004540:	e6d7      	b.n	80042f2 <_dtoa_r+0x94a>
 8004542:	9a01      	ldr	r2, [sp, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d184      	bne.n	8004452 <_dtoa_r+0xaaa>
 8004548:	9b00      	ldr	r3, [sp, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2331      	movs	r3, #49	; 0x31
 8004550:	7013      	strb	r3, [r2, #0]
 8004552:	e6ce      	b.n	80042f2 <_dtoa_r+0x94a>
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <_dtoa_r+0xbd4>)
 8004556:	f7ff ba95 	b.w	8003a84 <_dtoa_r+0xdc>
 800455a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800455c:	2b00      	cmp	r3, #0
 800455e:	f47f aa6e 	bne.w	8003a3e <_dtoa_r+0x96>
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <_dtoa_r+0xbd8>)
 8004564:	f7ff ba8e 	b.w	8003a84 <_dtoa_r+0xdc>
 8004568:	9b02      	ldr	r3, [sp, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dcae      	bgt.n	80044cc <_dtoa_r+0xb24>
 800456e:	9b06      	ldr	r3, [sp, #24]
 8004570:	2b02      	cmp	r3, #2
 8004572:	f73f aea8 	bgt.w	80042c6 <_dtoa_r+0x91e>
 8004576:	e7a9      	b.n	80044cc <_dtoa_r+0xb24>
 8004578:	08012272 	.word	0x08012272
 800457c:	0800819c 	.word	0x0800819c
 8004580:	080121e8 	.word	0x080121e8

08004584 <__sflush_r>:
 8004584:	898a      	ldrh	r2, [r1, #12]
 8004586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	4605      	mov	r5, r0
 800458c:	0710      	lsls	r0, r2, #28
 800458e:	460c      	mov	r4, r1
 8004590:	d458      	bmi.n	8004644 <__sflush_r+0xc0>
 8004592:	684b      	ldr	r3, [r1, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dc05      	bgt.n	80045a4 <__sflush_r+0x20>
 8004598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	dc02      	bgt.n	80045a4 <__sflush_r+0x20>
 800459e:	2000      	movs	r0, #0
 80045a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045a6:	2e00      	cmp	r6, #0
 80045a8:	d0f9      	beq.n	800459e <__sflush_r+0x1a>
 80045aa:	2300      	movs	r3, #0
 80045ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045b0:	682f      	ldr	r7, [r5, #0]
 80045b2:	602b      	str	r3, [r5, #0]
 80045b4:	d032      	beq.n	800461c <__sflush_r+0x98>
 80045b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	075a      	lsls	r2, r3, #29
 80045bc:	d505      	bpl.n	80045ca <__sflush_r+0x46>
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	1ac0      	subs	r0, r0, r3
 80045c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045c4:	b10b      	cbz	r3, 80045ca <__sflush_r+0x46>
 80045c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045c8:	1ac0      	subs	r0, r0, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	4602      	mov	r2, r0
 80045ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045d0:	6a21      	ldr	r1, [r4, #32]
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b0      	blx	r6
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	d106      	bne.n	80045ea <__sflush_r+0x66>
 80045dc:	6829      	ldr	r1, [r5, #0]
 80045de:	291d      	cmp	r1, #29
 80045e0:	d82c      	bhi.n	800463c <__sflush_r+0xb8>
 80045e2:	4a2a      	ldr	r2, [pc, #168]	; (800468c <__sflush_r+0x108>)
 80045e4:	40ca      	lsrs	r2, r1
 80045e6:	07d6      	lsls	r6, r2, #31
 80045e8:	d528      	bpl.n	800463c <__sflush_r+0xb8>
 80045ea:	2200      	movs	r2, #0
 80045ec:	6062      	str	r2, [r4, #4]
 80045ee:	04d9      	lsls	r1, r3, #19
 80045f0:	6922      	ldr	r2, [r4, #16]
 80045f2:	6022      	str	r2, [r4, #0]
 80045f4:	d504      	bpl.n	8004600 <__sflush_r+0x7c>
 80045f6:	1c42      	adds	r2, r0, #1
 80045f8:	d101      	bne.n	80045fe <__sflush_r+0x7a>
 80045fa:	682b      	ldr	r3, [r5, #0]
 80045fc:	b903      	cbnz	r3, 8004600 <__sflush_r+0x7c>
 80045fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004602:	602f      	str	r7, [r5, #0]
 8004604:	2900      	cmp	r1, #0
 8004606:	d0ca      	beq.n	800459e <__sflush_r+0x1a>
 8004608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800460c:	4299      	cmp	r1, r3
 800460e:	d002      	beq.n	8004616 <__sflush_r+0x92>
 8004610:	4628      	mov	r0, r5
 8004612:	f000 fda9 	bl	8005168 <_free_r>
 8004616:	2000      	movs	r0, #0
 8004618:	6360      	str	r0, [r4, #52]	; 0x34
 800461a:	e7c1      	b.n	80045a0 <__sflush_r+0x1c>
 800461c:	6a21      	ldr	r1, [r4, #32]
 800461e:	2301      	movs	r3, #1
 8004620:	4628      	mov	r0, r5
 8004622:	47b0      	blx	r6
 8004624:	1c41      	adds	r1, r0, #1
 8004626:	d1c7      	bne.n	80045b8 <__sflush_r+0x34>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0c4      	beq.n	80045b8 <__sflush_r+0x34>
 800462e:	2b1d      	cmp	r3, #29
 8004630:	d001      	beq.n	8004636 <__sflush_r+0xb2>
 8004632:	2b16      	cmp	r3, #22
 8004634:	d101      	bne.n	800463a <__sflush_r+0xb6>
 8004636:	602f      	str	r7, [r5, #0]
 8004638:	e7b1      	b.n	800459e <__sflush_r+0x1a>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	e7ad      	b.n	80045a0 <__sflush_r+0x1c>
 8004644:	690f      	ldr	r7, [r1, #16]
 8004646:	2f00      	cmp	r7, #0
 8004648:	d0a9      	beq.n	800459e <__sflush_r+0x1a>
 800464a:	0793      	lsls	r3, r2, #30
 800464c:	680e      	ldr	r6, [r1, #0]
 800464e:	bf08      	it	eq
 8004650:	694b      	ldreq	r3, [r1, #20]
 8004652:	600f      	str	r7, [r1, #0]
 8004654:	bf18      	it	ne
 8004656:	2300      	movne	r3, #0
 8004658:	eba6 0807 	sub.w	r8, r6, r7
 800465c:	608b      	str	r3, [r1, #8]
 800465e:	f1b8 0f00 	cmp.w	r8, #0
 8004662:	dd9c      	ble.n	800459e <__sflush_r+0x1a>
 8004664:	6a21      	ldr	r1, [r4, #32]
 8004666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004668:	4643      	mov	r3, r8
 800466a:	463a      	mov	r2, r7
 800466c:	4628      	mov	r0, r5
 800466e:	47b0      	blx	r6
 8004670:	2800      	cmp	r0, #0
 8004672:	dc06      	bgt.n	8004682 <__sflush_r+0xfe>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004680:	e78e      	b.n	80045a0 <__sflush_r+0x1c>
 8004682:	4407      	add	r7, r0
 8004684:	eba8 0800 	sub.w	r8, r8, r0
 8004688:	e7e9      	b.n	800465e <__sflush_r+0xda>
 800468a:	bf00      	nop
 800468c:	20400001 	.word	0x20400001

08004690 <_fflush_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	690b      	ldr	r3, [r1, #16]
 8004694:	4605      	mov	r5, r0
 8004696:	460c      	mov	r4, r1
 8004698:	b913      	cbnz	r3, 80046a0 <_fflush_r+0x10>
 800469a:	2500      	movs	r5, #0
 800469c:	4628      	mov	r0, r5
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	b118      	cbz	r0, 80046aa <_fflush_r+0x1a>
 80046a2:	6983      	ldr	r3, [r0, #24]
 80046a4:	b90b      	cbnz	r3, 80046aa <_fflush_r+0x1a>
 80046a6:	f000 f887 	bl	80047b8 <__sinit>
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <_fflush_r+0x6c>)
 80046ac:	429c      	cmp	r4, r3
 80046ae:	d11b      	bne.n	80046e8 <_fflush_r+0x58>
 80046b0:	686c      	ldr	r4, [r5, #4]
 80046b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ef      	beq.n	800469a <_fflush_r+0xa>
 80046ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046bc:	07d0      	lsls	r0, r2, #31
 80046be:	d404      	bmi.n	80046ca <_fflush_r+0x3a>
 80046c0:	0599      	lsls	r1, r3, #22
 80046c2:	d402      	bmi.n	80046ca <_fflush_r+0x3a>
 80046c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c6:	f000 f92c 	bl	8004922 <__retarget_lock_acquire_recursive>
 80046ca:	4628      	mov	r0, r5
 80046cc:	4621      	mov	r1, r4
 80046ce:	f7ff ff59 	bl	8004584 <__sflush_r>
 80046d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046d4:	07da      	lsls	r2, r3, #31
 80046d6:	4605      	mov	r5, r0
 80046d8:	d4e0      	bmi.n	800469c <_fflush_r+0xc>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	059b      	lsls	r3, r3, #22
 80046de:	d4dd      	bmi.n	800469c <_fflush_r+0xc>
 80046e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046e2:	f000 f91f 	bl	8004924 <__retarget_lock_release_recursive>
 80046e6:	e7d9      	b.n	800469c <_fflush_r+0xc>
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <_fflush_r+0x70>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d101      	bne.n	80046f2 <_fflush_r+0x62>
 80046ee:	68ac      	ldr	r4, [r5, #8]
 80046f0:	e7df      	b.n	80046b2 <_fflush_r+0x22>
 80046f2:	4b04      	ldr	r3, [pc, #16]	; (8004704 <_fflush_r+0x74>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	bf08      	it	eq
 80046f8:	68ec      	ldreq	r4, [r5, #12]
 80046fa:	e7da      	b.n	80046b2 <_fflush_r+0x22>
 80046fc:	080122a4 	.word	0x080122a4
 8004700:	080122c4 	.word	0x080122c4
 8004704:	08012284 	.word	0x08012284

08004708 <std>:
 8004708:	2300      	movs	r3, #0
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	e9c0 3300 	strd	r3, r3, [r0]
 8004712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004716:	6083      	str	r3, [r0, #8]
 8004718:	8181      	strh	r1, [r0, #12]
 800471a:	6643      	str	r3, [r0, #100]	; 0x64
 800471c:	81c2      	strh	r2, [r0, #14]
 800471e:	6183      	str	r3, [r0, #24]
 8004720:	4619      	mov	r1, r3
 8004722:	2208      	movs	r2, #8
 8004724:	305c      	adds	r0, #92	; 0x5c
 8004726:	f7fe f9f7 	bl	8002b18 <memset>
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <std+0x38>)
 800472c:	6263      	str	r3, [r4, #36]	; 0x24
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <std+0x3c>)
 8004730:	62a3      	str	r3, [r4, #40]	; 0x28
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <std+0x40>)
 8004734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <std+0x44>)
 8004738:	6224      	str	r4, [r4, #32]
 800473a:	6323      	str	r3, [r4, #48]	; 0x30
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop
 8004740:	08005569 	.word	0x08005569
 8004744:	0800558b 	.word	0x0800558b
 8004748:	080055c3 	.word	0x080055c3
 800474c:	080055e7 	.word	0x080055e7

08004750 <_cleanup_r>:
 8004750:	4901      	ldr	r1, [pc, #4]	; (8004758 <_cleanup_r+0x8>)
 8004752:	f000 b8c1 	b.w	80048d8 <_fwalk_reent>
 8004756:	bf00      	nop
 8004758:	08004691 	.word	0x08004691

0800475c <__sfmoreglue>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	2268      	movs	r2, #104	; 0x68
 8004760:	1e4d      	subs	r5, r1, #1
 8004762:	4355      	muls	r5, r2
 8004764:	460e      	mov	r6, r1
 8004766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800476a:	f000 fd49 	bl	8005200 <_malloc_r>
 800476e:	4604      	mov	r4, r0
 8004770:	b140      	cbz	r0, 8004784 <__sfmoreglue+0x28>
 8004772:	2100      	movs	r1, #0
 8004774:	e9c0 1600 	strd	r1, r6, [r0]
 8004778:	300c      	adds	r0, #12
 800477a:	60a0      	str	r0, [r4, #8]
 800477c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004780:	f7fe f9ca 	bl	8002b18 <memset>
 8004784:	4620      	mov	r0, r4
 8004786:	bd70      	pop	{r4, r5, r6, pc}

08004788 <__sfp_lock_acquire>:
 8004788:	4801      	ldr	r0, [pc, #4]	; (8004790 <__sfp_lock_acquire+0x8>)
 800478a:	f000 b8ca 	b.w	8004922 <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	20000bad 	.word	0x20000bad

08004794 <__sfp_lock_release>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__sfp_lock_release+0x8>)
 8004796:	f000 b8c5 	b.w	8004924 <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	20000bad 	.word	0x20000bad

080047a0 <__sinit_lock_acquire>:
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <__sinit_lock_acquire+0x8>)
 80047a2:	f000 b8be 	b.w	8004922 <__retarget_lock_acquire_recursive>
 80047a6:	bf00      	nop
 80047a8:	20000bae 	.word	0x20000bae

080047ac <__sinit_lock_release>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__sinit_lock_release+0x8>)
 80047ae:	f000 b8b9 	b.w	8004924 <__retarget_lock_release_recursive>
 80047b2:	bf00      	nop
 80047b4:	20000bae 	.word	0x20000bae

080047b8 <__sinit>:
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4604      	mov	r4, r0
 80047bc:	f7ff fff0 	bl	80047a0 <__sinit_lock_acquire>
 80047c0:	69a3      	ldr	r3, [r4, #24]
 80047c2:	b11b      	cbz	r3, 80047cc <__sinit+0x14>
 80047c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c8:	f7ff bff0 	b.w	80047ac <__sinit_lock_release>
 80047cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047d0:	6523      	str	r3, [r4, #80]	; 0x50
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <__sinit+0x68>)
 80047d4:	4a13      	ldr	r2, [pc, #76]	; (8004824 <__sinit+0x6c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047da:	42a3      	cmp	r3, r4
 80047dc:	bf04      	itt	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	61a3      	streq	r3, [r4, #24]
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f820 	bl	8004828 <__sfp>
 80047e8:	6060      	str	r0, [r4, #4]
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 f81c 	bl	8004828 <__sfp>
 80047f0:	60a0      	str	r0, [r4, #8]
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f818 	bl	8004828 <__sfp>
 80047f8:	2200      	movs	r2, #0
 80047fa:	60e0      	str	r0, [r4, #12]
 80047fc:	2104      	movs	r1, #4
 80047fe:	6860      	ldr	r0, [r4, #4]
 8004800:	f7ff ff82 	bl	8004708 <std>
 8004804:	68a0      	ldr	r0, [r4, #8]
 8004806:	2201      	movs	r2, #1
 8004808:	2109      	movs	r1, #9
 800480a:	f7ff ff7d 	bl	8004708 <std>
 800480e:	68e0      	ldr	r0, [r4, #12]
 8004810:	2202      	movs	r2, #2
 8004812:	2112      	movs	r1, #18
 8004814:	f7ff ff78 	bl	8004708 <std>
 8004818:	2301      	movs	r3, #1
 800481a:	61a3      	str	r3, [r4, #24]
 800481c:	e7d2      	b.n	80047c4 <__sinit+0xc>
 800481e:	bf00      	nop
 8004820:	080120e0 	.word	0x080120e0
 8004824:	08004751 	.word	0x08004751

08004828 <__sfp>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	4607      	mov	r7, r0
 800482c:	f7ff ffac 	bl	8004788 <__sfp_lock_acquire>
 8004830:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <__sfp+0x84>)
 8004832:	681e      	ldr	r6, [r3, #0]
 8004834:	69b3      	ldr	r3, [r6, #24]
 8004836:	b913      	cbnz	r3, 800483e <__sfp+0x16>
 8004838:	4630      	mov	r0, r6
 800483a:	f7ff ffbd 	bl	80047b8 <__sinit>
 800483e:	3648      	adds	r6, #72	; 0x48
 8004840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004844:	3b01      	subs	r3, #1
 8004846:	d503      	bpl.n	8004850 <__sfp+0x28>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	b30b      	cbz	r3, 8004890 <__sfp+0x68>
 800484c:	6836      	ldr	r6, [r6, #0]
 800484e:	e7f7      	b.n	8004840 <__sfp+0x18>
 8004850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004854:	b9d5      	cbnz	r5, 800488c <__sfp+0x64>
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <__sfp+0x88>)
 8004858:	60e3      	str	r3, [r4, #12]
 800485a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800485e:	6665      	str	r5, [r4, #100]	; 0x64
 8004860:	f000 f85e 	bl	8004920 <__retarget_lock_init_recursive>
 8004864:	f7ff ff96 	bl	8004794 <__sfp_lock_release>
 8004868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800486c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004870:	6025      	str	r5, [r4, #0]
 8004872:	61a5      	str	r5, [r4, #24]
 8004874:	2208      	movs	r2, #8
 8004876:	4629      	mov	r1, r5
 8004878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800487c:	f7fe f94c 	bl	8002b18 <memset>
 8004880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004888:	4620      	mov	r0, r4
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488c:	3468      	adds	r4, #104	; 0x68
 800488e:	e7d9      	b.n	8004844 <__sfp+0x1c>
 8004890:	2104      	movs	r1, #4
 8004892:	4638      	mov	r0, r7
 8004894:	f7ff ff62 	bl	800475c <__sfmoreglue>
 8004898:	4604      	mov	r4, r0
 800489a:	6030      	str	r0, [r6, #0]
 800489c:	2800      	cmp	r0, #0
 800489e:	d1d5      	bne.n	800484c <__sfp+0x24>
 80048a0:	f7ff ff78 	bl	8004794 <__sfp_lock_release>
 80048a4:	230c      	movs	r3, #12
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	e7ee      	b.n	8004888 <__sfp+0x60>
 80048aa:	bf00      	nop
 80048ac:	080120e0 	.word	0x080120e0
 80048b0:	ffff0001 	.word	0xffff0001

080048b4 <fiprintf>:
 80048b4:	b40e      	push	{r1, r2, r3}
 80048b6:	b503      	push	{r0, r1, lr}
 80048b8:	4601      	mov	r1, r0
 80048ba:	ab03      	add	r3, sp, #12
 80048bc:	4805      	ldr	r0, [pc, #20]	; (80048d4 <fiprintf+0x20>)
 80048be:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c2:	6800      	ldr	r0, [r0, #0]
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	f000 fd1f 	bl	8005308 <_vfiprintf_r>
 80048ca:	b002      	add	sp, #8
 80048cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d0:	b003      	add	sp, #12
 80048d2:	4770      	bx	lr
 80048d4:	20000018 	.word	0x20000018

080048d8 <_fwalk_reent>:
 80048d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048dc:	4606      	mov	r6, r0
 80048de:	4688      	mov	r8, r1
 80048e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048e4:	2700      	movs	r7, #0
 80048e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ea:	f1b9 0901 	subs.w	r9, r9, #1
 80048ee:	d505      	bpl.n	80048fc <_fwalk_reent+0x24>
 80048f0:	6824      	ldr	r4, [r4, #0]
 80048f2:	2c00      	cmp	r4, #0
 80048f4:	d1f7      	bne.n	80048e6 <_fwalk_reent+0xe>
 80048f6:	4638      	mov	r0, r7
 80048f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fc:	89ab      	ldrh	r3, [r5, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d907      	bls.n	8004912 <_fwalk_reent+0x3a>
 8004902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004906:	3301      	adds	r3, #1
 8004908:	d003      	beq.n	8004912 <_fwalk_reent+0x3a>
 800490a:	4629      	mov	r1, r5
 800490c:	4630      	mov	r0, r6
 800490e:	47c0      	blx	r8
 8004910:	4307      	orrs	r7, r0
 8004912:	3568      	adds	r5, #104	; 0x68
 8004914:	e7e9      	b.n	80048ea <_fwalk_reent+0x12>
	...

08004918 <_localeconv_r>:
 8004918:	4800      	ldr	r0, [pc, #0]	; (800491c <_localeconv_r+0x4>)
 800491a:	4770      	bx	lr
 800491c:	2000016c 	.word	0x2000016c

08004920 <__retarget_lock_init_recursive>:
 8004920:	4770      	bx	lr

08004922 <__retarget_lock_acquire_recursive>:
 8004922:	4770      	bx	lr

08004924 <__retarget_lock_release_recursive>:
 8004924:	4770      	bx	lr

08004926 <__swhatbuf_r>:
 8004926:	b570      	push	{r4, r5, r6, lr}
 8004928:	460e      	mov	r6, r1
 800492a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492e:	2900      	cmp	r1, #0
 8004930:	b096      	sub	sp, #88	; 0x58
 8004932:	4614      	mov	r4, r2
 8004934:	461d      	mov	r5, r3
 8004936:	da08      	bge.n	800494a <__swhatbuf_r+0x24>
 8004938:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	061a      	lsls	r2, r3, #24
 8004942:	d410      	bmi.n	8004966 <__swhatbuf_r+0x40>
 8004944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004948:	e00e      	b.n	8004968 <__swhatbuf_r+0x42>
 800494a:	466a      	mov	r2, sp
 800494c:	f7fd fc56 	bl	80021fc <_fstat_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	dbf1      	blt.n	8004938 <__swhatbuf_r+0x12>
 8004954:	9a01      	ldr	r2, [sp, #4]
 8004956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800495a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800495e:	425a      	negs	r2, r3
 8004960:	415a      	adcs	r2, r3
 8004962:	602a      	str	r2, [r5, #0]
 8004964:	e7ee      	b.n	8004944 <__swhatbuf_r+0x1e>
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	2000      	movs	r0, #0
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	b016      	add	sp, #88	; 0x58
 800496e:	bd70      	pop	{r4, r5, r6, pc}

08004970 <__smakebuf_r>:
 8004970:	898b      	ldrh	r3, [r1, #12]
 8004972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004974:	079d      	lsls	r5, r3, #30
 8004976:	4606      	mov	r6, r0
 8004978:	460c      	mov	r4, r1
 800497a:	d507      	bpl.n	800498c <__smakebuf_r+0x1c>
 800497c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	2301      	movs	r3, #1
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	b002      	add	sp, #8
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	ab01      	add	r3, sp, #4
 800498e:	466a      	mov	r2, sp
 8004990:	f7ff ffc9 	bl	8004926 <__swhatbuf_r>
 8004994:	9900      	ldr	r1, [sp, #0]
 8004996:	4605      	mov	r5, r0
 8004998:	4630      	mov	r0, r6
 800499a:	f000 fc31 	bl	8005200 <_malloc_r>
 800499e:	b948      	cbnz	r0, 80049b4 <__smakebuf_r+0x44>
 80049a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a4:	059a      	lsls	r2, r3, #22
 80049a6:	d4ef      	bmi.n	8004988 <__smakebuf_r+0x18>
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	e7e3      	b.n	800497c <__smakebuf_r+0xc>
 80049b4:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <__smakebuf_r+0x7c>)
 80049b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	6020      	str	r0, [r4, #0]
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	9b00      	ldr	r3, [sp, #0]
 80049c4:	6163      	str	r3, [r4, #20]
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	6120      	str	r0, [r4, #16]
 80049ca:	b15b      	cbz	r3, 80049e4 <__smakebuf_r+0x74>
 80049cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d0:	4630      	mov	r0, r6
 80049d2:	f7fd fc18 	bl	8002206 <_isatty_r>
 80049d6:	b128      	cbz	r0, 80049e4 <__smakebuf_r+0x74>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	89a0      	ldrh	r0, [r4, #12]
 80049e6:	4305      	orrs	r5, r0
 80049e8:	81a5      	strh	r5, [r4, #12]
 80049ea:	e7cd      	b.n	8004988 <__smakebuf_r+0x18>
 80049ec:	08004751 	.word	0x08004751

080049f0 <malloc>:
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <malloc+0xc>)
 80049f2:	4601      	mov	r1, r0
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	f000 bc03 	b.w	8005200 <_malloc_r>
 80049fa:	bf00      	nop
 80049fc:	20000018 	.word	0x20000018

08004a00 <__ascii_mbtowc>:
 8004a00:	b082      	sub	sp, #8
 8004a02:	b901      	cbnz	r1, 8004a06 <__ascii_mbtowc+0x6>
 8004a04:	a901      	add	r1, sp, #4
 8004a06:	b142      	cbz	r2, 8004a1a <__ascii_mbtowc+0x1a>
 8004a08:	b14b      	cbz	r3, 8004a1e <__ascii_mbtowc+0x1e>
 8004a0a:	7813      	ldrb	r3, [r2, #0]
 8004a0c:	600b      	str	r3, [r1, #0]
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	1e10      	subs	r0, r2, #0
 8004a12:	bf18      	it	ne
 8004a14:	2001      	movne	r0, #1
 8004a16:	b002      	add	sp, #8
 8004a18:	4770      	bx	lr
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	e7fb      	b.n	8004a16 <__ascii_mbtowc+0x16>
 8004a1e:	f06f 0001 	mvn.w	r0, #1
 8004a22:	e7f8      	b.n	8004a16 <__ascii_mbtowc+0x16>

08004a24 <memcpy>:
 8004a24:	440a      	add	r2, r1
 8004a26:	4291      	cmp	r1, r2
 8004a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	4770      	bx	lr
 8004a30:	b510      	push	{r4, lr}
 8004a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d1f9      	bne.n	8004a32 <memcpy+0xe>
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <_Balloc>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a44:	4604      	mov	r4, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	b976      	cbnz	r6, 8004a68 <_Balloc+0x28>
 8004a4a:	2010      	movs	r0, #16
 8004a4c:	f7ff ffd0 	bl	80049f0 <malloc>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6260      	str	r0, [r4, #36]	; 0x24
 8004a54:	b920      	cbnz	r0, 8004a60 <_Balloc+0x20>
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <_Balloc+0x78>)
 8004a58:	4818      	ldr	r0, [pc, #96]	; (8004abc <_Balloc+0x7c>)
 8004a5a:	2166      	movs	r1, #102	; 0x66
 8004a5c:	f7fe fef8 	bl	8003850 <__assert_func>
 8004a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a64:	6006      	str	r6, [r0, #0]
 8004a66:	60c6      	str	r6, [r0, #12]
 8004a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a6a:	68f3      	ldr	r3, [r6, #12]
 8004a6c:	b183      	cbz	r3, 8004a90 <_Balloc+0x50>
 8004a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a76:	b9b8      	cbnz	r0, 8004aa8 <_Balloc+0x68>
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8004a7e:	1d72      	adds	r2, r6, #5
 8004a80:	0092      	lsls	r2, r2, #2
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 fb60 	bl	8005148 <_calloc_r>
 8004a88:	b160      	cbz	r0, 8004aa4 <_Balloc+0x64>
 8004a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a8e:	e00e      	b.n	8004aae <_Balloc+0x6e>
 8004a90:	2221      	movs	r2, #33	; 0x21
 8004a92:	2104      	movs	r1, #4
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fb57 	bl	8005148 <_calloc_r>
 8004a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a9c:	60f0      	str	r0, [r6, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e4      	bne.n	8004a6e <_Balloc+0x2e>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	6802      	ldr	r2, [r0, #0]
 8004aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ab4:	e7f7      	b.n	8004aa6 <_Balloc+0x66>
 8004ab6:	bf00      	nop
 8004ab8:	08012116 	.word	0x08012116
 8004abc:	080122ea 	.word	0x080122ea

08004ac0 <_Bfree>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	b976      	cbnz	r6, 8004ae8 <_Bfree+0x28>
 8004aca:	2010      	movs	r0, #16
 8004acc:	f7ff ff90 	bl	80049f0 <malloc>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8004ad4:	b920      	cbnz	r0, 8004ae0 <_Bfree+0x20>
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <_Bfree+0x3c>)
 8004ad8:	4809      	ldr	r0, [pc, #36]	; (8004b00 <_Bfree+0x40>)
 8004ada:	218a      	movs	r1, #138	; 0x8a
 8004adc:	f7fe feb8 	bl	8003850 <__assert_func>
 8004ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ae4:	6006      	str	r6, [r0, #0]
 8004ae6:	60c6      	str	r6, [r0, #12]
 8004ae8:	b13c      	cbz	r4, 8004afa <_Bfree+0x3a>
 8004aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004af4:	6021      	str	r1, [r4, #0]
 8004af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	08012116 	.word	0x08012116
 8004b00:	080122ea 	.word	0x080122ea

08004b04 <__multadd>:
 8004b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b08:	690d      	ldr	r5, [r1, #16]
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	461e      	mov	r6, r3
 8004b10:	f101 0c14 	add.w	ip, r1, #20
 8004b14:	2000      	movs	r0, #0
 8004b16:	f8dc 3000 	ldr.w	r3, [ip]
 8004b1a:	b299      	uxth	r1, r3
 8004b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8004b20:	0c1e      	lsrs	r6, r3, #16
 8004b22:	0c0b      	lsrs	r3, r1, #16
 8004b24:	fb02 3306 	mla	r3, r2, r6, r3
 8004b28:	b289      	uxth	r1, r1
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b30:	4285      	cmp	r5, r0
 8004b32:	f84c 1b04 	str.w	r1, [ip], #4
 8004b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b3a:	dcec      	bgt.n	8004b16 <__multadd+0x12>
 8004b3c:	b30e      	cbz	r6, 8004b82 <__multadd+0x7e>
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	42ab      	cmp	r3, r5
 8004b42:	dc19      	bgt.n	8004b78 <__multadd+0x74>
 8004b44:	6861      	ldr	r1, [r4, #4]
 8004b46:	4638      	mov	r0, r7
 8004b48:	3101      	adds	r1, #1
 8004b4a:	f7ff ff79 	bl	8004a40 <_Balloc>
 8004b4e:	4680      	mov	r8, r0
 8004b50:	b928      	cbnz	r0, 8004b5e <__multadd+0x5a>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <__multadd+0x84>)
 8004b56:	480d      	ldr	r0, [pc, #52]	; (8004b8c <__multadd+0x88>)
 8004b58:	21b5      	movs	r1, #181	; 0xb5
 8004b5a:	f7fe fe79 	bl	8003850 <__assert_func>
 8004b5e:	6922      	ldr	r2, [r4, #16]
 8004b60:	3202      	adds	r2, #2
 8004b62:	f104 010c 	add.w	r1, r4, #12
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	300c      	adds	r0, #12
 8004b6a:	f7ff ff5b 	bl	8004a24 <memcpy>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4638      	mov	r0, r7
 8004b72:	f7ff ffa5 	bl	8004ac0 <_Bfree>
 8004b76:	4644      	mov	r4, r8
 8004b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	615e      	str	r6, [r3, #20]
 8004b80:	6125      	str	r5, [r4, #16]
 8004b82:	4620      	mov	r0, r4
 8004b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b88:	08012272 	.word	0x08012272
 8004b8c:	080122ea 	.word	0x080122ea

08004b90 <__hi0bits>:
 8004b90:	0c03      	lsrs	r3, r0, #16
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	b9d3      	cbnz	r3, 8004bcc <__hi0bits+0x3c>
 8004b96:	0400      	lsls	r0, r0, #16
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004b9e:	bf04      	itt	eq
 8004ba0:	0200      	lsleq	r0, r0, #8
 8004ba2:	3308      	addeq	r3, #8
 8004ba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004ba8:	bf04      	itt	eq
 8004baa:	0100      	lsleq	r0, r0, #4
 8004bac:	3304      	addeq	r3, #4
 8004bae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004bb2:	bf04      	itt	eq
 8004bb4:	0080      	lsleq	r0, r0, #2
 8004bb6:	3302      	addeq	r3, #2
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	db05      	blt.n	8004bc8 <__hi0bits+0x38>
 8004bbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004bc0:	f103 0301 	add.w	r3, r3, #1
 8004bc4:	bf08      	it	eq
 8004bc6:	2320      	moveq	r3, #32
 8004bc8:	4618      	mov	r0, r3
 8004bca:	4770      	bx	lr
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e7e4      	b.n	8004b9a <__hi0bits+0xa>

08004bd0 <__lo0bits>:
 8004bd0:	6803      	ldr	r3, [r0, #0]
 8004bd2:	f013 0207 	ands.w	r2, r3, #7
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	d00b      	beq.n	8004bf2 <__lo0bits+0x22>
 8004bda:	07da      	lsls	r2, r3, #31
 8004bdc:	d423      	bmi.n	8004c26 <__lo0bits+0x56>
 8004bde:	0798      	lsls	r0, r3, #30
 8004be0:	bf49      	itett	mi
 8004be2:	085b      	lsrmi	r3, r3, #1
 8004be4:	089b      	lsrpl	r3, r3, #2
 8004be6:	2001      	movmi	r0, #1
 8004be8:	600b      	strmi	r3, [r1, #0]
 8004bea:	bf5c      	itt	pl
 8004bec:	600b      	strpl	r3, [r1, #0]
 8004bee:	2002      	movpl	r0, #2
 8004bf0:	4770      	bx	lr
 8004bf2:	b298      	uxth	r0, r3
 8004bf4:	b9a8      	cbnz	r0, 8004c22 <__lo0bits+0x52>
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	2010      	movs	r0, #16
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	b90a      	cbnz	r2, 8004c02 <__lo0bits+0x32>
 8004bfe:	3008      	adds	r0, #8
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	071a      	lsls	r2, r3, #28
 8004c04:	bf04      	itt	eq
 8004c06:	091b      	lsreq	r3, r3, #4
 8004c08:	3004      	addeq	r0, #4
 8004c0a:	079a      	lsls	r2, r3, #30
 8004c0c:	bf04      	itt	eq
 8004c0e:	089b      	lsreq	r3, r3, #2
 8004c10:	3002      	addeq	r0, #2
 8004c12:	07da      	lsls	r2, r3, #31
 8004c14:	d403      	bmi.n	8004c1e <__lo0bits+0x4e>
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	f100 0001 	add.w	r0, r0, #1
 8004c1c:	d005      	beq.n	8004c2a <__lo0bits+0x5a>
 8004c1e:	600b      	str	r3, [r1, #0]
 8004c20:	4770      	bx	lr
 8004c22:	4610      	mov	r0, r2
 8004c24:	e7e9      	b.n	8004bfa <__lo0bits+0x2a>
 8004c26:	2000      	movs	r0, #0
 8004c28:	4770      	bx	lr
 8004c2a:	2020      	movs	r0, #32
 8004c2c:	4770      	bx	lr
	...

08004c30 <__i2b>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	460c      	mov	r4, r1
 8004c34:	2101      	movs	r1, #1
 8004c36:	f7ff ff03 	bl	8004a40 <_Balloc>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	b928      	cbnz	r0, 8004c4a <__i2b+0x1a>
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <__i2b+0x24>)
 8004c40:	4805      	ldr	r0, [pc, #20]	; (8004c58 <__i2b+0x28>)
 8004c42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c46:	f7fe fe03 	bl	8003850 <__assert_func>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	6144      	str	r4, [r0, #20]
 8004c4e:	6103      	str	r3, [r0, #16]
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	bf00      	nop
 8004c54:	08012272 	.word	0x08012272
 8004c58:	080122ea 	.word	0x080122ea

08004c5c <__multiply>:
 8004c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c60:	4691      	mov	r9, r2
 8004c62:	690a      	ldr	r2, [r1, #16]
 8004c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	bfb8      	it	lt
 8004c6c:	460b      	movlt	r3, r1
 8004c6e:	460c      	mov	r4, r1
 8004c70:	bfbc      	itt	lt
 8004c72:	464c      	movlt	r4, r9
 8004c74:	4699      	movlt	r9, r3
 8004c76:	6927      	ldr	r7, [r4, #16]
 8004c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c7c:	68a3      	ldr	r3, [r4, #8]
 8004c7e:	6861      	ldr	r1, [r4, #4]
 8004c80:	eb07 060a 	add.w	r6, r7, sl
 8004c84:	42b3      	cmp	r3, r6
 8004c86:	b085      	sub	sp, #20
 8004c88:	bfb8      	it	lt
 8004c8a:	3101      	addlt	r1, #1
 8004c8c:	f7ff fed8 	bl	8004a40 <_Balloc>
 8004c90:	b930      	cbnz	r0, 8004ca0 <__multiply+0x44>
 8004c92:	4602      	mov	r2, r0
 8004c94:	4b44      	ldr	r3, [pc, #272]	; (8004da8 <__multiply+0x14c>)
 8004c96:	4845      	ldr	r0, [pc, #276]	; (8004dac <__multiply+0x150>)
 8004c98:	f240 115d 	movw	r1, #349	; 0x15d
 8004c9c:	f7fe fdd8 	bl	8003850 <__assert_func>
 8004ca0:	f100 0514 	add.w	r5, r0, #20
 8004ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ca8:	462b      	mov	r3, r5
 8004caa:	2200      	movs	r2, #0
 8004cac:	4543      	cmp	r3, r8
 8004cae:	d321      	bcc.n	8004cf4 <__multiply+0x98>
 8004cb0:	f104 0314 	add.w	r3, r4, #20
 8004cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004cb8:	f109 0314 	add.w	r3, r9, #20
 8004cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004cc0:	9202      	str	r2, [sp, #8]
 8004cc2:	1b3a      	subs	r2, r7, r4
 8004cc4:	3a15      	subs	r2, #21
 8004cc6:	f022 0203 	bic.w	r2, r2, #3
 8004cca:	3204      	adds	r2, #4
 8004ccc:	f104 0115 	add.w	r1, r4, #21
 8004cd0:	428f      	cmp	r7, r1
 8004cd2:	bf38      	it	cc
 8004cd4:	2204      	movcc	r2, #4
 8004cd6:	9201      	str	r2, [sp, #4]
 8004cd8:	9a02      	ldr	r2, [sp, #8]
 8004cda:	9303      	str	r3, [sp, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d80c      	bhi.n	8004cfa <__multiply+0x9e>
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	dd03      	ble.n	8004cec <__multiply+0x90>
 8004ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05a      	beq.n	8004da2 <__multiply+0x146>
 8004cec:	6106      	str	r6, [r0, #16]
 8004cee:	b005      	add	sp, #20
 8004cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf4:	f843 2b04 	str.w	r2, [r3], #4
 8004cf8:	e7d8      	b.n	8004cac <__multiply+0x50>
 8004cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8004cfe:	f1ba 0f00 	cmp.w	sl, #0
 8004d02:	d024      	beq.n	8004d4e <__multiply+0xf2>
 8004d04:	f104 0e14 	add.w	lr, r4, #20
 8004d08:	46a9      	mov	r9, r5
 8004d0a:	f04f 0c00 	mov.w	ip, #0
 8004d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d12:	f8d9 1000 	ldr.w	r1, [r9]
 8004d16:	fa1f fb82 	uxth.w	fp, r2
 8004d1a:	b289      	uxth	r1, r1
 8004d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d24:	f8d9 2000 	ldr.w	r2, [r9]
 8004d28:	4461      	add	r1, ip
 8004d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d36:	b289      	uxth	r1, r1
 8004d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d3c:	4577      	cmp	r7, lr
 8004d3e:	f849 1b04 	str.w	r1, [r9], #4
 8004d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d46:	d8e2      	bhi.n	8004d0e <__multiply+0xb2>
 8004d48:	9a01      	ldr	r2, [sp, #4]
 8004d4a:	f845 c002 	str.w	ip, [r5, r2]
 8004d4e:	9a03      	ldr	r2, [sp, #12]
 8004d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d54:	3304      	adds	r3, #4
 8004d56:	f1b9 0f00 	cmp.w	r9, #0
 8004d5a:	d020      	beq.n	8004d9e <__multiply+0x142>
 8004d5c:	6829      	ldr	r1, [r5, #0]
 8004d5e:	f104 0c14 	add.w	ip, r4, #20
 8004d62:	46ae      	mov	lr, r5
 8004d64:	f04f 0a00 	mov.w	sl, #0
 8004d68:	f8bc b000 	ldrh.w	fp, [ip]
 8004d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d70:	fb09 220b 	mla	r2, r9, fp, r2
 8004d74:	4492      	add	sl, r2
 8004d76:	b289      	uxth	r1, r1
 8004d78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8004d80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d84:	f8be 1000 	ldrh.w	r1, [lr]
 8004d88:	0c12      	lsrs	r2, r2, #16
 8004d8a:	fb09 1102 	mla	r1, r9, r2, r1
 8004d8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004d92:	4567      	cmp	r7, ip
 8004d94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d98:	d8e6      	bhi.n	8004d68 <__multiply+0x10c>
 8004d9a:	9a01      	ldr	r2, [sp, #4]
 8004d9c:	50a9      	str	r1, [r5, r2]
 8004d9e:	3504      	adds	r5, #4
 8004da0:	e79a      	b.n	8004cd8 <__multiply+0x7c>
 8004da2:	3e01      	subs	r6, #1
 8004da4:	e79c      	b.n	8004ce0 <__multiply+0x84>
 8004da6:	bf00      	nop
 8004da8:	08012272 	.word	0x08012272
 8004dac:	080122ea 	.word	0x080122ea

08004db0 <__pow5mult>:
 8004db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db4:	4615      	mov	r5, r2
 8004db6:	f012 0203 	ands.w	r2, r2, #3
 8004dba:	4606      	mov	r6, r0
 8004dbc:	460f      	mov	r7, r1
 8004dbe:	d007      	beq.n	8004dd0 <__pow5mult+0x20>
 8004dc0:	4c25      	ldr	r4, [pc, #148]	; (8004e58 <__pow5mult+0xa8>)
 8004dc2:	3a01      	subs	r2, #1
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dca:	f7ff fe9b 	bl	8004b04 <__multadd>
 8004dce:	4607      	mov	r7, r0
 8004dd0:	10ad      	asrs	r5, r5, #2
 8004dd2:	d03d      	beq.n	8004e50 <__pow5mult+0xa0>
 8004dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004dd6:	b97c      	cbnz	r4, 8004df8 <__pow5mult+0x48>
 8004dd8:	2010      	movs	r0, #16
 8004dda:	f7ff fe09 	bl	80049f0 <malloc>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6270      	str	r0, [r6, #36]	; 0x24
 8004de2:	b928      	cbnz	r0, 8004df0 <__pow5mult+0x40>
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <__pow5mult+0xac>)
 8004de6:	481e      	ldr	r0, [pc, #120]	; (8004e60 <__pow5mult+0xb0>)
 8004de8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004dec:	f7fe fd30 	bl	8003850 <__assert_func>
 8004df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004df4:	6004      	str	r4, [r0, #0]
 8004df6:	60c4      	str	r4, [r0, #12]
 8004df8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e00:	b94c      	cbnz	r4, 8004e16 <__pow5mult+0x66>
 8004e02:	f240 2171 	movw	r1, #625	; 0x271
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7ff ff12 	bl	8004c30 <__i2b>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e12:	4604      	mov	r4, r0
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	f04f 0900 	mov.w	r9, #0
 8004e1a:	07eb      	lsls	r3, r5, #31
 8004e1c:	d50a      	bpl.n	8004e34 <__pow5mult+0x84>
 8004e1e:	4639      	mov	r1, r7
 8004e20:	4622      	mov	r2, r4
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff ff1a 	bl	8004c5c <__multiply>
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4680      	mov	r8, r0
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff fe47 	bl	8004ac0 <_Bfree>
 8004e32:	4647      	mov	r7, r8
 8004e34:	106d      	asrs	r5, r5, #1
 8004e36:	d00b      	beq.n	8004e50 <__pow5mult+0xa0>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	b938      	cbnz	r0, 8004e4c <__pow5mult+0x9c>
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4630      	mov	r0, r6
 8004e42:	f7ff ff0b 	bl	8004c5c <__multiply>
 8004e46:	6020      	str	r0, [r4, #0]
 8004e48:	f8c0 9000 	str.w	r9, [r0]
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	e7e4      	b.n	8004e1a <__pow5mult+0x6a>
 8004e50:	4638      	mov	r0, r7
 8004e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e56:	bf00      	nop
 8004e58:	08012458 	.word	0x08012458
 8004e5c:	08012116 	.word	0x08012116
 8004e60:	080122ea 	.word	0x080122ea

08004e64 <__lshift>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	460c      	mov	r4, r1
 8004e6a:	6849      	ldr	r1, [r1, #4]
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	4607      	mov	r7, r0
 8004e76:	4691      	mov	r9, r2
 8004e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e7c:	f108 0601 	add.w	r6, r8, #1
 8004e80:	42b3      	cmp	r3, r6
 8004e82:	db0b      	blt.n	8004e9c <__lshift+0x38>
 8004e84:	4638      	mov	r0, r7
 8004e86:	f7ff fddb 	bl	8004a40 <_Balloc>
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	b948      	cbnz	r0, 8004ea2 <__lshift+0x3e>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <__lshift+0xd8>)
 8004e92:	482b      	ldr	r0, [pc, #172]	; (8004f40 <__lshift+0xdc>)
 8004e94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e98:	f7fe fcda 	bl	8003850 <__assert_func>
 8004e9c:	3101      	adds	r1, #1
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	e7ee      	b.n	8004e80 <__lshift+0x1c>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f100 0114 	add.w	r1, r0, #20
 8004ea8:	f100 0210 	add.w	r2, r0, #16
 8004eac:	4618      	mov	r0, r3
 8004eae:	4553      	cmp	r3, sl
 8004eb0:	db37      	blt.n	8004f22 <__lshift+0xbe>
 8004eb2:	6920      	ldr	r0, [r4, #16]
 8004eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004eb8:	f104 0314 	add.w	r3, r4, #20
 8004ebc:	f019 091f 	ands.w	r9, r9, #31
 8004ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ec4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ec8:	d02f      	beq.n	8004f2a <__lshift+0xc6>
 8004eca:	f1c9 0e20 	rsb	lr, r9, #32
 8004ece:	468a      	mov	sl, r1
 8004ed0:	f04f 0c00 	mov.w	ip, #0
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	fa02 f209 	lsl.w	r2, r2, r9
 8004eda:	ea42 020c 	orr.w	r2, r2, ip
 8004ede:	f84a 2b04 	str.w	r2, [sl], #4
 8004ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004eec:	d8f2      	bhi.n	8004ed4 <__lshift+0x70>
 8004eee:	1b03      	subs	r3, r0, r4
 8004ef0:	3b15      	subs	r3, #21
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	f104 0215 	add.w	r2, r4, #21
 8004efc:	4290      	cmp	r0, r2
 8004efe:	bf38      	it	cc
 8004f00:	2304      	movcc	r3, #4
 8004f02:	f841 c003 	str.w	ip, [r1, r3]
 8004f06:	f1bc 0f00 	cmp.w	ip, #0
 8004f0a:	d001      	beq.n	8004f10 <__lshift+0xac>
 8004f0c:	f108 0602 	add.w	r6, r8, #2
 8004f10:	3e01      	subs	r6, #1
 8004f12:	4638      	mov	r0, r7
 8004f14:	612e      	str	r6, [r5, #16]
 8004f16:	4621      	mov	r1, r4
 8004f18:	f7ff fdd2 	bl	8004ac0 <_Bfree>
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f26:	3301      	adds	r3, #1
 8004f28:	e7c1      	b.n	8004eae <__lshift+0x4a>
 8004f2a:	3904      	subs	r1, #4
 8004f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f34:	4298      	cmp	r0, r3
 8004f36:	d8f9      	bhi.n	8004f2c <__lshift+0xc8>
 8004f38:	e7ea      	b.n	8004f10 <__lshift+0xac>
 8004f3a:	bf00      	nop
 8004f3c:	08012272 	.word	0x08012272
 8004f40:	080122ea 	.word	0x080122ea

08004f44 <__mcmp>:
 8004f44:	b530      	push	{r4, r5, lr}
 8004f46:	6902      	ldr	r2, [r0, #16]
 8004f48:	690c      	ldr	r4, [r1, #16]
 8004f4a:	1b12      	subs	r2, r2, r4
 8004f4c:	d10e      	bne.n	8004f6c <__mcmp+0x28>
 8004f4e:	f100 0314 	add.w	r3, r0, #20
 8004f52:	3114      	adds	r1, #20
 8004f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f64:	42a5      	cmp	r5, r4
 8004f66:	d003      	beq.n	8004f70 <__mcmp+0x2c>
 8004f68:	d305      	bcc.n	8004f76 <__mcmp+0x32>
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	bd30      	pop	{r4, r5, pc}
 8004f70:	4283      	cmp	r3, r0
 8004f72:	d3f3      	bcc.n	8004f5c <__mcmp+0x18>
 8004f74:	e7fa      	b.n	8004f6c <__mcmp+0x28>
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f7a:	e7f7      	b.n	8004f6c <__mcmp+0x28>

08004f7c <__mdiff>:
 8004f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	460c      	mov	r4, r1
 8004f82:	4606      	mov	r6, r0
 8004f84:	4611      	mov	r1, r2
 8004f86:	4620      	mov	r0, r4
 8004f88:	4690      	mov	r8, r2
 8004f8a:	f7ff ffdb 	bl	8004f44 <__mcmp>
 8004f8e:	1e05      	subs	r5, r0, #0
 8004f90:	d110      	bne.n	8004fb4 <__mdiff+0x38>
 8004f92:	4629      	mov	r1, r5
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff fd53 	bl	8004a40 <_Balloc>
 8004f9a:	b930      	cbnz	r0, 8004faa <__mdiff+0x2e>
 8004f9c:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <__mdiff+0x10c>)
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	f240 2132 	movw	r1, #562	; 0x232
 8004fa4:	4839      	ldr	r0, [pc, #228]	; (800508c <__mdiff+0x110>)
 8004fa6:	f7fe fc53 	bl	8003850 <__assert_func>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	bfa4      	itt	ge
 8004fb6:	4643      	movge	r3, r8
 8004fb8:	46a0      	movge	r8, r4
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fc0:	bfa6      	itte	ge
 8004fc2:	461c      	movge	r4, r3
 8004fc4:	2500      	movge	r5, #0
 8004fc6:	2501      	movlt	r5, #1
 8004fc8:	f7ff fd3a 	bl	8004a40 <_Balloc>
 8004fcc:	b920      	cbnz	r0, 8004fd8 <__mdiff+0x5c>
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <__mdiff+0x10c>)
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004fd6:	e7e5      	b.n	8004fa4 <__mdiff+0x28>
 8004fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004fdc:	6926      	ldr	r6, [r4, #16]
 8004fde:	60c5      	str	r5, [r0, #12]
 8004fe0:	f104 0914 	add.w	r9, r4, #20
 8004fe4:	f108 0514 	add.w	r5, r8, #20
 8004fe8:	f100 0e14 	add.w	lr, r0, #20
 8004fec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004ff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004ff4:	f108 0210 	add.w	r2, r8, #16
 8004ff8:	46f2      	mov	sl, lr
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005004:	fa1f f883 	uxth.w	r8, r3
 8005008:	fa11 f18b 	uxtah	r1, r1, fp
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	eba1 0808 	sub.w	r8, r1, r8
 8005012:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005016:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800501a:	fa1f f888 	uxth.w	r8, r8
 800501e:	1419      	asrs	r1, r3, #16
 8005020:	454e      	cmp	r6, r9
 8005022:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005026:	f84a 3b04 	str.w	r3, [sl], #4
 800502a:	d8e7      	bhi.n	8004ffc <__mdiff+0x80>
 800502c:	1b33      	subs	r3, r6, r4
 800502e:	3b15      	subs	r3, #21
 8005030:	f023 0303 	bic.w	r3, r3, #3
 8005034:	3304      	adds	r3, #4
 8005036:	3415      	adds	r4, #21
 8005038:	42a6      	cmp	r6, r4
 800503a:	bf38      	it	cc
 800503c:	2304      	movcc	r3, #4
 800503e:	441d      	add	r5, r3
 8005040:	4473      	add	r3, lr
 8005042:	469e      	mov	lr, r3
 8005044:	462e      	mov	r6, r5
 8005046:	4566      	cmp	r6, ip
 8005048:	d30e      	bcc.n	8005068 <__mdiff+0xec>
 800504a:	f10c 0203 	add.w	r2, ip, #3
 800504e:	1b52      	subs	r2, r2, r5
 8005050:	f022 0203 	bic.w	r2, r2, #3
 8005054:	3d03      	subs	r5, #3
 8005056:	45ac      	cmp	ip, r5
 8005058:	bf38      	it	cc
 800505a:	2200      	movcc	r2, #0
 800505c:	441a      	add	r2, r3
 800505e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005062:	b17b      	cbz	r3, 8005084 <__mdiff+0x108>
 8005064:	6107      	str	r7, [r0, #16]
 8005066:	e7a3      	b.n	8004fb0 <__mdiff+0x34>
 8005068:	f856 8b04 	ldr.w	r8, [r6], #4
 800506c:	fa11 f288 	uxtah	r2, r1, r8
 8005070:	1414      	asrs	r4, r2, #16
 8005072:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005076:	b292      	uxth	r2, r2
 8005078:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800507c:	f84e 2b04 	str.w	r2, [lr], #4
 8005080:	1421      	asrs	r1, r4, #16
 8005082:	e7e0      	b.n	8005046 <__mdiff+0xca>
 8005084:	3f01      	subs	r7, #1
 8005086:	e7ea      	b.n	800505e <__mdiff+0xe2>
 8005088:	08012272 	.word	0x08012272
 800508c:	080122ea 	.word	0x080122ea

08005090 <__d2b>:
 8005090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005094:	4689      	mov	r9, r1
 8005096:	2101      	movs	r1, #1
 8005098:	ec57 6b10 	vmov	r6, r7, d0
 800509c:	4690      	mov	r8, r2
 800509e:	f7ff fccf 	bl	8004a40 <_Balloc>
 80050a2:	4604      	mov	r4, r0
 80050a4:	b930      	cbnz	r0, 80050b4 <__d2b+0x24>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b25      	ldr	r3, [pc, #148]	; (8005140 <__d2b+0xb0>)
 80050aa:	4826      	ldr	r0, [pc, #152]	; (8005144 <__d2b+0xb4>)
 80050ac:	f240 310a 	movw	r1, #778	; 0x30a
 80050b0:	f7fe fbce 	bl	8003850 <__assert_func>
 80050b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80050b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050bc:	bb35      	cbnz	r5, 800510c <__d2b+0x7c>
 80050be:	2e00      	cmp	r6, #0
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	d028      	beq.n	8005116 <__d2b+0x86>
 80050c4:	4668      	mov	r0, sp
 80050c6:	9600      	str	r6, [sp, #0]
 80050c8:	f7ff fd82 	bl	8004bd0 <__lo0bits>
 80050cc:	9900      	ldr	r1, [sp, #0]
 80050ce:	b300      	cbz	r0, 8005112 <__d2b+0x82>
 80050d0:	9a01      	ldr	r2, [sp, #4]
 80050d2:	f1c0 0320 	rsb	r3, r0, #32
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	430b      	orrs	r3, r1
 80050dc:	40c2      	lsrs	r2, r0
 80050de:	6163      	str	r3, [r4, #20]
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	9b01      	ldr	r3, [sp, #4]
 80050e4:	61a3      	str	r3, [r4, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2202      	movne	r2, #2
 80050ec:	2201      	moveq	r2, #1
 80050ee:	6122      	str	r2, [r4, #16]
 80050f0:	b1d5      	cbz	r5, 8005128 <__d2b+0x98>
 80050f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80050f6:	4405      	add	r5, r0
 80050f8:	f8c9 5000 	str.w	r5, [r9]
 80050fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005100:	f8c8 0000 	str.w	r0, [r8]
 8005104:	4620      	mov	r0, r4
 8005106:	b003      	add	sp, #12
 8005108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800510c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005110:	e7d5      	b.n	80050be <__d2b+0x2e>
 8005112:	6161      	str	r1, [r4, #20]
 8005114:	e7e5      	b.n	80050e2 <__d2b+0x52>
 8005116:	a801      	add	r0, sp, #4
 8005118:	f7ff fd5a 	bl	8004bd0 <__lo0bits>
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	6163      	str	r3, [r4, #20]
 8005120:	2201      	movs	r2, #1
 8005122:	6122      	str	r2, [r4, #16]
 8005124:	3020      	adds	r0, #32
 8005126:	e7e3      	b.n	80050f0 <__d2b+0x60>
 8005128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800512c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005130:	f8c9 0000 	str.w	r0, [r9]
 8005134:	6918      	ldr	r0, [r3, #16]
 8005136:	f7ff fd2b 	bl	8004b90 <__hi0bits>
 800513a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800513e:	e7df      	b.n	8005100 <__d2b+0x70>
 8005140:	08012272 	.word	0x08012272
 8005144:	080122ea 	.word	0x080122ea

08005148 <_calloc_r>:
 8005148:	b513      	push	{r0, r1, r4, lr}
 800514a:	434a      	muls	r2, r1
 800514c:	4611      	mov	r1, r2
 800514e:	9201      	str	r2, [sp, #4]
 8005150:	f000 f856 	bl	8005200 <_malloc_r>
 8005154:	4604      	mov	r4, r0
 8005156:	b118      	cbz	r0, 8005160 <_calloc_r+0x18>
 8005158:	9a01      	ldr	r2, [sp, #4]
 800515a:	2100      	movs	r1, #0
 800515c:	f7fd fcdc 	bl	8002b18 <memset>
 8005160:	4620      	mov	r0, r4
 8005162:	b002      	add	sp, #8
 8005164:	bd10      	pop	{r4, pc}
	...

08005168 <_free_r>:
 8005168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800516a:	2900      	cmp	r1, #0
 800516c:	d044      	beq.n	80051f8 <_free_r+0x90>
 800516e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005172:	9001      	str	r0, [sp, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f1a1 0404 	sub.w	r4, r1, #4
 800517a:	bfb8      	it	lt
 800517c:	18e4      	addlt	r4, r4, r3
 800517e:	f000 fb27 	bl	80057d0 <__malloc_lock>
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <_free_r+0x94>)
 8005184:	9801      	ldr	r0, [sp, #4]
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	b933      	cbnz	r3, 8005198 <_free_r+0x30>
 800518a:	6063      	str	r3, [r4, #4]
 800518c:	6014      	str	r4, [r2, #0]
 800518e:	b003      	add	sp, #12
 8005190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005194:	f000 bb22 	b.w	80057dc <__malloc_unlock>
 8005198:	42a3      	cmp	r3, r4
 800519a:	d908      	bls.n	80051ae <_free_r+0x46>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf01      	itttt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	1949      	addeq	r1, r1, r5
 80051aa:	6021      	streq	r1, [r4, #0]
 80051ac:	e7ed      	b.n	800518a <_free_r+0x22>
 80051ae:	461a      	mov	r2, r3
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b10b      	cbz	r3, 80051b8 <_free_r+0x50>
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	d9fa      	bls.n	80051ae <_free_r+0x46>
 80051b8:	6811      	ldr	r1, [r2, #0]
 80051ba:	1855      	adds	r5, r2, r1
 80051bc:	42a5      	cmp	r5, r4
 80051be:	d10b      	bne.n	80051d8 <_free_r+0x70>
 80051c0:	6824      	ldr	r4, [r4, #0]
 80051c2:	4421      	add	r1, r4
 80051c4:	1854      	adds	r4, r2, r1
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	d1e0      	bne.n	800518e <_free_r+0x26>
 80051cc:	681c      	ldr	r4, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	6053      	str	r3, [r2, #4]
 80051d2:	4421      	add	r1, r4
 80051d4:	6011      	str	r1, [r2, #0]
 80051d6:	e7da      	b.n	800518e <_free_r+0x26>
 80051d8:	d902      	bls.n	80051e0 <_free_r+0x78>
 80051da:	230c      	movs	r3, #12
 80051dc:	6003      	str	r3, [r0, #0]
 80051de:	e7d6      	b.n	800518e <_free_r+0x26>
 80051e0:	6825      	ldr	r5, [r4, #0]
 80051e2:	1961      	adds	r1, r4, r5
 80051e4:	428b      	cmp	r3, r1
 80051e6:	bf04      	itt	eq
 80051e8:	6819      	ldreq	r1, [r3, #0]
 80051ea:	685b      	ldreq	r3, [r3, #4]
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	bf04      	itt	eq
 80051f0:	1949      	addeq	r1, r1, r5
 80051f2:	6021      	streq	r1, [r4, #0]
 80051f4:	6054      	str	r4, [r2, #4]
 80051f6:	e7ca      	b.n	800518e <_free_r+0x26>
 80051f8:	b003      	add	sp, #12
 80051fa:	bd30      	pop	{r4, r5, pc}
 80051fc:	20000bb0 	.word	0x20000bb0

08005200 <_malloc_r>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	1ccd      	adds	r5, r1, #3
 8005204:	f025 0503 	bic.w	r5, r5, #3
 8005208:	3508      	adds	r5, #8
 800520a:	2d0c      	cmp	r5, #12
 800520c:	bf38      	it	cc
 800520e:	250c      	movcc	r5, #12
 8005210:	2d00      	cmp	r5, #0
 8005212:	4606      	mov	r6, r0
 8005214:	db01      	blt.n	800521a <_malloc_r+0x1a>
 8005216:	42a9      	cmp	r1, r5
 8005218:	d903      	bls.n	8005222 <_malloc_r+0x22>
 800521a:	230c      	movs	r3, #12
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	2000      	movs	r0, #0
 8005220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005222:	f000 fad5 	bl	80057d0 <__malloc_lock>
 8005226:	4921      	ldr	r1, [pc, #132]	; (80052ac <_malloc_r+0xac>)
 8005228:	680a      	ldr	r2, [r1, #0]
 800522a:	4614      	mov	r4, r2
 800522c:	b99c      	cbnz	r4, 8005256 <_malloc_r+0x56>
 800522e:	4f20      	ldr	r7, [pc, #128]	; (80052b0 <_malloc_r+0xb0>)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	b923      	cbnz	r3, 800523e <_malloc_r+0x3e>
 8005234:	4621      	mov	r1, r4
 8005236:	4630      	mov	r0, r6
 8005238:	f7fc ffc6 	bl	80021c8 <_sbrk_r>
 800523c:	6038      	str	r0, [r7, #0]
 800523e:	4629      	mov	r1, r5
 8005240:	4630      	mov	r0, r6
 8005242:	f7fc ffc1 	bl	80021c8 <_sbrk_r>
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	d123      	bne.n	8005292 <_malloc_r+0x92>
 800524a:	230c      	movs	r3, #12
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	4630      	mov	r0, r6
 8005250:	f000 fac4 	bl	80057dc <__malloc_unlock>
 8005254:	e7e3      	b.n	800521e <_malloc_r+0x1e>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	1b5b      	subs	r3, r3, r5
 800525a:	d417      	bmi.n	800528c <_malloc_r+0x8c>
 800525c:	2b0b      	cmp	r3, #11
 800525e:	d903      	bls.n	8005268 <_malloc_r+0x68>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	441c      	add	r4, r3
 8005264:	6025      	str	r5, [r4, #0]
 8005266:	e004      	b.n	8005272 <_malloc_r+0x72>
 8005268:	6863      	ldr	r3, [r4, #4]
 800526a:	42a2      	cmp	r2, r4
 800526c:	bf0c      	ite	eq
 800526e:	600b      	streq	r3, [r1, #0]
 8005270:	6053      	strne	r3, [r2, #4]
 8005272:	4630      	mov	r0, r6
 8005274:	f000 fab2 	bl	80057dc <__malloc_unlock>
 8005278:	f104 000b 	add.w	r0, r4, #11
 800527c:	1d23      	adds	r3, r4, #4
 800527e:	f020 0007 	bic.w	r0, r0, #7
 8005282:	1ac2      	subs	r2, r0, r3
 8005284:	d0cc      	beq.n	8005220 <_malloc_r+0x20>
 8005286:	1a1b      	subs	r3, r3, r0
 8005288:	50a3      	str	r3, [r4, r2]
 800528a:	e7c9      	b.n	8005220 <_malloc_r+0x20>
 800528c:	4622      	mov	r2, r4
 800528e:	6864      	ldr	r4, [r4, #4]
 8005290:	e7cc      	b.n	800522c <_malloc_r+0x2c>
 8005292:	1cc4      	adds	r4, r0, #3
 8005294:	f024 0403 	bic.w	r4, r4, #3
 8005298:	42a0      	cmp	r0, r4
 800529a:	d0e3      	beq.n	8005264 <_malloc_r+0x64>
 800529c:	1a21      	subs	r1, r4, r0
 800529e:	4630      	mov	r0, r6
 80052a0:	f7fc ff92 	bl	80021c8 <_sbrk_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1dd      	bne.n	8005264 <_malloc_r+0x64>
 80052a8:	e7cf      	b.n	800524a <_malloc_r+0x4a>
 80052aa:	bf00      	nop
 80052ac:	20000bb0 	.word	0x20000bb0
 80052b0:	20000bb4 	.word	0x20000bb4

080052b4 <__sfputc_r>:
 80052b4:	6893      	ldr	r3, [r2, #8]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	b410      	push	{r4}
 80052bc:	6093      	str	r3, [r2, #8]
 80052be:	da08      	bge.n	80052d2 <__sfputc_r+0x1e>
 80052c0:	6994      	ldr	r4, [r2, #24]
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	db01      	blt.n	80052ca <__sfputc_r+0x16>
 80052c6:	290a      	cmp	r1, #10
 80052c8:	d103      	bne.n	80052d2 <__sfputc_r+0x1e>
 80052ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ce:	f000 b98f 	b.w	80055f0 <__swbuf_r>
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	1c58      	adds	r0, r3, #1
 80052d6:	6010      	str	r0, [r2, #0]
 80052d8:	7019      	strb	r1, [r3, #0]
 80052da:	4608      	mov	r0, r1
 80052dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <__sfputs_r>:
 80052e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	18d5      	adds	r5, r2, r3
 80052ec:	42ac      	cmp	r4, r5
 80052ee:	d101      	bne.n	80052f4 <__sfputs_r+0x12>
 80052f0:	2000      	movs	r0, #0
 80052f2:	e007      	b.n	8005304 <__sfputs_r+0x22>
 80052f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f8:	463a      	mov	r2, r7
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7ff ffda 	bl	80052b4 <__sfputc_r>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d1f3      	bne.n	80052ec <__sfputs_r+0xa>
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005308 <_vfiprintf_r>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	460d      	mov	r5, r1
 800530e:	b09d      	sub	sp, #116	; 0x74
 8005310:	4614      	mov	r4, r2
 8005312:	4698      	mov	r8, r3
 8005314:	4606      	mov	r6, r0
 8005316:	b118      	cbz	r0, 8005320 <_vfiprintf_r+0x18>
 8005318:	6983      	ldr	r3, [r0, #24]
 800531a:	b90b      	cbnz	r3, 8005320 <_vfiprintf_r+0x18>
 800531c:	f7ff fa4c 	bl	80047b8 <__sinit>
 8005320:	4b89      	ldr	r3, [pc, #548]	; (8005548 <_vfiprintf_r+0x240>)
 8005322:	429d      	cmp	r5, r3
 8005324:	d11b      	bne.n	800535e <_vfiprintf_r+0x56>
 8005326:	6875      	ldr	r5, [r6, #4]
 8005328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	d405      	bmi.n	800533a <_vfiprintf_r+0x32>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	059a      	lsls	r2, r3, #22
 8005332:	d402      	bmi.n	800533a <_vfiprintf_r+0x32>
 8005334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005336:	f7ff faf4 	bl	8004922 <__retarget_lock_acquire_recursive>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	071b      	lsls	r3, r3, #28
 800533e:	d501      	bpl.n	8005344 <_vfiprintf_r+0x3c>
 8005340:	692b      	ldr	r3, [r5, #16]
 8005342:	b9eb      	cbnz	r3, 8005380 <_vfiprintf_r+0x78>
 8005344:	4629      	mov	r1, r5
 8005346:	4630      	mov	r0, r6
 8005348:	f000 f9b2 	bl	80056b0 <__swsetup_r>
 800534c:	b1c0      	cbz	r0, 8005380 <_vfiprintf_r+0x78>
 800534e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005350:	07dc      	lsls	r4, r3, #31
 8005352:	d50e      	bpl.n	8005372 <_vfiprintf_r+0x6a>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005358:	b01d      	add	sp, #116	; 0x74
 800535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535e:	4b7b      	ldr	r3, [pc, #492]	; (800554c <_vfiprintf_r+0x244>)
 8005360:	429d      	cmp	r5, r3
 8005362:	d101      	bne.n	8005368 <_vfiprintf_r+0x60>
 8005364:	68b5      	ldr	r5, [r6, #8]
 8005366:	e7df      	b.n	8005328 <_vfiprintf_r+0x20>
 8005368:	4b79      	ldr	r3, [pc, #484]	; (8005550 <_vfiprintf_r+0x248>)
 800536a:	429d      	cmp	r5, r3
 800536c:	bf08      	it	eq
 800536e:	68f5      	ldreq	r5, [r6, #12]
 8005370:	e7da      	b.n	8005328 <_vfiprintf_r+0x20>
 8005372:	89ab      	ldrh	r3, [r5, #12]
 8005374:	0598      	lsls	r0, r3, #22
 8005376:	d4ed      	bmi.n	8005354 <_vfiprintf_r+0x4c>
 8005378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537a:	f7ff fad3 	bl	8004924 <__retarget_lock_release_recursive>
 800537e:	e7e9      	b.n	8005354 <_vfiprintf_r+0x4c>
 8005380:	2300      	movs	r3, #0
 8005382:	9309      	str	r3, [sp, #36]	; 0x24
 8005384:	2320      	movs	r3, #32
 8005386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800538a:	f8cd 800c 	str.w	r8, [sp, #12]
 800538e:	2330      	movs	r3, #48	; 0x30
 8005390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005554 <_vfiprintf_r+0x24c>
 8005394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005398:	f04f 0901 	mov.w	r9, #1
 800539c:	4623      	mov	r3, r4
 800539e:	469a      	mov	sl, r3
 80053a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053a4:	b10a      	cbz	r2, 80053aa <_vfiprintf_r+0xa2>
 80053a6:	2a25      	cmp	r2, #37	; 0x25
 80053a8:	d1f9      	bne.n	800539e <_vfiprintf_r+0x96>
 80053aa:	ebba 0b04 	subs.w	fp, sl, r4
 80053ae:	d00b      	beq.n	80053c8 <_vfiprintf_r+0xc0>
 80053b0:	465b      	mov	r3, fp
 80053b2:	4622      	mov	r2, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ff93 	bl	80052e2 <__sfputs_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	f000 80aa 	beq.w	8005516 <_vfiprintf_r+0x20e>
 80053c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053c4:	445a      	add	r2, fp
 80053c6:	9209      	str	r2, [sp, #36]	; 0x24
 80053c8:	f89a 3000 	ldrb.w	r3, [sl]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80a2 	beq.w	8005516 <_vfiprintf_r+0x20e>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053dc:	f10a 0a01 	add.w	sl, sl, #1
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	9307      	str	r3, [sp, #28]
 80053e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e8:	931a      	str	r3, [sp, #104]	; 0x68
 80053ea:	4654      	mov	r4, sl
 80053ec:	2205      	movs	r2, #5
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	4858      	ldr	r0, [pc, #352]	; (8005554 <_vfiprintf_r+0x24c>)
 80053f4:	f7fa ff1c 	bl	8000230 <memchr>
 80053f8:	9a04      	ldr	r2, [sp, #16]
 80053fa:	b9d8      	cbnz	r0, 8005434 <_vfiprintf_r+0x12c>
 80053fc:	06d1      	lsls	r1, r2, #27
 80053fe:	bf44      	itt	mi
 8005400:	2320      	movmi	r3, #32
 8005402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005406:	0713      	lsls	r3, r2, #28
 8005408:	bf44      	itt	mi
 800540a:	232b      	movmi	r3, #43	; 0x2b
 800540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005410:	f89a 3000 	ldrb.w	r3, [sl]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d015      	beq.n	8005444 <_vfiprintf_r+0x13c>
 8005418:	9a07      	ldr	r2, [sp, #28]
 800541a:	4654      	mov	r4, sl
 800541c:	2000      	movs	r0, #0
 800541e:	f04f 0c0a 	mov.w	ip, #10
 8005422:	4621      	mov	r1, r4
 8005424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005428:	3b30      	subs	r3, #48	; 0x30
 800542a:	2b09      	cmp	r3, #9
 800542c:	d94e      	bls.n	80054cc <_vfiprintf_r+0x1c4>
 800542e:	b1b0      	cbz	r0, 800545e <_vfiprintf_r+0x156>
 8005430:	9207      	str	r2, [sp, #28]
 8005432:	e014      	b.n	800545e <_vfiprintf_r+0x156>
 8005434:	eba0 0308 	sub.w	r3, r0, r8
 8005438:	fa09 f303 	lsl.w	r3, r9, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	9304      	str	r3, [sp, #16]
 8005440:	46a2      	mov	sl, r4
 8005442:	e7d2      	b.n	80053ea <_vfiprintf_r+0xe2>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	1d19      	adds	r1, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	9103      	str	r1, [sp, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfbb      	ittet	lt
 8005450:	425b      	neglt	r3, r3
 8005452:	f042 0202 	orrlt.w	r2, r2, #2
 8005456:	9307      	strge	r3, [sp, #28]
 8005458:	9307      	strlt	r3, [sp, #28]
 800545a:	bfb8      	it	lt
 800545c:	9204      	strlt	r2, [sp, #16]
 800545e:	7823      	ldrb	r3, [r4, #0]
 8005460:	2b2e      	cmp	r3, #46	; 0x2e
 8005462:	d10c      	bne.n	800547e <_vfiprintf_r+0x176>
 8005464:	7863      	ldrb	r3, [r4, #1]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d135      	bne.n	80054d6 <_vfiprintf_r+0x1ce>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	1d1a      	adds	r2, r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	9203      	str	r2, [sp, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	bfb8      	it	lt
 8005476:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800547a:	3402      	adds	r4, #2
 800547c:	9305      	str	r3, [sp, #20]
 800547e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005564 <_vfiprintf_r+0x25c>
 8005482:	7821      	ldrb	r1, [r4, #0]
 8005484:	2203      	movs	r2, #3
 8005486:	4650      	mov	r0, sl
 8005488:	f7fa fed2 	bl	8000230 <memchr>
 800548c:	b140      	cbz	r0, 80054a0 <_vfiprintf_r+0x198>
 800548e:	2340      	movs	r3, #64	; 0x40
 8005490:	eba0 000a 	sub.w	r0, r0, sl
 8005494:	fa03 f000 	lsl.w	r0, r3, r0
 8005498:	9b04      	ldr	r3, [sp, #16]
 800549a:	4303      	orrs	r3, r0
 800549c:	3401      	adds	r4, #1
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a4:	482c      	ldr	r0, [pc, #176]	; (8005558 <_vfiprintf_r+0x250>)
 80054a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054aa:	2206      	movs	r2, #6
 80054ac:	f7fa fec0 	bl	8000230 <memchr>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d03f      	beq.n	8005534 <_vfiprintf_r+0x22c>
 80054b4:	4b29      	ldr	r3, [pc, #164]	; (800555c <_vfiprintf_r+0x254>)
 80054b6:	bb1b      	cbnz	r3, 8005500 <_vfiprintf_r+0x1f8>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	3307      	adds	r3, #7
 80054bc:	f023 0307 	bic.w	r3, r3, #7
 80054c0:	3308      	adds	r3, #8
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c6:	443b      	add	r3, r7
 80054c8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ca:	e767      	b.n	800539c <_vfiprintf_r+0x94>
 80054cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d0:	460c      	mov	r4, r1
 80054d2:	2001      	movs	r0, #1
 80054d4:	e7a5      	b.n	8005422 <_vfiprintf_r+0x11a>
 80054d6:	2300      	movs	r3, #0
 80054d8:	3401      	adds	r4, #1
 80054da:	9305      	str	r3, [sp, #20]
 80054dc:	4619      	mov	r1, r3
 80054de:	f04f 0c0a 	mov.w	ip, #10
 80054e2:	4620      	mov	r0, r4
 80054e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e8:	3a30      	subs	r2, #48	; 0x30
 80054ea:	2a09      	cmp	r2, #9
 80054ec:	d903      	bls.n	80054f6 <_vfiprintf_r+0x1ee>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0c5      	beq.n	800547e <_vfiprintf_r+0x176>
 80054f2:	9105      	str	r1, [sp, #20]
 80054f4:	e7c3      	b.n	800547e <_vfiprintf_r+0x176>
 80054f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80054fa:	4604      	mov	r4, r0
 80054fc:	2301      	movs	r3, #1
 80054fe:	e7f0      	b.n	80054e2 <_vfiprintf_r+0x1da>
 8005500:	ab03      	add	r3, sp, #12
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	462a      	mov	r2, r5
 8005506:	4b16      	ldr	r3, [pc, #88]	; (8005560 <_vfiprintf_r+0x258>)
 8005508:	a904      	add	r1, sp, #16
 800550a:	4630      	mov	r0, r6
 800550c:	f7fd fbac 	bl	8002c68 <_printf_float>
 8005510:	4607      	mov	r7, r0
 8005512:	1c78      	adds	r0, r7, #1
 8005514:	d1d6      	bne.n	80054c4 <_vfiprintf_r+0x1bc>
 8005516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005518:	07d9      	lsls	r1, r3, #31
 800551a:	d405      	bmi.n	8005528 <_vfiprintf_r+0x220>
 800551c:	89ab      	ldrh	r3, [r5, #12]
 800551e:	059a      	lsls	r2, r3, #22
 8005520:	d402      	bmi.n	8005528 <_vfiprintf_r+0x220>
 8005522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005524:	f7ff f9fe 	bl	8004924 <__retarget_lock_release_recursive>
 8005528:	89ab      	ldrh	r3, [r5, #12]
 800552a:	065b      	lsls	r3, r3, #25
 800552c:	f53f af12 	bmi.w	8005354 <_vfiprintf_r+0x4c>
 8005530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005532:	e711      	b.n	8005358 <_vfiprintf_r+0x50>
 8005534:	ab03      	add	r3, sp, #12
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	462a      	mov	r2, r5
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <_vfiprintf_r+0x258>)
 800553c:	a904      	add	r1, sp, #16
 800553e:	4630      	mov	r0, r6
 8005540:	f7fd fe36 	bl	80031b0 <_printf_i>
 8005544:	e7e4      	b.n	8005510 <_vfiprintf_r+0x208>
 8005546:	bf00      	nop
 8005548:	080122a4 	.word	0x080122a4
 800554c:	080122c4 	.word	0x080122c4
 8005550:	08012284 	.word	0x08012284
 8005554:	08012464 	.word	0x08012464
 8005558:	0801246e 	.word	0x0801246e
 800555c:	08002c69 	.word	0x08002c69
 8005560:	080052e3 	.word	0x080052e3
 8005564:	0801246a 	.word	0x0801246a

08005568 <__sread>:
 8005568:	b510      	push	{r4, lr}
 800556a:	460c      	mov	r4, r1
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	f7fc fe4d 	bl	800220e <_read_r>
 8005574:	2800      	cmp	r0, #0
 8005576:	bfab      	itete	ge
 8005578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557a:	89a3      	ldrhlt	r3, [r4, #12]
 800557c:	181b      	addge	r3, r3, r0
 800557e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005582:	bfac      	ite	ge
 8005584:	6563      	strge	r3, [r4, #84]	; 0x54
 8005586:	81a3      	strhlt	r3, [r4, #12]
 8005588:	bd10      	pop	{r4, pc}

0800558a <__swrite>:
 800558a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558e:	461f      	mov	r7, r3
 8005590:	898b      	ldrh	r3, [r1, #12]
 8005592:	05db      	lsls	r3, r3, #23
 8005594:	4605      	mov	r5, r0
 8005596:	460c      	mov	r4, r1
 8005598:	4616      	mov	r6, r2
 800559a:	d505      	bpl.n	80055a8 <__swrite+0x1e>
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f7fc fe31 	bl	800220a <_lseek_r>
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	4628      	mov	r0, r5
 80055ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055be:	f7fc be2b 	b.w	8002218 <_write_r>

080055c2 <__sseek>:
 80055c2:	b510      	push	{r4, lr}
 80055c4:	460c      	mov	r4, r1
 80055c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ca:	f7fc fe1e 	bl	800220a <_lseek_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	bf15      	itete	ne
 80055d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055de:	81a3      	strheq	r3, [r4, #12]
 80055e0:	bf18      	it	ne
 80055e2:	81a3      	strhne	r3, [r4, #12]
 80055e4:	bd10      	pop	{r4, pc}

080055e6 <__sclose>:
 80055e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ea:	f7fc be05 	b.w	80021f8 <_close_r>
	...

080055f0 <__swbuf_r>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	460e      	mov	r6, r1
 80055f4:	4614      	mov	r4, r2
 80055f6:	4605      	mov	r5, r0
 80055f8:	b118      	cbz	r0, 8005602 <__swbuf_r+0x12>
 80055fa:	6983      	ldr	r3, [r0, #24]
 80055fc:	b90b      	cbnz	r3, 8005602 <__swbuf_r+0x12>
 80055fe:	f7ff f8db 	bl	80047b8 <__sinit>
 8005602:	4b21      	ldr	r3, [pc, #132]	; (8005688 <__swbuf_r+0x98>)
 8005604:	429c      	cmp	r4, r3
 8005606:	d12b      	bne.n	8005660 <__swbuf_r+0x70>
 8005608:	686c      	ldr	r4, [r5, #4]
 800560a:	69a3      	ldr	r3, [r4, #24]
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	071a      	lsls	r2, r3, #28
 8005612:	d52f      	bpl.n	8005674 <__swbuf_r+0x84>
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	b36b      	cbz	r3, 8005674 <__swbuf_r+0x84>
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	1ac0      	subs	r0, r0, r3
 800561e:	6963      	ldr	r3, [r4, #20]
 8005620:	b2f6      	uxtb	r6, r6
 8005622:	4283      	cmp	r3, r0
 8005624:	4637      	mov	r7, r6
 8005626:	dc04      	bgt.n	8005632 <__swbuf_r+0x42>
 8005628:	4621      	mov	r1, r4
 800562a:	4628      	mov	r0, r5
 800562c:	f7ff f830 	bl	8004690 <_fflush_r>
 8005630:	bb30      	cbnz	r0, 8005680 <__swbuf_r+0x90>
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	3b01      	subs	r3, #1
 8005636:	60a3      	str	r3, [r4, #8]
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	701e      	strb	r6, [r3, #0]
 8005640:	6963      	ldr	r3, [r4, #20]
 8005642:	3001      	adds	r0, #1
 8005644:	4283      	cmp	r3, r0
 8005646:	d004      	beq.n	8005652 <__swbuf_r+0x62>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	07db      	lsls	r3, r3, #31
 800564c:	d506      	bpl.n	800565c <__swbuf_r+0x6c>
 800564e:	2e0a      	cmp	r6, #10
 8005650:	d104      	bne.n	800565c <__swbuf_r+0x6c>
 8005652:	4621      	mov	r1, r4
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff f81b 	bl	8004690 <_fflush_r>
 800565a:	b988      	cbnz	r0, 8005680 <__swbuf_r+0x90>
 800565c:	4638      	mov	r0, r7
 800565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <__swbuf_r+0x9c>)
 8005662:	429c      	cmp	r4, r3
 8005664:	d101      	bne.n	800566a <__swbuf_r+0x7a>
 8005666:	68ac      	ldr	r4, [r5, #8]
 8005668:	e7cf      	b.n	800560a <__swbuf_r+0x1a>
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <__swbuf_r+0xa0>)
 800566c:	429c      	cmp	r4, r3
 800566e:	bf08      	it	eq
 8005670:	68ec      	ldreq	r4, [r5, #12]
 8005672:	e7ca      	b.n	800560a <__swbuf_r+0x1a>
 8005674:	4621      	mov	r1, r4
 8005676:	4628      	mov	r0, r5
 8005678:	f000 f81a 	bl	80056b0 <__swsetup_r>
 800567c:	2800      	cmp	r0, #0
 800567e:	d0cb      	beq.n	8005618 <__swbuf_r+0x28>
 8005680:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005684:	e7ea      	b.n	800565c <__swbuf_r+0x6c>
 8005686:	bf00      	nop
 8005688:	080122a4 	.word	0x080122a4
 800568c:	080122c4 	.word	0x080122c4
 8005690:	08012284 	.word	0x08012284

08005694 <__ascii_wctomb>:
 8005694:	b149      	cbz	r1, 80056aa <__ascii_wctomb+0x16>
 8005696:	2aff      	cmp	r2, #255	; 0xff
 8005698:	bf85      	ittet	hi
 800569a:	238a      	movhi	r3, #138	; 0x8a
 800569c:	6003      	strhi	r3, [r0, #0]
 800569e:	700a      	strbls	r2, [r1, #0]
 80056a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80056a4:	bf98      	it	ls
 80056a6:	2001      	movls	r0, #1
 80056a8:	4770      	bx	lr
 80056aa:	4608      	mov	r0, r1
 80056ac:	4770      	bx	lr
	...

080056b0 <__swsetup_r>:
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <__swsetup_r+0xcc>)
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	681d      	ldr	r5, [r3, #0]
 80056b6:	4606      	mov	r6, r0
 80056b8:	460c      	mov	r4, r1
 80056ba:	b125      	cbz	r5, 80056c6 <__swsetup_r+0x16>
 80056bc:	69ab      	ldr	r3, [r5, #24]
 80056be:	b913      	cbnz	r3, 80056c6 <__swsetup_r+0x16>
 80056c0:	4628      	mov	r0, r5
 80056c2:	f7ff f879 	bl	80047b8 <__sinit>
 80056c6:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <__swsetup_r+0xd0>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	d10f      	bne.n	80056ec <__swsetup_r+0x3c>
 80056cc:	686c      	ldr	r4, [r5, #4]
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056d4:	0719      	lsls	r1, r3, #28
 80056d6:	d42c      	bmi.n	8005732 <__swsetup_r+0x82>
 80056d8:	06dd      	lsls	r5, r3, #27
 80056da:	d411      	bmi.n	8005700 <__swsetup_r+0x50>
 80056dc:	2309      	movs	r3, #9
 80056de:	6033      	str	r3, [r6, #0]
 80056e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ea:	e03e      	b.n	800576a <__swsetup_r+0xba>
 80056ec:	4b25      	ldr	r3, [pc, #148]	; (8005784 <__swsetup_r+0xd4>)
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d101      	bne.n	80056f6 <__swsetup_r+0x46>
 80056f2:	68ac      	ldr	r4, [r5, #8]
 80056f4:	e7eb      	b.n	80056ce <__swsetup_r+0x1e>
 80056f6:	4b24      	ldr	r3, [pc, #144]	; (8005788 <__swsetup_r+0xd8>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	bf08      	it	eq
 80056fc:	68ec      	ldreq	r4, [r5, #12]
 80056fe:	e7e6      	b.n	80056ce <__swsetup_r+0x1e>
 8005700:	0758      	lsls	r0, r3, #29
 8005702:	d512      	bpl.n	800572a <__swsetup_r+0x7a>
 8005704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005706:	b141      	cbz	r1, 800571a <__swsetup_r+0x6a>
 8005708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800570c:	4299      	cmp	r1, r3
 800570e:	d002      	beq.n	8005716 <__swsetup_r+0x66>
 8005710:	4630      	mov	r0, r6
 8005712:	f7ff fd29 	bl	8005168 <_free_r>
 8005716:	2300      	movs	r3, #0
 8005718:	6363      	str	r3, [r4, #52]	; 0x34
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005720:	81a3      	strh	r3, [r4, #12]
 8005722:	2300      	movs	r3, #0
 8005724:	6063      	str	r3, [r4, #4]
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	b94b      	cbnz	r3, 800574a <__swsetup_r+0x9a>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800573c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005740:	d003      	beq.n	800574a <__swsetup_r+0x9a>
 8005742:	4621      	mov	r1, r4
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff f913 	bl	8004970 <__smakebuf_r>
 800574a:	89a0      	ldrh	r0, [r4, #12]
 800574c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005750:	f010 0301 	ands.w	r3, r0, #1
 8005754:	d00a      	beq.n	800576c <__swsetup_r+0xbc>
 8005756:	2300      	movs	r3, #0
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6963      	ldr	r3, [r4, #20]
 800575c:	425b      	negs	r3, r3
 800575e:	61a3      	str	r3, [r4, #24]
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	b943      	cbnz	r3, 8005776 <__swsetup_r+0xc6>
 8005764:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005768:	d1ba      	bne.n	80056e0 <__swsetup_r+0x30>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	0781      	lsls	r1, r0, #30
 800576e:	bf58      	it	pl
 8005770:	6963      	ldrpl	r3, [r4, #20]
 8005772:	60a3      	str	r3, [r4, #8]
 8005774:	e7f4      	b.n	8005760 <__swsetup_r+0xb0>
 8005776:	2000      	movs	r0, #0
 8005778:	e7f7      	b.n	800576a <__swsetup_r+0xba>
 800577a:	bf00      	nop
 800577c:	20000018 	.word	0x20000018
 8005780:	080122a4 	.word	0x080122a4
 8005784:	080122c4 	.word	0x080122c4
 8005788:	08012284 	.word	0x08012284

0800578c <abort>:
 800578c:	b508      	push	{r3, lr}
 800578e:	2006      	movs	r0, #6
 8005790:	f000 f878 	bl	8005884 <raise>
 8005794:	2001      	movs	r0, #1
 8005796:	f7fc fd62 	bl	800225e <_exit>

0800579a <memmove>:
 800579a:	4288      	cmp	r0, r1
 800579c:	b510      	push	{r4, lr}
 800579e:	eb01 0402 	add.w	r4, r1, r2
 80057a2:	d902      	bls.n	80057aa <memmove+0x10>
 80057a4:	4284      	cmp	r4, r0
 80057a6:	4623      	mov	r3, r4
 80057a8:	d807      	bhi.n	80057ba <memmove+0x20>
 80057aa:	1e43      	subs	r3, r0, #1
 80057ac:	42a1      	cmp	r1, r4
 80057ae:	d008      	beq.n	80057c2 <memmove+0x28>
 80057b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057b8:	e7f8      	b.n	80057ac <memmove+0x12>
 80057ba:	4402      	add	r2, r0
 80057bc:	4601      	mov	r1, r0
 80057be:	428a      	cmp	r2, r1
 80057c0:	d100      	bne.n	80057c4 <memmove+0x2a>
 80057c2:	bd10      	pop	{r4, pc}
 80057c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057cc:	e7f7      	b.n	80057be <memmove+0x24>
	...

080057d0 <__malloc_lock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__malloc_lock+0x8>)
 80057d2:	f7ff b8a6 	b.w	8004922 <__retarget_lock_acquire_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000bac 	.word	0x20000bac

080057dc <__malloc_unlock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__malloc_unlock+0x8>)
 80057de:	f7ff b8a1 	b.w	8004924 <__retarget_lock_release_recursive>
 80057e2:	bf00      	nop
 80057e4:	20000bac 	.word	0x20000bac

080057e8 <_realloc_r>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	4607      	mov	r7, r0
 80057ec:	4614      	mov	r4, r2
 80057ee:	460e      	mov	r6, r1
 80057f0:	b921      	cbnz	r1, 80057fc <_realloc_r+0x14>
 80057f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057f6:	4611      	mov	r1, r2
 80057f8:	f7ff bd02 	b.w	8005200 <_malloc_r>
 80057fc:	b922      	cbnz	r2, 8005808 <_realloc_r+0x20>
 80057fe:	f7ff fcb3 	bl	8005168 <_free_r>
 8005802:	4625      	mov	r5, r4
 8005804:	4628      	mov	r0, r5
 8005806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005808:	f000 f858 	bl	80058bc <_malloc_usable_size_r>
 800580c:	42a0      	cmp	r0, r4
 800580e:	d20f      	bcs.n	8005830 <_realloc_r+0x48>
 8005810:	4621      	mov	r1, r4
 8005812:	4638      	mov	r0, r7
 8005814:	f7ff fcf4 	bl	8005200 <_malloc_r>
 8005818:	4605      	mov	r5, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d0f2      	beq.n	8005804 <_realloc_r+0x1c>
 800581e:	4631      	mov	r1, r6
 8005820:	4622      	mov	r2, r4
 8005822:	f7ff f8ff 	bl	8004a24 <memcpy>
 8005826:	4631      	mov	r1, r6
 8005828:	4638      	mov	r0, r7
 800582a:	f7ff fc9d 	bl	8005168 <_free_r>
 800582e:	e7e9      	b.n	8005804 <_realloc_r+0x1c>
 8005830:	4635      	mov	r5, r6
 8005832:	e7e7      	b.n	8005804 <_realloc_r+0x1c>

08005834 <_raise_r>:
 8005834:	291f      	cmp	r1, #31
 8005836:	b538      	push	{r3, r4, r5, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	d904      	bls.n	8005848 <_raise_r+0x14>
 800583e:	2316      	movs	r3, #22
 8005840:	6003      	str	r3, [r0, #0]
 8005842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800584a:	b112      	cbz	r2, 8005852 <_raise_r+0x1e>
 800584c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005850:	b94b      	cbnz	r3, 8005866 <_raise_r+0x32>
 8005852:	4620      	mov	r0, r4
 8005854:	f000 f830 	bl	80058b8 <_getpid_r>
 8005858:	462a      	mov	r2, r5
 800585a:	4601      	mov	r1, r0
 800585c:	4620      	mov	r0, r4
 800585e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005862:	f000 b817 	b.w	8005894 <_kill_r>
 8005866:	2b01      	cmp	r3, #1
 8005868:	d00a      	beq.n	8005880 <_raise_r+0x4c>
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	d103      	bne.n	8005876 <_raise_r+0x42>
 800586e:	2316      	movs	r3, #22
 8005870:	6003      	str	r3, [r0, #0]
 8005872:	2001      	movs	r0, #1
 8005874:	e7e7      	b.n	8005846 <_raise_r+0x12>
 8005876:	2400      	movs	r4, #0
 8005878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800587c:	4628      	mov	r0, r5
 800587e:	4798      	blx	r3
 8005880:	2000      	movs	r0, #0
 8005882:	e7e0      	b.n	8005846 <_raise_r+0x12>

08005884 <raise>:
 8005884:	4b02      	ldr	r3, [pc, #8]	; (8005890 <raise+0xc>)
 8005886:	4601      	mov	r1, r0
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	f7ff bfd3 	b.w	8005834 <_raise_r>
 800588e:	bf00      	nop
 8005890:	20000018 	.word	0x20000018

08005894 <_kill_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	; (80058b4 <_kill_r+0x20>)
 8005898:	2300      	movs	r3, #0
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	f7fc fcd9 	bl	8002258 <_kill>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d102      	bne.n	80058b0 <_kill_r+0x1c>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	b103      	cbz	r3, 80058b0 <_kill_r+0x1c>
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	20000bb8 	.word	0x20000bb8

080058b8 <_getpid_r>:
 80058b8:	f7fc bcd2 	b.w	8002260 <_getpid>

080058bc <_malloc_usable_size_r>:
 80058bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c0:	1f18      	subs	r0, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfbc      	itt	lt
 80058c6:	580b      	ldrlt	r3, [r1, r0]
 80058c8:	18c0      	addlt	r0, r0, r3
 80058ca:	4770      	bx	lr

080058cc <iprintf>:
 80058cc:	b40f      	push	{r0, r1, r2, r3}
 80058ce:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <iprintf+0x2c>)
 80058d0:	b513      	push	{r0, r1, r4, lr}
 80058d2:	681c      	ldr	r4, [r3, #0]
 80058d4:	b124      	cbz	r4, 80058e0 <iprintf+0x14>
 80058d6:	69a3      	ldr	r3, [r4, #24]
 80058d8:	b913      	cbnz	r3, 80058e0 <iprintf+0x14>
 80058da:	4620      	mov	r0, r4
 80058dc:	f7fe ff6c 	bl	80047b8 <__sinit>
 80058e0:	ab05      	add	r3, sp, #20
 80058e2:	9a04      	ldr	r2, [sp, #16]
 80058e4:	68a1      	ldr	r1, [r4, #8]
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff fd0d 	bl	8005308 <_vfiprintf_r>
 80058ee:	b002      	add	sp, #8
 80058f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f4:	b004      	add	sp, #16
 80058f6:	4770      	bx	lr
 80058f8:	20000018 	.word	0x20000018

080058fc <putchar>:
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <putchar+0x28>)
 80058fe:	b513      	push	{r0, r1, r4, lr}
 8005900:	681c      	ldr	r4, [r3, #0]
 8005902:	4601      	mov	r1, r0
 8005904:	b134      	cbz	r4, 8005914 <putchar+0x18>
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	b923      	cbnz	r3, 8005914 <putchar+0x18>
 800590a:	9001      	str	r0, [sp, #4]
 800590c:	4620      	mov	r0, r4
 800590e:	f7fe ff53 	bl	80047b8 <__sinit>
 8005912:	9901      	ldr	r1, [sp, #4]
 8005914:	68a2      	ldr	r2, [r4, #8]
 8005916:	4620      	mov	r0, r4
 8005918:	b002      	add	sp, #8
 800591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591e:	f000 ba31 	b.w	8005d84 <_putc_r>
 8005922:	bf00      	nop
 8005924:	20000018 	.word	0x20000018

08005928 <_puts_r>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	460e      	mov	r6, r1
 800592c:	4605      	mov	r5, r0
 800592e:	b118      	cbz	r0, 8005938 <_puts_r+0x10>
 8005930:	6983      	ldr	r3, [r0, #24]
 8005932:	b90b      	cbnz	r3, 8005938 <_puts_r+0x10>
 8005934:	f7fe ff40 	bl	80047b8 <__sinit>
 8005938:	69ab      	ldr	r3, [r5, #24]
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	b913      	cbnz	r3, 8005944 <_puts_r+0x1c>
 800593e:	4628      	mov	r0, r5
 8005940:	f7fe ff3a 	bl	80047b8 <__sinit>
 8005944:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <_puts_r+0xd0>)
 8005946:	429c      	cmp	r4, r3
 8005948:	d120      	bne.n	800598c <_puts_r+0x64>
 800594a:	686c      	ldr	r4, [r5, #4]
 800594c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800594e:	07db      	lsls	r3, r3, #31
 8005950:	d405      	bmi.n	800595e <_puts_r+0x36>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	0598      	lsls	r0, r3, #22
 8005956:	d402      	bmi.n	800595e <_puts_r+0x36>
 8005958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595a:	f7fe ffe2 	bl	8004922 <__retarget_lock_acquire_recursive>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	0719      	lsls	r1, r3, #28
 8005962:	d51d      	bpl.n	80059a0 <_puts_r+0x78>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	b1db      	cbz	r3, 80059a0 <_puts_r+0x78>
 8005968:	3e01      	subs	r6, #1
 800596a:	68a3      	ldr	r3, [r4, #8]
 800596c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005970:	3b01      	subs	r3, #1
 8005972:	60a3      	str	r3, [r4, #8]
 8005974:	bb39      	cbnz	r1, 80059c6 <_puts_r+0x9e>
 8005976:	2b00      	cmp	r3, #0
 8005978:	da38      	bge.n	80059ec <_puts_r+0xc4>
 800597a:	4622      	mov	r2, r4
 800597c:	210a      	movs	r1, #10
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fe36 	bl	80055f0 <__swbuf_r>
 8005984:	3001      	adds	r0, #1
 8005986:	d011      	beq.n	80059ac <_puts_r+0x84>
 8005988:	250a      	movs	r5, #10
 800598a:	e011      	b.n	80059b0 <_puts_r+0x88>
 800598c:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <_puts_r+0xd4>)
 800598e:	429c      	cmp	r4, r3
 8005990:	d101      	bne.n	8005996 <_puts_r+0x6e>
 8005992:	68ac      	ldr	r4, [r5, #8]
 8005994:	e7da      	b.n	800594c <_puts_r+0x24>
 8005996:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <_puts_r+0xd8>)
 8005998:	429c      	cmp	r4, r3
 800599a:	bf08      	it	eq
 800599c:	68ec      	ldreq	r4, [r5, #12]
 800599e:	e7d5      	b.n	800594c <_puts_r+0x24>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	f7ff fe84 	bl	80056b0 <__swsetup_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d0dd      	beq.n	8005968 <_puts_r+0x40>
 80059ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80059b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b2:	07da      	lsls	r2, r3, #31
 80059b4:	d405      	bmi.n	80059c2 <_puts_r+0x9a>
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	059b      	lsls	r3, r3, #22
 80059ba:	d402      	bmi.n	80059c2 <_puts_r+0x9a>
 80059bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059be:	f7fe ffb1 	bl	8004924 <__retarget_lock_release_recursive>
 80059c2:	4628      	mov	r0, r5
 80059c4:	bd70      	pop	{r4, r5, r6, pc}
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da04      	bge.n	80059d4 <_puts_r+0xac>
 80059ca:	69a2      	ldr	r2, [r4, #24]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	dc06      	bgt.n	80059de <_puts_r+0xb6>
 80059d0:	290a      	cmp	r1, #10
 80059d2:	d004      	beq.n	80059de <_puts_r+0xb6>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	6022      	str	r2, [r4, #0]
 80059da:	7019      	strb	r1, [r3, #0]
 80059dc:	e7c5      	b.n	800596a <_puts_r+0x42>
 80059de:	4622      	mov	r2, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f7ff fe05 	bl	80055f0 <__swbuf_r>
 80059e6:	3001      	adds	r0, #1
 80059e8:	d1bf      	bne.n	800596a <_puts_r+0x42>
 80059ea:	e7df      	b.n	80059ac <_puts_r+0x84>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	250a      	movs	r5, #10
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	6022      	str	r2, [r4, #0]
 80059f4:	701d      	strb	r5, [r3, #0]
 80059f6:	e7db      	b.n	80059b0 <_puts_r+0x88>
 80059f8:	080122a4 	.word	0x080122a4
 80059fc:	080122c4 	.word	0x080122c4
 8005a00:	08012284 	.word	0x08012284

08005a04 <puts>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <puts+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f7ff bf8d 	b.w	8005928 <_puts_r>
 8005a0e:	bf00      	nop
 8005a10:	20000018 	.word	0x20000018

08005a14 <strcasecmp>:
 8005a14:	b530      	push	{r4, r5, lr}
 8005a16:	4d0b      	ldr	r5, [pc, #44]	; (8005a44 <strcasecmp+0x30>)
 8005a18:	4604      	mov	r4, r0
 8005a1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a1e:	5d5a      	ldrb	r2, [r3, r5]
 8005a20:	f002 0203 	and.w	r2, r2, #3
 8005a24:	2a01      	cmp	r2, #1
 8005a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a2a:	5ca8      	ldrb	r0, [r5, r2]
 8005a2c:	f000 0003 	and.w	r0, r0, #3
 8005a30:	bf08      	it	eq
 8005a32:	3320      	addeq	r3, #32
 8005a34:	2801      	cmp	r0, #1
 8005a36:	bf08      	it	eq
 8005a38:	3220      	addeq	r2, #32
 8005a3a:	1a98      	subs	r0, r3, r2
 8005a3c:	d101      	bne.n	8005a42 <strcasecmp+0x2e>
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	d1eb      	bne.n	8005a1a <strcasecmp+0x6>
 8005a42:	bd30      	pop	{r4, r5, pc}
 8005a44:	08011fde 	.word	0x08011fde

08005a48 <strcpy>:
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a4e:	f803 2b01 	strb.w	r2, [r3], #1
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d1f9      	bne.n	8005a4a <strcpy+0x2>
 8005a56:	4770      	bx	lr

08005a58 <_vsniprintf_r>:
 8005a58:	b530      	push	{r4, r5, lr}
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	2c00      	cmp	r4, #0
 8005a5e:	b09b      	sub	sp, #108	; 0x6c
 8005a60:	4605      	mov	r5, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	da05      	bge.n	8005a72 <_vsniprintf_r+0x1a>
 8005a66:	238b      	movs	r3, #139	; 0x8b
 8005a68:	6003      	str	r3, [r0, #0]
 8005a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a6e:	b01b      	add	sp, #108	; 0x6c
 8005a70:	bd30      	pop	{r4, r5, pc}
 8005a72:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a76:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005a7a:	bf14      	ite	ne
 8005a7c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a80:	4623      	moveq	r3, r4
 8005a82:	9302      	str	r3, [sp, #8]
 8005a84:	9305      	str	r3, [sp, #20]
 8005a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a8a:	9100      	str	r1, [sp, #0]
 8005a8c:	9104      	str	r1, [sp, #16]
 8005a8e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005a92:	4669      	mov	r1, sp
 8005a94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a96:	f000 f875 	bl	8005b84 <_svfiprintf_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	bfbc      	itt	lt
 8005a9e:	238b      	movlt	r3, #139	; 0x8b
 8005aa0:	602b      	strlt	r3, [r5, #0]
 8005aa2:	2c00      	cmp	r4, #0
 8005aa4:	d0e3      	beq.n	8005a6e <_vsniprintf_r+0x16>
 8005aa6:	9b00      	ldr	r3, [sp, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e7df      	b.n	8005a6e <_vsniprintf_r+0x16>
	...

08005ab0 <vsniprintf>:
 8005ab0:	b507      	push	{r0, r1, r2, lr}
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	4601      	mov	r1, r0
 8005aba:	4803      	ldr	r0, [pc, #12]	; (8005ac8 <vsniprintf+0x18>)
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f7ff ffcb 	bl	8005a58 <_vsniprintf_r>
 8005ac2:	b003      	add	sp, #12
 8005ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ac8:	20000018 	.word	0x20000018

08005acc <__ssputs_r>:
 8005acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	688e      	ldr	r6, [r1, #8]
 8005ad2:	429e      	cmp	r6, r3
 8005ad4:	4682      	mov	sl, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	4690      	mov	r8, r2
 8005ada:	461f      	mov	r7, r3
 8005adc:	d838      	bhi.n	8005b50 <__ssputs_r+0x84>
 8005ade:	898a      	ldrh	r2, [r1, #12]
 8005ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ae4:	d032      	beq.n	8005b4c <__ssputs_r+0x80>
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	6909      	ldr	r1, [r1, #16]
 8005aea:	eba5 0901 	sub.w	r9, r5, r1
 8005aee:	6965      	ldr	r5, [r4, #20]
 8005af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005af8:	3301      	adds	r3, #1
 8005afa:	444b      	add	r3, r9
 8005afc:	106d      	asrs	r5, r5, #1
 8005afe:	429d      	cmp	r5, r3
 8005b00:	bf38      	it	cc
 8005b02:	461d      	movcc	r5, r3
 8005b04:	0553      	lsls	r3, r2, #21
 8005b06:	d531      	bpl.n	8005b6c <__ssputs_r+0xa0>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7ff fb79 	bl	8005200 <_malloc_r>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	b950      	cbnz	r0, 8005b28 <__ssputs_r+0x5c>
 8005b12:	230c      	movs	r3, #12
 8005b14:	f8ca 3000 	str.w	r3, [sl]
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b28:	6921      	ldr	r1, [r4, #16]
 8005b2a:	464a      	mov	r2, r9
 8005b2c:	f7fe ff7a 	bl	8004a24 <memcpy>
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3a:	81a3      	strh	r3, [r4, #12]
 8005b3c:	6126      	str	r6, [r4, #16]
 8005b3e:	6165      	str	r5, [r4, #20]
 8005b40:	444e      	add	r6, r9
 8005b42:	eba5 0509 	sub.w	r5, r5, r9
 8005b46:	6026      	str	r6, [r4, #0]
 8005b48:	60a5      	str	r5, [r4, #8]
 8005b4a:	463e      	mov	r6, r7
 8005b4c:	42be      	cmp	r6, r7
 8005b4e:	d900      	bls.n	8005b52 <__ssputs_r+0x86>
 8005b50:	463e      	mov	r6, r7
 8005b52:	6820      	ldr	r0, [r4, #0]
 8005b54:	4632      	mov	r2, r6
 8005b56:	4641      	mov	r1, r8
 8005b58:	f7ff fe1f 	bl	800579a <memmove>
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	1b9b      	subs	r3, r3, r6
 8005b60:	60a3      	str	r3, [r4, #8]
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	4433      	add	r3, r6
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e7db      	b.n	8005b24 <__ssputs_r+0x58>
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	f7ff fe3b 	bl	80057e8 <_realloc_r>
 8005b72:	4606      	mov	r6, r0
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d1e1      	bne.n	8005b3c <__ssputs_r+0x70>
 8005b78:	6921      	ldr	r1, [r4, #16]
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	f7ff faf4 	bl	8005168 <_free_r>
 8005b80:	e7c7      	b.n	8005b12 <__ssputs_r+0x46>
	...

08005b84 <_svfiprintf_r>:
 8005b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b88:	4698      	mov	r8, r3
 8005b8a:	898b      	ldrh	r3, [r1, #12]
 8005b8c:	061b      	lsls	r3, r3, #24
 8005b8e:	b09d      	sub	sp, #116	; 0x74
 8005b90:	4607      	mov	r7, r0
 8005b92:	460d      	mov	r5, r1
 8005b94:	4614      	mov	r4, r2
 8005b96:	d50e      	bpl.n	8005bb6 <_svfiprintf_r+0x32>
 8005b98:	690b      	ldr	r3, [r1, #16]
 8005b9a:	b963      	cbnz	r3, 8005bb6 <_svfiprintf_r+0x32>
 8005b9c:	2140      	movs	r1, #64	; 0x40
 8005b9e:	f7ff fb2f 	bl	8005200 <_malloc_r>
 8005ba2:	6028      	str	r0, [r5, #0]
 8005ba4:	6128      	str	r0, [r5, #16]
 8005ba6:	b920      	cbnz	r0, 8005bb2 <_svfiprintf_r+0x2e>
 8005ba8:	230c      	movs	r3, #12
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bb0:	e0d1      	b.n	8005d56 <_svfiprintf_r+0x1d2>
 8005bb2:	2340      	movs	r3, #64	; 0x40
 8005bb4:	616b      	str	r3, [r5, #20]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	2320      	movs	r3, #32
 8005bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc4:	2330      	movs	r3, #48	; 0x30
 8005bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d70 <_svfiprintf_r+0x1ec>
 8005bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bce:	f04f 0901 	mov.w	r9, #1
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	469a      	mov	sl, r3
 8005bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bda:	b10a      	cbz	r2, 8005be0 <_svfiprintf_r+0x5c>
 8005bdc:	2a25      	cmp	r2, #37	; 0x25
 8005bde:	d1f9      	bne.n	8005bd4 <_svfiprintf_r+0x50>
 8005be0:	ebba 0b04 	subs.w	fp, sl, r4
 8005be4:	d00b      	beq.n	8005bfe <_svfiprintf_r+0x7a>
 8005be6:	465b      	mov	r3, fp
 8005be8:	4622      	mov	r2, r4
 8005bea:	4629      	mov	r1, r5
 8005bec:	4638      	mov	r0, r7
 8005bee:	f7ff ff6d 	bl	8005acc <__ssputs_r>
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f000 80aa 	beq.w	8005d4c <_svfiprintf_r+0x1c8>
 8005bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bfa:	445a      	add	r2, fp
 8005bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80a2 	beq.w	8005d4c <_svfiprintf_r+0x1c8>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c12:	f10a 0a01 	add.w	sl, sl, #1
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	9307      	str	r3, [sp, #28]
 8005c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c20:	4654      	mov	r4, sl
 8005c22:	2205      	movs	r2, #5
 8005c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c28:	4851      	ldr	r0, [pc, #324]	; (8005d70 <_svfiprintf_r+0x1ec>)
 8005c2a:	f7fa fb01 	bl	8000230 <memchr>
 8005c2e:	9a04      	ldr	r2, [sp, #16]
 8005c30:	b9d8      	cbnz	r0, 8005c6a <_svfiprintf_r+0xe6>
 8005c32:	06d0      	lsls	r0, r2, #27
 8005c34:	bf44      	itt	mi
 8005c36:	2320      	movmi	r3, #32
 8005c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c3c:	0711      	lsls	r1, r2, #28
 8005c3e:	bf44      	itt	mi
 8005c40:	232b      	movmi	r3, #43	; 0x2b
 8005c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c46:	f89a 3000 	ldrb.w	r3, [sl]
 8005c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c4c:	d015      	beq.n	8005c7a <_svfiprintf_r+0xf6>
 8005c4e:	9a07      	ldr	r2, [sp, #28]
 8005c50:	4654      	mov	r4, sl
 8005c52:	2000      	movs	r0, #0
 8005c54:	f04f 0c0a 	mov.w	ip, #10
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c5e:	3b30      	subs	r3, #48	; 0x30
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d94e      	bls.n	8005d02 <_svfiprintf_r+0x17e>
 8005c64:	b1b0      	cbz	r0, 8005c94 <_svfiprintf_r+0x110>
 8005c66:	9207      	str	r2, [sp, #28]
 8005c68:	e014      	b.n	8005c94 <_svfiprintf_r+0x110>
 8005c6a:	eba0 0308 	sub.w	r3, r0, r8
 8005c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c72:	4313      	orrs	r3, r2
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	46a2      	mov	sl, r4
 8005c78:	e7d2      	b.n	8005c20 <_svfiprintf_r+0x9c>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	1d19      	adds	r1, r3, #4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	9103      	str	r1, [sp, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bfbb      	ittet	lt
 8005c86:	425b      	neglt	r3, r3
 8005c88:	f042 0202 	orrlt.w	r2, r2, #2
 8005c8c:	9307      	strge	r3, [sp, #28]
 8005c8e:	9307      	strlt	r3, [sp, #28]
 8005c90:	bfb8      	it	lt
 8005c92:	9204      	strlt	r2, [sp, #16]
 8005c94:	7823      	ldrb	r3, [r4, #0]
 8005c96:	2b2e      	cmp	r3, #46	; 0x2e
 8005c98:	d10c      	bne.n	8005cb4 <_svfiprintf_r+0x130>
 8005c9a:	7863      	ldrb	r3, [r4, #1]
 8005c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9e:	d135      	bne.n	8005d0c <_svfiprintf_r+0x188>
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	9203      	str	r2, [sp, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bfb8      	it	lt
 8005cac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cb0:	3402      	adds	r4, #2
 8005cb2:	9305      	str	r3, [sp, #20]
 8005cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d80 <_svfiprintf_r+0x1fc>
 8005cb8:	7821      	ldrb	r1, [r4, #0]
 8005cba:	2203      	movs	r2, #3
 8005cbc:	4650      	mov	r0, sl
 8005cbe:	f7fa fab7 	bl	8000230 <memchr>
 8005cc2:	b140      	cbz	r0, 8005cd6 <_svfiprintf_r+0x152>
 8005cc4:	2340      	movs	r3, #64	; 0x40
 8005cc6:	eba0 000a 	sub.w	r0, r0, sl
 8005cca:	fa03 f000 	lsl.w	r0, r3, r0
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	4303      	orrs	r3, r0
 8005cd2:	3401      	adds	r4, #1
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cda:	4826      	ldr	r0, [pc, #152]	; (8005d74 <_svfiprintf_r+0x1f0>)
 8005cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ce0:	2206      	movs	r2, #6
 8005ce2:	f7fa faa5 	bl	8000230 <memchr>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d038      	beq.n	8005d5c <_svfiprintf_r+0x1d8>
 8005cea:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <_svfiprintf_r+0x1f4>)
 8005cec:	bb1b      	cbnz	r3, 8005d36 <_svfiprintf_r+0x1b2>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	3307      	adds	r3, #7
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	9303      	str	r3, [sp, #12]
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	4433      	add	r3, r6
 8005cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005d00:	e767      	b.n	8005bd2 <_svfiprintf_r+0x4e>
 8005d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d06:	460c      	mov	r4, r1
 8005d08:	2001      	movs	r0, #1
 8005d0a:	e7a5      	b.n	8005c58 <_svfiprintf_r+0xd4>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	3401      	adds	r4, #1
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	4619      	mov	r1, r3
 8005d14:	f04f 0c0a 	mov.w	ip, #10
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1e:	3a30      	subs	r2, #48	; 0x30
 8005d20:	2a09      	cmp	r2, #9
 8005d22:	d903      	bls.n	8005d2c <_svfiprintf_r+0x1a8>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0c5      	beq.n	8005cb4 <_svfiprintf_r+0x130>
 8005d28:	9105      	str	r1, [sp, #20]
 8005d2a:	e7c3      	b.n	8005cb4 <_svfiprintf_r+0x130>
 8005d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d30:	4604      	mov	r4, r0
 8005d32:	2301      	movs	r3, #1
 8005d34:	e7f0      	b.n	8005d18 <_svfiprintf_r+0x194>
 8005d36:	ab03      	add	r3, sp, #12
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <_svfiprintf_r+0x1f8>)
 8005d3e:	a904      	add	r1, sp, #16
 8005d40:	4638      	mov	r0, r7
 8005d42:	f7fc ff91 	bl	8002c68 <_printf_float>
 8005d46:	1c42      	adds	r2, r0, #1
 8005d48:	4606      	mov	r6, r0
 8005d4a:	d1d6      	bne.n	8005cfa <_svfiprintf_r+0x176>
 8005d4c:	89ab      	ldrh	r3, [r5, #12]
 8005d4e:	065b      	lsls	r3, r3, #25
 8005d50:	f53f af2c 	bmi.w	8005bac <_svfiprintf_r+0x28>
 8005d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d56:	b01d      	add	sp, #116	; 0x74
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	ab03      	add	r3, sp, #12
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	462a      	mov	r2, r5
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <_svfiprintf_r+0x1f8>)
 8005d64:	a904      	add	r1, sp, #16
 8005d66:	4638      	mov	r0, r7
 8005d68:	f7fd fa22 	bl	80031b0 <_printf_i>
 8005d6c:	e7eb      	b.n	8005d46 <_svfiprintf_r+0x1c2>
 8005d6e:	bf00      	nop
 8005d70:	08012464 	.word	0x08012464
 8005d74:	0801246e 	.word	0x0801246e
 8005d78:	08002c69 	.word	0x08002c69
 8005d7c:	08005acd 	.word	0x08005acd
 8005d80:	0801246a 	.word	0x0801246a

08005d84 <_putc_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	460d      	mov	r5, r1
 8005d88:	4614      	mov	r4, r2
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	b118      	cbz	r0, 8005d96 <_putc_r+0x12>
 8005d8e:	6983      	ldr	r3, [r0, #24]
 8005d90:	b90b      	cbnz	r3, 8005d96 <_putc_r+0x12>
 8005d92:	f7fe fd11 	bl	80047b8 <__sinit>
 8005d96:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <_putc_r+0x84>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d124      	bne.n	8005de6 <_putc_r+0x62>
 8005d9c:	6874      	ldr	r4, [r6, #4]
 8005d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005da0:	07d8      	lsls	r0, r3, #31
 8005da2:	d405      	bmi.n	8005db0 <_putc_r+0x2c>
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	0599      	lsls	r1, r3, #22
 8005da8:	d402      	bmi.n	8005db0 <_putc_r+0x2c>
 8005daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dac:	f7fe fdb9 	bl	8004922 <__retarget_lock_acquire_recursive>
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	60a3      	str	r3, [r4, #8]
 8005db8:	da05      	bge.n	8005dc6 <_putc_r+0x42>
 8005dba:	69a2      	ldr	r2, [r4, #24]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	db1c      	blt.n	8005dfa <_putc_r+0x76>
 8005dc0:	b2eb      	uxtb	r3, r5
 8005dc2:	2b0a      	cmp	r3, #10
 8005dc4:	d019      	beq.n	8005dfa <_putc_r+0x76>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	701d      	strb	r5, [r3, #0]
 8005dce:	b2ed      	uxtb	r5, r5
 8005dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd2:	07da      	lsls	r2, r3, #31
 8005dd4:	d405      	bmi.n	8005de2 <_putc_r+0x5e>
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	059b      	lsls	r3, r3, #22
 8005dda:	d402      	bmi.n	8005de2 <_putc_r+0x5e>
 8005ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dde:	f7fe fda1 	bl	8004924 <__retarget_lock_release_recursive>
 8005de2:	4628      	mov	r0, r5
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <_putc_r+0x88>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	d101      	bne.n	8005df0 <_putc_r+0x6c>
 8005dec:	68b4      	ldr	r4, [r6, #8]
 8005dee:	e7d6      	b.n	8005d9e <_putc_r+0x1a>
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <_putc_r+0x8c>)
 8005df2:	429c      	cmp	r4, r3
 8005df4:	bf08      	it	eq
 8005df6:	68f4      	ldreq	r4, [r6, #12]
 8005df8:	e7d1      	b.n	8005d9e <_putc_r+0x1a>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff fbf6 	bl	80055f0 <__swbuf_r>
 8005e04:	4605      	mov	r5, r0
 8005e06:	e7e3      	b.n	8005dd0 <_putc_r+0x4c>
 8005e08:	080122a4 	.word	0x080122a4
 8005e0c:	080122c4 	.word	0x080122c4
 8005e10:	08012284 	.word	0x08012284

08005e14 <_init>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr

08005e20 <_fini>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr
