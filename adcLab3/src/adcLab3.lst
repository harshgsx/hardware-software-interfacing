
adcLab3.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080065e0 l    d  .rodata	00000000 .rodata
08012c40 l    d  .ARM	00000000 .ARM
08012c48 l    d  .init_array	00000000 .init_array
08012c4c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000384 l    d  .bss	00000000 .bss
20000d54 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
080011b8 l       .text	00000000 LoopCopyDataInit
080011b2 l       .text	00000000 CopyDataInit
080011ca l       .text	00000000 LoopFillZerobss
080011c6 l       .text	00000000 FillZerobss
080011f4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080065c4 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
20000384 l       .bss	00000001 completed.1
08012c4c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
20000388 l       .bss	00000018 object.0
08012c48 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 my_main.c
00000000 l    df *ABS*	00000000 mytest.c
200003a0 l     O .bss	00000004 LedState.0
00000000 l    df *ABS*	00000000 adc_example.c
00000000 l    df *ABS*	00000000 syscall.c
200003ec l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
200003f0 l     O .bss	00000004 cmdArgs
200003f4 l     O .bss	00000004 count.3
200003f8 l     O .bss	00000004 crReceived
2000049c l     O .bss	00000004 saved.1
20000198 l     O .data	00000004 buf.2
2000019c l     O .data	00000004 printPrompt.4
08011ad3 l     O .rodata	00000006 __FUNCTION__.0
00000000 l    df *ABS*	00000000 dump.c
200004a0 l     O .bss	00000004 address.1
200001a0 l     O .data	00000004 count.0
00000000 l    df *ABS*	00000000 terminal.c
200004a4 l     O .bss	00000834 TerminalState
08011f64 l     O .rodata	00000010 TerminalInfo
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 tasking.c
20000cd8 l     O .bss	00000004 AccumTicks
00000000 l    df *ABS*	00000000 default.c
08012148 l     O .rodata	00000013 __FUNCTION__.0
00000000 l    df *ABS*	00000000 decoder.c
08001d48 l     F .text	0000007c Uncompress
20000cdc l     O .bss	00000014 buf.0
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_msp.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_uart.c
08002be8 l     F .text	000000bc UART_SetConfig
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_adc.c
00000000 l    df *ABS*	00000000 version.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08003524 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
080045e8 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
08004910 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08012b60 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08006140 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 STM32F411.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
200001b4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08012c4c l       .init_array	00000000 __init_array_end
08012c48 l       .init_array	00000000 __preinit_array_end
08012c48 l       .init_array	00000000 __init_array_start
08012c48 l       .init_array	00000000 __preinit_array_start
080011f4  w    F .text	00000006 RTC_Alarm_IRQHandler
080065b4 g     F .text	00000010 _malloc_usable_size_r
0800ee6c g     O .rodata	00000008 RTC_BKP19R_fields
080108b4 g     O .rodata	00000050 TIM2_SR_fields
080038bc g     F .text	000000c4 __cvt
080011f4  w    F .text	00000006 EXTI2_IRQHandler
08002ef6  w    F .text	00000002 HAL_ADC_MspInit
0800d49c g     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
080041c0 g     F .text	0000002c putchar
0800fbe4 g     O .rodata	00000008 STK_VAL_fields
08012685 g     O .rodata	00000008 APBPrescTable
08000ec4 g     F .text	0000002c .hidden __aeabi_dcmpun
0800123a g     F .text	00000004 _isatty_r
2000044c g     O .bss	00000050 input_b
08000e88 g     F .text	00000012 .hidden __aeabi_dcmple
080110e4 g     O .rodata	00000018 TIM5_CR2_fields
08010874 g     O .rodata	00000008 TIM2_PSC_fields
08004520 g     F .text	00000010 strcpy
08001294 g     F .text	00000004 _getpid
0800cf4c g     O .rodata	00000260 OTG_FS_DEVICE_registers
080041ec g     F .text	000000dc _puts_r
0800cdf4 g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
08000dc4 g     F .text	0000007a .hidden __cmpdf2
08001e18 g     F .text	00000054 DecodeWriteRegister
0800d8f4 g     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
0800123e g     F .text	00000004 _lseek_r
08002464 g     F .text	00000002 DebugMon_Handler
08001c08 g     F .text	00000044 CmdTasks
08010d14 g     O .rodata	00000008 TIM3_PSC_fields
0800e19c g     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
0800950c g     O .rodata	00000008 ADC1_JOFR3_fields
0801087c g     O .rodata	00000038 TIM2_SMCR_fields
0800cb14 g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800de24 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800c554 g     O .rodata	00000020 NVIC_IPR1_fields
08012ba4 g     O .rodata	0000000c CmdTestE
0800fba4 g     O .rodata	00000018 STK_CALIB_fields
0800f434 g     O .rodata	00000008 SCB_AFSR_fields
080011f4  w    F .text	00000006 SPI4_IRQHandler
08000dc4 g     F .text	0000007a .hidden __eqdf2
080016f0 g     F .text	00000068 CmdStats
08010904 g     O .rodata	00000150 TIM2_registers
0800adb4 g     O .rodata	00000100 GPIOA_BSRR_fields
0800f64c g     O .rodata	00000018 SCB_SHPR1_fields
0800beb4 g     O .rodata	00000030 I2C3_CR2_fields
0800955c g     O .rodata	00000028 ADC1_SQR1_fields
08000530 g     F .text	0000005a .hidden __floatdidf
0800fd9c g     O .rodata	00000008 TIM10_CNT_fields
080019d4 g     F .text	00000028 TerminalWritePolled
0800658c g     F .text	00000024 _kill_r
0801018c g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800f05c g     O .rodata	00000010 RTC_SHIFTR_fields
0800d9dc g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
08004190 g     F .text	00000030 printf
0801086c g     O .rodata	00000008 TIM2_OR_fields
0800bd8c g     O .rodata	000000a0 GPIOH_registers
0800c494 g     O .rodata	00000020 NVIC_IPR14_fields
0800ddc4 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
08002a3c g     F .text	00000020 HAL_RCC_GetPCLK1Freq
08002b40 g     F .text	00000064 HAL_NVIC_SetPriority
080011f4  w    F .text	00000006 TIM1_CC_IRQHandler
0800f86c g     O .rodata	00000068 SDIO_ICR_fields
08002a5c g     F .text	00000020 HAL_RCC_GetPCLK2Freq
08009614 g     O .rodata	00000140 ADC1_registers
0800ff6c g     O .rodata	00000008 TIM11_OR_fields
080107ac g     O .rodata	00000018 TIM2_CR2_fields
08000f56 g     F .text	00000012 my_main
080044be g     F .text	00000024 __sseek
0800b884 g     O .rodata	00000040 GPIOH_AFRH_fields
080035d4 g     F .text	00000070 __sinit
080011f4  w    F .text	00000006 DMA2_Stream5_IRQHandler
08004754 g     F .text	000000a4 __swbuf_r
0800245a g     F .text	00000002 HardFault_Handler
08010c04 g     O .rodata	00000010 TIM3_CNT_fields
08009964 g     O .rodata	000000a0 DMA2_HIFCR_fields
08009e6c g     O .rodata	00000008 DMA2_S2NDTR_fields
08009834 g     O .rodata	00000008 CRC_CR_fields
0800fd44 g     O .rodata	00000018 TIM10_CCER_fields
08001004 g     F .text	0000009c ADCInit
08003578 g     F .text	0000002c __sfmoreglue
080011f4  w    F .text	00000006 DMA1_Stream5_IRQHandler
0800c674 g     O .rodata	00000008 NVIC_ISER0_fields
08005758 g     F .text	0000000c __malloc_unlock
0800fdec g     O .rodata	00000008 TIM10_PSC_fields
0800a2cc g     O .rodata	00000008 DMA2_S7NDTR_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
0801021c g     O .rodata	00000008 TIM1_CCR3_fields
0801035c g     O .rodata	00000008 TIM1_DMAR_fields
0800ff1c g     O .rodata	00000008 TIM11_CNT_fields
08000fa8 g     F .text	0000005c printProgress
0801075c g     O .rodata	00000010 TIM2_CNT_fields
08002468 g     F .text	00000012 SysTick_Handler
0800f17c g     O .rodata	00000008 RTC_WPR_fields
0800f06c g     O .rodata	00000008 RTC_SSR_fields
08012bc8 g     O .rodata	0000000c CmdLedE
08002e90 g     F .text	0000000a HAL_GPIO_WritePin
08009ffc g     O .rodata	00000020 DMA2_S4FCR_fields
080011f4  w    F .text	00000006 PVD_IRQHandler
08001a8c g     F .text	000000e0 TerminalISR
080011f4  w    F .text	00000006 SDIO_IRQHandler
080102e4 g     O .rodata	00000078 TIM1_DIER_fields
0800c3dc g     O .rodata	00000008 NVIC_ICPR0_fields
080064ac g     F .text	00000034 memmove
080011f4  w    F .text	00000006 TAMP_STAMP_IRQHandler
0800c574 g     O .rodata	00000020 NVIC_IPR2_fields
08012c50 g       *ABS*	00000000 _sidata
08002466 g     F .text	00000002 PendSV_Handler
0800c3e4 g     O .rodata	00000008 NVIC_ICPR1_fields
0800fbdc g     O .rodata	00000008 STK_LOAD_fields
08002458 g     F .text	00000002 NMI_Handler
08002ba4 g     F .text	0000001c HAL_NVIC_EnableIRQ
0800d534 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
08005764 g     F .text	00000080 _Balloc
0800d4a4 g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
08012c48 g       .ARM	00000000 __exidx_end
0800ce8c g     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
08004598 g     F .text	00000050 __strtok_r
0800d94c g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
08009d84 g     O .rodata	00000008 DMA2_S1M1AR_fields
080011f4  w    F .text	00000006 EXTI3_IRQHandler
0800f99c g     O .rodata	00000008 SDIO_RESP1_fields
080028a8  w    F .text	0000005c HAL_RCC_GetSysClockFreq
0800a03c g     O .rodata	000000a0 DMA2_S5CR_fields
08011004 g     O .rodata	00000050 TIM5_CCMR2_Output_fields
08000db4 g     F .text	0000008a .hidden __gtdf2
08009f3c g     O .rodata	00000008 DMA2_S3M0AR_fields
08012c40 g       .rodata	00000000 _parsetable_end
08003370 g     F .text	0000000c __errno
0800ee9c g     O .rodata	00000008 RTC_BKP6R_fields
0800ebac g     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800f574 g     O .rodata	00000048 SCB_ICSR_fields
08002e9a g     F .text	00000050 HAL_IWDG_Init
08012c28 g     O .rodata	0000000c CmdWE
0800c684 g     O .rodata	00000008 NVIC_ISER2_fields
0800f9c4 g     O .rodata	000000c0 SDIO_STA_fields
0800247c g     F .text	0000003c HAL_MspInit
0800c2dc g     O .rodata	00000048 MPU_MPU_RASR_fields
080011f4  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
0800ca8c g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
08001230 g     F .text	0000000a _fstat_r
0800a034 g     O .rodata	00000008 DMA2_S4PAR_fields
0801144c g     O .rodata	00000030 TIM9_CR1_fields
20000d50 g     O .bss	00000004 errno
0800b2dc g     O .rodata	00000040 GPIOB_AFRH_fields
0800cd1c g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
080065dc g       .text	00000000 _etext
0800ce3c g     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
20000384 g       .bss	00000000 _sbss
200003a4 g     O .bss	00000048 hdac1
0800f684 g     O .rodata	000000f0 SCB_registers
0800c324 g     O .rodata	00000018 MPU_MPU_RBAR_fields
080107d4 g     O .rodata	00000060 TIM2_DIER_fields
08000e50 g     F .text	00000010 .hidden __aeabi_cdcmple
08010fd4 g     O .rodata	00000030 TIM5_CCMR2_Input_fields
0800b35c g     O .rodata	00000100 GPIOB_BSRR_fields
0800f774 g     O .rodata	00000008 SDIO_ARG_fields
080011f4  w    F .text	00000006 I2C3_ER_IRQHandler
0800eebc g     O .rodata	00000010 RTC_CALIBR_fields
0800a2bc g     O .rodata	00000008 DMA2_S7M0AR_fields
0800d854 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800c8ec g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800a10c g     O .rodata	00000008 DMA2_S5NDTR_fields
0800defc g     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800aafc g     O .rodata	00000048 FLASH_CR_fields
08010bc4 g     O .rodata	00000010 TIM3_CCR1_fields
08010ef4 g     O .rodata	00000060 TIM5_CCER_fields
0800ee3c g     O .rodata	00000008 RTC_BKP13R_fields
0800e6d4 g     O .rodata	00000008 RCC_AHB2ENR_fields
0800df24 g     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
08009584 g     O .rodata	00000030 ADC1_SQR2_fields
0801182c g     O .rodata	00000008 WWDG_SR_fields
0800aa6c g     O .rodata	00000060 EXTI_registers
08002d00 g     F .text	00000190 HAL_GPIO_Init
0800d1d4 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800d7b4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
08002eea g     F .text	0000000c HAL_IWDG_Refresh
0800ab94 g     O .rodata	00000038 FLASH_SR_fields
0800cb94 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800dd74 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
08009c7c g     O .rodata	00000020 DMA2_S0FCR_fields
0800a1ec g     O .rodata	00000008 DMA2_S6NDTR_fields
080015ec g     F .text	000000b0 DumpBuffer
08011724 g     O .rodata	00000008 USART1_DR_fields
0800aeb4 g     O .rodata	00000080 GPIOA_IDR_fields
20000cf0 g     O .bss	0000000c hiwdg
08011434 g     O .rodata	00000008 TIM9_CCR1_fields
08005730 g     F .text	0000001c memcpy
08009784 g     O .rodata	00000090 ADC_Common_CSR_fields
08000e40 g     F .text	00000020 .hidden __aeabi_cdrcmple
0801022c g     O .rodata	00000008 TIM1_CNT_fields
08003166 g     F .text	000000a6 HAL_ADC_PollForConversion
08010c14 g     O .rodata	00000040 TIM3_CR1_fields
080042d8 g     F .text	0000018c setvbuf
080103ec g     O .rodata	00000060 TIM1_SR_fields
0800f864 g     O .rodata	00000008 SDIO_FIFO_fields
0800c474 g     O .rodata	00000020 NVIC_IPR13_fields
0800356c g     F .text	0000000c _cleanup_r
0800ad34 g     O .rodata	00000040 GPIOA_AFRH_fields
08005f40 g     F .text	00000200 _svfprintf_r
080004b8 g     F .text	00000022 .hidden __floatsidf
0800d714 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
08000dbc g     F .text	00000082 .hidden __ltdf2
080011f4  w    F .text	00000006 EXTI0_IRQHandler
080011f4  w    F .text	00000006 I2C2_EV_IRQHandler
0800ac2c g     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800fdf4 g     O .rodata	00000018 TIM10_SR_fields
080010a0 g     F .text	00000084 getReadingFromAdc
0800cabc g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
080005dc g     F .text	00000000 .hidden __aeabi_uldivmod
08009be4 g     O .rodata	00000098 DMA2_S0CR_fields
08011834 g     O .rodata	00000030 WWDG_registers
080042c8 g     F .text	00000010 puts
08009aa4 g     O .rodata	000000a0 DMA2_LIFCR_fields
080011f4  w    F .text	00000006 DMA1_Stream2_IRQHandler
080011f4  w    F .text	00000006 FPU_IRQHandler
0800de3c g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
200001a4 g     O .data	00000004 SystemCoreClock
0800a024 g     O .rodata	00000008 DMA2_S4M1AR_fields
080001f4 g     F .text	00000012 my_Tick
08000f94 g     F .text	00000014 USR_LED_Toggle
0800ac94 g     O .rodata	00000070 FPU_FPSCR_fields
0800c064 g     O .rodata	00000070 I2S2ext_CR1_fields
0801071c g     O .rodata	00000010 TIM2_CCR1_fields
0800df14 g     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800bf1c g     O .rodata	00000070 I2C3_SR1_fields
0800d3e4 g     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
080056fc g     F .text	00000010 malloc
0800c26c g     O .rodata	00000008 IWDG_RLR_fields
200001a8 g     O .data	00000001 uwTickFreq
0800334c g     F .text	00000018 VersionPrint
08012b98 g       .rodata	00000000 _tasktable_end
0800f85c g     O .rodata	00000008 SDIO_FIFOCNT_fields
0800652c g     F .text	00000050 _raise_r
080048d4 g     F .text	0000003c __assert_func
08012a98 g     O .rodata	000000c8 __mprec_tens
0800e6e4 g     O .rodata	00000008 RCC_AHB2RSTR_fields
0800a02c g     O .rodata	00000008 DMA2_S4NDTR_fields
0800c3b4 g     O .rodata	00000008 NVIC_IABR1_fields
08002460 g     F .text	00000002 UsageFault_Handler
0800fda4 g     O .rodata	00000028 TIM10_CR1_fields
08004738 g     F .text	0000001c vsnprintf
0800fd94 g     O .rodata	00000008 TIM10_CCR1_fields
08010cdc g     O .rodata	00000008 TIM3_DMAR_fields
08001c78 g     F .text	00000010 TaskingTickHandler
200003fc g     O .bss	00000050 input
080011f4  w    F .text	00000006 DMA2_Stream2_IRQHandler
080065b0 g     F .text	00000004 _getpid_r
20000384 g       .bss	00000000 __bss_start__
0800c11c g     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800c3d4 g     O .rodata	00000008 NVIC_ICER2_fields
080046cc g     F .text	00000014 strtoul
08000498 g     F .text	0000001e .hidden __aeabi_ui2d
08005628 g     F .text	00000008 _localeconv_r
08005954 g     F .text	0000002c __i2b
0800da24 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800a1dc g     O .rodata	00000008 DMA2_S6M0AR_fields
20000000 g       .data	00000000 _sdata
080011f4  w    F .text	00000006 SPI1_IRQHandler
08001bfc g     F .text	0000000c WDTFeed
08009924 g     O .rodata	00000040 DBG_registers
0800060c g     F .text	000002d0 .hidden __udivmoddi4
08000214 g     F .text	00000000 .hidden __aeabi_drsub
08009554 g     O .rodata	00000008 ADC1_SMPR2_fields
080011fc g     F .text	00000030 _sbrk_r
0800c5b4 g     O .rodata	00000020 NVIC_IPR4_fields
08009a04 g     O .rodata	000000a0 DMA2_HISR_fields
08003214 g     F .text	00000138 HAL_ADC_ConfigChannel
0800f3fc g     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
0801123c g     O .rodata	00000150 TIM5_registers
0800a844 g     O .rodata	000000b8 EXTI_PR_fields
0800c514 g     O .rodata	00000020 NVIC_IPR18_fields
0800d6c4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800dafc g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0801013c g     O .rodata	00000050 TIM1_CCMR1_Output_fields
0800cd84 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
08001242 g     F .text	0000000a _read_r
08009ca4 g     O .rodata	00000008 DMA2_S0M1AR_fields
0800c954 g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
080103b4 g     O .rodata	00000038 TIM1_SMCR_fields
080011f4  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
0800d434 g     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
08000e74 g     F .text	00000012 .hidden __aeabi_dcmplt
20000d40 g     O .bss	00000004 uwTick
080022b4 g     F .text	0000009c SystemClock_Config
080105ac g     O .rodata	00000010 TIM2_ARR_fields
0800c17c g     O .rodata	00000048 I2S2ext_SR_fields
0800cd9c g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800ff5c g     O .rodata	00000010 TIM11_EGR_fields
08010ac4 g     O .rodata	00000030 TIM3_CCMR1_Input_fields
08003500 g     F .text	00000024 fflush
0800a0fc g     O .rodata	00000008 DMA2_S5M0AR_fields
08011514 g     O .rodata	000000e0 TIM9_registers
0800ef94 g     O .rodata	00000038 RTC_DR_fields
0800de54 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
08010be4 g     O .rodata	00000010 TIM3_CCR3_fields
0801147c g     O .rodata	00000008 TIM9_CR2_fields
0801020c g     O .rodata	00000008 TIM1_CCR1_fields
08009c9c g     O .rodata	00000008 DMA2_S0M0AR_fields
08002bc0 g     F .text	00000028 HAL_SYSTICK_Config
080004dc g     F .text	00000042 .hidden __extendsfdf2
08000be4 g     F .text	000001d0 .hidden __aeabi_ddiv
080094dc g     O .rodata	00000008 ADC1_JDR1_fields
0800c25c g     O .rodata	00000008 IWDG_KR_fields
0800bfcc g     O .rodata	00000008 I2C3_TRISE_fields
08000220 g     F .text	00000276 .hidden __adddf3
0800c174 g     O .rodata	00000008 I2S2ext_RXCRCR_fields
08001834 g     F .text	00000060 CmdReceive
0800984c g     O .rodata	00000030 CRC_registers
08011604 g     O .rodata	00000078 USART1_CR1_fields
0800f18c g     O .rodata	00000270 RTC_registers
08010c7c g     O .rodata	00000060 TIM3_DIER_fields
08002ef8 g     F .text	0000014c HAL_ADC_Init
0800ebbc g     O .rodata	00000020 RCC_SSCGR_fields
08012c40 g       .ARM	00000000 __exidx_start
0800a01c g     O .rodata	00000008 DMA2_S4M0AR_fields
08000f40 g     F .text	00000016 my_init
0800bfd4 g     O .rodata	00000090 I2C3_registers
080011f4  w    F .text	00000006 DMA2_Stream3_IRQHandler
08000990 g     F .text	00000254 .hidden __aeabi_dmul
08012c1c g     O .rodata	0000000c CmdVersionE
0800e214 g     O .rodata	00000038 PWR_CSR_fields
0800ed8c g     O .rodata	00000010 RTC_ALRMASSR_fields
0800fc9c g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08011064 g     O .rodata	00000010 TIM5_CCR2_fields
20000d46 g     O .bss	00000001 __lock___sinit_recursive_mutex
0800c3ac g     O .rodata	00000008 NVIC_IABR0_fields
08012848 g     O .rodata	00000004 _global_impure_ptr
08010da4 g     O .rodata	00000140 TIM3_registers
08010bd4 g     O .rodata	00000010 TIM3_CCR2_fields
080111ac g     O .rodata	00000008 TIM5_PSC_fields
080064e0 g     F .text	0000004c _realloc_r
08003710 g     F .text	00000048 __libc_init_array
0800ee34 g     O .rodata	00000008 RTC_BKP12R_fields
0801172c g     O .rodata	00000010 USART1_GTPR_fields
0800ccf4 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800b764 g     O .rodata	00000080 GPIOB_PUPDR_fields
080012b8 g     F .text	00000070 CmdR
0800cb2c g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
08012a70 g     O .rodata	00000028 __mprec_bigtens
08010224 g     O .rodata	00000008 TIM1_CCR4_fields
0800649e g     F .text	0000000e abort
08000498 g     F .text	0000001e .hidden __floatunsidf
080111ec g     O .rodata	00000050 TIM5_SR_fields
08005c68 g     F .text	00000038 __mcmp
0800c614 g     O .rodata	00000020 NVIC_IPR7_fields
08009544 g     O .rodata	00000008 ADC1_LTR_fields
20000380 g     O .data	00000004 TaskInputTaskState
080011f4  w    F .text	00000006 USART6_IRQHandler
0800ee24 g     O .rodata	00000008 RTC_BKP10R_fields
08009e5c g     O .rodata	00000008 DMA2_S2M0AR_fields
0800ebdc g     O .rodata	00000140 RCC_registers
080065c4 g     F .text	00000000 _init
08009514 g     O .rodata	00000008 ADC1_JOFR4_fields
0800e7ac g     O .rodata	00000060 RCC_APB1RSTR_fields
0800ee1c g     O .rodata	00000008 RTC_BKP0R_fields
0800e74c g     O .rodata	00000060 RCC_APB1LPENR_fields
0800e68c g     O .rodata	00000048 RCC_AHB1RSTR_fields
08012b98 g       .rodata	00000000 _parsetable_start
0800a1fc g     O .rodata	000000a0 DMA2_S7CR_fields
08012b80 g       .rodata	00000000 _tasktable_start
0800eeac g     O .rodata	00000008 RTC_BKP8R_fields
0801069c g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800c3cc g     O .rodata	00000008 NVIC_ICER1_fields
08012bd4 g     O .rodata	0000000c CmdRE
0800ca5c g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800eaac g     O .rodata	00000050 RCC_CSR_fields
0800b13c g     O .rodata	00000080 GPIOA_OTYPER_fields
0801044c g     O .rodata	00000160 TIM1_registers
0800f5c4 g     O .rodata	00000018 SCB_SCR_fields
0800195c g     F .text	00000078 CmdSend
0800dc84 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
0800951c g     O .rodata	00000028 ADC1_JSQR_fields
0800f994 g     O .rodata	00000008 SDIO_POWER_fields
20000d54 g       .bss	00000000 _ebss
08000f68 g     F .text	0000002c CmdTest
08009cb4 g     O .rodata	00000008 DMA2_S0PAR_fields
0800cddc g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800ad74 g     O .rodata	00000040 GPIOA_AFRL_fields
080011a4  w    F .text	00000038 Reset_Handler
08004738 g     F .text	0000001c vsniprintf
0800fe0c g     O .rodata	000000b0 TIM10_registers
0800c3f4 g     O .rodata	00000020 NVIC_IPR0_fields
0800b03c g     O .rodata	00000080 GPIOA_ODR_fields
080058b4 g     F .text	00000040 __hi0bits
0800c4b4 g     O .rodata	00000020 NVIC_IPR15_fields
08010214 g     O .rodata	00000008 TIM1_CCR2_fields
0800987c g     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
08010b74 g     O .rodata	00000050 TIM3_CCMR2_Output_fields
0800983c g     O .rodata	00000008 CRC_DR_fields
0800058c g     F .text	0000004e .hidden __fixdfsi
0800b664 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800be44 g     O .rodata	00000070 I2C3_CR1_fields
0800cbfc g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
20000d44 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800cc64 g     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
08001f1c g     F .text	00000054 DecodePeripheral
08011084 g     O .rodata	00000010 TIM5_CCR4_fields
080095e4 g     O .rodata	00000030 ADC1_SR_fields
0800fc3c g     O .rodata	00000020 SYSCFG_EXTICR1_fields
080011f4  w    F .text	00000006 DMA2_Stream0_IRQHandler
08009b44 g     O .rodata	000000a0 DMA2_LISR_fields
0800f144 g     O .rodata	00000038 RTC_TSTR_fields
200001ac g     O .data	00000004 uwTickPrio
0800cd6c g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0801076c g     O .rodata	00000040 TIM2_CR1_fields
08002ac4 g     F .text	00000034 HAL_Init
0800dddc g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800eafc g     O .rodata	000000b0 RCC_PLLCFGR_fields
0800d544 g     O .rodata	00000130 OTG_FS_GLOBAL_registers
080063f4 g     F .text	00000090 _putc_r
0800a0dc g     O .rodata	00000020 DMA2_S5FCR_fields
0800f67c g     O .rodata	00000008 SCB_VTOR_fields
0800e634 g     O .rodata	00000058 RCC_AHB1LPENR_fields
0800ee5c g     O .rodata	00000008 RTC_BKP17R_fields
080093fc g     O .rodata	00000070 ADC1_CR1_fields
08005604 g     F .text	00000024 fprintf
080011f4  w    F .text	00000006 TIM4_IRQHandler
08000220 g     F .text	00000276 .hidden __aeabi_dadd
0800f55c g     O .rodata	00000018 SCB_HFSR_fields
0800fd3c g     O .rodata	00000008 TIM10_ARR_fields
08000dbc g     F .text	00000082 .hidden __ledf2
0800d8a4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800b904 g     O .rodata	00000100 GPIOH_BSRR_fields
0801061c g     O .rodata	00000030 TIM2_CCMR1_Input_fields
0800cdfc g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800a8fc g     O .rodata	000000b8 EXTI_RTSR_fields
0800a11c g     O .rodata	000000a0 DMA2_S6CR_fields
0800f9a4 g     O .rodata	00000008 SDIO_RESP2_fields
0800eea4 g     O .rodata	00000008 RTC_BKP7R_fields
08005ad4 g     F .text	000000b4 __pow5mult
08000520 g     F .text	0000006a .hidden __aeabi_ul2d
0800a114 g     O .rodata	00000008 DMA2_S5PAR_fields
0800a9b4 g     O .rodata	000000b8 EXTI_SWIER_fields
0800a61c g     O .rodata	000000b8 EXTI_EMR_fields
0800ee64 g     O .rodata	00000008 RTC_BKP18R_fields
0800ab44 g     O .rodata	00000008 FLASH_KEYR_fields
080001e0 g     F .text	00000014 mytest
080127e8 g     O .rodata	00000020 __sf_fake_stderr
080113c4 g     O .rodata	00000030 TIM9_CCMR1_Input_fields
08010c54 g     O .rodata	00000018 TIM3_CR2_fields
0801074c g     O .rodata	00000010 TIM2_CCR4_fields
20000d58 g       ._user_heap_stack	00000000 end
080011f4  w    F .text	00000006 I2C1_EV_IRQHandler
0800c1cc g     O .rodata	00000090 I2S2ext_registers
0800375c g     F .text	00000002 __retarget_lock_release_recursive
080011f4  w    F .text	00000006 DMA1_Stream6_IRQHandler
08001fc4 g     F .text	00000064 DecodePrintRegisters
0801178c g     O .rodata	00000070 USART1_registers
20000380 g       .data	00000000 _taskstate_start
0800e6ec g     O .rodata	00000060 RCC_APB1ENR_fields
08005e8a g     F .text	000000b6 __ssputs_r
0800c3c4 g     O .rodata	00000008 NVIC_ICER0_fields
0800c67c g     O .rodata	00000008 NVIC_ISER1_fields
08010364 g     O .rodata	00000040 TIM1_EGR_fields
0801064c g     O .rodata	00000050 TIM2_CCMR1_Output_fields
0801072c g     O .rodata	00000010 TIM2_CCR2_fields
0800bf8c g     O .rodata	00000040 I2C3_SR2_fields
0800bb8c g     O .rodata	00000080 GPIOH_ODR_fields
0800ff14 g     O .rodata	00000008 TIM11_CCR1_fields
0800da6c g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
0801110c g     O .rodata	00000060 TIM5_DIER_fields
0800ee84 g     O .rodata	00000008 RTC_BKP3R_fields
08000eb0 g     F .text	00000012 .hidden __aeabi_dcmpgt
080011f4  w    F .text	00000006 DMA1_Stream1_IRQHandler
080114e4 g     O .rodata	00000030 TIM9_SR_fields
0800d1fc g     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800df2c g     O .rodata	00000270 OTG_FS_HOST_registers
0800616e g     F .text	00000024 __sfputs_r
0800cde4 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800ee94 g     O .rodata	00000008 RTC_BKP5R_fields
080035a4 g     F .text	0000000c __sfp_lock_acquire
080008f0 g     F .text	00000000 memchr
080039fc  w    F .text	0000046c _printf_float
0800e5ec g     O .rodata	00000048 RCC_AHB1ENR_fields
20000d54 g       .bss	00000000 __bss_end__
08003770 g     F .text	00000098 _free_r
080011f4  w    F .text	00000006 TIM3_IRQHandler
080011f4  w    F .text	00000006 RCC_IRQHandler
0800eecc g     O .rodata	00000020 RTC_CALR_fields
08009f1c g     O .rodata	00000020 DMA2_S3FCR_fields
08000e9c g     F .text	00000012 .hidden __aeabi_dcmpge
08009f4c g     O .rodata	00000008 DMA2_S3NDTR_fields
0800fec4 g     O .rodata	00000018 TIM11_CCER_fields
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800b6e4 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800e6dc g     O .rodata	00000008 RCC_AHB2LPENR_fields
0800eeb4 g     O .rodata	00000008 RTC_BKP9R_fields
0800beec g     O .rodata	00000020 I2C3_OAR1_fields
0800be2c g     O .rodata	00000018 I2C3_CCR_fields
0800021c g     F .text	0000027a .hidden __aeabi_dsub
080011f4 g       .text	00000006 Default_Handler
0800dab4 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800af34 g     O .rodata	00000088 GPIOA_LCKR_fields
0800f074 g     O .rodata	00000068 RTC_TAFCR_fields
08012675 g     O .rodata	00000010 AHBPrescTable
0800b23c g     O .rodata	000000a0 GPIOA_registers
0800c69c g     O .rodata	00000008 NVIC_ISPR2_fields
080015dc g     F .text	00000010 fetch_cmd_args
080106cc g     O .rodata	00000050 TIM2_CCMR2_Output_fields
08010af4 g     O .rodata	00000050 TIM3_CCMR1_Output_fields
0800b4dc g     O .rodata	00000088 GPIOB_LCKR_fields
0800bf0c g     O .rodata	00000010 I2C3_OAR2_fields
08003130 g     F .text	00000036 HAL_ADC_Stop
08000520 g     F .text	0000006a .hidden __floatundidf
08011444 g     O .rodata	00000008 TIM9_CNT_fields
0800fa84 g     O .rodata	00000120 SDIO_registers
0800c414 g     O .rodata	00000020 NVIC_IPR10_fields
08005b88 g     F .text	000000e0 __lshift
0800a1f4 g     O .rodata	00000008 DMA2_S6PAR_fields
0800c1c4 g     O .rodata	00000008 I2S2ext_TXCRCR_fields
08011484 g     O .rodata	00000020 TIM9_DIER_fields
080103ac g     O .rodata	00000008 TIM1_RCR_fields
0800caec g     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800c5d4 g     O .rodata	00000020 NVIC_IPR5_fields
080011f4  w    F .text	00000006 EXTI15_10_IRQHandler
0800fcbc g     O .rodata	00000008 SYSCFG_MEMRM_fields
0800c15c g     O .rodata	00000018 I2S2ext_I2SPR_fields
08003044 g     F .text	000000ec HAL_ADC_Start
0800f0dc g     O .rodata	00000038 RTC_TR_fields
0800c4f4 g     O .rodata	00000020 NVIC_IPR17_fields
08003364 g     F .text	0000000c CmdVersion
08011174 g     O .rodata	00000030 TIM5_EGR_fields
080011f4  w    F .text	00000006 ADC_IRQHandler
0800c534 g     O .rodata	00000020 NVIC_IPR19_fields
0800fc5c g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800fddc g     O .rodata	00000010 TIM10_EGR_fields
08005980 g     F .text	00000154 __multiply
08002904 g     F .text	00000138 HAL_RCC_ClockConfig
08002b1c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
0800bd0c g     O .rodata	00000080 GPIOH_PUPDR_fields
08001438 g     F .text	00000138 TaskInput
0800f13c g     O .rodata	00000008 RTC_TSSSR_fields
0800ea4c g     O .rodata	00000060 RCC_CR_fields
08005db4 g     F .text	000000b8 __d2b
0800c114 g     O .rodata	00000008 I2S2ext_DR_fields
0801167c g     O .rodata	00000048 USART1_CR2_fields
0800a2d4 g     O .rodata	00000008 DMA2_S7PAR_fields
080044ec g     F .text	00000034 strcasecmp
0801005c g     O .rodata	00000040 TIM1_BDTR_fields
0800fbbc g     O .rodata	00000020 STK_CTRL_fields
0800954c g     O .rodata	00000008 ADC1_SMPR1_fields
08011074 g     O .rodata	00000010 TIM5_CCR3_fields
080011f4  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800dcd4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800020c g     F .text	00000004 my_Init
0800e864 g     O .rodata	00000058 RCC_APB2LPENR_fields
0800de0c g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
08012b98 g     O .rodata	0000000c AdcEventE
080011f4  w    F .text	00000006 SPI5_IRQHandler
0800f7b4 g     O .rodata	00000048 SDIO_CMD_fields
08012be0 g     O .rodata	0000000c CmdReceiveE
0800d904 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800f43c g     O .rodata	00000030 SCB_AIRCR_fields
08009814 g     O .rodata	00000020 ADC_Common_registers
0800ee44 g     O .rodata	00000008 RTC_BKP14R_fields
0800b8c4 g     O .rodata	00000040 GPIOH_AFRL_fields
0800122c g     F .text	00000004 _close_r
080004b8 g     F .text	00000022 .hidden __aeabi_i2d
08009844 g     O .rodata	00000008 CRC_IDR_fields
080114c4 g     O .rodata	00000008 TIM9_PSC_fields
080011f4  w    F .text	00000006 TIM5_IRQHandler
0800c284 g     O .rodata	00000040 IWDG_registers
08004530 g     F .text	00000068 strtok
0800df1c g     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
08012b80 g     O .rodata	00000018 TaskInputTask
0800dc34 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800ba04 g     O .rodata	00000080 GPIOH_IDR_fields
0800cf0c g     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800c264 g     O .rodata	00000008 IWDG_PR_fields
08010b44 g     O .rodata	00000030 TIM3_CCMR2_Input_fields
08001128 g     F .text	0000007c AdcEvent
08001c4c g     F .text	0000002c TaskingInit
080011f4  w    F .text	00000006 DMA2_Stream7_IRQHandler
0800f9b4 g     O .rodata	00000008 SDIO_RESP4_fields
0800c434 g     O .rodata	00000020 NVIC_IPR11_fields
080011f4  w    F .text	00000006 I2C3_EV_IRQHandler
0800c9bc g     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800fc2c g     O .rodata	00000010 SYSCFG_CMPCR_fields
0800179c g     F .text	0000004c TerminalInit
080047f8 g     F .text	000000dc __swsetup_r
080008dc  w    F .text	00000002 .hidden __aeabi_ldiv0
080011f4  w    F .text	00000006 EXTI9_5_IRQHandler
08000be4 g     F .text	000001d0 .hidden __divdf3
080094cc g     O .rodata	00000008 ADC1_DR_fields
08003644 g     F .text	0000008c __sfp
0800d1e4 g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
080011f4  w    F .text	00000006 RTC_WKUP_IRQHandler
080115f4 g     O .rodata	00000010 USART1_BRR_fields
080019fc g     F .text	0000002a PolledPrintf
0800a1bc g     O .rodata	00000020 DMA2_S6FCR_fields
0800cdb4 g     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
080035c8 g     F .text	0000000c __sinit_lock_release
080046e0 g     F .text	00000056 _vsnprintf_r
08000990 g     F .text	00000254 .hidden __muldf3
0800169c g     F .text	00000054 CmdDump
08001c88 g     F .text	00000068 TaskingRun
08004464 g     F .text	00000022 __sread
080117fc g     O .rodata	00000020 WWDG_CFR_fields
08009e3c g     O .rodata	00000020 DMA2_S2FCR_fields
0800e26c g     O .rodata	00000380 Peripherals
0800f8d4 g     O .rodata	000000c0 SDIO_MASK_fields
0800b5e4 g     O .rodata	00000080 GPIOB_ODR_fields
08002b10  w    F .text	0000000c HAL_GetTick
0800fd5c g     O .rodata	00000018 TIM10_CCMR1_Input_fields
0800574c g     F .text	0000000c __malloc_lock
0800c68c g     O .rodata	00000008 NVIC_ISPR0_fields
0800ac4c g     O .rodata	00000048 FPU_FPCCR_fields
08009f44 g     O .rodata	00000008 DMA2_S3M1AR_fields
0800bb0c g     O .rodata	00000080 GPIOH_MODER_fields
0800c3bc g     O .rodata	00000008 NVIC_IABR2_fields
08003488 g     F .text	00000078 _fflush_r
08005e6c g     F .text	0000001e _calloc_r
080098cc g     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800b1bc g     O .rodata	00000080 GPIOA_PUPDR_fields
080011f4  w    F .text	00000006 SPI2_IRQHandler
0800ce0c g     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800ff4c g     O .rodata	00000010 TIM11_DIER_fields
08012808 g     O .rodata	00000020 __sf_fake_stdin
0800f66c g     O .rodata	00000010 SCB_SHPR3_fields
0800c6a4 g     O .rodata	00000008 NVIC_STIR_STIR_fields
0801116c g     O .rodata	00000008 TIM5_DMAR_fields
0800375a g     F .text	00000002 __retarget_lock_acquire_recursive
08009f54 g     O .rodata	00000008 DMA2_S3PAR_fields
0800a78c g     O .rodata	000000b8 EXTI_IMR_fields
0800d804 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800f114 g     O .rodata	00000028 RTC_TSDR_fields
0800375e g     F .text	00000010 memset
0800245c g     F .text	00000002 MemManage_Handler
08002350 g     F .text	00000108 main
0800fc7c g     O .rodata	00000020 SYSCFG_EXTICR3_fields
0800fef4 g     O .rodata	00000020 TIM11_CCMR1_Output_fields
080011f4  w    F .text	00000006 DMA1_Stream0_IRQHandler
0800a1e4 g     O .rodata	00000008 DMA2_S6M1AR_fields
08003758 g     F .text	00000002 __retarget_lock_init_recursive
080094ec g     O .rodata	00000008 ADC1_JDR3_fields
0800a29c g     O .rodata	00000020 DMA2_S7FCR_fields
0800ff24 g     O .rodata	00000028 TIM11_CR1_fields
080126e1 g     O .rodata	00000006 VersionBuildUser
080110a4 g     O .rodata	00000040 TIM5_CR1_fields
08009d8c g     O .rodata	00000008 DMA2_S1NDTR_fields
0800c654 g     O .rodata	00000020 NVIC_IPR9_fields
0800c4d4 g     O .rodata	00000020 NVIC_IPR16_fields
0800db94 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
08002462 g     F .text	00000002 SVC_Handler
080044e2 g     F .text	00000008 __sclose
08009e74 g     O .rodata	00000008 DMA2_S2PAR_fields
08010bf4 g     O .rodata	00000010 TIM3_CCR4_fields
08001a28 g     F .text	00000064 TerminalInputBufferWrite
08004a28 g     F .text	00000bdc _dtoa_r
08003808 g     F .text	000000b4 _malloc_r
0800b31c g     O .rodata	00000040 GPIOB_AFRL_fields
08006484 g     F .text	0000001a __ascii_wctomb
0800d4f4 g     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
08009cac g     O .rodata	00000008 DMA2_S0NDTR_fields
08000530 g     F .text	0000005a .hidden __aeabi_l2d
0801010c g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800a104 g     O .rodata	00000008 DMA2_S5M1AR_fields
0800c10c g     O .rodata	00000008 I2S2ext_CRCPR_fields
0800ac34 g     O .rodata	00000010 FPU_CPACR_registers
08010ce4 g     O .rodata	00000030 TIM3_EGR_fields
08009d7c g     O .rodata	00000008 DMA2_S1M0AR_fields
0800f474 g     O .rodata	00000030 SCB_CCR_fields
080011f4  w    F .text	00000006 EXTI4_IRQHandler
0800ff74 g     O .rodata	00000008 TIM11_PSC_fields
0800ee8c g     O .rodata	00000008 RTC_BKP4R_fields
0800ee54 g     O .rodata	00000008 RTC_BKP16R_fields
08009d5c g     O .rodata	00000020 DMA2_S1FCR_fields
08009754 g     O .rodata	00000030 ADC_Common_CCR_fields
0800ee2c g     O .rodata	00000008 RTC_BKP11R_fields
08002534 g     F .text	00000014 SystemInit
0800f5bc g     O .rodata	00000008 SCB_MMFAR_fields
08011094 g     O .rodata	00000010 TIM5_CNT_fields
08000dc4 g     F .text	0000007a .hidden __nedf2
0800ed9c g     O .rodata	00000070 RTC_ALRMBR_fields
080107c4 g     O .rodata	00000010 TIM2_DCR_fields
080065d0 g     F .text	00000000 _fini
08001298 g     F .text	0000001e CmdW
0800d2e4 g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
08004190 g     F .text	00000030 iprintf
080114cc g     O .rodata	00000018 TIM9_SMCR_fields
20000384 g       .data	00000000 _taskstate_end
0800ff94 g     O .rodata	000000c0 TIM11_registers
080024b8 g     F .text	0000007c HAL_UART_MspInit
08003980 g     F .text	0000007c __exponent
0800cafc g     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800f184 g     O .rodata	00000008 RTC_WUTR_fields
0800efcc g     O .rodata	00000080 RTC_ISR_fields
080102d4 g     O .rodata	00000010 TIM1_DCR_fields
0800e1c4 g     O .rodata	00000050 PWR_CR_fields
0801083c g     O .rodata	00000030 TIM2_EGR_fields
0800ad04 g     O .rodata	00000030 FPU_registers
0800124c g     F .text	00000040 _write_r
0800fcc4 g     O .rodata	00000008 SYSCFG_PMC_fields
0800d464 g     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
08009914 g     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
080095b4 g     O .rodata	00000030 ADC1_SQR3_fields
0800946c g     O .rodata	00000060 ADC1_CR2_fields
0800f77c g     O .rodata	00000038 SDIO_CLKCR_fields
0800db44 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
08002a7c  w    F .text	00000048 HAL_InitTick
0800cedc g     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
08010ee4 g     O .rodata	00000010 TIM5_ARR_fields
08003e68 g     F .text	000000da _printf_common
0800c454 g     O .rodata	00000020 NVIC_IPR12_fields
200001b0 g     O .data	00000004 _impure_ptr
0800cf2c g     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
080094f4 g     O .rodata	00000008 ADC1_JDR4_fields
0800337c g     F .text	0000010c __sflush_r
08002af8  w    F .text	00000018 HAL_IncTick
0800e944 g     O .rodata	00000068 RCC_CFGR_fields
0800eeec g     O .rodata	000000a8 RTC_CR_fields
0800a6d4 g     O .rodata	000000b8 EXTI_FTSR_fields
08005f40 g     F .text	00000200 _svfiprintf_r
0800d3ac g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0801173c g     O .rodata	00000050 USART1_SR_fields
0800de84 g     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
080011f4  w    F .text	00000006 WWDG_IRQHandler
0800c0d4 g     O .rodata	00000038 I2S2ext_CR2_fields
080094d4 g     O .rodata	00000008 ADC1_HTR_fields
0800c5f4 g     O .rodata	00000020 NVIC_IPR6_fields
08011054 g     O .rodata	00000010 TIM5_CCR1_fields
0801073c g     O .rodata	00000010 TIM2_CCR3_fields
08001cf0 g     F .text	00000058 Default_IRQHandler
0800570c g     F .text	00000024 __ascii_mbtowc
0800afbc g     O .rodata	00000080 GPIOA_MODER_fields
08012c10 g     O .rodata	0000000c CmdTransparentE
08001758 g     F .text	00000044 CmdTransparent
08010274 g     O .rodata	00000060 TIM1_CR2_fields
0800f04c g     O .rodata	00000010 RTC_PRER_fields
0800c6ac g     O .rodata	00000010 NVIC_STIR_registers
0801143c g     O .rodata	00000008 TIM9_CCR2_fields
0800dbe4 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800fdcc g     O .rodata	00000010 TIM10_DIER_fields
08010f54 g     O .rodata	00000030 TIM5_CCMR1_Input_fields
08010c6c g     O .rodata	00000010 TIM3_DCR_fields
0800fbec g     O .rodata	00000040 STK_registers
080011f4  w    F .text	00000006 TIM2_IRQHandler
0800bc8c g     O .rodata	00000080 GPIOH_OTYPER_fields
08000208 g     F .text	00000004 my_Loop
0800cdec g     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
08012bbc g     O .rodata	0000000c CmdDecodeE
080046e0 g     F .text	00000056 _vsniprintf_r
0800f534 g     O .rodata	00000028 SCB_CPUID_fields
20000000 g       .data	00000000 myTickCount
0800f7fc g     O .rodata	00000008 SDIO_DCOUNT_fields
0800a2dc g     O .rodata	00000340 DMA2_registers
0800de94 g     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
080011f4  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
0800aacc g     O .rodata	00000030 FLASH_ACR_fields
080011f4  w    F .text	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800ed1c g     O .rodata	00000070 RTC_ALRMAR_fields
08010054 g     O .rodata	00000008 TIM1_ARR_fields
0800bc0c g     O .rodata	00000080 GPIOH_OSPEEDR_fields
08009d94 g     O .rodata	00000008 DMA2_S1PAR_fields
0800ab4c g     O .rodata	00000040 FLASH_OPTCR_fields
08005630 g     F .text	0000004a __swhatbuf_r
08001328 g     F .text	00000110 parse
20020000 g       *ABS*	00000000 _estack
080126c8 g     O .rodata	00000019 VersionBuildDateString
080098ec g     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800d4cc g     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800ee7c g     O .rodata	00000008 RTC_BKP2R_fields
080011f4  w    F .text	00000006 EXTI1_IRQHandler
08000e60 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800f804 g     O .rodata	00000048 SDIO_DCTRL_fields
0800fedc g     O .rodata	00000018 TIM11_CCMR1_Input_fields
08009e7c g     O .rodata	000000a0 DMA2_S3CR_fields
0800f854 g     O .rodata	00000008 SDIO_DTIMER_fields
0800ac44 g     O .rodata	00000008 FPU_FPCAR_fields
20000384 g       .data	00000000 _edata
0800d3bc g     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800f9ac g     O .rodata	00000008 SDIO_RESP3_fields
20000cfc g     O .bss	00000044 huart2
0800f9bc g     O .rodata	00000008 SDIO_RESPCMD_fields
08002028 g     F .text	0000028c CmdDecode
080113f4 g     O .rodata	00000040 TIM9_CCMR1_Output_fields
0800b45c g     O .rodata	00000080 GPIOB_IDR_fields
0800e1b4 g     O .rodata	00000010 OTG_FS_PWRCLK_registers
0801138c g     O .rodata	00000008 TIM9_ARR_fields
08009d9c g     O .rodata	000000a0 DMA2_S2CR_fields
0800e8bc g     O .rodata	00000050 RCC_APB2RSTR_fields
0800d21c g     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
08001570 g     F .text	0000003c fetch_uint32_arg
0800ee0c g     O .rodata	00000010 RTC_ALRMBSSR_fields
08001b6c g     F .text	00000006 USART2_IRQHandler
0800c6bc g     O .rodata	00000230 NVIC_registers
0800c33c g     O .rodata	00000008 MPU_MPU_RNR_fields
08004486 g     F .text	00000038 __swrite
08002548  w    F .text	00000360 HAL_RCC_OscConfig
080114a4 g     O .rodata	00000020 TIM9_EGR_fields
08005604 g     F .text	00000024 fiprintf
08006194 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800cdcc g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
080036d0 g     F .text	0000003e _fwalk_reent
08005ca0 g     F .text	00000114 __mdiff
0800058c g     F .text	0000004e .hidden __aeabi_d2iz
0800ee4c g     O .rodata	00000008 RTC_BKP15R_fields
0800e24c g     O .rodata	00000020 PWR_registers
08009e64 g     O .rodata	00000008 DMA2_S2M1AR_fields
0800c2c4 g     O .rodata	00000018 MPU_MPU_CTRL_fields
080094e4 g     O .rodata	00000008 ADC1_JDR2_fields
08009f5c g     O .rodata	000000a0 DMA2_S4CR_fields
0800128c g     F .text	00000006 _kill
0800c35c g     O .rodata	00000050 MPU_registers
0800cb44 g     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
080011f4  w    F .text	00000006 I2C2_ER_IRQHandler
0800de6c g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800b0bc g     O .rodata	00000080 GPIOA_OSPEEDR_fields
080035b0 g     F .text	0000000c __sfp_lock_release
080105bc g     O .rodata	00000060 TIM2_CCER_fields
080015ac g     F .text	00000030 fetch_string_arg
08012828 g     O .rodata	00000020 __sf_fake_stdout
08012bb0 g     O .rodata	0000000c CmdDumpE
0800b564 g     O .rodata	00000080 GPIOB_MODER_fields
080116c4 g     O .rodata	00000060 USART1_CR3_fields
0800febc g     O .rodata	00000008 TIM11_ARR_fields
080011f4  w    F .text	00000006 DMA2_Stream1_IRQHandler
08001e6c g     F .text	00000050 DecodeField
08010a64 g     O .rodata	00000060 TIM3_CCER_fields
08001f70 g     F .text	00000054 DecodePrintPeripherals
080103a4 g     O .rodata	00000008 TIM1_PSC_fields
080126e7 g     O .rodata	00000101 _ctype_
0800d1b4 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
080008dc  w    F .text	00000002 .hidden __aeabi_idiv0
0800f5dc g     O .rodata	00000070 SCB_SHCRS_fields
08000ec4 g     F .text	0000002c .hidden __unorddf2
0800f664 g     O .rodata	00000008 SCB_SHPR2_fields
0800cccc g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800e9ac g     O .rodata	000000a0 RCC_CIR_fields
08012c04 g     O .rodata	0000000c CmdStatsE
080011f4  w    F .text	00000006 FLASH_IRQHandler
080111b4 g     O .rodata	00000038 TIM5_SMCR_fields
0800ce1c g     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
08001292 g     F .text	00000002 _exit
0800c594 g     O .rodata	00000020 NVIC_IPR3_fields
08012bf8 g     O .rodata	0000000c CmdTasksE
0800a2c4 g     O .rodata	00000008 DMA2_S7M1AR_fields
08001894 g     F .text	000000c8 TerminalOutputBufferWrite
080011f4  w    F .text	00000006 DMA2_Stream4_IRQHandler
0800245e g     F .text	00000002 BusFault_Handler
080011f4  w    F .text	00000006 USART1_IRQHandler
0800cdd4 g     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800d1c4 g     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800567c g     F .text	00000080 __smakebuf_r
0800dd24 g     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
08001b74 g     F .text	00000088 WDTCheckReset
080008e0 g     F .text	00000010 strlen
0800e80c g     O .rodata	00000058 RCC_APB2ENR_fields
080011f4  w    F .text	00000006 OTG_FS_IRQHandler
08003f44 g     F .text	0000024c _printf_i
080011f4  w    F .text	00000006 SPI3_IRQHandler
0800f84c g     O .rodata	00000008 SDIO_DLEN_fields
0800ba84 g     O .rodata	00000088 GPIOH_LCKR_fields
08000e50 g     F .text	00000010 .hidden __aeabi_cdcmpeq
080111a4 g     O .rodata	00000008 TIM5_OR_fields
08000db4 g     F .text	0000008a .hidden __gedf2
080011f4  w    F .text	00000006 DMA1_Stream4_IRQHandler
08010234 g     O .rodata	00000040 TIM1_CR1_fields
20000d4c g     O .bss	00000004 __malloc_sbrk_start
0800c274 g     O .rodata	00000010 IWDG_SR_fields
08002ca4 g     F .text	0000005c HAL_UART_Init
0801009c g     O .rodata	00000070 TIM1_CCER_fields
0800d3cc g     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800f46c g     O .rodata	00000008 SCB_BFAR_fields
20000004 g     O .data	00000194 InterruptNames
080011f4  w    F .text	00000006 I2C1_ER_IRQHandler
08009504 g     O .rodata	00000008 ADC1_JOFR2_fields
080101bc g     O .rodata	00000050 TIM1_CCMR2_Output_fields
0800c344 g     O .rodata	00000018 MPU_MPU_TYPER_fields
08012bec g     O .rodata	0000000c CmdSendE
0800c634 g     O .rodata	00000020 NVIC_IPR8_fields
080004dc g     F .text	00000042 .hidden __aeabi_f2d
0800d994 g     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
08000ef0 g     F .text	00000050 CmdLed
0800abcc g     O .rodata	00000060 FLASH_registers
20000d48 g     O .bss	00000004 __malloc_free_list
080094fc g     O .rodata	00000008 ADC1_JOFR1_fields
0800f424 g     O .rodata	00000010 SCB_ACTRL_registers
08010a54 g     O .rodata	00000010 TIM3_ARR_fields
0800cd44 g     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800021c g     F .text	0000027a .hidden __subdf3
08006194 g     F .text	00000260 _vfprintf_r
080058f4 g     F .text	0000005e __lo0bits
0800d1ac g     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
080110fc g     O .rodata	00000010 TIM5_DCR_fields
0800ddf4 g     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800ee74 g     O .rodata	00000008 RTC_BKP1R_fields
08001ebc g     F .text	00000060 DecodeRegister
0800b7e4 g     O .rodata	000000a0 GPIOB_registers
08001dc4 g     F .text	00000054 DecodeReadRegister
0800d674 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
080011f4  w    F .text	00000006 DMA2_Stream6_IRQHandler
080017e8 g     F .text	0000004c TerminalRead
08010d54 g     O .rodata	00000050 TIM3_SR_fields
08010834 g     O .rodata	00000008 TIM2_DMAR_fields
20000214 g     O .data	0000016c __global_locale
0800fd74 g     O .rodata	00000020 TIM10_CCMR1_Output_fields
0800ca24 g     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800bee4 g     O .rodata	00000008 I2C3_DR_fields
0800ff7c g     O .rodata	00000018 TIM11_SR_fields
0800e90c g     O .rodata	00000038 RCC_BDCR_fields
0800d764 g     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
080011f4  w    F .text	00000006 DMA1_Stream3_IRQHandler
08010d1c g     O .rodata	00000038 TIM3_SMCR_fields
0800c694 g     O .rodata	00000008 NVIC_ISPR1_fields
0800c3ec g     O .rodata	00000008 NVIC_ICPR2_fields
20000d45 g     O .bss	00000001 __lock___sfp_recursive_mutex
08011394 g     O .rodata	00000030 TIM9_CCER_fields
08010f84 g     O .rodata	00000050 TIM5_CCMR1_Output_fields
0800fccc g     O .rodata	00000070 SYSCFG_registers
0800657c g     F .text	00000010 raise
0800ca2c g     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
080035bc g     F .text	0000000c __sinit_lock_acquire
08009cbc g     O .rodata	000000a0 DMA2_S1CR_fields
0800f4a4 g     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
08005828 g     F .text	0000008c __multadd
080057e4 g     F .text	00000044 _Bfree
0800320c g     F .text	00000006 HAL_ADC_GetValue
0800ab8c g     O .rodata	00000008 FLASH_OPTKEYR_fields
0801181c g     O .rodata	00000010 WWDG_CR_fields



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000384 	.word	0x20000384
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065c4 	.word	0x080065c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000388 	.word	0x20000388
 80001dc:	080065c4 	.word	0x080065c4

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f000 fed5 	bl	8000f94 <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	; 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_d2iz>:
 800058c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000590:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000594:	d215      	bcs.n	80005c2 <__aeabi_d2iz+0x36>
 8000596:	d511      	bpl.n	80005bc <__aeabi_d2iz+0x30>
 8000598:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800059c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005a0:	d912      	bls.n	80005c8 <__aeabi_d2iz+0x3c>
 80005a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b2:	fa23 f002 	lsr.w	r0, r3, r2
 80005b6:	bf18      	it	ne
 80005b8:	4240      	negne	r0, r0
 80005ba:	4770      	bx	lr
 80005bc:	f04f 0000 	mov.w	r0, #0
 80005c0:	4770      	bx	lr
 80005c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005c6:	d105      	bne.n	80005d4 <__aeabi_d2iz+0x48>
 80005c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005d2:	4770      	bx	lr
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_uldivmod>:
 80005dc:	b953      	cbnz	r3, 80005f4 <__aeabi_uldivmod+0x18>
 80005de:	b94a      	cbnz	r2, 80005f4 <__aeabi_uldivmod+0x18>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	bf08      	it	eq
 80005e4:	2800      	cmpeq	r0, #0
 80005e6:	bf1c      	itt	ne
 80005e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005f0:	f000 b974 	b.w	80008dc <__aeabi_idiv0>
 80005f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005fc:	f000 f806 	bl	800060c <__udivmoddi4>
 8000600:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000608:	b004      	add	sp, #16
 800060a:	4770      	bx	lr

0800060c <__udivmoddi4>:
 800060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000610:	9d08      	ldr	r5, [sp, #32]
 8000612:	4604      	mov	r4, r0
 8000614:	468e      	mov	lr, r1
 8000616:	2b00      	cmp	r3, #0
 8000618:	d14d      	bne.n	80006b6 <__udivmoddi4+0xaa>
 800061a:	428a      	cmp	r2, r1
 800061c:	4694      	mov	ip, r2
 800061e:	d969      	bls.n	80006f4 <__udivmoddi4+0xe8>
 8000620:	fab2 f282 	clz	r2, r2
 8000624:	b152      	cbz	r2, 800063c <__udivmoddi4+0x30>
 8000626:	fa01 f302 	lsl.w	r3, r1, r2
 800062a:	f1c2 0120 	rsb	r1, r2, #32
 800062e:	fa20 f101 	lsr.w	r1, r0, r1
 8000632:	fa0c fc02 	lsl.w	ip, ip, r2
 8000636:	ea41 0e03 	orr.w	lr, r1, r3
 800063a:	4094      	lsls	r4, r2
 800063c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000640:	0c21      	lsrs	r1, r4, #16
 8000642:	fbbe f6f8 	udiv	r6, lr, r8
 8000646:	fa1f f78c 	uxth.w	r7, ip
 800064a:	fb08 e316 	mls	r3, r8, r6, lr
 800064e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000652:	fb06 f107 	mul.w	r1, r6, r7
 8000656:	4299      	cmp	r1, r3
 8000658:	d90a      	bls.n	8000670 <__udivmoddi4+0x64>
 800065a:	eb1c 0303 	adds.w	r3, ip, r3
 800065e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000662:	f080 811f 	bcs.w	80008a4 <__udivmoddi4+0x298>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 811c 	bls.w	80008a4 <__udivmoddi4+0x298>
 800066c:	3e02      	subs	r6, #2
 800066e:	4463      	add	r3, ip
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0f8 	udiv	r0, r3, r8
 8000678:	fb08 3310 	mls	r3, r8, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 f707 	mul.w	r7, r0, r7
 8000684:	42a7      	cmp	r7, r4
 8000686:	d90a      	bls.n	800069e <__udivmoddi4+0x92>
 8000688:	eb1c 0404 	adds.w	r4, ip, r4
 800068c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000690:	f080 810a 	bcs.w	80008a8 <__udivmoddi4+0x29c>
 8000694:	42a7      	cmp	r7, r4
 8000696:	f240 8107 	bls.w	80008a8 <__udivmoddi4+0x29c>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a2:	1be4      	subs	r4, r4, r7
 80006a4:	2600      	movs	r6, #0
 80006a6:	b11d      	cbz	r5, 80006b0 <__udivmoddi4+0xa4>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c5 4300 	strd	r4, r3, [r5]
 80006b0:	4631      	mov	r1, r6
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xc2>
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	f000 80ef 	beq.w	800089e <__udivmoddi4+0x292>
 80006c0:	2600      	movs	r6, #0
 80006c2:	e9c5 0100 	strd	r0, r1, [r5]
 80006c6:	4630      	mov	r0, r6
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f683 	clz	r6, r3
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d14a      	bne.n	800076c <__udivmoddi4+0x160>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd4>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80f9 	bhi.w	80008d2 <__udivmoddi4+0x2c6>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	469e      	mov	lr, r3
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa4>
 80006ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa4>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xec>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 8092 	bne.w	8000826 <__udivmoddi4+0x21a>
 8000702:	eba1 010c 	sub.w	r1, r1, ip
 8000706:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070a:	fa1f fe8c 	uxth.w	lr, ip
 800070e:	2601      	movs	r6, #1
 8000710:	0c20      	lsrs	r0, r4, #16
 8000712:	fbb1 f3f7 	udiv	r3, r1, r7
 8000716:	fb07 1113 	mls	r1, r7, r3, r1
 800071a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800071e:	fb0e f003 	mul.w	r0, lr, r3
 8000722:	4288      	cmp	r0, r1
 8000724:	d908      	bls.n	8000738 <__udivmoddi4+0x12c>
 8000726:	eb1c 0101 	adds.w	r1, ip, r1
 800072a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800072e:	d202      	bcs.n	8000736 <__udivmoddi4+0x12a>
 8000730:	4288      	cmp	r0, r1
 8000732:	f200 80cb 	bhi.w	80008cc <__udivmoddi4+0x2c0>
 8000736:	4643      	mov	r3, r8
 8000738:	1a09      	subs	r1, r1, r0
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000740:	fb07 1110 	mls	r1, r7, r0, r1
 8000744:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000748:	fb0e fe00 	mul.w	lr, lr, r0
 800074c:	45a6      	cmp	lr, r4
 800074e:	d908      	bls.n	8000762 <__udivmoddi4+0x156>
 8000750:	eb1c 0404 	adds.w	r4, ip, r4
 8000754:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000758:	d202      	bcs.n	8000760 <__udivmoddi4+0x154>
 800075a:	45a6      	cmp	lr, r4
 800075c:	f200 80bb 	bhi.w	80008d6 <__udivmoddi4+0x2ca>
 8000760:	4608      	mov	r0, r1
 8000762:	eba4 040e 	sub.w	r4, r4, lr
 8000766:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076a:	e79c      	b.n	80006a6 <__udivmoddi4+0x9a>
 800076c:	f1c6 0720 	rsb	r7, r6, #32
 8000770:	40b3      	lsls	r3, r6
 8000772:	fa22 fc07 	lsr.w	ip, r2, r7
 8000776:	ea4c 0c03 	orr.w	ip, ip, r3
 800077a:	fa20 f407 	lsr.w	r4, r0, r7
 800077e:	fa01 f306 	lsl.w	r3, r1, r6
 8000782:	431c      	orrs	r4, r3
 8000784:	40f9      	lsrs	r1, r7
 8000786:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078a:	fa00 f306 	lsl.w	r3, r0, r6
 800078e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000792:	0c20      	lsrs	r0, r4, #16
 8000794:	fa1f fe8c 	uxth.w	lr, ip
 8000798:	fb09 1118 	mls	r1, r9, r8, r1
 800079c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a0:	fb08 f00e 	mul.w	r0, r8, lr
 80007a4:	4288      	cmp	r0, r1
 80007a6:	fa02 f206 	lsl.w	r2, r2, r6
 80007aa:	d90b      	bls.n	80007c4 <__udivmoddi4+0x1b8>
 80007ac:	eb1c 0101 	adds.w	r1, ip, r1
 80007b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007b4:	f080 8088 	bcs.w	80008c8 <__udivmoddi4+0x2bc>
 80007b8:	4288      	cmp	r0, r1
 80007ba:	f240 8085 	bls.w	80008c8 <__udivmoddi4+0x2bc>
 80007be:	f1a8 0802 	sub.w	r8, r8, #2
 80007c2:	4461      	add	r1, ip
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80007cc:	fb09 1110 	mls	r1, r9, r0, r1
 80007d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80007d8:	458e      	cmp	lr, r1
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x1e2>
 80007dc:	eb1c 0101 	adds.w	r1, ip, r1
 80007e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007e4:	d26c      	bcs.n	80008c0 <__udivmoddi4+0x2b4>
 80007e6:	458e      	cmp	lr, r1
 80007e8:	d96a      	bls.n	80008c0 <__udivmoddi4+0x2b4>
 80007ea:	3802      	subs	r0, #2
 80007ec:	4461      	add	r1, ip
 80007ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f2:	fba0 9402 	umull	r9, r4, r0, r2
 80007f6:	eba1 010e 	sub.w	r1, r1, lr
 80007fa:	42a1      	cmp	r1, r4
 80007fc:	46c8      	mov	r8, r9
 80007fe:	46a6      	mov	lr, r4
 8000800:	d356      	bcc.n	80008b0 <__udivmoddi4+0x2a4>
 8000802:	d053      	beq.n	80008ac <__udivmoddi4+0x2a0>
 8000804:	b15d      	cbz	r5, 800081e <__udivmoddi4+0x212>
 8000806:	ebb3 0208 	subs.w	r2, r3, r8
 800080a:	eb61 010e 	sbc.w	r1, r1, lr
 800080e:	fa01 f707 	lsl.w	r7, r1, r7
 8000812:	fa22 f306 	lsr.w	r3, r2, r6
 8000816:	40f1      	lsrs	r1, r6
 8000818:	431f      	orrs	r7, r3
 800081a:	e9c5 7100 	strd	r7, r1, [r5]
 800081e:	2600      	movs	r6, #0
 8000820:	4631      	mov	r1, r6
 8000822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000826:	f1c2 0320 	rsb	r3, r2, #32
 800082a:	40d8      	lsrs	r0, r3
 800082c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000830:	fa21 f303 	lsr.w	r3, r1, r3
 8000834:	4091      	lsls	r1, r2
 8000836:	4301      	orrs	r1, r0
 8000838:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800083c:	fa1f fe8c 	uxth.w	lr, ip
 8000840:	fbb3 f0f7 	udiv	r0, r3, r7
 8000844:	fb07 3610 	mls	r6, r7, r0, r3
 8000848:	0c0b      	lsrs	r3, r1, #16
 800084a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800084e:	fb00 f60e 	mul.w	r6, r0, lr
 8000852:	429e      	cmp	r6, r3
 8000854:	fa04 f402 	lsl.w	r4, r4, r2
 8000858:	d908      	bls.n	800086c <__udivmoddi4+0x260>
 800085a:	eb1c 0303 	adds.w	r3, ip, r3
 800085e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000862:	d22f      	bcs.n	80008c4 <__udivmoddi4+0x2b8>
 8000864:	429e      	cmp	r6, r3
 8000866:	d92d      	bls.n	80008c4 <__udivmoddi4+0x2b8>
 8000868:	3802      	subs	r0, #2
 800086a:	4463      	add	r3, ip
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	b289      	uxth	r1, r1
 8000870:	fbb3 f6f7 	udiv	r6, r3, r7
 8000874:	fb07 3316 	mls	r3, r7, r6, r3
 8000878:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800087c:	fb06 f30e 	mul.w	r3, r6, lr
 8000880:	428b      	cmp	r3, r1
 8000882:	d908      	bls.n	8000896 <__udivmoddi4+0x28a>
 8000884:	eb1c 0101 	adds.w	r1, ip, r1
 8000888:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800088c:	d216      	bcs.n	80008bc <__udivmoddi4+0x2b0>
 800088e:	428b      	cmp	r3, r1
 8000890:	d914      	bls.n	80008bc <__udivmoddi4+0x2b0>
 8000892:	3e02      	subs	r6, #2
 8000894:	4461      	add	r1, ip
 8000896:	1ac9      	subs	r1, r1, r3
 8000898:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800089c:	e738      	b.n	8000710 <__udivmoddi4+0x104>
 800089e:	462e      	mov	r6, r5
 80008a0:	4628      	mov	r0, r5
 80008a2:	e705      	b.n	80006b0 <__udivmoddi4+0xa4>
 80008a4:	4606      	mov	r6, r0
 80008a6:	e6e3      	b.n	8000670 <__udivmoddi4+0x64>
 80008a8:	4618      	mov	r0, r3
 80008aa:	e6f8      	b.n	800069e <__udivmoddi4+0x92>
 80008ac:	454b      	cmp	r3, r9
 80008ae:	d2a9      	bcs.n	8000804 <__udivmoddi4+0x1f8>
 80008b0:	ebb9 0802 	subs.w	r8, r9, r2
 80008b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008b8:	3801      	subs	r0, #1
 80008ba:	e7a3      	b.n	8000804 <__udivmoddi4+0x1f8>
 80008bc:	4646      	mov	r6, r8
 80008be:	e7ea      	b.n	8000896 <__udivmoddi4+0x28a>
 80008c0:	4620      	mov	r0, r4
 80008c2:	e794      	b.n	80007ee <__udivmoddi4+0x1e2>
 80008c4:	4640      	mov	r0, r8
 80008c6:	e7d1      	b.n	800086c <__udivmoddi4+0x260>
 80008c8:	46d0      	mov	r8, sl
 80008ca:	e77b      	b.n	80007c4 <__udivmoddi4+0x1b8>
 80008cc:	3b02      	subs	r3, #2
 80008ce:	4461      	add	r1, ip
 80008d0:	e732      	b.n	8000738 <__udivmoddi4+0x12c>
 80008d2:	4630      	mov	r0, r6
 80008d4:	e709      	b.n	80006ea <__udivmoddi4+0xde>
 80008d6:	4464      	add	r4, ip
 80008d8:	3802      	subs	r0, #2
 80008da:	e742      	b.n	8000762 <__udivmoddi4+0x156>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <strlen>:
 80008e0:	4603      	mov	r3, r0
 80008e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d1fb      	bne.n	80008e2 <strlen+0x2>
 80008ea:	1a18      	subs	r0, r3, r0
 80008ec:	3801      	subs	r0, #1
 80008ee:	4770      	bx	lr

080008f0 <memchr>:
 80008f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80008f4:	2a10      	cmp	r2, #16
 80008f6:	db2b      	blt.n	8000950 <memchr+0x60>
 80008f8:	f010 0f07 	tst.w	r0, #7
 80008fc:	d008      	beq.n	8000910 <memchr+0x20>
 80008fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000902:	3a01      	subs	r2, #1
 8000904:	428b      	cmp	r3, r1
 8000906:	d02d      	beq.n	8000964 <memchr+0x74>
 8000908:	f010 0f07 	tst.w	r0, #7
 800090c:	b342      	cbz	r2, 8000960 <memchr+0x70>
 800090e:	d1f6      	bne.n	80008fe <memchr+0xe>
 8000910:	b4f0      	push	{r4, r5, r6, r7}
 8000912:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000916:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800091a:	f022 0407 	bic.w	r4, r2, #7
 800091e:	f07f 0700 	mvns.w	r7, #0
 8000922:	2300      	movs	r3, #0
 8000924:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000928:	3c08      	subs	r4, #8
 800092a:	ea85 0501 	eor.w	r5, r5, r1
 800092e:	ea86 0601 	eor.w	r6, r6, r1
 8000932:	fa85 f547 	uadd8	r5, r5, r7
 8000936:	faa3 f587 	sel	r5, r3, r7
 800093a:	fa86 f647 	uadd8	r6, r6, r7
 800093e:	faa5 f687 	sel	r6, r5, r7
 8000942:	b98e      	cbnz	r6, 8000968 <memchr+0x78>
 8000944:	d1ee      	bne.n	8000924 <memchr+0x34>
 8000946:	bcf0      	pop	{r4, r5, r6, r7}
 8000948:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800094c:	f002 0207 	and.w	r2, r2, #7
 8000950:	b132      	cbz	r2, 8000960 <memchr+0x70>
 8000952:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000956:	3a01      	subs	r2, #1
 8000958:	ea83 0301 	eor.w	r3, r3, r1
 800095c:	b113      	cbz	r3, 8000964 <memchr+0x74>
 800095e:	d1f8      	bne.n	8000952 <memchr+0x62>
 8000960:	2000      	movs	r0, #0
 8000962:	4770      	bx	lr
 8000964:	3801      	subs	r0, #1
 8000966:	4770      	bx	lr
 8000968:	2d00      	cmp	r5, #0
 800096a:	bf06      	itte	eq
 800096c:	4635      	moveq	r5, r6
 800096e:	3803      	subeq	r0, #3
 8000970:	3807      	subne	r0, #7
 8000972:	f015 0f01 	tst.w	r5, #1
 8000976:	d107      	bne.n	8000988 <memchr+0x98>
 8000978:	3001      	adds	r0, #1
 800097a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800097e:	bf02      	ittt	eq
 8000980:	3001      	addeq	r0, #1
 8000982:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000986:	3001      	addeq	r0, #1
 8000988:	bcf0      	pop	{r4, r5, r6, r7}
 800098a:	3801      	subs	r0, #1
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <__aeabi_dmul>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000996:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800099a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800099e:	bf1d      	ittte	ne
 80009a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009a4:	ea94 0f0c 	teqne	r4, ip
 80009a8:	ea95 0f0c 	teqne	r5, ip
 80009ac:	f000 f8de 	bleq	8000b6c <__aeabi_dmul+0x1dc>
 80009b0:	442c      	add	r4, r5
 80009b2:	ea81 0603 	eor.w	r6, r1, r3
 80009b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80009ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80009be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80009c2:	bf18      	it	ne
 80009c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d0:	d038      	beq.n	8000a44 <__aeabi_dmul+0xb4>
 80009d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80009d6:	f04f 0500 	mov.w	r5, #0
 80009da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80009de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80009e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80009e6:	f04f 0600 	mov.w	r6, #0
 80009ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009ee:	f09c 0f00 	teq	ip, #0
 80009f2:	bf18      	it	ne
 80009f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80009f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80009fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000a00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000a04:	d204      	bcs.n	8000a10 <__aeabi_dmul+0x80>
 8000a06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a0a:	416d      	adcs	r5, r5
 8000a0c:	eb46 0606 	adc.w	r6, r6, r6
 8000a10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000a20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000a24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a28:	bf88      	it	hi
 8000a2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a2e:	d81e      	bhi.n	8000a6e <__aeabi_dmul+0xde>
 8000a30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000a34:	bf08      	it	eq
 8000a36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000a3a:	f150 0000 	adcs.w	r0, r0, #0
 8000a3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a48:	ea46 0101 	orr.w	r1, r6, r1
 8000a4c:	ea40 0002 	orr.w	r0, r0, r2
 8000a50:	ea81 0103 	eor.w	r1, r1, r3
 8000a54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a58:	bfc2      	ittt	gt
 8000a5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a62:	bd70      	popgt	{r4, r5, r6, pc}
 8000a64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a68:	f04f 0e00 	mov.w	lr, #0
 8000a6c:	3c01      	subs	r4, #1
 8000a6e:	f300 80ab 	bgt.w	8000bc8 <__aeabi_dmul+0x238>
 8000a72:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a76:	bfde      	ittt	le
 8000a78:	2000      	movle	r0, #0
 8000a7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a7e:	bd70      	pople	{r4, r5, r6, pc}
 8000a80:	f1c4 0400 	rsb	r4, r4, #0
 8000a84:	3c20      	subs	r4, #32
 8000a86:	da35      	bge.n	8000af4 <__aeabi_dmul+0x164>
 8000a88:	340c      	adds	r4, #12
 8000a8a:	dc1b      	bgt.n	8000ac4 <__aeabi_dmul+0x134>
 8000a8c:	f104 0414 	add.w	r4, r4, #20
 8000a90:	f1c4 0520 	rsb	r5, r4, #32
 8000a94:	fa00 f305 	lsl.w	r3, r0, r5
 8000a98:	fa20 f004 	lsr.w	r0, r0, r4
 8000a9c:	fa01 f205 	lsl.w	r2, r1, r5
 8000aa0:	ea40 0002 	orr.w	r0, r0, r2
 8000aa4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000aa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000aac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ab0:	fa21 f604 	lsr.w	r6, r1, r4
 8000ab4:	eb42 0106 	adc.w	r1, r2, r6
 8000ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000abc:	bf08      	it	eq
 8000abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f1c4 040c 	rsb	r4, r4, #12
 8000ac8:	f1c4 0520 	rsb	r5, r4, #32
 8000acc:	fa00 f304 	lsl.w	r3, r0, r4
 8000ad0:	fa20 f005 	lsr.w	r0, r0, r5
 8000ad4:	fa01 f204 	lsl.w	r2, r1, r4
 8000ad8:	ea40 0002 	orr.w	r0, r0, r2
 8000adc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ae0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ae4:	f141 0100 	adc.w	r1, r1, #0
 8000ae8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aec:	bf08      	it	eq
 8000aee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000af2:	bd70      	pop	{r4, r5, r6, pc}
 8000af4:	f1c4 0520 	rsb	r5, r4, #32
 8000af8:	fa00 f205 	lsl.w	r2, r0, r5
 8000afc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b00:	fa20 f304 	lsr.w	r3, r0, r4
 8000b04:	fa01 f205 	lsl.w	r2, r1, r5
 8000b08:	ea43 0302 	orr.w	r3, r3, r2
 8000b0c:	fa21 f004 	lsr.w	r0, r1, r4
 8000b10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b14:	fa21 f204 	lsr.w	r2, r1, r4
 8000b18:	ea20 0002 	bic.w	r0, r0, r2
 8000b1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b24:	bf08      	it	eq
 8000b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	f094 0f00 	teq	r4, #0
 8000b30:	d10f      	bne.n	8000b52 <__aeabi_dmul+0x1c2>
 8000b32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000b36:	0040      	lsls	r0, r0, #1
 8000b38:	eb41 0101 	adc.w	r1, r1, r1
 8000b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b40:	bf08      	it	eq
 8000b42:	3c01      	subeq	r4, #1
 8000b44:	d0f7      	beq.n	8000b36 <__aeabi_dmul+0x1a6>
 8000b46:	ea41 0106 	orr.w	r1, r1, r6
 8000b4a:	f095 0f00 	teq	r5, #0
 8000b4e:	bf18      	it	ne
 8000b50:	4770      	bxne	lr
 8000b52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b56:	0052      	lsls	r2, r2, #1
 8000b58:	eb43 0303 	adc.w	r3, r3, r3
 8000b5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b60:	bf08      	it	eq
 8000b62:	3d01      	subeq	r5, #1
 8000b64:	d0f7      	beq.n	8000b56 <__aeabi_dmul+0x1c6>
 8000b66:	ea43 0306 	orr.w	r3, r3, r6
 8000b6a:	4770      	bx	lr
 8000b6c:	ea94 0f0c 	teq	r4, ip
 8000b70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b74:	bf18      	it	ne
 8000b76:	ea95 0f0c 	teqne	r5, ip
 8000b7a:	d00c      	beq.n	8000b96 <__aeabi_dmul+0x206>
 8000b7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b80:	bf18      	it	ne
 8000b82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b86:	d1d1      	bne.n	8000b2c <__aeabi_dmul+0x19c>
 8000b88:	ea81 0103 	eor.w	r1, r1, r3
 8000b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b9a:	bf06      	itte	eq
 8000b9c:	4610      	moveq	r0, r2
 8000b9e:	4619      	moveq	r1, r3
 8000ba0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ba4:	d019      	beq.n	8000bda <__aeabi_dmul+0x24a>
 8000ba6:	ea94 0f0c 	teq	r4, ip
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dmul+0x222>
 8000bac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000bb0:	d113      	bne.n	8000bda <__aeabi_dmul+0x24a>
 8000bb2:	ea95 0f0c 	teq	r5, ip
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_dmul+0x234>
 8000bb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000bbc:	bf1c      	itt	ne
 8000bbe:	4610      	movne	r0, r2
 8000bc0:	4619      	movne	r1, r3
 8000bc2:	d10a      	bne.n	8000bda <__aeabi_dmul+0x24a>
 8000bc4:	ea81 0103 	eor.w	r1, r1, r3
 8000bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000bcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000bd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	bd70      	pop	{r4, r5, r6, pc}
 8000bda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000bde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000be2:	bd70      	pop	{r4, r5, r6, pc}

08000be4 <__aeabi_ddiv>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000bee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000bf2:	bf1d      	ittte	ne
 8000bf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000bf8:	ea94 0f0c 	teqne	r4, ip
 8000bfc:	ea95 0f0c 	teqne	r5, ip
 8000c00:	f000 f8a7 	bleq	8000d52 <__aeabi_ddiv+0x16e>
 8000c04:	eba4 0405 	sub.w	r4, r4, r5
 8000c08:	ea81 0e03 	eor.w	lr, r1, r3
 8000c0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c14:	f000 8088 	beq.w	8000d28 <__aeabi_ddiv+0x144>
 8000c18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000c20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000c24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000c28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000c2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000c30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000c34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000c38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000c3c:	429d      	cmp	r5, r3
 8000c3e:	bf08      	it	eq
 8000c40:	4296      	cmpeq	r6, r2
 8000c42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000c46:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c4a:	d202      	bcs.n	8000c52 <__aeabi_ddiv+0x6e>
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c52:	1ab6      	subs	r6, r6, r2
 8000c54:	eb65 0503 	sbc.w	r5, r5, r3
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c6e:	bf22      	ittt	cs
 8000c70:	1ab6      	subcs	r6, r6, r2
 8000c72:	4675      	movcs	r5, lr
 8000c74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c78:	085b      	lsrs	r3, r3, #1
 8000c7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c86:	bf22      	ittt	cs
 8000c88:	1ab6      	subcs	r6, r6, r2
 8000c8a:	4675      	movcs	r5, lr
 8000c8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c90:	085b      	lsrs	r3, r3, #1
 8000c92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c9e:	bf22      	ittt	cs
 8000ca0:	1ab6      	subcs	r6, r6, r2
 8000ca2:	4675      	movcs	r5, lr
 8000ca4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ca8:	085b      	lsrs	r3, r3, #1
 8000caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cb6:	bf22      	ittt	cs
 8000cb8:	1ab6      	subcs	r6, r6, r2
 8000cba:	4675      	movcs	r5, lr
 8000cbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cc0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000cc4:	d018      	beq.n	8000cf8 <__aeabi_ddiv+0x114>
 8000cc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000cca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000cce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000cd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000cd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000cda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000cde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ce2:	d1c0      	bne.n	8000c66 <__aeabi_ddiv+0x82>
 8000ce4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ce8:	d10b      	bne.n	8000d02 <__aeabi_ddiv+0x11e>
 8000cea:	ea41 0100 	orr.w	r1, r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cf6:	e7b6      	b.n	8000c66 <__aeabi_ddiv+0x82>
 8000cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cfc:	bf04      	itt	eq
 8000cfe:	4301      	orreq	r1, r0
 8000d00:	2000      	moveq	r0, #0
 8000d02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d06:	bf88      	it	hi
 8000d08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d0c:	f63f aeaf 	bhi.w	8000a6e <__aeabi_dmul+0xde>
 8000d10:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d14:	bf04      	itt	eq
 8000d16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d1e:	f150 0000 	adcs.w	r0, r0, #0
 8000d22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000d2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000d30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000d34:	bfc2      	ittt	gt
 8000d36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d3e:	bd70      	popgt	{r4, r5, r6, pc}
 8000d40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d44:	f04f 0e00 	mov.w	lr, #0
 8000d48:	3c01      	subs	r4, #1
 8000d4a:	e690      	b.n	8000a6e <__aeabi_dmul+0xde>
 8000d4c:	ea45 0e06 	orr.w	lr, r5, r6
 8000d50:	e68d      	b.n	8000a6e <__aeabi_dmul+0xde>
 8000d52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d56:	ea94 0f0c 	teq	r4, ip
 8000d5a:	bf08      	it	eq
 8000d5c:	ea95 0f0c 	teqeq	r5, ip
 8000d60:	f43f af3b 	beq.w	8000bda <__aeabi_dmul+0x24a>
 8000d64:	ea94 0f0c 	teq	r4, ip
 8000d68:	d10a      	bne.n	8000d80 <__aeabi_ddiv+0x19c>
 8000d6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d6e:	f47f af34 	bne.w	8000bda <__aeabi_dmul+0x24a>
 8000d72:	ea95 0f0c 	teq	r5, ip
 8000d76:	f47f af25 	bne.w	8000bc4 <__aeabi_dmul+0x234>
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	e72c      	b.n	8000bda <__aeabi_dmul+0x24a>
 8000d80:	ea95 0f0c 	teq	r5, ip
 8000d84:	d106      	bne.n	8000d94 <__aeabi_ddiv+0x1b0>
 8000d86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d8a:	f43f aefd 	beq.w	8000b88 <__aeabi_dmul+0x1f8>
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	e722      	b.n	8000bda <__aeabi_dmul+0x24a>
 8000d94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d98:	bf18      	it	ne
 8000d9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d9e:	f47f aec5 	bne.w	8000b2c <__aeabi_dmul+0x19c>
 8000da2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000da6:	f47f af0d 	bne.w	8000bc4 <__aeabi_dmul+0x234>
 8000daa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000dae:	f47f aeeb 	bne.w	8000b88 <__aeabi_dmul+0x1f8>
 8000db2:	e712      	b.n	8000bda <__aeabi_dmul+0x24a>

08000db4 <__gedf2>:
 8000db4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000db8:	e006      	b.n	8000dc8 <__cmpdf2+0x4>
 8000dba:	bf00      	nop

08000dbc <__ledf2>:
 8000dbc:	f04f 0c01 	mov.w	ip, #1
 8000dc0:	e002      	b.n	8000dc8 <__cmpdf2+0x4>
 8000dc2:	bf00      	nop

08000dc4 <__cmpdf2>:
 8000dc4:	f04f 0c01 	mov.w	ip, #1
 8000dc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000dcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000dde:	d01b      	beq.n	8000e18 <__cmpdf2+0x54>
 8000de0:	b001      	add	sp, #4
 8000de2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000de6:	bf0c      	ite	eq
 8000de8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000dec:	ea91 0f03 	teqne	r1, r3
 8000df0:	bf02      	ittt	eq
 8000df2:	ea90 0f02 	teqeq	r0, r2
 8000df6:	2000      	moveq	r0, #0
 8000df8:	4770      	bxeq	lr
 8000dfa:	f110 0f00 	cmn.w	r0, #0
 8000dfe:	ea91 0f03 	teq	r1, r3
 8000e02:	bf58      	it	pl
 8000e04:	4299      	cmppl	r1, r3
 8000e06:	bf08      	it	eq
 8000e08:	4290      	cmpeq	r0, r2
 8000e0a:	bf2c      	ite	cs
 8000e0c:	17d8      	asrcs	r0, r3, #31
 8000e0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e12:	f040 0001 	orr.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e20:	d102      	bne.n	8000e28 <__cmpdf2+0x64>
 8000e22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e26:	d107      	bne.n	8000e38 <__cmpdf2+0x74>
 8000e28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e30:	d1d6      	bne.n	8000de0 <__cmpdf2+0x1c>
 8000e32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e36:	d0d3      	beq.n	8000de0 <__cmpdf2+0x1c>
 8000e38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <__aeabi_cdrcmple>:
 8000e40:	4684      	mov	ip, r0
 8000e42:	4610      	mov	r0, r2
 8000e44:	4662      	mov	r2, ip
 8000e46:	468c      	mov	ip, r1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	e000      	b.n	8000e50 <__aeabi_cdcmpeq>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_cdcmpeq>:
 8000e50:	b501      	push	{r0, lr}
 8000e52:	f7ff ffb7 	bl	8000dc4 <__cmpdf2>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	bf48      	it	mi
 8000e5a:	f110 0f00 	cmnmi.w	r0, #0
 8000e5e:	bd01      	pop	{r0, pc}

08000e60 <__aeabi_dcmpeq>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff fff4 	bl	8000e50 <__aeabi_cdcmpeq>
 8000e68:	bf0c      	ite	eq
 8000e6a:	2001      	moveq	r0, #1
 8000e6c:	2000      	movne	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_dcmplt>:
 8000e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e78:	f7ff ffea 	bl	8000e50 <__aeabi_cdcmpeq>
 8000e7c:	bf34      	ite	cc
 8000e7e:	2001      	movcc	r0, #1
 8000e80:	2000      	movcs	r0, #0
 8000e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e86:	bf00      	nop

08000e88 <__aeabi_dcmple>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff ffe0 	bl	8000e50 <__aeabi_cdcmpeq>
 8000e90:	bf94      	ite	ls
 8000e92:	2001      	movls	r0, #1
 8000e94:	2000      	movhi	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_dcmpge>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffce 	bl	8000e40 <__aeabi_cdrcmple>
 8000ea4:	bf94      	ite	ls
 8000ea6:	2001      	movls	r0, #1
 8000ea8:	2000      	movhi	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_dcmpgt>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffc4 	bl	8000e40 <__aeabi_cdrcmple>
 8000eb8:	bf34      	ite	cc
 8000eba:	2001      	movcc	r0, #1
 8000ebc:	2000      	movcs	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_dcmpun>:
 8000ec4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ecc:	d102      	bne.n	8000ed4 <__aeabi_dcmpun+0x10>
 8000ece:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ed2:	d10a      	bne.n	8000eea <__aeabi_dcmpun+0x26>
 8000ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000edc:	d102      	bne.n	8000ee4 <__aeabi_dcmpun+0x20>
 8000ede:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ee2:	d102      	bne.n	8000eea <__aeabi_dcmpun+0x26>
 8000ee4:	f04f 0000 	mov.w	r0, #0
 8000ee8:	4770      	bx	lr
 8000eea:	f04f 0001 	mov.w	r0, #1
 8000eee:	4770      	bx	lr

08000ef0 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8000ef0:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000ef2:	b9d8      	cbnz	r0, 8000f2c <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8000ef4:	a801      	add	r0, sp, #4
 8000ef6:	f000 fb3b 	bl	8001570 <fetch_uint32_arg>
  if(rc) {
 8000efa:	b128      	cbz	r0, 8000f08 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <CmdLed+0x40>)
 8000efe:	f003 f9e3 	bl	80042c8 <puts>
    return CmdReturnBadParameter1;
 8000f02:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8000f04:	b002      	add	sp, #8
 8000f06:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8000f08:	9901      	ldr	r1, [sp, #4]
 8000f0a:	480a      	ldr	r0, [pc, #40]	; (8000f34 <CmdLed+0x44>)
 8000f0c:	f003 f940 	bl	8004190 <iprintf>
  val = val ? 1 : 0;
 8000f10:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <CmdLed+0x48>)
  val = val ? 1 : 0;
 8000f14:	3b00      	subs	r3, #0
 8000f16:	bf18      	it	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8000f1c:	f003 f9d4 	bl	80042c8 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8000f20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <CmdLed+0x4c>)
 8000f26:	2120      	movs	r1, #32
 8000f28:	f001 ffb2 	bl	8002e90 <HAL_GPIO_WritePin>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	e7e9      	b.n	8000f04 <CmdLed+0x14>
 8000f30:	08006a20 	.word	0x08006a20
 8000f34:	08006a4e 	.word	0x08006a4e
 8000f38:	08006a6a 	.word	0x08006a6a
 8000f3c:	40020000 	.word	0x40020000

08000f40 <my_init>:
{
 8000f40:	b508      	push	{r3, lr}
  TerminalInit();
 8000f42:	f000 fc2b 	bl	800179c <TerminalInit>
  WDTCheckReset();
 8000f46:	f000 fe15 	bl	8001b74 <WDTCheckReset>
  TaskingInit();
 8000f4a:	f000 fe7f 	bl	8001c4c <TaskingInit>
}
 8000f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  my_Init();
 8000f52:	f7ff b95b 	b.w	800020c <my_Init>

08000f56 <my_main>:
{
 8000f56:	b508      	push	{r3, lr}
  TaskingRun();  /* Run all registered tasks */
 8000f58:	f000 fe96 	bl	8001c88 <TaskingRun>
  my_Loop();
 8000f5c:	f7ff f954 	bl	8000208 <my_Loop>
}
 8000f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WDTFeed();
 8000f64:	f000 be4a 	b.w	8001bfc <WDTFeed>

08000f68 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f68:	2801      	cmp	r0, #1
{
 8000f6a:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8000f6c:	d004      	beq.n	8000f78 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8000f6e:	2802      	cmp	r0, #2
 8000f70:	d104      	bne.n	8000f7c <CmdTest+0x14>
    printf("testasm\n\n"
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <CmdTest+0x24>)
 8000f74:	f003 f9a8 	bl	80042c8 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8000f78:	2000      	movs	r0, #0
 8000f7a:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8000f7c:	204d      	movs	r0, #77	; 0x4d
 8000f7e:	f7ff f92f 	bl	80001e0 <mytest>
 8000f82:	4601      	mov	r1, r0
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <CmdTest+0x28>)
 8000f86:	f003 f903 	bl	8004190 <iprintf>
  return CmdReturnOk;
 8000f8a:	e7f5      	b.n	8000f78 <CmdTest+0x10>
 8000f8c:	08006a96 	.word	0x08006a96
 8000f90:	08006acf 	.word	0x08006acf

08000f94 <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <USR_LED_Toggle+0x10>)
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200003a0 	.word	0x200003a0

08000fa8 <printProgress>:
/**
  * @brief Prints graph on the console.
  * @param void
  * @retval void 
  */
void printProgress(double percentage) {
 8000fa8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 8000faa:	ec57 6b10 	vmov	r6, r7, d0
    int val = (int) (percentage);
    int lpad = (int) (percentage * PBWIDTH);
 8000fae:	ee10 0a10 	vmov	r0, s0
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <printProgress+0x48>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4639      	mov	r1, r7
 8000fb8:	f7ff fcea 	bl	8000990 <__aeabi_dmul>
 8000fbc:	f7ff fae6 	bl	800058c <__aeabi_d2iz>
    int val = (int) (percentage);
 8000fc0:	4639      	mov	r1, r7
    int lpad = (int) (percentage * PBWIDTH);
 8000fc2:	4604      	mov	r4, r0
    int val = (int) (percentage);
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	f7ff fae1 	bl	800058c <__aeabi_d2iz>
    int rpad = PBWIDTH - lpad;
    printf("\r%3d%% [%.*s%*s]", val, lpad, PBSTR, rpad, "");
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <printProgress+0x4c>)
 8000fcc:	9301      	str	r3, [sp, #4]
    int rpad = PBWIDTH - lpad;
 8000fce:	f1c4 0306 	rsb	r3, r4, #6
    int val = (int) (percentage);
 8000fd2:	4601      	mov	r1, r0
    printf("\r%3d%% [%.*s%*s]", val, lpad, PBSTR, rpad, "");
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <printProgress+0x50>)
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <printProgress+0x54>)
 8000fdc:	f003 f8d8 	bl	8004190 <iprintf>
    fflush(stdout);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <printProgress+0x58>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6898      	ldr	r0, [r3, #8]
}
 8000fe6:	b002      	add	sp, #8
 8000fe8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    fflush(stdout);
 8000fec:	f002 ba88 	b.w	8003500 <fflush>
 8000ff0:	40180000 	.word	0x40180000
 8000ff4:	08008df2 	.word	0x08008df2
 8000ff8:	08006af3 	.word	0x08006af3
 8000ffc:	08006afa 	.word	0x08006afa
 8001000:	200001b0 	.word	0x200001b0

08001004 <ADCInit>:
/**
  * @brief initialize the adc pins.
  * @param int channel
  * @retval void 
  */
void ADCInit(){
 8001004:	b530      	push	{r4, r5, lr}
 8001006:	b089      	sub	sp, #36	; 0x24
  HAL_StatusTypeDef rc;
 
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	2400      	movs	r4, #0
 800100a:	4d1f      	ldr	r5, [pc, #124]	; (8001088 <ADCInit+0x84>)
 800100c:	9401      	str	r4, [sp, #4]
 800100e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 GPIO_InitStruct.Pin = (GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2);
 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 GPIO_InitStruct.Alternate = 0;
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	481e      	ldr	r0, [pc, #120]	; (800108c <ADCInit+0x88>)
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	632b      	str	r3, [r5, #48]	; 0x30
 8001018:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	9405      	str	r4, [sp, #20]
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	9301      	str	r3, [sp, #4]
 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2207      	movs	r2, #7
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	9b01      	ldr	r3, [sp, #4]
 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	e9cd 2303 	strd	r2, r3, [sp, #12]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102e:	2302      	movs	r3, #2
 GPIO_InitStruct.Alternate = 0;
 8001030:	e9cd 3406 	strd	r3, r4, [sp, #24]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f001 fe64 	bl	8002d00 <HAL_GPIO_Init>

 /* Initialize ADC */
 __HAL_RCC_ADC1_CLK_ENABLE();
 8001038:	9402      	str	r4, [sp, #8]
 800103a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 hdac1.Instance = ADC1;
 800103c:	4814      	ldr	r0, [pc, #80]	; (8001090 <ADCInit+0x8c>)
 hdac1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103e:	4915      	ldr	r1, [pc, #84]	; (8001094 <ADCInit+0x90>)
 __HAL_RCC_ADC1_CLK_ENABLE();
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	646b      	str	r3, [r5, #68]	; 0x44
 8001046:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 hdac1.Init.Resolution = ADC_RESOLUTION_12B;
 8001048:	6084      	str	r4, [r0, #8]
 __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	9b02      	ldr	r3, [sp, #8]
 hdac1.Init.ScanConvMode = DISABLE;
 8001052:	6104      	str	r4, [r0, #16]
 hdac1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001058:	e9c0 1300 	strd	r1, r3, [r0]
 hdac1.Init.ContinuousConvMode = DISABLE;
 hdac1.Init.DiscontinuousConvMode = DISABLE;
 hdac1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 hdac1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <ADCInit+0x94>)
 800105e:	6283      	str	r3, [r0, #40]	; 0x28
 hdac1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 hdac1.Init.NbrOfConversion = 1;
 8001060:	2301      	movs	r3, #1
 hdac1.Init.ContinuousConvMode = DISABLE;
 8001062:	7604      	strb	r4, [r0, #24]
 hdac1.Init.DiscontinuousConvMode = DISABLE;
 8001064:	f880 4020 	strb.w	r4, [r0, #32]
 hdac1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	62c4      	str	r4, [r0, #44]	; 0x2c
 hdac1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	60c4      	str	r4, [r0, #12]
 hdac1.Init.NbrOfConversion = 1;
 800106c:	61c3      	str	r3, [r0, #28]
 hdac1.Init.DMAContinuousRequests = DISABLE;
 800106e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
 hdac1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	6143      	str	r3, [r0, #20]
// hdac1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;

 /*return code if adc initialization fails*/ 
 rc = HAL_ADC_Init(&hdac1);
 8001074:	f001 ff40 	bl	8002ef8 <HAL_ADC_Init>
 if(rc != HAL_OK) 
 8001078:	4601      	mov	r1, r0
 800107a:	b110      	cbz	r0, 8001082 <ADCInit+0x7e>
 {
  printf("ADC1 initialization failed with rc=%u\n",rc);
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <ADCInit+0x98>)
 800107e:	f003 f887 	bl	8004190 <iprintf>
 }
}
 8001082:	b009      	add	sp, #36	; 0x24
 8001084:	bd30      	pop	{r4, r5, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40020800 	.word	0x40020800
 8001090:	200003a4 	.word	0x200003a4
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001
 800109c:	08006b0b 	.word	0x08006b0b

080010a0 <getReadingFromAdc>:
  * @param int channel
  * @retval reading of the selected adc channel, returns -1 if selected channel other then 10 or 11 are selected 
  */

 int getReadingFromAdc(int channel)
 {
 80010a0:	b530      	push	{r4, r5, lr}
  
  uint32_t val;
  HAL_StatusTypeDef rc;
  ADC_ChannelConfTypeDef adcChannelConfig;
 
  if(channel == 10){
 80010a2:	280a      	cmp	r0, #10
 {
 80010a4:	b085      	sub	sp, #20
  if(channel == 10){
 80010a6:	d10f      	bne.n	80010c8 <getReadingFromAdc+0x28>

  adcChannelConfig.Channel = ADC_CHANNEL_10;

  } else if (channel == 11) {
  
  adcChannelConfig.Channel = ADC_CHANNEL_11;
 80010a8:	9000      	str	r0, [sp, #0]

  } else {
    return -1;
  }
    
  adcChannelConfig.Rank = 1;     
 80010aa:	2301      	movs	r3, #1
  adcChannelConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;

  //checking and logging if config falied to apply and returning.
  rc = HAL_ADC_ConfigChannel(&hdac1,&adcChannelConfig);
 80010ac:	4818      	ldr	r0, [pc, #96]	; (8001110 <getReadingFromAdc+0x70>)
 80010ae:	4669      	mov	r1, sp
  adcChannelConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80010b0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  rc = HAL_ADC_ConfigChannel(&hdac1,&adcChannelConfig);
 80010b4:	f002 f8ae 	bl	8003214 <HAL_ADC_ConfigChannel>
  if(rc != HAL_OK) {
 80010b8:	b158      	cbz	r0, 80010d2 <getReadingFromAdc+0x32>
  printf("ADC : channel configuration failed. returned: %u\n",(unsigned)rc);
 80010ba:	4601      	mov	r1, r0
 80010bc:	4815      	ldr	r0, [pc, #84]	; (8001114 <getReadingFromAdc+0x74>)
 80010be:	f003 f867 	bl	8004190 <iprintf>
  return 0;
 80010c2:	2000      	movs	r0, #0
  {
   printf("ADC: Couldn't stop adc. returned: %u\n",(unsigned)rc);
   return 0;
  }
  return val;
 }
 80010c4:	b005      	add	sp, #20
 80010c6:	bd30      	pop	{r4, r5, pc}
  } else if (channel == 11) {
 80010c8:	280b      	cmp	r0, #11
 80010ca:	d0ed      	beq.n	80010a8 <getReadingFromAdc+0x8>
    return -1;
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d0:	e7f8      	b.n	80010c4 <getReadingFromAdc+0x24>
  rc = HAL_ADC_Start(&hdac1);
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <getReadingFromAdc+0x70>)
 80010d4:	f001 ffb6 	bl	8003044 <HAL_ADC_Start>
  if(rc != HAL_OK) {
 80010d8:	4604      	mov	r4, r0
 80010da:	b110      	cbz	r0, 80010e2 <getReadingFromAdc+0x42>
  printf("ADC : Init failed. returned : %u\n",(unsigned)rc);
 80010dc:	4601      	mov	r1, r0
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <getReadingFromAdc+0x78>)
 80010e0:	e7ed      	b.n	80010be <getReadingFromAdc+0x1e>
  rc = HAL_ADC_PollForConversion(&hdac1, 100);
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <getReadingFromAdc+0x70>)
 80010e4:	2164      	movs	r1, #100	; 0x64
 80010e6:	f002 f83e 	bl	8003166 <HAL_ADC_PollForConversion>
  if(rc != HAL_OK) {
 80010ea:	b128      	cbz	r0, 80010f8 <getReadingFromAdc+0x58>
  printf("ADC : poll for conversion failed. returned: %u\n",(unsigned)rc);
 80010ec:	4601      	mov	r1, r0
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <getReadingFromAdc+0x7c>)
 80010f0:	f003 f84e 	bl	8004190 <iprintf>
  return val;
 80010f4:	4620      	mov	r0, r4
 80010f6:	e7e5      	b.n	80010c4 <getReadingFromAdc+0x24>
  val = HAL_ADC_GetValue(&hdac1);
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <getReadingFromAdc+0x70>)
 80010fa:	f002 f887 	bl	800320c <HAL_ADC_GetValue>
 80010fe:	4604      	mov	r4, r0
  rc = HAL_ADC_Stop(&hdac1);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <getReadingFromAdc+0x70>)
 8001102:	f002 f815 	bl	8003130 <HAL_ADC_Stop>
  if(rc != HAL_OK) 
 8001106:	4601      	mov	r1, r0
 8001108:	2800      	cmp	r0, #0
 800110a:	d0f3      	beq.n	80010f4 <getReadingFromAdc+0x54>
   printf("ADC: Couldn't stop adc. returned: %u\n",(unsigned)rc);
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <getReadingFromAdc+0x80>)
 800110e:	e7d6      	b.n	80010be <getReadingFromAdc+0x1e>
 8001110:	200003a4 	.word	0x200003a4
 8001114:	08006b32 	.word	0x08006b32
 8001118:	08006b64 	.word	0x08006b64
 800111c:	08006b86 	.word	0x08006b86
 8001120:	08006bb6 	.word	0x08006bb6
 8001124:	00000000 	.word	0x00000000

08001128 <AdcEvent>:
  * @param int mode of the event, does it require interaction?
  * @retval ParserReturnVal_t enum. 
  */

ParserReturnVal_t AdcEvent(int mode)
{
 8001128:	b530      	push	{r4, r5, lr}
 800112a:	b085      	sub	sp, #20
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800112c:	bb58      	cbnz	r0, 8001186 <AdcEvent+0x5e>
  uint32_t channel;
  uint32_t rc1;
  uint32_t rawAdcValue;
  double voltage;
 
  rc1=fetch_uint32_arg(&channel);
 800112e:	a803      	add	r0, sp, #12
 8001130:	f000 fa1e 	bl	8001570 <fetch_uint32_arg>
  if(rc1)
 8001134:	b128      	cbz	r0, 8001142 <AdcEvent+0x1a>
  {
    printf("ADC channel not provided.\n");
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <AdcEvent+0x70>)
 8001138:	f003 f8c6 	bl	80042c8 <puts>
    return CmdReturnBadParameter1;
 800113c:	2004      	movs	r0, #4
  

   

  return CmdReturnOk;
}
 800113e:	b005      	add	sp, #20
 8001140:	bd30      	pop	{r4, r5, pc}
 ADCInit();
 8001142:	f7ff ff5f 	bl	8001004 <ADCInit>
      rawAdcValue = getReadingFromAdc(channel);
 8001146:	9803      	ldr	r0, [sp, #12]
 8001148:	f7ff ffaa 	bl	80010a0 <getReadingFromAdc>
 800114c:	4605      	mov	r5, r0
      voltage = ((3.3*rawAdcValue)/4096);
 800114e:	f7ff f9a3 	bl	8000498 <__aeabi_ui2d>
 8001152:	a30f      	add	r3, pc, #60	; (adr r3, 8001190 <AdcEvent+0x68>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fc1a 	bl	8000990 <__aeabi_dmul>
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <AdcEvent+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	f7ff fc16 	bl	8000990 <__aeabi_dmul>
      printf("ADC : %ld Voltage : %f\r\n", rawAdcValue, voltage);
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9cd 0100 	strd	r0, r1, [sp]
 800116c:	4629      	mov	r1, r5
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <AdcEvent+0x78>)
 8001170:	f003 f80e 	bl	8004190 <iprintf>
      printProgress(voltage);
 8001174:	ed9d 0b00 	vldr	d0, [sp]
 8001178:	f7ff ff16 	bl	8000fa8 <printProgress>
      printf("\n");
 800117c:	200a      	movs	r0, #10
 800117e:	f003 f81f 	bl	80041c0 <putchar>
      WDTFeed(); 
 8001182:	f000 fd3b 	bl	8001bfc <WDTFeed>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001186:	2000      	movs	r0, #0
 8001188:	e7d9      	b.n	800113e <AdcEvent+0x16>
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	66666666 	.word	0x66666666
 8001194:	400a6666 	.word	0x400a6666
 8001198:	08006bdc 	.word	0x08006bdc
 800119c:	3f300000 	.word	0x3f300000
 80011a0:	08006bf6 	.word	0x08006bf6

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c0:	4c0b      	ldr	r4, [pc, #44]	; (80011f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ce:	f001 f9b1 	bl	8002534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f002 fa9d 	bl	8003710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f001 f8bb 	bl	8002350 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 80011e8:	08012c50 	.word	0x08012c50
  ldr r2, =_sbss
 80011ec:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 80011f0:	20000d54 	.word	0x20000d54

080011f4 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 80011f4:	f000 fd7c 	bl	8001cf0 <Default_IRQHandler>
  b  Infinite_Loop
 80011f8:	e7fc      	b.n	80011f4 <ADC_IRQHandler>
	...

080011fc <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80011fc:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <_sbrk_r+0x28>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	b90a      	cbnz	r2, 8001208 <_sbrk_r+0xc>
    heap_end = &end;
 8001204:	4a08      	ldr	r2, [pc, #32]	; (8001228 <_sbrk_r+0x2c>)
 8001206:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8001208:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 800120a:	466a      	mov	r2, sp
 800120c:	4401      	add	r1, r0
 800120e:	4291      	cmp	r1, r2
 8001210:	d906      	bls.n	8001220 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8001212:	f002 f8ad 	bl	8003370 <__errno>
 8001216:	230c      	movs	r3, #12
 8001218:	6003      	str	r3, [r0, #0]
      return (caddr_t) -1;
 800121a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 800121e:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8001220:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8001222:	e7fc      	b.n	800121e <_sbrk_r+0x22>
 8001224:	200003ec 	.word	0x200003ec
 8001228:	20000d58 	.word	0x20000d58

0800122c <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 800122c:	2000      	movs	r0, #0
 800122e:	4770      	bx	lr

08001230 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	6053      	str	r3, [r2, #4]
   return 0;
}
 8001236:	2000      	movs	r0, #0
 8001238:	4770      	bx	lr

0800123a <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800123a:	2001      	movs	r0, #1
 800123c:	4770      	bx	lr

0800123e <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 800123e:	2000      	movs	r0, #0
 8001240:	4770      	bx	lr

08001242 <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8001242:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8001244:	2000      	movs	r0, #0
 8001246:	461a      	mov	r2, r3
 8001248:	f000 bace 	b.w	80017e8 <TerminalRead>

0800124c <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 800124c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8001250:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001288 <_write_r+0x3c>
{
 8001254:	461d      	mov	r5, r3
 8001256:	4614      	mov	r4, r2
 8001258:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 800125a:	42bc      	cmp	r4, r7
 800125c:	4626      	mov	r6, r4
 800125e:	d102      	bne.n	8001266 <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8001260:	4628      	mov	r0, r5
 8001262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8001266:	7833      	ldrb	r3, [r6, #0]
 8001268:	2b0a      	cmp	r3, #10
 800126a:	f104 0401 	add.w	r4, r4, #1
 800126e:	d104      	bne.n	800127a <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8001270:	2201      	movs	r2, #1
 8001272:	4641      	mov	r1, r8
 8001274:	2000      	movs	r0, #0
 8001276:	f000 fb0d 	bl	8001894 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 800127a:	2201      	movs	r2, #1
 800127c:	4631      	mov	r1, r6
 800127e:	2000      	movs	r0, #0
 8001280:	f000 fb08 	bl	8001894 <TerminalOutputBufferWrite>
    count--;
 8001284:	e7e9      	b.n	800125a <_write_r+0xe>
 8001286:	bf00      	nop
 8001288:	080075df 	.word	0x080075df

0800128c <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001290:	4770      	bx	lr

08001292 <_exit>:

void _exit(int status)
{
  while(1) {}
 8001292:	e7fe      	b.n	8001292 <_exit>

08001294 <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8001294:	2000      	movs	r0, #0
 8001296:	4770      	bx	lr

08001298 <CmdW>:
  return CmdReturnOk;
}


ParserReturnVal_t CmdW(int mode)
{
 8001298:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800129a:	b940      	cbnz	r0, 80012ae <CmdW+0x16>

  fetch_uint32_arg(&addr);
 800129c:	4668      	mov	r0, sp
 800129e:	f000 f967 	bl	8001570 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80012a2:	a801      	add	r0, sp, #4
 80012a4:	f000 f964 	bl	8001570 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80012a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80012ac:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 80012ae:	2000      	movs	r0, #0
 80012b0:	b003      	add	sp, #12
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080012b8 <CmdR>:
{
 80012b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80012bc:	4604      	mov	r4, r0
 80012be:	b9f0      	cbnz	r0, 80012fe <CmdR+0x46>
  fetch_uint32_arg(&addr);
 80012c0:	a801      	add	r0, sp, #4
 80012c2:	f000 f955 	bl	8001570 <fetch_uint32_arg>
  data = *((uint32_t *)addr);
 80012c6:	9901      	ldr	r1, [sp, #4]
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 80012ca:	680d      	ldr	r5, [r1, #0]
    printf("%s%c",
 80012cc:	4e12      	ldr	r6, [pc, #72]	; (8001318 <CmdR+0x60>)
 80012ce:	4f13      	ldr	r7, [pc, #76]	; (800131c <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80012d0:	462a      	mov	r2, r5
 80012d2:	f002 ff5d 	bl	8004190 <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <CmdR+0x68>)
 80012d8:	f002 ff5a 	bl	8004190 <iprintf>
    printf("%s%c",
 80012dc:	4911      	ldr	r1, [pc, #68]	; (8001324 <CmdR+0x6c>)
 80012de:	4688      	mov	r8, r1
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	bfb4      	ite	lt
 80012e4:	2231      	movlt	r2, #49	; 0x31
 80012e6:	2230      	movge	r2, #48	; 0x30
 80012e8:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 80012ea:	3401      	adds	r4, #1
    printf("%s%c",
 80012ec:	f002 ff50 	bl	8004190 <iprintf>
  for(i=0; i<32; i++) {
 80012f0:	2c20      	cmp	r4, #32
    data <<= 1;
 80012f2:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 80012f6:	d106      	bne.n	8001306 <CmdR+0x4e>
  printf("\n");
 80012f8:	200a      	movs	r0, #10
 80012fa:	f002 ff61 	bl	80041c0 <putchar>
}
 80012fe:	2000      	movs	r0, #0
 8001300:	b002      	add	sp, #8
 8001302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 8001306:	f014 0f03 	tst.w	r4, #3
 800130a:	bf14      	ite	ne
 800130c:	4639      	movne	r1, r7
 800130e:	4641      	moveq	r1, r8
 8001310:	e7e6      	b.n	80012e0 <CmdR+0x28>
 8001312:	bf00      	nop
 8001314:	08011864 	.word	0x08011864
 8001318:	0801191e 	.word	0x0801191e
 800131c:	08008df2 	.word	0x08008df2
 8001320:	08011876 	.word	0x08011876
 8001324:	0800909b 	.word	0x0800909b

08001328 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
{
 8001328:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800132a:	4614      	mov	r4, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 800132c:	b928      	cbnz	r0, 800133a <parse+0x12>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 800132e:	4936      	ldr	r1, [pc, #216]	; (8001408 <parse+0xe0>)
 8001330:	4836      	ldr	r0, [pc, #216]	; (800140c <parse+0xe4>)
    return CmdReturnParserFailure;
  }

  if(len==0) {
    printf("len == 0 in %s\n",__FUNCTION__);
 8001332:	f002 ff2d 	bl	8004190 <iprintf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return CmdReturnParserFailure;
 8001336:	2003      	movs	r0, #3
 8001338:	e033      	b.n	80013a2 <parse+0x7a>
  if(len==0) {
 800133a:	b911      	cbnz	r1, 8001342 <parse+0x1a>
    printf("len == 0 in %s\n",__FUNCTION__);
 800133c:	4932      	ldr	r1, [pc, #200]	; (8001408 <parse+0xe0>)
 800133e:	4834      	ldr	r0, [pc, #208]	; (8001410 <parse+0xe8>)
 8001340:	e7f7      	b.n	8001332 <parse+0xa>
  if(table == NULL) {
 8001342:	b182      	cbz	r2, 8001366 <parse+0x3e>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001344:	4d33      	ldr	r5, [pc, #204]	; (8001414 <parse+0xec>)
 8001346:	3901      	subs	r1, #1
 8001348:	4603      	mov	r3, r0
 800134a:	1c4e      	adds	r6, r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001352:	d00d      	beq.n	8001370 <parse+0x48>
 8001354:	2a00      	cmp	r2, #0
 8001356:	d0ee      	beq.n	8001336 <parse+0xe>
 8001358:	5d52      	ldrb	r2, [r2, r5]
 800135a:	0712      	lsls	r2, r2, #28
 800135c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8001360:	d404      	bmi.n	800136c <parse+0x44>
  if((i==0) || (*buf==0)) {
 8001362:	b939      	cbnz	r1, 8001374 <parse+0x4c>
 8001364:	e7e7      	b.n	8001336 <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8001366:	4928      	ldr	r1, [pc, #160]	; (8001408 <parse+0xe0>)
 8001368:	482b      	ldr	r0, [pc, #172]	; (8001418 <parse+0xf0>)
 800136a:	e7e2      	b.n	8001332 <parse+0xa>
 800136c:	4631      	mov	r1, r6
 800136e:	e7ec      	b.n	800134a <parse+0x22>
  if((i==0) || (*buf==0)) {
 8001370:	2a00      	cmp	r2, #0
 8001372:	d0e0      	beq.n	8001336 <parse+0xe>
  }
	
  p = strtok(buf,SEPS);
 8001374:	4929      	ldr	r1, [pc, #164]	; (800141c <parse+0xf4>)
 8001376:	f003 f8db 	bl	8004530 <strtok>
  if(p==NULL) {
 800137a:	4605      	mov	r5, r0
 800137c:	b910      	cbnz	r0, 8001384 <parse+0x5c>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 800137e:	4922      	ldr	r1, [pc, #136]	; (8001408 <parse+0xe0>)
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <parse+0xf8>)
 8001382:	e7d6      	b.n	8001332 <parse+0xa>
    return CmdReturnParserFailure;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8001384:	4927      	ldr	r1, [pc, #156]	; (8001424 <parse+0xfc>)
 8001386:	f003 f8b1 	bl	80044ec <strcasecmp>
 800138a:	b9c8      	cbnz	r0, 80013c0 <parse+0x98>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 800138c:	4923      	ldr	r1, [pc, #140]	; (800141c <parse+0xf4>)
 800138e:	f003 f8cf 	bl	8004530 <strtok>
    if(p == NULL) {
 8001392:	4605      	mov	r5, r0
 8001394:	bb20      	cbnz	r0, 80013e0 <parse+0xb8>
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
	if(t->help != NULL) {
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001396:	4d24      	ldr	r5, [pc, #144]	; (8001428 <parse+0x100>)
 8001398:	340c      	adds	r4, #12
      for(t=table; t->cmdname!=NULL; t++) {
 800139a:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 800139e:	b911      	cbnz	r1, 80013a6 <parse+0x7e>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
	}
      }
      return 0;
 80013a0:	4608      	mov	r0, r1
    }
  }

  printf("Command '%s' not found. Type 'help' for online help\n",p);
  return CmdReturnNotFound;
}
 80013a2:	b002      	add	sp, #8
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
	if(t->help != NULL) {
 80013a6:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80013aa:	b122      	cbz	r2, 80013b6 <parse+0x8e>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80013ac:	4628      	mov	r0, r5
 80013ae:	f002 feef 	bl	8004190 <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 80013b2:	340c      	adds	r4, #12
 80013b4:	e7f1      	b.n	800139a <parse+0x72>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80013b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80013ba:	2001      	movs	r0, #1
 80013bc:	4798      	blx	r3
 80013be:	e7f8      	b.n	80013b2 <parse+0x8a>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80013c0:	2600      	movs	r6, #0
  cmdArgs = p + strlen(p) + 1;
 80013c2:	4628      	mov	r0, r5
 80013c4:	f7ff fa8c 	bl	80008e0 <strlen>
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <parse+0x104>)
 80013ca:	3001      	adds	r0, #1
 80013cc:	4428      	add	r0, r5
 80013ce:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 80013d0:	6821      	ldr	r1, [r4, #0]
 80013d2:	b939      	cbnz	r1, 80013e4 <parse+0xbc>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 80013d4:	4816      	ldr	r0, [pc, #88]	; (8001430 <parse+0x108>)
 80013d6:	4629      	mov	r1, r5
 80013d8:	f002 feda 	bl	8004190 <iprintf>
  return CmdReturnNotFound;
 80013dc:	2001      	movs	r0, #1
 80013de:	e7e0      	b.n	80013a2 <parse+0x7a>
      arg = CMD_LONG_HELP;
 80013e0:	2602      	movs	r6, #2
 80013e2:	e7ee      	b.n	80013c2 <parse+0x9a>
    if(strcasecmp(p,t->cmdname) == 0) {
 80013e4:	4628      	mov	r0, r5
 80013e6:	9101      	str	r1, [sp, #4]
 80013e8:	f003 f880 	bl	80044ec <strcasecmp>
 80013ec:	9901      	ldr	r1, [sp, #4]
 80013ee:	b948      	cbnz	r0, 8001404 <parse+0xdc>
      if(arg == CMD_LONG_HELP) {	
 80013f0:	b116      	cbz	r6, 80013f8 <parse+0xd0>
	printf("%s:\n",t->cmdname);
 80013f2:	4810      	ldr	r0, [pc, #64]	; (8001434 <parse+0x10c>)
 80013f4:	f002 fecc 	bl	8004190 <iprintf>
      return t->func(arg);
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	4630      	mov	r0, r6
}
 80013fc:	b002      	add	sp, #8
 80013fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return t->func(arg);
 8001402:	4718      	bx	r3
  for(t=table; t->cmdname!=NULL; t++) {
 8001404:	340c      	adds	r4, #12
 8001406:	e7e3      	b.n	80013d0 <parse+0xa8>
 8001408:	08011ad3 	.word	0x08011ad3
 800140c:	0801195e 	.word	0x0801195e
 8001410:	0801197f 	.word	0x0801197f
 8001414:	080126e8 	.word	0x080126e8
 8001418:	0801198f 	.word	0x0801198f
 800141c:	080119b2 	.word	0x080119b2
 8001420:	080119b9 	.word	0x080119b9
 8001424:	080119e9 	.word	0x080119e9
 8001428:	080119ee 	.word	0x080119ee
 800142c:	200003f0 	.word	0x200003f0
 8001430:	080119ff 	.word	0x080119ff
 8001434:	080119fa 	.word	0x080119fa

08001438 <TaskInput>:
{
 8001438:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(printPrompt) {
 800143a:	4d41      	ldr	r5, [pc, #260]	; (8001540 <TaskInput+0x108>)
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	b123      	cbz	r3, 800144a <TaskInput+0x12>
    printf("ARMON>");
 8001440:	4840      	ldr	r0, [pc, #256]	; (8001544 <TaskInput+0x10c>)
 8001442:	f002 fea5 	bl	8004190 <iprintf>
    printPrompt = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 800144a:	2201      	movs	r2, #1
 800144c:	f10d 0107 	add.w	r1, sp, #7
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f9c9 	bl	80017e8 <TerminalRead>
  if(rc) goto ProcessCharacter;
 8001456:	2800      	cmp	r0, #0
 8001458:	d04f      	beq.n	80014fa <TaskInput+0xc2>
  if(((c == 010) || (c == 0x7f)) && count) {
 800145a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d001      	beq.n	8001466 <TaskInput+0x2e>
 8001462:	2b7f      	cmp	r3, #127	; 0x7f
 8001464:	d115      	bne.n	8001492 <TaskInput+0x5a>
 8001466:	4c38      	ldr	r4, [pc, #224]	; (8001548 <TaskInput+0x110>)
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	b192      	cbz	r2, 8001492 <TaskInput+0x5a>
    printf("\010 \010"); /* Obliterate character */
 800146c:	4837      	ldr	r0, [pc, #220]	; (800154c <TaskInput+0x114>)
 800146e:	f002 fe8f 	bl	8004190 <iprintf>
    buf--;     /* Then remove it from the buffer */
 8001472:	4a37      	ldr	r2, [pc, #220]	; (8001550 <TaskInput+0x118>)
 8001474:	6813      	ldr	r3, [r2, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8001480:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001484:	f1a3 020d 	sub.w	r2, r3, #13
 8001488:	4253      	negs	r3, r2
 800148a:	4153      	adcs	r3, r2
 800148c:	4a31      	ldr	r2, [pc, #196]	; (8001554 <TaskInput+0x11c>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e033      	b.n	80014fa <TaskInput+0xc2>
  } else if(c == '!') { /* '!' repeats the last command */
 8001492:	2b21      	cmp	r3, #33	; 0x21
 8001494:	d125      	bne.n	80014e2 <TaskInput+0xaa>
    if(saved) {  /* But only if we have something saved */
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <TaskInput+0x120>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <TaskInput+0x48>
      strcpy(input,input_b);  /* Restore the command */
 800149e:	4c2f      	ldr	r4, [pc, #188]	; (800155c <TaskInput+0x124>)
 80014a0:	492f      	ldr	r1, [pc, #188]	; (8001560 <TaskInput+0x128>)
 80014a2:	4620      	mov	r0, r4
 80014a4:	f003 f83c 	bl	8004520 <strcpy>
      printf("%s",input);
 80014a8:	4621      	mov	r1, r4
 80014aa:	482e      	ldr	r0, [pc, #184]	; (8001564 <TaskInput+0x12c>)
 80014ac:	f002 fe70 	bl	8004190 <iprintf>
      count = strlen(input);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fa15 	bl	80008e0 <strlen>
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <TaskInput+0x110>)
 80014b8:	6018      	str	r0, [r3, #0]
      buf = input+count;
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <TaskInput+0x118>)
 80014bc:	4404      	add	r4, r0
 80014be:	601c      	str	r4, [r3, #0]
    parse(input, sizeof(input), _parsetable_start);
 80014c0:	4c26      	ldr	r4, [pc, #152]	; (800155c <TaskInput+0x124>)
    printf("\n");
 80014c2:	200a      	movs	r0, #10
 80014c4:	f002 fe7c 	bl	80041c0 <putchar>
    parse(input, sizeof(input), _parsetable_start);
 80014c8:	4a27      	ldr	r2, [pc, #156]	; (8001568 <TaskInput+0x130>)
 80014ca:	2150      	movs	r1, #80	; 0x50
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff ff2b 	bl	8001328 <parse>
    printPrompt = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	602b      	str	r3, [r5, #0]
    buf = input;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <TaskInput+0x118>)
 80014d8:	601c      	str	r4, [r3, #0]
    count = 0;
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <TaskInput+0x110>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e7ce      	b.n	8001480 <TaskInput+0x48>
  } else if(isprint((unsigned int)c)) {
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <TaskInput+0x134>)
 80014e4:	5c9a      	ldrb	r2, [r3, r2]
 80014e6:	f012 0f97 	tst.w	r2, #151	; 0x97
 80014ea:	d014      	beq.n	8001516 <TaskInput+0xde>
    if(count >= sizeof(input)) {
 80014ec:	4916      	ldr	r1, [pc, #88]	; (8001548 <TaskInput+0x110>)
 80014ee:	680a      	ldr	r2, [r1, #0]
 80014f0:	2a4f      	cmp	r2, #79	; 0x4f
 80014f2:	d904      	bls.n	80014fe <TaskInput+0xc6>
      printf("\x07"); /* Beep */
 80014f4:	2007      	movs	r0, #7
 80014f6:	f002 fe63 	bl	80041c0 <putchar>
}
 80014fa:	b003      	add	sp, #12
 80014fc:	bd30      	pop	{r4, r5, pc}
      *buf++ = c;
 80014fe:	4c14      	ldr	r4, [pc, #80]	; (8001550 <TaskInput+0x118>)
 8001500:	6820      	ldr	r0, [r4, #0]
 8001502:	7003      	strb	r3, [r0, #0]
 8001504:	1c45      	adds	r5, r0, #1
      count++;
 8001506:	3201      	adds	r2, #1
      printf("%c",c);
 8001508:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 800150c:	6025      	str	r5, [r4, #0]
      count++;
 800150e:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8001510:	f002 fe56 	bl	80041c0 <putchar>
 8001514:	e7b4      	b.n	8001480 <TaskInput+0x48>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 8001516:	2b0d      	cmp	r3, #13
 8001518:	d005      	beq.n	8001526 <TaskInput+0xee>
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d1b0      	bne.n	8001480 <TaskInput+0x48>
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <TaskInput+0x11c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ac      	bne.n	8001480 <TaskInput+0x48>
    *buf = '\0';
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <TaskInput+0x118>)
    strcpy(input_b,input);
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <TaskInput+0x124>)
    *buf = '\0';
 800152a:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <TaskInput+0x128>)
    *buf = '\0';
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8001532:	f002 fff5 	bl	8004520 <strcpy>
    saved = 1;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <TaskInput+0x120>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e7c0      	b.n	80014c0 <TaskInput+0x88>
 800153e:	bf00      	nop
 8001540:	2000019c 	.word	0x2000019c
 8001544:	08011a34 	.word	0x08011a34
 8001548:	200003f4 	.word	0x200003f4
 800154c:	08011a3b 	.word	0x08011a3b
 8001550:	20000198 	.word	0x20000198
 8001554:	200003f8 	.word	0x200003f8
 8001558:	2000049c 	.word	0x2000049c
 800155c:	200003fc 	.word	0x200003fc
 8001560:	2000044c 	.word	0x2000044c
 8001564:	080121a0 	.word	0x080121a0
 8001568:	08012b98 	.word	0x08012b98
 800156c:	080126e8 	.word	0x080126e8

08001570 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8001570:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001572:	490c      	ldr	r1, [pc, #48]	; (80015a4 <fetch_uint32_arg+0x34>)
{
 8001574:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001576:	2000      	movs	r0, #0
 8001578:	f002 ffda 	bl	8004530 <strtok>
  if(p == NULL) {
 800157c:	4604      	mov	r4, r0
 800157e:	b168      	cbz	r0, 800159c <fetch_uint32_arg+0x2c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001580:	2200      	movs	r2, #0
 8001582:	4611      	mov	r1, r2
 8001584:	f003 f8a2 	bl	80046cc <strtoul>
 8001588:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff f9a8 	bl	80008e0 <strlen>
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <fetch_uint32_arg+0x38>)
 8001592:	3001      	adds	r0, #1
 8001594:	4404      	add	r4, r0
 8001596:	601c      	str	r4, [r3, #0]
  return 0;
 8001598:	2000      	movs	r0, #0
}
 800159a:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a0:	e7fb      	b.n	800159a <fetch_uint32_arg+0x2a>
 80015a2:	bf00      	nop
 80015a4:	080119b2 	.word	0x080119b2
 80015a8:	200003f0 	.word	0x200003f0

080015ac <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80015ac:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80015ae:	4909      	ldr	r1, [pc, #36]	; (80015d4 <fetch_string_arg+0x28>)
{
 80015b0:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f002 ffbc 	bl	8004530 <strtok>
  if(p == NULL) {
 80015b8:	4604      	mov	r4, r0
 80015ba:	b140      	cbz	r0, 80015ce <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80015bc:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 80015be:	f7ff f98f 	bl	80008e0 <strlen>
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <fetch_string_arg+0x2c>)
 80015c4:	3001      	adds	r0, #1
 80015c6:	4404      	add	r4, r0
 80015c8:	601c      	str	r4, [r3, #0]
  return 0;
 80015ca:	2000      	movs	r0, #0
}
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d2:	e7fb      	b.n	80015cc <fetch_string_arg+0x20>
 80015d4:	080119b2 	.word	0x080119b2
 80015d8:	200003f0 	.word	0x200003f0

080015dc <fetch_cmd_args>:

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <fetch_cmd_args+0xc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6003      	str	r3, [r0, #0]
  return 0;
}
 80015e2:	2000      	movs	r0, #0
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200003f0 	.word	0x200003f0

080015ec <DumpBuffer>:
#define BYTES_PER_LINE        16
#define BYTES_PER_BINARY_LINE  8

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80015ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80015f6:	460c      	mov	r4, r1
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d040      	beq.n	800167e <DumpBuffer+0x92>

  p = buffer;
  bufp = buf;
 80015fc:	af03      	add	r7, sp, #12
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x: ",(unsigned int)address);
 80015fe:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001694 <DumpBuffer+0xa8>
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8001602:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001698 <DumpBuffer+0xac>
  for(i=0; i<count; i++) {
 8001606:	2500      	movs	r5, #0
 8001608:	463e      	mov	r6, r7
 800160a:	9b01      	ldr	r3, [sp, #4]
    if((i% BYTES_PER_LINE) == 0) {
 800160c:	f015 0b0f 	ands.w	fp, r5, #15
 8001610:	eb03 0105 	add.w	r1, r3, r5
 8001614:	d136      	bne.n	8001684 <DumpBuffer+0x98>
      printf("%08x: ",(unsigned int)address);
 8001616:	4648      	mov	r0, r9
 8001618:	f002 fdba 	bl	8004190 <iprintf>
      bufp = buf;
 800161c:	46b0      	mov	r8, r6
    c = *p++;
 800161e:	9b00      	ldr	r3, [sp, #0]
 8001620:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <DumpBuffer+0x9c>)
 8001624:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 8001628:	4647      	mov	r7, r8
      *bufp++ = '.';
 800162a:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 800162e:	4601      	mov	r1, r0
      *bufp++ = '.';
 8001630:	bf08      	it	eq
 8001632:	202e      	moveq	r0, #46	; 0x2e
 8001634:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 8001638:	4650      	mov	r0, sl
 800163a:	f002 fda9 	bl	8004190 <iprintf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800163e:	f1bb 0f0f 	cmp.w	fp, #15
 8001642:	d106      	bne.n	8001652 <DumpBuffer+0x66>
      *bufp = '\0';  /* NULL terminate buffer */
 8001644:	2100      	movs	r1, #0
 8001646:	f888 1001 	strb.w	r1, [r8, #1]

      /* Yes, print buffer */
      printf("  |%s|\n",buf);
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <DumpBuffer+0xa0>)
 800164c:	4631      	mov	r1, r6
 800164e:	f002 fd9f 	bl	8004190 <iprintf>
  for(i=0; i<count; i++) {
 8001652:	3501      	adds	r5, #1
 8001654:	42ac      	cmp	r4, r5
 8001656:	d1d8      	bne.n	800160a <DumpBuffer+0x1e>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8001658:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 800165a:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 800165e:	f888 5001 	strb.w	r5, [r8, #1]
  if(count % BYTES_PER_LINE) {
 8001662:	d00c      	beq.n	800167e <DumpBuffer+0x92>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 8001664:	4f0a      	ldr	r7, [pc, #40]	; (8001690 <DumpBuffer+0xa4>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001666:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 800166a:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800166c:	3501      	adds	r5, #1
      printf("   ");
 800166e:	f002 fd8f 	bl	8004190 <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8001672:	42a5      	cmp	r5, r4
 8001674:	d3f9      	bcc.n	800166a <DumpBuffer+0x7e>
    }
    /* Yes, print buffer */
    printf("  |%s|\n",buf);
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <DumpBuffer+0xa0>)
 8001678:	4631      	mov	r1, r6
 800167a:	f002 fd89 	bl	8004190 <iprintf>
  }
}
 800167e:	b009      	add	sp, #36	; 0x24
 8001680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001684:	46b8      	mov	r8, r7
 8001686:	e7ca      	b.n	800161e <DumpBuffer+0x32>
 8001688:	080126e8 	.word	0x080126e8
 800168c:	08011ae6 	.word	0x08011ae6
 8001690:	0801191a 	.word	0x0801191a
 8001694:	08011ad9 	.word	0x08011ad9
 8001698:	08011ae0 	.word	0x08011ae0

0800169c <CmdDump>:
ParserReturnVal_t CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800169c:	2801      	cmp	r0, #1
{
 800169e:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80016a0:	d00b      	beq.n	80016ba <CmdDump+0x1e>
  if(action==CMD_LONG_HELP) {
 80016a2:	2802      	cmp	r0, #2
 80016a4:	4d0e      	ldr	r5, [pc, #56]	; (80016e0 <CmdDump+0x44>)
 80016a6:	4c0f      	ldr	r4, [pc, #60]	; (80016e4 <CmdDump+0x48>)
 80016a8:	d109      	bne.n	80016be <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 80016aa:	480f      	ldr	r0, [pc, #60]	; (80016e8 <CmdDump+0x4c>)
 80016ac:	f002 fe0c 	bl	80042c8 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80016b0:	682a      	ldr	r2, [r5, #0]
 80016b2:	6821      	ldr	r1, [r4, #0]
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <CmdDump+0x50>)
 80016b6:	f002 fd6b 	bl	8004190 <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 80016ba:	2000      	movs	r0, #0
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
  rc = fetch_uint32_arg(&address);
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff ff56 	bl	8001570 <fetch_uint32_arg>
  if(rc == 0) {
 80016c4:	b910      	cbnz	r0, 80016cc <CmdDump+0x30>
    fetch_uint32_arg(&count);
 80016c6:	4628      	mov	r0, r5
 80016c8:	f7ff ff52 	bl	8001570 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	6829      	ldr	r1, [r5, #0]
 80016d0:	4610      	mov	r0, r2
 80016d2:	f7ff ff8b 	bl	80015ec <DumpBuffer>
  address = address+count;
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	682a      	ldr	r2, [r5, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	6023      	str	r3, [r4, #0]
  return CmdReturnOk;
 80016de:	e7ec      	b.n	80016ba <CmdDump+0x1e>
 80016e0:	200001a0 	.word	0x200001a0
 80016e4:	200004a0 	.word	0x200004a0
 80016e8:	08011aee 	.word	0x08011aee
 80016ec:	08011c86 	.word	0x08011c86

080016f0 <CmdStats>:
  }
#include "terminal.inc"

/* Dump the terminal statistics */
ParserReturnVal_t CmdStats(int mode)
{
 80016f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80016f4:	4601      	mov	r1, r0
{
 80016f6:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80016f8:	bb10      	cbnz	r0, 8001740 <CmdStats+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fa:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomically */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80016fe:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8001700:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8001704:	930b      	str	r3, [sp, #44]	; 0x2c
 8001706:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 800170a:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8001714:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8001716:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800171a:	f002 f820 	bl	800375e <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 800171e:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%lu, %s: %s\n"
 8001720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <CmdStats+0x5c>)
 8001724:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <CmdStats+0x60>)
 8001728:	9400      	str	r4, [sp, #0]
 800172a:	e9cd b307 	strd	fp, r3, [sp, #28]
 800172e:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8001732:	e9cd 7803 	strd	r7, r8, [sp, #12]
 8001736:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <CmdStats+0x64>)
 800173c:	f002 fd28 	bl	8004190 <iprintf>
	   s[i].framingError,
	   s[i].parityError);
  }

  return CmdReturnOk;
}
 8001740:	2000      	movs	r0, #0
 8001742:	b00d      	add	sp, #52	; 0x34
 8001744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001748:	200004a4 	.word	0x200004a4
 800174c:	08011cdc 	.word	0x08011cdc
 8001750:	08011ce4 	.word	0x08011ce4
 8001754:	08011cd4 	.word	0x08011cd4

08001758 <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 8001758:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800175a:	4604      	mov	r4, r0
 800175c:	b9b0      	cbnz	r0, 800178c <CmdTransparent+0x34>

  index = 0;
 800175e:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8001760:	a801      	add	r0, sp, #4
 8001762:	f7ff ff05 	bl	8001570 <fetch_uint32_arg>
  if(rc) {
 8001766:	4602      	mov	r2, r0
 8001768:	b130      	cbz	r0, 8001778 <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 800176a:	4809      	ldr	r0, [pc, #36]	; (8001790 <CmdTransparent+0x38>)
 800176c:	4621      	mov	r1, r4
 800176e:	f002 fd0f 	bl	8004190 <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 8001772:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8001774:	b002      	add	sp, #8
 8001776:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001778:	9901      	ldr	r1, [sp, #4]
 800177a:	b119      	cbz	r1, 8001784 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <CmdTransparent+0x3c>)
 800177e:	f002 fd07 	bl	8004190 <iprintf>
    return CmdReturnBadParameter1;
 8001782:	e7f6      	b.n	8001772 <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <CmdTransparent+0x40>)
 8001786:	f002 fd9f 	bl	80042c8 <puts>
 800178a:	e7f2      	b.n	8001772 <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800178c:	2000      	movs	r0, #0
 800178e:	e7f1      	b.n	8001774 <CmdTransparent+0x1c>
 8001790:	08011dc1 	.word	0x08011dc1
 8001794:	08011def 	.word	0x08011def
 8001798:	08011e25 	.word	0x08011e25

0800179c <TerminalInit>:
{
 800179c:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 800179e:	4c10      	ldr	r4, [pc, #64]	; (80017e0 <TerminalInit+0x44>)
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	4619      	mov	r1, r3
 80017a6:	2202      	movs	r2, #2
 80017a8:	6840      	ldr	r0, [r0, #4]
 80017aa:	f002 fd95 	bl	80042d8 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80017ae:	6820      	ldr	r0, [r4, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	2202      	movs	r2, #2
 80017b6:	6880      	ldr	r0, [r0, #8]
 80017b8:	f002 fd8e 	bl	80042d8 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	2202      	movs	r2, #2
 80017c2:	4619      	mov	r1, r3
 80017c4:	68c0      	ldr	r0, [r0, #12]
 80017c6:	f002 fd87 	bl	80042d8 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <TerminalInit+0x48>)
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80017d2:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	615a      	str	r2, [r3, #20]
}
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	bf00      	nop
 80017e0:	200001b0 	.word	0x200001b0
 80017e4:	40004400 	.word	0x40004400

080017e8 <TerminalRead>:
{
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 80017ee:	4c10      	ldr	r4, [pc, #64]	; (8001830 <TerminalRead+0x48>)
 80017f0:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 80017f4:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 80017f6:	fb05 4303 	mla	r3, r5, r3, r4
 80017fa:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 80017fe:	b2a4      	uxth	r4, r4
 8001800:	b10c      	cbz	r4, 8001806 <TerminalRead+0x1e>
 8001802:	4290      	cmp	r0, r2
 8001804:	d101      	bne.n	800180a <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8001806:	b662      	cpsie	i
}
 8001808:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 800180a:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 800180e:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001810:	5d1d      	ldrb	r5, [r3, r4]
 8001812:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001814:	3401      	adds	r4, #1
 8001816:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800181a:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 800181e:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001822:	3c01      	subs	r4, #1
 8001824:	b2a4      	uxth	r4, r4
 8001826:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 800182a:	3001      	adds	r0, #1
 800182c:	e7e5      	b.n	80017fa <TerminalRead+0x12>
 800182e:	bf00      	nop
 8001830:	200004a4 	.word	0x200004a4

08001834 <CmdReceive>:
{
 8001834:	b513      	push	{r0, r1, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001836:	4604      	mov	r4, r0
 8001838:	bb18      	cbnz	r0, 8001882 <CmdReceive+0x4e>
  index = 0;
 800183a:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 800183c:	a801      	add	r0, sp, #4
 800183e:	f7ff fe97 	bl	8001570 <fetch_uint32_arg>
  if(rc) {
 8001842:	4602      	mov	r2, r0
 8001844:	b130      	cbz	r0, 8001854 <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8001846:	4810      	ldr	r0, [pc, #64]	; (8001888 <CmdReceive+0x54>)
 8001848:	4621      	mov	r1, r4
 800184a:	f002 fca1 	bl	8004190 <iprintf>
    return CmdReturnBadParameter1;
 800184e:	2004      	movs	r0, #4
}
 8001850:	b002      	add	sp, #8
 8001852:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8001854:	9901      	ldr	r1, [sp, #4]
 8001856:	b119      	cbz	r1, 8001860 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <CmdReceive+0x58>)
 800185a:	f002 fc99 	bl	8004190 <iprintf>
 800185e:	e7f6      	b.n	800184e <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <CmdReceive+0x5c>)
 8001862:	f002 fc95 	bl	8004190 <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 8001866:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f10d 0103 	add.w	r1, sp, #3
 8001870:	f7ff ffba 	bl	80017e8 <TerminalRead>
 8001874:	2800      	cmp	r0, #0
 8001876:	d0eb      	beq.n	8001850 <CmdReceive+0x1c>
    printf("%c",c);
 8001878:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800187c:	f002 fca0 	bl	80041c0 <putchar>
 8001880:	e7f1      	b.n	8001866 <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001882:	2000      	movs	r0, #0
 8001884:	e7e4      	b.n	8001850 <CmdReceive+0x1c>
 8001886:	bf00      	nop
 8001888:	08011dc1 	.word	0x08011dc1
 800188c:	08011def 	.word	0x08011def
 8001890:	08011e4a 	.word	0x08011e4a

08001894 <TerminalOutputBufferWrite>:
  if(len >= TERMINALBUFFERSIZE) {
 8001894:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	4c2e      	ldr	r4, [pc, #184]	; (8001954 <TerminalOutputBufferWrite+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 800189c:	d30a      	bcc.n	80018b4 <TerminalOutputBufferWrite+0x20>
    TerminalState[index].stats.writeTooBig++;
 800189e:	f640 0334 	movw	r3, #2100	; 0x834
 80018a2:	fb03 4300 	mla	r3, r3, r0, r4
 80018a6:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80018aa:	3201      	adds	r2, #1
 80018ac:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 80018b0:	f44f 7200 	mov.w	r2, #512	; 0x200
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80018b4:	f640 0334 	movw	r3, #2100	; 0x834
 80018b8:	fb03 4300 	mla	r3, r3, r0, r4
 80018bc:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80018c0:	fa12 f585 	uxtah	r5, r2, r5
 80018c4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80018c8:	d221      	bcs.n	800190e <TerminalOutputBufferWrite+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 80018ca:	b672      	cpsid	i
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80018cc:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 80018d0:	2500      	movs	r5, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80018d2:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 80018d6:	42aa      	cmp	r2, r5
 80018d8:	d005      	beq.n	80018e6 <TerminalOutputBufferWrite+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80018da:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
 80018de:	b2b6      	uxth	r6, r6
 80018e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80018e4:	d321      	bcc.n	800192a <TerminalOutputBufferWrite+0x96>
  TerminalState[index].stats.written += sent;  /* gather statistics */
 80018e6:	f640 0334 	movw	r3, #2100	; 0x834
 80018ea:	fb03 4400 	mla	r4, r3, r0, r4
 80018ee:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 80018f2:	442b      	add	r3, r5
 80018f4:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818
  uart=TerminalInfo[index].instance;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <TerminalOutputBufferWrite+0xc4>)
 80018fa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80018fe:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001900:	68d3      	ldr	r3, [r2, #12]
 8001902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001906:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001908:	b662      	cpsie	i
}
 800190a:	4628      	mov	r0, r5
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 800190e:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001912:	3501      	adds	r5, #1
 8001914:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001918:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 800191c:	fa12 f585 	uxtah	r5, r2, r5
 8001920:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001924:	d3d1      	bcc.n	80018ca <TerminalOutputBufferWrite+0x36>
      asm volatile ("nop");
 8001926:	bf00      	nop
 8001928:	e7f6      	b.n	8001918 <TerminalOutputBufferWrite+0x84>
    head = TerminalState[index].outHead;
 800192a:	f8b3 6806 	ldrh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 800192e:	f811 c005 	ldrb.w	ip, [r1, r5]
 8001932:	fa13 f786 	uxtah	r7, r3, r6
    TerminalState[index].outHead = TERMINALINCR(head);
 8001936:	3601      	adds	r6, #1
 8001938:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800193c:	f8a3 6806 	strh.w	r6, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001940:	f8b3 680a 	ldrh.w	r6, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001944:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 8001948:	3601      	adds	r6, #1
 800194a:	b2b6      	uxth	r6, r6
 800194c:	f8a3 680a 	strh.w	r6, [r3, #2058]	; 0x80a
    sent++;
 8001950:	3501      	adds	r5, #1
 8001952:	e7c0      	b.n	80018d6 <TerminalOutputBufferWrite+0x42>
 8001954:	200004a4 	.word	0x200004a4
 8001958:	08011f64 	.word	0x08011f64

0800195c <CmdSend>:
{
 800195c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800195e:	4604      	mov	r4, r0
 8001960:	bb70      	cbnz	r0, 80019c0 <CmdSend+0x64>
  index = 0;
 8001962:	9002      	str	r0, [sp, #8]
  rc = fetch_uint32_arg(&index);
 8001964:	a802      	add	r0, sp, #8
 8001966:	f7ff fe03 	bl	8001570 <fetch_uint32_arg>
  if(rc) {
 800196a:	4602      	mov	r2, r0
 800196c:	b130      	cbz	r0, 800197c <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 800196e:	4815      	ldr	r0, [pc, #84]	; (80019c4 <CmdSend+0x68>)
 8001970:	4621      	mov	r1, r4
 8001972:	f002 fc0d 	bl	8004190 <iprintf>
    return CmdReturnBadParameter1;
 8001976:	2004      	movs	r0, #4
}
 8001978:	b004      	add	sp, #16
 800197a:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 800197c:	9c02      	ldr	r4, [sp, #8]
 800197e:	b124      	cbz	r4, 800198a <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8001980:	4621      	mov	r1, r4
 8001982:	4811      	ldr	r0, [pc, #68]	; (80019c8 <CmdSend+0x6c>)
 8001984:	f002 fc04 	bl	8004190 <iprintf>
 8001988:	e7f5      	b.n	8001976 <CmdSend+0x1a>
  fetch_cmd_args(&s);
 800198a:	a803      	add	r0, sp, #12
  s = NULL;
 800198c:	9403      	str	r4, [sp, #12]
  fetch_cmd_args(&s);
 800198e:	f7ff fe25 	bl	80015dc <fetch_cmd_args>
  len = strlen(s);
 8001992:	9903      	ldr	r1, [sp, #12]
 8001994:	9101      	str	r1, [sp, #4]
 8001996:	4608      	mov	r0, r1
 8001998:	f7fe ffa2 	bl	80008e0 <strlen>
  if(len==0) {
 800199c:	9901      	ldr	r1, [sp, #4]
 800199e:	4602      	mov	r2, r0
 80019a0:	b920      	cbnz	r0, 80019ac <CmdSend+0x50>
    printf("You need to specify what you want to send\n");
 80019a2:	480a      	ldr	r0, [pc, #40]	; (80019cc <CmdSend+0x70>)
 80019a4:	f002 fc90 	bl	80042c8 <puts>
    return CmdReturnBadParameter2;
 80019a8:	2005      	movs	r0, #5
 80019aa:	e7e5      	b.n	8001978 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 80019ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80019b0:	f7ff ff70 	bl	8001894 <TerminalOutputBufferWrite>
  TerminalOutputBufferWrite(index,"\r\n",2);
 80019b4:	4906      	ldr	r1, [pc, #24]	; (80019d0 <CmdSend+0x74>)
 80019b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f7ff ff6a 	bl	8001894 <TerminalOutputBufferWrite>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80019c0:	2000      	movs	r0, #0
 80019c2:	e7d9      	b.n	8001978 <CmdSend+0x1c>
 80019c4:	08011dc1 	.word	0x08011dc1
 80019c8:	08011def 	.word	0x08011def
 80019cc:	08011e65 	.word	0x08011e65
 80019d0:	0801209b 	.word	0x0801209b

080019d4 <TerminalWritePolled>:
  uart = TerminalInfo[index].instance;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <TerminalWritePolled+0x24>)
{
 80019d6:	b510      	push	{r4, lr}
  uart = TerminalInfo[index].instance;
 80019d8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80019dc:	6883      	ldr	r3, [r0, #8]
  while(len) {
 80019de:	1888      	adds	r0, r1, r2
 80019e0:	4281      	cmp	r1, r0
 80019e2:	d102      	bne.n	80019ea <TerminalWritePolled+0x16>
}
 80019e4:	4610      	mov	r0, r2
 80019e6:	bd10      	pop	{r4, pc}
      asm volatile ("nop");
 80019e8:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 80019ea:	681c      	ldr	r4, [r3, #0]
 80019ec:	0624      	lsls	r4, r4, #24
 80019ee:	d5fb      	bpl.n	80019e8 <TerminalWritePolled+0x14>
    uart->DR = *p;
 80019f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019f4:	605c      	str	r4, [r3, #4]
    sent++;
 80019f6:	e7f3      	b.n	80019e0 <TerminalWritePolled+0xc>
 80019f8:	08011f64 	.word	0x08011f64

080019fc <PolledPrintf>:
{
 80019fc:	b40f      	push	{r0, r1, r2, r3}
 80019fe:	b500      	push	{lr}
 8001a00:	b097      	sub	sp, #92	; 0x5c
 8001a02:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001a04:	2150      	movs	r1, #80	; 0x50
{
 8001a06:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8001a0a:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001a0c:	a802      	add	r0, sp, #8
 8001a0e:	f002 fe93 	bl	8004738 <vsniprintf>
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001a12:	a902      	add	r1, sp, #8
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8001a14:	4602      	mov	r2, r0
  TerminalWritePolled(INDEX_CONSOLE,buf,len);  
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff ffdc 	bl	80019d4 <TerminalWritePolled>
}
 8001a1c:	b017      	add	sp, #92	; 0x5c
 8001a1e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a22:	b004      	add	sp, #16
 8001a24:	4770      	bx	lr
	...

08001a28 <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <TerminalInputBufferWrite+0x60>)
{
 8001a2a:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8001a2c:	f640 0434 	movw	r4, #2100	; 0x834
 8001a30:	fb04 3000 	mla	r0, r4, r0, r3
 8001a34:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001a38:	fa12 f383 	uxtah	r3, r2, r3
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a40:	d306      	bcc.n	8001a50 <TerminalInputBufferWrite+0x28>
    TerminalState[index].stats.receiveTooBig++;
 8001a42:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8001a46:	3301      	adds	r3, #1
 8001a48:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    return 1;
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8001a50:	f8d0 3820 	ldr.w	r3, [r0, #2080]	; 0x820
 8001a54:	4413      	add	r3, r2
 8001a56:	f8c0 3820 	str.w	r3, [r0, #2080]	; 0x820
  while(len != 0) {
 8001a5a:	440a      	add	r2, r1
 8001a5c:	4291      	cmp	r1, r2
 8001a5e:	d101      	bne.n	8001a64 <TerminalInputBufferWrite+0x3c>
  return 0;
 8001a60:	2000      	movs	r0, #0
 8001a62:	e7f4      	b.n	8001a4e <TerminalInputBufferWrite+0x26>
    head = TerminalState[index].inHead;
 8001a64:	f8b0 3400 	ldrh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inBuffer[head] = *p++;
 8001a68:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 8001a6c:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8001a6e:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 8001a70:	3301      	adds	r3, #1
 8001a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a76:	f8a0 3400 	strh.w	r3, [r0, #1024]	; 0x400
    TerminalState[index].inCount++;
 8001a7a:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001a7e:	3301      	adds	r3, #1
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    len--;
 8001a86:	e7e9      	b.n	8001a5c <TerminalInputBufferWrite+0x34>
 8001a88:	200004a4 	.word	0x200004a4

08001a8c <TerminalISR>:
  uart = TerminalInfo[index].instance;
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <TerminalISR+0xd8>)
 8001a8e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
{
 8001a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uart = TerminalInfo[index].instance;
 8001a94:	689e      	ldr	r6, [r3, #8]
  isr = uart->SR;
 8001a96:	6835      	ldr	r5, [r6, #0]
  if(isr & USART_SR_RXNE) { 
 8001a98:	06a9      	lsls	r1, r5, #26
{
 8001a9a:	4604      	mov	r4, r0
  if(isr & USART_SR_RXNE) { 
 8001a9c:	d507      	bpl.n	8001aae <TerminalISR+0x22>
    c = uart->DR;
 8001a9e:	6873      	ldr	r3, [r6, #4]
 8001aa0:	f88d 3007 	strb.w	r3, [sp, #7]
    TerminalInputBufferWrite(index,&c,1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f10d 0107 	add.w	r1, sp, #7
 8001aaa:	f7ff ffbd 	bl	8001a28 <TerminalInputBufferWrite>
  if(isr & USART_SR_TXE) {
 8001aae:	062a      	lsls	r2, r5, #24
 8001ab0:	d50d      	bpl.n	8001ace <TerminalISR+0x42>
    if(TerminalState[index].outCount == 0) {
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <TerminalISR+0xdc>)
 8001ab4:	f640 0234 	movw	r2, #2100	; 0x834
 8001ab8:	fb02 3304 	mla	r3, r2, r4, r3
 8001abc:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d13b      	bne.n	8001b3e <TerminalISR+0xb2>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8001ac6:	68f3      	ldr	r3, [r6, #12]
 8001ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001acc:	60f3      	str	r3, [r6, #12]
  if(isr & USART_SR_TC) {
 8001ace:	066b      	lsls	r3, r5, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8001ad0:	bf42      	ittt	mi
 8001ad2:	68f3      	ldrmi	r3, [r6, #12]
 8001ad4:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8001ad8:	60f3      	strmi	r3, [r6, #12]
  if(isr & USART_SR_PE) {
 8001ada:	07e8      	lsls	r0, r5, #31
 8001adc:	d509      	bpl.n	8001af2 <TerminalISR+0x66>
    TerminalState[index].stats.parityError++;
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <TerminalISR+0xdc>)
 8001ae0:	f640 0234 	movw	r2, #2100	; 0x834
 8001ae4:	fb02 3304 	mla	r3, r2, r4, r3
 8001ae8:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001aec:	3201      	adds	r2, #1
 8001aee:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8001af2:	07a9      	lsls	r1, r5, #30
 8001af4:	d509      	bpl.n	8001b0a <TerminalISR+0x7e>
    TerminalState[index].stats.framingError++;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <TerminalISR+0xdc>)
 8001af8:	f640 0234 	movw	r2, #2100	; 0x834
 8001afc:	fb02 3304 	mla	r3, r2, r4, r3
 8001b00:	f8d3 282c 	ldr.w	r2, [r3, #2092]	; 0x82c
 8001b04:	3201      	adds	r2, #1
 8001b06:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8001b0a:	076a      	lsls	r2, r5, #29
 8001b0c:	d509      	bpl.n	8001b22 <TerminalISR+0x96>
    TerminalState[index].stats.noiseError++;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <TerminalISR+0xdc>)
 8001b10:	f640 0234 	movw	r2, #2100	; 0x834
 8001b14:	fb02 3304 	mla	r3, r2, r4, r3
 8001b18:	f8d3 2828 	ldr.w	r2, [r3, #2088]	; 0x828
 8001b1c:	3201      	adds	r2, #1
 8001b1e:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8001b22:	072b      	lsls	r3, r5, #28
 8001b24:	d509      	bpl.n	8001b3a <TerminalISR+0xae>
    TerminalState[index].stats.overrunError++;
 8001b26:	4810      	ldr	r0, [pc, #64]	; (8001b68 <TerminalISR+0xdc>)
 8001b28:	f640 0334 	movw	r3, #2100	; 0x834
 8001b2c:	fb03 0404 	mla	r4, r3, r4, r0
 8001b30:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
 8001b34:	3301      	adds	r3, #1
 8001b36:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
}
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
      tail = TerminalState[index].outTail;
 8001b3e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8001b42:	fa13 f182 	uxtah	r1, r3, r2
      tail = TERMINALINCR(tail);
 8001b46:	3201      	adds	r2, #1
      uart->DR = c;
 8001b48:	f891 1406 	ldrb.w	r1, [r1, #1030]	; 0x406
 8001b4c:	6071      	str	r1, [r6, #4]
      TerminalState[index].outCount--;
 8001b4e:	f8b3 180a 	ldrh.w	r1, [r3, #2058]	; 0x80a
 8001b52:	3901      	subs	r1, #1
 8001b54:	b289      	uxth	r1, r1
      TerminalState[index].outTail = tail;
 8001b56:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8001b5a:	f8a3 180a 	strh.w	r1, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8001b5e:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8001b62:	e7b4      	b.n	8001ace <TerminalISR+0x42>
 8001b64:	08011f64 	.word	0x08011f64
 8001b68:	200004a4 	.word	0x200004a4

08001b6c <USART2_IRQHandler>:
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff bf8d 	b.w	8001a8c <TerminalISR>
	...

08001b74 <WDTCheckReset>:
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <WDTCheckReset+0x64>)
{
 8001b76:	b510      	push	{r4, lr}
  csr = RCC->CSR;
 8001b78:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 8001b7a:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8001b7e:	d025      	beq.n	8001bcc <WDTCheckReset+0x58>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8001b80:	4816      	ldr	r0, [pc, #88]	; (8001bdc <WDTCheckReset+0x68>)
 8001b82:	f002 fba1 	bl	80042c8 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	da02      	bge.n	8001b90 <WDTCheckReset+0x1c>
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <WDTCheckReset+0x6c>)
 8001b8c:	f002 fb9c 	bl	80042c8 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8001b90:	0062      	lsls	r2, r4, #1
 8001b92:	d502      	bpl.n	8001b9a <WDTCheckReset+0x26>
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <WDTCheckReset+0x70>)
 8001b96:	f002 fb97 	bl	80042c8 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 8001b9a:	00a3      	lsls	r3, r4, #2
 8001b9c:	d502      	bpl.n	8001ba4 <WDTCheckReset+0x30>
 8001b9e:	4812      	ldr	r0, [pc, #72]	; (8001be8 <WDTCheckReset+0x74>)
 8001ba0:	f002 fb92 	bl	80042c8 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8001ba4:	00e0      	lsls	r0, r4, #3
 8001ba6:	d502      	bpl.n	8001bae <WDTCheckReset+0x3a>
 8001ba8:	4810      	ldr	r0, [pc, #64]	; (8001bec <WDTCheckReset+0x78>)
 8001baa:	f002 fb8d 	bl	80042c8 <puts>
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8001bae:	01a1      	lsls	r1, r4, #6
 8001bb0:	d502      	bpl.n	8001bb8 <WDTCheckReset+0x44>
 8001bb2:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <WDTCheckReset+0x7c>)
 8001bb4:	f002 fb88 	bl	80042c8 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8001bb8:	0162      	lsls	r2, r4, #5
 8001bba:	d502      	bpl.n	8001bc2 <WDTCheckReset+0x4e>
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <WDTCheckReset+0x80>)
 8001bbe:	f002 fb83 	bl	80042c8 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 8001bc2:	0123      	lsls	r3, r4, #4
 8001bc4:	d502      	bpl.n	8001bcc <WDTCheckReset+0x58>
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <WDTCheckReset+0x84>)
 8001bc8:	f002 fb7e 	bl	80042c8 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <WDTCheckReset+0x64>)
 8001bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd2:	675a      	str	r2, [r3, #116]	; 0x74

}
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08011f74 	.word	0x08011f74
 8001be0:	08011fac 	.word	0x08011fac
 8001be4:	08011fb7 	.word	0x08011fb7
 8001be8:	08011fca 	.word	0x08011fca
 8001bec:	08011fe9 	.word	0x08011fe9
 8001bf0:	08011ff3 	.word	0x08011ff3
 8001bf4:	08011ffd 	.word	0x08011ffd
 8001bf8:	08012007 	.word	0x08012007

08001bfc <WDTFeed>:

/* Feed the watchdog */
void WDTFeed(void)
{
#if defined(HAL_IWDG_MODULE_ENABLED)
  HAL_IWDG_Refresh(&hiwdg); /* Feed it */
 8001bfc:	4801      	ldr	r0, [pc, #4]	; (8001c04 <WDTFeed+0x8>)
 8001bfe:	f001 b974 	b.w	8002eea <HAL_IWDG_Refresh>
 8001c02:	bf00      	nop
 8001c04:	20000cf0 	.word	0x20000cf0

08001c08 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b938      	cbnz	r0, 8001c1e <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 8001c0e:	480b      	ldr	r0, [pc, #44]	; (8001c3c <CmdTasks+0x34>)
  p = _tasktable_start;
 8001c10:	4d0b      	ldr	r5, [pc, #44]	; (8001c40 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001c12:	4e0c      	ldr	r6, [pc, #48]	; (8001c44 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001c14:	4f0c      	ldr	r7, [pc, #48]	; (8001c48 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001c16:	f002 fb57 	bl	80042c8 <puts>
  while(p != _tasktable_end) {
 8001c1a:	42b5      	cmp	r5, r6
 8001c1c:	d102      	bne.n	8001c24 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 8001c1e:	2000      	movs	r0, #0
 8001c20:	b003      	add	sp, #12
 8001c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001c24:	696b      	ldr	r3, [r5, #20]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4621      	mov	r1, r4
 8001c2a:	692b      	ldr	r3, [r5, #16]
 8001c2c:	f855 2b18 	ldr.w	r2, [r5], #24
 8001c30:	4638      	mov	r0, r7
 8001c32:	f002 faad 	bl	8004190 <iprintf>
    i++;
 8001c36:	3401      	adds	r4, #1
 8001c38:	e7ef      	b.n	8001c1a <CmdTasks+0x12>
 8001c3a:	bf00      	nop
 8001c3c:	08012011 	.word	0x08012011
 8001c40:	08012b80 	.word	0x08012b80
 8001c44:	08012b98 	.word	0x08012b98
 8001c48:	0801202a 	.word	0x0801202a

08001c4c <TaskingInit>:
{
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	4d07      	ldr	r5, [pc, #28]	; (8001c6c <TaskingInit+0x20>)
  p = _tasktable_start;
 8001c50:	4c07      	ldr	r4, [pc, #28]	; (8001c70 <TaskingInit+0x24>)
  while(p != _tasktable_end) {
 8001c52:	4e08      	ldr	r6, [pc, #32]	; (8001c74 <TaskingInit+0x28>)
    s->interval = 0;    /* Expire all task intervals */
 8001c54:	2700      	movs	r7, #0
  while(p != _tasktable_end) {
 8001c56:	42b4      	cmp	r4, r6
 8001c58:	d100      	bne.n	8001c5c <TaskingInit+0x10>
}
 8001c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->initFunc != NULL) {
 8001c5c:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8001c5e:	f845 7b04 	str.w	r7, [r5], #4
    if(p->initFunc != NULL) {
 8001c62:	b10b      	cbz	r3, 8001c68 <TaskingInit+0x1c>
      p->initFunc(p->data);
 8001c64:	68e0      	ldr	r0, [r4, #12]
 8001c66:	4798      	blx	r3
    p++;
 8001c68:	3418      	adds	r4, #24
    s++;
 8001c6a:	e7f4      	b.n	8001c56 <TaskingInit+0xa>
 8001c6c:	20000380 	.word	0x20000380
 8001c70:	08012b80 	.word	0x08012b80
 8001c74:	08012b98 	.word	0x08012b98

08001c78 <TaskingTickHandler>:
  AccumTicks++;
 8001c78:	4a02      	ldr	r2, [pc, #8]	; (8001c84 <TaskingTickHandler+0xc>)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000cd8 	.word	0x20000cd8

08001c88 <TaskingRun>:
{
 8001c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
  ticks = AccumTicks;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <TaskingRun+0x58>)
  AccumTicks = 0;
 8001c90:	2200      	movs	r2, #0
  ticks = AccumTicks;
 8001c92:	681f      	ldr	r7, [r3, #0]
  AccumTicks = 0;
 8001c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c96:	b662      	cpsie	i
  s = _taskstate_start;
 8001c98:	4d12      	ldr	r5, [pc, #72]	; (8001ce4 <TaskingRun+0x5c>)
  p = _tasktable_start;
 8001c9a:	4c13      	ldr	r4, [pc, #76]	; (8001ce8 <TaskingRun+0x60>)
  while(p != _tasktable_end) {
 8001c9c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001cec <TaskingRun+0x64>
 8001ca0:	4544      	cmp	r4, r8
 8001ca2:	d101      	bne.n	8001ca8 <TaskingRun+0x20>
}
 8001ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p->func != NULL) {
 8001ca8:	6863      	ldr	r3, [r4, #4]
 8001caa:	b11b      	cbz	r3, 8001cb4 <TaskingRun+0x2c>
      if(p->interval == 0) {
 8001cac:	6922      	ldr	r2, [r4, #16]
 8001cae:	b9a2      	cbnz	r2, 8001cda <TaskingRun+0x52>
	p->func(p->data);
 8001cb0:	68e0      	ldr	r0, [r4, #12]
 8001cb2:	4798      	blx	r3
    p++;
 8001cb4:	3418      	adds	r4, #24
    s++;
 8001cb6:	3504      	adds	r5, #4
 8001cb8:	e7f2      	b.n	8001ca0 <TaskingRun+0x18>
	  if(s->interval) {
 8001cba:	682b      	ldr	r3, [r5, #0]
 8001cbc:	b943      	cbnz	r3, 8001cd0 <TaskingRun+0x48>
	    p->func(p->data);
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	68e0      	ldr	r0, [r4, #12]
 8001cc2:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 8001cc4:	6923      	ldr	r3, [r4, #16]
 8001cc6:	602b      	str	r3, [r5, #0]
 8001cc8:	3e01      	subs	r6, #1
	while(i--) { /* This could be better... if ticks > interval... */
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	d1f5      	bne.n	8001cba <TaskingRun+0x32>
 8001cce:	e7f1      	b.n	8001cb4 <TaskingRun+0x2c>
	    s->interval--;
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f7      	bne.n	8001cc8 <TaskingRun+0x40>
 8001cd8:	e7f1      	b.n	8001cbe <TaskingRun+0x36>
 8001cda:	463e      	mov	r6, r7
 8001cdc:	e7f5      	b.n	8001cca <TaskingRun+0x42>
 8001cde:	bf00      	nop
 8001ce0:	20000cd8 	.word	0x20000cd8
 8001ce4:	20000380 	.word	0x20000380
 8001ce8:	08012b80 	.word	0x08012b80
 8001cec:	08012b98 	.word	0x08012b98

08001cf0 <Default_IRQHandler>:
void Default_IRQHandler(void)
{
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <Default_IRQHandler+0x3c>)
 8001cf4:	480e      	ldr	r0, [pc, #56]	; (8001d30 <Default_IRQHandler+0x40>)
{
 8001cf6:	b510      	push	{r4, lr}
  icsr = SCB->ICSR;
 8001cf8:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8001cfa:	f7ff fe7f 	bl	80019fc <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8001cfe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8001d02:	480c      	ldr	r0, [pc, #48]	; (8001d34 <Default_IRQHandler+0x44>)
 8001d04:	f7ff fe7a 	bl	80019fc <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <Default_IRQHandler+0x48>)
 8001d0a:	f1a4 0110 	sub.w	r1, r4, #16
 8001d0e:	f7ff fe75 	bl	80019fc <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <Default_IRQHandler+0x4c>)
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <Default_IRQHandler+0x50>)
 8001d16:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001d1a:	f7ff fe6f 	bl	80019fc <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8001d1e:	4809      	ldr	r0, [pc, #36]	; (8001d44 <Default_IRQHandler+0x54>)
 8001d20:	f7ff fe6c 	bl	80019fc <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8001d24:	e7fe      	b.n	8001d24 <Default_IRQHandler+0x34>
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00
 8001d2c:	08012148 	.word	0x08012148
 8001d30:	08012067 	.word	0x08012067
 8001d34:	0801209e 	.word	0x0801209e
 8001d38:	080120da 	.word	0x080120da
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	08012103 	.word	0x08012103
 8001d44:	0801211e 	.word	0x0801211e

08001d48 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <Uncompress+0x74>)
{
 8001d4c:	b08a      	sub	sp, #40	; 0x28
 8001d4e:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8001d50:	466c      	mov	r4, sp
 8001d52:	f102 0620 	add.w	r6, r2, #32
 8001d56:	6810      	ldr	r0, [r2, #0]
 8001d58:	6851      	ldr	r1, [r2, #4]
 8001d5a:	4625      	mov	r5, r4
 8001d5c:	c503      	stmia	r5!, {r0, r1}
 8001d5e:	3208      	adds	r2, #8
 8001d60:	42b2      	cmp	r2, r6
 8001d62:	462c      	mov	r4, r5
 8001d64:	d1f7      	bne.n	8001d56 <Uncompress+0xe>
 8001d66:	6810      	ldr	r0, [r2, #0]
 8001d68:	6028      	str	r0, [r5, #0]
 8001d6a:	8892      	ldrh	r2, [r2, #4]
 8001d6c:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4d13      	ldr	r5, [pc, #76]	; (8001dc0 <Uncompress+0x78>)
 8001d72:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8001d76:	2100      	movs	r1, #0
 8001d78:	ba5b      	rev16	r3, r3
 8001d7a:	b29b      	uxth	r3, r3
  i = 0;
 8001d7c:	460c      	mov	r4, r1
 8001d7e:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001d80:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8001d84:	d103      	bne.n	8001d8e <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8001d86:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <Uncompress+0x78>)
  buf[i]='\0';
 8001d88:	5532      	strb	r2, [r6, r4]
}
 8001d8a:	b00a      	add	sp, #40	; 0x28
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8001d8e:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8001d90:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8001d94:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001d98:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8001d9c:	4462      	add	r2, ip
    buf[i++] = c;
 8001d9e:	3401      	adds	r4, #1
 8001da0:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001da4:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001da8:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8001daa:	2a07      	cmp	r2, #7
      bits -= 8;
 8001dac:	bf81      	itttt	hi
 8001dae:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001db0:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001db4:	4091      	lslhi	r1, r2
 8001db6:	430b      	orrhi	r3, r1
 8001db8:	4611      	mov	r1, r2
 8001dba:	e7e1      	b.n	8001d80 <Uncompress+0x38>
 8001dbc:	0801215b 	.word	0x0801215b
 8001dc0:	20000cdc 	.word	0x20000cdc

08001dc4 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001dc4:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	b1f0      	cbz	r0, 8001e08 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8001dca:	b1f9      	cbz	r1, 8001e0c <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001dcc:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001dce:	888a      	ldrh	r2, [r1, #4]
 8001dd0:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001dd2:	2d10      	cmp	r5, #16
 8001dd4:	d005      	beq.n	8001de2 <DecodeReadRegister+0x1e>
 8001dd6:	2d20      	cmp	r5, #32
 8001dd8:	d005      	beq.n	8001de6 <DecodeReadRegister+0x22>
 8001dda:	2d08      	cmp	r5, #8
 8001ddc:	d105      	bne.n	8001dea <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8001dde:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001de2:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001de4:	e7fc      	b.n	8001de0 <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 8001de6:	58d0      	ldr	r0, [r2, r3]
    break;
 8001de8:	e7fa      	b.n	8001de0 <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001dea:	6808      	ldr	r0, [r1, #0]
 8001dec:	f7ff ffac 	bl	8001d48 <Uncompress>
 8001df0:	4629      	mov	r1, r5
 8001df2:	4602      	mov	r2, r0
 8001df4:	4806      	ldr	r0, [pc, #24]	; (8001e10 <DecodeReadRegister+0x4c>)
 8001df6:	f002 f9cb 	bl	8004190 <iprintf>
    printf(" in periphral %s!\n",
 8001dfa:	6820      	ldr	r0, [r4, #0]
 8001dfc:	f7ff ffa4 	bl	8001d48 <Uncompress>
 8001e00:	4601      	mov	r1, r0
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <DecodeReadRegister+0x50>)
 8001e04:	f002 f9c4 	bl	8004190 <iprintf>
    return 0;
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e7e9      	b.n	8001de0 <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	e7e7      	b.n	8001de0 <DecodeReadRegister+0x1c>
 8001e10:	08012181 	.word	0x08012181
 8001e14:	080121a3 	.word	0x080121a3

08001e18 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8001e18:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	b1f8      	cbz	r0, 8001e5e <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8001e1e:	b1f1      	cbz	r1, 8001e5e <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001e20:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001e22:	8888      	ldrh	r0, [r1, #4]
 8001e24:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001e26:	2d10      	cmp	r5, #16
 8001e28:	d006      	beq.n	8001e38 <DecodeWriteRegister+0x20>
 8001e2a:	2d20      	cmp	r5, #32
 8001e2c:	d006      	beq.n	8001e3c <DecodeWriteRegister+0x24>
 8001e2e:	2d08      	cmp	r5, #8
 8001e30:	d106      	bne.n	8001e40 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8001e32:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8001e34:	2000      	movs	r0, #0
}
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001e38:	52c2      	strh	r2, [r0, r3]
    break;  
 8001e3a:	e7fb      	b.n	8001e34 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8001e3c:	50c2      	str	r2, [r0, r3]
 8001e3e:	e7f9      	b.n	8001e34 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8001e40:	6808      	ldr	r0, [r1, #0]
 8001e42:	f7ff ff81 	bl	8001d48 <Uncompress>
 8001e46:	4629      	mov	r1, r5
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <DecodeWriteRegister+0x4c>)
 8001e4c:	f002 f9a0 	bl	8004190 <iprintf>
    printf(" in periphral %s!\n",
 8001e50:	6820      	ldr	r0, [r4, #0]
 8001e52:	f7ff ff79 	bl	8001d48 <Uncompress>
 8001e56:	4601      	mov	r1, r0
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <DecodeWriteRegister+0x50>)
 8001e5a:	f002 f999 	bl	8004190 <iprintf>
  if(p == NULL) return 1;
 8001e5e:	2001      	movs	r0, #1
 8001e60:	e7e9      	b.n	8001e36 <DecodeWriteRegister+0x1e>
 8001e62:	bf00      	nop
 8001e64:	08012181 	.word	0x08012181
 8001e68:	080121a3 	.word	0x080121a3

08001e6c <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8001e6c:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8001e6e:	4604      	mov	r4, r0
{
 8001e70:	b087      	sub	sp, #28
  if(f == NULL) return;
 8001e72:	b1d0      	cbz	r0, 8001eaa <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001e74:	7942      	ldrb	r2, [r0, #5]
 8001e76:	2301      	movs	r3, #1
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001e7c:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001e7e:	40d1      	lsrs	r1, r2
 8001e80:	3b01      	subs	r3, #1
 8001e82:	400b      	ands	r3, r1
 8001e84:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001e86:	f7ff ff5f 	bl	8001d48 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8001e8a:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <DecodeField+0x44>)
 8001e8e:	9b05      	ldr	r3, [sp, #20]
 8001e90:	4601      	mov	r1, r0
 8001e92:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <DecodeField+0x48>)
 8001e94:	2d01      	cmp	r5, #1
 8001e96:	bf98      	it	ls
 8001e98:	4602      	movls	r2, r0
 8001e9a:	7920      	ldrb	r0, [r4, #4]
 8001e9c:	9500      	str	r5, [sp, #0]
 8001e9e:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <DecodeField+0x4c>)
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f002 f973 	bl	8004190 <iprintf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8001eaa:	b007      	add	sp, #28
 8001eac:	bd30      	pop	{r4, r5, pc}
 8001eae:	bf00      	nop
 8001eb0:	080121b6 	.word	0x080121b6
 8001eb4:	080121bc 	.word	0x080121bc
 8001eb8:	080121c2 	.word	0x080121c2

08001ebc <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ebe:	460f      	mov	r7, r1
 8001ec0:	4615      	mov	r5, r2
 8001ec2:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	b180      	cbz	r0, 8001eea <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ec8:	6800      	ldr	r0, [r0, #0]
 8001eca:	f7ff ff3d 	bl	8001d48 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001ece:	88a2      	ldrh	r2, [r4, #4]
 8001ed0:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001ed2:	9201      	str	r2, [sp, #4]
 8001ed4:	79a3      	ldrb	r3, [r4, #6]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4601      	mov	r1, r0
 8001eda:	462b      	mov	r3, r5
 8001edc:	480e      	ldr	r0, [pc, #56]	; (8001f18 <DecodeRegister+0x5c>)
 8001ede:	462a      	mov	r2, r5
 8001ee0:	f002 f956 	bl	8004190 <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001ee4:	68a7      	ldr	r7, [r4, #8]
 8001ee6:	b19f      	cbz	r7, 8001f10 <DecodeRegister+0x54>
 8001ee8:	b986      	cbnz	r6, 8001f0c <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8001eea:	b003      	add	sp, #12
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7ff ffbc 	bl	8001e6c <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8001ef4:	3601      	adds	r6, #1
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	429e      	cmp	r6, r3
 8001efa:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 8001efe:	d3f6      	bcc.n	8001eee <DecodeRegister+0x32>
    printf("\n");
 8001f00:	200a      	movs	r0, #10
}
 8001f02:	b003      	add	sp, #12
 8001f04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 8001f08:	f002 b95a 	b.w	80041c0 <putchar>
    for(i=0; i<r->numFields; i++) {
 8001f0c:	2600      	movs	r6, #0
 8001f0e:	e7f2      	b.n	8001ef6 <DecodeRegister+0x3a>
  if(decodeFields) {
 8001f10:	2e00      	cmp	r6, #0
 8001f12:	d0ea      	beq.n	8001eea <DecodeRegister+0x2e>
 8001f14:	e7f4      	b.n	8001f00 <DecodeRegister+0x44>
 8001f16:	bf00      	nop
 8001f18:	080121eb 	.word	0x080121eb

08001f1c <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f20:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8001f22:	4604      	mov	r4, r0
 8001f24:	b160      	cbz	r0, 8001f40 <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001f26:	6800      	ldr	r0, [r0, #0]
 8001f28:	f7ff ff0e 	bl	8001d48 <Uncompress>
 8001f2c:	6862      	ldr	r2, [r4, #4]
 8001f2e:	4601      	mov	r1, r0
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <DecodePeripheral+0x50>)
 8001f32:	f002 f92d 	bl	8004190 <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001f36:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001f3a:	f1b8 0f00 	cmp.w	r8, #0
 8001f3e:	d112      	bne.n	8001f66 <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001f44:	4639      	mov	r1, r7
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff ff3c 	bl	8001dc4 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001f4c:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001f4e:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001f50:	4633      	mov	r3, r6
 8001f52:	4638      	mov	r0, r7
 8001f54:	f7ff ffb2 	bl	8001ebc <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001f58:	3501      	adds	r5, #1
 8001f5a:	89a3      	ldrh	r3, [r4, #12]
 8001f5c:	429d      	cmp	r5, r3
 8001f5e:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001f62:	d3ef      	bcc.n	8001f44 <DecodePeripheral+0x28>
 8001f64:	e7ec      	b.n	8001f40 <DecodePeripheral+0x24>
 8001f66:	2500      	movs	r5, #0
 8001f68:	e7f7      	b.n	8001f5a <DecodePeripheral+0x3e>
 8001f6a:	bf00      	nop
 8001f6c:	08012226 	.word	0x08012226

08001f70 <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8001f76:	2009      	movs	r0, #9
 8001f78:	f002 f922 	bl	80041c0 <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8001f7c:	4e0e      	ldr	r6, [pc, #56]	; (8001fb8 <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 8001f7e:	4f0f      	ldr	r7, [pc, #60]	; (8001fbc <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001f80:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8001fc0 <DecodePrintPeripherals+0x50>
  col = 8;
 8001f84:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8001f86:	6820      	ldr	r0, [r4, #0]
 8001f88:	b908      	cbnz	r0, 8001f8e <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8001f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8001f8e:	f7ff fedb 	bl	8001d48 <Uncompress>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4630      	mov	r0, r6
 8001f96:	f002 f8fb 	bl	8004190 <iprintf>
    if((p+1)->name != NULL) {
 8001f9a:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8001f9c:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 8001f9e:	b14b      	cbz	r3, 8001fb4 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	f002 f8f5 	bl	8004190 <iprintf>
 8001fa6:	4405      	add	r5, r0
      if(col > 70) {
 8001fa8:	2d46      	cmp	r5, #70	; 0x46
 8001faa:	d903      	bls.n	8001fb4 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8001fac:	4640      	mov	r0, r8
 8001fae:	f002 f8ef 	bl	8004190 <iprintf>
	col = 8;
 8001fb2:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8001fb4:	3410      	adds	r4, #16
 8001fb6:	e7e6      	b.n	8001f86 <DecodePrintPeripherals+0x16>
 8001fb8:	080121a0 	.word	0x080121a0
 8001fbc:	080121bf 	.word	0x080121bf
 8001fc0:	0801224e 	.word	0x0801224e

08001fc4 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc8:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001fca:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001fcc:	460d      	mov	r5, r1
  printf("\t");
 8001fce:	f002 f8f7 	bl	80041c0 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001fd2:	4f12      	ldr	r7, [pc, #72]	; (800201c <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8001fd4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002020 <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001fd8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002024 <DecodePrintRegisters+0x60>
 8001fdc:	3d01      	subs	r5, #1
 8001fde:	3610      	adds	r6, #16
  col = 8;
 8001fe0:	2408      	movs	r4, #8
  while(count--) {
 8001fe2:	1c6b      	adds	r3, r5, #1
 8001fe4:	d101      	bne.n	8001fea <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 8001fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001fea:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8001fee:	f7ff feab 	bl	8001d48 <Uncompress>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4638      	mov	r0, r7
 8001ff6:	f002 f8cb 	bl	8004190 <iprintf>
 8001ffa:	4420      	add	r0, r4
 8001ffc:	b2c4      	uxtb	r4, r0
    if(count) {
 8001ffe:	b155      	cbz	r5, 8002016 <DecodePrintRegisters+0x52>
      col += printf(", ");
 8002000:	4640      	mov	r0, r8
 8002002:	f002 f8c5 	bl	8004190 <iprintf>
 8002006:	4420      	add	r0, r4
 8002008:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 800200a:	2c46      	cmp	r4, #70	; 0x46
 800200c:	d903      	bls.n	8002016 <DecodePrintRegisters+0x52>
	printf("\n\t");
 800200e:	4648      	mov	r0, r9
 8002010:	f002 f8be 	bl	8004190 <iprintf>
	col = 8;
 8002014:	2408      	movs	r4, #8
    r++;
 8002016:	3d01      	subs	r5, #1
 8002018:	3610      	adds	r6, #16
 800201a:	e7e2      	b.n	8001fe2 <DecodePrintRegisters+0x1e>
 800201c:	080121a0 	.word	0x080121a0
 8002020:	080121bf 	.word	0x080121bf
 8002024:	0801224e 	.word	0x0801224e

08002028 <CmdDecode>:
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002028:	2802      	cmp	r0, #2
{
 800202a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(mode == CMD_LONG_HELP) {
 800202e:	d135      	bne.n	800209c <CmdDecode+0x74>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8002030:	a803      	add	r0, sp, #12
 8002032:	f7ff fabb 	bl	80015ac <fetch_string_arg>
    if(rc) {
 8002036:	b168      	cbz	r0, 8002054 <CmdDecode+0x2c>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002038:	488d      	ldr	r0, [pc, #564]	; (8002270 <CmdDecode+0x248>)
 800203a:	f002 f945 	bl	80042c8 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 800203e:	488d      	ldr	r0, [pc, #564]	; (8002274 <CmdDecode+0x24c>)
 8002040:	f7ff ff96 	bl	8001f70 <DecodePrintPeripherals>
      printf("\n\n"
 8002044:	488c      	ldr	r0, [pc, #560]	; (8002278 <CmdDecode+0x250>)
 8002046:	f002 f93f 	bl	80042c8 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 800204a:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 800204c:	4620      	mov	r0, r4
 800204e:	b004      	add	sp, #16
 8002050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8002054:	4d87      	ldr	r5, [pc, #540]	; (8002274 <CmdDecode+0x24c>)
 8002056:	e008      	b.n	800206a <CmdDecode+0x42>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002058:	9c03      	ldr	r4, [sp, #12]
 800205a:	f7ff fe75 	bl	8001d48 <Uncompress>
 800205e:	4601      	mov	r1, r0
 8002060:	4620      	mov	r0, r4
 8002062:	f002 fa43 	bl	80044ec <strcasecmp>
 8002066:	b118      	cbz	r0, 8002070 <CmdDecode+0x48>
	p++;
 8002068:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800206a:	6828      	ldr	r0, [r5, #0]
 800206c:	2800      	cmp	r0, #0
 800206e:	d1f3      	bne.n	8002058 <CmdDecode+0x30>
      if(p->name == NULL) {
 8002070:	682c      	ldr	r4, [r5, #0]
 8002072:	b93c      	cbnz	r4, 8002084 <CmdDecode+0x5c>
	printf("%s is not a valid peripheral name\n"
 8002074:	9903      	ldr	r1, [sp, #12]
 8002076:	4881      	ldr	r0, [pc, #516]	; (800227c <CmdDecode+0x254>)
 8002078:	f002 f88a 	bl	8004190 <iprintf>
	DecodePrintPeripherals(Peripherals);
 800207c:	487d      	ldr	r0, [pc, #500]	; (8002274 <CmdDecode+0x24c>)
 800207e:	f7ff ff77 	bl	8001f70 <DecodePrintPeripherals>
	return CmdReturnOk;
 8002082:	e7e3      	b.n	800204c <CmdDecode+0x24>
      printf("Valid registers for peripheral %s:\n"
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff fe5f 	bl	8001d48 <Uncompress>
 800208a:	4601      	mov	r1, r0
 800208c:	487c      	ldr	r0, [pc, #496]	; (8002280 <CmdDecode+0x258>)
 800208e:	f002 f87f 	bl	8004190 <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8002092:	89a9      	ldrh	r1, [r5, #12]
 8002094:	68a8      	ldr	r0, [r5, #8]
 8002096:	f7ff ff95 	bl	8001fc4 <DecodePrintRegisters>
    printf("\n\n");
 800209a:	e009      	b.n	80020b0 <CmdDecode+0x88>
  rc = fetch_string_arg(&pname);
 800209c:	4668      	mov	r0, sp
 800209e:	f7ff fa85 	bl	80015ac <fetch_string_arg>
  if(rc) {
 80020a2:	b180      	cbz	r0, 80020c6 <CmdDecode+0x9e>
    printf("Missing peripheral name, please chose one of:\n\n");
 80020a4:	4877      	ldr	r0, [pc, #476]	; (8002284 <CmdDecode+0x25c>)
 80020a6:	f002 f90f 	bl	80042c8 <puts>
    DecodePrintPeripherals(Peripherals);
 80020aa:	4872      	ldr	r0, [pc, #456]	; (8002274 <CmdDecode+0x24c>)
 80020ac:	f7ff ff60 	bl	8001f70 <DecodePrintPeripherals>
    printf("\n\n");
 80020b0:	4875      	ldr	r0, [pc, #468]	; (8002288 <CmdDecode+0x260>)
 80020b2:	e7c8      	b.n	8002046 <CmdDecode+0x1e>
    p++;
 80020b4:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80020b6:	6828      	ldr	r0, [r5, #0]
 80020b8:	9c00      	ldr	r4, [sp, #0]
 80020ba:	b930      	cbnz	r0, 80020ca <CmdDecode+0xa2>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 80020bc:	9900      	ldr	r1, [sp, #0]
 80020be:	4873      	ldr	r0, [pc, #460]	; (800228c <CmdDecode+0x264>)
 80020c0:	f002 f866 	bl	8004190 <iprintf>
    DecodePrintPeripherals(Peripherals);
 80020c4:	e7f1      	b.n	80020aa <CmdDecode+0x82>
  p = Peripherals;
 80020c6:	4d6b      	ldr	r5, [pc, #428]	; (8002274 <CmdDecode+0x24c>)
 80020c8:	e7f5      	b.n	80020b6 <CmdDecode+0x8e>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80020ca:	f7ff fe3d 	bl	8001d48 <Uncompress>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4620      	mov	r0, r4
 80020d2:	f002 fa0b 	bl	80044ec <strcasecmp>
 80020d6:	4604      	mov	r4, r0
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1eb      	bne.n	80020b4 <CmdDecode+0x8c>
  if(p->name == NULL) {
 80020dc:	682b      	ldr	r3, [r5, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ec      	beq.n	80020bc <CmdDecode+0x94>
  rc = fetch_string_arg(&rname);
 80020e2:	a801      	add	r0, sp, #4
 80020e4:	f7ff fa62 	bl	80015ac <fetch_string_arg>
  if(rc) {
 80020e8:	b120      	cbz	r0, 80020f4 <CmdDecode+0xcc>
    DecodePeripheral(p,0);
 80020ea:	4621      	mov	r1, r4
 80020ec:	4628      	mov	r0, r5
 80020ee:	f7ff ff15 	bl	8001f1c <DecodePeripheral>
    return CmdReturnOk;
 80020f2:	e7ab      	b.n	800204c <CmdDecode+0x24>
  r = p->registers;
 80020f4:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 80020f6:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 80020f8:	9c01      	ldr	r4, [sp, #4]
 80020fa:	2f00      	cmp	r7, #0
 80020fc:	f000 80a8 	beq.w	8002250 <CmdDecode+0x228>
 8002100:	6830      	ldr	r0, [r6, #0]
 8002102:	f7ff fe21 	bl	8001d48 <Uncompress>
 8002106:	4601      	mov	r1, r0
 8002108:	4620      	mov	r0, r4
 800210a:	f002 f9ef 	bl	80044ec <strcasecmp>
 800210e:	3f01      	subs	r7, #1
 8002110:	4604      	mov	r4, r0
 8002112:	b958      	cbnz	r0, 800212c <CmdDecode+0x104>
  rc = fetch_string_arg(&fname);
 8002114:	a802      	add	r0, sp, #8
 8002116:	f7ff fa49 	bl	80015ac <fetch_string_arg>
  if(rc == 0) {
 800211a:	b170      	cbz	r0, 800213a <CmdDecode+0x112>
  val = DecodeReadRegister(p,r);
 800211c:	4631      	mov	r1, r6
 800211e:	4628      	mov	r0, r5
 8002120:	f7ff fe50 	bl	8001dc4 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002124:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8002126:	4602      	mov	r2, r0
 8002128:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 800212a:	e017      	b.n	800215c <CmdDecode+0x134>
    r++;
 800212c:	3610      	adds	r6, #16
 800212e:	e7e3      	b.n	80020f8 <CmdDecode+0xd0>
      DecodePeripheral(p,1);
 8002130:	2101      	movs	r1, #1
 8002132:	4628      	mov	r0, r5
 8002134:	f7ff fef2 	bl	8001f1c <DecodePeripheral>
      return CmdReturnOk;
 8002138:	e787      	b.n	800204a <CmdDecode+0x22>
    if(strcasecmp(fname,"val") == 0) {
 800213a:	4955      	ldr	r1, [pc, #340]	; (8002290 <CmdDecode+0x268>)
 800213c:	9802      	ldr	r0, [sp, #8]
 800213e:	f002 f9d5 	bl	80044ec <strcasecmp>
 8002142:	b980      	cbnz	r0, 8002166 <CmdDecode+0x13e>
      rc = fetch_uint32_arg(&val);
 8002144:	a803      	add	r0, sp, #12
 8002146:	f7ff fa13 	bl	8001570 <fetch_uint32_arg>
      if(rc) {
 800214a:	4604      	mov	r4, r0
 800214c:	b120      	cbz	r0, 8002158 <CmdDecode+0x130>
	printf("Missing value to use in decode\n");
 800214e:	4851      	ldr	r0, [pc, #324]	; (8002294 <CmdDecode+0x26c>)
 8002150:	f002 f8ba 	bl	80042c8 <puts>
	return CmdReturnBadParameter4;
 8002154:	2407      	movs	r4, #7
 8002156:	e779      	b.n	800204c <CmdDecode+0x24>
      DecodeRegister(r,p->base,val,1);
 8002158:	9a03      	ldr	r2, [sp, #12]
 800215a:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 800215c:	6869      	ldr	r1, [r5, #4]
 800215e:	4630      	mov	r0, r6
 8002160:	f7ff feac 	bl	8001ebc <DecodeRegister>
  return CmdReturnOk;
 8002164:	e772      	b.n	800204c <CmdDecode+0x24>
    f = r->fields;
 8002166:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8002168:	b15f      	cbz	r7, 8002182 <CmdDecode+0x15a>
	  && (f->name != NULL)
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	b148      	cbz	r0, 8002182 <CmdDecode+0x15a>
	  && strcasecmp(fname,Uncompress(f->name))) {
 800216e:	9c02      	ldr	r4, [sp, #8]
 8002170:	f7ff fdea 	bl	8001d48 <Uncompress>
 8002174:	4601      	mov	r1, r0
 8002176:	4620      	mov	r0, r4
 8002178:	f002 f9b8 	bl	80044ec <strcasecmp>
 800217c:	b998      	cbnz	r0, 80021a6 <CmdDecode+0x17e>
    if((f != NULL) && f->name != NULL) {
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b99b      	cbnz	r3, 80021aa <CmdDecode+0x182>
    errno = 0;
 8002182:	f001 f8f5 	bl	8003370 <__errno>
 8002186:	2700      	movs	r7, #0
 8002188:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 800218a:	463a      	mov	r2, r7
 800218c:	4639      	mov	r1, r7
 800218e:	9802      	ldr	r0, [sp, #8]
 8002190:	f002 fa9c 	bl	80046cc <strtoul>
 8002194:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8002196:	f001 f8eb 	bl	8003370 <__errno>
 800219a:	6804      	ldr	r4, [r0, #0]
 800219c:	2c00      	cmp	r4, #0
 800219e:	d042      	beq.n	8002226 <CmdDecode+0x1fe>
      printf("Invalid number '%s' entered.\n",
 80021a0:	9902      	ldr	r1, [sp, #8]
 80021a2:	483d      	ldr	r0, [pc, #244]	; (8002298 <CmdDecode+0x270>)
 80021a4:	e00b      	b.n	80021be <CmdDecode+0x196>
      f++;
 80021a6:	3708      	adds	r7, #8
 80021a8:	e7de      	b.n	8002168 <CmdDecode+0x140>
      rc = fetch_uint32_arg(&val);
 80021aa:	a803      	add	r0, sp, #12
 80021ac:	f7ff f9e0 	bl	8001570 <fetch_uint32_arg>
      if(rc) {
 80021b0:	4604      	mov	r4, r0
 80021b2:	b138      	cbz	r0, 80021c4 <CmdDecode+0x19c>
	printf("Missing Value to program into register %s\n",
 80021b4:	6830      	ldr	r0, [r6, #0]
 80021b6:	f7ff fdc7 	bl	8001d48 <Uncompress>
 80021ba:	4601      	mov	r1, r0
 80021bc:	4837      	ldr	r0, [pc, #220]	; (800229c <CmdDecode+0x274>)
      printf("Invalid number '%s' entered.\n",
 80021be:	f001 ffe7 	bl	8004190 <iprintf>
      return CmdReturnOk;
 80021c2:	e742      	b.n	800204a <CmdDecode+0x22>
      t = DecodeReadRegister(p,r);
 80021c4:	4631      	mov	r1, r6
 80021c6:	4628      	mov	r0, r5
 80021c8:	f7ff fdfc 	bl	8001dc4 <DecodeReadRegister>
      m = (1<<f->width)-1;
 80021cc:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 80021ce:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	4093      	lsls	r3, r2
 80021d4:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 80021d6:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 80021da:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 80021de:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 80021e2:	9803      	ldr	r0, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 80021e4:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 80021e8:	4003      	ands	r3, r0
 80021ea:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 80021ec:	431a      	orrs	r2, r3
 80021ee:	4631      	mov	r1, r6
 80021f0:	4628      	mov	r0, r5
 80021f2:	f7ff fe11 	bl	8001e18 <DecodeWriteRegister>
      printf("%s.",
 80021f6:	6828      	ldr	r0, [r5, #0]
 80021f8:	f7ff fda6 	bl	8001d48 <Uncompress>
 80021fc:	4601      	mov	r1, r0
 80021fe:	4828      	ldr	r0, [pc, #160]	; (80022a0 <CmdDecode+0x278>)
 8002200:	f001 ffc6 	bl	8004190 <iprintf>
      printf("%s.",
 8002204:	6830      	ldr	r0, [r6, #0]
 8002206:	f7ff fd9f 	bl	8001d48 <Uncompress>
 800220a:	4601      	mov	r1, r0
 800220c:	4824      	ldr	r0, [pc, #144]	; (80022a0 <CmdDecode+0x278>)
 800220e:	f001 ffbf 	bl	8004190 <iprintf>
      printf("%s (%d) -> (%d)\n",
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	f7ff fd98 	bl	8001d48 <Uncompress>
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	4601      	mov	r1, r0
 800221c:	4642      	mov	r2, r8
 800221e:	4821      	ldr	r0, [pc, #132]	; (80022a4 <CmdDecode+0x27c>)
 8002220:	f001 ffb6 	bl	8004190 <iprintf>
      return CmdReturnOk;
 8002224:	e712      	b.n	800204c <CmdDecode+0x24>
    DecodeWriteRegister(p,r,val);
 8002226:	9a03      	ldr	r2, [sp, #12]
 8002228:	4631      	mov	r1, r6
 800222a:	4628      	mov	r0, r5
 800222c:	f7ff fdf4 	bl	8001e18 <DecodeWriteRegister>
    printf("%s.",
 8002230:	6828      	ldr	r0, [r5, #0]
 8002232:	f7ff fd89 	bl	8001d48 <Uncompress>
 8002236:	4601      	mov	r1, r0
 8002238:	4819      	ldr	r0, [pc, #100]	; (80022a0 <CmdDecode+0x278>)
 800223a:	f001 ffa9 	bl	8004190 <iprintf>
    printf("%s = 0x%08x\n",
 800223e:	6830      	ldr	r0, [r6, #0]
 8002240:	f7ff fd82 	bl	8001d48 <Uncompress>
 8002244:	9a03      	ldr	r2, [sp, #12]
 8002246:	4601      	mov	r1, r0
 8002248:	4817      	ldr	r0, [pc, #92]	; (80022a8 <CmdDecode+0x280>)
 800224a:	f001 ffa1 	bl	8004190 <iprintf>
    return CmdReturnOk;
 800224e:	e6fd      	b.n	800204c <CmdDecode+0x24>
    if(strcasecmp(rname,"full") == 0) {
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <CmdDecode+0x284>)
 8002252:	4620      	mov	r0, r4
 8002254:	f002 f94a 	bl	80044ec <strcasecmp>
 8002258:	2800      	cmp	r0, #0
 800225a:	f43f af69 	beq.w	8002130 <CmdDecode+0x108>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 800225e:	6828      	ldr	r0, [r5, #0]
 8002260:	f7ff fd72 	bl	8001d48 <Uncompress>
 8002264:	4621      	mov	r1, r4
 8002266:	4602      	mov	r2, r0
 8002268:	4811      	ldr	r0, [pc, #68]	; (80022b0 <CmdDecode+0x288>)
 800226a:	f001 ff91 	bl	8004190 <iprintf>
 800226e:	e710      	b.n	8002092 <CmdDecode+0x6a>
 8002270:	08012251 	.word	0x08012251
 8002274:	0800e26c 	.word	0x0800e26c
 8002278:	08012464 	.word	0x08012464
 800227c:	080124b9 	.word	0x080124b9
 8002280:	080124f4 	.word	0x080124f4
 8002284:	08012519 	.word	0x08012519
 8002288:	08012582 	.word	0x08012582
 800228c:	08012548 	.word	0x08012548
 8002290:	080125c1 	.word	0x080125c1
 8002294:	080125c5 	.word	0x080125c5
 8002298:	08012624 	.word	0x08012624
 800229c:	080125e4 	.word	0x080125e4
 80022a0:	0801260f 	.word	0x0801260f
 80022a4:	08012613 	.word	0x08012613
 80022a8:	08012642 	.word	0x08012642
 80022ac:	0801264f 	.word	0x0801264f
 80022b0:	08012584 	.word	0x08012584

080022b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	2400      	movs	r4, #0
{
 80022b8:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ba:	4621      	mov	r1, r4
 80022bc:	2214      	movs	r2, #20
 80022be:	a803      	add	r0, sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80022c4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c6:	f001 fa4a 	bl	800375e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <SystemClock_Config+0x94>)
 80022cc:	9401      	str	r4, [sp, #4]
 80022ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <SystemClock_Config+0x98>)
 80022e2:	9402      	str	r4, [sp, #8]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022f2:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022f4:	2209      	movs	r2, #9
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002300:	2402      	movs	r4, #2
 8002302:	2301      	movs	r3, #1
 8002304:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002308:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800230c:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 800230e:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002310:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002312:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002316:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800231a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231c:	f000 f914 	bl	8002548 <HAL_RCC_OscConfig>
 8002320:	b108      	cbz	r0, 8002326 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 8002322:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	e7fe      	b.n	8002324 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002326:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002328:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002330:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002334:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002336:	2103      	movs	r1, #3
 8002338:	a803      	add	r0, sp, #12
 800233a:	f000 fae3 	bl	8002904 <HAL_RCC_ClockConfig>
 800233e:	b108      	cbz	r0, 8002344 <SystemClock_Config+0x90>
 8002340:	b672      	cpsid	i
  while (1)
 8002342:	e7fe      	b.n	8002342 <SystemClock_Config+0x8e>
}
 8002344:	b014      	add	sp, #80	; 0x50
 8002346:	bd10      	pop	{r4, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000

08002350 <main>:
{
 8002350:	b500      	push	{lr}
 8002352:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002354:	f000 fbb6 	bl	8002ac4 <HAL_Init>
  SystemClock_Config();
 8002358:	f7ff ffac 	bl	80022b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	2214      	movs	r2, #20
 800235e:	2100      	movs	r1, #0
 8002360:	eb0d 0002 	add.w	r0, sp, r2
 8002364:	f001 f9fb 	bl	800375e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002368:	2400      	movs	r4, #0
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <main+0xec>)
 800236c:	9401      	str	r4, [sp, #4]
 800236e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002370:	4833      	ldr	r0, [pc, #204]	; (8002440 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	f042 0204 	orr.w	r2, r2, #4
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237a:	f002 0204 	and.w	r2, r2, #4
 800237e:	9201      	str	r2, [sp, #4]
 8002380:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	9402      	str	r4, [sp, #8]
 8002384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
 800238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002392:	9202      	str	r2, [sp, #8]
 8002394:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	9403      	str	r4, [sp, #12]
 8002398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	f002 0201 	and.w	r2, r2, #1
 80023a6:	9203      	str	r2, [sp, #12]
 80023a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	9404      	str	r4, [sp, #16]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ae:	f042 0202 	orr.w	r2, r2, #2
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023ba:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023be:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023c2:	f000 fd65 	bl	8002e90 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ce:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023d2:	481c      	ldr	r0, [pc, #112]	; (8002444 <main+0xf4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023d6:	a905      	add	r1, sp, #20
 80023d8:	f000 fc92 	bl	8002d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	2020      	movs	r0, #32
 80023e0:	e9cd 0305 	strd	r0, r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023e4:	a905      	add	r1, sp, #20
 80023e6:	4816      	ldr	r0, [pc, #88]	; (8002440 <main+0xf0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f000 fc88 	bl	8002d00 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80023f0:	4815      	ldr	r0, [pc, #84]	; (8002448 <main+0xf8>)
  huart2.Init.BaudRate = 115200;
 80023f2:	f8df c060 	ldr.w	ip, [pc, #96]	; 8002454 <main+0x104>
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f6:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 80023f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80023fc:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002400:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002402:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800240a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800240c:	f000 fc4a 	bl	8002ca4 <HAL_UART_Init>
 8002410:	b108      	cbz	r0, 8002416 <main+0xc6>
 8002412:	b672      	cpsid	i
  while (1)
 8002414:	e7fe      	b.n	8002414 <main+0xc4>
  hiwdg.Instance = IWDG;
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <main+0xfc>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <main+0x100>)
 800241a:	2304      	movs	r3, #4
 800241c:	e9c0 2300 	strd	r2, r3, [r0]
  hiwdg.Init.Reload = 4095;
 8002420:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002424:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002426:	f000 fd38 	bl	8002e9a <HAL_IWDG_Init>
 800242a:	b108      	cbz	r0, 8002430 <main+0xe0>
 800242c:	b672      	cpsid	i
  while (1)
 800242e:	e7fe      	b.n	800242e <main+0xde>
  my_init();
 8002430:	f7fe fd86 	bl	8000f40 <my_init>
    my_main();
 8002434:	f7fe fd8f 	bl	8000f56 <my_main>
  while (1)
 8002438:	e7fc      	b.n	8002434 <main+0xe4>
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020800 	.word	0x40020800
 8002448:	20000cfc 	.word	0x20000cfc
 800244c:	20000cf0 	.word	0x20000cf0
 8002450:	40003000 	.word	0x40003000
 8002454:	40004400 	.word	0x40004400

08002458 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <NMI_Handler>

0800245a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler>

0800245c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler>

0800245e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler>

08002460 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler>

08002462 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:
 8002464:	4770      	bx	lr

08002466 <PendSV_Handler>:
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246a:	f000 fb45 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 800246e:	f7fd fec1 	bl	80001f4 <my_Tick>
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TaskingTickHandler();
 8002476:	f7ff bbff 	b.w	8001c78 <TaskingTickHandler>
	...

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_MspInit+0x38>)
 8002480:	2100      	movs	r1, #0
 8002482:	9100      	str	r1, [sp, #0]
 8002484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
 800248c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800248e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	9101      	str	r1, [sp, #4]
 8002498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024aa:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ac:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ae:	f000 bb35 	b.w	8002b1c <HAL_NVIC_SetPriorityGrouping>
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4604      	mov	r4, r0
 80024bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024be:	2214      	movs	r2, #20
 80024c0:	2100      	movs	r1, #0
 80024c2:	a803      	add	r0, sp, #12
 80024c4:	f001 f94b 	bl	800375e <memset>
  if(huart->Instance==USART2)
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_UART_MspInit+0x74>)
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d12a      	bne.n	8002526 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80024d4:	2400      	movs	r4, #0
 80024d6:	9401      	str	r4, [sp, #4]
 80024d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	4815      	ldr	r0, [pc, #84]	; (8002530 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80024dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024e8:	9201      	str	r2, [sp, #4]
 80024ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	9402      	str	r4, [sp, #8]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002508:	2103      	movs	r1, #3
 800250a:	2307      	movs	r3, #7
 800250c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	a903      	add	r1, sp, #12
 8002512:	f000 fbf5 	bl	8002d00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002516:	2026      	movs	r0, #38	; 0x26
 8002518:	4622      	mov	r2, r4
 800251a:	4621      	mov	r1, r4
 800251c:	f000 fb10 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002520:	2026      	movs	r0, #38	; 0x26
 8002522:	f000 fb3f 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002526:	b008      	add	sp, #32
 8002528:	bd10      	pop	{r4, pc}
 800252a:	bf00      	nop
 800252c:	40004400 	.word	0x40004400
 8002530:	40020000 	.word	0x40020000

08002534 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002534:	4a03      	ldr	r2, [pc, #12]	; (8002544 <SystemInit+0x10>)
 8002536:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800253a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800253e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	4604      	mov	r4, r0
 800254e:	b340      	cbz	r0, 80025a2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002550:	6803      	ldr	r3, [r0, #0]
 8002552:	07dd      	lsls	r5, r3, #31
 8002554:	d410      	bmi.n	8002578 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	0798      	lsls	r0, r3, #30
 800255a:	d45e      	bmi.n	800261a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	071a      	lsls	r2, r3, #28
 8002560:	f100 80a0 	bmi.w	80026a4 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	075b      	lsls	r3, r3, #29
 8002568:	f100 80c0 	bmi.w	80026ec <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	69a0      	ldr	r0, [r4, #24]
 800256e:	2800      	cmp	r0, #0
 8002570:	f040 8128 	bne.w	80027c4 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002574:	2000      	movs	r0, #0
 8002576:	e02b      	b.n	80025d0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002578:	4b8f      	ldr	r3, [pc, #572]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	f002 020c 	and.w	r2, r2, #12
 8002580:	2a04      	cmp	r2, #4
 8002582:	d007      	beq.n	8002594 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258a:	2a08      	cmp	r2, #8
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	0251      	lsls	r1, r2, #9
 8002592:	d508      	bpl.n	80025a6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	039a      	lsls	r2, r3, #14
 800259a:	d5dc      	bpl.n	8002556 <HAL_RCC_OscConfig+0xe>
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1d9      	bne.n	8002556 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80025ac:	d113      	bne.n	80025d6 <HAL_RCC_OscConfig+0x8e>
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025b6:	f000 faab 	bl	8002b10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4e7f      	ldr	r6, [pc, #508]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80025bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	6833      	ldr	r3, [r6, #0]
 80025c0:	039b      	lsls	r3, r3, #14
 80025c2:	d4c8      	bmi.n	8002556 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f000 faa4 	bl	8002b10 <HAL_GetTick>
 80025c8:	1b40      	subs	r0, r0, r5
 80025ca:	2864      	cmp	r0, #100	; 0x64
 80025cc:	d9f7      	bls.n	80025be <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80025ce:	2003      	movs	r0, #3
}
 80025d0:	b002      	add	sp, #8
 80025d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d6:	4d78      	ldr	r5, [pc, #480]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025d8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0xa8>
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ee:	e7e2      	b.n	80025b6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f4:	602b      	str	r3, [r5, #0]
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fe:	2a00      	cmp	r2, #0
 8002600:	d1d9      	bne.n	80025b6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002602:	f000 fa85 	bl	8002b10 <HAL_GetTick>
 8002606:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	039f      	lsls	r7, r3, #14
 800260c:	d5a3      	bpl.n	8002556 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260e:	f000 fa7f 	bl	8002b10 <HAL_GetTick>
 8002612:	1b80      	subs	r0, r0, r6
 8002614:	2864      	cmp	r0, #100	; 0x64
 8002616:	d9f7      	bls.n	8002608 <HAL_RCC_OscConfig+0xc0>
 8002618:	e7d9      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	f012 0f0c 	tst.w	r2, #12
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	2a08      	cmp	r2, #8
 800262c:	d111      	bne.n	8002652 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	025e      	lsls	r6, r3, #9
 8002632:	d40e      	bmi.n	8002652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002634:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002636:	6813      	ldr	r3, [r2, #0]
 8002638:	079d      	lsls	r5, r3, #30
 800263a:	d502      	bpl.n	8002642 <HAL_RCC_OscConfig+0xfa>
 800263c:	68e3      	ldr	r3, [r4, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d1af      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	6921      	ldr	r1, [r4, #16]
 8002646:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800264a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800264e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002650:	e784      	b.n	800255c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002652:	68e2      	ldr	r2, [r4, #12]
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 8002656:	b1b2      	cbz	r2, 8002686 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800265c:	f000 fa58 	bl	8002b10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4d55      	ldr	r5, [pc, #340]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002662:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	0798      	lsls	r0, r3, #30
 8002668:	d507      	bpl.n	800267a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	6922      	ldr	r2, [r4, #16]
 800266e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002672:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	e770      	b.n	800255c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f000 fa49 	bl	8002b10 <HAL_GetTick>
 800267e:	1b80      	subs	r0, r0, r6
 8002680:	2802      	cmp	r0, #2
 8002682:	d9ef      	bls.n	8002664 <HAL_RCC_OscConfig+0x11c>
 8002684:	e7a3      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002688:	f000 fa42 	bl	8002b10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268c:	4e4a      	ldr	r6, [pc, #296]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800268e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002690:	6833      	ldr	r3, [r6, #0]
 8002692:	0799      	lsls	r1, r3, #30
 8002694:	f57f af62 	bpl.w	800255c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002698:	f000 fa3a 	bl	8002b10 <HAL_GetTick>
 800269c:	1b40      	subs	r0, r0, r5
 800269e:	2802      	cmp	r0, #2
 80026a0:	d9f6      	bls.n	8002690 <HAL_RCC_OscConfig+0x148>
 80026a2:	e794      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a4:	6962      	ldr	r2, [r4, #20]
 80026a6:	4b45      	ldr	r3, [pc, #276]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 80026a8:	b182      	cbz	r2, 80026cc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80026aa:	2201      	movs	r2, #1
 80026ac:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80026b0:	f000 fa2e 	bl	8002b10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b4:	4e40      	ldr	r6, [pc, #256]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80026b6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80026ba:	079f      	lsls	r7, r3, #30
 80026bc:	f53f af52 	bmi.w	8002564 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c0:	f000 fa26 	bl	8002b10 <HAL_GetTick>
 80026c4:	1b40      	subs	r0, r0, r5
 80026c6:	2802      	cmp	r0, #2
 80026c8:	d9f6      	bls.n	80026b8 <HAL_RCC_OscConfig+0x170>
 80026ca:	e780      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80026cc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80026d0:	f000 fa1e 	bl	8002b10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4e38      	ldr	r6, [pc, #224]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80026d6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80026da:	0798      	lsls	r0, r3, #30
 80026dc:	f57f af42 	bpl.w	8002564 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f000 fa16 	bl	8002b10 <HAL_GetTick>
 80026e4:	1b40      	subs	r0, r0, r5
 80026e6:	2802      	cmp	r0, #2
 80026e8:	d9f6      	bls.n	80026d8 <HAL_RCC_OscConfig+0x190>
 80026ea:	e770      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80026f4:	d128      	bne.n	8002748 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800270a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4d2c      	ldr	r5, [pc, #176]	; (80027c0 <HAL_RCC_OscConfig+0x278>)
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	05d9      	lsls	r1, r3, #23
 8002712:	d51b      	bpl.n	800274c <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	68a3      	ldr	r3, [r4, #8]
 8002716:	4d28      	ldr	r5, [pc, #160]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002718:	2b01      	cmp	r3, #1
 800271a:	d127      	bne.n	800276c <HAL_RCC_OscConfig+0x224>
 800271c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002724:	f000 f9f4 	bl	8002b10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4e23      	ldr	r6, [pc, #140]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800272a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002732:	079b      	lsls	r3, r3, #30
 8002734:	d539      	bpl.n	80027aa <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002736:	2f00      	cmp	r7, #0
 8002738:	f43f af18 	beq.w	800256c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800273e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	e711      	b.n	800256c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002748:	2700      	movs	r7, #0
 800274a:	e7df      	b.n	800270c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002754:	f000 f9dc 	bl	8002b10 <HAL_GetTick>
 8002758:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	682b      	ldr	r3, [r5, #0]
 800275c:	05da      	lsls	r2, r3, #23
 800275e:	d4d9      	bmi.n	8002714 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f000 f9d6 	bl	8002b10 <HAL_GetTick>
 8002764:	1b80      	subs	r0, r0, r6
 8002766:	2802      	cmp	r0, #2
 8002768:	d9f7      	bls.n	800275a <HAL_RCC_OscConfig+0x212>
 800276a:	e730      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	2b05      	cmp	r3, #5
 800276e:	d104      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
 8002770:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	672b      	str	r3, [r5, #112]	; 0x70
 8002778:	e7d0      	b.n	800271c <HAL_RCC_OscConfig+0x1d4>
 800277a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	672a      	str	r2, [r5, #112]	; 0x70
 8002782:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002784:	f022 0204 	bic.w	r2, r2, #4
 8002788:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ca      	bne.n	8002724 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800278e:	f000 f9bf 	bl	8002b10 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002796:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800279a:	0798      	lsls	r0, r3, #30
 800279c:	d5cb      	bpl.n	8002736 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f000 f9b7 	bl	8002b10 <HAL_GetTick>
 80027a2:	1b80      	subs	r0, r0, r6
 80027a4:	4540      	cmp	r0, r8
 80027a6:	d9f7      	bls.n	8002798 <HAL_RCC_OscConfig+0x250>
 80027a8:	e711      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f000 f9b1 	bl	8002b10 <HAL_GetTick>
 80027ae:	1b40      	subs	r0, r0, r5
 80027b0:	4540      	cmp	r0, r8
 80027b2:	d9bd      	bls.n	8002730 <HAL_RCC_OscConfig+0x1e8>
 80027b4:	e70b      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	42470000 	.word	0x42470000
 80027c0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c4:	4d36      	ldr	r5, [pc, #216]	; (80028a0 <HAL_RCC_OscConfig+0x358>)
 80027c6:	68ab      	ldr	r3, [r5, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d03d      	beq.n	800284c <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d0:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x35c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80027d6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	d12b      	bne.n	8002832 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 80027da:	f000 f999 	bl	8002b10 <HAL_GetTick>
 80027de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	0199      	lsls	r1, r3, #6
 80027e4:	d41f      	bmi.n	8002826 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027fa:	0852      	lsrs	r2, r2, #1
 80027fc:	3a01      	subs	r2, #1
 80027fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002802:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4d26      	ldr	r5, [pc, #152]	; (80028a0 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8002808:	2201      	movs	r2, #1
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800280c:	f000 f980 	bl	8002b10 <HAL_GetTick>
 8002810:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	019a      	lsls	r2, r3, #6
 8002816:	f53f aead 	bmi.w	8002574 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281a:	f000 f979 	bl	8002b10 <HAL_GetTick>
 800281e:	1b00      	subs	r0, r0, r4
 8002820:	2802      	cmp	r0, #2
 8002822:	d9f6      	bls.n	8002812 <HAL_RCC_OscConfig+0x2ca>
 8002824:	e6d3      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002826:	f000 f973 	bl	8002b10 <HAL_GetTick>
 800282a:	1b80      	subs	r0, r0, r6
 800282c:	2802      	cmp	r0, #2
 800282e:	d9d7      	bls.n	80027e0 <HAL_RCC_OscConfig+0x298>
 8002830:	e6cd      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002832:	f000 f96d 	bl	8002b10 <HAL_GetTick>
 8002836:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	019b      	lsls	r3, r3, #6
 800283c:	f57f ae9a 	bpl.w	8002574 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f000 f966 	bl	8002b10 <HAL_GetTick>
 8002844:	1b00      	subs	r0, r0, r4
 8002846:	2802      	cmp	r0, #2
 8002848:	d9f6      	bls.n	8002838 <HAL_RCC_OscConfig+0x2f0>
 800284a:	e6c0      	b.n	80025ce <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	2801      	cmp	r0, #1
 800284e:	f43f aebf 	beq.w	80025d0 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002852:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002854:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285a:	4291      	cmp	r1, r2
 800285c:	f47f aea1 	bne.w	80025a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002860:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	428a      	cmp	r2, r1
 8002868:	f47f ae9b 	bne.w	80025a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800286e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002872:	401a      	ands	r2, r3
 8002874:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002878:	f47f ae93 	bne.w	80025a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800287e:	0852      	lsrs	r2, r2, #1
 8002880:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002884:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002886:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800288a:	f47f ae8a 	bne.w	80025a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800288e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002890:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002898:	f43f ae6c 	beq.w	8002574 <HAL_RCC_OscConfig+0x2c>
 800289c:	e681      	b.n	80025a2 <HAL_RCC_OscConfig+0x5a>
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000

080028a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a8:	4913      	ldr	r1, [pc, #76]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80028aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ac:	688b      	ldr	r3, [r1, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d01c      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x48>
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028bc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	bf14      	ite	ne
 80028c6:	480d      	ldrne	r0, [pc, #52]	; (80028fc <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c8:	480d      	ldreq	r0, [pc, #52]	; (8002900 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80028ce:	bf18      	it	ne
 80028d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d6:	fba1 0100 	umull	r0, r1, r1, r0
 80028da:	f7fd fe7f 	bl	80005dc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80028ea:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028ee:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <HAL_RCC_GetSysClockFreq+0x54>)
 80028f2:	e7fc      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80028f6:	e7fa      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x46>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	007a1200 	.word	0x007a1200
 8002900:	00f42400 	.word	0x00f42400

08002904 <HAL_RCC_ClockConfig>:
{
 8002904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002908:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800290a:	4604      	mov	r4, r0
 800290c:	b910      	cbnz	r0, 8002914 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800290e:	2001      	movs	r0, #1
}
 8002910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_ClockConfig+0x124>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f002 0207 	and.w	r2, r2, #7
 800291c:	428a      	cmp	r2, r1
 800291e:	d328      	bcc.n	8002972 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	0797      	lsls	r7, r2, #30
 8002924:	d42d      	bmi.n	8002982 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	07d0      	lsls	r0, r2, #31
 8002928:	d441      	bmi.n	80029ae <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292a:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_ClockConfig+0x124>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f002 0207 	and.w	r2, r2, #7
 8002932:	42aa      	cmp	r2, r5
 8002934:	d866      	bhi.n	8002a04 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	0751      	lsls	r1, r2, #29
 800293a:	d46c      	bmi.n	8002a16 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	0713      	lsls	r3, r2, #28
 800293e:	d507      	bpl.n	8002950 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002940:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 8002942:	6921      	ldr	r1, [r4, #16]
 8002944:	6893      	ldr	r3, [r2, #8]
 8002946:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800294a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800294e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002950:	f7ff ffaa 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 8002956:	4a36      	ldr	r2, [pc, #216]	; (8002a30 <HAL_RCC_ClockConfig+0x12c>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	40d8      	lsrs	r0, r3
 8002962:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_ClockConfig+0x130>)
 8002964:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002966:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_RCC_ClockConfig+0x134>)
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	f000 f887 	bl	8002a7c <HAL_InitTick>
  return HAL_OK;
 800296e:	2000      	movs	r0, #0
 8002970:	e7ce      	b.n	8002910 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	b2ca      	uxtb	r2, r1
 8002974:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	428b      	cmp	r3, r1
 800297e:	d1c6      	bne.n	800290e <HAL_RCC_ClockConfig+0xa>
 8002980:	e7ce      	b.n	8002920 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 8002984:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	bf1e      	ittt	ne
 800298a:	6899      	ldrne	r1, [r3, #8]
 800298c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002990:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002992:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	bf42      	ittt	mi
 8002996:	6899      	ldrmi	r1, [r3, #8]
 8002998:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800299c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299e:	4923      	ldr	r1, [pc, #140]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 80029a0:	68a0      	ldr	r0, [r4, #8]
 80029a2:	688b      	ldr	r3, [r1, #8]
 80029a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a8:	4303      	orrs	r3, r0
 80029aa:	608b      	str	r3, [r1, #8]
 80029ac:	e7bb      	b.n	8002926 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	6862      	ldr	r2, [r4, #4]
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 80029b2:	2a01      	cmp	r2, #1
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	d0a7      	beq.n	800290e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4e1b      	ldr	r6, [pc, #108]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 80029c0:	68b3      	ldr	r3, [r6, #8]
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80029ca:	f000 f8a1 	bl	8002b10 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d4:	68b3      	ldr	r3, [r6, #8]
 80029d6:	6862      	ldr	r2, [r4, #4]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029e0:	d0a3      	beq.n	800292a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f000 f895 	bl	8002b10 <HAL_GetTick>
 80029e6:	1bc0      	subs	r0, r0, r7
 80029e8:	4540      	cmp	r0, r8
 80029ea:	d9f3      	bls.n	80029d4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80029ec:	2003      	movs	r0, #3
 80029ee:	e78f      	b.n	8002910 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f0:	1e91      	subs	r1, r2, #2
 80029f2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	d802      	bhi.n	80029fe <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029fc:	e7de      	b.n	80029bc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	f013 0f02 	tst.w	r3, #2
 8002a02:	e7db      	b.n	80029bc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a04:	b2ea      	uxtb	r2, r5
 8002a06:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	42ab      	cmp	r3, r5
 8002a10:	f47f af7d 	bne.w	800290e <HAL_RCC_ClockConfig+0xa>
 8002a14:	e78f      	b.n	8002936 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a16:	4905      	ldr	r1, [pc, #20]	; (8002a2c <HAL_RCC_ClockConfig+0x128>)
 8002a18:	68e0      	ldr	r0, [r4, #12]
 8002a1a:	688b      	ldr	r3, [r1, #8]
 8002a1c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a20:	4303      	orrs	r3, r0
 8002a22:	608b      	str	r3, [r1, #8]
 8002a24:	e78a      	b.n	800293c <HAL_RCC_ClockConfig+0x38>
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	08012675 	.word	0x08012675
 8002a34:	200001a4 	.word	0x200001a4
 8002a38:	200001ac 	.word	0x200001ac

08002a3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a4a:	6810      	ldr	r0, [r2, #0]
}
 8002a4c:	40d8      	lsrs	r0, r3
 8002a4e:	4770      	bx	lr
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08012685 	.word	0x08012685
 8002a58:	200001a4 	.word	0x200001a4

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	4a03      	ldr	r2, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a6a:	6810      	ldr	r0, [r2, #0]
}
 8002a6c:	40d8      	lsrs	r0, r3
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08012685 	.word	0x08012685
 8002a78:	200001a4 	.word	0x200001a4

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_InitTick+0x3c>)
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_InitTick+0x40>)
{
 8002a82:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	7818      	ldrb	r0, [r3, #0]
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a8e:	6810      	ldr	r0, [r2, #0]
 8002a90:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a94:	f000 f894 	bl	8002bc0 <HAL_SYSTICK_Config>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	b958      	cbnz	r0, 8002ab4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9c:	2d0f      	cmp	r5, #15
 8002a9e:	d809      	bhi.n	8002ab4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa8:	f000 f84a 	bl	8002b40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_InitTick+0x44>)
 8002aae:	4620      	mov	r0, r4
 8002ab0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	e7fc      	b.n	8002ab2 <HAL_InitTick+0x36>
 8002ab8:	200001a4 	.word	0x200001a4
 8002abc:	200001a8 	.word	0x200001a8
 8002ac0:	200001ac 	.word	0x200001ac

08002ac4 <HAL_Init>:
{
 8002ac4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_Init+0x30>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ade:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 f81b 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7ff ffc8 	bl	8002a7c <HAL_InitTick>
  HAL_MspInit();
 8002aec:	f7ff fcc6 	bl	800247c <HAL_MspInit>
}
 8002af0:	2000      	movs	r0, #0
 8002af2:	bd08      	pop	{r3, pc}
 8002af4:	40023c00 	.word	0x40023c00

08002af8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002af8:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <HAL_IncTick+0x10>)
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <HAL_IncTick+0x14>)
 8002afc:	6811      	ldr	r1, [r2, #0]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	440b      	add	r3, r1
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000d40 	.word	0x20000d40
 8002b0c:	200001a8 	.word	0x200001a8

08002b10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b10:	4b01      	ldr	r3, [pc, #4]	; (8002b18 <HAL_GetTick+0x8>)
 8002b12:	6818      	ldr	r0, [r3, #0]
}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000d40 	.word	0x20000d40

08002b1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b1e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b38:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b42:	b530      	push	{r4, r5, lr}
 8002b44:	68dc      	ldr	r4, [r3, #12]
 8002b46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	2d04      	cmp	r5, #4
 8002b52:	bf28      	it	cs
 8002b54:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5c:	bf8c      	ite	hi
 8002b5e:	3c03      	subhi	r4, #3
 8002b60:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b62:	fa03 f505 	lsl.w	r5, r3, r5
 8002b66:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6a:	40a3      	lsls	r3, r4
 8002b6c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002b72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	bfac      	ite	ge
 8002b7a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	4a08      	ldrlt	r2, [pc, #32]	; (8002ba0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	bfb8      	it	lt
 8002b86:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	bfaa      	itet	ge
 8002b8e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b98:	bd30      	pop	{r4, r5, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00
 8002ba0:	e000ed14 	.word	0xe000ed14

08002ba4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	db08      	blt.n	8002bba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba8:	0942      	lsrs	r2, r0, #5
 8002baa:	2301      	movs	r3, #1
 8002bac:	f000 001f 	and.w	r0, r0, #31
 8002bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8002bb4:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <HAL_NVIC_EnableIRQ+0x18>)
 8002bb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc0:	3801      	subs	r0, #1
 8002bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bc6:	d20b      	bcs.n	8002be0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bcc:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bce:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	21f0      	movs	r1, #240	; 0xf0
 8002bd2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bda:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bdc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bde:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002be0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be8:	6802      	ldr	r2, [r0, #0]
 8002bea:	68c1      	ldr	r1, [r0, #12]
 8002bec:	6913      	ldr	r3, [r2, #16]
 8002bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bf2:	430b      	orrs	r3, r1
{
 8002bf4:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf6:	6113      	str	r3, [r2, #16]
{
 8002bf8:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bfa:	6883      	ldr	r3, [r0, #8]
 8002bfc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002bfe:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c00:	4303      	orrs	r3, r0
 8002c02:	6968      	ldr	r0, [r5, #20]
 8002c04:	4303      	orrs	r3, r0
 8002c06:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002c08:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002c0c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c10:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c12:	430b      	orrs	r3, r1
 8002c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c16:	6953      	ldr	r3, [r2, #20]
 8002c18:	69a9      	ldr	r1, [r5, #24]
 8002c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <UART_SetConfig+0xb8>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d003      	beq.n	8002c30 <UART_SetConfig+0x48>
 8002c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d123      	bne.n	8002c78 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff ff14 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c34:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c36:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c3c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002c40:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c44:	d11b      	bne.n	8002c7e <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c46:	19b2      	adds	r2, r6, r6
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	f7fd fcc5 	bl	80005dc <__aeabi_uldivmod>
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fbb0 f5f1 	udiv	r5, r0, r1
 8002c58:	fb01 0315 	mls	r3, r1, r5, r0
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	3332      	adds	r3, #50	; 0x32
 8002c60:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c64:	f003 0207 	and.w	r2, r3, #7
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002c6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c72:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c74:	60a3      	str	r3, [r4, #8]
  }
}
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff fee0 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8002c7c:	e7da      	b.n	8002c34 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c7e:	00b2      	lsls	r2, r6, #2
 8002c80:	0fb3      	lsrs	r3, r6, #30
 8002c82:	f7fd fcab 	bl	80005dc <__aeabi_uldivmod>
 8002c86:	2264      	movs	r2, #100	; 0x64
 8002c88:	fbb0 f1f2 	udiv	r1, r0, r2
 8002c8c:	fb02 0311 	mls	r3, r2, r1, r0
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	; 0x32
 8002c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c98:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002c9c:	e7ea      	b.n	8002c74 <UART_SetConfig+0x8c>
 8002c9e:	bf00      	nop
 8002ca0:	40011000 	.word	0x40011000

08002ca4 <HAL_UART_Init>:
{
 8002ca4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	b340      	cbz	r0, 8002cfc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cb2:	b91b      	cbnz	r3, 8002cbc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002cb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002cb8:	f7ff fbfe 	bl	80024b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002cbc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cbe:	2324      	movs	r3, #36	; 0x24
 8002cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002cc4:	68d3      	ldr	r3, [r2, #12]
 8002cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff ff8b 	bl	8002be8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002cee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002cfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7fc      	b.n	8002cfa <HAL_UART_Init+0x56>

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d04:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002e8c <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d08:	4a5e      	ldr	r2, [pc, #376]	; (8002e84 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002d0e:	2401      	movs	r4, #1
 8002d10:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002d16:	43ac      	bics	r4, r5
 8002d18:	f040 80a5 	bne.w	8002e66 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1c:	684d      	ldr	r5, [r1, #4]
 8002d1e:	f005 0403 	and.w	r4, r5, #3
 8002d22:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d26:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d28:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d30:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d34:	d834      	bhi.n	8002da0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002d36:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d38:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3c:	68cf      	ldr	r7, [r1, #12]
 8002d3e:	fa07 f708 	lsl.w	r7, r7, r8
 8002d42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002d46:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d48:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d4a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002d52:	409f      	lsls	r7, r3
 8002d54:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002d58:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002d5a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d60:	688f      	ldr	r7, [r1, #8]
 8002d62:	fa07 f708 	lsl.w	r7, r7, r8
 8002d66:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002d6c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	d119      	bne.n	8002da4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002d70:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002d74:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d78:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002d7c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002d84:	f04f 0e0f 	mov.w	lr, #15
 8002d88:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002d8c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d90:	690f      	ldr	r7, [r1, #16]
 8002d92:	fa07 f70b 	lsl.w	r7, r7, fp
 8002d96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002d9a:	f8ca 7020 	str.w	r7, [sl, #32]
 8002d9e:	e001      	b.n	8002da4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da0:	2c03      	cmp	r4, #3
 8002da2:	d1da      	bne.n	8002d5a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002da4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002daa:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dac:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dae:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002db2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	d057      	beq.n	8002e66 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	f04f 0a00 	mov.w	sl, #0
 8002dba:	f8cd a004 	str.w	sl, [sp, #4]
 8002dbe:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc2:	4c31      	ldr	r4, [pc, #196]	; (8002e88 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002dc8:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002dcc:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002dd0:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002dd4:	9601      	str	r6, [sp, #4]
 8002dd6:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd8:	f023 0603 	bic.w	r6, r3, #3
 8002ddc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002de0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002de8:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002df0:	270f      	movs	r7, #15
 8002df2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dfc:	d03a      	beq.n	8002e74 <HAL_GPIO_Init+0x174>
 8002dfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e02:	42a0      	cmp	r0, r4
 8002e04:	d038      	beq.n	8002e78 <HAL_GPIO_Init+0x178>
 8002e06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e0a:	42a0      	cmp	r0, r4
 8002e0c:	d036      	beq.n	8002e7c <HAL_GPIO_Init+0x17c>
 8002e0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e12:	42a0      	cmp	r0, r4
 8002e14:	d034      	beq.n	8002e80 <HAL_GPIO_Init+0x180>
 8002e16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e1a:	42a0      	cmp	r0, r4
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2404      	moveq	r4, #4
 8002e20:	2407      	movne	r4, #7
 8002e22:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e26:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e28:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002e2a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e30:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002e32:	bf54      	ite	pl
 8002e34:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e36:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002e3a:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002e3c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3e:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002e40:	bf54      	ite	pl
 8002e42:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e44:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002e48:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	bf54      	ite	pl
 8002e50:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e52:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002e56:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e5a:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	bf54      	ite	pl
 8002e5e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002e60:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002e64:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	3301      	adds	r3, #1
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	f47f af4f 	bne.w	8002d0c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002e6e:	b003      	add	sp, #12
 8002e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e74:	4654      	mov	r4, sl
 8002e76:	e7d4      	b.n	8002e22 <HAL_GPIO_Init+0x122>
 8002e78:	2401      	movs	r4, #1
 8002e7a:	e7d2      	b.n	8002e22 <HAL_GPIO_Init+0x122>
 8002e7c:	2402      	movs	r4, #2
 8002e7e:	e7d0      	b.n	8002e22 <HAL_GPIO_Init+0x122>
 8002e80:	2403      	movs	r4, #3
 8002e82:	e7ce      	b.n	8002e22 <HAL_GPIO_Init+0x122>
 8002e84:	40013c00 	.word	0x40013c00
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	b10a      	cbz	r2, 8002e96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e92:	6181      	str	r1, [r0, #24]
  }
}
 8002e94:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	0409      	lsls	r1, r1, #16
 8002e98:	e7fb      	b.n	8002e92 <HAL_GPIO_WritePin+0x2>

08002e9a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002e9a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	b310      	cbz	r0, 8002ee6 <HAL_IWDG_Init+0x4c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002ea0:	6803      	ldr	r3, [r0, #0]
 8002ea2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002ea8:	f245 5255 	movw	r2, #21845	; 0x5555
 8002eac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002eae:	6842      	ldr	r2, [r0, #4]
 8002eb0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002eb2:	6882      	ldr	r2, [r0, #8]
 8002eb4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002eb6:	f7ff fe2b 	bl	8002b10 <HAL_GetTick>
 8002eba:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	68d3      	ldr	r3, [r2, #12]
 8002ec0:	f013 0303 	ands.w	r3, r3, #3
 8002ec4:	d104      	bne.n	8002ed0 <HAL_IWDG_Init+0x36>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ec6:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8002eca:	6011      	str	r1, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ecc:	4618      	mov	r0, r3
}
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002ed0:	f7ff fe1e 	bl	8002b10 <HAL_GetTick>
 8002ed4:	1b40      	subs	r0, r0, r5
 8002ed6:	2831      	cmp	r0, #49	; 0x31
 8002ed8:	d9f0      	bls.n	8002ebc <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	079b      	lsls	r3, r3, #30
 8002ee0:	d0ec      	beq.n	8002ebc <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 8002ee2:	2003      	movs	r0, #3
 8002ee4:	e7f3      	b.n	8002ece <HAL_IWDG_Init+0x34>
    return HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	e7f1      	b.n	8002ece <HAL_IWDG_Init+0x34>

08002eea <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADC_Init>:
{
 8002ef8:	b538      	push	{r3, r4, r5, lr}
  if(hadc == NULL)
 8002efa:	4604      	mov	r4, r0
 8002efc:	2800      	cmp	r0, #0
 8002efe:	f000 809b 	beq.w	8003038 <HAL_ADC_Init+0x140>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f02:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002f04:	b925      	cbnz	r5, 8002f10 <HAL_ADC_Init+0x18>
    HAL_ADC_MspInit(hadc);
 8002f06:	f7ff fff6 	bl	8002ef6 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0a:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002f0c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f12:	06db      	lsls	r3, r3, #27
 8002f14:	f100 808e 	bmi.w	8003034 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8002f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f1e:	f023 0302 	bic.w	r3, r3, #2
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f28:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_ADC_Init+0x144>)
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002f30:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	6861      	ldr	r1, [r4, #4]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f3c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f50:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f52:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f56:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f5e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f60:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f6e:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_ADC_Init+0x148>)
 8002f70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f72:	428a      	cmp	r2, r1
 8002f74:	d052      	beq.n	800301c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002f7c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f7e:	6899      	ldr	r1, [r3, #8]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f84:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f92:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	f022 0202 	bic.w	r2, r2, #2
 8002f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	7e21      	ldrb	r1, [r4, #24]
 8002fa0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002fa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fa6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	d03e      	beq.n	800302c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fae:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	3901      	subs	r1, #1
 8002fc4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fc8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fcc:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	3901      	subs	r1, #1
 8002fd8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002fec:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002ff0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ff4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ffc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffe:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003000:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003004:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003006:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003014:	2300      	movs	r3, #0
 8003016:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800301a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800302a:	e7b2      	b.n	8002f92 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003032:	e7c9      	b.n	8002fc8 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8003034:	2001      	movs	r0, #1
 8003036:	e7ed      	b.n	8003014 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e7ee      	b.n	800301a <HAL_ADC_Init+0x122>
 800303c:	40012300 	.word	0x40012300
 8003040:	0f000001 	.word	0x0f000001

08003044 <HAL_ADC_Start>:
{
 8003044:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800304a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
{
 8003050:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003052:	d060      	beq.n	8003116 <HAL_ADC_Start+0xd2>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003054:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hadc);
 8003056:	2301      	movs	r3, #1
 8003058:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800305c:	688b      	ldr	r3, [r1, #8]
 800305e:	07d8      	lsls	r0, r3, #31
 8003060:	d50c      	bpl.n	800307c <HAL_ADC_Start+0x38>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003062:	688b      	ldr	r3, [r1, #8]
 8003064:	f013 0301 	ands.w	r3, r3, #1
 8003068:	d11a      	bne.n	80030a0 <HAL_ADC_Start+0x5c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800306c:	f041 0110 	orr.w	r1, r1, #16
 8003070:	6411      	str	r1, [r2, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003074:	f041 0101 	orr.w	r1, r1, #1
 8003078:	6451      	str	r1, [r2, #68]	; 0x44
 800307a:	e04a      	b.n	8003112 <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 800307c:	688b      	ldr	r3, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800307e:	4828      	ldr	r0, [pc, #160]	; (8003120 <HAL_ADC_Start+0xdc>)
    __HAL_ADC_ENABLE(hadc);
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	608b      	str	r3, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_ADC_Start+0xe0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fbb3 f3f0 	udiv	r3, r3, r0
 800308e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8003092:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8003094:	9b01      	ldr	r3, [sp, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0e3      	beq.n	8003062 <HAL_ADC_Start+0x1e>
      counter--;
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	3b01      	subs	r3, #1
 800309e:	e7f8      	b.n	8003092 <HAL_ADC_Start+0x4e>
    ADC_STATE_CLR_SET(hadc->State,
 80030a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6413      	str	r3, [r2, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030b0:	684b      	ldr	r3, [r1, #4]
 80030b2:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030b4:	bf41      	itttt	mi
 80030b6:	6c13      	ldrmi	r3, [r2, #64]	; 0x40
 80030b8:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80030bc:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80030c0:	6413      	strmi	r3, [r2, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030c4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030c8:	bf1c      	itt	ne
 80030ca:	6c53      	ldrne	r3, [r2, #68]	; 0x44
 80030cc:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80030d2:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030d4:	f06f 0322 	mvn.w	r3, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80030d8:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030dc:	600b      	str	r3, [r1, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_ADC_Start+0xe4>)
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	f012 021f 	ands.w	r2, r2, #31
 80030e6:	d109      	bne.n	80030fc <HAL_ADC_Start+0xb8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030e8:	6888      	ldr	r0, [r1, #8]
 80030ea:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80030ee:	d114      	bne.n	800311a <HAL_ADC_Start+0xd6>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f0:	688b      	ldr	r3, [r1, #8]
 80030f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030f6:	608b      	str	r3, [r1, #8]
}
 80030f8:	b002      	add	sp, #8
 80030fa:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_ADC_Start+0xe8>)
 80030fe:	4299      	cmp	r1, r3
 8003100:	d1fa      	bne.n	80030f8 <HAL_ADC_Start+0xb4>
 8003102:	688b      	ldr	r3, [r1, #8]
 8003104:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8003108:	d1f6      	bne.n	80030f8 <HAL_ADC_Start+0xb4>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800310a:	688a      	ldr	r2, [r1, #8]
 800310c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003110:	608a      	str	r2, [r1, #8]
  return HAL_OK;
 8003112:	4618      	mov	r0, r3
 8003114:	e7f0      	b.n	80030f8 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 8003116:	2002      	movs	r0, #2
 8003118:	e7ee      	b.n	80030f8 <HAL_ADC_Start+0xb4>
  return HAL_OK;
 800311a:	4610      	mov	r0, r2
 800311c:	e7ec      	b.n	80030f8 <HAL_ADC_Start+0xb4>
 800311e:	bf00      	nop
 8003120:	000f4240 	.word	0x000f4240
 8003124:	200001a4 	.word	0x200001a4
 8003128:	40012300 	.word	0x40012300
 800312c:	40012000 	.word	0x40012000

08003130 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003130:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d014      	beq.n	8003162 <HAL_ADC_Stop+0x32>
  __HAL_ADC_DISABLE(hadc);
 8003138:	6803      	ldr	r3, [r0, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	07db      	lsls	r3, r3, #31
 8003146:	d407      	bmi.n	8003158 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8003148:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800314a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003158:	2300      	movs	r3, #0
 800315a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800315e:	4618      	mov	r0, r3
 8003160:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8003162:	2002      	movs	r0, #2
}
 8003164:	4770      	bx	lr

08003166 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	0552      	lsls	r2, r2, #21
{
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003172:	d50b      	bpl.n	800318c <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003174:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003176:	05de      	lsls	r6, r3, #23
 8003178:	d508      	bpl.n	800318c <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800317c:	f043 0320 	orr.w	r3, r3, #32
 8003180:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8003182:	2300      	movs	r3, #0
 8003184:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003188:	2001      	movs	r0, #1
}
 800318a:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800318c:	f7ff fcc0 	bl	8002b10 <HAL_GetTick>
 8003190:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	0791      	lsls	r1, r2, #30
 8003198:	d50c      	bpl.n	80031b4 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800319a:	f06f 0212 	mvn.w	r2, #18
 800319e:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80031ae:	d017      	beq.n	80031e0 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 80031b0:	2000      	movs	r0, #0
 80031b2:	e7ea      	b.n	800318a <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80031b4:	1c68      	adds	r0, r5, #1
 80031b6:	d0ed      	beq.n	8003194 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031b8:	b965      	cbnz	r5, 80031d4 <HAL_ADC_PollForConversion+0x6e>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f013 0302 	ands.w	r3, r3, #2
 80031c2:	d1e6      	bne.n	8003192 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 80031c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031ca:	f042 0204 	orr.w	r2, r2, #4
 80031ce:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80031d0:	2003      	movs	r0, #3
 80031d2:	e7da      	b.n	800318a <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031d4:	f7ff fc9c 	bl	8002b10 <HAL_GetTick>
 80031d8:	1b80      	subs	r0, r0, r6
 80031da:	42a8      	cmp	r0, r5
 80031dc:	d8ed      	bhi.n	80031ba <HAL_ADC_PollForConversion+0x54>
 80031de:	e7d8      	b.n	8003192 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e0:	7e20      	ldrb	r0, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d1e4      	bne.n	80031b0 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80031ec:	d002      	beq.n	80031f4 <HAL_ADC_PollForConversion+0x8e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031ee:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031f0:	055a      	lsls	r2, r3, #21
 80031f2:	d4dd      	bmi.n	80031b0 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fa:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031fe:	04db      	lsls	r3, r3, #19
 8003200:	d4d6      	bmi.n	80031b0 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6423      	str	r3, [r4, #64]	; 0x40
 800320a:	e7be      	b.n	800318a <HAL_ADC_PollForConversion+0x24>

0800320c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800320c:	6803      	ldr	r3, [r0, #0]
 800320e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003210:	4770      	bx	lr
	...

08003214 <HAL_ADC_ConfigChannel>:
{
 8003214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800321a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d069      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0xe2>
 8003222:	2301      	movs	r3, #1
 8003224:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003228:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800322a:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800322c:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800322e:	2d09      	cmp	r5, #9
 8003230:	b2ac      	uxth	r4, r5
 8003232:	d934      	bls.n	800329e <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003234:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003238:	68df      	ldr	r7, [r3, #12]
 800323a:	3a1e      	subs	r2, #30
 800323c:	f04f 0c07 	mov.w	ip, #7
 8003240:	fa0c fc02 	lsl.w	ip, ip, r2
 8003244:	ea27 070c 	bic.w	r7, r7, ip
 8003248:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800324a:	68df      	ldr	r7, [r3, #12]
 800324c:	fa06 f202 	lsl.w	r2, r6, r2
 8003250:	433a      	orrs	r2, r7
 8003252:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003254:	6849      	ldr	r1, [r1, #4]
 8003256:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003258:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 800325c:	d82f      	bhi.n	80032be <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800325e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003260:	3a05      	subs	r2, #5
 8003262:	261f      	movs	r6, #31
 8003264:	4096      	lsls	r6, r2
 8003266:	ea21 0106 	bic.w	r1, r1, r6
 800326a:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	fa04 f202 	lsl.w	r2, r4, r2
 8003272:	430a      	orrs	r2, r1
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003276:	4a30      	ldr	r2, [pc, #192]	; (8003338 <HAL_ADC_ConfigChannel+0x124>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d10a      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x7e>
 800327c:	2d12      	cmp	r5, #18
 800327e:	d13c      	bne.n	80032fa <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003280:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_ADC_ConfigChannel+0x128>)
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003288:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003290:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8003292:	2300      	movs	r3, #0
 8003294:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003298:	4618      	mov	r0, r3
}
 800329a:	b003      	add	sp, #12
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800329e:	691f      	ldr	r7, [r3, #16]
 80032a0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80032a4:	f04f 0c07 	mov.w	ip, #7
 80032a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80032ac:	ea27 070c 	bic.w	r7, r7, ip
 80032b0:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032b2:	691f      	ldr	r7, [r3, #16]
 80032b4:	fa06 f202 	lsl.w	r2, r6, r2
 80032b8:	433a      	orrs	r2, r7
 80032ba:	611a      	str	r2, [r3, #16]
 80032bc:	e7ca      	b.n	8003254 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80032be:	290c      	cmp	r1, #12
 80032c0:	f04f 011f 	mov.w	r1, #31
 80032c4:	d80b      	bhi.n	80032de <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032c6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80032c8:	3a23      	subs	r2, #35	; 0x23
 80032ca:	4091      	lsls	r1, r2
 80032cc:	ea26 0101 	bic.w	r1, r6, r1
 80032d0:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032d4:	fa04 f202 	lsl.w	r2, r4, r2
 80032d8:	430a      	orrs	r2, r1
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
 80032dc:	e7cb      	b.n	8003276 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032de:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80032e0:	3a41      	subs	r2, #65	; 0x41
 80032e2:	4091      	lsls	r1, r2
 80032e4:	ea26 0101 	bic.w	r1, r6, r1
 80032e8:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ec:	fa04 f202 	lsl.w	r2, r4, r2
 80032f0:	430a      	orrs	r2, r1
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f4:	e7bf      	b.n	8003276 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80032f6:	2002      	movs	r0, #2
 80032f8:	e7cf      	b.n	800329a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_ADC_ConfigChannel+0x12c>)
 80032fc:	429d      	cmp	r5, r3
 80032fe:	d001      	beq.n	8003304 <HAL_ADC_ConfigChannel+0xf0>
 8003300:	2d11      	cmp	r5, #17
 8003302:	d1c6      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_ADC_ConfigChannel+0x128>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800330c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003314:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_ADC_ConfigChannel+0x12c>)
 8003318:	429d      	cmp	r5, r3
 800331a:	d1ba      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_ADC_ConfigChannel+0x130>)
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_ADC_ConfigChannel+0x134>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fbb3 f3f2 	udiv	r3, r3, r2
 8003326:	220a      	movs	r2, #10
 8003328:	4353      	muls	r3, r2
        counter--;
 800332a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800332c:	9b01      	ldr	r3, [sp, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0af      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8003332:	9b01      	ldr	r3, [sp, #4]
 8003334:	3b01      	subs	r3, #1
 8003336:	e7f8      	b.n	800332a <HAL_ADC_ConfigChannel+0x116>
 8003338:	40012000 	.word	0x40012000
 800333c:	40012300 	.word	0x40012300
 8003340:	10000012 	.word	0x10000012
 8003344:	200001a4 	.word	0x200001a4
 8003348:	000f4240 	.word	0x000f4240

0800334c <VersionPrint>:
const char VersionBuildDateString[] = "Fri Oct  1 12:03:53 2021";
const char VersionBuildUser[] = "harsh";

void VersionPrint(void)
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 800334c:	4a02      	ldr	r2, [pc, #8]	; (8003358 <VersionPrint+0xc>)
 800334e:	4903      	ldr	r1, [pc, #12]	; (800335c <VersionPrint+0x10>)
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <VersionPrint+0x14>)
 8003352:	f000 bf1d 	b.w	8004190 <iprintf>
 8003356:	bf00      	nop
 8003358:	080126e1 	.word	0x080126e1
 800335c:	080126c8 	.word	0x080126c8
 8003360:	0801268d 	.word	0x0801268d

08003364 <CmdVersion>:
}

ParserReturnVal_t CmdVersion(int mode)
{
 8003364:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8003366:	b908      	cbnz	r0, 800336c <CmdVersion+0x8>

   VersionPrint();
 8003368:	f7ff fff0 	bl	800334c <VersionPrint>
   return CmdReturnOk;
}
 800336c:	2000      	movs	r0, #0
 800336e:	bd08      	pop	{r3, pc}

08003370 <__errno>:
 8003370:	4b01      	ldr	r3, [pc, #4]	; (8003378 <__errno+0x8>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200001b0 	.word	0x200001b0

0800337c <__sflush_r>:
 800337c:	898a      	ldrh	r2, [r1, #12]
 800337e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003382:	4605      	mov	r5, r0
 8003384:	0710      	lsls	r0, r2, #28
 8003386:	460c      	mov	r4, r1
 8003388:	d458      	bmi.n	800343c <__sflush_r+0xc0>
 800338a:	684b      	ldr	r3, [r1, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	dc05      	bgt.n	800339c <__sflush_r+0x20>
 8003390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	dc02      	bgt.n	800339c <__sflush_r+0x20>
 8003396:	2000      	movs	r0, #0
 8003398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800339c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800339e:	2e00      	cmp	r6, #0
 80033a0:	d0f9      	beq.n	8003396 <__sflush_r+0x1a>
 80033a2:	2300      	movs	r3, #0
 80033a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033a8:	682f      	ldr	r7, [r5, #0]
 80033aa:	602b      	str	r3, [r5, #0]
 80033ac:	d032      	beq.n	8003414 <__sflush_r+0x98>
 80033ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	075a      	lsls	r2, r3, #29
 80033b4:	d505      	bpl.n	80033c2 <__sflush_r+0x46>
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	1ac0      	subs	r0, r0, r3
 80033ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033bc:	b10b      	cbz	r3, 80033c2 <__sflush_r+0x46>
 80033be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033c0:	1ac0      	subs	r0, r0, r3
 80033c2:	2300      	movs	r3, #0
 80033c4:	4602      	mov	r2, r0
 80033c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033c8:	6a21      	ldr	r1, [r4, #32]
 80033ca:	4628      	mov	r0, r5
 80033cc:	47b0      	blx	r6
 80033ce:	1c43      	adds	r3, r0, #1
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	d106      	bne.n	80033e2 <__sflush_r+0x66>
 80033d4:	6829      	ldr	r1, [r5, #0]
 80033d6:	291d      	cmp	r1, #29
 80033d8:	d82c      	bhi.n	8003434 <__sflush_r+0xb8>
 80033da:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <__sflush_r+0x108>)
 80033dc:	40ca      	lsrs	r2, r1
 80033de:	07d6      	lsls	r6, r2, #31
 80033e0:	d528      	bpl.n	8003434 <__sflush_r+0xb8>
 80033e2:	2200      	movs	r2, #0
 80033e4:	6062      	str	r2, [r4, #4]
 80033e6:	04d9      	lsls	r1, r3, #19
 80033e8:	6922      	ldr	r2, [r4, #16]
 80033ea:	6022      	str	r2, [r4, #0]
 80033ec:	d504      	bpl.n	80033f8 <__sflush_r+0x7c>
 80033ee:	1c42      	adds	r2, r0, #1
 80033f0:	d101      	bne.n	80033f6 <__sflush_r+0x7a>
 80033f2:	682b      	ldr	r3, [r5, #0]
 80033f4:	b903      	cbnz	r3, 80033f8 <__sflush_r+0x7c>
 80033f6:	6560      	str	r0, [r4, #84]	; 0x54
 80033f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fa:	602f      	str	r7, [r5, #0]
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d0ca      	beq.n	8003396 <__sflush_r+0x1a>
 8003400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003404:	4299      	cmp	r1, r3
 8003406:	d002      	beq.n	800340e <__sflush_r+0x92>
 8003408:	4628      	mov	r0, r5
 800340a:	f000 f9b1 	bl	8003770 <_free_r>
 800340e:	2000      	movs	r0, #0
 8003410:	6360      	str	r0, [r4, #52]	; 0x34
 8003412:	e7c1      	b.n	8003398 <__sflush_r+0x1c>
 8003414:	6a21      	ldr	r1, [r4, #32]
 8003416:	2301      	movs	r3, #1
 8003418:	4628      	mov	r0, r5
 800341a:	47b0      	blx	r6
 800341c:	1c41      	adds	r1, r0, #1
 800341e:	d1c7      	bne.n	80033b0 <__sflush_r+0x34>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0c4      	beq.n	80033b0 <__sflush_r+0x34>
 8003426:	2b1d      	cmp	r3, #29
 8003428:	d001      	beq.n	800342e <__sflush_r+0xb2>
 800342a:	2b16      	cmp	r3, #22
 800342c:	d101      	bne.n	8003432 <__sflush_r+0xb6>
 800342e:	602f      	str	r7, [r5, #0]
 8003430:	e7b1      	b.n	8003396 <__sflush_r+0x1a>
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003438:	81a3      	strh	r3, [r4, #12]
 800343a:	e7ad      	b.n	8003398 <__sflush_r+0x1c>
 800343c:	690f      	ldr	r7, [r1, #16]
 800343e:	2f00      	cmp	r7, #0
 8003440:	d0a9      	beq.n	8003396 <__sflush_r+0x1a>
 8003442:	0793      	lsls	r3, r2, #30
 8003444:	680e      	ldr	r6, [r1, #0]
 8003446:	bf08      	it	eq
 8003448:	694b      	ldreq	r3, [r1, #20]
 800344a:	600f      	str	r7, [r1, #0]
 800344c:	bf18      	it	ne
 800344e:	2300      	movne	r3, #0
 8003450:	eba6 0807 	sub.w	r8, r6, r7
 8003454:	608b      	str	r3, [r1, #8]
 8003456:	f1b8 0f00 	cmp.w	r8, #0
 800345a:	dd9c      	ble.n	8003396 <__sflush_r+0x1a>
 800345c:	6a21      	ldr	r1, [r4, #32]
 800345e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003460:	4643      	mov	r3, r8
 8003462:	463a      	mov	r2, r7
 8003464:	4628      	mov	r0, r5
 8003466:	47b0      	blx	r6
 8003468:	2800      	cmp	r0, #0
 800346a:	dc06      	bgt.n	800347a <__sflush_r+0xfe>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003472:	81a3      	strh	r3, [r4, #12]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003478:	e78e      	b.n	8003398 <__sflush_r+0x1c>
 800347a:	4407      	add	r7, r0
 800347c:	eba8 0800 	sub.w	r8, r8, r0
 8003480:	e7e9      	b.n	8003456 <__sflush_r+0xda>
 8003482:	bf00      	nop
 8003484:	20400001 	.word	0x20400001

08003488 <_fflush_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	690b      	ldr	r3, [r1, #16]
 800348c:	4605      	mov	r5, r0
 800348e:	460c      	mov	r4, r1
 8003490:	b913      	cbnz	r3, 8003498 <_fflush_r+0x10>
 8003492:	2500      	movs	r5, #0
 8003494:	4628      	mov	r0, r5
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 8003498:	b118      	cbz	r0, 80034a2 <_fflush_r+0x1a>
 800349a:	6983      	ldr	r3, [r0, #24]
 800349c:	b90b      	cbnz	r3, 80034a2 <_fflush_r+0x1a>
 800349e:	f000 f899 	bl	80035d4 <__sinit>
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <_fflush_r+0x6c>)
 80034a4:	429c      	cmp	r4, r3
 80034a6:	d11b      	bne.n	80034e0 <_fflush_r+0x58>
 80034a8:	686c      	ldr	r4, [r5, #4]
 80034aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ef      	beq.n	8003492 <_fflush_r+0xa>
 80034b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034b4:	07d0      	lsls	r0, r2, #31
 80034b6:	d404      	bmi.n	80034c2 <_fflush_r+0x3a>
 80034b8:	0599      	lsls	r1, r3, #22
 80034ba:	d402      	bmi.n	80034c2 <_fflush_r+0x3a>
 80034bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034be:	f000 f94c 	bl	800375a <__retarget_lock_acquire_recursive>
 80034c2:	4628      	mov	r0, r5
 80034c4:	4621      	mov	r1, r4
 80034c6:	f7ff ff59 	bl	800337c <__sflush_r>
 80034ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034cc:	07da      	lsls	r2, r3, #31
 80034ce:	4605      	mov	r5, r0
 80034d0:	d4e0      	bmi.n	8003494 <_fflush_r+0xc>
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	059b      	lsls	r3, r3, #22
 80034d6:	d4dd      	bmi.n	8003494 <_fflush_r+0xc>
 80034d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034da:	f000 f93f 	bl	800375c <__retarget_lock_release_recursive>
 80034de:	e7d9      	b.n	8003494 <_fflush_r+0xc>
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <_fflush_r+0x70>)
 80034e2:	429c      	cmp	r4, r3
 80034e4:	d101      	bne.n	80034ea <_fflush_r+0x62>
 80034e6:	68ac      	ldr	r4, [r5, #8]
 80034e8:	e7df      	b.n	80034aa <_fflush_r+0x22>
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <_fflush_r+0x74>)
 80034ec:	429c      	cmp	r4, r3
 80034ee:	bf08      	it	eq
 80034f0:	68ec      	ldreq	r4, [r5, #12]
 80034f2:	e7da      	b.n	80034aa <_fflush_r+0x22>
 80034f4:	08012808 	.word	0x08012808
 80034f8:	08012828 	.word	0x08012828
 80034fc:	080127e8 	.word	0x080127e8

08003500 <fflush>:
 8003500:	4601      	mov	r1, r0
 8003502:	b920      	cbnz	r0, 800350e <fflush+0xe>
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <fflush+0x18>)
 8003506:	4905      	ldr	r1, [pc, #20]	; (800351c <fflush+0x1c>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f000 b8e1 	b.w	80036d0 <_fwalk_reent>
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <fflush+0x20>)
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	f7ff bfb9 	b.w	8003488 <_fflush_r>
 8003516:	bf00      	nop
 8003518:	08012848 	.word	0x08012848
 800351c:	08003489 	.word	0x08003489
 8003520:	200001b0 	.word	0x200001b0

08003524 <std>:
 8003524:	2300      	movs	r3, #0
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
 800352a:	e9c0 3300 	strd	r3, r3, [r0]
 800352e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003532:	6083      	str	r3, [r0, #8]
 8003534:	8181      	strh	r1, [r0, #12]
 8003536:	6643      	str	r3, [r0, #100]	; 0x64
 8003538:	81c2      	strh	r2, [r0, #14]
 800353a:	6183      	str	r3, [r0, #24]
 800353c:	4619      	mov	r1, r3
 800353e:	2208      	movs	r2, #8
 8003540:	305c      	adds	r0, #92	; 0x5c
 8003542:	f000 f90c 	bl	800375e <memset>
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <std+0x38>)
 8003548:	6263      	str	r3, [r4, #36]	; 0x24
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <std+0x3c>)
 800354c:	62a3      	str	r3, [r4, #40]	; 0x28
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <std+0x40>)
 8003550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <std+0x44>)
 8003554:	6224      	str	r4, [r4, #32]
 8003556:	6323      	str	r3, [r4, #48]	; 0x30
 8003558:	bd10      	pop	{r4, pc}
 800355a:	bf00      	nop
 800355c:	08004465 	.word	0x08004465
 8003560:	08004487 	.word	0x08004487
 8003564:	080044bf 	.word	0x080044bf
 8003568:	080044e3 	.word	0x080044e3

0800356c <_cleanup_r>:
 800356c:	4901      	ldr	r1, [pc, #4]	; (8003574 <_cleanup_r+0x8>)
 800356e:	f000 b8af 	b.w	80036d0 <_fwalk_reent>
 8003572:	bf00      	nop
 8003574:	08003489 	.word	0x08003489

08003578 <__sfmoreglue>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	2268      	movs	r2, #104	; 0x68
 800357c:	1e4d      	subs	r5, r1, #1
 800357e:	4355      	muls	r5, r2
 8003580:	460e      	mov	r6, r1
 8003582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003586:	f000 f93f 	bl	8003808 <_malloc_r>
 800358a:	4604      	mov	r4, r0
 800358c:	b140      	cbz	r0, 80035a0 <__sfmoreglue+0x28>
 800358e:	2100      	movs	r1, #0
 8003590:	e9c0 1600 	strd	r1, r6, [r0]
 8003594:	300c      	adds	r0, #12
 8003596:	60a0      	str	r0, [r4, #8]
 8003598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800359c:	f000 f8df 	bl	800375e <memset>
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd70      	pop	{r4, r5, r6, pc}

080035a4 <__sfp_lock_acquire>:
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <__sfp_lock_acquire+0x8>)
 80035a6:	f000 b8d8 	b.w	800375a <__retarget_lock_acquire_recursive>
 80035aa:	bf00      	nop
 80035ac:	20000d45 	.word	0x20000d45

080035b0 <__sfp_lock_release>:
 80035b0:	4801      	ldr	r0, [pc, #4]	; (80035b8 <__sfp_lock_release+0x8>)
 80035b2:	f000 b8d3 	b.w	800375c <__retarget_lock_release_recursive>
 80035b6:	bf00      	nop
 80035b8:	20000d45 	.word	0x20000d45

080035bc <__sinit_lock_acquire>:
 80035bc:	4801      	ldr	r0, [pc, #4]	; (80035c4 <__sinit_lock_acquire+0x8>)
 80035be:	f000 b8cc 	b.w	800375a <__retarget_lock_acquire_recursive>
 80035c2:	bf00      	nop
 80035c4:	20000d46 	.word	0x20000d46

080035c8 <__sinit_lock_release>:
 80035c8:	4801      	ldr	r0, [pc, #4]	; (80035d0 <__sinit_lock_release+0x8>)
 80035ca:	f000 b8c7 	b.w	800375c <__retarget_lock_release_recursive>
 80035ce:	bf00      	nop
 80035d0:	20000d46 	.word	0x20000d46

080035d4 <__sinit>:
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	f7ff fff0 	bl	80035bc <__sinit_lock_acquire>
 80035dc:	69a3      	ldr	r3, [r4, #24]
 80035de:	b11b      	cbz	r3, 80035e8 <__sinit+0x14>
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e4:	f7ff bff0 	b.w	80035c8 <__sinit_lock_release>
 80035e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035ec:	6523      	str	r3, [r4, #80]	; 0x50
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <__sinit+0x68>)
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <__sinit+0x6c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	bf04      	itt	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	61a3      	streq	r3, [r4, #24]
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f820 	bl	8003644 <__sfp>
 8003604:	6060      	str	r0, [r4, #4]
 8003606:	4620      	mov	r0, r4
 8003608:	f000 f81c 	bl	8003644 <__sfp>
 800360c:	60a0      	str	r0, [r4, #8]
 800360e:	4620      	mov	r0, r4
 8003610:	f000 f818 	bl	8003644 <__sfp>
 8003614:	2200      	movs	r2, #0
 8003616:	60e0      	str	r0, [r4, #12]
 8003618:	2104      	movs	r1, #4
 800361a:	6860      	ldr	r0, [r4, #4]
 800361c:	f7ff ff82 	bl	8003524 <std>
 8003620:	68a0      	ldr	r0, [r4, #8]
 8003622:	2201      	movs	r2, #1
 8003624:	2109      	movs	r1, #9
 8003626:	f7ff ff7d 	bl	8003524 <std>
 800362a:	68e0      	ldr	r0, [r4, #12]
 800362c:	2202      	movs	r2, #2
 800362e:	2112      	movs	r1, #18
 8003630:	f7ff ff78 	bl	8003524 <std>
 8003634:	2301      	movs	r3, #1
 8003636:	61a3      	str	r3, [r4, #24]
 8003638:	e7d2      	b.n	80035e0 <__sinit+0xc>
 800363a:	bf00      	nop
 800363c:	08012848 	.word	0x08012848
 8003640:	0800356d 	.word	0x0800356d

08003644 <__sfp>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	4607      	mov	r7, r0
 8003648:	f7ff ffac 	bl	80035a4 <__sfp_lock_acquire>
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <__sfp+0x84>)
 800364e:	681e      	ldr	r6, [r3, #0]
 8003650:	69b3      	ldr	r3, [r6, #24]
 8003652:	b913      	cbnz	r3, 800365a <__sfp+0x16>
 8003654:	4630      	mov	r0, r6
 8003656:	f7ff ffbd 	bl	80035d4 <__sinit>
 800365a:	3648      	adds	r6, #72	; 0x48
 800365c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003660:	3b01      	subs	r3, #1
 8003662:	d503      	bpl.n	800366c <__sfp+0x28>
 8003664:	6833      	ldr	r3, [r6, #0]
 8003666:	b30b      	cbz	r3, 80036ac <__sfp+0x68>
 8003668:	6836      	ldr	r6, [r6, #0]
 800366a:	e7f7      	b.n	800365c <__sfp+0x18>
 800366c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003670:	b9d5      	cbnz	r5, 80036a8 <__sfp+0x64>
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <__sfp+0x88>)
 8003674:	60e3      	str	r3, [r4, #12]
 8003676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800367a:	6665      	str	r5, [r4, #100]	; 0x64
 800367c:	f000 f86c 	bl	8003758 <__retarget_lock_init_recursive>
 8003680:	f7ff ff96 	bl	80035b0 <__sfp_lock_release>
 8003684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800368c:	6025      	str	r5, [r4, #0]
 800368e:	61a5      	str	r5, [r4, #24]
 8003690:	2208      	movs	r2, #8
 8003692:	4629      	mov	r1, r5
 8003694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003698:	f000 f861 	bl	800375e <memset>
 800369c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036a4:	4620      	mov	r0, r4
 80036a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a8:	3468      	adds	r4, #104	; 0x68
 80036aa:	e7d9      	b.n	8003660 <__sfp+0x1c>
 80036ac:	2104      	movs	r1, #4
 80036ae:	4638      	mov	r0, r7
 80036b0:	f7ff ff62 	bl	8003578 <__sfmoreglue>
 80036b4:	4604      	mov	r4, r0
 80036b6:	6030      	str	r0, [r6, #0]
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d1d5      	bne.n	8003668 <__sfp+0x24>
 80036bc:	f7ff ff78 	bl	80035b0 <__sfp_lock_release>
 80036c0:	230c      	movs	r3, #12
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	e7ee      	b.n	80036a4 <__sfp+0x60>
 80036c6:	bf00      	nop
 80036c8:	08012848 	.word	0x08012848
 80036cc:	ffff0001 	.word	0xffff0001

080036d0 <_fwalk_reent>:
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4606      	mov	r6, r0
 80036d6:	4688      	mov	r8, r1
 80036d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036dc:	2700      	movs	r7, #0
 80036de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036e2:	f1b9 0901 	subs.w	r9, r9, #1
 80036e6:	d505      	bpl.n	80036f4 <_fwalk_reent+0x24>
 80036e8:	6824      	ldr	r4, [r4, #0]
 80036ea:	2c00      	cmp	r4, #0
 80036ec:	d1f7      	bne.n	80036de <_fwalk_reent+0xe>
 80036ee:	4638      	mov	r0, r7
 80036f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f4:	89ab      	ldrh	r3, [r5, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d907      	bls.n	800370a <_fwalk_reent+0x3a>
 80036fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036fe:	3301      	adds	r3, #1
 8003700:	d003      	beq.n	800370a <_fwalk_reent+0x3a>
 8003702:	4629      	mov	r1, r5
 8003704:	4630      	mov	r0, r6
 8003706:	47c0      	blx	r8
 8003708:	4307      	orrs	r7, r0
 800370a:	3568      	adds	r5, #104	; 0x68
 800370c:	e7e9      	b.n	80036e2 <_fwalk_reent+0x12>
	...

08003710 <__libc_init_array>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4d0d      	ldr	r5, [pc, #52]	; (8003748 <__libc_init_array+0x38>)
 8003714:	4c0d      	ldr	r4, [pc, #52]	; (800374c <__libc_init_array+0x3c>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	2600      	movs	r6, #0
 800371c:	42a6      	cmp	r6, r4
 800371e:	d109      	bne.n	8003734 <__libc_init_array+0x24>
 8003720:	4d0b      	ldr	r5, [pc, #44]	; (8003750 <__libc_init_array+0x40>)
 8003722:	4c0c      	ldr	r4, [pc, #48]	; (8003754 <__libc_init_array+0x44>)
 8003724:	f002 ff4e 	bl	80065c4 <_init>
 8003728:	1b64      	subs	r4, r4, r5
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	2600      	movs	r6, #0
 800372e:	42a6      	cmp	r6, r4
 8003730:	d105      	bne.n	800373e <__libc_init_array+0x2e>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	f855 3b04 	ldr.w	r3, [r5], #4
 8003738:	4798      	blx	r3
 800373a:	3601      	adds	r6, #1
 800373c:	e7ee      	b.n	800371c <__libc_init_array+0xc>
 800373e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003742:	4798      	blx	r3
 8003744:	3601      	adds	r6, #1
 8003746:	e7f2      	b.n	800372e <__libc_init_array+0x1e>
 8003748:	08012c48 	.word	0x08012c48
 800374c:	08012c48 	.word	0x08012c48
 8003750:	08012c48 	.word	0x08012c48
 8003754:	08012c4c 	.word	0x08012c4c

08003758 <__retarget_lock_init_recursive>:
 8003758:	4770      	bx	lr

0800375a <__retarget_lock_acquire_recursive>:
 800375a:	4770      	bx	lr

0800375c <__retarget_lock_release_recursive>:
 800375c:	4770      	bx	lr

0800375e <memset>:
 800375e:	4402      	add	r2, r0
 8003760:	4603      	mov	r3, r0
 8003762:	4293      	cmp	r3, r2
 8003764:	d100      	bne.n	8003768 <memset+0xa>
 8003766:	4770      	bx	lr
 8003768:	f803 1b01 	strb.w	r1, [r3], #1
 800376c:	e7f9      	b.n	8003762 <memset+0x4>
	...

08003770 <_free_r>:
 8003770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003772:	2900      	cmp	r1, #0
 8003774:	d044      	beq.n	8003800 <_free_r+0x90>
 8003776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377a:	9001      	str	r0, [sp, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f1a1 0404 	sub.w	r4, r1, #4
 8003782:	bfb8      	it	lt
 8003784:	18e4      	addlt	r4, r4, r3
 8003786:	f001 ffe1 	bl	800574c <__malloc_lock>
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <_free_r+0x94>)
 800378c:	9801      	ldr	r0, [sp, #4]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	b933      	cbnz	r3, 80037a0 <_free_r+0x30>
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6014      	str	r4, [r2, #0]
 8003796:	b003      	add	sp, #12
 8003798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800379c:	f001 bfdc 	b.w	8005758 <__malloc_unlock>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d908      	bls.n	80037b6 <_free_r+0x46>
 80037a4:	6825      	ldr	r5, [r4, #0]
 80037a6:	1961      	adds	r1, r4, r5
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf01      	itttt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	1949      	addeq	r1, r1, r5
 80037b2:	6021      	streq	r1, [r4, #0]
 80037b4:	e7ed      	b.n	8003792 <_free_r+0x22>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x50>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x46>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1855      	adds	r5, r2, r1
 80037c4:	42a5      	cmp	r5, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x70>
 80037c8:	6824      	ldr	r4, [r4, #0]
 80037ca:	4421      	add	r1, r4
 80037cc:	1854      	adds	r4, r2, r1
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1e0      	bne.n	8003796 <_free_r+0x26>
 80037d4:	681c      	ldr	r4, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	4421      	add	r1, r4
 80037dc:	6011      	str	r1, [r2, #0]
 80037de:	e7da      	b.n	8003796 <_free_r+0x26>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x78>
 80037e2:	230c      	movs	r3, #12
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	e7d6      	b.n	8003796 <_free_r+0x26>
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1961      	adds	r1, r4, r5
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf04      	itt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	bf04      	itt	eq
 80037f8:	1949      	addeq	r1, r1, r5
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6054      	str	r4, [r2, #4]
 80037fe:	e7ca      	b.n	8003796 <_free_r+0x26>
 8003800:	b003      	add	sp, #12
 8003802:	bd30      	pop	{r4, r5, pc}
 8003804:	20000d48 	.word	0x20000d48

08003808 <_malloc_r>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	1ccd      	adds	r5, r1, #3
 800380c:	f025 0503 	bic.w	r5, r5, #3
 8003810:	3508      	adds	r5, #8
 8003812:	2d0c      	cmp	r5, #12
 8003814:	bf38      	it	cc
 8003816:	250c      	movcc	r5, #12
 8003818:	2d00      	cmp	r5, #0
 800381a:	4606      	mov	r6, r0
 800381c:	db01      	blt.n	8003822 <_malloc_r+0x1a>
 800381e:	42a9      	cmp	r1, r5
 8003820:	d903      	bls.n	800382a <_malloc_r+0x22>
 8003822:	230c      	movs	r3, #12
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	2000      	movs	r0, #0
 8003828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382a:	f001 ff8f 	bl	800574c <__malloc_lock>
 800382e:	4921      	ldr	r1, [pc, #132]	; (80038b4 <_malloc_r+0xac>)
 8003830:	680a      	ldr	r2, [r1, #0]
 8003832:	4614      	mov	r4, r2
 8003834:	b99c      	cbnz	r4, 800385e <_malloc_r+0x56>
 8003836:	4f20      	ldr	r7, [pc, #128]	; (80038b8 <_malloc_r+0xb0>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b923      	cbnz	r3, 8003846 <_malloc_r+0x3e>
 800383c:	4621      	mov	r1, r4
 800383e:	4630      	mov	r0, r6
 8003840:	f7fd fcdc 	bl	80011fc <_sbrk_r>
 8003844:	6038      	str	r0, [r7, #0]
 8003846:	4629      	mov	r1, r5
 8003848:	4630      	mov	r0, r6
 800384a:	f7fd fcd7 	bl	80011fc <_sbrk_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	d123      	bne.n	800389a <_malloc_r+0x92>
 8003852:	230c      	movs	r3, #12
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	f001 ff7e 	bl	8005758 <__malloc_unlock>
 800385c:	e7e3      	b.n	8003826 <_malloc_r+0x1e>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	1b5b      	subs	r3, r3, r5
 8003862:	d417      	bmi.n	8003894 <_malloc_r+0x8c>
 8003864:	2b0b      	cmp	r3, #11
 8003866:	d903      	bls.n	8003870 <_malloc_r+0x68>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	441c      	add	r4, r3
 800386c:	6025      	str	r5, [r4, #0]
 800386e:	e004      	b.n	800387a <_malloc_r+0x72>
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	42a2      	cmp	r2, r4
 8003874:	bf0c      	ite	eq
 8003876:	600b      	streq	r3, [r1, #0]
 8003878:	6053      	strne	r3, [r2, #4]
 800387a:	4630      	mov	r0, r6
 800387c:	f001 ff6c 	bl	8005758 <__malloc_unlock>
 8003880:	f104 000b 	add.w	r0, r4, #11
 8003884:	1d23      	adds	r3, r4, #4
 8003886:	f020 0007 	bic.w	r0, r0, #7
 800388a:	1ac2      	subs	r2, r0, r3
 800388c:	d0cc      	beq.n	8003828 <_malloc_r+0x20>
 800388e:	1a1b      	subs	r3, r3, r0
 8003890:	50a3      	str	r3, [r4, r2]
 8003892:	e7c9      	b.n	8003828 <_malloc_r+0x20>
 8003894:	4622      	mov	r2, r4
 8003896:	6864      	ldr	r4, [r4, #4]
 8003898:	e7cc      	b.n	8003834 <_malloc_r+0x2c>
 800389a:	1cc4      	adds	r4, r0, #3
 800389c:	f024 0403 	bic.w	r4, r4, #3
 80038a0:	42a0      	cmp	r0, r4
 80038a2:	d0e3      	beq.n	800386c <_malloc_r+0x64>
 80038a4:	1a21      	subs	r1, r4, r0
 80038a6:	4630      	mov	r0, r6
 80038a8:	f7fd fca8 	bl	80011fc <_sbrk_r>
 80038ac:	3001      	adds	r0, #1
 80038ae:	d1dd      	bne.n	800386c <_malloc_r+0x64>
 80038b0:	e7cf      	b.n	8003852 <_malloc_r+0x4a>
 80038b2:	bf00      	nop
 80038b4:	20000d48 	.word	0x20000d48
 80038b8:	20000d4c 	.word	0x20000d4c

080038bc <__cvt>:
 80038bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	ec55 4b10 	vmov	r4, r5, d0
 80038c4:	2d00      	cmp	r5, #0
 80038c6:	460e      	mov	r6, r1
 80038c8:	4619      	mov	r1, r3
 80038ca:	462b      	mov	r3, r5
 80038cc:	bfbb      	ittet	lt
 80038ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80038d2:	461d      	movlt	r5, r3
 80038d4:	2300      	movge	r3, #0
 80038d6:	232d      	movlt	r3, #45	; 0x2d
 80038d8:	700b      	strb	r3, [r1, #0]
 80038da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80038e0:	4691      	mov	r9, r2
 80038e2:	f023 0820 	bic.w	r8, r3, #32
 80038e6:	bfbc      	itt	lt
 80038e8:	4622      	movlt	r2, r4
 80038ea:	4614      	movlt	r4, r2
 80038ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038f0:	d005      	beq.n	80038fe <__cvt+0x42>
 80038f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80038f6:	d100      	bne.n	80038fa <__cvt+0x3e>
 80038f8:	3601      	adds	r6, #1
 80038fa:	2102      	movs	r1, #2
 80038fc:	e000      	b.n	8003900 <__cvt+0x44>
 80038fe:	2103      	movs	r1, #3
 8003900:	ab03      	add	r3, sp, #12
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	ab02      	add	r3, sp, #8
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	ec45 4b10 	vmov	d0, r4, r5
 800390c:	4653      	mov	r3, sl
 800390e:	4632      	mov	r2, r6
 8003910:	f001 f88a 	bl	8004a28 <_dtoa_r>
 8003914:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003918:	4607      	mov	r7, r0
 800391a:	d102      	bne.n	8003922 <__cvt+0x66>
 800391c:	f019 0f01 	tst.w	r9, #1
 8003920:	d022      	beq.n	8003968 <__cvt+0xac>
 8003922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003926:	eb07 0906 	add.w	r9, r7, r6
 800392a:	d110      	bne.n	800394e <__cvt+0x92>
 800392c:	783b      	ldrb	r3, [r7, #0]
 800392e:	2b30      	cmp	r3, #48	; 0x30
 8003930:	d10a      	bne.n	8003948 <__cvt+0x8c>
 8003932:	2200      	movs	r2, #0
 8003934:	2300      	movs	r3, #0
 8003936:	4620      	mov	r0, r4
 8003938:	4629      	mov	r1, r5
 800393a:	f7fd fa91 	bl	8000e60 <__aeabi_dcmpeq>
 800393e:	b918      	cbnz	r0, 8003948 <__cvt+0x8c>
 8003940:	f1c6 0601 	rsb	r6, r6, #1
 8003944:	f8ca 6000 	str.w	r6, [sl]
 8003948:	f8da 3000 	ldr.w	r3, [sl]
 800394c:	4499      	add	r9, r3
 800394e:	2200      	movs	r2, #0
 8003950:	2300      	movs	r3, #0
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fd fa83 	bl	8000e60 <__aeabi_dcmpeq>
 800395a:	b108      	cbz	r0, 8003960 <__cvt+0xa4>
 800395c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003960:	2230      	movs	r2, #48	; 0x30
 8003962:	9b03      	ldr	r3, [sp, #12]
 8003964:	454b      	cmp	r3, r9
 8003966:	d307      	bcc.n	8003978 <__cvt+0xbc>
 8003968:	9b03      	ldr	r3, [sp, #12]
 800396a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800396c:	1bdb      	subs	r3, r3, r7
 800396e:	4638      	mov	r0, r7
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	b004      	add	sp, #16
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	1c59      	adds	r1, r3, #1
 800397a:	9103      	str	r1, [sp, #12]
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e7f0      	b.n	8003962 <__cvt+0xa6>

08003980 <__exponent>:
 8003980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003982:	4603      	mov	r3, r0
 8003984:	2900      	cmp	r1, #0
 8003986:	bfb8      	it	lt
 8003988:	4249      	neglt	r1, r1
 800398a:	f803 2b02 	strb.w	r2, [r3], #2
 800398e:	bfb4      	ite	lt
 8003990:	222d      	movlt	r2, #45	; 0x2d
 8003992:	222b      	movge	r2, #43	; 0x2b
 8003994:	2909      	cmp	r1, #9
 8003996:	7042      	strb	r2, [r0, #1]
 8003998:	dd2a      	ble.n	80039f0 <__exponent+0x70>
 800399a:	f10d 0407 	add.w	r4, sp, #7
 800399e:	46a4      	mov	ip, r4
 80039a0:	270a      	movs	r7, #10
 80039a2:	46a6      	mov	lr, r4
 80039a4:	460a      	mov	r2, r1
 80039a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80039aa:	fb07 1516 	mls	r5, r7, r6, r1
 80039ae:	3530      	adds	r5, #48	; 0x30
 80039b0:	2a63      	cmp	r2, #99	; 0x63
 80039b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80039b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039ba:	4631      	mov	r1, r6
 80039bc:	dcf1      	bgt.n	80039a2 <__exponent+0x22>
 80039be:	3130      	adds	r1, #48	; 0x30
 80039c0:	f1ae 0502 	sub.w	r5, lr, #2
 80039c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039c8:	1c44      	adds	r4, r0, #1
 80039ca:	4629      	mov	r1, r5
 80039cc:	4561      	cmp	r1, ip
 80039ce:	d30a      	bcc.n	80039e6 <__exponent+0x66>
 80039d0:	f10d 0209 	add.w	r2, sp, #9
 80039d4:	eba2 020e 	sub.w	r2, r2, lr
 80039d8:	4565      	cmp	r5, ip
 80039da:	bf88      	it	hi
 80039dc:	2200      	movhi	r2, #0
 80039de:	4413      	add	r3, r2
 80039e0:	1a18      	subs	r0, r3, r0
 80039e2:	b003      	add	sp, #12
 80039e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80039ee:	e7ed      	b.n	80039cc <__exponent+0x4c>
 80039f0:	2330      	movs	r3, #48	; 0x30
 80039f2:	3130      	adds	r1, #48	; 0x30
 80039f4:	7083      	strb	r3, [r0, #2]
 80039f6:	70c1      	strb	r1, [r0, #3]
 80039f8:	1d03      	adds	r3, r0, #4
 80039fa:	e7f1      	b.n	80039e0 <__exponent+0x60>

080039fc <_printf_float>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	ed2d 8b02 	vpush	{d8}
 8003a04:	b08d      	sub	sp, #52	; 0x34
 8003a06:	460c      	mov	r4, r1
 8003a08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	461f      	mov	r7, r3
 8003a10:	4605      	mov	r5, r0
 8003a12:	f001 fe09 	bl	8005628 <_localeconv_r>
 8003a16:	f8d0 a000 	ldr.w	sl, [r0]
 8003a1a:	4650      	mov	r0, sl
 8003a1c:	f7fc ff60 	bl	80008e0 <strlen>
 8003a20:	2300      	movs	r3, #0
 8003a22:	930a      	str	r3, [sp, #40]	; 0x28
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	9305      	str	r3, [sp, #20]
 8003a28:	f8d8 3000 	ldr.w	r3, [r8]
 8003a2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a30:	3307      	adds	r3, #7
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	f103 0208 	add.w	r2, r3, #8
 8003a3a:	f8c8 2000 	str.w	r2, [r8]
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a4e:	9307      	str	r3, [sp, #28]
 8003a50:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a54:	ee08 0a10 	vmov	s16, r0
 8003a58:	4b9f      	ldr	r3, [pc, #636]	; (8003cd8 <_printf_float+0x2dc>)
 8003a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a62:	f7fd fa2f 	bl	8000ec4 <__aeabi_dcmpun>
 8003a66:	bb88      	cbnz	r0, 8003acc <_printf_float+0xd0>
 8003a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a6c:	4b9a      	ldr	r3, [pc, #616]	; (8003cd8 <_printf_float+0x2dc>)
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a72:	f7fd fa09 	bl	8000e88 <__aeabi_dcmple>
 8003a76:	bb48      	cbnz	r0, 8003acc <_printf_float+0xd0>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	4649      	mov	r1, r9
 8003a80:	f7fd f9f8 	bl	8000e74 <__aeabi_dcmplt>
 8003a84:	b110      	cbz	r0, 8003a8c <_printf_float+0x90>
 8003a86:	232d      	movs	r3, #45	; 0x2d
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8c:	4b93      	ldr	r3, [pc, #588]	; (8003cdc <_printf_float+0x2e0>)
 8003a8e:	4894      	ldr	r0, [pc, #592]	; (8003ce0 <_printf_float+0x2e4>)
 8003a90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003a94:	bf94      	ite	ls
 8003a96:	4698      	movls	r8, r3
 8003a98:	4680      	movhi	r8, r0
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	9b05      	ldr	r3, [sp, #20]
 8003aa0:	f023 0204 	bic.w	r2, r3, #4
 8003aa4:	6022      	str	r2, [r4, #0]
 8003aa6:	f04f 0900 	mov.w	r9, #0
 8003aaa:	9700      	str	r7, [sp, #0]
 8003aac:	4633      	mov	r3, r6
 8003aae:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 f9d8 	bl	8003e68 <_printf_common>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	f040 8090 	bne.w	8003bde <_printf_float+0x1e2>
 8003abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac2:	b00d      	add	sp, #52	; 0x34
 8003ac4:	ecbd 8b02 	vpop	{d8}
 8003ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fd f9f6 	bl	8000ec4 <__aeabi_dcmpun>
 8003ad8:	b140      	cbz	r0, 8003aec <_printf_float+0xf0>
 8003ada:	464b      	mov	r3, r9
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bfbc      	itt	lt
 8003ae0:	232d      	movlt	r3, #45	; 0x2d
 8003ae2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ae6:	487f      	ldr	r0, [pc, #508]	; (8003ce4 <_printf_float+0x2e8>)
 8003ae8:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <_printf_float+0x2ec>)
 8003aea:	e7d1      	b.n	8003a90 <_printf_float+0x94>
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003af2:	9206      	str	r2, [sp, #24]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	d13f      	bne.n	8003b78 <_printf_float+0x17c>
 8003af8:	2306      	movs	r3, #6
 8003afa:	6063      	str	r3, [r4, #4]
 8003afc:	9b05      	ldr	r3, [sp, #20]
 8003afe:	6861      	ldr	r1, [r4, #4]
 8003b00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b04:	2300      	movs	r3, #0
 8003b06:	9303      	str	r3, [sp, #12]
 8003b08:	ab0a      	add	r3, sp, #40	; 0x28
 8003b0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b0e:	ab09      	add	r3, sp, #36	; 0x24
 8003b10:	ec49 8b10 	vmov	d0, r8, r9
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6022      	str	r2, [r4, #0]
 8003b18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f7ff fecd 	bl	80038bc <__cvt>
 8003b22:	9b06      	ldr	r3, [sp, #24]
 8003b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b26:	2b47      	cmp	r3, #71	; 0x47
 8003b28:	4680      	mov	r8, r0
 8003b2a:	d108      	bne.n	8003b3e <_printf_float+0x142>
 8003b2c:	1cc8      	adds	r0, r1, #3
 8003b2e:	db02      	blt.n	8003b36 <_printf_float+0x13a>
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	4299      	cmp	r1, r3
 8003b34:	dd41      	ble.n	8003bba <_printf_float+0x1be>
 8003b36:	f1ab 0b02 	sub.w	fp, fp, #2
 8003b3a:	fa5f fb8b 	uxtb.w	fp, fp
 8003b3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b42:	d820      	bhi.n	8003b86 <_printf_float+0x18a>
 8003b44:	3901      	subs	r1, #1
 8003b46:	465a      	mov	r2, fp
 8003b48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b4c:	9109      	str	r1, [sp, #36]	; 0x24
 8003b4e:	f7ff ff17 	bl	8003980 <__exponent>
 8003b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b54:	1813      	adds	r3, r2, r0
 8003b56:	2a01      	cmp	r2, #1
 8003b58:	4681      	mov	r9, r0
 8003b5a:	6123      	str	r3, [r4, #16]
 8003b5c:	dc02      	bgt.n	8003b64 <_printf_float+0x168>
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	07d2      	lsls	r2, r2, #31
 8003b62:	d501      	bpl.n	8003b68 <_printf_float+0x16c>
 8003b64:	3301      	adds	r3, #1
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d09c      	beq.n	8003aaa <_printf_float+0xae>
 8003b70:	232d      	movs	r3, #45	; 0x2d
 8003b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b76:	e798      	b.n	8003aaa <_printf_float+0xae>
 8003b78:	9a06      	ldr	r2, [sp, #24]
 8003b7a:	2a47      	cmp	r2, #71	; 0x47
 8003b7c:	d1be      	bne.n	8003afc <_printf_float+0x100>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1bc      	bne.n	8003afc <_printf_float+0x100>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e7b9      	b.n	8003afa <_printf_float+0xfe>
 8003b86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003b8a:	d118      	bne.n	8003bbe <_printf_float+0x1c2>
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	dd0b      	ble.n	8003baa <_printf_float+0x1ae>
 8003b92:	6121      	str	r1, [r4, #16]
 8003b94:	b913      	cbnz	r3, 8003b9c <_printf_float+0x1a0>
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	07d0      	lsls	r0, r2, #31
 8003b9a:	d502      	bpl.n	8003ba2 <_printf_float+0x1a6>
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	6123      	str	r3, [r4, #16]
 8003ba2:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ba4:	f04f 0900 	mov.w	r9, #0
 8003ba8:	e7de      	b.n	8003b68 <_printf_float+0x16c>
 8003baa:	b913      	cbnz	r3, 8003bb2 <_printf_float+0x1b6>
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	07d2      	lsls	r2, r2, #31
 8003bb0:	d501      	bpl.n	8003bb6 <_printf_float+0x1ba>
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	e7f4      	b.n	8003ba0 <_printf_float+0x1a4>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e7f2      	b.n	8003ba0 <_printf_float+0x1a4>
 8003bba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	db05      	blt.n	8003bd0 <_printf_float+0x1d4>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	6121      	str	r1, [r4, #16]
 8003bc8:	07d8      	lsls	r0, r3, #31
 8003bca:	d5ea      	bpl.n	8003ba2 <_printf_float+0x1a6>
 8003bcc:	1c4b      	adds	r3, r1, #1
 8003bce:	e7e7      	b.n	8003ba0 <_printf_float+0x1a4>
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	bfd4      	ite	le
 8003bd4:	f1c1 0202 	rsble	r2, r1, #2
 8003bd8:	2201      	movgt	r2, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	e7e0      	b.n	8003ba0 <_printf_float+0x1a4>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	055a      	lsls	r2, r3, #21
 8003be2:	d407      	bmi.n	8003bf4 <_printf_float+0x1f8>
 8003be4:	6923      	ldr	r3, [r4, #16]
 8003be6:	4642      	mov	r2, r8
 8003be8:	4631      	mov	r1, r6
 8003bea:	4628      	mov	r0, r5
 8003bec:	47b8      	blx	r7
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d12c      	bne.n	8003c4c <_printf_float+0x250>
 8003bf2:	e764      	b.n	8003abe <_printf_float+0xc2>
 8003bf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003bf8:	f240 80e0 	bls.w	8003dbc <_printf_float+0x3c0>
 8003bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c00:	2200      	movs	r2, #0
 8003c02:	2300      	movs	r3, #0
 8003c04:	f7fd f92c 	bl	8000e60 <__aeabi_dcmpeq>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d034      	beq.n	8003c76 <_printf_float+0x27a>
 8003c0c:	4a37      	ldr	r2, [pc, #220]	; (8003cec <_printf_float+0x2f0>)
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4631      	mov	r1, r6
 8003c12:	4628      	mov	r0, r5
 8003c14:	47b8      	blx	r7
 8003c16:	3001      	adds	r0, #1
 8003c18:	f43f af51 	beq.w	8003abe <_printf_float+0xc2>
 8003c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c20:	429a      	cmp	r2, r3
 8003c22:	db02      	blt.n	8003c2a <_printf_float+0x22e>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	07d8      	lsls	r0, r3, #31
 8003c28:	d510      	bpl.n	8003c4c <_printf_float+0x250>
 8003c2a:	ee18 3a10 	vmov	r3, s16
 8003c2e:	4652      	mov	r2, sl
 8003c30:	4631      	mov	r1, r6
 8003c32:	4628      	mov	r0, r5
 8003c34:	47b8      	blx	r7
 8003c36:	3001      	adds	r0, #1
 8003c38:	f43f af41 	beq.w	8003abe <_printf_float+0xc2>
 8003c3c:	f04f 0800 	mov.w	r8, #0
 8003c40:	f104 091a 	add.w	r9, r4, #26
 8003c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	4543      	cmp	r3, r8
 8003c4a:	dc09      	bgt.n	8003c60 <_printf_float+0x264>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	079b      	lsls	r3, r3, #30
 8003c50:	f100 8105 	bmi.w	8003e5e <_printf_float+0x462>
 8003c54:	68e0      	ldr	r0, [r4, #12]
 8003c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c58:	4298      	cmp	r0, r3
 8003c5a:	bfb8      	it	lt
 8003c5c:	4618      	movlt	r0, r3
 8003c5e:	e730      	b.n	8003ac2 <_printf_float+0xc6>
 8003c60:	2301      	movs	r3, #1
 8003c62:	464a      	mov	r2, r9
 8003c64:	4631      	mov	r1, r6
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f43f af27 	beq.w	8003abe <_printf_float+0xc2>
 8003c70:	f108 0801 	add.w	r8, r8, #1
 8003c74:	e7e6      	b.n	8003c44 <_printf_float+0x248>
 8003c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	dc39      	bgt.n	8003cf0 <_printf_float+0x2f4>
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <_printf_float+0x2f0>)
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4631      	mov	r1, r6
 8003c82:	4628      	mov	r0, r5
 8003c84:	47b8      	blx	r7
 8003c86:	3001      	adds	r0, #1
 8003c88:	f43f af19 	beq.w	8003abe <_printf_float+0xc2>
 8003c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d102      	bne.n	8003c9a <_printf_float+0x29e>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	07d9      	lsls	r1, r3, #31
 8003c98:	d5d8      	bpl.n	8003c4c <_printf_float+0x250>
 8003c9a:	ee18 3a10 	vmov	r3, s16
 8003c9e:	4652      	mov	r2, sl
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	f43f af09 	beq.w	8003abe <_printf_float+0xc2>
 8003cac:	f04f 0900 	mov.w	r9, #0
 8003cb0:	f104 0a1a 	add.w	sl, r4, #26
 8003cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	454b      	cmp	r3, r9
 8003cba:	dc01      	bgt.n	8003cc0 <_printf_float+0x2c4>
 8003cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cbe:	e792      	b.n	8003be6 <_printf_float+0x1ea>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4652      	mov	r2, sl
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47b8      	blx	r7
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f43f aef7 	beq.w	8003abe <_printf_float+0xc2>
 8003cd0:	f109 0901 	add.w	r9, r9, #1
 8003cd4:	e7ee      	b.n	8003cb4 <_printf_float+0x2b8>
 8003cd6:	bf00      	nop
 8003cd8:	7fefffff 	.word	0x7fefffff
 8003cdc:	0801284c 	.word	0x0801284c
 8003ce0:	08012850 	.word	0x08012850
 8003ce4:	08012858 	.word	0x08012858
 8003ce8:	08012854 	.word	0x08012854
 8003cec:	080086fa 	.word	0x080086fa
 8003cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	bfa8      	it	ge
 8003cf8:	461a      	movge	r2, r3
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	4691      	mov	r9, r2
 8003cfe:	dc37      	bgt.n	8003d70 <_printf_float+0x374>
 8003d00:	f04f 0b00 	mov.w	fp, #0
 8003d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d08:	f104 021a 	add.w	r2, r4, #26
 8003d0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d0e:	9305      	str	r3, [sp, #20]
 8003d10:	eba3 0309 	sub.w	r3, r3, r9
 8003d14:	455b      	cmp	r3, fp
 8003d16:	dc33      	bgt.n	8003d80 <_printf_float+0x384>
 8003d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	db3b      	blt.n	8003d98 <_printf_float+0x39c>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	07da      	lsls	r2, r3, #31
 8003d24:	d438      	bmi.n	8003d98 <_printf_float+0x39c>
 8003d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d28:	9a05      	ldr	r2, [sp, #20]
 8003d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d2c:	1a9a      	subs	r2, r3, r2
 8003d2e:	eba3 0901 	sub.w	r9, r3, r1
 8003d32:	4591      	cmp	r9, r2
 8003d34:	bfa8      	it	ge
 8003d36:	4691      	movge	r9, r2
 8003d38:	f1b9 0f00 	cmp.w	r9, #0
 8003d3c:	dc35      	bgt.n	8003daa <_printf_float+0x3ae>
 8003d3e:	f04f 0800 	mov.w	r8, #0
 8003d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d46:	f104 0a1a 	add.w	sl, r4, #26
 8003d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	eba3 0309 	sub.w	r3, r3, r9
 8003d54:	4543      	cmp	r3, r8
 8003d56:	f77f af79 	ble.w	8003c4c <_printf_float+0x250>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4652      	mov	r2, sl
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4628      	mov	r0, r5
 8003d62:	47b8      	blx	r7
 8003d64:	3001      	adds	r0, #1
 8003d66:	f43f aeaa 	beq.w	8003abe <_printf_float+0xc2>
 8003d6a:	f108 0801 	add.w	r8, r8, #1
 8003d6e:	e7ec      	b.n	8003d4a <_printf_float+0x34e>
 8003d70:	4613      	mov	r3, r2
 8003d72:	4631      	mov	r1, r6
 8003d74:	4642      	mov	r2, r8
 8003d76:	4628      	mov	r0, r5
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d1c0      	bne.n	8003d00 <_printf_float+0x304>
 8003d7e:	e69e      	b.n	8003abe <_printf_float+0xc2>
 8003d80:	2301      	movs	r3, #1
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	9205      	str	r2, [sp, #20]
 8003d88:	47b8      	blx	r7
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	f43f ae97 	beq.w	8003abe <_printf_float+0xc2>
 8003d90:	9a05      	ldr	r2, [sp, #20]
 8003d92:	f10b 0b01 	add.w	fp, fp, #1
 8003d96:	e7b9      	b.n	8003d0c <_printf_float+0x310>
 8003d98:	ee18 3a10 	vmov	r3, s16
 8003d9c:	4652      	mov	r2, sl
 8003d9e:	4631      	mov	r1, r6
 8003da0:	4628      	mov	r0, r5
 8003da2:	47b8      	blx	r7
 8003da4:	3001      	adds	r0, #1
 8003da6:	d1be      	bne.n	8003d26 <_printf_float+0x32a>
 8003da8:	e689      	b.n	8003abe <_printf_float+0xc2>
 8003daa:	9a05      	ldr	r2, [sp, #20]
 8003dac:	464b      	mov	r3, r9
 8003dae:	4442      	add	r2, r8
 8003db0:	4631      	mov	r1, r6
 8003db2:	4628      	mov	r0, r5
 8003db4:	47b8      	blx	r7
 8003db6:	3001      	adds	r0, #1
 8003db8:	d1c1      	bne.n	8003d3e <_printf_float+0x342>
 8003dba:	e680      	b.n	8003abe <_printf_float+0xc2>
 8003dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dbe:	2a01      	cmp	r2, #1
 8003dc0:	dc01      	bgt.n	8003dc6 <_printf_float+0x3ca>
 8003dc2:	07db      	lsls	r3, r3, #31
 8003dc4:	d538      	bpl.n	8003e38 <_printf_float+0x43c>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4642      	mov	r2, r8
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4628      	mov	r0, r5
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f ae74 	beq.w	8003abe <_printf_float+0xc2>
 8003dd6:	ee18 3a10 	vmov	r3, s16
 8003dda:	4652      	mov	r2, sl
 8003ddc:	4631      	mov	r1, r6
 8003dde:	4628      	mov	r0, r5
 8003de0:	47b8      	blx	r7
 8003de2:	3001      	adds	r0, #1
 8003de4:	f43f ae6b 	beq.w	8003abe <_printf_float+0xc2>
 8003de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dec:	2200      	movs	r2, #0
 8003dee:	2300      	movs	r3, #0
 8003df0:	f7fd f836 	bl	8000e60 <__aeabi_dcmpeq>
 8003df4:	b9d8      	cbnz	r0, 8003e2e <_printf_float+0x432>
 8003df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003df8:	f108 0201 	add.w	r2, r8, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	d10e      	bne.n	8003e26 <_printf_float+0x42a>
 8003e08:	e659      	b.n	8003abe <_printf_float+0xc2>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4652      	mov	r2, sl
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4628      	mov	r0, r5
 8003e12:	47b8      	blx	r7
 8003e14:	3001      	adds	r0, #1
 8003e16:	f43f ae52 	beq.w	8003abe <_printf_float+0xc2>
 8003e1a:	f108 0801 	add.w	r8, r8, #1
 8003e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4543      	cmp	r3, r8
 8003e24:	dcf1      	bgt.n	8003e0a <_printf_float+0x40e>
 8003e26:	464b      	mov	r3, r9
 8003e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e2c:	e6dc      	b.n	8003be8 <_printf_float+0x1ec>
 8003e2e:	f04f 0800 	mov.w	r8, #0
 8003e32:	f104 0a1a 	add.w	sl, r4, #26
 8003e36:	e7f2      	b.n	8003e1e <_printf_float+0x422>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4642      	mov	r2, r8
 8003e3c:	e7df      	b.n	8003dfe <_printf_float+0x402>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	464a      	mov	r2, r9
 8003e42:	4631      	mov	r1, r6
 8003e44:	4628      	mov	r0, r5
 8003e46:	47b8      	blx	r7
 8003e48:	3001      	adds	r0, #1
 8003e4a:	f43f ae38 	beq.w	8003abe <_printf_float+0xc2>
 8003e4e:	f108 0801 	add.w	r8, r8, #1
 8003e52:	68e3      	ldr	r3, [r4, #12]
 8003e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e56:	1a5b      	subs	r3, r3, r1
 8003e58:	4543      	cmp	r3, r8
 8003e5a:	dcf0      	bgt.n	8003e3e <_printf_float+0x442>
 8003e5c:	e6fa      	b.n	8003c54 <_printf_float+0x258>
 8003e5e:	f04f 0800 	mov.w	r8, #0
 8003e62:	f104 0919 	add.w	r9, r4, #25
 8003e66:	e7f4      	b.n	8003e52 <_printf_float+0x456>

08003e68 <_printf_common>:
 8003e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	4699      	mov	r9, r3
 8003e70:	688a      	ldr	r2, [r1, #8]
 8003e72:	690b      	ldr	r3, [r1, #16]
 8003e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bfb8      	it	lt
 8003e7c:	4613      	movlt	r3, r2
 8003e7e:	6033      	str	r3, [r6, #0]
 8003e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e84:	4607      	mov	r7, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	b10a      	cbz	r2, 8003e8e <_printf_common+0x26>
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	6033      	str	r3, [r6, #0]
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	0699      	lsls	r1, r3, #26
 8003e92:	bf42      	ittt	mi
 8003e94:	6833      	ldrmi	r3, [r6, #0]
 8003e96:	3302      	addmi	r3, #2
 8003e98:	6033      	strmi	r3, [r6, #0]
 8003e9a:	6825      	ldr	r5, [r4, #0]
 8003e9c:	f015 0506 	ands.w	r5, r5, #6
 8003ea0:	d106      	bne.n	8003eb0 <_printf_common+0x48>
 8003ea2:	f104 0a19 	add.w	sl, r4, #25
 8003ea6:	68e3      	ldr	r3, [r4, #12]
 8003ea8:	6832      	ldr	r2, [r6, #0]
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	42ab      	cmp	r3, r5
 8003eae:	dc26      	bgt.n	8003efe <_printf_common+0x96>
 8003eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003eb4:	1e13      	subs	r3, r2, #0
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	bf18      	it	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	0692      	lsls	r2, r2, #26
 8003ebe:	d42b      	bmi.n	8003f18 <_printf_common+0xb0>
 8003ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	47c0      	blx	r8
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d01e      	beq.n	8003f0c <_printf_common+0xa4>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	68e5      	ldr	r5, [r4, #12]
 8003ed2:	6832      	ldr	r2, [r6, #0]
 8003ed4:	f003 0306 	and.w	r3, r3, #6
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	bf08      	it	eq
 8003edc:	1aad      	subeq	r5, r5, r2
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	6922      	ldr	r2, [r4, #16]
 8003ee2:	bf0c      	ite	eq
 8003ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee8:	2500      	movne	r5, #0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	bfc4      	itt	gt
 8003eee:	1a9b      	subgt	r3, r3, r2
 8003ef0:	18ed      	addgt	r5, r5, r3
 8003ef2:	2600      	movs	r6, #0
 8003ef4:	341a      	adds	r4, #26
 8003ef6:	42b5      	cmp	r5, r6
 8003ef8:	d11a      	bne.n	8003f30 <_printf_common+0xc8>
 8003efa:	2000      	movs	r0, #0
 8003efc:	e008      	b.n	8003f10 <_printf_common+0xa8>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4652      	mov	r2, sl
 8003f02:	4649      	mov	r1, r9
 8003f04:	4638      	mov	r0, r7
 8003f06:	47c0      	blx	r8
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d103      	bne.n	8003f14 <_printf_common+0xac>
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f14:	3501      	adds	r5, #1
 8003f16:	e7c6      	b.n	8003ea6 <_printf_common+0x3e>
 8003f18:	18e1      	adds	r1, r4, r3
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	2030      	movs	r0, #48	; 0x30
 8003f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f22:	4422      	add	r2, r4
 8003f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	e7c7      	b.n	8003ec0 <_printf_common+0x58>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4622      	mov	r2, r4
 8003f34:	4649      	mov	r1, r9
 8003f36:	4638      	mov	r0, r7
 8003f38:	47c0      	blx	r8
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d0e6      	beq.n	8003f0c <_printf_common+0xa4>
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7d9      	b.n	8003ef6 <_printf_common+0x8e>
	...

08003f44 <_printf_i>:
 8003f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	7e0f      	ldrb	r7, [r1, #24]
 8003f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f4c:	2f78      	cmp	r7, #120	; 0x78
 8003f4e:	4691      	mov	r9, r2
 8003f50:	4680      	mov	r8, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	469a      	mov	sl, r3
 8003f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f5a:	d807      	bhi.n	8003f6c <_printf_i+0x28>
 8003f5c:	2f62      	cmp	r7, #98	; 0x62
 8003f5e:	d80a      	bhi.n	8003f76 <_printf_i+0x32>
 8003f60:	2f00      	cmp	r7, #0
 8003f62:	f000 80d8 	beq.w	8004116 <_printf_i+0x1d2>
 8003f66:	2f58      	cmp	r7, #88	; 0x58
 8003f68:	f000 80a3 	beq.w	80040b2 <_printf_i+0x16e>
 8003f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f74:	e03a      	b.n	8003fec <_printf_i+0xa8>
 8003f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f7a:	2b15      	cmp	r3, #21
 8003f7c:	d8f6      	bhi.n	8003f6c <_printf_i+0x28>
 8003f7e:	a101      	add	r1, pc, #4	; (adr r1, 8003f84 <_printf_i+0x40>)
 8003f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f84:	08003fdd 	.word	0x08003fdd
 8003f88:	08003ff1 	.word	0x08003ff1
 8003f8c:	08003f6d 	.word	0x08003f6d
 8003f90:	08003f6d 	.word	0x08003f6d
 8003f94:	08003f6d 	.word	0x08003f6d
 8003f98:	08003f6d 	.word	0x08003f6d
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003f6d 	.word	0x08003f6d
 8003fa4:	08003f6d 	.word	0x08003f6d
 8003fa8:	08003f6d 	.word	0x08003f6d
 8003fac:	08003f6d 	.word	0x08003f6d
 8003fb0:	080040fd 	.word	0x080040fd
 8003fb4:	08004021 	.word	0x08004021
 8003fb8:	080040df 	.word	0x080040df
 8003fbc:	08003f6d 	.word	0x08003f6d
 8003fc0:	08003f6d 	.word	0x08003f6d
 8003fc4:	0800411f 	.word	0x0800411f
 8003fc8:	08003f6d 	.word	0x08003f6d
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08003f6d 	.word	0x08003f6d
 8003fd4:	08003f6d 	.word	0x08003f6d
 8003fd8:	080040e7 	.word	0x080040e7
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	602a      	str	r2, [r5, #0]
 8003fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0a3      	b.n	8004138 <_printf_i+0x1f4>
 8003ff0:	6820      	ldr	r0, [r4, #0]
 8003ff2:	6829      	ldr	r1, [r5, #0]
 8003ff4:	0606      	lsls	r6, r0, #24
 8003ff6:	f101 0304 	add.w	r3, r1, #4
 8003ffa:	d50a      	bpl.n	8004012 <_printf_i+0xce>
 8003ffc:	680e      	ldr	r6, [r1, #0]
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	2e00      	cmp	r6, #0
 8004002:	da03      	bge.n	800400c <_printf_i+0xc8>
 8004004:	232d      	movs	r3, #45	; 0x2d
 8004006:	4276      	negs	r6, r6
 8004008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400c:	485e      	ldr	r0, [pc, #376]	; (8004188 <_printf_i+0x244>)
 800400e:	230a      	movs	r3, #10
 8004010:	e019      	b.n	8004046 <_printf_i+0x102>
 8004012:	680e      	ldr	r6, [r1, #0]
 8004014:	602b      	str	r3, [r5, #0]
 8004016:	f010 0f40 	tst.w	r0, #64	; 0x40
 800401a:	bf18      	it	ne
 800401c:	b236      	sxthne	r6, r6
 800401e:	e7ef      	b.n	8004000 <_printf_i+0xbc>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1d19      	adds	r1, r3, #4
 8004026:	6029      	str	r1, [r5, #0]
 8004028:	0601      	lsls	r1, r0, #24
 800402a:	d501      	bpl.n	8004030 <_printf_i+0xec>
 800402c:	681e      	ldr	r6, [r3, #0]
 800402e:	e002      	b.n	8004036 <_printf_i+0xf2>
 8004030:	0646      	lsls	r6, r0, #25
 8004032:	d5fb      	bpl.n	800402c <_printf_i+0xe8>
 8004034:	881e      	ldrh	r6, [r3, #0]
 8004036:	4854      	ldr	r0, [pc, #336]	; (8004188 <_printf_i+0x244>)
 8004038:	2f6f      	cmp	r7, #111	; 0x6f
 800403a:	bf0c      	ite	eq
 800403c:	2308      	moveq	r3, #8
 800403e:	230a      	movne	r3, #10
 8004040:	2100      	movs	r1, #0
 8004042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004046:	6865      	ldr	r5, [r4, #4]
 8004048:	60a5      	str	r5, [r4, #8]
 800404a:	2d00      	cmp	r5, #0
 800404c:	bfa2      	ittt	ge
 800404e:	6821      	ldrge	r1, [r4, #0]
 8004050:	f021 0104 	bicge.w	r1, r1, #4
 8004054:	6021      	strge	r1, [r4, #0]
 8004056:	b90e      	cbnz	r6, 800405c <_printf_i+0x118>
 8004058:	2d00      	cmp	r5, #0
 800405a:	d04d      	beq.n	80040f8 <_printf_i+0x1b4>
 800405c:	4615      	mov	r5, r2
 800405e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004062:	fb03 6711 	mls	r7, r3, r1, r6
 8004066:	5dc7      	ldrb	r7, [r0, r7]
 8004068:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800406c:	4637      	mov	r7, r6
 800406e:	42bb      	cmp	r3, r7
 8004070:	460e      	mov	r6, r1
 8004072:	d9f4      	bls.n	800405e <_printf_i+0x11a>
 8004074:	2b08      	cmp	r3, #8
 8004076:	d10b      	bne.n	8004090 <_printf_i+0x14c>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	07de      	lsls	r6, r3, #31
 800407c:	d508      	bpl.n	8004090 <_printf_i+0x14c>
 800407e:	6923      	ldr	r3, [r4, #16]
 8004080:	6861      	ldr	r1, [r4, #4]
 8004082:	4299      	cmp	r1, r3
 8004084:	bfde      	ittt	le
 8004086:	2330      	movle	r3, #48	; 0x30
 8004088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800408c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004090:	1b52      	subs	r2, r2, r5
 8004092:	6122      	str	r2, [r4, #16]
 8004094:	f8cd a000 	str.w	sl, [sp]
 8004098:	464b      	mov	r3, r9
 800409a:	aa03      	add	r2, sp, #12
 800409c:	4621      	mov	r1, r4
 800409e:	4640      	mov	r0, r8
 80040a0:	f7ff fee2 	bl	8003e68 <_printf_common>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d14c      	bne.n	8004142 <_printf_i+0x1fe>
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ac:	b004      	add	sp, #16
 80040ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b2:	4835      	ldr	r0, [pc, #212]	; (8004188 <_printf_i+0x244>)
 80040b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040b8:	6829      	ldr	r1, [r5, #0]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80040c0:	6029      	str	r1, [r5, #0]
 80040c2:	061d      	lsls	r5, r3, #24
 80040c4:	d514      	bpl.n	80040f0 <_printf_i+0x1ac>
 80040c6:	07df      	lsls	r7, r3, #31
 80040c8:	bf44      	itt	mi
 80040ca:	f043 0320 	orrmi.w	r3, r3, #32
 80040ce:	6023      	strmi	r3, [r4, #0]
 80040d0:	b91e      	cbnz	r6, 80040da <_printf_i+0x196>
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f023 0320 	bic.w	r3, r3, #32
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	2310      	movs	r3, #16
 80040dc:	e7b0      	b.n	8004040 <_printf_i+0xfc>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	2378      	movs	r3, #120	; 0x78
 80040e8:	4828      	ldr	r0, [pc, #160]	; (800418c <_printf_i+0x248>)
 80040ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ee:	e7e3      	b.n	80040b8 <_printf_i+0x174>
 80040f0:	0659      	lsls	r1, r3, #25
 80040f2:	bf48      	it	mi
 80040f4:	b2b6      	uxthmi	r6, r6
 80040f6:	e7e6      	b.n	80040c6 <_printf_i+0x182>
 80040f8:	4615      	mov	r5, r2
 80040fa:	e7bb      	b.n	8004074 <_printf_i+0x130>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	6826      	ldr	r6, [r4, #0]
 8004100:	6961      	ldr	r1, [r4, #20]
 8004102:	1d18      	adds	r0, r3, #4
 8004104:	6028      	str	r0, [r5, #0]
 8004106:	0635      	lsls	r5, r6, #24
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	d501      	bpl.n	8004110 <_printf_i+0x1cc>
 800410c:	6019      	str	r1, [r3, #0]
 800410e:	e002      	b.n	8004116 <_printf_i+0x1d2>
 8004110:	0670      	lsls	r0, r6, #25
 8004112:	d5fb      	bpl.n	800410c <_printf_i+0x1c8>
 8004114:	8019      	strh	r1, [r3, #0]
 8004116:	2300      	movs	r3, #0
 8004118:	6123      	str	r3, [r4, #16]
 800411a:	4615      	mov	r5, r2
 800411c:	e7ba      	b.n	8004094 <_printf_i+0x150>
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	1d1a      	adds	r2, r3, #4
 8004122:	602a      	str	r2, [r5, #0]
 8004124:	681d      	ldr	r5, [r3, #0]
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	2100      	movs	r1, #0
 800412a:	4628      	mov	r0, r5
 800412c:	f7fc fbe0 	bl	80008f0 <memchr>
 8004130:	b108      	cbz	r0, 8004136 <_printf_i+0x1f2>
 8004132:	1b40      	subs	r0, r0, r5
 8004134:	6060      	str	r0, [r4, #4]
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	2300      	movs	r3, #0
 800413c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004140:	e7a8      	b.n	8004094 <_printf_i+0x150>
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	462a      	mov	r2, r5
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	47d0      	blx	sl
 800414c:	3001      	adds	r0, #1
 800414e:	d0ab      	beq.n	80040a8 <_printf_i+0x164>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	079b      	lsls	r3, r3, #30
 8004154:	d413      	bmi.n	800417e <_printf_i+0x23a>
 8004156:	68e0      	ldr	r0, [r4, #12]
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	4298      	cmp	r0, r3
 800415c:	bfb8      	it	lt
 800415e:	4618      	movlt	r0, r3
 8004160:	e7a4      	b.n	80040ac <_printf_i+0x168>
 8004162:	2301      	movs	r3, #1
 8004164:	4632      	mov	r2, r6
 8004166:	4649      	mov	r1, r9
 8004168:	4640      	mov	r0, r8
 800416a:	47d0      	blx	sl
 800416c:	3001      	adds	r0, #1
 800416e:	d09b      	beq.n	80040a8 <_printf_i+0x164>
 8004170:	3501      	adds	r5, #1
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	9903      	ldr	r1, [sp, #12]
 8004176:	1a5b      	subs	r3, r3, r1
 8004178:	42ab      	cmp	r3, r5
 800417a:	dcf2      	bgt.n	8004162 <_printf_i+0x21e>
 800417c:	e7eb      	b.n	8004156 <_printf_i+0x212>
 800417e:	2500      	movs	r5, #0
 8004180:	f104 0619 	add.w	r6, r4, #25
 8004184:	e7f5      	b.n	8004172 <_printf_i+0x22e>
 8004186:	bf00      	nop
 8004188:	0801285c 	.word	0x0801285c
 800418c:	0801286d 	.word	0x0801286d

08004190 <iprintf>:
 8004190:	b40f      	push	{r0, r1, r2, r3}
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <iprintf+0x2c>)
 8004194:	b513      	push	{r0, r1, r4, lr}
 8004196:	681c      	ldr	r4, [r3, #0]
 8004198:	b124      	cbz	r4, 80041a4 <iprintf+0x14>
 800419a:	69a3      	ldr	r3, [r4, #24]
 800419c:	b913      	cbnz	r3, 80041a4 <iprintf+0x14>
 800419e:	4620      	mov	r0, r4
 80041a0:	f7ff fa18 	bl	80035d4 <__sinit>
 80041a4:	ab05      	add	r3, sp, #20
 80041a6:	9a04      	ldr	r2, [sp, #16]
 80041a8:	68a1      	ldr	r1, [r4, #8]
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	4620      	mov	r0, r4
 80041ae:	f001 fff1 	bl	8006194 <_vfiprintf_r>
 80041b2:	b002      	add	sp, #8
 80041b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b8:	b004      	add	sp, #16
 80041ba:	4770      	bx	lr
 80041bc:	200001b0 	.word	0x200001b0

080041c0 <putchar>:
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <putchar+0x28>)
 80041c2:	b513      	push	{r0, r1, r4, lr}
 80041c4:	681c      	ldr	r4, [r3, #0]
 80041c6:	4601      	mov	r1, r0
 80041c8:	b134      	cbz	r4, 80041d8 <putchar+0x18>
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	b923      	cbnz	r3, 80041d8 <putchar+0x18>
 80041ce:	9001      	str	r0, [sp, #4]
 80041d0:	4620      	mov	r0, r4
 80041d2:	f7ff f9ff 	bl	80035d4 <__sinit>
 80041d6:	9901      	ldr	r1, [sp, #4]
 80041d8:	68a2      	ldr	r2, [r4, #8]
 80041da:	4620      	mov	r0, r4
 80041dc:	b002      	add	sp, #8
 80041de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e2:	f002 b907 	b.w	80063f4 <_putc_r>
 80041e6:	bf00      	nop
 80041e8:	200001b0 	.word	0x200001b0

080041ec <_puts_r>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	460e      	mov	r6, r1
 80041f0:	4605      	mov	r5, r0
 80041f2:	b118      	cbz	r0, 80041fc <_puts_r+0x10>
 80041f4:	6983      	ldr	r3, [r0, #24]
 80041f6:	b90b      	cbnz	r3, 80041fc <_puts_r+0x10>
 80041f8:	f7ff f9ec 	bl	80035d4 <__sinit>
 80041fc:	69ab      	ldr	r3, [r5, #24]
 80041fe:	68ac      	ldr	r4, [r5, #8]
 8004200:	b913      	cbnz	r3, 8004208 <_puts_r+0x1c>
 8004202:	4628      	mov	r0, r5
 8004204:	f7ff f9e6 	bl	80035d4 <__sinit>
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <_puts_r+0xd0>)
 800420a:	429c      	cmp	r4, r3
 800420c:	d120      	bne.n	8004250 <_puts_r+0x64>
 800420e:	686c      	ldr	r4, [r5, #4]
 8004210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004212:	07db      	lsls	r3, r3, #31
 8004214:	d405      	bmi.n	8004222 <_puts_r+0x36>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	0598      	lsls	r0, r3, #22
 800421a:	d402      	bmi.n	8004222 <_puts_r+0x36>
 800421c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421e:	f7ff fa9c 	bl	800375a <__retarget_lock_acquire_recursive>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	0719      	lsls	r1, r3, #28
 8004226:	d51d      	bpl.n	8004264 <_puts_r+0x78>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b1db      	cbz	r3, 8004264 <_puts_r+0x78>
 800422c:	3e01      	subs	r6, #1
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004234:	3b01      	subs	r3, #1
 8004236:	60a3      	str	r3, [r4, #8]
 8004238:	bb39      	cbnz	r1, 800428a <_puts_r+0x9e>
 800423a:	2b00      	cmp	r3, #0
 800423c:	da38      	bge.n	80042b0 <_puts_r+0xc4>
 800423e:	4622      	mov	r2, r4
 8004240:	210a      	movs	r1, #10
 8004242:	4628      	mov	r0, r5
 8004244:	f000 fa86 	bl	8004754 <__swbuf_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d011      	beq.n	8004270 <_puts_r+0x84>
 800424c:	250a      	movs	r5, #10
 800424e:	e011      	b.n	8004274 <_puts_r+0x88>
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <_puts_r+0xd4>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d101      	bne.n	800425a <_puts_r+0x6e>
 8004256:	68ac      	ldr	r4, [r5, #8]
 8004258:	e7da      	b.n	8004210 <_puts_r+0x24>
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <_puts_r+0xd8>)
 800425c:	429c      	cmp	r4, r3
 800425e:	bf08      	it	eq
 8004260:	68ec      	ldreq	r4, [r5, #12]
 8004262:	e7d5      	b.n	8004210 <_puts_r+0x24>
 8004264:	4621      	mov	r1, r4
 8004266:	4628      	mov	r0, r5
 8004268:	f000 fac6 	bl	80047f8 <__swsetup_r>
 800426c:	2800      	cmp	r0, #0
 800426e:	d0dd      	beq.n	800422c <_puts_r+0x40>
 8004270:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004276:	07da      	lsls	r2, r3, #31
 8004278:	d405      	bmi.n	8004286 <_puts_r+0x9a>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	059b      	lsls	r3, r3, #22
 800427e:	d402      	bmi.n	8004286 <_puts_r+0x9a>
 8004280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004282:	f7ff fa6b 	bl	800375c <__retarget_lock_release_recursive>
 8004286:	4628      	mov	r0, r5
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	2b00      	cmp	r3, #0
 800428c:	da04      	bge.n	8004298 <_puts_r+0xac>
 800428e:	69a2      	ldr	r2, [r4, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	dc06      	bgt.n	80042a2 <_puts_r+0xb6>
 8004294:	290a      	cmp	r1, #10
 8004296:	d004      	beq.n	80042a2 <_puts_r+0xb6>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	7019      	strb	r1, [r3, #0]
 80042a0:	e7c5      	b.n	800422e <_puts_r+0x42>
 80042a2:	4622      	mov	r2, r4
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 fa55 	bl	8004754 <__swbuf_r>
 80042aa:	3001      	adds	r0, #1
 80042ac:	d1bf      	bne.n	800422e <_puts_r+0x42>
 80042ae:	e7df      	b.n	8004270 <_puts_r+0x84>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	250a      	movs	r5, #10
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	6022      	str	r2, [r4, #0]
 80042b8:	701d      	strb	r5, [r3, #0]
 80042ba:	e7db      	b.n	8004274 <_puts_r+0x88>
 80042bc:	08012808 	.word	0x08012808
 80042c0:	08012828 	.word	0x08012828
 80042c4:	080127e8 	.word	0x080127e8

080042c8 <puts>:
 80042c8:	4b02      	ldr	r3, [pc, #8]	; (80042d4 <puts+0xc>)
 80042ca:	4601      	mov	r1, r0
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	f7ff bf8d 	b.w	80041ec <_puts_r>
 80042d2:	bf00      	nop
 80042d4:	200001b0 	.word	0x200001b0

080042d8 <setvbuf>:
 80042d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042dc:	461d      	mov	r5, r3
 80042de:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <setvbuf+0x17c>)
 80042e0:	681f      	ldr	r7, [r3, #0]
 80042e2:	4604      	mov	r4, r0
 80042e4:	460e      	mov	r6, r1
 80042e6:	4690      	mov	r8, r2
 80042e8:	b127      	cbz	r7, 80042f4 <setvbuf+0x1c>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	b913      	cbnz	r3, 80042f4 <setvbuf+0x1c>
 80042ee:	4638      	mov	r0, r7
 80042f0:	f7ff f970 	bl	80035d4 <__sinit>
 80042f4:	4b58      	ldr	r3, [pc, #352]	; (8004458 <setvbuf+0x180>)
 80042f6:	429c      	cmp	r4, r3
 80042f8:	d167      	bne.n	80043ca <setvbuf+0xf2>
 80042fa:	687c      	ldr	r4, [r7, #4]
 80042fc:	f1b8 0f02 	cmp.w	r8, #2
 8004300:	d006      	beq.n	8004310 <setvbuf+0x38>
 8004302:	f1b8 0f01 	cmp.w	r8, #1
 8004306:	f200 809f 	bhi.w	8004448 <setvbuf+0x170>
 800430a:	2d00      	cmp	r5, #0
 800430c:	f2c0 809c 	blt.w	8004448 <setvbuf+0x170>
 8004310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004312:	07db      	lsls	r3, r3, #31
 8004314:	d405      	bmi.n	8004322 <setvbuf+0x4a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	0598      	lsls	r0, r3, #22
 800431a:	d402      	bmi.n	8004322 <setvbuf+0x4a>
 800431c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800431e:	f7ff fa1c 	bl	800375a <__retarget_lock_acquire_recursive>
 8004322:	4621      	mov	r1, r4
 8004324:	4638      	mov	r0, r7
 8004326:	f7ff f8af 	bl	8003488 <_fflush_r>
 800432a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800432c:	b141      	cbz	r1, 8004340 <setvbuf+0x68>
 800432e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004332:	4299      	cmp	r1, r3
 8004334:	d002      	beq.n	800433c <setvbuf+0x64>
 8004336:	4638      	mov	r0, r7
 8004338:	f7ff fa1a 	bl	8003770 <_free_r>
 800433c:	2300      	movs	r3, #0
 800433e:	6363      	str	r3, [r4, #52]	; 0x34
 8004340:	2300      	movs	r3, #0
 8004342:	61a3      	str	r3, [r4, #24]
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	0619      	lsls	r1, r3, #24
 800434a:	d503      	bpl.n	8004354 <setvbuf+0x7c>
 800434c:	6921      	ldr	r1, [r4, #16]
 800434e:	4638      	mov	r0, r7
 8004350:	f7ff fa0e 	bl	8003770 <_free_r>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	f1b8 0f02 	cmp.w	r8, #2
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	d06c      	beq.n	8004440 <setvbuf+0x168>
 8004366:	ab01      	add	r3, sp, #4
 8004368:	466a      	mov	r2, sp
 800436a:	4621      	mov	r1, r4
 800436c:	4638      	mov	r0, r7
 800436e:	f001 f95f 	bl	8005630 <__swhatbuf_r>
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	4318      	orrs	r0, r3
 8004376:	81a0      	strh	r0, [r4, #12]
 8004378:	2d00      	cmp	r5, #0
 800437a:	d130      	bne.n	80043de <setvbuf+0x106>
 800437c:	9d00      	ldr	r5, [sp, #0]
 800437e:	4628      	mov	r0, r5
 8004380:	f001 f9bc 	bl	80056fc <malloc>
 8004384:	4606      	mov	r6, r0
 8004386:	2800      	cmp	r0, #0
 8004388:	d155      	bne.n	8004436 <setvbuf+0x15e>
 800438a:	f8dd 9000 	ldr.w	r9, [sp]
 800438e:	45a9      	cmp	r9, r5
 8004390:	d14a      	bne.n	8004428 <setvbuf+0x150>
 8004392:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004396:	2200      	movs	r2, #0
 8004398:	60a2      	str	r2, [r4, #8]
 800439a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800439e:	6022      	str	r2, [r4, #0]
 80043a0:	6122      	str	r2, [r4, #16]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a8:	6162      	str	r2, [r4, #20]
 80043aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	07d2      	lsls	r2, r2, #31
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	d405      	bmi.n	80043c2 <setvbuf+0xea>
 80043b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80043ba:	d102      	bne.n	80043c2 <setvbuf+0xea>
 80043bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043be:	f7ff f9cd 	bl	800375c <__retarget_lock_release_recursive>
 80043c2:	4628      	mov	r0, r5
 80043c4:	b003      	add	sp, #12
 80043c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <setvbuf+0x184>)
 80043cc:	429c      	cmp	r4, r3
 80043ce:	d101      	bne.n	80043d4 <setvbuf+0xfc>
 80043d0:	68bc      	ldr	r4, [r7, #8]
 80043d2:	e793      	b.n	80042fc <setvbuf+0x24>
 80043d4:	4b22      	ldr	r3, [pc, #136]	; (8004460 <setvbuf+0x188>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	bf08      	it	eq
 80043da:	68fc      	ldreq	r4, [r7, #12]
 80043dc:	e78e      	b.n	80042fc <setvbuf+0x24>
 80043de:	2e00      	cmp	r6, #0
 80043e0:	d0cd      	beq.n	800437e <setvbuf+0xa6>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	b913      	cbnz	r3, 80043ec <setvbuf+0x114>
 80043e6:	4638      	mov	r0, r7
 80043e8:	f7ff f8f4 	bl	80035d4 <__sinit>
 80043ec:	f1b8 0f01 	cmp.w	r8, #1
 80043f0:	bf08      	it	eq
 80043f2:	89a3      	ldrheq	r3, [r4, #12]
 80043f4:	6026      	str	r6, [r4, #0]
 80043f6:	bf04      	itt	eq
 80043f8:	f043 0301 	orreq.w	r3, r3, #1
 80043fc:	81a3      	strheq	r3, [r4, #12]
 80043fe:	89a2      	ldrh	r2, [r4, #12]
 8004400:	f012 0308 	ands.w	r3, r2, #8
 8004404:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004408:	d01c      	beq.n	8004444 <setvbuf+0x16c>
 800440a:	07d3      	lsls	r3, r2, #31
 800440c:	bf41      	itttt	mi
 800440e:	2300      	movmi	r3, #0
 8004410:	426d      	negmi	r5, r5
 8004412:	60a3      	strmi	r3, [r4, #8]
 8004414:	61a5      	strmi	r5, [r4, #24]
 8004416:	bf58      	it	pl
 8004418:	60a5      	strpl	r5, [r4, #8]
 800441a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800441c:	f015 0501 	ands.w	r5, r5, #1
 8004420:	d115      	bne.n	800444e <setvbuf+0x176>
 8004422:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004426:	e7c8      	b.n	80043ba <setvbuf+0xe2>
 8004428:	4648      	mov	r0, r9
 800442a:	f001 f967 	bl	80056fc <malloc>
 800442e:	4606      	mov	r6, r0
 8004430:	2800      	cmp	r0, #0
 8004432:	d0ae      	beq.n	8004392 <setvbuf+0xba>
 8004434:	464d      	mov	r5, r9
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443c:	81a3      	strh	r3, [r4, #12]
 800443e:	e7d0      	b.n	80043e2 <setvbuf+0x10a>
 8004440:	2500      	movs	r5, #0
 8004442:	e7a8      	b.n	8004396 <setvbuf+0xbe>
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	e7e8      	b.n	800441a <setvbuf+0x142>
 8004448:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800444c:	e7b9      	b.n	80043c2 <setvbuf+0xea>
 800444e:	2500      	movs	r5, #0
 8004450:	e7b7      	b.n	80043c2 <setvbuf+0xea>
 8004452:	bf00      	nop
 8004454:	200001b0 	.word	0x200001b0
 8004458:	08012808 	.word	0x08012808
 800445c:	08012828 	.word	0x08012828
 8004460:	080127e8 	.word	0x080127e8

08004464 <__sread>:
 8004464:	b510      	push	{r4, lr}
 8004466:	460c      	mov	r4, r1
 8004468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446c:	f7fc fee9 	bl	8001242 <_read_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	bfab      	itete	ge
 8004474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004476:	89a3      	ldrhlt	r3, [r4, #12]
 8004478:	181b      	addge	r3, r3, r0
 800447a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800447e:	bfac      	ite	ge
 8004480:	6563      	strge	r3, [r4, #84]	; 0x54
 8004482:	81a3      	strhlt	r3, [r4, #12]
 8004484:	bd10      	pop	{r4, pc}

08004486 <__swrite>:
 8004486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448a:	461f      	mov	r7, r3
 800448c:	898b      	ldrh	r3, [r1, #12]
 800448e:	05db      	lsls	r3, r3, #23
 8004490:	4605      	mov	r5, r0
 8004492:	460c      	mov	r4, r1
 8004494:	4616      	mov	r6, r2
 8004496:	d505      	bpl.n	80044a4 <__swrite+0x1e>
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	2302      	movs	r3, #2
 800449e:	2200      	movs	r2, #0
 80044a0:	f7fc fecd 	bl	800123e <_lseek_r>
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	4632      	mov	r2, r6
 80044b2:	463b      	mov	r3, r7
 80044b4:	4628      	mov	r0, r5
 80044b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ba:	f7fc bec7 	b.w	800124c <_write_r>

080044be <__sseek>:
 80044be:	b510      	push	{r4, lr}
 80044c0:	460c      	mov	r4, r1
 80044c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c6:	f7fc feba 	bl	800123e <_lseek_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	bf15      	itete	ne
 80044d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80044d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044da:	81a3      	strheq	r3, [r4, #12]
 80044dc:	bf18      	it	ne
 80044de:	81a3      	strhne	r3, [r4, #12]
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <__sclose>:
 80044e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e6:	f7fc bea1 	b.w	800122c <_close_r>
	...

080044ec <strcasecmp>:
 80044ec:	b530      	push	{r4, r5, lr}
 80044ee:	4d0b      	ldr	r5, [pc, #44]	; (800451c <strcasecmp+0x30>)
 80044f0:	4604      	mov	r4, r0
 80044f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044f6:	5d5a      	ldrb	r2, [r3, r5]
 80044f8:	f002 0203 	and.w	r2, r2, #3
 80044fc:	2a01      	cmp	r2, #1
 80044fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004502:	5ca8      	ldrb	r0, [r5, r2]
 8004504:	f000 0003 	and.w	r0, r0, #3
 8004508:	bf08      	it	eq
 800450a:	3320      	addeq	r3, #32
 800450c:	2801      	cmp	r0, #1
 800450e:	bf08      	it	eq
 8004510:	3220      	addeq	r2, #32
 8004512:	1a98      	subs	r0, r3, r2
 8004514:	d101      	bne.n	800451a <strcasecmp+0x2e>
 8004516:	2a00      	cmp	r2, #0
 8004518:	d1eb      	bne.n	80044f2 <strcasecmp+0x6>
 800451a:	bd30      	pop	{r4, r5, pc}
 800451c:	080126e8 	.word	0x080126e8

08004520 <strcpy>:
 8004520:	4603      	mov	r3, r0
 8004522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004526:	f803 2b01 	strb.w	r2, [r3], #1
 800452a:	2a00      	cmp	r2, #0
 800452c:	d1f9      	bne.n	8004522 <strcpy+0x2>
 800452e:	4770      	bx	lr

08004530 <strtok>:
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <strtok+0x5c>)
 8004532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004534:	681e      	ldr	r6, [r3, #0]
 8004536:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004538:	4605      	mov	r5, r0
 800453a:	b9fc      	cbnz	r4, 800457c <strtok+0x4c>
 800453c:	2050      	movs	r0, #80	; 0x50
 800453e:	9101      	str	r1, [sp, #4]
 8004540:	f001 f8dc 	bl	80056fc <malloc>
 8004544:	9901      	ldr	r1, [sp, #4]
 8004546:	65b0      	str	r0, [r6, #88]	; 0x58
 8004548:	4602      	mov	r2, r0
 800454a:	b920      	cbnz	r0, 8004556 <strtok+0x26>
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <strtok+0x60>)
 800454e:	4811      	ldr	r0, [pc, #68]	; (8004594 <strtok+0x64>)
 8004550:	2157      	movs	r1, #87	; 0x57
 8004552:	f000 f9bf 	bl	80048d4 <__assert_func>
 8004556:	e9c0 4400 	strd	r4, r4, [r0]
 800455a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800455e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004562:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004566:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800456a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800456e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004572:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004576:	6184      	str	r4, [r0, #24]
 8004578:	7704      	strb	r4, [r0, #28]
 800457a:	6244      	str	r4, [r0, #36]	; 0x24
 800457c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800457e:	2301      	movs	r3, #1
 8004580:	4628      	mov	r0, r5
 8004582:	b002      	add	sp, #8
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	f000 b806 	b.w	8004598 <__strtok_r>
 800458c:	200001b0 	.word	0x200001b0
 8004590:	0801287e 	.word	0x0801287e
 8004594:	08012895 	.word	0x08012895

08004598 <__strtok_r>:
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459a:	b908      	cbnz	r0, 80045a0 <__strtok_r+0x8>
 800459c:	6810      	ldr	r0, [r2, #0]
 800459e:	b188      	cbz	r0, 80045c4 <__strtok_r+0x2c>
 80045a0:	4604      	mov	r4, r0
 80045a2:	4620      	mov	r0, r4
 80045a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80045a8:	460f      	mov	r7, r1
 80045aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80045ae:	b91e      	cbnz	r6, 80045b8 <__strtok_r+0x20>
 80045b0:	b965      	cbnz	r5, 80045cc <__strtok_r+0x34>
 80045b2:	6015      	str	r5, [r2, #0]
 80045b4:	4628      	mov	r0, r5
 80045b6:	e005      	b.n	80045c4 <__strtok_r+0x2c>
 80045b8:	42b5      	cmp	r5, r6
 80045ba:	d1f6      	bne.n	80045aa <__strtok_r+0x12>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <__strtok_r+0xa>
 80045c0:	6014      	str	r4, [r2, #0]
 80045c2:	7003      	strb	r3, [r0, #0]
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	461c      	mov	r4, r3
 80045c8:	e00c      	b.n	80045e4 <__strtok_r+0x4c>
 80045ca:	b915      	cbnz	r5, 80045d2 <__strtok_r+0x3a>
 80045cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045d0:	460e      	mov	r6, r1
 80045d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80045d6:	42ab      	cmp	r3, r5
 80045d8:	d1f7      	bne.n	80045ca <__strtok_r+0x32>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f3      	beq.n	80045c6 <__strtok_r+0x2e>
 80045de:	2300      	movs	r3, #0
 80045e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80045e4:	6014      	str	r4, [r2, #0]
 80045e6:	e7ed      	b.n	80045c4 <__strtok_r+0x2c>

080045e8 <_strtoul_l.constprop.0>:
 80045e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045ec:	4f36      	ldr	r7, [pc, #216]	; (80046c8 <_strtoul_l.constprop.0+0xe0>)
 80045ee:	4686      	mov	lr, r0
 80045f0:	460d      	mov	r5, r1
 80045f2:	4628      	mov	r0, r5
 80045f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045f8:	5de6      	ldrb	r6, [r4, r7]
 80045fa:	f016 0608 	ands.w	r6, r6, #8
 80045fe:	d1f8      	bne.n	80045f2 <_strtoul_l.constprop.0+0xa>
 8004600:	2c2d      	cmp	r4, #45	; 0x2d
 8004602:	d12f      	bne.n	8004664 <_strtoul_l.constprop.0+0x7c>
 8004604:	782c      	ldrb	r4, [r5, #0]
 8004606:	2601      	movs	r6, #1
 8004608:	1c85      	adds	r5, r0, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d057      	beq.n	80046be <_strtoul_l.constprop.0+0xd6>
 800460e:	2b10      	cmp	r3, #16
 8004610:	d109      	bne.n	8004626 <_strtoul_l.constprop.0+0x3e>
 8004612:	2c30      	cmp	r4, #48	; 0x30
 8004614:	d107      	bne.n	8004626 <_strtoul_l.constprop.0+0x3e>
 8004616:	7828      	ldrb	r0, [r5, #0]
 8004618:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800461c:	2858      	cmp	r0, #88	; 0x58
 800461e:	d149      	bne.n	80046b4 <_strtoul_l.constprop.0+0xcc>
 8004620:	786c      	ldrb	r4, [r5, #1]
 8004622:	2310      	movs	r3, #16
 8004624:	3502      	adds	r5, #2
 8004626:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800462a:	2700      	movs	r7, #0
 800462c:	fbb8 f8f3 	udiv	r8, r8, r3
 8004630:	fb03 f908 	mul.w	r9, r3, r8
 8004634:	ea6f 0909 	mvn.w	r9, r9
 8004638:	4638      	mov	r0, r7
 800463a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800463e:	f1bc 0f09 	cmp.w	ip, #9
 8004642:	d814      	bhi.n	800466e <_strtoul_l.constprop.0+0x86>
 8004644:	4664      	mov	r4, ip
 8004646:	42a3      	cmp	r3, r4
 8004648:	dd22      	ble.n	8004690 <_strtoul_l.constprop.0+0xa8>
 800464a:	2f00      	cmp	r7, #0
 800464c:	db1d      	blt.n	800468a <_strtoul_l.constprop.0+0xa2>
 800464e:	4580      	cmp	r8, r0
 8004650:	d31b      	bcc.n	800468a <_strtoul_l.constprop.0+0xa2>
 8004652:	d101      	bne.n	8004658 <_strtoul_l.constprop.0+0x70>
 8004654:	45a1      	cmp	r9, r4
 8004656:	db18      	blt.n	800468a <_strtoul_l.constprop.0+0xa2>
 8004658:	fb00 4003 	mla	r0, r0, r3, r4
 800465c:	2701      	movs	r7, #1
 800465e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004662:	e7ea      	b.n	800463a <_strtoul_l.constprop.0+0x52>
 8004664:	2c2b      	cmp	r4, #43	; 0x2b
 8004666:	bf04      	itt	eq
 8004668:	782c      	ldrbeq	r4, [r5, #0]
 800466a:	1c85      	addeq	r5, r0, #2
 800466c:	e7cd      	b.n	800460a <_strtoul_l.constprop.0+0x22>
 800466e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004672:	f1bc 0f19 	cmp.w	ip, #25
 8004676:	d801      	bhi.n	800467c <_strtoul_l.constprop.0+0x94>
 8004678:	3c37      	subs	r4, #55	; 0x37
 800467a:	e7e4      	b.n	8004646 <_strtoul_l.constprop.0+0x5e>
 800467c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004680:	f1bc 0f19 	cmp.w	ip, #25
 8004684:	d804      	bhi.n	8004690 <_strtoul_l.constprop.0+0xa8>
 8004686:	3c57      	subs	r4, #87	; 0x57
 8004688:	e7dd      	b.n	8004646 <_strtoul_l.constprop.0+0x5e>
 800468a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800468e:	e7e6      	b.n	800465e <_strtoul_l.constprop.0+0x76>
 8004690:	2f00      	cmp	r7, #0
 8004692:	da07      	bge.n	80046a4 <_strtoul_l.constprop.0+0xbc>
 8004694:	2322      	movs	r3, #34	; 0x22
 8004696:	f8ce 3000 	str.w	r3, [lr]
 800469a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800469e:	b932      	cbnz	r2, 80046ae <_strtoul_l.constprop.0+0xc6>
 80046a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046a4:	b106      	cbz	r6, 80046a8 <_strtoul_l.constprop.0+0xc0>
 80046a6:	4240      	negs	r0, r0
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d0f9      	beq.n	80046a0 <_strtoul_l.constprop.0+0xb8>
 80046ac:	b107      	cbz	r7, 80046b0 <_strtoul_l.constprop.0+0xc8>
 80046ae:	1e69      	subs	r1, r5, #1
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	e7f5      	b.n	80046a0 <_strtoul_l.constprop.0+0xb8>
 80046b4:	2430      	movs	r4, #48	; 0x30
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1b5      	bne.n	8004626 <_strtoul_l.constprop.0+0x3e>
 80046ba:	2308      	movs	r3, #8
 80046bc:	e7b3      	b.n	8004626 <_strtoul_l.constprop.0+0x3e>
 80046be:	2c30      	cmp	r4, #48	; 0x30
 80046c0:	d0a9      	beq.n	8004616 <_strtoul_l.constprop.0+0x2e>
 80046c2:	230a      	movs	r3, #10
 80046c4:	e7af      	b.n	8004626 <_strtoul_l.constprop.0+0x3e>
 80046c6:	bf00      	nop
 80046c8:	080126e8 	.word	0x080126e8

080046cc <strtoul>:
 80046cc:	4613      	mov	r3, r2
 80046ce:	460a      	mov	r2, r1
 80046d0:	4601      	mov	r1, r0
 80046d2:	4802      	ldr	r0, [pc, #8]	; (80046dc <strtoul+0x10>)
 80046d4:	6800      	ldr	r0, [r0, #0]
 80046d6:	f7ff bf87 	b.w	80045e8 <_strtoul_l.constprop.0>
 80046da:	bf00      	nop
 80046dc:	200001b0 	.word	0x200001b0

080046e0 <_vsniprintf_r>:
 80046e0:	b530      	push	{r4, r5, lr}
 80046e2:	4614      	mov	r4, r2
 80046e4:	2c00      	cmp	r4, #0
 80046e6:	b09b      	sub	sp, #108	; 0x6c
 80046e8:	4605      	mov	r5, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	da05      	bge.n	80046fa <_vsniprintf_r+0x1a>
 80046ee:	238b      	movs	r3, #139	; 0x8b
 80046f0:	6003      	str	r3, [r0, #0]
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f6:	b01b      	add	sp, #108	; 0x6c
 80046f8:	bd30      	pop	{r4, r5, pc}
 80046fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004702:	bf14      	ite	ne
 8004704:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004708:	4623      	moveq	r3, r4
 800470a:	9302      	str	r3, [sp, #8]
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004712:	9100      	str	r1, [sp, #0]
 8004714:	9104      	str	r1, [sp, #16]
 8004716:	f8ad 300e 	strh.w	r3, [sp, #14]
 800471a:	4669      	mov	r1, sp
 800471c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800471e:	f001 fc0f 	bl	8005f40 <_svfiprintf_r>
 8004722:	1c43      	adds	r3, r0, #1
 8004724:	bfbc      	itt	lt
 8004726:	238b      	movlt	r3, #139	; 0x8b
 8004728:	602b      	strlt	r3, [r5, #0]
 800472a:	2c00      	cmp	r4, #0
 800472c:	d0e3      	beq.n	80046f6 <_vsniprintf_r+0x16>
 800472e:	9b00      	ldr	r3, [sp, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e7df      	b.n	80046f6 <_vsniprintf_r+0x16>
	...

08004738 <vsniprintf>:
 8004738:	b507      	push	{r0, r1, r2, lr}
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	460a      	mov	r2, r1
 8004740:	4601      	mov	r1, r0
 8004742:	4803      	ldr	r0, [pc, #12]	; (8004750 <vsniprintf+0x18>)
 8004744:	6800      	ldr	r0, [r0, #0]
 8004746:	f7ff ffcb 	bl	80046e0 <_vsniprintf_r>
 800474a:	b003      	add	sp, #12
 800474c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004750:	200001b0 	.word	0x200001b0

08004754 <__swbuf_r>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	460e      	mov	r6, r1
 8004758:	4614      	mov	r4, r2
 800475a:	4605      	mov	r5, r0
 800475c:	b118      	cbz	r0, 8004766 <__swbuf_r+0x12>
 800475e:	6983      	ldr	r3, [r0, #24]
 8004760:	b90b      	cbnz	r3, 8004766 <__swbuf_r+0x12>
 8004762:	f7fe ff37 	bl	80035d4 <__sinit>
 8004766:	4b21      	ldr	r3, [pc, #132]	; (80047ec <__swbuf_r+0x98>)
 8004768:	429c      	cmp	r4, r3
 800476a:	d12b      	bne.n	80047c4 <__swbuf_r+0x70>
 800476c:	686c      	ldr	r4, [r5, #4]
 800476e:	69a3      	ldr	r3, [r4, #24]
 8004770:	60a3      	str	r3, [r4, #8]
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	071a      	lsls	r2, r3, #28
 8004776:	d52f      	bpl.n	80047d8 <__swbuf_r+0x84>
 8004778:	6923      	ldr	r3, [r4, #16]
 800477a:	b36b      	cbz	r3, 80047d8 <__swbuf_r+0x84>
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	1ac0      	subs	r0, r0, r3
 8004782:	6963      	ldr	r3, [r4, #20]
 8004784:	b2f6      	uxtb	r6, r6
 8004786:	4283      	cmp	r3, r0
 8004788:	4637      	mov	r7, r6
 800478a:	dc04      	bgt.n	8004796 <__swbuf_r+0x42>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f7fe fe7a 	bl	8003488 <_fflush_r>
 8004794:	bb30      	cbnz	r0, 80047e4 <__swbuf_r+0x90>
 8004796:	68a3      	ldr	r3, [r4, #8]
 8004798:	3b01      	subs	r3, #1
 800479a:	60a3      	str	r3, [r4, #8]
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	701e      	strb	r6, [r3, #0]
 80047a4:	6963      	ldr	r3, [r4, #20]
 80047a6:	3001      	adds	r0, #1
 80047a8:	4283      	cmp	r3, r0
 80047aa:	d004      	beq.n	80047b6 <__swbuf_r+0x62>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	07db      	lsls	r3, r3, #31
 80047b0:	d506      	bpl.n	80047c0 <__swbuf_r+0x6c>
 80047b2:	2e0a      	cmp	r6, #10
 80047b4:	d104      	bne.n	80047c0 <__swbuf_r+0x6c>
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f7fe fe65 	bl	8003488 <_fflush_r>
 80047be:	b988      	cbnz	r0, 80047e4 <__swbuf_r+0x90>
 80047c0:	4638      	mov	r0, r7
 80047c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <__swbuf_r+0x9c>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d101      	bne.n	80047ce <__swbuf_r+0x7a>
 80047ca:	68ac      	ldr	r4, [r5, #8]
 80047cc:	e7cf      	b.n	800476e <__swbuf_r+0x1a>
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <__swbuf_r+0xa0>)
 80047d0:	429c      	cmp	r4, r3
 80047d2:	bf08      	it	eq
 80047d4:	68ec      	ldreq	r4, [r5, #12]
 80047d6:	e7ca      	b.n	800476e <__swbuf_r+0x1a>
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 f80c 	bl	80047f8 <__swsetup_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d0cb      	beq.n	800477c <__swbuf_r+0x28>
 80047e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047e8:	e7ea      	b.n	80047c0 <__swbuf_r+0x6c>
 80047ea:	bf00      	nop
 80047ec:	08012808 	.word	0x08012808
 80047f0:	08012828 	.word	0x08012828
 80047f4:	080127e8 	.word	0x080127e8

080047f8 <__swsetup_r>:
 80047f8:	4b32      	ldr	r3, [pc, #200]	; (80048c4 <__swsetup_r+0xcc>)
 80047fa:	b570      	push	{r4, r5, r6, lr}
 80047fc:	681d      	ldr	r5, [r3, #0]
 80047fe:	4606      	mov	r6, r0
 8004800:	460c      	mov	r4, r1
 8004802:	b125      	cbz	r5, 800480e <__swsetup_r+0x16>
 8004804:	69ab      	ldr	r3, [r5, #24]
 8004806:	b913      	cbnz	r3, 800480e <__swsetup_r+0x16>
 8004808:	4628      	mov	r0, r5
 800480a:	f7fe fee3 	bl	80035d4 <__sinit>
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <__swsetup_r+0xd0>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d10f      	bne.n	8004834 <__swsetup_r+0x3c>
 8004814:	686c      	ldr	r4, [r5, #4]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800481c:	0719      	lsls	r1, r3, #28
 800481e:	d42c      	bmi.n	800487a <__swsetup_r+0x82>
 8004820:	06dd      	lsls	r5, r3, #27
 8004822:	d411      	bmi.n	8004848 <__swsetup_r+0x50>
 8004824:	2309      	movs	r3, #9
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004832:	e03e      	b.n	80048b2 <__swsetup_r+0xba>
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <__swsetup_r+0xd4>)
 8004836:	429c      	cmp	r4, r3
 8004838:	d101      	bne.n	800483e <__swsetup_r+0x46>
 800483a:	68ac      	ldr	r4, [r5, #8]
 800483c:	e7eb      	b.n	8004816 <__swsetup_r+0x1e>
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <__swsetup_r+0xd8>)
 8004840:	429c      	cmp	r4, r3
 8004842:	bf08      	it	eq
 8004844:	68ec      	ldreq	r4, [r5, #12]
 8004846:	e7e6      	b.n	8004816 <__swsetup_r+0x1e>
 8004848:	0758      	lsls	r0, r3, #29
 800484a:	d512      	bpl.n	8004872 <__swsetup_r+0x7a>
 800484c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484e:	b141      	cbz	r1, 8004862 <__swsetup_r+0x6a>
 8004850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004854:	4299      	cmp	r1, r3
 8004856:	d002      	beq.n	800485e <__swsetup_r+0x66>
 8004858:	4630      	mov	r0, r6
 800485a:	f7fe ff89 	bl	8003770 <_free_r>
 800485e:	2300      	movs	r3, #0
 8004860:	6363      	str	r3, [r4, #52]	; 0x34
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	2300      	movs	r3, #0
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0308 	orr.w	r3, r3, #8
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	b94b      	cbnz	r3, 8004892 <__swsetup_r+0x9a>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d003      	beq.n	8004892 <__swsetup_r+0x9a>
 800488a:	4621      	mov	r1, r4
 800488c:	4630      	mov	r0, r6
 800488e:	f000 fef5 	bl	800567c <__smakebuf_r>
 8004892:	89a0      	ldrh	r0, [r4, #12]
 8004894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004898:	f010 0301 	ands.w	r3, r0, #1
 800489c:	d00a      	beq.n	80048b4 <__swsetup_r+0xbc>
 800489e:	2300      	movs	r3, #0
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	6963      	ldr	r3, [r4, #20]
 80048a4:	425b      	negs	r3, r3
 80048a6:	61a3      	str	r3, [r4, #24]
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b943      	cbnz	r3, 80048be <__swsetup_r+0xc6>
 80048ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048b0:	d1ba      	bne.n	8004828 <__swsetup_r+0x30>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	0781      	lsls	r1, r0, #30
 80048b6:	bf58      	it	pl
 80048b8:	6963      	ldrpl	r3, [r4, #20]
 80048ba:	60a3      	str	r3, [r4, #8]
 80048bc:	e7f4      	b.n	80048a8 <__swsetup_r+0xb0>
 80048be:	2000      	movs	r0, #0
 80048c0:	e7f7      	b.n	80048b2 <__swsetup_r+0xba>
 80048c2:	bf00      	nop
 80048c4:	200001b0 	.word	0x200001b0
 80048c8:	08012808 	.word	0x08012808
 80048cc:	08012828 	.word	0x08012828
 80048d0:	080127e8 	.word	0x080127e8

080048d4 <__assert_func>:
 80048d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048d6:	4614      	mov	r4, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <__assert_func+0x2c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4605      	mov	r5, r0
 80048e0:	68d8      	ldr	r0, [r3, #12]
 80048e2:	b14c      	cbz	r4, 80048f8 <__assert_func+0x24>
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <__assert_func+0x30>)
 80048e6:	9100      	str	r1, [sp, #0]
 80048e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80048ec:	4906      	ldr	r1, [pc, #24]	; (8004908 <__assert_func+0x34>)
 80048ee:	462b      	mov	r3, r5
 80048f0:	f000 fe88 	bl	8005604 <fiprintf>
 80048f4:	f001 fdd3 	bl	800649e <abort>
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <__assert_func+0x38>)
 80048fa:	461c      	mov	r4, r3
 80048fc:	e7f3      	b.n	80048e6 <__assert_func+0x12>
 80048fe:	bf00      	nop
 8004900:	200001b0 	.word	0x200001b0
 8004904:	08012914 	.word	0x08012914
 8004908:	08012921 	.word	0x08012921
 800490c:	08008df2 	.word	0x08008df2

08004910 <quorem>:
 8004910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	6903      	ldr	r3, [r0, #16]
 8004916:	690c      	ldr	r4, [r1, #16]
 8004918:	42a3      	cmp	r3, r4
 800491a:	4607      	mov	r7, r0
 800491c:	f2c0 8081 	blt.w	8004a22 <quorem+0x112>
 8004920:	3c01      	subs	r4, #1
 8004922:	f101 0814 	add.w	r8, r1, #20
 8004926:	f100 0514 	add.w	r5, r0, #20
 800492a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004938:	3301      	adds	r3, #1
 800493a:	429a      	cmp	r2, r3
 800493c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004944:	fbb2 f6f3 	udiv	r6, r2, r3
 8004948:	d331      	bcc.n	80049ae <quorem+0x9e>
 800494a:	f04f 0e00 	mov.w	lr, #0
 800494e:	4640      	mov	r0, r8
 8004950:	46ac      	mov	ip, r5
 8004952:	46f2      	mov	sl, lr
 8004954:	f850 2b04 	ldr.w	r2, [r0], #4
 8004958:	b293      	uxth	r3, r2
 800495a:	fb06 e303 	mla	r3, r6, r3, lr
 800495e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004962:	b29b      	uxth	r3, r3
 8004964:	ebaa 0303 	sub.w	r3, sl, r3
 8004968:	0c12      	lsrs	r2, r2, #16
 800496a:	f8dc a000 	ldr.w	sl, [ip]
 800496e:	fb06 e202 	mla	r2, r6, r2, lr
 8004972:	fa13 f38a 	uxtah	r3, r3, sl
 8004976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800497a:	fa1f fa82 	uxth.w	sl, r2
 800497e:	f8dc 2000 	ldr.w	r2, [ip]
 8004982:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004986:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800498a:	b29b      	uxth	r3, r3
 800498c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004990:	4581      	cmp	r9, r0
 8004992:	f84c 3b04 	str.w	r3, [ip], #4
 8004996:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800499a:	d2db      	bcs.n	8004954 <quorem+0x44>
 800499c:	f855 300b 	ldr.w	r3, [r5, fp]
 80049a0:	b92b      	cbnz	r3, 80049ae <quorem+0x9e>
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	429d      	cmp	r5, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	d32e      	bcc.n	8004a0a <quorem+0xfa>
 80049ac:	613c      	str	r4, [r7, #16]
 80049ae:	4638      	mov	r0, r7
 80049b0:	f001 f95a 	bl	8005c68 <__mcmp>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	db24      	blt.n	8004a02 <quorem+0xf2>
 80049b8:	3601      	adds	r6, #1
 80049ba:	4628      	mov	r0, r5
 80049bc:	f04f 0c00 	mov.w	ip, #0
 80049c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80049c4:	f8d0 e000 	ldr.w	lr, [r0]
 80049c8:	b293      	uxth	r3, r2
 80049ca:	ebac 0303 	sub.w	r3, ip, r3
 80049ce:	0c12      	lsrs	r2, r2, #16
 80049d0:	fa13 f38e 	uxtah	r3, r3, lr
 80049d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049dc:	b29b      	uxth	r3, r3
 80049de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049e2:	45c1      	cmp	r9, r8
 80049e4:	f840 3b04 	str.w	r3, [r0], #4
 80049e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049ec:	d2e8      	bcs.n	80049c0 <quorem+0xb0>
 80049ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049f6:	b922      	cbnz	r2, 8004a02 <quorem+0xf2>
 80049f8:	3b04      	subs	r3, #4
 80049fa:	429d      	cmp	r5, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	d30a      	bcc.n	8004a16 <quorem+0x106>
 8004a00:	613c      	str	r4, [r7, #16]
 8004a02:	4630      	mov	r0, r6
 8004a04:	b003      	add	sp, #12
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	3b04      	subs	r3, #4
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	d1cc      	bne.n	80049ac <quorem+0x9c>
 8004a12:	3c01      	subs	r4, #1
 8004a14:	e7c7      	b.n	80049a6 <quorem+0x96>
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	3b04      	subs	r3, #4
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d1f0      	bne.n	8004a00 <quorem+0xf0>
 8004a1e:	3c01      	subs	r4, #1
 8004a20:	e7eb      	b.n	80049fa <quorem+0xea>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e7ee      	b.n	8004a04 <quorem+0xf4>
	...

08004a28 <_dtoa_r>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	ed2d 8b04 	vpush	{d8-d9}
 8004a30:	ec57 6b10 	vmov	r6, r7, d0
 8004a34:	b093      	sub	sp, #76	; 0x4c
 8004a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a3c:	9106      	str	r1, [sp, #24]
 8004a3e:	ee10 aa10 	vmov	sl, s0
 8004a42:	4604      	mov	r4, r0
 8004a44:	9209      	str	r2, [sp, #36]	; 0x24
 8004a46:	930c      	str	r3, [sp, #48]	; 0x30
 8004a48:	46bb      	mov	fp, r7
 8004a4a:	b975      	cbnz	r5, 8004a6a <_dtoa_r+0x42>
 8004a4c:	2010      	movs	r0, #16
 8004a4e:	f000 fe55 	bl	80056fc <malloc>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6260      	str	r0, [r4, #36]	; 0x24
 8004a56:	b920      	cbnz	r0, 8004a62 <_dtoa_r+0x3a>
 8004a58:	4ba7      	ldr	r3, [pc, #668]	; (8004cf8 <_dtoa_r+0x2d0>)
 8004a5a:	21ea      	movs	r1, #234	; 0xea
 8004a5c:	48a7      	ldr	r0, [pc, #668]	; (8004cfc <_dtoa_r+0x2d4>)
 8004a5e:	f7ff ff39 	bl	80048d4 <__assert_func>
 8004a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a66:	6005      	str	r5, [r0, #0]
 8004a68:	60c5      	str	r5, [r0, #12]
 8004a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	b151      	cbz	r1, 8004a86 <_dtoa_r+0x5e>
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	604a      	str	r2, [r1, #4]
 8004a74:	2301      	movs	r3, #1
 8004a76:	4093      	lsls	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 feb2 	bl	80057e4 <_Bfree>
 8004a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	1e3b      	subs	r3, r7, #0
 8004a88:	bfaa      	itet	ge
 8004a8a:	2300      	movge	r3, #0
 8004a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004a90:	f8c8 3000 	strge.w	r3, [r8]
 8004a94:	4b9a      	ldr	r3, [pc, #616]	; (8004d00 <_dtoa_r+0x2d8>)
 8004a96:	bfbc      	itt	lt
 8004a98:	2201      	movlt	r2, #1
 8004a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8004a9e:	ea33 030b 	bics.w	r3, r3, fp
 8004aa2:	d11b      	bne.n	8004adc <_dtoa_r+0xb4>
 8004aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ab0:	4333      	orrs	r3, r6
 8004ab2:	f000 8592 	beq.w	80055da <_dtoa_r+0xbb2>
 8004ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ab8:	b963      	cbnz	r3, 8004ad4 <_dtoa_r+0xac>
 8004aba:	4b92      	ldr	r3, [pc, #584]	; (8004d04 <_dtoa_r+0x2dc>)
 8004abc:	e022      	b.n	8004b04 <_dtoa_r+0xdc>
 8004abe:	4b92      	ldr	r3, [pc, #584]	; (8004d08 <_dtoa_r+0x2e0>)
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	9801      	ldr	r0, [sp, #4]
 8004aca:	b013      	add	sp, #76	; 0x4c
 8004acc:	ecbd 8b04 	vpop	{d8-d9}
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	4b8b      	ldr	r3, [pc, #556]	; (8004d04 <_dtoa_r+0x2dc>)
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	3303      	adds	r3, #3
 8004ada:	e7f3      	b.n	8004ac4 <_dtoa_r+0x9c>
 8004adc:	2200      	movs	r2, #0
 8004ade:	2300      	movs	r3, #0
 8004ae0:	4650      	mov	r0, sl
 8004ae2:	4659      	mov	r1, fp
 8004ae4:	f7fc f9bc 	bl	8000e60 <__aeabi_dcmpeq>
 8004ae8:	ec4b ab19 	vmov	d9, sl, fp
 8004aec:	4680      	mov	r8, r0
 8004aee:	b158      	cbz	r0, 8004b08 <_dtoa_r+0xe0>
 8004af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004af2:	2301      	movs	r3, #1
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 856b 	beq.w	80055d4 <_dtoa_r+0xbac>
 8004afe:	4883      	ldr	r0, [pc, #524]	; (8004d0c <_dtoa_r+0x2e4>)
 8004b00:	6018      	str	r0, [r3, #0]
 8004b02:	1e43      	subs	r3, r0, #1
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	e7df      	b.n	8004ac8 <_dtoa_r+0xa0>
 8004b08:	ec4b ab10 	vmov	d0, sl, fp
 8004b0c:	aa10      	add	r2, sp, #64	; 0x40
 8004b0e:	a911      	add	r1, sp, #68	; 0x44
 8004b10:	4620      	mov	r0, r4
 8004b12:	f001 f94f 	bl	8005db4 <__d2b>
 8004b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004b1a:	ee08 0a10 	vmov	s16, r0
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	f000 8084 	beq.w	8004c2c <_dtoa_r+0x204>
 8004b24:	ee19 3a90 	vmov	r3, s19
 8004b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b30:	4656      	mov	r6, sl
 8004b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004b3e:	4b74      	ldr	r3, [pc, #464]	; (8004d10 <_dtoa_r+0x2e8>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb fb69 	bl	800021c <__aeabi_dsub>
 8004b4a:	a365      	add	r3, pc, #404	; (adr r3, 8004ce0 <_dtoa_r+0x2b8>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb ff1e 	bl	8000990 <__aeabi_dmul>
 8004b54:	a364      	add	r3, pc, #400	; (adr r3, 8004ce8 <_dtoa_r+0x2c0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fb61 	bl	8000220 <__adddf3>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	4628      	mov	r0, r5
 8004b62:	460f      	mov	r7, r1
 8004b64:	f7fb fca8 	bl	80004b8 <__aeabi_i2d>
 8004b68:	a361      	add	r3, pc, #388	; (adr r3, 8004cf0 <_dtoa_r+0x2c8>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb ff0f 	bl	8000990 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb fb51 	bl	8000220 <__adddf3>
 8004b7e:	4606      	mov	r6, r0
 8004b80:	460f      	mov	r7, r1
 8004b82:	f7fb fd03 	bl	800058c <__aeabi_d2iz>
 8004b86:	2200      	movs	r2, #0
 8004b88:	9000      	str	r0, [sp, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	4639      	mov	r1, r7
 8004b90:	f7fc f970 	bl	8000e74 <__aeabi_dcmplt>
 8004b94:	b150      	cbz	r0, 8004bac <_dtoa_r+0x184>
 8004b96:	9800      	ldr	r0, [sp, #0]
 8004b98:	f7fb fc8e 	bl	80004b8 <__aeabi_i2d>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	f7fc f95e 	bl	8000e60 <__aeabi_dcmpeq>
 8004ba4:	b910      	cbnz	r0, 8004bac <_dtoa_r+0x184>
 8004ba6:	9b00      	ldr	r3, [sp, #0]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	9b00      	ldr	r3, [sp, #0]
 8004bae:	2b16      	cmp	r3, #22
 8004bb0:	d85a      	bhi.n	8004c68 <_dtoa_r+0x240>
 8004bb2:	9a00      	ldr	r2, [sp, #0]
 8004bb4:	4b57      	ldr	r3, [pc, #348]	; (8004d14 <_dtoa_r+0x2ec>)
 8004bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	ec51 0b19 	vmov	r0, r1, d9
 8004bc2:	f7fc f957 	bl	8000e74 <__aeabi_dcmplt>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d050      	beq.n	8004c6c <_dtoa_r+0x244>
 8004bca:	9b00      	ldr	r3, [sp, #0]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bd6:	1b5d      	subs	r5, r3, r5
 8004bd8:	1e6b      	subs	r3, r5, #1
 8004bda:	9305      	str	r3, [sp, #20]
 8004bdc:	bf45      	ittet	mi
 8004bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8004be2:	9304      	strmi	r3, [sp, #16]
 8004be4:	2300      	movpl	r3, #0
 8004be6:	2300      	movmi	r3, #0
 8004be8:	bf4c      	ite	mi
 8004bea:	9305      	strmi	r3, [sp, #20]
 8004bec:	9304      	strpl	r3, [sp, #16]
 8004bee:	9b00      	ldr	r3, [sp, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db3d      	blt.n	8004c70 <_dtoa_r+0x248>
 8004bf4:	9b05      	ldr	r3, [sp, #20]
 8004bf6:	9a00      	ldr	r2, [sp, #0]
 8004bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8004bfa:	4413      	add	r3, r2
 8004bfc:	9305      	str	r3, [sp, #20]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9307      	str	r3, [sp, #28]
 8004c02:	9b06      	ldr	r3, [sp, #24]
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	f200 8089 	bhi.w	8004d1c <_dtoa_r+0x2f4>
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	bfc4      	itt	gt
 8004c0e:	3b04      	subgt	r3, #4
 8004c10:	9306      	strgt	r3, [sp, #24]
 8004c12:	9b06      	ldr	r3, [sp, #24]
 8004c14:	f1a3 0302 	sub.w	r3, r3, #2
 8004c18:	bfcc      	ite	gt
 8004c1a:	2500      	movgt	r5, #0
 8004c1c:	2501      	movle	r5, #1
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	f200 8087 	bhi.w	8004d32 <_dtoa_r+0x30a>
 8004c24:	e8df f003 	tbb	[pc, r3]
 8004c28:	59383a2d 	.word	0x59383a2d
 8004c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004c30:	441d      	add	r5, r3
 8004c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	bfc1      	itttt	gt
 8004c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8004c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c4a:	bfda      	itte	le
 8004c4c:	f1c3 0320 	rsble	r3, r3, #32
 8004c50:	fa06 f003 	lslle.w	r0, r6, r3
 8004c54:	4318      	orrgt	r0, r3
 8004c56:	f7fb fc1f 	bl	8000498 <__aeabi_ui2d>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c62:	3d01      	subs	r5, #1
 8004c64:	930e      	str	r3, [sp, #56]	; 0x38
 8004c66:	e76a      	b.n	8004b3e <_dtoa_r+0x116>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e7b2      	b.n	8004bd2 <_dtoa_r+0x1aa>
 8004c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c6e:	e7b1      	b.n	8004bd4 <_dtoa_r+0x1ac>
 8004c70:	9b04      	ldr	r3, [sp, #16]
 8004c72:	9a00      	ldr	r2, [sp, #0]
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	4253      	negs	r3, r2
 8004c7a:	9307      	str	r3, [sp, #28]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c80:	e7bf      	b.n	8004c02 <_dtoa_r+0x1da>
 8004c82:	2300      	movs	r3, #0
 8004c84:	9308      	str	r3, [sp, #32]
 8004c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dc55      	bgt.n	8004d38 <_dtoa_r+0x310>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c92:	461a      	mov	r2, r3
 8004c94:	9209      	str	r2, [sp, #36]	; 0x24
 8004c96:	e00c      	b.n	8004cb2 <_dtoa_r+0x28a>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e7f3      	b.n	8004c84 <_dtoa_r+0x25c>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca0:	9308      	str	r3, [sp, #32]
 8004ca2:	9b00      	ldr	r3, [sp, #0]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	bfb8      	it	lt
 8004cb0:	2301      	movlt	r3, #1
 8004cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	6042      	str	r2, [r0, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	f102 0614 	add.w	r6, r2, #20
 8004cbe:	429e      	cmp	r6, r3
 8004cc0:	6841      	ldr	r1, [r0, #4]
 8004cc2:	d93d      	bls.n	8004d40 <_dtoa_r+0x318>
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f000 fd4d 	bl	8005764 <_Balloc>
 8004cca:	9001      	str	r0, [sp, #4]
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d13b      	bne.n	8004d48 <_dtoa_r+0x320>
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <_dtoa_r+0x2f0>)
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cd8:	e6c0      	b.n	8004a5c <_dtoa_r+0x34>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e7df      	b.n	8004c9e <_dtoa_r+0x276>
 8004cde:	bf00      	nop
 8004ce0:	636f4361 	.word	0x636f4361
 8004ce4:	3fd287a7 	.word	0x3fd287a7
 8004ce8:	8b60c8b3 	.word	0x8b60c8b3
 8004cec:	3fc68a28 	.word	0x3fc68a28
 8004cf0:	509f79fb 	.word	0x509f79fb
 8004cf4:	3fd34413 	.word	0x3fd34413
 8004cf8:	0801287e 	.word	0x0801287e
 8004cfc:	0801295d 	.word	0x0801295d
 8004d00:	7ff00000 	.word	0x7ff00000
 8004d04:	08012959 	.word	0x08012959
 8004d08:	08012950 	.word	0x08012950
 8004d0c:	080086fb 	.word	0x080086fb
 8004d10:	3ff80000 	.word	0x3ff80000
 8004d14:	08012a98 	.word	0x08012a98
 8004d18:	080129da 	.word	0x080129da
 8004d1c:	2501      	movs	r5, #1
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9306      	str	r3, [sp, #24]
 8004d22:	9508      	str	r5, [sp, #32]
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2312      	movs	r3, #18
 8004d30:	e7b0      	b.n	8004c94 <_dtoa_r+0x26c>
 8004d32:	2301      	movs	r3, #1
 8004d34:	9308      	str	r3, [sp, #32]
 8004d36:	e7f5      	b.n	8004d24 <_dtoa_r+0x2fc>
 8004d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d3e:	e7b8      	b.n	8004cb2 <_dtoa_r+0x28a>
 8004d40:	3101      	adds	r1, #1
 8004d42:	6041      	str	r1, [r0, #4]
 8004d44:	0052      	lsls	r2, r2, #1
 8004d46:	e7b8      	b.n	8004cba <_dtoa_r+0x292>
 8004d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d4a:	9a01      	ldr	r2, [sp, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	2b0e      	cmp	r3, #14
 8004d52:	f200 809d 	bhi.w	8004e90 <_dtoa_r+0x468>
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	f000 809a 	beq.w	8004e90 <_dtoa_r+0x468>
 8004d5c:	9b00      	ldr	r3, [sp, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	dd32      	ble.n	8004dc8 <_dtoa_r+0x3a0>
 8004d62:	4ab7      	ldr	r2, [pc, #732]	; (8005040 <_dtoa_r+0x618>)
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d70:	9b00      	ldr	r3, [sp, #0]
 8004d72:	05d8      	lsls	r0, r3, #23
 8004d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004d78:	d516      	bpl.n	8004da8 <_dtoa_r+0x380>
 8004d7a:	4bb2      	ldr	r3, [pc, #712]	; (8005044 <_dtoa_r+0x61c>)
 8004d7c:	ec51 0b19 	vmov	r0, r1, d9
 8004d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d84:	f7fb ff2e 	bl	8000be4 <__aeabi_ddiv>
 8004d88:	f007 070f 	and.w	r7, r7, #15
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	2503      	movs	r5, #3
 8004d92:	4eac      	ldr	r6, [pc, #688]	; (8005044 <_dtoa_r+0x61c>)
 8004d94:	b957      	cbnz	r7, 8004dac <_dtoa_r+0x384>
 8004d96:	4642      	mov	r2, r8
 8004d98:	464b      	mov	r3, r9
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	f7fb ff21 	bl	8000be4 <__aeabi_ddiv>
 8004da2:	4682      	mov	sl, r0
 8004da4:	468b      	mov	fp, r1
 8004da6:	e028      	b.n	8004dfa <_dtoa_r+0x3d2>
 8004da8:	2502      	movs	r5, #2
 8004daa:	e7f2      	b.n	8004d92 <_dtoa_r+0x36a>
 8004dac:	07f9      	lsls	r1, r7, #31
 8004dae:	d508      	bpl.n	8004dc2 <_dtoa_r+0x39a>
 8004db0:	4640      	mov	r0, r8
 8004db2:	4649      	mov	r1, r9
 8004db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004db8:	f7fb fdea 	bl	8000990 <__aeabi_dmul>
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	4680      	mov	r8, r0
 8004dc0:	4689      	mov	r9, r1
 8004dc2:	107f      	asrs	r7, r7, #1
 8004dc4:	3608      	adds	r6, #8
 8004dc6:	e7e5      	b.n	8004d94 <_dtoa_r+0x36c>
 8004dc8:	f000 809b 	beq.w	8004f02 <_dtoa_r+0x4da>
 8004dcc:	9b00      	ldr	r3, [sp, #0]
 8004dce:	4f9d      	ldr	r7, [pc, #628]	; (8005044 <_dtoa_r+0x61c>)
 8004dd0:	425e      	negs	r6, r3
 8004dd2:	4b9b      	ldr	r3, [pc, #620]	; (8005040 <_dtoa_r+0x618>)
 8004dd4:	f006 020f 	and.w	r2, r6, #15
 8004dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	ec51 0b19 	vmov	r0, r1, d9
 8004de4:	f7fb fdd4 	bl	8000990 <__aeabi_dmul>
 8004de8:	1136      	asrs	r6, r6, #4
 8004dea:	4682      	mov	sl, r0
 8004dec:	468b      	mov	fp, r1
 8004dee:	2300      	movs	r3, #0
 8004df0:	2502      	movs	r5, #2
 8004df2:	2e00      	cmp	r6, #0
 8004df4:	d17a      	bne.n	8004eec <_dtoa_r+0x4c4>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1d3      	bne.n	8004da2 <_dtoa_r+0x37a>
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8082 	beq.w	8004f06 <_dtoa_r+0x4de>
 8004e02:	4b91      	ldr	r3, [pc, #580]	; (8005048 <_dtoa_r+0x620>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	4650      	mov	r0, sl
 8004e08:	4659      	mov	r1, fp
 8004e0a:	f7fc f833 	bl	8000e74 <__aeabi_dcmplt>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d079      	beq.n	8004f06 <_dtoa_r+0x4de>
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d076      	beq.n	8004f06 <_dtoa_r+0x4de>
 8004e18:	9b02      	ldr	r3, [sp, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	dd36      	ble.n	8004e8c <_dtoa_r+0x464>
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	4650      	mov	r0, sl
 8004e22:	4659      	mov	r1, fp
 8004e24:	1e5f      	subs	r7, r3, #1
 8004e26:	2200      	movs	r2, #0
 8004e28:	4b88      	ldr	r3, [pc, #544]	; (800504c <_dtoa_r+0x624>)
 8004e2a:	f7fb fdb1 	bl	8000990 <__aeabi_dmul>
 8004e2e:	9e02      	ldr	r6, [sp, #8]
 8004e30:	4682      	mov	sl, r0
 8004e32:	468b      	mov	fp, r1
 8004e34:	3501      	adds	r5, #1
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7fb fb3e 	bl	80004b8 <__aeabi_i2d>
 8004e3c:	4652      	mov	r2, sl
 8004e3e:	465b      	mov	r3, fp
 8004e40:	f7fb fda6 	bl	8000990 <__aeabi_dmul>
 8004e44:	4b82      	ldr	r3, [pc, #520]	; (8005050 <_dtoa_r+0x628>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	f7fb f9ea 	bl	8000220 <__adddf3>
 8004e4c:	46d0      	mov	r8, sl
 8004e4e:	46d9      	mov	r9, fp
 8004e50:	4682      	mov	sl, r0
 8004e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	d158      	bne.n	8004f0c <_dtoa_r+0x4e4>
 8004e5a:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <_dtoa_r+0x62c>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4640      	mov	r0, r8
 8004e60:	4649      	mov	r1, r9
 8004e62:	f7fb f9db 	bl	800021c <__aeabi_dsub>
 8004e66:	4652      	mov	r2, sl
 8004e68:	465b      	mov	r3, fp
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	4689      	mov	r9, r1
 8004e6e:	f7fc f81f 	bl	8000eb0 <__aeabi_dcmpgt>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f040 8295 	bne.w	80053a2 <_dtoa_r+0x97a>
 8004e78:	4652      	mov	r2, sl
 8004e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb fff7 	bl	8000e74 <__aeabi_dcmplt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f040 8289 	bne.w	800539e <_dtoa_r+0x976>
 8004e8c:	ec5b ab19 	vmov	sl, fp, d9
 8004e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f2c0 8148 	blt.w	8005128 <_dtoa_r+0x700>
 8004e98:	9a00      	ldr	r2, [sp, #0]
 8004e9a:	2a0e      	cmp	r2, #14
 8004e9c:	f300 8144 	bgt.w	8005128 <_dtoa_r+0x700>
 8004ea0:	4b67      	ldr	r3, [pc, #412]	; (8005040 <_dtoa_r+0x618>)
 8004ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f280 80d5 	bge.w	800505c <_dtoa_r+0x634>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f300 80d1 	bgt.w	800505c <_dtoa_r+0x634>
 8004eba:	f040 826f 	bne.w	800539c <_dtoa_r+0x974>
 8004ebe:	4b65      	ldr	r3, [pc, #404]	; (8005054 <_dtoa_r+0x62c>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	f7fb fd63 	bl	8000990 <__aeabi_dmul>
 8004eca:	4652      	mov	r2, sl
 8004ecc:	465b      	mov	r3, fp
 8004ece:	f7fb ffe5 	bl	8000e9c <__aeabi_dcmpge>
 8004ed2:	9e03      	ldr	r6, [sp, #12]
 8004ed4:	4637      	mov	r7, r6
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	f040 8245 	bne.w	8005366 <_dtoa_r+0x93e>
 8004edc:	9d01      	ldr	r5, [sp, #4]
 8004ede:	2331      	movs	r3, #49	; 0x31
 8004ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8004ee4:	9b00      	ldr	r3, [sp, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	e240      	b.n	800536e <_dtoa_r+0x946>
 8004eec:	07f2      	lsls	r2, r6, #31
 8004eee:	d505      	bpl.n	8004efc <_dtoa_r+0x4d4>
 8004ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef4:	f7fb fd4c 	bl	8000990 <__aeabi_dmul>
 8004ef8:	3501      	adds	r5, #1
 8004efa:	2301      	movs	r3, #1
 8004efc:	1076      	asrs	r6, r6, #1
 8004efe:	3708      	adds	r7, #8
 8004f00:	e777      	b.n	8004df2 <_dtoa_r+0x3ca>
 8004f02:	2502      	movs	r5, #2
 8004f04:	e779      	b.n	8004dfa <_dtoa_r+0x3d2>
 8004f06:	9f00      	ldr	r7, [sp, #0]
 8004f08:	9e03      	ldr	r6, [sp, #12]
 8004f0a:	e794      	b.n	8004e36 <_dtoa_r+0x40e>
 8004f0c:	9901      	ldr	r1, [sp, #4]
 8004f0e:	4b4c      	ldr	r3, [pc, #304]	; (8005040 <_dtoa_r+0x618>)
 8004f10:	4431      	add	r1, r6
 8004f12:	910d      	str	r1, [sp, #52]	; 0x34
 8004f14:	9908      	ldr	r1, [sp, #32]
 8004f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	d043      	beq.n	8004faa <_dtoa_r+0x582>
 8004f22:	494d      	ldr	r1, [pc, #308]	; (8005058 <_dtoa_r+0x630>)
 8004f24:	2000      	movs	r0, #0
 8004f26:	f7fb fe5d 	bl	8000be4 <__aeabi_ddiv>
 8004f2a:	4652      	mov	r2, sl
 8004f2c:	465b      	mov	r3, fp
 8004f2e:	f7fb f975 	bl	800021c <__aeabi_dsub>
 8004f32:	9d01      	ldr	r5, [sp, #4]
 8004f34:	4682      	mov	sl, r0
 8004f36:	468b      	mov	fp, r1
 8004f38:	4649      	mov	r1, r9
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f7fb fb26 	bl	800058c <__aeabi_d2iz>
 8004f40:	4606      	mov	r6, r0
 8004f42:	f7fb fab9 	bl	80004b8 <__aeabi_i2d>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	f7fb f965 	bl	800021c <__aeabi_dsub>
 8004f52:	3630      	adds	r6, #48	; 0x30
 8004f54:	f805 6b01 	strb.w	r6, [r5], #1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	465b      	mov	r3, fp
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	4689      	mov	r9, r1
 8004f60:	f7fb ff88 	bl	8000e74 <__aeabi_dcmplt>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d163      	bne.n	8005030 <_dtoa_r+0x608>
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	4936      	ldr	r1, [pc, #216]	; (8005048 <_dtoa_r+0x620>)
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fb f954 	bl	800021c <__aeabi_dsub>
 8004f74:	4652      	mov	r2, sl
 8004f76:	465b      	mov	r3, fp
 8004f78:	f7fb ff7c 	bl	8000e74 <__aeabi_dcmplt>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	f040 80b5 	bne.w	80050ec <_dtoa_r+0x6c4>
 8004f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f84:	429d      	cmp	r5, r3
 8004f86:	d081      	beq.n	8004e8c <_dtoa_r+0x464>
 8004f88:	4b30      	ldr	r3, [pc, #192]	; (800504c <_dtoa_r+0x624>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4650      	mov	r0, sl
 8004f8e:	4659      	mov	r1, fp
 8004f90:	f7fb fcfe 	bl	8000990 <__aeabi_dmul>
 8004f94:	4b2d      	ldr	r3, [pc, #180]	; (800504c <_dtoa_r+0x624>)
 8004f96:	4682      	mov	sl, r0
 8004f98:	468b      	mov	fp, r1
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f7fb fcf6 	bl	8000990 <__aeabi_dmul>
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	4689      	mov	r9, r1
 8004fa8:	e7c6      	b.n	8004f38 <_dtoa_r+0x510>
 8004faa:	4650      	mov	r0, sl
 8004fac:	4659      	mov	r1, fp
 8004fae:	f7fb fcef 	bl	8000990 <__aeabi_dmul>
 8004fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fb4:	9d01      	ldr	r5, [sp, #4]
 8004fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fb8:	4682      	mov	sl, r0
 8004fba:	468b      	mov	fp, r1
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f7fb fae4 	bl	800058c <__aeabi_d2iz>
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	f7fb fa77 	bl	80004b8 <__aeabi_i2d>
 8004fca:	3630      	adds	r6, #48	; 0x30
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f922 	bl	800021c <__aeabi_dsub>
 8004fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8004fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	4689      	mov	r9, r1
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	d124      	bne.n	8005034 <_dtoa_r+0x60c>
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <_dtoa_r+0x630>)
 8004fec:	4650      	mov	r0, sl
 8004fee:	4659      	mov	r1, fp
 8004ff0:	f7fb f916 	bl	8000220 <__adddf3>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	f7fb ff58 	bl	8000eb0 <__aeabi_dcmpgt>
 8005000:	2800      	cmp	r0, #0
 8005002:	d173      	bne.n	80050ec <_dtoa_r+0x6c4>
 8005004:	4652      	mov	r2, sl
 8005006:	465b      	mov	r3, fp
 8005008:	4913      	ldr	r1, [pc, #76]	; (8005058 <_dtoa_r+0x630>)
 800500a:	2000      	movs	r0, #0
 800500c:	f7fb f906 	bl	800021c <__aeabi_dsub>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb ff2c 	bl	8000e74 <__aeabi_dcmplt>
 800501c:	2800      	cmp	r0, #0
 800501e:	f43f af35 	beq.w	8004e8c <_dtoa_r+0x464>
 8005022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005024:	1e6b      	subs	r3, r5, #1
 8005026:	930f      	str	r3, [sp, #60]	; 0x3c
 8005028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d0f8      	beq.n	8005022 <_dtoa_r+0x5fa>
 8005030:	9700      	str	r7, [sp, #0]
 8005032:	e049      	b.n	80050c8 <_dtoa_r+0x6a0>
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <_dtoa_r+0x624>)
 8005036:	f7fb fcab 	bl	8000990 <__aeabi_dmul>
 800503a:	4680      	mov	r8, r0
 800503c:	4689      	mov	r9, r1
 800503e:	e7bd      	b.n	8004fbc <_dtoa_r+0x594>
 8005040:	08012a98 	.word	0x08012a98
 8005044:	08012a70 	.word	0x08012a70
 8005048:	3ff00000 	.word	0x3ff00000
 800504c:	40240000 	.word	0x40240000
 8005050:	401c0000 	.word	0x401c0000
 8005054:	40140000 	.word	0x40140000
 8005058:	3fe00000 	.word	0x3fe00000
 800505c:	9d01      	ldr	r5, [sp, #4]
 800505e:	4656      	mov	r6, sl
 8005060:	465f      	mov	r7, fp
 8005062:	4642      	mov	r2, r8
 8005064:	464b      	mov	r3, r9
 8005066:	4630      	mov	r0, r6
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb fdbb 	bl	8000be4 <__aeabi_ddiv>
 800506e:	f7fb fa8d 	bl	800058c <__aeabi_d2iz>
 8005072:	4682      	mov	sl, r0
 8005074:	f7fb fa20 	bl	80004b8 <__aeabi_i2d>
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	f7fb fc88 	bl	8000990 <__aeabi_dmul>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4630      	mov	r0, r6
 8005086:	4639      	mov	r1, r7
 8005088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800508c:	f7fb f8c6 	bl	800021c <__aeabi_dsub>
 8005090:	f805 6b01 	strb.w	r6, [r5], #1
 8005094:	9e01      	ldr	r6, [sp, #4]
 8005096:	9f03      	ldr	r7, [sp, #12]
 8005098:	1bae      	subs	r6, r5, r6
 800509a:	42b7      	cmp	r7, r6
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	d135      	bne.n	800510e <_dtoa_r+0x6e6>
 80050a2:	f7fb f8bd 	bl	8000220 <__adddf3>
 80050a6:	4642      	mov	r2, r8
 80050a8:	464b      	mov	r3, r9
 80050aa:	4606      	mov	r6, r0
 80050ac:	460f      	mov	r7, r1
 80050ae:	f7fb feff 	bl	8000eb0 <__aeabi_dcmpgt>
 80050b2:	b9d0      	cbnz	r0, 80050ea <_dtoa_r+0x6c2>
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	4630      	mov	r0, r6
 80050ba:	4639      	mov	r1, r7
 80050bc:	f7fb fed0 	bl	8000e60 <__aeabi_dcmpeq>
 80050c0:	b110      	cbz	r0, 80050c8 <_dtoa_r+0x6a0>
 80050c2:	f01a 0f01 	tst.w	sl, #1
 80050c6:	d110      	bne.n	80050ea <_dtoa_r+0x6c2>
 80050c8:	4620      	mov	r0, r4
 80050ca:	ee18 1a10 	vmov	r1, s16
 80050ce:	f000 fb89 	bl	80057e4 <_Bfree>
 80050d2:	2300      	movs	r3, #0
 80050d4:	9800      	ldr	r0, [sp, #0]
 80050d6:	702b      	strb	r3, [r5, #0]
 80050d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050da:	3001      	adds	r0, #1
 80050dc:	6018      	str	r0, [r3, #0]
 80050de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f43f acf1 	beq.w	8004ac8 <_dtoa_r+0xa0>
 80050e6:	601d      	str	r5, [r3, #0]
 80050e8:	e4ee      	b.n	8004ac8 <_dtoa_r+0xa0>
 80050ea:	9f00      	ldr	r7, [sp, #0]
 80050ec:	462b      	mov	r3, r5
 80050ee:	461d      	mov	r5, r3
 80050f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050f4:	2a39      	cmp	r2, #57	; 0x39
 80050f6:	d106      	bne.n	8005106 <_dtoa_r+0x6de>
 80050f8:	9a01      	ldr	r2, [sp, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d1f7      	bne.n	80050ee <_dtoa_r+0x6c6>
 80050fe:	9901      	ldr	r1, [sp, #4]
 8005100:	2230      	movs	r2, #48	; 0x30
 8005102:	3701      	adds	r7, #1
 8005104:	700a      	strb	r2, [r1, #0]
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	3201      	adds	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e790      	b.n	8005030 <_dtoa_r+0x608>
 800510e:	4ba6      	ldr	r3, [pc, #664]	; (80053a8 <_dtoa_r+0x980>)
 8005110:	2200      	movs	r2, #0
 8005112:	f7fb fc3d 	bl	8000990 <__aeabi_dmul>
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	4606      	mov	r6, r0
 800511c:	460f      	mov	r7, r1
 800511e:	f7fb fe9f 	bl	8000e60 <__aeabi_dcmpeq>
 8005122:	2800      	cmp	r0, #0
 8005124:	d09d      	beq.n	8005062 <_dtoa_r+0x63a>
 8005126:	e7cf      	b.n	80050c8 <_dtoa_r+0x6a0>
 8005128:	9a08      	ldr	r2, [sp, #32]
 800512a:	2a00      	cmp	r2, #0
 800512c:	f000 80d7 	beq.w	80052de <_dtoa_r+0x8b6>
 8005130:	9a06      	ldr	r2, [sp, #24]
 8005132:	2a01      	cmp	r2, #1
 8005134:	f300 80ba 	bgt.w	80052ac <_dtoa_r+0x884>
 8005138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800513a:	2a00      	cmp	r2, #0
 800513c:	f000 80b2 	beq.w	80052a4 <_dtoa_r+0x87c>
 8005140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005144:	9e07      	ldr	r6, [sp, #28]
 8005146:	9d04      	ldr	r5, [sp, #16]
 8005148:	9a04      	ldr	r2, [sp, #16]
 800514a:	441a      	add	r2, r3
 800514c:	9204      	str	r2, [sp, #16]
 800514e:	9a05      	ldr	r2, [sp, #20]
 8005150:	2101      	movs	r1, #1
 8005152:	441a      	add	r2, r3
 8005154:	4620      	mov	r0, r4
 8005156:	9205      	str	r2, [sp, #20]
 8005158:	f000 fbfc 	bl	8005954 <__i2b>
 800515c:	4607      	mov	r7, r0
 800515e:	2d00      	cmp	r5, #0
 8005160:	dd0c      	ble.n	800517c <_dtoa_r+0x754>
 8005162:	9b05      	ldr	r3, [sp, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dd09      	ble.n	800517c <_dtoa_r+0x754>
 8005168:	42ab      	cmp	r3, r5
 800516a:	9a04      	ldr	r2, [sp, #16]
 800516c:	bfa8      	it	ge
 800516e:	462b      	movge	r3, r5
 8005170:	1ad2      	subs	r2, r2, r3
 8005172:	9204      	str	r2, [sp, #16]
 8005174:	9a05      	ldr	r2, [sp, #20]
 8005176:	1aed      	subs	r5, r5, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	9b07      	ldr	r3, [sp, #28]
 800517e:	b31b      	cbz	r3, 80051c8 <_dtoa_r+0x7a0>
 8005180:	9b08      	ldr	r3, [sp, #32]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80af 	beq.w	80052e6 <_dtoa_r+0x8be>
 8005188:	2e00      	cmp	r6, #0
 800518a:	dd13      	ble.n	80051b4 <_dtoa_r+0x78c>
 800518c:	4639      	mov	r1, r7
 800518e:	4632      	mov	r2, r6
 8005190:	4620      	mov	r0, r4
 8005192:	f000 fc9f 	bl	8005ad4 <__pow5mult>
 8005196:	ee18 2a10 	vmov	r2, s16
 800519a:	4601      	mov	r1, r0
 800519c:	4607      	mov	r7, r0
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 fbee 	bl	8005980 <__multiply>
 80051a4:	ee18 1a10 	vmov	r1, s16
 80051a8:	4680      	mov	r8, r0
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 fb1a 	bl	80057e4 <_Bfree>
 80051b0:	ee08 8a10 	vmov	s16, r8
 80051b4:	9b07      	ldr	r3, [sp, #28]
 80051b6:	1b9a      	subs	r2, r3, r6
 80051b8:	d006      	beq.n	80051c8 <_dtoa_r+0x7a0>
 80051ba:	ee18 1a10 	vmov	r1, s16
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 fc88 	bl	8005ad4 <__pow5mult>
 80051c4:	ee08 0a10 	vmov	s16, r0
 80051c8:	2101      	movs	r1, #1
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 fbc2 	bl	8005954 <__i2b>
 80051d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	4606      	mov	r6, r0
 80051d6:	f340 8088 	ble.w	80052ea <_dtoa_r+0x8c2>
 80051da:	461a      	mov	r2, r3
 80051dc:	4601      	mov	r1, r0
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 fc78 	bl	8005ad4 <__pow5mult>
 80051e4:	9b06      	ldr	r3, [sp, #24]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	4606      	mov	r6, r0
 80051ea:	f340 8081 	ble.w	80052f0 <_dtoa_r+0x8c8>
 80051ee:	f04f 0800 	mov.w	r8, #0
 80051f2:	6933      	ldr	r3, [r6, #16]
 80051f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80051f8:	6918      	ldr	r0, [r3, #16]
 80051fa:	f000 fb5b 	bl	80058b4 <__hi0bits>
 80051fe:	f1c0 0020 	rsb	r0, r0, #32
 8005202:	9b05      	ldr	r3, [sp, #20]
 8005204:	4418      	add	r0, r3
 8005206:	f010 001f 	ands.w	r0, r0, #31
 800520a:	f000 8092 	beq.w	8005332 <_dtoa_r+0x90a>
 800520e:	f1c0 0320 	rsb	r3, r0, #32
 8005212:	2b04      	cmp	r3, #4
 8005214:	f340 808a 	ble.w	800532c <_dtoa_r+0x904>
 8005218:	f1c0 001c 	rsb	r0, r0, #28
 800521c:	9b04      	ldr	r3, [sp, #16]
 800521e:	4403      	add	r3, r0
 8005220:	9304      	str	r3, [sp, #16]
 8005222:	9b05      	ldr	r3, [sp, #20]
 8005224:	4403      	add	r3, r0
 8005226:	4405      	add	r5, r0
 8005228:	9305      	str	r3, [sp, #20]
 800522a:	9b04      	ldr	r3, [sp, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	dd07      	ble.n	8005240 <_dtoa_r+0x818>
 8005230:	ee18 1a10 	vmov	r1, s16
 8005234:	461a      	mov	r2, r3
 8005236:	4620      	mov	r0, r4
 8005238:	f000 fca6 	bl	8005b88 <__lshift>
 800523c:	ee08 0a10 	vmov	s16, r0
 8005240:	9b05      	ldr	r3, [sp, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	dd05      	ble.n	8005252 <_dtoa_r+0x82a>
 8005246:	4631      	mov	r1, r6
 8005248:	461a      	mov	r2, r3
 800524a:	4620      	mov	r0, r4
 800524c:	f000 fc9c 	bl	8005b88 <__lshift>
 8005250:	4606      	mov	r6, r0
 8005252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d06e      	beq.n	8005336 <_dtoa_r+0x90e>
 8005258:	ee18 0a10 	vmov	r0, s16
 800525c:	4631      	mov	r1, r6
 800525e:	f000 fd03 	bl	8005c68 <__mcmp>
 8005262:	2800      	cmp	r0, #0
 8005264:	da67      	bge.n	8005336 <_dtoa_r+0x90e>
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	3b01      	subs	r3, #1
 800526a:	ee18 1a10 	vmov	r1, s16
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	220a      	movs	r2, #10
 8005272:	2300      	movs	r3, #0
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fad7 	bl	8005828 <__multadd>
 800527a:	9b08      	ldr	r3, [sp, #32]
 800527c:	ee08 0a10 	vmov	s16, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 81b1 	beq.w	80055e8 <_dtoa_r+0xbc0>
 8005286:	2300      	movs	r3, #0
 8005288:	4639      	mov	r1, r7
 800528a:	220a      	movs	r2, #10
 800528c:	4620      	mov	r0, r4
 800528e:	f000 facb 	bl	8005828 <__multadd>
 8005292:	9b02      	ldr	r3, [sp, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	4607      	mov	r7, r0
 8005298:	f300 808e 	bgt.w	80053b8 <_dtoa_r+0x990>
 800529c:	9b06      	ldr	r3, [sp, #24]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	dc51      	bgt.n	8005346 <_dtoa_r+0x91e>
 80052a2:	e089      	b.n	80053b8 <_dtoa_r+0x990>
 80052a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052aa:	e74b      	b.n	8005144 <_dtoa_r+0x71c>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	1e5e      	subs	r6, r3, #1
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	42b3      	cmp	r3, r6
 80052b4:	bfbf      	itttt	lt
 80052b6:	9b07      	ldrlt	r3, [sp, #28]
 80052b8:	9607      	strlt	r6, [sp, #28]
 80052ba:	1af2      	sublt	r2, r6, r3
 80052bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80052be:	bfb6      	itet	lt
 80052c0:	189b      	addlt	r3, r3, r2
 80052c2:	1b9e      	subge	r6, r3, r6
 80052c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	bfb8      	it	lt
 80052ca:	2600      	movlt	r6, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bfb7      	itett	lt
 80052d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80052d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80052d8:	1a9d      	sublt	r5, r3, r2
 80052da:	2300      	movlt	r3, #0
 80052dc:	e734      	b.n	8005148 <_dtoa_r+0x720>
 80052de:	9e07      	ldr	r6, [sp, #28]
 80052e0:	9d04      	ldr	r5, [sp, #16]
 80052e2:	9f08      	ldr	r7, [sp, #32]
 80052e4:	e73b      	b.n	800515e <_dtoa_r+0x736>
 80052e6:	9a07      	ldr	r2, [sp, #28]
 80052e8:	e767      	b.n	80051ba <_dtoa_r+0x792>
 80052ea:	9b06      	ldr	r3, [sp, #24]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	dc18      	bgt.n	8005322 <_dtoa_r+0x8fa>
 80052f0:	f1ba 0f00 	cmp.w	sl, #0
 80052f4:	d115      	bne.n	8005322 <_dtoa_r+0x8fa>
 80052f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052fa:	b993      	cbnz	r3, 8005322 <_dtoa_r+0x8fa>
 80052fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005300:	0d1b      	lsrs	r3, r3, #20
 8005302:	051b      	lsls	r3, r3, #20
 8005304:	b183      	cbz	r3, 8005328 <_dtoa_r+0x900>
 8005306:	9b04      	ldr	r3, [sp, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	9b05      	ldr	r3, [sp, #20]
 800530e:	3301      	adds	r3, #1
 8005310:	9305      	str	r3, [sp, #20]
 8005312:	f04f 0801 	mov.w	r8, #1
 8005316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	f47f af6a 	bne.w	80051f2 <_dtoa_r+0x7ca>
 800531e:	2001      	movs	r0, #1
 8005320:	e76f      	b.n	8005202 <_dtoa_r+0x7da>
 8005322:	f04f 0800 	mov.w	r8, #0
 8005326:	e7f6      	b.n	8005316 <_dtoa_r+0x8ee>
 8005328:	4698      	mov	r8, r3
 800532a:	e7f4      	b.n	8005316 <_dtoa_r+0x8ee>
 800532c:	f43f af7d 	beq.w	800522a <_dtoa_r+0x802>
 8005330:	4618      	mov	r0, r3
 8005332:	301c      	adds	r0, #28
 8005334:	e772      	b.n	800521c <_dtoa_r+0x7f4>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	dc37      	bgt.n	80053ac <_dtoa_r+0x984>
 800533c:	9b06      	ldr	r3, [sp, #24]
 800533e:	2b02      	cmp	r3, #2
 8005340:	dd34      	ble.n	80053ac <_dtoa_r+0x984>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	9302      	str	r3, [sp, #8]
 8005346:	9b02      	ldr	r3, [sp, #8]
 8005348:	b96b      	cbnz	r3, 8005366 <_dtoa_r+0x93e>
 800534a:	4631      	mov	r1, r6
 800534c:	2205      	movs	r2, #5
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fa6a 	bl	8005828 <__multadd>
 8005354:	4601      	mov	r1, r0
 8005356:	4606      	mov	r6, r0
 8005358:	ee18 0a10 	vmov	r0, s16
 800535c:	f000 fc84 	bl	8005c68 <__mcmp>
 8005360:	2800      	cmp	r0, #0
 8005362:	f73f adbb 	bgt.w	8004edc <_dtoa_r+0x4b4>
 8005366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005368:	9d01      	ldr	r5, [sp, #4]
 800536a:	43db      	mvns	r3, r3
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	f04f 0800 	mov.w	r8, #0
 8005372:	4631      	mov	r1, r6
 8005374:	4620      	mov	r0, r4
 8005376:	f000 fa35 	bl	80057e4 <_Bfree>
 800537a:	2f00      	cmp	r7, #0
 800537c:	f43f aea4 	beq.w	80050c8 <_dtoa_r+0x6a0>
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	d005      	beq.n	8005392 <_dtoa_r+0x96a>
 8005386:	45b8      	cmp	r8, r7
 8005388:	d003      	beq.n	8005392 <_dtoa_r+0x96a>
 800538a:	4641      	mov	r1, r8
 800538c:	4620      	mov	r0, r4
 800538e:	f000 fa29 	bl	80057e4 <_Bfree>
 8005392:	4639      	mov	r1, r7
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fa25 	bl	80057e4 <_Bfree>
 800539a:	e695      	b.n	80050c8 <_dtoa_r+0x6a0>
 800539c:	2600      	movs	r6, #0
 800539e:	4637      	mov	r7, r6
 80053a0:	e7e1      	b.n	8005366 <_dtoa_r+0x93e>
 80053a2:	9700      	str	r7, [sp, #0]
 80053a4:	4637      	mov	r7, r6
 80053a6:	e599      	b.n	8004edc <_dtoa_r+0x4b4>
 80053a8:	40240000 	.word	0x40240000
 80053ac:	9b08      	ldr	r3, [sp, #32]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80ca 	beq.w	8005548 <_dtoa_r+0xb20>
 80053b4:	9b03      	ldr	r3, [sp, #12]
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	dd05      	ble.n	80053c8 <_dtoa_r+0x9a0>
 80053bc:	4639      	mov	r1, r7
 80053be:	462a      	mov	r2, r5
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fbe1 	bl	8005b88 <__lshift>
 80053c6:	4607      	mov	r7, r0
 80053c8:	f1b8 0f00 	cmp.w	r8, #0
 80053cc:	d05b      	beq.n	8005486 <_dtoa_r+0xa5e>
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 f9c7 	bl	8005764 <_Balloc>
 80053d6:	4605      	mov	r5, r0
 80053d8:	b928      	cbnz	r0, 80053e6 <_dtoa_r+0x9be>
 80053da:	4b87      	ldr	r3, [pc, #540]	; (80055f8 <_dtoa_r+0xbd0>)
 80053dc:	4602      	mov	r2, r0
 80053de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80053e2:	f7ff bb3b 	b.w	8004a5c <_dtoa_r+0x34>
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	3202      	adds	r2, #2
 80053ea:	0092      	lsls	r2, r2, #2
 80053ec:	f107 010c 	add.w	r1, r7, #12
 80053f0:	300c      	adds	r0, #12
 80053f2:	f000 f99d 	bl	8005730 <memcpy>
 80053f6:	2201      	movs	r2, #1
 80053f8:	4629      	mov	r1, r5
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fbc4 	bl	8005b88 <__lshift>
 8005400:	9b01      	ldr	r3, [sp, #4]
 8005402:	f103 0901 	add.w	r9, r3, #1
 8005406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800540a:	4413      	add	r3, r2
 800540c:	9305      	str	r3, [sp, #20]
 800540e:	f00a 0301 	and.w	r3, sl, #1
 8005412:	46b8      	mov	r8, r7
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	4607      	mov	r7, r0
 8005418:	4631      	mov	r1, r6
 800541a:	ee18 0a10 	vmov	r0, s16
 800541e:	f7ff fa77 	bl	8004910 <quorem>
 8005422:	4641      	mov	r1, r8
 8005424:	9002      	str	r0, [sp, #8]
 8005426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800542a:	ee18 0a10 	vmov	r0, s16
 800542e:	f000 fc1b 	bl	8005c68 <__mcmp>
 8005432:	463a      	mov	r2, r7
 8005434:	9003      	str	r0, [sp, #12]
 8005436:	4631      	mov	r1, r6
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fc31 	bl	8005ca0 <__mdiff>
 800543e:	68c2      	ldr	r2, [r0, #12]
 8005440:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005444:	4605      	mov	r5, r0
 8005446:	bb02      	cbnz	r2, 800548a <_dtoa_r+0xa62>
 8005448:	4601      	mov	r1, r0
 800544a:	ee18 0a10 	vmov	r0, s16
 800544e:	f000 fc0b 	bl	8005c68 <__mcmp>
 8005452:	4602      	mov	r2, r0
 8005454:	4629      	mov	r1, r5
 8005456:	4620      	mov	r0, r4
 8005458:	9207      	str	r2, [sp, #28]
 800545a:	f000 f9c3 	bl	80057e4 <_Bfree>
 800545e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005462:	ea43 0102 	orr.w	r1, r3, r2
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	430b      	orrs	r3, r1
 800546a:	464d      	mov	r5, r9
 800546c:	d10f      	bne.n	800548e <_dtoa_r+0xa66>
 800546e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005472:	d02a      	beq.n	80054ca <_dtoa_r+0xaa2>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	dd02      	ble.n	8005480 <_dtoa_r+0xa58>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005480:	f88b a000 	strb.w	sl, [fp]
 8005484:	e775      	b.n	8005372 <_dtoa_r+0x94a>
 8005486:	4638      	mov	r0, r7
 8005488:	e7ba      	b.n	8005400 <_dtoa_r+0x9d8>
 800548a:	2201      	movs	r2, #1
 800548c:	e7e2      	b.n	8005454 <_dtoa_r+0xa2c>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	db04      	blt.n	800549e <_dtoa_r+0xa76>
 8005494:	9906      	ldr	r1, [sp, #24]
 8005496:	430b      	orrs	r3, r1
 8005498:	9904      	ldr	r1, [sp, #16]
 800549a:	430b      	orrs	r3, r1
 800549c:	d122      	bne.n	80054e4 <_dtoa_r+0xabc>
 800549e:	2a00      	cmp	r2, #0
 80054a0:	ddee      	ble.n	8005480 <_dtoa_r+0xa58>
 80054a2:	ee18 1a10 	vmov	r1, s16
 80054a6:	2201      	movs	r2, #1
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fb6d 	bl	8005b88 <__lshift>
 80054ae:	4631      	mov	r1, r6
 80054b0:	ee08 0a10 	vmov	s16, r0
 80054b4:	f000 fbd8 	bl	8005c68 <__mcmp>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	dc03      	bgt.n	80054c4 <_dtoa_r+0xa9c>
 80054bc:	d1e0      	bne.n	8005480 <_dtoa_r+0xa58>
 80054be:	f01a 0f01 	tst.w	sl, #1
 80054c2:	d0dd      	beq.n	8005480 <_dtoa_r+0xa58>
 80054c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80054c8:	d1d7      	bne.n	800547a <_dtoa_r+0xa52>
 80054ca:	2339      	movs	r3, #57	; 0x39
 80054cc:	f88b 3000 	strb.w	r3, [fp]
 80054d0:	462b      	mov	r3, r5
 80054d2:	461d      	mov	r5, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80054da:	2a39      	cmp	r2, #57	; 0x39
 80054dc:	d071      	beq.n	80055c2 <_dtoa_r+0xb9a>
 80054de:	3201      	adds	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e746      	b.n	8005372 <_dtoa_r+0x94a>
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	dd07      	ble.n	80054f8 <_dtoa_r+0xad0>
 80054e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80054ec:	d0ed      	beq.n	80054ca <_dtoa_r+0xaa2>
 80054ee:	f10a 0301 	add.w	r3, sl, #1
 80054f2:	f88b 3000 	strb.w	r3, [fp]
 80054f6:	e73c      	b.n	8005372 <_dtoa_r+0x94a>
 80054f8:	9b05      	ldr	r3, [sp, #20]
 80054fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80054fe:	4599      	cmp	r9, r3
 8005500:	d047      	beq.n	8005592 <_dtoa_r+0xb6a>
 8005502:	ee18 1a10 	vmov	r1, s16
 8005506:	2300      	movs	r3, #0
 8005508:	220a      	movs	r2, #10
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f98c 	bl	8005828 <__multadd>
 8005510:	45b8      	cmp	r8, r7
 8005512:	ee08 0a10 	vmov	s16, r0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	f04f 020a 	mov.w	r2, #10
 800551e:	4641      	mov	r1, r8
 8005520:	4620      	mov	r0, r4
 8005522:	d106      	bne.n	8005532 <_dtoa_r+0xb0a>
 8005524:	f000 f980 	bl	8005828 <__multadd>
 8005528:	4680      	mov	r8, r0
 800552a:	4607      	mov	r7, r0
 800552c:	f109 0901 	add.w	r9, r9, #1
 8005530:	e772      	b.n	8005418 <_dtoa_r+0x9f0>
 8005532:	f000 f979 	bl	8005828 <__multadd>
 8005536:	4639      	mov	r1, r7
 8005538:	4680      	mov	r8, r0
 800553a:	2300      	movs	r3, #0
 800553c:	220a      	movs	r2, #10
 800553e:	4620      	mov	r0, r4
 8005540:	f000 f972 	bl	8005828 <__multadd>
 8005544:	4607      	mov	r7, r0
 8005546:	e7f1      	b.n	800552c <_dtoa_r+0xb04>
 8005548:	9b03      	ldr	r3, [sp, #12]
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	9d01      	ldr	r5, [sp, #4]
 800554e:	ee18 0a10 	vmov	r0, s16
 8005552:	4631      	mov	r1, r6
 8005554:	f7ff f9dc 	bl	8004910 <quorem>
 8005558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800555c:	9b01      	ldr	r3, [sp, #4]
 800555e:	f805 ab01 	strb.w	sl, [r5], #1
 8005562:	1aea      	subs	r2, r5, r3
 8005564:	9b02      	ldr	r3, [sp, #8]
 8005566:	4293      	cmp	r3, r2
 8005568:	dd09      	ble.n	800557e <_dtoa_r+0xb56>
 800556a:	ee18 1a10 	vmov	r1, s16
 800556e:	2300      	movs	r3, #0
 8005570:	220a      	movs	r2, #10
 8005572:	4620      	mov	r0, r4
 8005574:	f000 f958 	bl	8005828 <__multadd>
 8005578:	ee08 0a10 	vmov	s16, r0
 800557c:	e7e7      	b.n	800554e <_dtoa_r+0xb26>
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	bfc8      	it	gt
 8005584:	461d      	movgt	r5, r3
 8005586:	9b01      	ldr	r3, [sp, #4]
 8005588:	bfd8      	it	le
 800558a:	2501      	movle	r5, #1
 800558c:	441d      	add	r5, r3
 800558e:	f04f 0800 	mov.w	r8, #0
 8005592:	ee18 1a10 	vmov	r1, s16
 8005596:	2201      	movs	r2, #1
 8005598:	4620      	mov	r0, r4
 800559a:	f000 faf5 	bl	8005b88 <__lshift>
 800559e:	4631      	mov	r1, r6
 80055a0:	ee08 0a10 	vmov	s16, r0
 80055a4:	f000 fb60 	bl	8005c68 <__mcmp>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	dc91      	bgt.n	80054d0 <_dtoa_r+0xaa8>
 80055ac:	d102      	bne.n	80055b4 <_dtoa_r+0xb8c>
 80055ae:	f01a 0f01 	tst.w	sl, #1
 80055b2:	d18d      	bne.n	80054d0 <_dtoa_r+0xaa8>
 80055b4:	462b      	mov	r3, r5
 80055b6:	461d      	mov	r5, r3
 80055b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055bc:	2a30      	cmp	r2, #48	; 0x30
 80055be:	d0fa      	beq.n	80055b6 <_dtoa_r+0xb8e>
 80055c0:	e6d7      	b.n	8005372 <_dtoa_r+0x94a>
 80055c2:	9a01      	ldr	r2, [sp, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d184      	bne.n	80054d2 <_dtoa_r+0xaaa>
 80055c8:	9b00      	ldr	r3, [sp, #0]
 80055ca:	3301      	adds	r3, #1
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2331      	movs	r3, #49	; 0x31
 80055d0:	7013      	strb	r3, [r2, #0]
 80055d2:	e6ce      	b.n	8005372 <_dtoa_r+0x94a>
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <_dtoa_r+0xbd4>)
 80055d6:	f7ff ba95 	b.w	8004b04 <_dtoa_r+0xdc>
 80055da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f47f aa6e 	bne.w	8004abe <_dtoa_r+0x96>
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <_dtoa_r+0xbd8>)
 80055e4:	f7ff ba8e 	b.w	8004b04 <_dtoa_r+0xdc>
 80055e8:	9b02      	ldr	r3, [sp, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	dcae      	bgt.n	800554c <_dtoa_r+0xb24>
 80055ee:	9b06      	ldr	r3, [sp, #24]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	f73f aea8 	bgt.w	8005346 <_dtoa_r+0x91e>
 80055f6:	e7a9      	b.n	800554c <_dtoa_r+0xb24>
 80055f8:	080129da 	.word	0x080129da
 80055fc:	080086fa 	.word	0x080086fa
 8005600:	08012950 	.word	0x08012950

08005604 <fiprintf>:
 8005604:	b40e      	push	{r1, r2, r3}
 8005606:	b503      	push	{r0, r1, lr}
 8005608:	4601      	mov	r1, r0
 800560a:	ab03      	add	r3, sp, #12
 800560c:	4805      	ldr	r0, [pc, #20]	; (8005624 <fiprintf+0x20>)
 800560e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	f000 fdbd 	bl	8006194 <_vfiprintf_r>
 800561a:	b002      	add	sp, #8
 800561c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005620:	b003      	add	sp, #12
 8005622:	4770      	bx	lr
 8005624:	200001b0 	.word	0x200001b0

08005628 <_localeconv_r>:
 8005628:	4800      	ldr	r0, [pc, #0]	; (800562c <_localeconv_r+0x4>)
 800562a:	4770      	bx	lr
 800562c:	20000304 	.word	0x20000304

08005630 <__swhatbuf_r>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005638:	2900      	cmp	r1, #0
 800563a:	b096      	sub	sp, #88	; 0x58
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	da08      	bge.n	8005654 <__swhatbuf_r+0x24>
 8005642:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	061a      	lsls	r2, r3, #24
 800564c:	d410      	bmi.n	8005670 <__swhatbuf_r+0x40>
 800564e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005652:	e00e      	b.n	8005672 <__swhatbuf_r+0x42>
 8005654:	466a      	mov	r2, sp
 8005656:	f7fb fdeb 	bl	8001230 <_fstat_r>
 800565a:	2800      	cmp	r0, #0
 800565c:	dbf1      	blt.n	8005642 <__swhatbuf_r+0x12>
 800565e:	9a01      	ldr	r2, [sp, #4]
 8005660:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005664:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005668:	425a      	negs	r2, r3
 800566a:	415a      	adcs	r2, r3
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	e7ee      	b.n	800564e <__swhatbuf_r+0x1e>
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	2000      	movs	r0, #0
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	b016      	add	sp, #88	; 0x58
 8005678:	bd70      	pop	{r4, r5, r6, pc}
	...

0800567c <__smakebuf_r>:
 800567c:	898b      	ldrh	r3, [r1, #12]
 800567e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005680:	079d      	lsls	r5, r3, #30
 8005682:	4606      	mov	r6, r0
 8005684:	460c      	mov	r4, r1
 8005686:	d507      	bpl.n	8005698 <__smakebuf_r+0x1c>
 8005688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	2301      	movs	r3, #1
 8005692:	6163      	str	r3, [r4, #20]
 8005694:	b002      	add	sp, #8
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	ab01      	add	r3, sp, #4
 800569a:	466a      	mov	r2, sp
 800569c:	f7ff ffc8 	bl	8005630 <__swhatbuf_r>
 80056a0:	9900      	ldr	r1, [sp, #0]
 80056a2:	4605      	mov	r5, r0
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7fe f8af 	bl	8003808 <_malloc_r>
 80056aa:	b948      	cbnz	r0, 80056c0 <__smakebuf_r+0x44>
 80056ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b0:	059a      	lsls	r2, r3, #22
 80056b2:	d4ef      	bmi.n	8005694 <__smakebuf_r+0x18>
 80056b4:	f023 0303 	bic.w	r3, r3, #3
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	e7e3      	b.n	8005688 <__smakebuf_r+0xc>
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <__smakebuf_r+0x7c>)
 80056c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	6163      	str	r3, [r4, #20]
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	6120      	str	r0, [r4, #16]
 80056d6:	b15b      	cbz	r3, 80056f0 <__smakebuf_r+0x74>
 80056d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056dc:	4630      	mov	r0, r6
 80056de:	f7fb fdac 	bl	800123a <_isatty_r>
 80056e2:	b128      	cbz	r0, 80056f0 <__smakebuf_r+0x74>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	89a0      	ldrh	r0, [r4, #12]
 80056f2:	4305      	orrs	r5, r0
 80056f4:	81a5      	strh	r5, [r4, #12]
 80056f6:	e7cd      	b.n	8005694 <__smakebuf_r+0x18>
 80056f8:	0800356d 	.word	0x0800356d

080056fc <malloc>:
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <malloc+0xc>)
 80056fe:	4601      	mov	r1, r0
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	f7fe b881 	b.w	8003808 <_malloc_r>
 8005706:	bf00      	nop
 8005708:	200001b0 	.word	0x200001b0

0800570c <__ascii_mbtowc>:
 800570c:	b082      	sub	sp, #8
 800570e:	b901      	cbnz	r1, 8005712 <__ascii_mbtowc+0x6>
 8005710:	a901      	add	r1, sp, #4
 8005712:	b142      	cbz	r2, 8005726 <__ascii_mbtowc+0x1a>
 8005714:	b14b      	cbz	r3, 800572a <__ascii_mbtowc+0x1e>
 8005716:	7813      	ldrb	r3, [r2, #0]
 8005718:	600b      	str	r3, [r1, #0]
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	1e10      	subs	r0, r2, #0
 800571e:	bf18      	it	ne
 8005720:	2001      	movne	r0, #1
 8005722:	b002      	add	sp, #8
 8005724:	4770      	bx	lr
 8005726:	4610      	mov	r0, r2
 8005728:	e7fb      	b.n	8005722 <__ascii_mbtowc+0x16>
 800572a:	f06f 0001 	mvn.w	r0, #1
 800572e:	e7f8      	b.n	8005722 <__ascii_mbtowc+0x16>

08005730 <memcpy>:
 8005730:	440a      	add	r2, r1
 8005732:	4291      	cmp	r1, r2
 8005734:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005738:	d100      	bne.n	800573c <memcpy+0xc>
 800573a:	4770      	bx	lr
 800573c:	b510      	push	{r4, lr}
 800573e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005746:	4291      	cmp	r1, r2
 8005748:	d1f9      	bne.n	800573e <memcpy+0xe>
 800574a:	bd10      	pop	{r4, pc}

0800574c <__malloc_lock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_lock+0x8>)
 800574e:	f7fe b804 	b.w	800375a <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	20000d44 	.word	0x20000d44

08005758 <__malloc_unlock>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__malloc_unlock+0x8>)
 800575a:	f7fd bfff 	b.w	800375c <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	20000d44 	.word	0x20000d44

08005764 <_Balloc>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
 800576c:	b976      	cbnz	r6, 800578c <_Balloc+0x28>
 800576e:	2010      	movs	r0, #16
 8005770:	f7ff ffc4 	bl	80056fc <malloc>
 8005774:	4602      	mov	r2, r0
 8005776:	6260      	str	r0, [r4, #36]	; 0x24
 8005778:	b920      	cbnz	r0, 8005784 <_Balloc+0x20>
 800577a:	4b18      	ldr	r3, [pc, #96]	; (80057dc <_Balloc+0x78>)
 800577c:	4818      	ldr	r0, [pc, #96]	; (80057e0 <_Balloc+0x7c>)
 800577e:	2166      	movs	r1, #102	; 0x66
 8005780:	f7ff f8a8 	bl	80048d4 <__assert_func>
 8005784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005788:	6006      	str	r6, [r0, #0]
 800578a:	60c6      	str	r6, [r0, #12]
 800578c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800578e:	68f3      	ldr	r3, [r6, #12]
 8005790:	b183      	cbz	r3, 80057b4 <_Balloc+0x50>
 8005792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800579a:	b9b8      	cbnz	r0, 80057cc <_Balloc+0x68>
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f605 	lsl.w	r6, r1, r5
 80057a2:	1d72      	adds	r2, r6, #5
 80057a4:	0092      	lsls	r2, r2, #2
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 fb60 	bl	8005e6c <_calloc_r>
 80057ac:	b160      	cbz	r0, 80057c8 <_Balloc+0x64>
 80057ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057b2:	e00e      	b.n	80057d2 <_Balloc+0x6e>
 80057b4:	2221      	movs	r2, #33	; 0x21
 80057b6:	2104      	movs	r1, #4
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fb57 	bl	8005e6c <_calloc_r>
 80057be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c0:	60f0      	str	r0, [r6, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e4      	bne.n	8005792 <_Balloc+0x2e>
 80057c8:	2000      	movs	r0, #0
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	6802      	ldr	r2, [r0, #0]
 80057ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057d2:	2300      	movs	r3, #0
 80057d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057d8:	e7f7      	b.n	80057ca <_Balloc+0x66>
 80057da:	bf00      	nop
 80057dc:	0801287e 	.word	0x0801287e
 80057e0:	080129f1 	.word	0x080129f1

080057e4 <_Bfree>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b976      	cbnz	r6, 800580c <_Bfree+0x28>
 80057ee:	2010      	movs	r0, #16
 80057f0:	f7ff ff84 	bl	80056fc <malloc>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6268      	str	r0, [r5, #36]	; 0x24
 80057f8:	b920      	cbnz	r0, 8005804 <_Bfree+0x20>
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <_Bfree+0x3c>)
 80057fc:	4809      	ldr	r0, [pc, #36]	; (8005824 <_Bfree+0x40>)
 80057fe:	218a      	movs	r1, #138	; 0x8a
 8005800:	f7ff f868 	bl	80048d4 <__assert_func>
 8005804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005808:	6006      	str	r6, [r0, #0]
 800580a:	60c6      	str	r6, [r0, #12]
 800580c:	b13c      	cbz	r4, 800581e <_Bfree+0x3a>
 800580e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005810:	6862      	ldr	r2, [r4, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005818:	6021      	str	r1, [r4, #0]
 800581a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	0801287e 	.word	0x0801287e
 8005824:	080129f1 	.word	0x080129f1

08005828 <__multadd>:
 8005828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582c:	690d      	ldr	r5, [r1, #16]
 800582e:	4607      	mov	r7, r0
 8005830:	460c      	mov	r4, r1
 8005832:	461e      	mov	r6, r3
 8005834:	f101 0c14 	add.w	ip, r1, #20
 8005838:	2000      	movs	r0, #0
 800583a:	f8dc 3000 	ldr.w	r3, [ip]
 800583e:	b299      	uxth	r1, r3
 8005840:	fb02 6101 	mla	r1, r2, r1, r6
 8005844:	0c1e      	lsrs	r6, r3, #16
 8005846:	0c0b      	lsrs	r3, r1, #16
 8005848:	fb02 3306 	mla	r3, r2, r6, r3
 800584c:	b289      	uxth	r1, r1
 800584e:	3001      	adds	r0, #1
 8005850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005854:	4285      	cmp	r5, r0
 8005856:	f84c 1b04 	str.w	r1, [ip], #4
 800585a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800585e:	dcec      	bgt.n	800583a <__multadd+0x12>
 8005860:	b30e      	cbz	r6, 80058a6 <__multadd+0x7e>
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	42ab      	cmp	r3, r5
 8005866:	dc19      	bgt.n	800589c <__multadd+0x74>
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	4638      	mov	r0, r7
 800586c:	3101      	adds	r1, #1
 800586e:	f7ff ff79 	bl	8005764 <_Balloc>
 8005872:	4680      	mov	r8, r0
 8005874:	b928      	cbnz	r0, 8005882 <__multadd+0x5a>
 8005876:	4602      	mov	r2, r0
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <__multadd+0x84>)
 800587a:	480d      	ldr	r0, [pc, #52]	; (80058b0 <__multadd+0x88>)
 800587c:	21b5      	movs	r1, #181	; 0xb5
 800587e:	f7ff f829 	bl	80048d4 <__assert_func>
 8005882:	6922      	ldr	r2, [r4, #16]
 8005884:	3202      	adds	r2, #2
 8005886:	f104 010c 	add.w	r1, r4, #12
 800588a:	0092      	lsls	r2, r2, #2
 800588c:	300c      	adds	r0, #12
 800588e:	f7ff ff4f 	bl	8005730 <memcpy>
 8005892:	4621      	mov	r1, r4
 8005894:	4638      	mov	r0, r7
 8005896:	f7ff ffa5 	bl	80057e4 <_Bfree>
 800589a:	4644      	mov	r4, r8
 800589c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058a0:	3501      	adds	r5, #1
 80058a2:	615e      	str	r6, [r3, #20]
 80058a4:	6125      	str	r5, [r4, #16]
 80058a6:	4620      	mov	r0, r4
 80058a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ac:	080129da 	.word	0x080129da
 80058b0:	080129f1 	.word	0x080129f1

080058b4 <__hi0bits>:
 80058b4:	0c03      	lsrs	r3, r0, #16
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	b9d3      	cbnz	r3, 80058f0 <__hi0bits+0x3c>
 80058ba:	0400      	lsls	r0, r0, #16
 80058bc:	2310      	movs	r3, #16
 80058be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80058c2:	bf04      	itt	eq
 80058c4:	0200      	lsleq	r0, r0, #8
 80058c6:	3308      	addeq	r3, #8
 80058c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80058cc:	bf04      	itt	eq
 80058ce:	0100      	lsleq	r0, r0, #4
 80058d0:	3304      	addeq	r3, #4
 80058d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80058d6:	bf04      	itt	eq
 80058d8:	0080      	lsleq	r0, r0, #2
 80058da:	3302      	addeq	r3, #2
 80058dc:	2800      	cmp	r0, #0
 80058de:	db05      	blt.n	80058ec <__hi0bits+0x38>
 80058e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80058e4:	f103 0301 	add.w	r3, r3, #1
 80058e8:	bf08      	it	eq
 80058ea:	2320      	moveq	r3, #32
 80058ec:	4618      	mov	r0, r3
 80058ee:	4770      	bx	lr
 80058f0:	2300      	movs	r3, #0
 80058f2:	e7e4      	b.n	80058be <__hi0bits+0xa>

080058f4 <__lo0bits>:
 80058f4:	6803      	ldr	r3, [r0, #0]
 80058f6:	f013 0207 	ands.w	r2, r3, #7
 80058fa:	4601      	mov	r1, r0
 80058fc:	d00b      	beq.n	8005916 <__lo0bits+0x22>
 80058fe:	07da      	lsls	r2, r3, #31
 8005900:	d423      	bmi.n	800594a <__lo0bits+0x56>
 8005902:	0798      	lsls	r0, r3, #30
 8005904:	bf49      	itett	mi
 8005906:	085b      	lsrmi	r3, r3, #1
 8005908:	089b      	lsrpl	r3, r3, #2
 800590a:	2001      	movmi	r0, #1
 800590c:	600b      	strmi	r3, [r1, #0]
 800590e:	bf5c      	itt	pl
 8005910:	600b      	strpl	r3, [r1, #0]
 8005912:	2002      	movpl	r0, #2
 8005914:	4770      	bx	lr
 8005916:	b298      	uxth	r0, r3
 8005918:	b9a8      	cbnz	r0, 8005946 <__lo0bits+0x52>
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	2010      	movs	r0, #16
 800591e:	b2da      	uxtb	r2, r3
 8005920:	b90a      	cbnz	r2, 8005926 <__lo0bits+0x32>
 8005922:	3008      	adds	r0, #8
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	071a      	lsls	r2, r3, #28
 8005928:	bf04      	itt	eq
 800592a:	091b      	lsreq	r3, r3, #4
 800592c:	3004      	addeq	r0, #4
 800592e:	079a      	lsls	r2, r3, #30
 8005930:	bf04      	itt	eq
 8005932:	089b      	lsreq	r3, r3, #2
 8005934:	3002      	addeq	r0, #2
 8005936:	07da      	lsls	r2, r3, #31
 8005938:	d403      	bmi.n	8005942 <__lo0bits+0x4e>
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	f100 0001 	add.w	r0, r0, #1
 8005940:	d005      	beq.n	800594e <__lo0bits+0x5a>
 8005942:	600b      	str	r3, [r1, #0]
 8005944:	4770      	bx	lr
 8005946:	4610      	mov	r0, r2
 8005948:	e7e9      	b.n	800591e <__lo0bits+0x2a>
 800594a:	2000      	movs	r0, #0
 800594c:	4770      	bx	lr
 800594e:	2020      	movs	r0, #32
 8005950:	4770      	bx	lr
	...

08005954 <__i2b>:
 8005954:	b510      	push	{r4, lr}
 8005956:	460c      	mov	r4, r1
 8005958:	2101      	movs	r1, #1
 800595a:	f7ff ff03 	bl	8005764 <_Balloc>
 800595e:	4602      	mov	r2, r0
 8005960:	b928      	cbnz	r0, 800596e <__i2b+0x1a>
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <__i2b+0x24>)
 8005964:	4805      	ldr	r0, [pc, #20]	; (800597c <__i2b+0x28>)
 8005966:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800596a:	f7fe ffb3 	bl	80048d4 <__assert_func>
 800596e:	2301      	movs	r3, #1
 8005970:	6144      	str	r4, [r0, #20]
 8005972:	6103      	str	r3, [r0, #16]
 8005974:	bd10      	pop	{r4, pc}
 8005976:	bf00      	nop
 8005978:	080129da 	.word	0x080129da
 800597c:	080129f1 	.word	0x080129f1

08005980 <__multiply>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4691      	mov	r9, r2
 8005986:	690a      	ldr	r2, [r1, #16]
 8005988:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	bfb8      	it	lt
 8005990:	460b      	movlt	r3, r1
 8005992:	460c      	mov	r4, r1
 8005994:	bfbc      	itt	lt
 8005996:	464c      	movlt	r4, r9
 8005998:	4699      	movlt	r9, r3
 800599a:	6927      	ldr	r7, [r4, #16]
 800599c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80059a0:	68a3      	ldr	r3, [r4, #8]
 80059a2:	6861      	ldr	r1, [r4, #4]
 80059a4:	eb07 060a 	add.w	r6, r7, sl
 80059a8:	42b3      	cmp	r3, r6
 80059aa:	b085      	sub	sp, #20
 80059ac:	bfb8      	it	lt
 80059ae:	3101      	addlt	r1, #1
 80059b0:	f7ff fed8 	bl	8005764 <_Balloc>
 80059b4:	b930      	cbnz	r0, 80059c4 <__multiply+0x44>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4b44      	ldr	r3, [pc, #272]	; (8005acc <__multiply+0x14c>)
 80059ba:	4845      	ldr	r0, [pc, #276]	; (8005ad0 <__multiply+0x150>)
 80059bc:	f240 115d 	movw	r1, #349	; 0x15d
 80059c0:	f7fe ff88 	bl	80048d4 <__assert_func>
 80059c4:	f100 0514 	add.w	r5, r0, #20
 80059c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059cc:	462b      	mov	r3, r5
 80059ce:	2200      	movs	r2, #0
 80059d0:	4543      	cmp	r3, r8
 80059d2:	d321      	bcc.n	8005a18 <__multiply+0x98>
 80059d4:	f104 0314 	add.w	r3, r4, #20
 80059d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80059dc:	f109 0314 	add.w	r3, r9, #20
 80059e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80059e4:	9202      	str	r2, [sp, #8]
 80059e6:	1b3a      	subs	r2, r7, r4
 80059e8:	3a15      	subs	r2, #21
 80059ea:	f022 0203 	bic.w	r2, r2, #3
 80059ee:	3204      	adds	r2, #4
 80059f0:	f104 0115 	add.w	r1, r4, #21
 80059f4:	428f      	cmp	r7, r1
 80059f6:	bf38      	it	cc
 80059f8:	2204      	movcc	r2, #4
 80059fa:	9201      	str	r2, [sp, #4]
 80059fc:	9a02      	ldr	r2, [sp, #8]
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d80c      	bhi.n	8005a1e <__multiply+0x9e>
 8005a04:	2e00      	cmp	r6, #0
 8005a06:	dd03      	ble.n	8005a10 <__multiply+0x90>
 8005a08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d05a      	beq.n	8005ac6 <__multiply+0x146>
 8005a10:	6106      	str	r6, [r0, #16]
 8005a12:	b005      	add	sp, #20
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	f843 2b04 	str.w	r2, [r3], #4
 8005a1c:	e7d8      	b.n	80059d0 <__multiply+0x50>
 8005a1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a22:	f1ba 0f00 	cmp.w	sl, #0
 8005a26:	d024      	beq.n	8005a72 <__multiply+0xf2>
 8005a28:	f104 0e14 	add.w	lr, r4, #20
 8005a2c:	46a9      	mov	r9, r5
 8005a2e:	f04f 0c00 	mov.w	ip, #0
 8005a32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005a36:	f8d9 1000 	ldr.w	r1, [r9]
 8005a3a:	fa1f fb82 	uxth.w	fp, r2
 8005a3e:	b289      	uxth	r1, r1
 8005a40:	fb0a 110b 	mla	r1, sl, fp, r1
 8005a44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005a48:	f8d9 2000 	ldr.w	r2, [r9]
 8005a4c:	4461      	add	r1, ip
 8005a4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a52:	fb0a c20b 	mla	r2, sl, fp, ip
 8005a56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a5a:	b289      	uxth	r1, r1
 8005a5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a60:	4577      	cmp	r7, lr
 8005a62:	f849 1b04 	str.w	r1, [r9], #4
 8005a66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a6a:	d8e2      	bhi.n	8005a32 <__multiply+0xb2>
 8005a6c:	9a01      	ldr	r2, [sp, #4]
 8005a6e:	f845 c002 	str.w	ip, [r5, r2]
 8005a72:	9a03      	ldr	r2, [sp, #12]
 8005a74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	f1b9 0f00 	cmp.w	r9, #0
 8005a7e:	d020      	beq.n	8005ac2 <__multiply+0x142>
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	f104 0c14 	add.w	ip, r4, #20
 8005a86:	46ae      	mov	lr, r5
 8005a88:	f04f 0a00 	mov.w	sl, #0
 8005a8c:	f8bc b000 	ldrh.w	fp, [ip]
 8005a90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005a94:	fb09 220b 	mla	r2, r9, fp, r2
 8005a98:	4492      	add	sl, r2
 8005a9a:	b289      	uxth	r1, r1
 8005a9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005aa0:	f84e 1b04 	str.w	r1, [lr], #4
 8005aa4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005aa8:	f8be 1000 	ldrh.w	r1, [lr]
 8005aac:	0c12      	lsrs	r2, r2, #16
 8005aae:	fb09 1102 	mla	r1, r9, r2, r1
 8005ab2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ab6:	4567      	cmp	r7, ip
 8005ab8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005abc:	d8e6      	bhi.n	8005a8c <__multiply+0x10c>
 8005abe:	9a01      	ldr	r2, [sp, #4]
 8005ac0:	50a9      	str	r1, [r5, r2]
 8005ac2:	3504      	adds	r5, #4
 8005ac4:	e79a      	b.n	80059fc <__multiply+0x7c>
 8005ac6:	3e01      	subs	r6, #1
 8005ac8:	e79c      	b.n	8005a04 <__multiply+0x84>
 8005aca:	bf00      	nop
 8005acc:	080129da 	.word	0x080129da
 8005ad0:	080129f1 	.word	0x080129f1

08005ad4 <__pow5mult>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	4615      	mov	r5, r2
 8005ada:	f012 0203 	ands.w	r2, r2, #3
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	d007      	beq.n	8005af4 <__pow5mult+0x20>
 8005ae4:	4c25      	ldr	r4, [pc, #148]	; (8005b7c <__pow5mult+0xa8>)
 8005ae6:	3a01      	subs	r2, #1
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005aee:	f7ff fe9b 	bl	8005828 <__multadd>
 8005af2:	4607      	mov	r7, r0
 8005af4:	10ad      	asrs	r5, r5, #2
 8005af6:	d03d      	beq.n	8005b74 <__pow5mult+0xa0>
 8005af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005afa:	b97c      	cbnz	r4, 8005b1c <__pow5mult+0x48>
 8005afc:	2010      	movs	r0, #16
 8005afe:	f7ff fdfd 	bl	80056fc <malloc>
 8005b02:	4602      	mov	r2, r0
 8005b04:	6270      	str	r0, [r6, #36]	; 0x24
 8005b06:	b928      	cbnz	r0, 8005b14 <__pow5mult+0x40>
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <__pow5mult+0xac>)
 8005b0a:	481e      	ldr	r0, [pc, #120]	; (8005b84 <__pow5mult+0xb0>)
 8005b0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b10:	f7fe fee0 	bl	80048d4 <__assert_func>
 8005b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b18:	6004      	str	r4, [r0, #0]
 8005b1a:	60c4      	str	r4, [r0, #12]
 8005b1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b24:	b94c      	cbnz	r4, 8005b3a <__pow5mult+0x66>
 8005b26:	f240 2171 	movw	r1, #625	; 0x271
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7ff ff12 	bl	8005954 <__i2b>
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b36:	4604      	mov	r4, r0
 8005b38:	6003      	str	r3, [r0, #0]
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	07eb      	lsls	r3, r5, #31
 8005b40:	d50a      	bpl.n	8005b58 <__pow5mult+0x84>
 8005b42:	4639      	mov	r1, r7
 8005b44:	4622      	mov	r2, r4
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7ff ff1a 	bl	8005980 <__multiply>
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4680      	mov	r8, r0
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7ff fe47 	bl	80057e4 <_Bfree>
 8005b56:	4647      	mov	r7, r8
 8005b58:	106d      	asrs	r5, r5, #1
 8005b5a:	d00b      	beq.n	8005b74 <__pow5mult+0xa0>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	b938      	cbnz	r0, 8005b70 <__pow5mult+0x9c>
 8005b60:	4622      	mov	r2, r4
 8005b62:	4621      	mov	r1, r4
 8005b64:	4630      	mov	r0, r6
 8005b66:	f7ff ff0b 	bl	8005980 <__multiply>
 8005b6a:	6020      	str	r0, [r4, #0]
 8005b6c:	f8c0 9000 	str.w	r9, [r0]
 8005b70:	4604      	mov	r4, r0
 8005b72:	e7e4      	b.n	8005b3e <__pow5mult+0x6a>
 8005b74:	4638      	mov	r0, r7
 8005b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08012b60 	.word	0x08012b60
 8005b80:	0801287e 	.word	0x0801287e
 8005b84:	080129f1 	.word	0x080129f1

08005b88 <__lshift>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	6849      	ldr	r1, [r1, #4]
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b96:	68a3      	ldr	r3, [r4, #8]
 8005b98:	4607      	mov	r7, r0
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ba0:	f108 0601 	add.w	r6, r8, #1
 8005ba4:	42b3      	cmp	r3, r6
 8005ba6:	db0b      	blt.n	8005bc0 <__lshift+0x38>
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f7ff fddb 	bl	8005764 <_Balloc>
 8005bae:	4605      	mov	r5, r0
 8005bb0:	b948      	cbnz	r0, 8005bc6 <__lshift+0x3e>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <__lshift+0xd8>)
 8005bb6:	482b      	ldr	r0, [pc, #172]	; (8005c64 <__lshift+0xdc>)
 8005bb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005bbc:	f7fe fe8a 	bl	80048d4 <__assert_func>
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__lshift+0x1c>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f100 0114 	add.w	r1, r0, #20
 8005bcc:	f100 0210 	add.w	r2, r0, #16
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	4553      	cmp	r3, sl
 8005bd4:	db37      	blt.n	8005c46 <__lshift+0xbe>
 8005bd6:	6920      	ldr	r0, [r4, #16]
 8005bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bdc:	f104 0314 	add.w	r3, r4, #20
 8005be0:	f019 091f 	ands.w	r9, r9, #31
 8005be4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005be8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005bec:	d02f      	beq.n	8005c4e <__lshift+0xc6>
 8005bee:	f1c9 0e20 	rsb	lr, r9, #32
 8005bf2:	468a      	mov	sl, r1
 8005bf4:	f04f 0c00 	mov.w	ip, #0
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	fa02 f209 	lsl.w	r2, r2, r9
 8005bfe:	ea42 020c 	orr.w	r2, r2, ip
 8005c02:	f84a 2b04 	str.w	r2, [sl], #4
 8005c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005c10:	d8f2      	bhi.n	8005bf8 <__lshift+0x70>
 8005c12:	1b03      	subs	r3, r0, r4
 8005c14:	3b15      	subs	r3, #21
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	f104 0215 	add.w	r2, r4, #21
 8005c20:	4290      	cmp	r0, r2
 8005c22:	bf38      	it	cc
 8005c24:	2304      	movcc	r3, #4
 8005c26:	f841 c003 	str.w	ip, [r1, r3]
 8005c2a:	f1bc 0f00 	cmp.w	ip, #0
 8005c2e:	d001      	beq.n	8005c34 <__lshift+0xac>
 8005c30:	f108 0602 	add.w	r6, r8, #2
 8005c34:	3e01      	subs	r6, #1
 8005c36:	4638      	mov	r0, r7
 8005c38:	612e      	str	r6, [r5, #16]
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f7ff fdd2 	bl	80057e4 <_Bfree>
 8005c40:	4628      	mov	r0, r5
 8005c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	e7c1      	b.n	8005bd2 <__lshift+0x4a>
 8005c4e:	3904      	subs	r1, #4
 8005c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c58:	4298      	cmp	r0, r3
 8005c5a:	d8f9      	bhi.n	8005c50 <__lshift+0xc8>
 8005c5c:	e7ea      	b.n	8005c34 <__lshift+0xac>
 8005c5e:	bf00      	nop
 8005c60:	080129da 	.word	0x080129da
 8005c64:	080129f1 	.word	0x080129f1

08005c68 <__mcmp>:
 8005c68:	b530      	push	{r4, r5, lr}
 8005c6a:	6902      	ldr	r2, [r0, #16]
 8005c6c:	690c      	ldr	r4, [r1, #16]
 8005c6e:	1b12      	subs	r2, r2, r4
 8005c70:	d10e      	bne.n	8005c90 <__mcmp+0x28>
 8005c72:	f100 0314 	add.w	r3, r0, #20
 8005c76:	3114      	adds	r1, #20
 8005c78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005c7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005c84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005c88:	42a5      	cmp	r5, r4
 8005c8a:	d003      	beq.n	8005c94 <__mcmp+0x2c>
 8005c8c:	d305      	bcc.n	8005c9a <__mcmp+0x32>
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4610      	mov	r0, r2
 8005c92:	bd30      	pop	{r4, r5, pc}
 8005c94:	4283      	cmp	r3, r0
 8005c96:	d3f3      	bcc.n	8005c80 <__mcmp+0x18>
 8005c98:	e7fa      	b.n	8005c90 <__mcmp+0x28>
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c9e:	e7f7      	b.n	8005c90 <__mcmp+0x28>

08005ca0 <__mdiff>:
 8005ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4620      	mov	r0, r4
 8005cac:	4690      	mov	r8, r2
 8005cae:	f7ff ffdb 	bl	8005c68 <__mcmp>
 8005cb2:	1e05      	subs	r5, r0, #0
 8005cb4:	d110      	bne.n	8005cd8 <__mdiff+0x38>
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7ff fd53 	bl	8005764 <_Balloc>
 8005cbe:	b930      	cbnz	r0, 8005cce <__mdiff+0x2e>
 8005cc0:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <__mdiff+0x10c>)
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	f240 2132 	movw	r1, #562	; 0x232
 8005cc8:	4839      	ldr	r0, [pc, #228]	; (8005db0 <__mdiff+0x110>)
 8005cca:	f7fe fe03 	bl	80048d4 <__assert_func>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd8:	bfa4      	itt	ge
 8005cda:	4643      	movge	r3, r8
 8005cdc:	46a0      	movge	r8, r4
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ce4:	bfa6      	itte	ge
 8005ce6:	461c      	movge	r4, r3
 8005ce8:	2500      	movge	r5, #0
 8005cea:	2501      	movlt	r5, #1
 8005cec:	f7ff fd3a 	bl	8005764 <_Balloc>
 8005cf0:	b920      	cbnz	r0, 8005cfc <__mdiff+0x5c>
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <__mdiff+0x10c>)
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005cfa:	e7e5      	b.n	8005cc8 <__mdiff+0x28>
 8005cfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d00:	6926      	ldr	r6, [r4, #16]
 8005d02:	60c5      	str	r5, [r0, #12]
 8005d04:	f104 0914 	add.w	r9, r4, #20
 8005d08:	f108 0514 	add.w	r5, r8, #20
 8005d0c:	f100 0e14 	add.w	lr, r0, #20
 8005d10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005d14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d18:	f108 0210 	add.w	r2, r8, #16
 8005d1c:	46f2      	mov	sl, lr
 8005d1e:	2100      	movs	r1, #0
 8005d20:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d28:	fa1f f883 	uxth.w	r8, r3
 8005d2c:	fa11 f18b 	uxtah	r1, r1, fp
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	eba1 0808 	sub.w	r8, r1, r8
 8005d36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d3e:	fa1f f888 	uxth.w	r8, r8
 8005d42:	1419      	asrs	r1, r3, #16
 8005d44:	454e      	cmp	r6, r9
 8005d46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d4a:	f84a 3b04 	str.w	r3, [sl], #4
 8005d4e:	d8e7      	bhi.n	8005d20 <__mdiff+0x80>
 8005d50:	1b33      	subs	r3, r6, r4
 8005d52:	3b15      	subs	r3, #21
 8005d54:	f023 0303 	bic.w	r3, r3, #3
 8005d58:	3304      	adds	r3, #4
 8005d5a:	3415      	adds	r4, #21
 8005d5c:	42a6      	cmp	r6, r4
 8005d5e:	bf38      	it	cc
 8005d60:	2304      	movcc	r3, #4
 8005d62:	441d      	add	r5, r3
 8005d64:	4473      	add	r3, lr
 8005d66:	469e      	mov	lr, r3
 8005d68:	462e      	mov	r6, r5
 8005d6a:	4566      	cmp	r6, ip
 8005d6c:	d30e      	bcc.n	8005d8c <__mdiff+0xec>
 8005d6e:	f10c 0203 	add.w	r2, ip, #3
 8005d72:	1b52      	subs	r2, r2, r5
 8005d74:	f022 0203 	bic.w	r2, r2, #3
 8005d78:	3d03      	subs	r5, #3
 8005d7a:	45ac      	cmp	ip, r5
 8005d7c:	bf38      	it	cc
 8005d7e:	2200      	movcc	r2, #0
 8005d80:	441a      	add	r2, r3
 8005d82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005d86:	b17b      	cbz	r3, 8005da8 <__mdiff+0x108>
 8005d88:	6107      	str	r7, [r0, #16]
 8005d8a:	e7a3      	b.n	8005cd4 <__mdiff+0x34>
 8005d8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005d90:	fa11 f288 	uxtah	r2, r1, r8
 8005d94:	1414      	asrs	r4, r2, #16
 8005d96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005d9a:	b292      	uxth	r2, r2
 8005d9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005da0:	f84e 2b04 	str.w	r2, [lr], #4
 8005da4:	1421      	asrs	r1, r4, #16
 8005da6:	e7e0      	b.n	8005d6a <__mdiff+0xca>
 8005da8:	3f01      	subs	r7, #1
 8005daa:	e7ea      	b.n	8005d82 <__mdiff+0xe2>
 8005dac:	080129da 	.word	0x080129da
 8005db0:	080129f1 	.word	0x080129f1

08005db4 <__d2b>:
 8005db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005db8:	4689      	mov	r9, r1
 8005dba:	2101      	movs	r1, #1
 8005dbc:	ec57 6b10 	vmov	r6, r7, d0
 8005dc0:	4690      	mov	r8, r2
 8005dc2:	f7ff fccf 	bl	8005764 <_Balloc>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	b930      	cbnz	r0, 8005dd8 <__d2b+0x24>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <__d2b+0xb0>)
 8005dce:	4826      	ldr	r0, [pc, #152]	; (8005e68 <__d2b+0xb4>)
 8005dd0:	f240 310a 	movw	r1, #778	; 0x30a
 8005dd4:	f7fe fd7e 	bl	80048d4 <__assert_func>
 8005dd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ddc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005de0:	bb35      	cbnz	r5, 8005e30 <__d2b+0x7c>
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	d028      	beq.n	8005e3a <__d2b+0x86>
 8005de8:	4668      	mov	r0, sp
 8005dea:	9600      	str	r6, [sp, #0]
 8005dec:	f7ff fd82 	bl	80058f4 <__lo0bits>
 8005df0:	9900      	ldr	r1, [sp, #0]
 8005df2:	b300      	cbz	r0, 8005e36 <__d2b+0x82>
 8005df4:	9a01      	ldr	r2, [sp, #4]
 8005df6:	f1c0 0320 	rsb	r3, r0, #32
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	40c2      	lsrs	r2, r0
 8005e02:	6163      	str	r3, [r4, #20]
 8005e04:	9201      	str	r2, [sp, #4]
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	61a3      	str	r3, [r4, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf14      	ite	ne
 8005e0e:	2202      	movne	r2, #2
 8005e10:	2201      	moveq	r2, #1
 8005e12:	6122      	str	r2, [r4, #16]
 8005e14:	b1d5      	cbz	r5, 8005e4c <__d2b+0x98>
 8005e16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e1a:	4405      	add	r5, r0
 8005e1c:	f8c9 5000 	str.w	r5, [r9]
 8005e20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e24:	f8c8 0000 	str.w	r0, [r8]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	b003      	add	sp, #12
 8005e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e34:	e7d5      	b.n	8005de2 <__d2b+0x2e>
 8005e36:	6161      	str	r1, [r4, #20]
 8005e38:	e7e5      	b.n	8005e06 <__d2b+0x52>
 8005e3a:	a801      	add	r0, sp, #4
 8005e3c:	f7ff fd5a 	bl	80058f4 <__lo0bits>
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	6163      	str	r3, [r4, #20]
 8005e44:	2201      	movs	r2, #1
 8005e46:	6122      	str	r2, [r4, #16]
 8005e48:	3020      	adds	r0, #32
 8005e4a:	e7e3      	b.n	8005e14 <__d2b+0x60>
 8005e4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e54:	f8c9 0000 	str.w	r0, [r9]
 8005e58:	6918      	ldr	r0, [r3, #16]
 8005e5a:	f7ff fd2b 	bl	80058b4 <__hi0bits>
 8005e5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e62:	e7df      	b.n	8005e24 <__d2b+0x70>
 8005e64:	080129da 	.word	0x080129da
 8005e68:	080129f1 	.word	0x080129f1

08005e6c <_calloc_r>:
 8005e6c:	b513      	push	{r0, r1, r4, lr}
 8005e6e:	434a      	muls	r2, r1
 8005e70:	4611      	mov	r1, r2
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	f7fd fcc8 	bl	8003808 <_malloc_r>
 8005e78:	4604      	mov	r4, r0
 8005e7a:	b118      	cbz	r0, 8005e84 <_calloc_r+0x18>
 8005e7c:	9a01      	ldr	r2, [sp, #4]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	f7fd fc6d 	bl	800375e <memset>
 8005e84:	4620      	mov	r0, r4
 8005e86:	b002      	add	sp, #8
 8005e88:	bd10      	pop	{r4, pc}

08005e8a <__ssputs_r>:
 8005e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8e:	688e      	ldr	r6, [r1, #8]
 8005e90:	429e      	cmp	r6, r3
 8005e92:	4682      	mov	sl, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	4690      	mov	r8, r2
 8005e98:	461f      	mov	r7, r3
 8005e9a:	d838      	bhi.n	8005f0e <__ssputs_r+0x84>
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ea2:	d032      	beq.n	8005f0a <__ssputs_r+0x80>
 8005ea4:	6825      	ldr	r5, [r4, #0]
 8005ea6:	6909      	ldr	r1, [r1, #16]
 8005ea8:	eba5 0901 	sub.w	r9, r5, r1
 8005eac:	6965      	ldr	r5, [r4, #20]
 8005eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	444b      	add	r3, r9
 8005eba:	106d      	asrs	r5, r5, #1
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	bf38      	it	cc
 8005ec0:	461d      	movcc	r5, r3
 8005ec2:	0553      	lsls	r3, r2, #21
 8005ec4:	d531      	bpl.n	8005f2a <__ssputs_r+0xa0>
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7fd fc9e 	bl	8003808 <_malloc_r>
 8005ecc:	4606      	mov	r6, r0
 8005ece:	b950      	cbnz	r0, 8005ee6 <__ssputs_r+0x5c>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	f8ca 3000 	str.w	r3, [sl]
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee6:	6921      	ldr	r1, [r4, #16]
 8005ee8:	464a      	mov	r2, r9
 8005eea:	f7ff fc21 	bl	8005730 <memcpy>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	6126      	str	r6, [r4, #16]
 8005efc:	6165      	str	r5, [r4, #20]
 8005efe:	444e      	add	r6, r9
 8005f00:	eba5 0509 	sub.w	r5, r5, r9
 8005f04:	6026      	str	r6, [r4, #0]
 8005f06:	60a5      	str	r5, [r4, #8]
 8005f08:	463e      	mov	r6, r7
 8005f0a:	42be      	cmp	r6, r7
 8005f0c:	d900      	bls.n	8005f10 <__ssputs_r+0x86>
 8005f0e:	463e      	mov	r6, r7
 8005f10:	6820      	ldr	r0, [r4, #0]
 8005f12:	4632      	mov	r2, r6
 8005f14:	4641      	mov	r1, r8
 8005f16:	f000 fac9 	bl	80064ac <memmove>
 8005f1a:	68a3      	ldr	r3, [r4, #8]
 8005f1c:	1b9b      	subs	r3, r3, r6
 8005f1e:	60a3      	str	r3, [r4, #8]
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	4433      	add	r3, r6
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7db      	b.n	8005ee2 <__ssputs_r+0x58>
 8005f2a:	462a      	mov	r2, r5
 8005f2c:	f000 fad8 	bl	80064e0 <_realloc_r>
 8005f30:	4606      	mov	r6, r0
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d1e1      	bne.n	8005efa <__ssputs_r+0x70>
 8005f36:	6921      	ldr	r1, [r4, #16]
 8005f38:	4650      	mov	r0, sl
 8005f3a:	f7fd fc19 	bl	8003770 <_free_r>
 8005f3e:	e7c7      	b.n	8005ed0 <__ssputs_r+0x46>

08005f40 <_svfiprintf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4698      	mov	r8, r3
 8005f46:	898b      	ldrh	r3, [r1, #12]
 8005f48:	061b      	lsls	r3, r3, #24
 8005f4a:	b09d      	sub	sp, #116	; 0x74
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	4614      	mov	r4, r2
 8005f52:	d50e      	bpl.n	8005f72 <_svfiprintf_r+0x32>
 8005f54:	690b      	ldr	r3, [r1, #16]
 8005f56:	b963      	cbnz	r3, 8005f72 <_svfiprintf_r+0x32>
 8005f58:	2140      	movs	r1, #64	; 0x40
 8005f5a:	f7fd fc55 	bl	8003808 <_malloc_r>
 8005f5e:	6028      	str	r0, [r5, #0]
 8005f60:	6128      	str	r0, [r5, #16]
 8005f62:	b920      	cbnz	r0, 8005f6e <_svfiprintf_r+0x2e>
 8005f64:	230c      	movs	r3, #12
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f6c:	e0d1      	b.n	8006112 <_svfiprintf_r+0x1d2>
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	616b      	str	r3, [r5, #20]
 8005f72:	2300      	movs	r3, #0
 8005f74:	9309      	str	r3, [sp, #36]	; 0x24
 8005f76:	2320      	movs	r3, #32
 8005f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f80:	2330      	movs	r3, #48	; 0x30
 8005f82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800612c <_svfiprintf_r+0x1ec>
 8005f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f8a:	f04f 0901 	mov.w	r9, #1
 8005f8e:	4623      	mov	r3, r4
 8005f90:	469a      	mov	sl, r3
 8005f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f96:	b10a      	cbz	r2, 8005f9c <_svfiprintf_r+0x5c>
 8005f98:	2a25      	cmp	r2, #37	; 0x25
 8005f9a:	d1f9      	bne.n	8005f90 <_svfiprintf_r+0x50>
 8005f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa0:	d00b      	beq.n	8005fba <_svfiprintf_r+0x7a>
 8005fa2:	465b      	mov	r3, fp
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff ff6e 	bl	8005e8a <__ssputs_r>
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f000 80aa 	beq.w	8006108 <_svfiprintf_r+0x1c8>
 8005fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fb6:	445a      	add	r2, fp
 8005fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8005fba:	f89a 3000 	ldrb.w	r3, [sl]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80a2 	beq.w	8006108 <_svfiprintf_r+0x1c8>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fce:	f10a 0a01 	add.w	sl, sl, #1
 8005fd2:	9304      	str	r3, [sp, #16]
 8005fd4:	9307      	str	r3, [sp, #28]
 8005fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fda:	931a      	str	r3, [sp, #104]	; 0x68
 8005fdc:	4654      	mov	r4, sl
 8005fde:	2205      	movs	r2, #5
 8005fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe4:	4851      	ldr	r0, [pc, #324]	; (800612c <_svfiprintf_r+0x1ec>)
 8005fe6:	f7fa fc83 	bl	80008f0 <memchr>
 8005fea:	9a04      	ldr	r2, [sp, #16]
 8005fec:	b9d8      	cbnz	r0, 8006026 <_svfiprintf_r+0xe6>
 8005fee:	06d0      	lsls	r0, r2, #27
 8005ff0:	bf44      	itt	mi
 8005ff2:	2320      	movmi	r3, #32
 8005ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff8:	0711      	lsls	r1, r2, #28
 8005ffa:	bf44      	itt	mi
 8005ffc:	232b      	movmi	r3, #43	; 0x2b
 8005ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006002:	f89a 3000 	ldrb.w	r3, [sl]
 8006006:	2b2a      	cmp	r3, #42	; 0x2a
 8006008:	d015      	beq.n	8006036 <_svfiprintf_r+0xf6>
 800600a:	9a07      	ldr	r2, [sp, #28]
 800600c:	4654      	mov	r4, sl
 800600e:	2000      	movs	r0, #0
 8006010:	f04f 0c0a 	mov.w	ip, #10
 8006014:	4621      	mov	r1, r4
 8006016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601a:	3b30      	subs	r3, #48	; 0x30
 800601c:	2b09      	cmp	r3, #9
 800601e:	d94e      	bls.n	80060be <_svfiprintf_r+0x17e>
 8006020:	b1b0      	cbz	r0, 8006050 <_svfiprintf_r+0x110>
 8006022:	9207      	str	r2, [sp, #28]
 8006024:	e014      	b.n	8006050 <_svfiprintf_r+0x110>
 8006026:	eba0 0308 	sub.w	r3, r0, r8
 800602a:	fa09 f303 	lsl.w	r3, r9, r3
 800602e:	4313      	orrs	r3, r2
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	46a2      	mov	sl, r4
 8006034:	e7d2      	b.n	8005fdc <_svfiprintf_r+0x9c>
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	1d19      	adds	r1, r3, #4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	9103      	str	r1, [sp, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfbb      	ittet	lt
 8006042:	425b      	neglt	r3, r3
 8006044:	f042 0202 	orrlt.w	r2, r2, #2
 8006048:	9307      	strge	r3, [sp, #28]
 800604a:	9307      	strlt	r3, [sp, #28]
 800604c:	bfb8      	it	lt
 800604e:	9204      	strlt	r2, [sp, #16]
 8006050:	7823      	ldrb	r3, [r4, #0]
 8006052:	2b2e      	cmp	r3, #46	; 0x2e
 8006054:	d10c      	bne.n	8006070 <_svfiprintf_r+0x130>
 8006056:	7863      	ldrb	r3, [r4, #1]
 8006058:	2b2a      	cmp	r3, #42	; 0x2a
 800605a:	d135      	bne.n	80060c8 <_svfiprintf_r+0x188>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	9203      	str	r2, [sp, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfb8      	it	lt
 8006068:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800606c:	3402      	adds	r4, #2
 800606e:	9305      	str	r3, [sp, #20]
 8006070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800613c <_svfiprintf_r+0x1fc>
 8006074:	7821      	ldrb	r1, [r4, #0]
 8006076:	2203      	movs	r2, #3
 8006078:	4650      	mov	r0, sl
 800607a:	f7fa fc39 	bl	80008f0 <memchr>
 800607e:	b140      	cbz	r0, 8006092 <_svfiprintf_r+0x152>
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	eba0 000a 	sub.w	r0, r0, sl
 8006086:	fa03 f000 	lsl.w	r0, r3, r0
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	4303      	orrs	r3, r0
 800608e:	3401      	adds	r4, #1
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006096:	4826      	ldr	r0, [pc, #152]	; (8006130 <_svfiprintf_r+0x1f0>)
 8006098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800609c:	2206      	movs	r2, #6
 800609e:	f7fa fc27 	bl	80008f0 <memchr>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d038      	beq.n	8006118 <_svfiprintf_r+0x1d8>
 80060a6:	4b23      	ldr	r3, [pc, #140]	; (8006134 <_svfiprintf_r+0x1f4>)
 80060a8:	bb1b      	cbnz	r3, 80060f2 <_svfiprintf_r+0x1b2>
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	3307      	adds	r3, #7
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	3308      	adds	r3, #8
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b8:	4433      	add	r3, r6
 80060ba:	9309      	str	r3, [sp, #36]	; 0x24
 80060bc:	e767      	b.n	8005f8e <_svfiprintf_r+0x4e>
 80060be:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c2:	460c      	mov	r4, r1
 80060c4:	2001      	movs	r0, #1
 80060c6:	e7a5      	b.n	8006014 <_svfiprintf_r+0xd4>
 80060c8:	2300      	movs	r3, #0
 80060ca:	3401      	adds	r4, #1
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	4619      	mov	r1, r3
 80060d0:	f04f 0c0a 	mov.w	ip, #10
 80060d4:	4620      	mov	r0, r4
 80060d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060da:	3a30      	subs	r2, #48	; 0x30
 80060dc:	2a09      	cmp	r2, #9
 80060de:	d903      	bls.n	80060e8 <_svfiprintf_r+0x1a8>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0c5      	beq.n	8006070 <_svfiprintf_r+0x130>
 80060e4:	9105      	str	r1, [sp, #20]
 80060e6:	e7c3      	b.n	8006070 <_svfiprintf_r+0x130>
 80060e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ec:	4604      	mov	r4, r0
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7f0      	b.n	80060d4 <_svfiprintf_r+0x194>
 80060f2:	ab03      	add	r3, sp, #12
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	462a      	mov	r2, r5
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <_svfiprintf_r+0x1f8>)
 80060fa:	a904      	add	r1, sp, #16
 80060fc:	4638      	mov	r0, r7
 80060fe:	f7fd fc7d 	bl	80039fc <_printf_float>
 8006102:	1c42      	adds	r2, r0, #1
 8006104:	4606      	mov	r6, r0
 8006106:	d1d6      	bne.n	80060b6 <_svfiprintf_r+0x176>
 8006108:	89ab      	ldrh	r3, [r5, #12]
 800610a:	065b      	lsls	r3, r3, #25
 800610c:	f53f af2c 	bmi.w	8005f68 <_svfiprintf_r+0x28>
 8006110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006112:	b01d      	add	sp, #116	; 0x74
 8006114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006118:	ab03      	add	r3, sp, #12
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	462a      	mov	r2, r5
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <_svfiprintf_r+0x1f8>)
 8006120:	a904      	add	r1, sp, #16
 8006122:	4638      	mov	r0, r7
 8006124:	f7fd ff0e 	bl	8003f44 <_printf_i>
 8006128:	e7eb      	b.n	8006102 <_svfiprintf_r+0x1c2>
 800612a:	bf00      	nop
 800612c:	08012b6c 	.word	0x08012b6c
 8006130:	08012b76 	.word	0x08012b76
 8006134:	080039fd 	.word	0x080039fd
 8006138:	08005e8b 	.word	0x08005e8b
 800613c:	08012b72 	.word	0x08012b72

08006140 <__sfputc_r>:
 8006140:	6893      	ldr	r3, [r2, #8]
 8006142:	3b01      	subs	r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	b410      	push	{r4}
 8006148:	6093      	str	r3, [r2, #8]
 800614a:	da08      	bge.n	800615e <__sfputc_r+0x1e>
 800614c:	6994      	ldr	r4, [r2, #24]
 800614e:	42a3      	cmp	r3, r4
 8006150:	db01      	blt.n	8006156 <__sfputc_r+0x16>
 8006152:	290a      	cmp	r1, #10
 8006154:	d103      	bne.n	800615e <__sfputc_r+0x1e>
 8006156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615a:	f7fe bafb 	b.w	8004754 <__swbuf_r>
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	1c58      	adds	r0, r3, #1
 8006162:	6010      	str	r0, [r2, #0]
 8006164:	7019      	strb	r1, [r3, #0]
 8006166:	4608      	mov	r0, r1
 8006168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616c:	4770      	bx	lr

0800616e <__sfputs_r>:
 800616e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006170:	4606      	mov	r6, r0
 8006172:	460f      	mov	r7, r1
 8006174:	4614      	mov	r4, r2
 8006176:	18d5      	adds	r5, r2, r3
 8006178:	42ac      	cmp	r4, r5
 800617a:	d101      	bne.n	8006180 <__sfputs_r+0x12>
 800617c:	2000      	movs	r0, #0
 800617e:	e007      	b.n	8006190 <__sfputs_r+0x22>
 8006180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006184:	463a      	mov	r2, r7
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ffda 	bl	8006140 <__sfputc_r>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d1f3      	bne.n	8006178 <__sfputs_r+0xa>
 8006190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006194 <_vfiprintf_r>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	460d      	mov	r5, r1
 800619a:	b09d      	sub	sp, #116	; 0x74
 800619c:	4614      	mov	r4, r2
 800619e:	4698      	mov	r8, r3
 80061a0:	4606      	mov	r6, r0
 80061a2:	b118      	cbz	r0, 80061ac <_vfiprintf_r+0x18>
 80061a4:	6983      	ldr	r3, [r0, #24]
 80061a6:	b90b      	cbnz	r3, 80061ac <_vfiprintf_r+0x18>
 80061a8:	f7fd fa14 	bl	80035d4 <__sinit>
 80061ac:	4b89      	ldr	r3, [pc, #548]	; (80063d4 <_vfiprintf_r+0x240>)
 80061ae:	429d      	cmp	r5, r3
 80061b0:	d11b      	bne.n	80061ea <_vfiprintf_r+0x56>
 80061b2:	6875      	ldr	r5, [r6, #4]
 80061b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	d405      	bmi.n	80061c6 <_vfiprintf_r+0x32>
 80061ba:	89ab      	ldrh	r3, [r5, #12]
 80061bc:	059a      	lsls	r2, r3, #22
 80061be:	d402      	bmi.n	80061c6 <_vfiprintf_r+0x32>
 80061c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061c2:	f7fd faca 	bl	800375a <__retarget_lock_acquire_recursive>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	071b      	lsls	r3, r3, #28
 80061ca:	d501      	bpl.n	80061d0 <_vfiprintf_r+0x3c>
 80061cc:	692b      	ldr	r3, [r5, #16]
 80061ce:	b9eb      	cbnz	r3, 800620c <_vfiprintf_r+0x78>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7fe fb10 	bl	80047f8 <__swsetup_r>
 80061d8:	b1c0      	cbz	r0, 800620c <_vfiprintf_r+0x78>
 80061da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061dc:	07dc      	lsls	r4, r3, #31
 80061de:	d50e      	bpl.n	80061fe <_vfiprintf_r+0x6a>
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061e4:	b01d      	add	sp, #116	; 0x74
 80061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ea:	4b7b      	ldr	r3, [pc, #492]	; (80063d8 <_vfiprintf_r+0x244>)
 80061ec:	429d      	cmp	r5, r3
 80061ee:	d101      	bne.n	80061f4 <_vfiprintf_r+0x60>
 80061f0:	68b5      	ldr	r5, [r6, #8]
 80061f2:	e7df      	b.n	80061b4 <_vfiprintf_r+0x20>
 80061f4:	4b79      	ldr	r3, [pc, #484]	; (80063dc <_vfiprintf_r+0x248>)
 80061f6:	429d      	cmp	r5, r3
 80061f8:	bf08      	it	eq
 80061fa:	68f5      	ldreq	r5, [r6, #12]
 80061fc:	e7da      	b.n	80061b4 <_vfiprintf_r+0x20>
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	0598      	lsls	r0, r3, #22
 8006202:	d4ed      	bmi.n	80061e0 <_vfiprintf_r+0x4c>
 8006204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006206:	f7fd faa9 	bl	800375c <__retarget_lock_release_recursive>
 800620a:	e7e9      	b.n	80061e0 <_vfiprintf_r+0x4c>
 800620c:	2300      	movs	r3, #0
 800620e:	9309      	str	r3, [sp, #36]	; 0x24
 8006210:	2320      	movs	r3, #32
 8006212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006216:	f8cd 800c 	str.w	r8, [sp, #12]
 800621a:	2330      	movs	r3, #48	; 0x30
 800621c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063e0 <_vfiprintf_r+0x24c>
 8006220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006224:	f04f 0901 	mov.w	r9, #1
 8006228:	4623      	mov	r3, r4
 800622a:	469a      	mov	sl, r3
 800622c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006230:	b10a      	cbz	r2, 8006236 <_vfiprintf_r+0xa2>
 8006232:	2a25      	cmp	r2, #37	; 0x25
 8006234:	d1f9      	bne.n	800622a <_vfiprintf_r+0x96>
 8006236:	ebba 0b04 	subs.w	fp, sl, r4
 800623a:	d00b      	beq.n	8006254 <_vfiprintf_r+0xc0>
 800623c:	465b      	mov	r3, fp
 800623e:	4622      	mov	r2, r4
 8006240:	4629      	mov	r1, r5
 8006242:	4630      	mov	r0, r6
 8006244:	f7ff ff93 	bl	800616e <__sfputs_r>
 8006248:	3001      	adds	r0, #1
 800624a:	f000 80aa 	beq.w	80063a2 <_vfiprintf_r+0x20e>
 800624e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006250:	445a      	add	r2, fp
 8006252:	9209      	str	r2, [sp, #36]	; 0x24
 8006254:	f89a 3000 	ldrb.w	r3, [sl]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80a2 	beq.w	80063a2 <_vfiprintf_r+0x20e>
 800625e:	2300      	movs	r3, #0
 8006260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006268:	f10a 0a01 	add.w	sl, sl, #1
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006274:	931a      	str	r3, [sp, #104]	; 0x68
 8006276:	4654      	mov	r4, sl
 8006278:	2205      	movs	r2, #5
 800627a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627e:	4858      	ldr	r0, [pc, #352]	; (80063e0 <_vfiprintf_r+0x24c>)
 8006280:	f7fa fb36 	bl	80008f0 <memchr>
 8006284:	9a04      	ldr	r2, [sp, #16]
 8006286:	b9d8      	cbnz	r0, 80062c0 <_vfiprintf_r+0x12c>
 8006288:	06d1      	lsls	r1, r2, #27
 800628a:	bf44      	itt	mi
 800628c:	2320      	movmi	r3, #32
 800628e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006292:	0713      	lsls	r3, r2, #28
 8006294:	bf44      	itt	mi
 8006296:	232b      	movmi	r3, #43	; 0x2b
 8006298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800629c:	f89a 3000 	ldrb.w	r3, [sl]
 80062a0:	2b2a      	cmp	r3, #42	; 0x2a
 80062a2:	d015      	beq.n	80062d0 <_vfiprintf_r+0x13c>
 80062a4:	9a07      	ldr	r2, [sp, #28]
 80062a6:	4654      	mov	r4, sl
 80062a8:	2000      	movs	r0, #0
 80062aa:	f04f 0c0a 	mov.w	ip, #10
 80062ae:	4621      	mov	r1, r4
 80062b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062b4:	3b30      	subs	r3, #48	; 0x30
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d94e      	bls.n	8006358 <_vfiprintf_r+0x1c4>
 80062ba:	b1b0      	cbz	r0, 80062ea <_vfiprintf_r+0x156>
 80062bc:	9207      	str	r2, [sp, #28]
 80062be:	e014      	b.n	80062ea <_vfiprintf_r+0x156>
 80062c0:	eba0 0308 	sub.w	r3, r0, r8
 80062c4:	fa09 f303 	lsl.w	r3, r9, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	46a2      	mov	sl, r4
 80062ce:	e7d2      	b.n	8006276 <_vfiprintf_r+0xe2>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	1d19      	adds	r1, r3, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	9103      	str	r1, [sp, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bfbb      	ittet	lt
 80062dc:	425b      	neglt	r3, r3
 80062de:	f042 0202 	orrlt.w	r2, r2, #2
 80062e2:	9307      	strge	r3, [sp, #28]
 80062e4:	9307      	strlt	r3, [sp, #28]
 80062e6:	bfb8      	it	lt
 80062e8:	9204      	strlt	r2, [sp, #16]
 80062ea:	7823      	ldrb	r3, [r4, #0]
 80062ec:	2b2e      	cmp	r3, #46	; 0x2e
 80062ee:	d10c      	bne.n	800630a <_vfiprintf_r+0x176>
 80062f0:	7863      	ldrb	r3, [r4, #1]
 80062f2:	2b2a      	cmp	r3, #42	; 0x2a
 80062f4:	d135      	bne.n	8006362 <_vfiprintf_r+0x1ce>
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	9203      	str	r2, [sp, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bfb8      	it	lt
 8006302:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006306:	3402      	adds	r4, #2
 8006308:	9305      	str	r3, [sp, #20]
 800630a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063f0 <_vfiprintf_r+0x25c>
 800630e:	7821      	ldrb	r1, [r4, #0]
 8006310:	2203      	movs	r2, #3
 8006312:	4650      	mov	r0, sl
 8006314:	f7fa faec 	bl	80008f0 <memchr>
 8006318:	b140      	cbz	r0, 800632c <_vfiprintf_r+0x198>
 800631a:	2340      	movs	r3, #64	; 0x40
 800631c:	eba0 000a 	sub.w	r0, r0, sl
 8006320:	fa03 f000 	lsl.w	r0, r3, r0
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	4303      	orrs	r3, r0
 8006328:	3401      	adds	r4, #1
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006330:	482c      	ldr	r0, [pc, #176]	; (80063e4 <_vfiprintf_r+0x250>)
 8006332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006336:	2206      	movs	r2, #6
 8006338:	f7fa fada 	bl	80008f0 <memchr>
 800633c:	2800      	cmp	r0, #0
 800633e:	d03f      	beq.n	80063c0 <_vfiprintf_r+0x22c>
 8006340:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <_vfiprintf_r+0x254>)
 8006342:	bb1b      	cbnz	r3, 800638c <_vfiprintf_r+0x1f8>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	3307      	adds	r3, #7
 8006348:	f023 0307 	bic.w	r3, r3, #7
 800634c:	3308      	adds	r3, #8
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	443b      	add	r3, r7
 8006354:	9309      	str	r3, [sp, #36]	; 0x24
 8006356:	e767      	b.n	8006228 <_vfiprintf_r+0x94>
 8006358:	fb0c 3202 	mla	r2, ip, r2, r3
 800635c:	460c      	mov	r4, r1
 800635e:	2001      	movs	r0, #1
 8006360:	e7a5      	b.n	80062ae <_vfiprintf_r+0x11a>
 8006362:	2300      	movs	r3, #0
 8006364:	3401      	adds	r4, #1
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	4619      	mov	r1, r3
 800636a:	f04f 0c0a 	mov.w	ip, #10
 800636e:	4620      	mov	r0, r4
 8006370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006374:	3a30      	subs	r2, #48	; 0x30
 8006376:	2a09      	cmp	r2, #9
 8006378:	d903      	bls.n	8006382 <_vfiprintf_r+0x1ee>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0c5      	beq.n	800630a <_vfiprintf_r+0x176>
 800637e:	9105      	str	r1, [sp, #20]
 8006380:	e7c3      	b.n	800630a <_vfiprintf_r+0x176>
 8006382:	fb0c 2101 	mla	r1, ip, r1, r2
 8006386:	4604      	mov	r4, r0
 8006388:	2301      	movs	r3, #1
 800638a:	e7f0      	b.n	800636e <_vfiprintf_r+0x1da>
 800638c:	ab03      	add	r3, sp, #12
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	462a      	mov	r2, r5
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <_vfiprintf_r+0x258>)
 8006394:	a904      	add	r1, sp, #16
 8006396:	4630      	mov	r0, r6
 8006398:	f7fd fb30 	bl	80039fc <_printf_float>
 800639c:	4607      	mov	r7, r0
 800639e:	1c78      	adds	r0, r7, #1
 80063a0:	d1d6      	bne.n	8006350 <_vfiprintf_r+0x1bc>
 80063a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063a4:	07d9      	lsls	r1, r3, #31
 80063a6:	d405      	bmi.n	80063b4 <_vfiprintf_r+0x220>
 80063a8:	89ab      	ldrh	r3, [r5, #12]
 80063aa:	059a      	lsls	r2, r3, #22
 80063ac:	d402      	bmi.n	80063b4 <_vfiprintf_r+0x220>
 80063ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063b0:	f7fd f9d4 	bl	800375c <__retarget_lock_release_recursive>
 80063b4:	89ab      	ldrh	r3, [r5, #12]
 80063b6:	065b      	lsls	r3, r3, #25
 80063b8:	f53f af12 	bmi.w	80061e0 <_vfiprintf_r+0x4c>
 80063bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063be:	e711      	b.n	80061e4 <_vfiprintf_r+0x50>
 80063c0:	ab03      	add	r3, sp, #12
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	462a      	mov	r2, r5
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <_vfiprintf_r+0x258>)
 80063c8:	a904      	add	r1, sp, #16
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7fd fdba 	bl	8003f44 <_printf_i>
 80063d0:	e7e4      	b.n	800639c <_vfiprintf_r+0x208>
 80063d2:	bf00      	nop
 80063d4:	08012808 	.word	0x08012808
 80063d8:	08012828 	.word	0x08012828
 80063dc:	080127e8 	.word	0x080127e8
 80063e0:	08012b6c 	.word	0x08012b6c
 80063e4:	08012b76 	.word	0x08012b76
 80063e8:	080039fd 	.word	0x080039fd
 80063ec:	0800616f 	.word	0x0800616f
 80063f0:	08012b72 	.word	0x08012b72

080063f4 <_putc_r>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	460d      	mov	r5, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	4606      	mov	r6, r0
 80063fc:	b118      	cbz	r0, 8006406 <_putc_r+0x12>
 80063fe:	6983      	ldr	r3, [r0, #24]
 8006400:	b90b      	cbnz	r3, 8006406 <_putc_r+0x12>
 8006402:	f7fd f8e7 	bl	80035d4 <__sinit>
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <_putc_r+0x84>)
 8006408:	429c      	cmp	r4, r3
 800640a:	d124      	bne.n	8006456 <_putc_r+0x62>
 800640c:	6874      	ldr	r4, [r6, #4]
 800640e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006410:	07d8      	lsls	r0, r3, #31
 8006412:	d405      	bmi.n	8006420 <_putc_r+0x2c>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	0599      	lsls	r1, r3, #22
 8006418:	d402      	bmi.n	8006420 <_putc_r+0x2c>
 800641a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641c:	f7fd f99d 	bl	800375a <__retarget_lock_acquire_recursive>
 8006420:	68a3      	ldr	r3, [r4, #8]
 8006422:	3b01      	subs	r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	60a3      	str	r3, [r4, #8]
 8006428:	da05      	bge.n	8006436 <_putc_r+0x42>
 800642a:	69a2      	ldr	r2, [r4, #24]
 800642c:	4293      	cmp	r3, r2
 800642e:	db1c      	blt.n	800646a <_putc_r+0x76>
 8006430:	b2eb      	uxtb	r3, r5
 8006432:	2b0a      	cmp	r3, #10
 8006434:	d019      	beq.n	800646a <_putc_r+0x76>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	701d      	strb	r5, [r3, #0]
 800643e:	b2ed      	uxtb	r5, r5
 8006440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d405      	bmi.n	8006452 <_putc_r+0x5e>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	d402      	bmi.n	8006452 <_putc_r+0x5e>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f7fd f985 	bl	800375c <__retarget_lock_release_recursive>
 8006452:	4628      	mov	r0, r5
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <_putc_r+0x88>)
 8006458:	429c      	cmp	r4, r3
 800645a:	d101      	bne.n	8006460 <_putc_r+0x6c>
 800645c:	68b4      	ldr	r4, [r6, #8]
 800645e:	e7d6      	b.n	800640e <_putc_r+0x1a>
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <_putc_r+0x8c>)
 8006462:	429c      	cmp	r4, r3
 8006464:	bf08      	it	eq
 8006466:	68f4      	ldreq	r4, [r6, #12]
 8006468:	e7d1      	b.n	800640e <_putc_r+0x1a>
 800646a:	4629      	mov	r1, r5
 800646c:	4622      	mov	r2, r4
 800646e:	4630      	mov	r0, r6
 8006470:	f7fe f970 	bl	8004754 <__swbuf_r>
 8006474:	4605      	mov	r5, r0
 8006476:	e7e3      	b.n	8006440 <_putc_r+0x4c>
 8006478:	08012808 	.word	0x08012808
 800647c:	08012828 	.word	0x08012828
 8006480:	080127e8 	.word	0x080127e8

08006484 <__ascii_wctomb>:
 8006484:	b149      	cbz	r1, 800649a <__ascii_wctomb+0x16>
 8006486:	2aff      	cmp	r2, #255	; 0xff
 8006488:	bf85      	ittet	hi
 800648a:	238a      	movhi	r3, #138	; 0x8a
 800648c:	6003      	strhi	r3, [r0, #0]
 800648e:	700a      	strbls	r2, [r1, #0]
 8006490:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006494:	bf98      	it	ls
 8006496:	2001      	movls	r0, #1
 8006498:	4770      	bx	lr
 800649a:	4608      	mov	r0, r1
 800649c:	4770      	bx	lr

0800649e <abort>:
 800649e:	b508      	push	{r3, lr}
 80064a0:	2006      	movs	r0, #6
 80064a2:	f000 f86b 	bl	800657c <raise>
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7fa fef3 	bl	8001292 <_exit>

080064ac <memmove>:
 80064ac:	4288      	cmp	r0, r1
 80064ae:	b510      	push	{r4, lr}
 80064b0:	eb01 0402 	add.w	r4, r1, r2
 80064b4:	d902      	bls.n	80064bc <memmove+0x10>
 80064b6:	4284      	cmp	r4, r0
 80064b8:	4623      	mov	r3, r4
 80064ba:	d807      	bhi.n	80064cc <memmove+0x20>
 80064bc:	1e43      	subs	r3, r0, #1
 80064be:	42a1      	cmp	r1, r4
 80064c0:	d008      	beq.n	80064d4 <memmove+0x28>
 80064c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ca:	e7f8      	b.n	80064be <memmove+0x12>
 80064cc:	4402      	add	r2, r0
 80064ce:	4601      	mov	r1, r0
 80064d0:	428a      	cmp	r2, r1
 80064d2:	d100      	bne.n	80064d6 <memmove+0x2a>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064de:	e7f7      	b.n	80064d0 <memmove+0x24>

080064e0 <_realloc_r>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	4607      	mov	r7, r0
 80064e4:	4614      	mov	r4, r2
 80064e6:	460e      	mov	r6, r1
 80064e8:	b921      	cbnz	r1, 80064f4 <_realloc_r+0x14>
 80064ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064ee:	4611      	mov	r1, r2
 80064f0:	f7fd b98a 	b.w	8003808 <_malloc_r>
 80064f4:	b922      	cbnz	r2, 8006500 <_realloc_r+0x20>
 80064f6:	f7fd f93b 	bl	8003770 <_free_r>
 80064fa:	4625      	mov	r5, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006500:	f000 f858 	bl	80065b4 <_malloc_usable_size_r>
 8006504:	42a0      	cmp	r0, r4
 8006506:	d20f      	bcs.n	8006528 <_realloc_r+0x48>
 8006508:	4621      	mov	r1, r4
 800650a:	4638      	mov	r0, r7
 800650c:	f7fd f97c 	bl	8003808 <_malloc_r>
 8006510:	4605      	mov	r5, r0
 8006512:	2800      	cmp	r0, #0
 8006514:	d0f2      	beq.n	80064fc <_realloc_r+0x1c>
 8006516:	4631      	mov	r1, r6
 8006518:	4622      	mov	r2, r4
 800651a:	f7ff f909 	bl	8005730 <memcpy>
 800651e:	4631      	mov	r1, r6
 8006520:	4638      	mov	r0, r7
 8006522:	f7fd f925 	bl	8003770 <_free_r>
 8006526:	e7e9      	b.n	80064fc <_realloc_r+0x1c>
 8006528:	4635      	mov	r5, r6
 800652a:	e7e7      	b.n	80064fc <_realloc_r+0x1c>

0800652c <_raise_r>:
 800652c:	291f      	cmp	r1, #31
 800652e:	b538      	push	{r3, r4, r5, lr}
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	d904      	bls.n	8006540 <_raise_r+0x14>
 8006536:	2316      	movs	r3, #22
 8006538:	6003      	str	r3, [r0, #0]
 800653a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006542:	b112      	cbz	r2, 800654a <_raise_r+0x1e>
 8006544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006548:	b94b      	cbnz	r3, 800655e <_raise_r+0x32>
 800654a:	4620      	mov	r0, r4
 800654c:	f000 f830 	bl	80065b0 <_getpid_r>
 8006550:	462a      	mov	r2, r5
 8006552:	4601      	mov	r1, r0
 8006554:	4620      	mov	r0, r4
 8006556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800655a:	f000 b817 	b.w	800658c <_kill_r>
 800655e:	2b01      	cmp	r3, #1
 8006560:	d00a      	beq.n	8006578 <_raise_r+0x4c>
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	d103      	bne.n	800656e <_raise_r+0x42>
 8006566:	2316      	movs	r3, #22
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	2001      	movs	r0, #1
 800656c:	e7e7      	b.n	800653e <_raise_r+0x12>
 800656e:	2400      	movs	r4, #0
 8006570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006574:	4628      	mov	r0, r5
 8006576:	4798      	blx	r3
 8006578:	2000      	movs	r0, #0
 800657a:	e7e0      	b.n	800653e <_raise_r+0x12>

0800657c <raise>:
 800657c:	4b02      	ldr	r3, [pc, #8]	; (8006588 <raise+0xc>)
 800657e:	4601      	mov	r1, r0
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	f7ff bfd3 	b.w	800652c <_raise_r>
 8006586:	bf00      	nop
 8006588:	200001b0 	.word	0x200001b0

0800658c <_kill_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	; (80065ac <_kill_r+0x20>)
 8006590:	2300      	movs	r3, #0
 8006592:	4604      	mov	r4, r0
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	f7fa fe77 	bl	800128c <_kill>
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d102      	bne.n	80065a8 <_kill_r+0x1c>
 80065a2:	682b      	ldr	r3, [r5, #0]
 80065a4:	b103      	cbz	r3, 80065a8 <_kill_r+0x1c>
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	bd38      	pop	{r3, r4, r5, pc}
 80065aa:	bf00      	nop
 80065ac:	20000d50 	.word	0x20000d50

080065b0 <_getpid_r>:
 80065b0:	f7fa be70 	b.w	8001294 <_getpid>

080065b4 <_malloc_usable_size_r>:
 80065b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b8:	1f18      	subs	r0, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bfbc      	itt	lt
 80065be:	580b      	ldrlt	r3, [r1, r0]
 80065c0:	18c0      	addlt	r0, r0, r3
 80065c2:	4770      	bx	lr

080065c4 <_init>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr

080065d0 <_fini>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr
