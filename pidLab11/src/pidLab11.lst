
pidLab11.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08007fd0 l    d  .rodata	00000000 .rodata
08014938 l    d  .ARM	00000000 .ARM
08014940 l    d  .init_array	00000000 .init_array
08014944 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001f8 l    d  .bss	00000000 .bss
20000cf4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
08003750 l       .text	00000000 LoopCopyDataInit
0800374a l       .text	00000000 CopyDataInit
08003762 l       .text	00000000 LoopFillZerobss
0800375e l       .text	00000000 FillZerobss
0800378c l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08007fb4 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001f8 l       .bss	00000001 completed.1
08014944 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001fc l       .bss	00000018 object.0
08014940 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000fa8 l     F .text	0000008c StopMotor
08001034 l     F .text	00000028 HAL_TIM_IC_CaptureCallback
0800105c l     F .text	0000004c TerminalRead
080010a8 l     F .text	0000007c Uncompress
08001124 l     F .text	0000005c HAL_NVIC_SetPriority
08001180 l     F .text	00000190 HAL_GPIO_Init
08001310 l     F .text	000002f8 HAL_TIM_IRQHandler
08001608 l     F .text	00000164 HAL_TIM_PWM_ConfigChannel
0800176c l     F .text	0000009c TIM_Base_SetConfig
08001808 l     F .text	00000064 HAL_TIMEx_MasterConfigSynchronization.constprop.0
0800186c l     F .text	00000074 HAL_TIM_Base_Init.constprop.0
080018e0 l     F .text	0000009e HAL_TIM_Encoder_Init.constprop.0
08001980 l     F .text	00000054 HAL_InitTick.isra.0
080019d4 l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
08001a9c l     F .text	0000001c GetEncoderValue
08001ab8 l     F .text	00000054 GetSpeed
08001b0c l     F .text	00000024 CmdEncoder2
08001b30 l     F .text	00000044 CmdTasks
08001b74 l     F .text	00000054 DecodeReadRegister
08001bc8 l     F .text	00000020 CmdVersion
08001be8 l     F .text	00000050 DecodeWriteRegister.isra.0
08001c38 l     F .text	0000002c CmdTest
08001c64 l     F .text	000003b8 LoopInit
0800201c l     F .text	000002dc EncoderInit
080022f8 l     F .text	00000030 fetch_string_arg
08002328 l     F .text	000000b8 DecodeRegister
080023e0 l     F .text	00000050 DecodePeripheral
08002430 l     F .text	00000060 DecodePrintRegisters
08002490 l     F .text	00000058 DecodePrintPeripherals.constprop.0
080024e8 l     F .text	00000204 TaskInput
080026ec l     F .text	0000003c fetch_uint32_arg
08002728 l     F .text	00000058 CmdLed
08002780 l     F .text	00000120 SetSpeed
080028a0 l     F .text	00000070 CmdR
08002910 l     F .text	0000001e CmdW
08002930 l     F .text	000000f8 CmdDump
08002a28 l     F .text	00000074 CmdSend
08002a9c l     F .text	00000060 CmdReceive
08002afc l     F .text	00000044 CmdTransparent
08002b40 l     F .text	00000284 CmdDecode
08002dc4 l     F .text	0000003c PolledPrintf
08002e00 l     F .text	00000068 CmdStats
20000214 l     O .bss	00000004 AccumTicks
20000218 l     O .bss	00000008 D
20000220 l     O .bss	00000008 I
20000228 l     O .bss	00000004 LedState.0
20000230 l     O .bss	00000008 P
20000238 l     O .bss	00000834 TerminalState
20000a6c l     O .bss	00000004 address.1
20000a70 l     O .bss	00000014 buf.0
20000a84 l     O .bss	00000004 cmdArgs
20000a88 l     O .bss	00000004 count
20000a8c l     O .bss	00000004 count.3
20000a90 l     O .bss	00000004 crReceived
20000a94 l     O .bss	00000004 encoderCurrent
20000a98 l     O .bss	00000004 encoderPrevious
20000aa0 l     O .bss	00000008 errorCurrent
20000aa8 l     O .bss	00000008 errorD
20000ab0 l     O .bss	00000008 errorI
20000ab8 l     O .bss	00000004 heap_end.0
20000abc l     O .bss	0000000c hiwdg
20000ac8 l     O .bss	00000048 htim2
20000b10 l     O .bss	00000048 htim3
20000b58 l     O .bss	00000044 huart2
20000b9c l     O .bss	00000050 input
20000bec l     O .bss	00000050 input_b
20000c3c l     O .bss	00000004 pwmStatus
20000c40 l     O .bss	00000004 saved.1
20000c48 l     O .bss	00000008 targetRPM
20000c50 l     O .bss	00000048 tim1
20000c98 l     O .bss	00000048 tim3
20000ce0 l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000002 currentPWM
20000014 l     O .data	00000004 direction
20000018 l     O .data	00000004 printPrompt.4
2000001c l     O .data	00000004 uwTickPrio
0800bc50 l     O .rodata	00000070 ADC1_CR1_fields
0800bcc0 l     O .rodata	00000060 ADC1_CR2_fields
0800bd20 l     O .rodata	00000008 ADC1_DR_fields
0800bd28 l     O .rodata	00000008 ADC1_HTR_fields
0800bd30 l     O .rodata	00000008 ADC1_JDR1_fields
0800bd38 l     O .rodata	00000008 ADC1_JDR2_fields
0800bd40 l     O .rodata	00000008 ADC1_JDR3_fields
0800bd48 l     O .rodata	00000008 ADC1_JDR4_fields
0800bd50 l     O .rodata	00000008 ADC1_JOFR1_fields
0800bd58 l     O .rodata	00000008 ADC1_JOFR2_fields
0800bd60 l     O .rodata	00000008 ADC1_JOFR3_fields
0800bd68 l     O .rodata	00000008 ADC1_JOFR4_fields
0800bd70 l     O .rodata	00000028 ADC1_JSQR_fields
0800bd98 l     O .rodata	00000008 ADC1_LTR_fields
0800bda0 l     O .rodata	00000008 ADC1_SMPR1_fields
0800bda8 l     O .rodata	00000008 ADC1_SMPR2_fields
0800bdb0 l     O .rodata	00000028 ADC1_SQR1_fields
0800bdd8 l     O .rodata	00000030 ADC1_SQR2_fields
0800be08 l     O .rodata	00000030 ADC1_SQR3_fields
0800be38 l     O .rodata	00000030 ADC1_SR_fields
0800be68 l     O .rodata	00000140 ADC1_registers
0800bfa8 l     O .rodata	00000030 ADC_Common_CCR_fields
0800bfd8 l     O .rodata	00000090 ADC_Common_CSR_fields
0800c068 l     O .rodata	00000020 ADC_Common_registers
0800c088 l     O .rodata	00000010 AHBPrescTable
0800c098 l     O .rodata	00000008 APBPrescTable
0800c0a0 l     O .rodata	00000008 CRC_CR_fields
0800c0a8 l     O .rodata	00000008 CRC_DR_fields
0800c0b0 l     O .rodata	00000008 CRC_IDR_fields
0800c0b8 l     O .rodata	00000030 CRC_registers
0800c0e8 l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
0800c138 l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800c158 l     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800c180 l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
0800c190 l     O .rodata	00000040 DBG_registers
0800c1d0 l     O .rodata	000000a0 DMA2_HIFCR_fields
0800c270 l     O .rodata	000000a0 DMA2_HISR_fields
0800c310 l     O .rodata	000000a0 DMA2_LIFCR_fields
0800c3b0 l     O .rodata	000000a0 DMA2_LISR_fields
0800c450 l     O .rodata	00000098 DMA2_S0CR_fields
0800c4e8 l     O .rodata	00000020 DMA2_S0FCR_fields
0800c508 l     O .rodata	00000008 DMA2_S0M0AR_fields
0800c510 l     O .rodata	00000008 DMA2_S0M1AR_fields
0800c518 l     O .rodata	00000008 DMA2_S0NDTR_fields
0800c520 l     O .rodata	00000008 DMA2_S0PAR_fields
0800c528 l     O .rodata	000000a0 DMA2_S1CR_fields
0800c5c8 l     O .rodata	00000020 DMA2_S1FCR_fields
0800c5e8 l     O .rodata	00000008 DMA2_S1M0AR_fields
0800c5f0 l     O .rodata	00000008 DMA2_S1M1AR_fields
0800c5f8 l     O .rodata	00000008 DMA2_S1NDTR_fields
0800c600 l     O .rodata	00000008 DMA2_S1PAR_fields
0800c608 l     O .rodata	000000a0 DMA2_S2CR_fields
0800c6a8 l     O .rodata	00000020 DMA2_S2FCR_fields
0800c6c8 l     O .rodata	00000008 DMA2_S2M0AR_fields
0800c6d0 l     O .rodata	00000008 DMA2_S2M1AR_fields
0800c6d8 l     O .rodata	00000008 DMA2_S2NDTR_fields
0800c6e0 l     O .rodata	00000008 DMA2_S2PAR_fields
0800c6e8 l     O .rodata	000000a0 DMA2_S3CR_fields
0800c788 l     O .rodata	00000020 DMA2_S3FCR_fields
0800c7a8 l     O .rodata	00000008 DMA2_S3M0AR_fields
0800c7b0 l     O .rodata	00000008 DMA2_S3M1AR_fields
0800c7b8 l     O .rodata	00000008 DMA2_S3NDTR_fields
0800c7c0 l     O .rodata	00000008 DMA2_S3PAR_fields
0800c7c8 l     O .rodata	000000a0 DMA2_S4CR_fields
0800c868 l     O .rodata	00000020 DMA2_S4FCR_fields
0800c888 l     O .rodata	00000008 DMA2_S4M0AR_fields
0800c890 l     O .rodata	00000008 DMA2_S4M1AR_fields
0800c898 l     O .rodata	00000008 DMA2_S4NDTR_fields
0800c8a0 l     O .rodata	00000008 DMA2_S4PAR_fields
0800c8a8 l     O .rodata	000000a0 DMA2_S5CR_fields
0800c948 l     O .rodata	00000020 DMA2_S5FCR_fields
0800c968 l     O .rodata	00000008 DMA2_S5M0AR_fields
0800c970 l     O .rodata	00000008 DMA2_S5M1AR_fields
0800c978 l     O .rodata	00000008 DMA2_S5NDTR_fields
0800c980 l     O .rodata	00000008 DMA2_S5PAR_fields
0800c988 l     O .rodata	000000a0 DMA2_S6CR_fields
0800ca28 l     O .rodata	00000020 DMA2_S6FCR_fields
0800ca48 l     O .rodata	00000008 DMA2_S6M0AR_fields
0800ca50 l     O .rodata	00000008 DMA2_S6M1AR_fields
0800ca58 l     O .rodata	00000008 DMA2_S6NDTR_fields
0800ca60 l     O .rodata	00000008 DMA2_S6PAR_fields
0800ca68 l     O .rodata	000000a0 DMA2_S7CR_fields
0800cb08 l     O .rodata	00000020 DMA2_S7FCR_fields
0800cb28 l     O .rodata	00000008 DMA2_S7M0AR_fields
0800cb30 l     O .rodata	00000008 DMA2_S7M1AR_fields
0800cb38 l     O .rodata	00000008 DMA2_S7NDTR_fields
0800cb40 l     O .rodata	00000008 DMA2_S7PAR_fields
0800cb48 l     O .rodata	00000340 DMA2_registers
0800ce88 l     O .rodata	000000b8 EXTI_EMR_fields
0800cf40 l     O .rodata	000000b8 EXTI_FTSR_fields
0800cff8 l     O .rodata	000000b8 EXTI_IMR_fields
0800d0b0 l     O .rodata	000000b8 EXTI_PR_fields
0800d168 l     O .rodata	000000b8 EXTI_RTSR_fields
0800d220 l     O .rodata	000000b8 EXTI_SWIER_fields
0800d2d8 l     O .rodata	00000060 EXTI_registers
0800d338 l     O .rodata	00000030 FLASH_ACR_fields
0800d368 l     O .rodata	00000048 FLASH_CR_fields
0800d3b0 l     O .rodata	00000008 FLASH_KEYR_fields
0800d3b8 l     O .rodata	00000040 FLASH_OPTCR_fields
0800d3f8 l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800d400 l     O .rodata	00000038 FLASH_SR_fields
0800d438 l     O .rodata	00000060 FLASH_registers
0800d498 l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800d4a0 l     O .rodata	00000010 FPU_CPACR_registers
0800d4b0 l     O .rodata	00000008 FPU_FPCAR_fields
0800d4b8 l     O .rodata	00000048 FPU_FPCCR_fields
0800d500 l     O .rodata	00000070 FPU_FPSCR_fields
0800d570 l     O .rodata	00000030 FPU_registers
0800d5a0 l     O .rodata	00000040 GPIOA_AFRH_fields
0800d5e0 l     O .rodata	00000040 GPIOA_AFRL_fields
0800d620 l     O .rodata	00000100 GPIOA_BSRR_fields
0800d720 l     O .rodata	00000080 GPIOA_IDR_fields
0800d7a0 l     O .rodata	00000088 GPIOA_LCKR_fields
0800d828 l     O .rodata	00000080 GPIOA_MODER_fields
0800d8a8 l     O .rodata	00000080 GPIOA_ODR_fields
0800d928 l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800d9a8 l     O .rodata	00000080 GPIOA_OTYPER_fields
0800da28 l     O .rodata	00000080 GPIOA_PUPDR_fields
0800daa8 l     O .rodata	000000a0 GPIOA_registers
0800db48 l     O .rodata	00000040 GPIOB_AFRH_fields
0800db88 l     O .rodata	00000040 GPIOB_AFRL_fields
0800dbc8 l     O .rodata	00000100 GPIOB_BSRR_fields
0800dcc8 l     O .rodata	00000080 GPIOB_IDR_fields
0800dd48 l     O .rodata	00000088 GPIOB_LCKR_fields
0800ddd0 l     O .rodata	00000080 GPIOB_MODER_fields
0800de50 l     O .rodata	00000080 GPIOB_ODR_fields
0800ded0 l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800df50 l     O .rodata	00000080 GPIOB_OTYPER_fields
0800dfd0 l     O .rodata	00000080 GPIOB_PUPDR_fields
0800e050 l     O .rodata	000000a0 GPIOB_registers
0800e0f0 l     O .rodata	00000040 GPIOH_AFRH_fields
0800e130 l     O .rodata	00000040 GPIOH_AFRL_fields
0800e170 l     O .rodata	00000100 GPIOH_BSRR_fields
0800e270 l     O .rodata	00000080 GPIOH_IDR_fields
0800e2f0 l     O .rodata	00000088 GPIOH_LCKR_fields
0800e378 l     O .rodata	00000080 GPIOH_MODER_fields
0800e3f8 l     O .rodata	00000080 GPIOH_ODR_fields
0800e478 l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800e4f8 l     O .rodata	00000080 GPIOH_OTYPER_fields
0800e578 l     O .rodata	00000080 GPIOH_PUPDR_fields
0800e5f8 l     O .rodata	000000a0 GPIOH_registers
0800e698 l     O .rodata	00000018 I2C3_CCR_fields
0800e6b0 l     O .rodata	00000070 I2C3_CR1_fields
0800e720 l     O .rodata	00000030 I2C3_CR2_fields
0800e750 l     O .rodata	00000008 I2C3_DR_fields
0800e758 l     O .rodata	00000020 I2C3_OAR1_fields
0800e778 l     O .rodata	00000010 I2C3_OAR2_fields
0800e788 l     O .rodata	00000070 I2C3_SR1_fields
0800e7f8 l     O .rodata	00000040 I2C3_SR2_fields
0800e838 l     O .rodata	00000008 I2C3_TRISE_fields
0800e840 l     O .rodata	00000090 I2C3_registers
0800e8d0 l     O .rodata	00000070 I2S2ext_CR1_fields
0800e940 l     O .rodata	00000038 I2S2ext_CR2_fields
0800e978 l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800e980 l     O .rodata	00000008 I2S2ext_DR_fields
0800e988 l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800e9c8 l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800e9e0 l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800e9e8 l     O .rodata	00000048 I2S2ext_SR_fields
0800ea30 l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800ea38 l     O .rodata	00000090 I2S2ext_registers
0800eac8 l     O .rodata	00000008 IWDG_KR_fields
0800ead0 l     O .rodata	00000008 IWDG_PR_fields
0800ead8 l     O .rodata	00000008 IWDG_RLR_fields
0800eae0 l     O .rodata	00000010 IWDG_SR_fields
0800eaf0 l     O .rodata	00000040 IWDG_registers
0800eb30 l     O .rodata	00000194 InterruptNames
0800ecc4 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800ecdc l     O .rodata	00000048 MPU_MPU_RASR_fields
0800ed24 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800ed3c l     O .rodata	00000008 MPU_MPU_RNR_fields
0800ed44 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800ed5c l     O .rodata	00000050 MPU_registers
0800edac l     O .rodata	00000008 NVIC_IABR0_fields
0800edb4 l     O .rodata	00000008 NVIC_IABR1_fields
0800edbc l     O .rodata	00000008 NVIC_IABR2_fields
0800edc4 l     O .rodata	00000008 NVIC_ICER0_fields
0800edcc l     O .rodata	00000008 NVIC_ICER1_fields
0800edd4 l     O .rodata	00000008 NVIC_ICER2_fields
0800eddc l     O .rodata	00000008 NVIC_ICPR0_fields
0800ede4 l     O .rodata	00000008 NVIC_ICPR1_fields
0800edec l     O .rodata	00000008 NVIC_ICPR2_fields
0800edf4 l     O .rodata	00000020 NVIC_IPR0_fields
0800ee14 l     O .rodata	00000020 NVIC_IPR10_fields
0800ee34 l     O .rodata	00000020 NVIC_IPR11_fields
0800ee54 l     O .rodata	00000020 NVIC_IPR12_fields
0800ee74 l     O .rodata	00000020 NVIC_IPR13_fields
0800ee94 l     O .rodata	00000020 NVIC_IPR14_fields
0800eeb4 l     O .rodata	00000020 NVIC_IPR15_fields
0800eed4 l     O .rodata	00000020 NVIC_IPR16_fields
0800eef4 l     O .rodata	00000020 NVIC_IPR17_fields
0800ef14 l     O .rodata	00000020 NVIC_IPR18_fields
0800ef34 l     O .rodata	00000020 NVIC_IPR19_fields
0800ef54 l     O .rodata	00000020 NVIC_IPR1_fields
0800ef74 l     O .rodata	00000020 NVIC_IPR2_fields
0800ef94 l     O .rodata	00000020 NVIC_IPR3_fields
0800efb4 l     O .rodata	00000020 NVIC_IPR4_fields
0800efd4 l     O .rodata	00000020 NVIC_IPR5_fields
0800eff4 l     O .rodata	00000020 NVIC_IPR6_fields
0800f014 l     O .rodata	00000020 NVIC_IPR7_fields
0800f034 l     O .rodata	00000020 NVIC_IPR8_fields
0800f054 l     O .rodata	00000020 NVIC_IPR9_fields
0800f074 l     O .rodata	00000008 NVIC_ISER0_fields
0800f07c l     O .rodata	00000008 NVIC_ISER1_fields
0800f084 l     O .rodata	00000008 NVIC_ISER2_fields
0800f08c l     O .rodata	00000008 NVIC_ISPR0_fields
0800f094 l     O .rodata	00000008 NVIC_ISPR1_fields
0800f09c l     O .rodata	00000008 NVIC_ISPR2_fields
0800f0a4 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800f0ac l     O .rodata	00000010 NVIC_STIR_registers
0800f0bc l     O .rodata	00000230 NVIC_registers
0800f2ec l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800f354 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800f3bc l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800f424 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800f42c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800f45c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800f48c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800f4bc l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800f4ec l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800f4fc l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800f514 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800f52c l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800f544 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800f594 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800f5fc l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800f664 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800f6cc l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800f6f4 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800f71c l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800f744 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800f76c l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800f784 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800f79c l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800f7b4 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800f7cc l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800f7d4 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800f7dc l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800f7e4 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800f7ec l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800f7f4 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800f7fc l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800f80c l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800f81c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800f83c l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800f88c l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800f8dc l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800f90c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800f92c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800f94c l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800fbac l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800fbb4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800fbc4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800fbd4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800fbe4 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800fbfc l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800fc1c l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800fce4 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800fdac l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800fdbc l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800fdcc l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800fde4 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800fe34 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800fe64 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800fe9c l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800fea4 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800fecc l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800fef4 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800ff34 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800ff44 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
08010074 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
080100c4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
08010114 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
08010164 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
080101b4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
08010204 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
08010254 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
080102a4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
080102f4 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
08010304 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0801034c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
08010394 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
080103dc l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
08010424 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0801046c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
080104b4 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
080104fc l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
08010544 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
08010594 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
080105e4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
08010634 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
08010684 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
080106d4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
08010724 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
08010774 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
080107c4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
080107dc l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
080107f4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0801080c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
08010824 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0801083c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
08010854 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
0801086c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
08010884 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
08010894 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
080108fc l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
08010914 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0801091c l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
08010924 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
0801092c l     O .rodata	00000270 OTG_FS_HOST_registers
08010b9c l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
08010bb4 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
08010bc4 l     O .rodata	00000050 PWR_CR_fields
08010c14 l     O .rodata	00000038 PWR_CSR_fields
08010c4c l     O .rodata	00000020 PWR_registers
08010c6c l     O .rodata	00000380 Peripherals
08013304 l     O .rodata	00000150 TIM2_registers
080137a4 l     O .rodata	00000140 TIM3_registers
08013c3c l     O .rodata	00000150 TIM5_registers
08011b8c l     O .rodata	00000270 RTC_registers
08014264 l     O .rodata	00000030 WWDG_registers
0801419c l     O .rodata	00000070 USART1_registers
08012e4c l     O .rodata	00000160 TIM1_registers
08012484 l     O .rodata	00000120 SDIO_registers
080126cc l     O .rodata	00000070 SYSCFG_registers
08013f14 l     O .rodata	000000e0 TIM9_registers
0801280c l     O .rodata	000000b0 TIM10_registers
08012994 l     O .rodata	000000c0 TIM11_registers
080115dc l     O .rodata	00000140 RCC_registers
08011e24 l     O .rodata	00000010 SCB_ACTRL_registers
080125ec l     O .rodata	00000040 STK_registers
08012084 l     O .rodata	000000f0 SCB_registers
08010fec l     O .rodata	00000048 RCC_AHB1ENR_fields
08011034 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0801108c l     O .rodata	00000048 RCC_AHB1RSTR_fields
080110d4 l     O .rodata	00000008 RCC_AHB2ENR_fields
080110dc l     O .rodata	00000008 RCC_AHB2LPENR_fields
080110e4 l     O .rodata	00000008 RCC_AHB2RSTR_fields
080110ec l     O .rodata	00000060 RCC_APB1ENR_fields
0801114c l     O .rodata	00000060 RCC_APB1LPENR_fields
080111ac l     O .rodata	00000060 RCC_APB1RSTR_fields
0801120c l     O .rodata	00000058 RCC_APB2ENR_fields
08011264 l     O .rodata	00000058 RCC_APB2LPENR_fields
080112bc l     O .rodata	00000050 RCC_APB2RSTR_fields
0801130c l     O .rodata	00000038 RCC_BDCR_fields
08011344 l     O .rodata	00000068 RCC_CFGR_fields
080113ac l     O .rodata	000000a0 RCC_CIR_fields
0801144c l     O .rodata	00000060 RCC_CR_fields
080114ac l     O .rodata	00000050 RCC_CSR_fields
080114fc l     O .rodata	000000b0 RCC_PLLCFGR_fields
080115ac l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
080115bc l     O .rodata	00000020 RCC_SSCGR_fields
0801171c l     O .rodata	00000070 RTC_ALRMAR_fields
0801178c l     O .rodata	00000010 RTC_ALRMASSR_fields
0801179c l     O .rodata	00000070 RTC_ALRMBR_fields
0801180c l     O .rodata	00000010 RTC_ALRMBSSR_fields
0801181c l     O .rodata	00000008 RTC_BKP0R_fields
08011824 l     O .rodata	00000008 RTC_BKP10R_fields
0801182c l     O .rodata	00000008 RTC_BKP11R_fields
08011834 l     O .rodata	00000008 RTC_BKP12R_fields
0801183c l     O .rodata	00000008 RTC_BKP13R_fields
08011844 l     O .rodata	00000008 RTC_BKP14R_fields
0801184c l     O .rodata	00000008 RTC_BKP15R_fields
08011854 l     O .rodata	00000008 RTC_BKP16R_fields
0801185c l     O .rodata	00000008 RTC_BKP17R_fields
08011864 l     O .rodata	00000008 RTC_BKP18R_fields
0801186c l     O .rodata	00000008 RTC_BKP19R_fields
08011874 l     O .rodata	00000008 RTC_BKP1R_fields
0801187c l     O .rodata	00000008 RTC_BKP2R_fields
08011884 l     O .rodata	00000008 RTC_BKP3R_fields
0801188c l     O .rodata	00000008 RTC_BKP4R_fields
08011894 l     O .rodata	00000008 RTC_BKP5R_fields
0801189c l     O .rodata	00000008 RTC_BKP6R_fields
080118a4 l     O .rodata	00000008 RTC_BKP7R_fields
080118ac l     O .rodata	00000008 RTC_BKP8R_fields
080118b4 l     O .rodata	00000008 RTC_BKP9R_fields
080118bc l     O .rodata	00000010 RTC_CALIBR_fields
080118cc l     O .rodata	00000020 RTC_CALR_fields
080118ec l     O .rodata	000000a8 RTC_CR_fields
08011994 l     O .rodata	00000038 RTC_DR_fields
080119cc l     O .rodata	00000080 RTC_ISR_fields
08011a4c l     O .rodata	00000010 RTC_PRER_fields
08011a5c l     O .rodata	00000010 RTC_SHIFTR_fields
08011a6c l     O .rodata	00000008 RTC_SSR_fields
08011a74 l     O .rodata	00000068 RTC_TAFCR_fields
08011adc l     O .rodata	00000038 RTC_TR_fields
08011b14 l     O .rodata	00000028 RTC_TSDR_fields
08011b3c l     O .rodata	00000008 RTC_TSSSR_fields
08011b44 l     O .rodata	00000038 RTC_TSTR_fields
08011b7c l     O .rodata	00000008 RTC_WPR_fields
08011b84 l     O .rodata	00000008 RTC_WUTR_fields
08011dfc l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
08011e34 l     O .rodata	00000008 SCB_AFSR_fields
08011e3c l     O .rodata	00000030 SCB_AIRCR_fields
08011e6c l     O .rodata	00000008 SCB_BFAR_fields
08011e74 l     O .rodata	00000030 SCB_CCR_fields
08011ea4 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
08011f34 l     O .rodata	00000028 SCB_CPUID_fields
08011f5c l     O .rodata	00000018 SCB_HFSR_fields
08011f74 l     O .rodata	00000048 SCB_ICSR_fields
08011fbc l     O .rodata	00000008 SCB_MMFAR_fields
08011fc4 l     O .rodata	00000018 SCB_SCR_fields
08011fdc l     O .rodata	00000070 SCB_SHCRS_fields
0801204c l     O .rodata	00000018 SCB_SHPR1_fields
08012064 l     O .rodata	00000008 SCB_SHPR2_fields
0801206c l     O .rodata	00000010 SCB_SHPR3_fields
0801207c l     O .rodata	00000008 SCB_VTOR_fields
08012174 l     O .rodata	00000008 SDIO_ARG_fields
0801217c l     O .rodata	00000038 SDIO_CLKCR_fields
080121b4 l     O .rodata	00000048 SDIO_CMD_fields
080121fc l     O .rodata	00000008 SDIO_DCOUNT_fields
08012204 l     O .rodata	00000048 SDIO_DCTRL_fields
0801224c l     O .rodata	00000008 SDIO_DLEN_fields
08012254 l     O .rodata	00000008 SDIO_DTIMER_fields
0801225c l     O .rodata	00000008 SDIO_FIFOCNT_fields
08012264 l     O .rodata	00000008 SDIO_FIFO_fields
0801226c l     O .rodata	00000068 SDIO_ICR_fields
080122d4 l     O .rodata	000000c0 SDIO_MASK_fields
08012394 l     O .rodata	00000008 SDIO_POWER_fields
0801239c l     O .rodata	00000008 SDIO_RESP1_fields
080123a4 l     O .rodata	00000008 SDIO_RESP2_fields
080123ac l     O .rodata	00000008 SDIO_RESP3_fields
080123b4 l     O .rodata	00000008 SDIO_RESP4_fields
080123bc l     O .rodata	00000008 SDIO_RESPCMD_fields
080123c4 l     O .rodata	000000c0 SDIO_STA_fields
080125a4 l     O .rodata	00000018 STK_CALIB_fields
080125bc l     O .rodata	00000020 STK_CTRL_fields
080125dc l     O .rodata	00000008 STK_LOAD_fields
080125e4 l     O .rodata	00000008 STK_VAL_fields
0801262c l     O .rodata	00000010 SYSCFG_CMPCR_fields
0801263c l     O .rodata	00000020 SYSCFG_EXTICR1_fields
0801265c l     O .rodata	00000020 SYSCFG_EXTICR2_fields
0801267c l     O .rodata	00000020 SYSCFG_EXTICR3_fields
0801269c l     O .rodata	00000020 SYSCFG_EXTICR4_fields
080126bc l     O .rodata	00000008 SYSCFG_MEMRM_fields
080126c4 l     O .rodata	00000008 SYSCFG_PMC_fields
0801273c l     O .rodata	00000008 TIM10_ARR_fields
08012744 l     O .rodata	00000018 TIM10_CCER_fields
0801275c l     O .rodata	00000018 TIM10_CCMR1_Input_fields
08012774 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
08012794 l     O .rodata	00000008 TIM10_CCR1_fields
0801279c l     O .rodata	00000008 TIM10_CNT_fields
080127a4 l     O .rodata	00000028 TIM10_CR1_fields
080127cc l     O .rodata	00000010 TIM10_DIER_fields
080127dc l     O .rodata	00000010 TIM10_EGR_fields
080127ec l     O .rodata	00000008 TIM10_PSC_fields
080127f4 l     O .rodata	00000018 TIM10_SR_fields
080128bc l     O .rodata	00000008 TIM11_ARR_fields
080128c4 l     O .rodata	00000018 TIM11_CCER_fields
080128dc l     O .rodata	00000018 TIM11_CCMR1_Input_fields
080128f4 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
08012914 l     O .rodata	00000008 TIM11_CCR1_fields
0801291c l     O .rodata	00000008 TIM11_CNT_fields
08012924 l     O .rodata	00000028 TIM11_CR1_fields
0801294c l     O .rodata	00000010 TIM11_DIER_fields
0801295c l     O .rodata	00000010 TIM11_EGR_fields
0801296c l     O .rodata	00000008 TIM11_OR_fields
08012974 l     O .rodata	00000008 TIM11_PSC_fields
0801297c l     O .rodata	00000018 TIM11_SR_fields
08012a54 l     O .rodata	00000008 TIM1_ARR_fields
08012a5c l     O .rodata	00000040 TIM1_BDTR_fields
08012a9c l     O .rodata	00000070 TIM1_CCER_fields
08012b0c l     O .rodata	00000030 TIM1_CCMR1_Input_fields
08012b3c l     O .rodata	00000050 TIM1_CCMR1_Output_fields
08012b8c l     O .rodata	00000030 TIM1_CCMR2_Input_fields
08012bbc l     O .rodata	00000050 TIM1_CCMR2_Output_fields
08012c0c l     O .rodata	00000008 TIM1_CCR1_fields
08012c14 l     O .rodata	00000008 TIM1_CCR2_fields
08012c1c l     O .rodata	00000008 TIM1_CCR3_fields
08012c24 l     O .rodata	00000008 TIM1_CCR4_fields
08012c2c l     O .rodata	00000008 TIM1_CNT_fields
08012c34 l     O .rodata	00000040 TIM1_CR1_fields
08012c74 l     O .rodata	00000060 TIM1_CR2_fields
08012cd4 l     O .rodata	00000010 TIM1_DCR_fields
08012ce4 l     O .rodata	00000078 TIM1_DIER_fields
08012d5c l     O .rodata	00000008 TIM1_DMAR_fields
08012d64 l     O .rodata	00000040 TIM1_EGR_fields
08012da4 l     O .rodata	00000008 TIM1_PSC_fields
08012dac l     O .rodata	00000008 TIM1_RCR_fields
08012db4 l     O .rodata	00000038 TIM1_SMCR_fields
08012dec l     O .rodata	00000060 TIM1_SR_fields
08012fac l     O .rodata	00000010 TIM2_ARR_fields
08012fbc l     O .rodata	00000060 TIM2_CCER_fields
0801301c l     O .rodata	00000030 TIM2_CCMR1_Input_fields
0801304c l     O .rodata	00000050 TIM2_CCMR1_Output_fields
0801309c l     O .rodata	00000030 TIM2_CCMR2_Input_fields
080130cc l     O .rodata	00000050 TIM2_CCMR2_Output_fields
0801311c l     O .rodata	00000010 TIM2_CCR1_fields
0801312c l     O .rodata	00000010 TIM2_CCR2_fields
0801313c l     O .rodata	00000010 TIM2_CCR3_fields
0801314c l     O .rodata	00000010 TIM2_CCR4_fields
0801315c l     O .rodata	00000010 TIM2_CNT_fields
0801316c l     O .rodata	00000040 TIM2_CR1_fields
080131ac l     O .rodata	00000018 TIM2_CR2_fields
080131c4 l     O .rodata	00000010 TIM2_DCR_fields
080131d4 l     O .rodata	00000060 TIM2_DIER_fields
08013234 l     O .rodata	00000008 TIM2_DMAR_fields
0801323c l     O .rodata	00000030 TIM2_EGR_fields
0801326c l     O .rodata	00000008 TIM2_OR_fields
08013274 l     O .rodata	00000008 TIM2_PSC_fields
0801327c l     O .rodata	00000038 TIM2_SMCR_fields
080132b4 l     O .rodata	00000050 TIM2_SR_fields
08013454 l     O .rodata	00000010 TIM3_ARR_fields
08013464 l     O .rodata	00000060 TIM3_CCER_fields
080134c4 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
080134f4 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
08013544 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
08013574 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
080135c4 l     O .rodata	00000010 TIM3_CCR1_fields
080135d4 l     O .rodata	00000010 TIM3_CCR2_fields
080135e4 l     O .rodata	00000010 TIM3_CCR3_fields
080135f4 l     O .rodata	00000010 TIM3_CCR4_fields
08013604 l     O .rodata	00000010 TIM3_CNT_fields
08013614 l     O .rodata	00000040 TIM3_CR1_fields
08013654 l     O .rodata	00000018 TIM3_CR2_fields
0801366c l     O .rodata	00000010 TIM3_DCR_fields
0801367c l     O .rodata	00000060 TIM3_DIER_fields
080136dc l     O .rodata	00000008 TIM3_DMAR_fields
080136e4 l     O .rodata	00000030 TIM3_EGR_fields
08013714 l     O .rodata	00000008 TIM3_PSC_fields
0801371c l     O .rodata	00000038 TIM3_SMCR_fields
08013754 l     O .rodata	00000050 TIM3_SR_fields
080138e4 l     O .rodata	00000010 TIM5_ARR_fields
080138f4 l     O .rodata	00000060 TIM5_CCER_fields
08013954 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
08013984 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
080139d4 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
08013a04 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
08013a54 l     O .rodata	00000010 TIM5_CCR1_fields
08013a64 l     O .rodata	00000010 TIM5_CCR2_fields
08013a74 l     O .rodata	00000010 TIM5_CCR3_fields
08013a84 l     O .rodata	00000010 TIM5_CCR4_fields
08013a94 l     O .rodata	00000010 TIM5_CNT_fields
08013aa4 l     O .rodata	00000040 TIM5_CR1_fields
08013ae4 l     O .rodata	00000018 TIM5_CR2_fields
08013afc l     O .rodata	00000010 TIM5_DCR_fields
08013b0c l     O .rodata	00000060 TIM5_DIER_fields
08013b6c l     O .rodata	00000008 TIM5_DMAR_fields
08013b74 l     O .rodata	00000030 TIM5_EGR_fields
08013ba4 l     O .rodata	00000008 TIM5_OR_fields
08013bac l     O .rodata	00000008 TIM5_PSC_fields
08013bb4 l     O .rodata	00000038 TIM5_SMCR_fields
08013bec l     O .rodata	00000050 TIM5_SR_fields
08013d8c l     O .rodata	00000008 TIM9_ARR_fields
08013d94 l     O .rodata	00000030 TIM9_CCER_fields
08013dc4 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
08013df4 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
08013e34 l     O .rodata	00000008 TIM9_CCR1_fields
08013e3c l     O .rodata	00000008 TIM9_CCR2_fields
08013e44 l     O .rodata	00000008 TIM9_CNT_fields
08013e4c l     O .rodata	00000030 TIM9_CR1_fields
08013e7c l     O .rodata	00000008 TIM9_CR2_fields
08013e84 l     O .rodata	00000020 TIM9_DIER_fields
08013ea4 l     O .rodata	00000020 TIM9_EGR_fields
08013ec4 l     O .rodata	00000008 TIM9_PSC_fields
08013ecc l     O .rodata	00000018 TIM9_SMCR_fields
08013ee4 l     O .rodata	00000030 TIM9_SR_fields
08013ff4 l     O .rodata	00000010 TerminalInfo
08014004 l     O .rodata	00000010 USART1_BRR_fields
08014014 l     O .rodata	00000078 USART1_CR1_fields
0801408c l     O .rodata	00000048 USART1_CR2_fields
080140d4 l     O .rodata	00000060 USART1_CR3_fields
08014134 l     O .rodata	00000008 USART1_DR_fields
0801413c l     O .rodata	00000010 USART1_GTPR_fields
0801414c l     O .rodata	00000050 USART1_SR_fields
0801420c l     O .rodata	00000019 VersionBuildDateString
08014225 l     O .rodata	00000006 VersionBuildUser
0801422c l     O .rodata	00000020 WWDG_CFR_fields
0801424c l     O .rodata	00000010 WWDG_CR_fields
0801425c l     O .rodata	00000008 WWDG_SR_fields
08014294 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
0801429a l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtod.c
08004258 l     F .text	00000038 sulp
080143e8 l     O .rodata	00000014 fpi.1
080143fc l     O .rodata	00000014 fpinan.0
08014410 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08004f6c l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
080050a0 l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005f18 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
08006126 l     F .text	000000a4 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
08006680 l     F .text	00000024 L_shift
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08014810 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08007418 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000024 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 lnumeric.c
20000084 l     O .data	00000002 numempty
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00005cd2 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00005f2b l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
000060aa l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00007172 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
000080ce l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
0000a36f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
0000afc6 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
0000b18f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
0000b784 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
0000ba1c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
0000ca93 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
0000ce4c l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
0000d13d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
0000d409 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
0000d97d l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
0000e50f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
0000e5bb l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
0000f3be l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
0000f8c5 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00010110 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00010883 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
000113b0 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
000129a4 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00013076 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00013225 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
000154a7 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
0001661e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08014944 l       .init_array	00000000 __init_array_end
08014940 l       .init_array	00000000 __preinit_array_end
08014940 l       .init_array	00000000 __init_array_start
08014940 l       .init_array	00000000 __preinit_array_start
0800378c  w    F .text	00000006 RTC_Alarm_IRQHandler
08007a5c g     F .text	00000010 _malloc_usable_size_r
080037f8 g     F .text	000000c4 __cvt
0800378c  w    F .text	00000006 EXTI2_IRQHandler
08007a9c g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
0800726c g     F .text	00000042 __any_on
08002ed2 g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
08007be8 g     F .text	00000010 strcpy
08002f2c g     F .text	00000004 _getpid
08007ac8 g     F .text	000000dc _puts_r
08000a7c g     F .text	0000007a .hidden __cmpdf2
08002ed6 g     F .text	00000004 _lseek_r
08003704 g     F .text	00000002 DebugMon_Handler
08014848 g     O .rodata	0000000c CmdTestE
0800378c  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
00010883  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.cd8737a5
080005ec g     F .text	0000005a .hidden __floatdidf
08007a34 g     F .text	00000024 _kill_r
08007a6c g     F .text	00000030 printf
00005cd2  w      .debug_info	00000000 .hidden my_main.c.85f1cdb9
0800378c  w    F .text	00000006 TIM1_CC_IRQHandler
0800773a g     F .text	00000024 __sseek
08005fc8 g     F .text	00000070 __sinit
0800378c  w    F .text	00000006 DMA2_Stream5_IRQHandler
08007790 g     F .text	000000a4 __swbuf_r
080036fa g     F .text	00000002 HardFault_Handler
0000a36f  w      .debug_info	00000000 .hidden syscall.c.10048c04
08005f6c g     F .text	0000002c __sfmoreglue
0800378c  w    F .text	00000006 DMA1_Stream5_IRQHandler
0800797c g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
00010110  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.1f01c39f
08003708 g     F .text	00000020 SysTick_Handler
080061ca g     F .text	0000002a __hexdig_fun
08014884 g     O .rodata	0000000c CmdLedE
0800378c  w    F .text	00000006 PVD_IRQHandler
0800378c  w    F .text	00000006 SDIO_IRQHandler
0800793a g     F .text	00000034 memmove
0800378c  w    F .text	00000006 TAMP_STAMP_IRQHandler
08014948 g       *ABS*	00000000 _sidata
08003706 g     F .text	00000002 PendSV_Handler
080036f8 g     F .text	00000002 NMI_Handler
0800692c g     F .text	00000080 _Balloc
08014940 g       .ARM	00000000 __exidx_end
08004f1c g     F .text	00000050 __strtok_r
0800378c  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
08014938 g       .rodata	00000000 _parsetable_end
08003794 g     F .text	0000000c __errno
000080ce  w      .debug_info	00000000 .hidden STM32F411.c.1d942d48
00013225  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.bf8e33b8
08014920 g     O .rodata	0000000c CmdWE
08000c38 g     F .text	0000002e .hidden __aeabi_d2lz
08002e7c g     F .text	0000000c TIM1_UP_TIM10_IRQHandler
08002ec8 g     F .text	0000000a _fstat_r
20000cf0 g     O .bss	00000004 errno
08007fcc g       .text	00000000 _etext
200001f8 g       .bss	00000000 _sbss
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
0800378c  w    F .text	00000006 I2C3_ER_IRQHandler
080148cc g     O .rodata	0000000c GetSpeedE
0000f3be  w      .debug_info	00000000 .hidden system_stm32f4xx.c.39c12e35
0000e5bb  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.17b9ea48
08006910 g     F .text	0000001c memcpy
080066cc g     F .text	00000138 __hexnan
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
080040cc g     F .text	0000018c setvbuf
08005f60 g     F .text	0000000c _cleanup_r
08007d24 g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
0800378c  w    F .text	00000006 EXTI0_IRQHandler
0800378c  w    F .text	00000006 I2C2_EV_IRQHandler
08000ca4 g     F .text	00000000 .hidden __aeabi_uldivmod
08007ba4 g     F .text	00000010 puts
0800378c  w    F .text	00000006 DMA1_Stream2_IRQHandler
0800378c  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
08002e68 g     F .text	00000014 USR_LED_Toggle
080071c0 g     F .text	00000066 __ratio
080068dc g     F .text	00000010 malloc
08014848 g       .rodata	00000000 _tasktable_end
080079d4 g     F .text	00000050 _raise_r
08005064 g     F .text	0000003c __assert_func
08014748 g     O .rodata	000000c8 __mprec_tens
08003700 g     F .text	00000002 UsageFault_Handler
08007c50 g     F .text	0000001c vsnprintf
08000bf8 g     F .text	00000040 .hidden __fixunsdfsi
0800378c  w    F .text	00000006 DMA2_Stream2_IRQHandler
08007a58 g     F .text	00000004 _getpid_r
200001f8 g       .bss	00000000 __bss_start__
08005050 g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
08006804 g     F .text	00000008 _localeconv_r
08006bb0 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
0800378c  w    F .text	00000006 SPI1_IRQHandler
08000cd4 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
08002e94 g     F .text	00000030 _sbrk_r
08002eda g     F .text	0000000a _read_r
0800378c  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
0000f8c5  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.c4b4aca6
08014890 g     O .rodata	0000000c LoopInitE
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
08007068 g     F .text	000000a0 __b2d
08014938 g       .ARM	00000000 __exidx_start
08000648 g     F .text	00000254 .hidden __aeabi_dmul
0800378c  w    F .text	00000006 DMA2_Stream3_IRQHandler
08014914 g     O .rodata	0000000c CmdVersionE
20000ce6 g     O .bss	00000001 __lock___sinit_recursive_mutex
080143b0 g     O .rodata	00000004 _global_impure_ptr
08007988 g     F .text	0000004c _realloc_r
080037a0 g     F .text	00000048 __libc_init_array
000129a4  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.6f222ff0
08014720 g     O .rodata	00000028 __mprec_bigtens
08006a7c g     F .text	00000094 __s2b
0800792c g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
08006ec4 g     F .text	00000038 __mcmp
200001f4 g     O .data	00000004 TaskInputTaskState
0800378c  w    F .text	00000006 USART6_IRQHandler
08007fb4 g     F .text	00000000 _init
08014848 g       .rodata	00000000 _parsetable_start
08014830 g       .rodata	00000000 _tasktable_start
080148a8 g     O .rodata	0000000c CmdRE
08000c68 g     F .text	0000003c .hidden __aeabi_d2ulz
08014878 g     O .rodata	0000000c GetEncoderValueE
08004290 g     F .text	00000c0c _strtod_l
080066a4 g     F .text	00000028 __match
20000cf4 g       .bss	00000000 _ebss
0800373c  w    F .text	00000038 Reset_Handler
08007c50 g     F .text	0000001c vsniprintf
08006b10 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
20000ce4 g     O .bss	00000001 __lock___malloc_recursive_mutex
08004e9c g     F .text	00000018 strtod
0800378c  w    F .text	00000006 DMA2_Stream0_IRQHandler
08007f24 g     F .text	00000090 _putc_r
080060c4 g     F .text	00000024 fprintf
0800378c  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
08006d30 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
080148d8 g     O .rodata	0000000c SetSpeedE
080001e0 g     F .text	00000014 mytest
080145a8 g     O .rodata	00000020 __sf_fake_stderr
20000cf8 g       ._user_heap_stack	00000000 end
0800378c  w    F .text	00000006 I2C1_EV_IRQHandler
08006810 g     F .text	00000002 __retarget_lock_release_recursive
0800378c  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001f4 g       .data	00000000 _taskstate_start
08007c6c g     F .text	000000b6 __ssputs_r
0000ce4c  w      .debug_info	00000000 .hidden tasking.c.997edab1
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800378c  w    F .text	00000006 DMA1_Stream1_IRQHandler
08007446 g     F .text	00000024 __sfputs_r
00007172  w      .debug_info	00000000 .hidden example_encoder.c.70ef96b1
08005f98 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
08003938  w    F .text	0000046c _printf_float
20000cf4 g       .bss	00000000 __bss_end__
080072cc g     F .text	00000098 _free_r
08002e88 g     F .text	0000000c TIM3_IRQHandler
0800378c  w    F .text	00000006 RCC_IRQHandler
080148e4 g     O .rodata	0000000c StopMotorE
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
0800378c g       .text	00000006 Default_Handler
080005dc g     F .text	0000006a .hidden __floatundidf
08006de4 g     F .text	000000e0 __lshift
0800378c  w    F .text	00000006 EXTI15_10_IRQHandler
08007766 g     F .text	00000028 strncmp
0800378c  w    F .text	00000006 ADC_IRQHandler
08006bdc g     F .text	00000154 __multiply
08007108 g     F .text	000000b8 __d2b
08007bb4 g     F .text	00000034 strcasecmp
0800378c  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
0800378c  w    F .text	00000006 SPI5_IRQHandler
080148b4 g     O .rodata	0000000c CmdReceiveE
08002ec4 g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
0800378c  w    F .text	00000006 TIM5_IRQHandler
08004eb4 g     F .text	00000068 strtok
000154a7  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim_ex.c.29137660
000113b0  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.45dc7b07
08014830 g     O .rodata	00000018 TaskInputTask
0800378c  w    F .text	00000006 DMA2_Stream7_IRQHandler
0800378c  w    F .text	00000006 I2C3_EV_IRQHandler
0000afc6  w      .debug_info	00000000 .hidden monitor.c.a676ff46
08007850 g     F .text	000000dc __swsetup_r
08000fa4  w    F .text	00000002 .hidden __aeabi_ldiv0
0800378c  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08006038 g     F .text	0000008c __sfp
08007226 g     F .text	00000046 __copybits
0800378c  w    F .text	00000006 RTC_WKUP_IRQHandler
08005fbc g     F .text	0000000c __sinit_lock_release
08007bf8 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
080076e0 g     F .text	00000022 __sread
08007970 g     F .text	0000000c __malloc_lock
08005ea0 g     F .text	00000078 _fflush_r
080072ae g     F .text	0000001e _calloc_r
0800378c  w    F .text	00000006 SPI2_IRQHandler
080145c8 g     O .rodata	00000020 __sf_fake_stdin
0800680e g     F .text	00000002 __retarget_lock_acquire_recursive
080037e8 g     F .text	00000010 memset
080036fc g     F .text	00000002 MemManage_Handler
08003070 g     F .text	00000688 main
0800378c  w    F .text	00000006 DMA1_Stream0_IRQHandler
0800680c g     F .text	00000002 __retarget_lock_init_recursive
08003702 g     F .text	00000002 SVC_Handler
0800775e g     F .text	00000008 __sclose
080051b8 g     F .text	00000bdc _dtoa_r
08007364 g     F .text	000000b4 _malloc_r
08007834 g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
0800378c  w    F .text	00000006 EXTI4_IRQHandler
00005f2b  w      .debug_info	00000000 .hidden mytest.c.953917ec
08003728 g     F .text	00000014 SystemInit
0000e50f  w      .debug_info	00000000 .hidden stm32f4xx_it.c.7cd92984
08000c68 g     F .text	0000003c .hidden __fixunsdfdi
08000a7c g     F .text	0000007a .hidden __nedf2
0000ca93  w      .debug_info	00000000 .hidden wdog.c.bd444c09
08007fc0 g     F .text	00000000 _fini
08007a6c g     F .text	00000030 iprintf
0000d409  w      .debug_info	00000000 .hidden decoder.c.3b030309
200001f8 g       .data	00000000 _taskstate_end
080038bc g     F .text	0000007c __exponent
08000c38 g     F .text	0000002e .hidden __fixdfdi
08002ee4 g     F .text	00000040 _write_r
0000ba1c  w      .debug_info	00000000 .hidden terminal.c.ff46b730
08003da4 g     F .text	000000da _printf_common
20000020 g     O .data	00000004 _impure_ptr
0801486c g     O .rodata	0000000c EncoderInitE
08005d94 g     F .text	0000010c __sflush_r
08007d24 g     F .text	00000200 _svfiprintf_r
0800378c  w    F .text	00000006 WWDG_IRQHandler
08003018 g     F .text	00000058 Default_IRQHandler
080068ec g     F .text	00000024 __ascii_mbtowc
08014908 g     O .rodata	0000000c CmdTransparentE
08007010 g     F .text	00000058 __ulp
08014690 g     O .rodata	0000000c _C_numeric_locale
0800378c  w    F .text	00000006 TIM2_IRQHandler
08000208 g     F .text	00000004 my_Loop
08014860 g     O .rodata	0000000c CmdDecodeE
08007bf8 g     F .text	00000056 _vsniprintf_r
08000bf8 g     F .text	00000040 .hidden __aeabi_d2uiz
20000000 g       .data	00000000 myTickCount
080076d0 g     F .text	00000010 nan
0800378c  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
0800378c  w    F .text	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0000d13d  w      .debug_info	00000000 .hidden default.c.72277f79
08006812 g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
0800378c  w    F .text	00000006 EXTI1_IRQHandler
0801489c g     O .rodata	0000000c CmdEncoder2E
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
200001f8 g       .data	00000000 _edata
08002f30 g     F .text	000000e8 USART2_IRQHandler
08007702 g     F .text	00000038 __swrite
080060c4 g     F .text	00000024 fiprintf
0800746c g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080060e8 g     F .text	0000003e _fwalk_reent
08006efc g     F .text	00000114 __mdiff
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002f24 g     F .text	00000006 _kill
0800378c  w    F .text	00000006 I2C2_ER_IRQHandler
08005fa4 g     F .text	0000000c __sfp_lock_release
080145e8 g     O .rodata	00000020 __sf_fake_stdout
08014854 g     O .rodata	0000000c CmdDumpE
0800378c  w    F .text	00000006 DMA2_Stream1_IRQHandler
080142ad g     O .rodata	00000101 _ctype_
08000fa4  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
080148fc g     O .rodata	0000000c CmdStatsE
0800378c  w    F .text	00000006 FLASH_IRQHandler
08002f2a g     F .text	00000002 _exit
080148f0 g     O .rodata	0000000c CmdTasksE
0800378c  w    F .text	00000006 DMA2_Stream4_IRQHandler
080036fe g     F .text	00000002 BusFault_Handler
0800378c  w    F .text	00000006 USART1_IRQHandler
0800685c g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
0800378c  w    F .text	00000006 OTG_FS_IRQHandler
08003e80 g     F .text	0000024c _printf_i
0800378c  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
0000d97d  w      .debug_info	00000000 .hidden main.c.9061392f
0800378c  w    F .text	00000006 DMA1_Stream4_IRQHandler
080061f4 g     F .text	0000048c __gethex
20000cec g     O .bss	00000004 __malloc_sbrk_start
0001661e  w      .debug_info	00000000 .hidden version.c.a5dccde6
0800378c  w    F .text	00000006 I2C1_ER_IRQHandler
080148c0 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000ce8 g     O .bss	00000004 __malloc_free_list
080002d8 g     F .text	0000027a .hidden __subdf3
0800746c g     F .text	00000260 _vfprintf_r
08006b50 g     F .text	0000005e __lo0bits
0800378c  w    F .text	00000006 DMA2_Stream6_IRQHandler
0000b18f  w      .debug_info	00000000 .hidden parser.c.e951cb40
20000088 g     O .data	0000016c __global_locale
000060aa  w      .debug_info	00000000 .hidden example_dc.c.f282d5c4
0800378c  w    F .text	00000006 DMA1_Stream3_IRQHandler
0000b784  w      .debug_info	00000000 .hidden dump.c.89b97077
00013076  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.a60bd6e7
20000ce5 g     O .bss	00000001 __lock___sfp_recursive_mutex
08007a24 g     F .text	00000010 raise
08005fb0 g     F .text	0000000c __sinit_lock_acquire
080069f0 g     F .text	0000008c __multadd
080069ac g     F .text	00000044 _Bfree



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fb4 	.word	0x08007fb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08007fb4 	.word	0x08007fb4

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f002 fe3f 	bl	8002e68 <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff73 	bl	8000b2c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fce9 	bl	8000648 <__aeabi_dmul>
 8000c76:	f7ff ffbf 	bl	8000bf8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc6a 	bl	8000554 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fce0 	bl	8000648 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb22 	bl	80002d8 <__aeabi_dsub>
 8000c94:	f7ff ffb0 	bl	8000bf8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f000 b974 	b.w	8000fa4 <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f806 	bl	8000cd4 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <StopMotor>:
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <StopMotor+0x78>)
 8000faa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb4:	619a      	str	r2, [r3, #24]
  */
ParserReturnVal_t StopMotor()
{ 
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  targetRPM = 0;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <StopMotor+0x7c>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	e9c3 0100 	strd	r0, r1, [r3]
  pwmStatus = 0;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <StopMotor+0x80>)
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8000fc2:	491a      	ldr	r1, [pc, #104]	; (800102c <StopMotor+0x84>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <StopMotor+0x88>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d10d      	bne.n	8000ff8 <StopMotor+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8000fdc:	6a18      	ldr	r0, [r3, #32]
 8000fde:	f241 1211 	movw	r2, #4369	; 0x1111
 8000fe2:	4210      	tst	r0, r2
 8000fe4:	d108      	bne.n	8000ff8 <StopMotor+0x50>
 8000fe6:	6a18      	ldr	r0, [r3, #32]
 8000fe8:	f240 4244 	movw	r2, #1092	; 0x444
 8000fec:	4210      	tst	r0, r2
 8000fee:	bf02      	ittt	eq
 8000ff0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000ff2:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8000ff6:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8000ff8:	6a18      	ldr	r0, [r3, #32]
 8000ffa:	f241 1211 	movw	r2, #4369	; 0x1111
 8000ffe:	4210      	tst	r0, r2
 8001000:	d108      	bne.n	8001014 <StopMotor+0x6c>
 8001002:	6a18      	ldr	r0, [r3, #32]
 8001004:	f240 4244 	movw	r2, #1092	; 0x444
 8001008:	4210      	tst	r0, r2
 800100a:	bf02      	ittt	eq
 800100c:	681a      	ldreq	r2, [r3, #0]
 800100e:	f022 0201 	biceq.w	r2, r2, #1
 8001012:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001014:	2201      	movs	r2, #1
  HAL_TIM_PWM_Stop(&tim1, TIM_CHANNEL_1);
  __HAL_TIM_SET_COMPARE(&tim1, TIM_CHANNEL_1, 0);
 8001016:	2000      	movs	r0, #0
 8001018:	f881 203e 	strb.w	r2, [r1, #62]	; 0x3e
 800101c:	6358      	str	r0, [r3, #52]	; 0x34

  return CmdReturnOk;
}
 800101e:	4770      	bx	lr
 8001020:	40020000 	.word	0x40020000
 8001024:	20000c48 	.word	0x20000c48
 8001028:	20000c3c 	.word	0x20000c3c
 800102c:	20000c50 	.word	0x20000c50
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_TIM_IC_CaptureCallback>:
//         
// RETURNS       :void
//   
  
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
   if(htim->Instance == TIM3){ 
 8001034:	6801      	ldr	r1, [r0, #0]
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001038:	4299      	cmp	r1, r3
 800103a:	d109      	bne.n	8001050 <HAL_TIM_IC_CaptureCallback+0x1c>
     count++;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_TIM_IC_CaptureCallback+0x24>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	3201      	adds	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
  
     if (count == 60){
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2a3c      	cmp	r2, #60	; 0x3c
       count  = 0;
 8001048:	bf02      	ittt	eq
 800104a:	2200      	moveq	r2, #0
 800104c:	601a      	streq	r2, [r3, #0]
       TIM3->CNT = 0;
 800104e:	624a      	streq	r2, [r1, #36]	; 0x24
       //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0); 
      }
  
     }
   
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40000400 	.word	0x40000400
 8001058:	20000a88 	.word	0x20000a88

0800105c <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 800105c:	b530      	push	{r4, r5, lr}
 800105e:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8001062:	4c10      	ldr	r4, [pc, #64]	; (80010a4 <TerminalRead+0x48>)
 8001064:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8001068:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 800106a:	fb05 4303 	mla	r3, r5, r3, r4
 800106e:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001072:	b2a4      	uxth	r4, r4
 8001074:	b10c      	cbz	r4, 800107a <TerminalRead+0x1e>
 8001076:	4290      	cmp	r0, r2
 8001078:	d101      	bne.n	800107e <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 800107a:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 800107c:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 800107e:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8001082:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8001084:	5d1d      	ldrb	r5, [r3, r4]
 8001086:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8001088:	3401      	adds	r4, #1
 800108a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800108e:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8001092:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8001096:	3c01      	subs	r4, #1
 8001098:	b2a4      	uxth	r4, r4
 800109a:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 800109e:	3001      	adds	r0, #1
 80010a0:	e7e5      	b.n	800106e <TerminalRead+0x12>
 80010a2:	bf00      	nop
 80010a4:	20000238 	.word	0x20000238

080010a8 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 80010a8:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <Uncompress+0x74>)
{
 80010ac:	b08a      	sub	sp, #40	; 0x28
 80010ae:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80010b0:	466c      	mov	r4, sp
 80010b2:	f102 0620 	add.w	r6, r2, #32
 80010b6:	6810      	ldr	r0, [r2, #0]
 80010b8:	6851      	ldr	r1, [r2, #4]
 80010ba:	4625      	mov	r5, r4
 80010bc:	c503      	stmia	r5!, {r0, r1}
 80010be:	3208      	adds	r2, #8
 80010c0:	42b2      	cmp	r2, r6
 80010c2:	462c      	mov	r4, r5
 80010c4:	d1f7      	bne.n	80010b6 <Uncompress+0xe>
 80010c6:	6810      	ldr	r0, [r2, #0]
 80010c8:	6028      	str	r0, [r5, #0]
 80010ca:	8892      	ldrh	r2, [r2, #4]
 80010cc:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 80010ce:	4618      	mov	r0, r3
 80010d0:	4d13      	ldr	r5, [pc, #76]	; (8001120 <Uncompress+0x78>)
 80010d2:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 80010d6:	2100      	movs	r1, #0
 80010d8:	ba5b      	rev16	r3, r3
 80010da:	b29b      	uxth	r3, r3
  i = 0;
 80010dc:	460c      	mov	r4, r1
 80010de:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 80010e0:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 80010e4:	d103      	bne.n	80010ee <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <Uncompress+0x78>)
  buf[i]='\0';
 80010e8:	5532      	strb	r2, [r6, r4]
}
 80010ea:	b00a      	add	sp, #40	; 0x28
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 80010ee:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 80010f0:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 80010f4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80010f8:	f3c2 4205 	ubfx	r2, r2, #16, #6
 80010fc:	4462      	add	r2, ip
    buf[i++] = c;
 80010fe:	3401      	adds	r4, #1
 8001100:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001104:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001108:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 800110a:	2a07      	cmp	r2, #7
      bits -= 8;
 800110c:	bf81      	itttt	hi
 800110e:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001110:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001114:	4091      	lslhi	r1, r2
 8001116:	430b      	orrhi	r3, r1
 8001118:	4611      	mov	r1, r2
 800111a:	e7e1      	b.n	80010e0 <Uncompress+0x38>
 800111c:	08008410 	.word	0x08008410
 8001120:	20000a70 	.word	0x20000a70

08001124 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b530      	push	{r4, r5, lr}
 8001128:	68dc      	ldr	r4, [r3, #12]
 800112a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	2d04      	cmp	r5, #4
 8001136:	bf28      	it	cs
 8001138:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001140:	bf8c      	ite	hi
 8001142:	3c03      	subhi	r4, #3
 8001144:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001146:	fa03 f505 	lsl.w	r5, r3, r5
 800114a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114e:	40a3      	lsls	r3, r4
 8001150:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	40a1      	lsls	r1, r4
 8001156:	ea41 0302 	orr.w	r3, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800115a:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	bf14      	ite	ne
 800115e:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	4a06      	ldreq	r2, [pc, #24]	; (800117c <HAL_NVIC_SetPriority+0x58>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001168:	bf18      	it	ne
 800116a:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 800116e:	b2db      	uxtb	r3, r3
 8001170:	bf14      	ite	ne
 8001172:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800117a:	bd30      	pop	{r4, r5, pc}
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_GPIO_Init>:
{
 8001180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800130c <HAL_GPIO_Init+0x18c>
        temp = EXTI->IMR;
 8001188:	4a5e      	ldr	r2, [pc, #376]	; (8001304 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800118e:	2401      	movs	r4, #1
 8001190:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001196:	43ac      	bics	r4, r5
 8001198:	f040 80a5 	bne.w	80012e6 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119c:	684d      	ldr	r5, [r1, #4]
 800119e:	f005 0403 	and.w	r4, r5, #3
 80011a2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011aa:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b4:	d834      	bhi.n	8001220 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80011b6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	68cf      	ldr	r7, [r1, #12]
 80011be:	fa07 f708 	lsl.w	r7, r7, r8
 80011c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80011c6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011c8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ca:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80011d2:	409f      	lsls	r7, r3
 80011d4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011d8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80011da:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011dc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	688f      	ldr	r7, [r1, #8]
 80011e2:	fa07 f708 	lsl.w	r7, r7, r8
 80011e6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80011ec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	d119      	bne.n	8001224 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80011f4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001200:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001204:	f04f 0e0f 	mov.w	lr, #15
 8001208:	fa0e fe0b 	lsl.w	lr, lr, fp
 800120c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	690f      	ldr	r7, [r1, #16]
 8001212:	fa07 f70b 	lsl.w	r7, r7, fp
 8001216:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	f8ca 7020 	str.w	r7, [sl, #32]
 800121e:	e001      	b.n	8001224 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	2c03      	cmp	r4, #3
 8001222:	d1da      	bne.n	80011da <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001224:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001226:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001232:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	d057      	beq.n	80012e6 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	f04f 0a00 	mov.w	sl, #0
 800123a:	f8cd a004 	str.w	sl, [sp, #4]
 800123e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	4c31      	ldr	r4, [pc, #196]	; (8001308 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001248:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800124c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001250:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001254:	9601      	str	r6, [sp, #4]
 8001256:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001258:	f023 0603 	bic.w	r6, r3, #3
 800125c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001260:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001268:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001270:	270f      	movs	r7, #15
 8001272:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127c:	d03a      	beq.n	80012f4 <HAL_GPIO_Init+0x174>
 800127e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001282:	42a0      	cmp	r0, r4
 8001284:	d038      	beq.n	80012f8 <HAL_GPIO_Init+0x178>
 8001286:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800128a:	42a0      	cmp	r0, r4
 800128c:	d036      	beq.n	80012fc <HAL_GPIO_Init+0x17c>
 800128e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001292:	42a0      	cmp	r0, r4
 8001294:	d034      	beq.n	8001300 <HAL_GPIO_Init+0x180>
 8001296:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800129a:	42a0      	cmp	r0, r4
 800129c:	bf0c      	ite	eq
 800129e:	2404      	moveq	r4, #4
 80012a0:	2407      	movne	r4, #7
 80012a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80012a6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80012aa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b0:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80012b2:	bf54      	ite	pl
 80012b4:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012b6:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->IMR = temp;
 80012ba:	6014      	str	r4, [r2, #0]
        temp = EXTI->EMR;
 80012bc:	6854      	ldr	r4, [r2, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012be:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80012c0:	bf54      	ite	pl
 80012c2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012c4:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;
 80012c8:	6054      	str	r4, [r2, #4]
        temp = EXTI->RTSR;
 80012ca:	6894      	ldr	r4, [r2, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012cc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80012ce:	bf54      	ite	pl
 80012d0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->RTSR = temp;
 80012d6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80012d8:	68d4      	ldr	r4, [r2, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012da:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80012dc:	bf54      	ite	pl
 80012de:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80012e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->FTSR = temp;
 80012e4:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	3301      	adds	r3, #1
 80012e8:	2b10      	cmp	r3, #16
 80012ea:	f47f af4f 	bne.w	800118c <HAL_GPIO_Init+0xc>
}
 80012ee:	b003      	add	sp, #12
 80012f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f4:	4654      	mov	r4, sl
 80012f6:	e7d4      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 80012f8:	2401      	movs	r4, #1
 80012fa:	e7d2      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 80012fc:	2402      	movs	r4, #2
 80012fe:	e7d0      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 8001300:	2403      	movs	r4, #3
 8001302:	e7ce      	b.n	80012a2 <HAL_GPIO_Init+0x122>
 8001304:	40013c00 	.word	0x40013c00
 8001308:	40020000 	.word	0x40020000
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_TIM_IRQHandler>:
{
 8001310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001314:	6803      	ldr	r3, [r0, #0]
{
 8001316:	ed2d 8b02 	vpush	{d8}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	0796      	lsls	r6, r2, #30
{
 800131e:	b083      	sub	sp, #12
 8001320:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001322:	d50e      	bpl.n	8001342 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	0795      	lsls	r5, r2, #30
 8001328:	d50b      	bpl.n	8001342 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800132a:	f06f 0202 	mvn.w	r2, #2
 800132e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001330:	2201      	movs	r2, #1
 8001332:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	0799      	lsls	r1, r3, #30
 8001338:	d001      	beq.n	800133e <HAL_TIM_IRQHandler+0x2e>
          HAL_TIM_IC_CaptureCallback(htim);
 800133a:	f7ff fe7b 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133e:	2300      	movs	r3, #0
 8001340:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	0752      	lsls	r2, r2, #29
 8001348:	d510      	bpl.n	800136c <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	0757      	lsls	r7, r2, #29
 800134e:	d50d      	bpl.n	800136c <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001350:	f06f 0204 	mvn.w	r2, #4
 8001354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001356:	2202      	movs	r2, #2
 8001358:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001360:	d002      	beq.n	8001368 <HAL_TIM_IRQHandler+0x58>
        HAL_TIM_IC_CaptureCallback(htim);
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff fe66 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001368:	2300      	movs	r3, #0
 800136a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	0716      	lsls	r6, r2, #28
 8001372:	d50f      	bpl.n	8001394 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	0715      	lsls	r5, r2, #28
 8001378:	d50c      	bpl.n	8001394 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800137a:	f06f 0208 	mvn.w	r2, #8
 800137e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001380:	2204      	movs	r2, #4
 8001382:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	0798      	lsls	r0, r3, #30
 8001388:	d002      	beq.n	8001390 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_IC_CaptureCallback(htim);
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fe52 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001390:	2300      	movs	r3, #0
 8001392:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	06d1      	lsls	r1, r2, #27
 800139a:	d510      	bpl.n	80013be <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	06d2      	lsls	r2, r2, #27
 80013a0:	d50d      	bpl.n	80013be <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013a2:	f06f 0210 	mvn.w	r2, #16
 80013a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013a8:	2208      	movs	r2, #8
 80013aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80013b2:	d002      	beq.n	80013ba <HAL_TIM_IRQHandler+0xaa>
        HAL_TIM_IC_CaptureCallback(htim);
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff fe3d 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ba:	2300      	movs	r3, #0
 80013bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013be:	6824      	ldr	r4, [r4, #0]
 80013c0:	6923      	ldr	r3, [r4, #16]
 80013c2:	07db      	lsls	r3, r3, #31
 80013c4:	f140 80be 	bpl.w	8001544 <HAL_TIM_IRQHandler+0x234>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013c8:	68e3      	ldr	r3, [r4, #12]
 80013ca:	07df      	lsls	r7, r3, #31
 80013cc:	f140 80ba 	bpl.w	8001544 <HAL_TIM_IRQHandler+0x234>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013d0:	f06f 0301 	mvn.w	r3, #1
 80013d4:	6123      	str	r3, [r4, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d6:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <HAL_TIM_IRQHandler+0x2b0>)
 80013d8:	695a      	ldr	r2, [r3, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	0411      	lsls	r1, r2, #16
 80013dc:	43d2      	mvns	r2, r2
 80013de:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 80013e2:	f002 0220 	and.w	r2, r2, #32
 80013e6:	430a      	orrs	r2, r1
 80013e8:	619a      	str	r2, [r3, #24]
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  if(direction == 0)
 80013ea:	4a76      	ldr	r2, [pc, #472]	; (80015c4 <HAL_TIM_IRQHandler+0x2b4>)
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	f040 80c8 	bne.w	8001584 <HAL_TIM_IRQHandler+0x274>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f8:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	2202      	movs	r2, #2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fc:	619a      	str	r2, [r3, #24]
  else if (direction == 1){
     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
  } 

  if (pwmStatus == 1){
 80013fe:	4b72      	ldr	r3, [pc, #456]	; (80015c8 <HAL_TIM_IRQHandler+0x2b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 809e 	bne.w	8001544 <HAL_TIM_IRQHandler+0x234>

    encoderPrevious = encoderCurrent;
 8001408:	4a70      	ldr	r2, [pc, #448]	; (80015cc <HAL_TIM_IRQHandler+0x2bc>)
 800140a:	4971      	ldr	r1, [pc, #452]	; (80015d0 <HAL_TIM_IRQHandler+0x2c0>)
 800140c:	6813      	ldr	r3, [r2, #0]
 800140e:	600b      	str	r3, [r1, #0]
    encoderCurrent = (int32_t)__HAL_TIM_GET_COUNTER(&tim3); 
 8001410:	4970      	ldr	r1, [pc, #448]	; (80015d4 <HAL_TIM_IRQHandler+0x2c4>)
  errorPrevious = errorCurrent;
 8001412:	4d71      	ldr	r5, [pc, #452]	; (80015d8 <HAL_TIM_IRQHandler+0x2c8>)
    encoderCurrent = (int32_t)__HAL_TIM_GET_COUNTER(&tim3); 
 8001414:	6809      	ldr	r1, [r1, #0]
 8001416:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001418:	6010      	str	r0, [r2, #0]
  double RPSDelta = (double)encoderDelta / encoderFullTurn;
 800141a:	1ac0      	subs	r0, r0, r3
 800141c:	f7ff f8aa 	bl	8000574 <__aeabi_i2d>
 8001420:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <HAL_TIM_IRQHandler+0x2cc>)
 8001422:	2200      	movs	r2, #0
 8001424:	f7ff fa3a 	bl	800089c <__aeabi_ddiv>
  double RPM = (RPSDelta / timebase)*60;
 8001428:	a363      	add	r3, pc, #396	; (adr r3, 80015b8 <HAL_TIM_IRQHandler+0x2a8>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fa35 	bl	800089c <__aeabi_ddiv>
 8001432:	4b6b      	ldr	r3, [pc, #428]	; (80015e0 <HAL_TIM_IRQHandler+0x2d0>)
 8001434:	2200      	movs	r2, #0
 8001436:	f7ff f907 	bl	8000648 <__aeabi_dmul>
 800143a:	460b      	mov	r3, r1
  errorCurrent = targetRPM - RPM;
 800143c:	4969      	ldr	r1, [pc, #420]	; (80015e4 <HAL_TIM_IRQHandler+0x2d4>)
  double RPM = (RPSDelta / timebase)*60;
 800143e:	4602      	mov	r2, r0
  errorCurrent = targetRPM - RPM;
 8001440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001444:	f7fe ff48 	bl	80002d8 <__aeabi_dsub>
  errorPrevious = errorCurrent;
 8001448:	e9d5 8900 	ldrd	r8, r9, [r5]
  errorCurrent = targetRPM - RPM;
 800144c:	4682      	mov	sl, r0
 800144e:	468b      	mov	fp, r1
 8001450:	e9c5 ab00 	strd	sl, fp, [r5]
  double errorDelta = (errorCurrent - errorPrevious);
 8001454:	4642      	mov	r2, r8
 8001456:	464b      	mov	r3, r9
 8001458:	f7fe ff3e 	bl	80002d8 <__aeabi_dsub>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 800145c:	4d62      	ldr	r5, [pc, #392]	; (80015e8 <HAL_TIM_IRQHandler+0x2d8>)
  errorD = errorDelta / timebase;
 800145e:	a356      	add	r3, pc, #344	; (adr r3, 80015b8 <HAL_TIM_IRQHandler+0x2a8>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
  double errorDelta = (errorCurrent - errorPrevious);
 8001464:	4606      	mov	r6, r0
 8001466:	460f      	mov	r7, r1
  errorD = errorDelta / timebase;
 8001468:	f7ff fa18 	bl	800089c <__aeabi_ddiv>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 800146c:	ed95 7b00 	vldr	d7, [r5]
  errorD = errorDelta / timebase;
 8001470:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <HAL_TIM_IRQHandler+0x2dc>)
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 8001472:	eeb0 8a47 	vmov.f32	s16, s14
 8001476:	eef0 8a67 	vmov.f32	s17, s15
  errorD = errorDelta / timebase;
 800147a:	e9c3 0100 	strd	r0, r1, [r3]
 800147e:	e9cd 0100 	strd	r0, r1, [sp]
  if(fabs(errorCurrent) > fabs(errorPrevious)){
 8001482:	4642      	mov	r2, r8
 8001484:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001488:	4650      	mov	r0, sl
 800148a:	f02b 4100 	bic.w	r1, fp, #2147483648	; 0x80000000
 800148e:	f7ff fb6b 	bl	8000b68 <__aeabi_dcmpgt>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 8001492:	a349      	add	r3, pc, #292	; (adr r3, 80015b8 <HAL_TIM_IRQHandler+0x2a8>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
  if(fabs(errorCurrent) > fabs(errorPrevious)){
 8001498:	2800      	cmp	r0, #0
 800149a:	d07a      	beq.n	8001592 <HAL_TIM_IRQHandler+0x282>
    errorI += (timebase * errorPrevious) + (errorDelta * timebase)/2;
 800149c:	4630      	mov	r0, r6
 800149e:	4639      	mov	r1, r7
 80014a0:	f7ff f8d2 	bl	8000648 <__aeabi_dmul>
 80014a4:	4b52      	ldr	r3, [pc, #328]	; (80015f0 <HAL_TIM_IRQHandler+0x2e0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f7ff f8ce 	bl	8000648 <__aeabi_dmul>
 80014ac:	a342      	add	r3, pc, #264	; (adr r3, 80015b8 <HAL_TIM_IRQHandler+0x2a8>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	4606      	mov	r6, r0
 80014b4:	460f      	mov	r7, r1
 80014b6:	4640      	mov	r0, r8
 80014b8:	4649      	mov	r1, r9
    errorI += (timebase * errorCurrent) + (errorDelta * timebase)/2;
 80014ba:	f7ff f8c5 	bl	8000648 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4630      	mov	r0, r6
 80014c4:	4639      	mov	r1, r7
 80014c6:	f7fe ff09 	bl	80002dc <__adddf3>
 80014ca:	ec53 2b18 	vmov	r2, r3, d8
 80014ce:	f7fe ff05 	bl	80002dc <__adddf3>
    CalculateSpeedsAndErrors();
    PIDResult = (P * errorCurrent) + (I * errorI) + (D * errorD);
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <HAL_TIM_IRQHandler+0x2e4>)
    errorI += (timebase * errorCurrent) + (errorDelta * timebase)/2;
 80014d4:	4606      	mov	r6, r0
 80014d6:	460f      	mov	r7, r1
 80014d8:	e9c5 6700 	strd	r6, r7, [r5]
    PIDResult = (P * errorCurrent) + (I * errorI) + (D * errorD);
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	4650      	mov	r0, sl
 80014e2:	4659      	mov	r1, fp
 80014e4:	f7ff f8b0 	bl	8000648 <__aeabi_dmul>
 80014e8:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <HAL_TIM_IRQHandler+0x2e8>)
 80014ea:	4680      	mov	r8, r0
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	4689      	mov	r9, r1
 80014f2:	4630      	mov	r0, r6
 80014f4:	4639      	mov	r1, r7
 80014f6:	f7ff f8a7 	bl	8000648 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4640      	mov	r0, r8
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe feeb 	bl	80002dc <__adddf3>
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_TIM_IRQHandler+0x2ec>)
 8001508:	4606      	mov	r6, r0
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	460f      	mov	r7, r1
 8001510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001514:	f7ff f898 	bl	8000648 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4630      	mov	r0, r6
 800151e:	4639      	mov	r1, r7
 8001520:	f7fe fedc 	bl	80002dc <__adddf3>
    currentPWM = __HAL_TIM_GET_COUNTER(&tim1); 
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_TIM_IRQHandler+0x2f0>)
 8001526:	4e37      	ldr	r6, [pc, #220]	; (8001604 <HAL_TIM_IRQHandler+0x2f4>)
 8001528:	681f      	ldr	r7, [r3, #0]
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	b29b      	uxth	r3, r3
 800152e:	8033      	strh	r3, [r6, #0]
    currentPWM += ((uint16_t)(PIDResult * pid2pwm));
 8001530:	f7ff fb62 	bl	8000bf8 <__aeabi_d2uiz>
 8001534:	8835      	ldrh	r5, [r6, #0]
 8001536:	b2ad      	uxth	r5, r5
 8001538:	4428      	add	r0, r5
 800153a:	b280      	uxth	r0, r0
 800153c:	8030      	strh	r0, [r6, #0]
    __HAL_TIM_SET_COMPARE(&tim1, TIM_CHANNEL_1, currentPWM);
 800153e:	8833      	ldrh	r3, [r6, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001544:	6923      	ldr	r3, [r4, #16]
 8001546:	061e      	lsls	r6, r3, #24
 8001548:	d505      	bpl.n	8001556 <HAL_TIM_IRQHandler+0x246>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800154a:	68e3      	ldr	r3, [r4, #12]
 800154c:	061d      	lsls	r5, r3, #24
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800154e:	bf44      	itt	mi
 8001550:	f06f 0380 	mvnmi.w	r3, #128	; 0x80
 8001554:	6123      	strmi	r3, [r4, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001556:	6923      	ldr	r3, [r4, #16]
 8001558:	0658      	lsls	r0, r3, #25
 800155a:	d505      	bpl.n	8001568 <HAL_TIM_IRQHandler+0x258>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800155c:	68e3      	ldr	r3, [r4, #12]
 800155e:	0659      	lsls	r1, r3, #25
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001560:	bf44      	itt	mi
 8001562:	f06f 0340 	mvnmi.w	r3, #64	; 0x40
 8001566:	6123      	strmi	r3, [r4, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001568:	6923      	ldr	r3, [r4, #16]
 800156a:	069a      	lsls	r2, r3, #26
 800156c:	d505      	bpl.n	800157a <HAL_TIM_IRQHandler+0x26a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800156e:	68e3      	ldr	r3, [r4, #12]
 8001570:	069b      	lsls	r3, r3, #26
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001572:	bf44      	itt	mi
 8001574:	f06f 0320 	mvnmi.w	r3, #32
 8001578:	6123      	strmi	r3, [r4, #16]
}
 800157a:	b003      	add	sp, #12
 800157c:	ecbd 8b02 	vpop	{d8}
 8001580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (direction == 1){
 8001584:	2a01      	cmp	r2, #1
 8001586:	f47f af3a 	bne.w	80013fe <HAL_TIM_IRQHandler+0xee>
    GPIOx->BSRR = GPIO_Pin;
 800158a:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001590:	e734      	b.n	80013fc <HAL_TIM_IRQHandler+0xec>
    errorI += (timebase * errorCurrent) + (errorDelta * timebase)/2;
 8001592:	4630      	mov	r0, r6
 8001594:	4639      	mov	r1, r7
 8001596:	f7ff f857 	bl	8000648 <__aeabi_dmul>
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_TIM_IRQHandler+0x2e0>)
 800159c:	2200      	movs	r2, #0
 800159e:	f7ff f853 	bl	8000648 <__aeabi_dmul>
 80015a2:	a305      	add	r3, pc, #20	; (adr r3, 80015b8 <HAL_TIM_IRQHandler+0x2a8>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	4606      	mov	r6, r0
 80015aa:	460f      	mov	r7, r1
 80015ac:	4650      	mov	r0, sl
 80015ae:	4659      	mov	r1, fp
 80015b0:	e783      	b.n	80014ba <HAL_TIM_IRQHandler+0x1aa>
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	9999999a 	.word	0x9999999a
 80015bc:	3fc99999 	.word	0x3fc99999
 80015c0:	40020000 	.word	0x40020000
 80015c4:	20000014 	.word	0x20000014
 80015c8:	20000c3c 	.word	0x20000c3c
 80015cc:	20000a94 	.word	0x20000a94
 80015d0:	20000a98 	.word	0x20000a98
 80015d4:	20000c98 	.word	0x20000c98
 80015d8:	20000aa0 	.word	0x20000aa0
 80015dc:	40790000 	.word	0x40790000
 80015e0:	404e0000 	.word	0x404e0000
 80015e4:	20000c48 	.word	0x20000c48
 80015e8:	20000ab0 	.word	0x20000ab0
 80015ec:	20000aa8 	.word	0x20000aa8
 80015f0:	3fe00000 	.word	0x3fe00000
 80015f4:	20000230 	.word	0x20000230
 80015f8:	20000220 	.word	0x20000220
 80015fc:	20000218 	.word	0x20000218
 8001600:	20000c50 	.word	0x20000c50
 8001604:	20000010 	.word	0x20000010

08001608 <HAL_TIM_PWM_ConfigChannel>:
{
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800160a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800160e:	2b01      	cmp	r3, #1
 8001610:	f000 80a8 	beq.w	8001764 <HAL_TIM_PWM_ConfigChannel+0x15c>
 8001614:	2301      	movs	r3, #1
  switch (Channel)
 8001616:	2a04      	cmp	r2, #4
  __HAL_LOCK(htim);
 8001618:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800161c:	d039      	beq.n	8001692 <HAL_TIM_PWM_ConfigChannel+0x8a>
 800161e:	2a08      	cmp	r2, #8
 8001620:	d06c      	beq.n	80016fc <HAL_TIM_PWM_ConfigChannel+0xf4>
 8001622:	2a00      	cmp	r2, #0
 8001624:	d130      	bne.n	8001688 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001626:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8001628:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001632:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001634:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001636:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001638:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800163c:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 800163e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001640:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8001644:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001646:	4e48      	ldr	r6, [pc, #288]	; (8001768 <HAL_TIM_PWM_ConfigChannel+0x160>)
 8001648:	42b3      	cmp	r3, r6
 800164a:	d10b      	bne.n	8001664 <HAL_TIM_PWM_ConfigChannel+0x5c>
    tmpccer |= OC_Config->OCNPolarity;
 800164c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800164e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001652:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8001654:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001658:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800165c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800165e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001662:	4335      	orrs	r5, r6
  TIMx->CR2 = tmpcr2;
 8001664:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001666:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001668:	684c      	ldr	r4, [r1, #4]
 800166a:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800166c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800166e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001670:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001672:	f042 0208 	orr.w	r2, r2, #8
 8001676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	f022 0204 	bic.w	r2, r2, #4
 800167e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001680:	699a      	ldr	r2, [r3, #24]
 8001682:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001684:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001686:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8001688:	2200      	movs	r2, #0
 800168a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 800168e:	4618      	mov	r0, r3
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001692:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001694:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001696:	6a1a      	ldr	r2, [r3, #32]
 8001698:	f022 0210 	bic.w	r2, r2, #16
 800169c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800169e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80016a0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80016a2:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016a4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016a8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016ac:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80016ae:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016b2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016b6:	4e2c      	ldr	r6, [pc, #176]	; (8001768 <HAL_TIM_PWM_ConfigChannel+0x160>)
 80016b8:	42b3      	cmp	r3, r6
 80016ba:	d10d      	bne.n	80016d8 <HAL_TIM_PWM_ConfigChannel+0xd0>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016bc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80016be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016c2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016c6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016ca:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016ce:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80016d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016d4:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CR2 = tmpcr2;
 80016d8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80016da:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80016dc:	684c      	ldr	r4, [r1, #4]
 80016de:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80016e0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016e2:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016fa:	e7c3      	b.n	8001684 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016fc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80016fe:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001706:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001708:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800170a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800170c:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800170e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001712:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001714:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001716:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800171a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800171e:	4e12      	ldr	r6, [pc, #72]	; (8001768 <HAL_TIM_PWM_ConfigChannel+0x160>)
 8001720:	42b3      	cmp	r3, r6
 8001722:	d10d      	bne.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x138>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001724:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800172a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800172e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001732:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001736:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8001738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800173c:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CR2 = tmpcr2;
 8001740:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001742:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001744:	684c      	ldr	r4, [r1, #4]
 8001746:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001748:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800174a:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800174c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800174e:	f042 0208 	orr.w	r2, r2, #8
 8001752:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	430a      	orrs	r2, r1
 8001760:	61da      	str	r2, [r3, #28]
 8001762:	e790      	b.n	8001686 <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8001764:	2302      	movs	r3, #2
 8001766:	e792      	b.n	800168e <HAL_TIM_PWM_ConfigChannel+0x86>
 8001768:	40010000 	.word	0x40010000

0800176c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 800176e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001770:	4290      	cmp	r0, r2
 8001772:	d00e      	beq.n	8001792 <TIM_Base_SetConfig+0x26>
 8001774:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001778:	d00b      	beq.n	8001792 <TIM_Base_SetConfig+0x26>
 800177a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800177e:	4290      	cmp	r0, r2
 8001780:	d007      	beq.n	8001792 <TIM_Base_SetConfig+0x26>
 8001782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001786:	4290      	cmp	r0, r2
 8001788:	d003      	beq.n	8001792 <TIM_Base_SetConfig+0x26>
 800178a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800178e:	4290      	cmp	r0, r2
 8001790:	d115      	bne.n	80017be <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001792:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001798:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800179a:	4a19      	ldr	r2, [pc, #100]	; (8001800 <TIM_Base_SetConfig+0x94>)
 800179c:	4290      	cmp	r0, r2
 800179e:	d019      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017a4:	d016      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80017aa:	4290      	cmp	r0, r2
 80017ac:	d012      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b2:	4290      	cmp	r0, r2
 80017b4:	d00e      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ba:	4290      	cmp	r0, r2
 80017bc:	d00a      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <TIM_Base_SetConfig+0x98>)
 80017c0:	4290      	cmp	r0, r2
 80017c2:	d007      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d003      	beq.n	80017d4 <TIM_Base_SetConfig+0x68>
 80017cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d0:	4290      	cmp	r0, r2
 80017d2:	d103      	bne.n	80017dc <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017dc:	694a      	ldr	r2, [r1, #20]
 80017de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80017e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e6:	688b      	ldr	r3, [r1, #8]
 80017e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017ea:	680b      	ldr	r3, [r1, #0]
 80017ec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <TIM_Base_SetConfig+0x94>)
 80017f0:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80017f2:	bf04      	itt	eq
 80017f4:	690b      	ldreq	r3, [r1, #16]
 80017f6:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80017f8:	2301      	movs	r3, #1
 80017fa:	6143      	str	r3, [r0, #20]
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40010000 	.word	0x40010000
 8001804:	40014000 	.word	0x40014000

08001808 <HAL_TIMEx_MasterConfigSynchronization.constprop.0>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001808:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800180c:	2b01      	cmp	r3, #1
 800180e:	f04f 0302 	mov.w	r3, #2
 8001812:	d026      	beq.n	8001862 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001814:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	6859      	ldr	r1, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800181c:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800181e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001822:	6059      	str	r1, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001824:	4910      	ldr	r1, [pc, #64]	; (8001868 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x60>)
 8001826:	428b      	cmp	r3, r1
 8001828:	d012      	beq.n	8001850 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 800182a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182e:	d00f      	beq.n	8001850 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001830:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8001834:	428b      	cmp	r3, r1
 8001836:	d00b      	beq.n	8001850 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800183c:	428b      	cmp	r3, r1
 800183e:	d007      	beq.n	8001850 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001840:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001844:	428b      	cmp	r3, r1
 8001846:	d003      	beq.n	8001850 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x48>
 8001848:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800184c:	428b      	cmp	r3, r1
 800184e:	d102      	bne.n	8001856 <HAL_TIMEx_MasterConfigSynchronization.constprop.0+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001854:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001856:	2301      	movs	r3, #1
 8001858:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800185c:	2300      	movs	r3, #0
 800185e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001862:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40010000 	.word	0x40010000

0800186c <HAL_TIM_Base_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 800186c:	b513      	push	{r0, r1, r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800186e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
 8001872:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001874:	f002 03ff 	and.w	r3, r2, #255	; 0xff
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8001878:	6800      	ldr	r0, [r0, #0]
 800187a:	b97a      	cbnz	r2, 800189c <HAL_TIM_Base_Init.constprop.0+0x30>
 800187c:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <HAL_TIM_Base_Init.constprop.0+0x6c>)
    htim->Lock = HAL_UNLOCKED;
 800187e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001882:	4290      	cmp	r0, r2
 8001884:	d10a      	bne.n	800189c <HAL_TIM_Base_Init.constprop.0+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_TIM_Base_Init.constprop.0+0x70>)
 800188a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800188c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	9b01      	ldr	r3, [sp, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800189c:	2302      	movs	r3, #2
 800189e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a2:	1d21      	adds	r1, r4, #4
 80018a4:	f7ff ff62 	bl	800176c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018b4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80018b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80018bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80018d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80018d4:	b002      	add	sp, #8
 80018d6:	bd10      	pop	{r4, pc}
 80018d8:	40014800 	.word	0x40014800
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_TIM_Encoder_Init.constprop.0>:
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
 80018e6:	4604      	mov	r4, r0
 80018e8:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 80018ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ee:	b90b      	cbnz	r3, 80018f4 <HAL_TIM_Encoder_Init.constprop.0+0x14>
    htim->Lock = HAL_UNLOCKED;
 80018f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80018f4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80018fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8001900:	6883      	ldr	r3, [r0, #8]
 8001902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001906:	f023 0307 	bic.w	r3, r3, #7
 800190a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800190c:	f7ff ff2e 	bl	800176c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001910:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001912:	682a      	ldr	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001914:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001916:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001918:	68a9      	ldr	r1, [r5, #8]
  tmpccer = htim->Instance->CCER;
 800191a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800191c:	4316      	orrs	r6, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800191e:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001924:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001928:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800192c:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800192e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001932:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001934:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800193c:	68e9      	ldr	r1, [r5, #12]
 800193e:	430b      	orrs	r3, r1
 8001940:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001942:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001946:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800194a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800194c:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800194e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001952:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001954:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001956:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800195a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800195c:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001960:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001962:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8001966:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800196c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8001978:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001980 <HAL_InitTick.isra.0>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_InitTick.isra.0+0x48>)
 8001982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	3b01      	subs	r3, #1
 800198e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8001992:	b510      	push	{r4, lr}
 8001994:	4604      	mov	r4, r0
 8001996:	d215      	bcs.n	80019c4 <HAL_InitTick.isra.0+0x44>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001998:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	22f0      	movs	r2, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	614b      	str	r3, [r1, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_InitTick.isra.0+0x4c>)
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	280f      	cmp	r0, #15
 80019a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	f04f 0200 	mov.w	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ac:	f04f 0307 	mov.w	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	618a      	str	r2, [r1, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	610b      	str	r3, [r1, #16]
 80019b4:	d806      	bhi.n	80019c4 <HAL_InitTick.isra.0+0x44>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b6:	4601      	mov	r1, r0
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019bc:	f7ff fbb2 	bl	8001124 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_InitTick.isra.0+0x50>)
 80019c2:	601c      	str	r4, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019c4:	bd10      	pop	{r4, pc}
 80019c6:	bf00      	nop
 80019c8:	20000004 	.word	0x20000004
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	2000001c 	.word	0x2000001c

080019d4 <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 80019d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	4c2e      	ldr	r4, [pc, #184]	; (8001a94 <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 80019dc:	d30a      	bcc.n	80019f4 <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 80019de:	f640 0334 	movw	r3, #2100	; 0x834
 80019e2:	fb03 4300 	mla	r3, r3, r0, r4
 80019e6:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80019ea:	3201      	adds	r2, #1
 80019ec:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 80019f0:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80019f4:	f640 0334 	movw	r3, #2100	; 0x834
 80019f8:	fb03 4300 	mla	r3, r3, r0, r4
 80019fc:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001a00:	fa12 f585 	uxtah	r5, r2, r5
 8001a04:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001a08:	d220      	bcs.n	8001a4c <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0a:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001a0c:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 8001a10:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001a12:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 8001a16:	42b2      	cmp	r2, r6
 8001a18:	d005      	beq.n	8001a26 <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8001a1a:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001a1e:	b2ad      	uxth	r5, r5
 8001a20:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001a24:	d320      	bcc.n	8001a68 <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 8001a26:	f640 0334 	movw	r3, #2100	; 0x834
 8001a2a:	fb03 4400 	mla	r4, r3, r0, r4
 8001a2e:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 8001a32:	4433      	add	r3, r6
 8001a34:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <TerminalOutputBufferWrite.isra.0+0xc4>)
 8001a3a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8001a3e:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 8001a40:	68d3      	ldr	r3, [r2, #12]
 8001a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a46:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a48:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 8001a4c:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 8001a50:	3501      	adds	r5, #1
 8001a52:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8001a56:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001a5a:	fa12 f585 	uxtah	r5, r2, r5
 8001a5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001a62:	d3d2      	bcc.n	8001a0a <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 8001a64:	bf00      	nop
 8001a66:	e7f6      	b.n	8001a56 <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 8001a68:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 8001a6c:	f811 c006 	ldrb.w	ip, [r1, r6]
 8001a70:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8001a74:	3501      	adds	r5, #1
 8001a76:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001a7a:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001a7e:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 8001a82:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 8001a86:	3501      	adds	r5, #1
 8001a88:	b2ad      	uxth	r5, r5
 8001a8a:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 8001a8e:	3601      	adds	r6, #1
 8001a90:	e7c1      	b.n	8001a16 <TerminalOutputBufferWrite.isra.0+0x42>
 8001a92:	bf00      	nop
 8001a94:	20000238 	.word	0x20000238
 8001a98:	08013ff4 	.word	0x08013ff4

08001a9c <GetEncoderValue>:
{ 
 8001a9c:	b508      	push	{r3, lr}
  uint16_t currentEnc = __HAL_TIM_GET_COUNTER(&tim3); 
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <GetEncoderValue+0x14>)
  printf("%d\n", currentEnc);
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <GetEncoderValue+0x18>)
  uint16_t currentEnc = __HAL_TIM_GET_COUNTER(&tim3); 
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  printf("%d\n", currentEnc);
 8001aa6:	b289      	uxth	r1, r1
 8001aa8:	f005 ffe0 	bl	8007a6c <iprintf>
}
 8001aac:	2000      	movs	r0, #0
 8001aae:	bd08      	pop	{r3, pc}
 8001ab0:	20000c98 	.word	0x20000c98
 8001ab4:	08008508 	.word	0x08008508

08001ab8 <GetSpeed>:
{ 
 8001ab8:	b508      	push	{r3, lr}
  int32_t encoderDelta = encoderCurrent - encoderPrevious;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <GetSpeed+0x40>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <GetSpeed+0x44>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
  double turnsDelta = (double)encoderDelta / encoderFullTurn;
 8001ac2:	1ac0      	subs	r0, r0, r3
 8001ac4:	f7fe fd56 	bl	8000574 <__aeabi_i2d>
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <GetSpeed+0x48>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
  double speedTurns = turnsDelta / timebase;
 8001ad0:	a307      	add	r3, pc, #28	; (adr r3, 8001af0 <GetSpeed+0x38>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fee1 	bl	800089c <__aeabi_ddiv>
  double rpms = speedTurns * 60;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <GetSpeed+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f7fe fdb3 	bl	8000648 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
  printf("RPM: %.2lf\n", rpms);
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <GetSpeed+0x50>)
 8001ae8:	f005 ffc0 	bl	8007a6c <iprintf>
}
 8001aec:	2000      	movs	r0, #0
 8001aee:	bd08      	pop	{r3, pc}
 8001af0:	9999999a 	.word	0x9999999a
 8001af4:	3fc99999 	.word	0x3fc99999
 8001af8:	20000a94 	.word	0x20000a94
 8001afc:	20000a98 	.word	0x20000a98
 8001b00:	40790000 	.word	0x40790000
 8001b04:	404e0000 	.word	0x404e0000
 8001b08:	08008436 	.word	0x08008436

08001b0c <CmdEncoder2>:
{
 8001b0c:	b508      	push	{r3, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b0e:	b948      	cbnz	r0, 8001b24 <CmdEncoder2+0x18>
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <CmdEncoder2+0x1c>)
     printf("POS: %i º \n", position);
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <CmdEncoder2+0x20>)
     int16_t position =  ((int16_t)(TIM3->CNT))/2;
 8001b14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b16:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8001b1a:	fa03 f181 	sxtah	r1, r3, r1
     printf("POS: %i º \n", position);
 8001b1e:	1049      	asrs	r1, r1, #1
 8001b20:	f005 ffa4 	bl	8007a6c <iprintf>
 }    
 8001b24:	2000      	movs	r0, #0
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	08008442 	.word	0x08008442

08001b30 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001b32:	4604      	mov	r4, r0
 8001b34:	b938      	cbnz	r0, 8001b46 <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <CmdTasks+0x34>)
  p = _tasktable_start;
 8001b38:	4d0b      	ldr	r5, [pc, #44]	; (8001b68 <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 8001b3a:	4e0c      	ldr	r6, [pc, #48]	; (8001b6c <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001b3c:	4f0c      	ldr	r7, [pc, #48]	; (8001b70 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001b3e:	f006 f831 	bl	8007ba4 <puts>
  while(p != _tasktable_end) {
 8001b42:	42b5      	cmp	r5, r6
 8001b44:	d102      	bne.n	8001b4c <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 8001b46:	2000      	movs	r0, #0
 8001b48:	b003      	add	sp, #12
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001b4c:	696b      	ldr	r3, [r5, #20]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4621      	mov	r1, r4
 8001b52:	692b      	ldr	r3, [r5, #16]
 8001b54:	f855 2b18 	ldr.w	r2, [r5], #24
 8001b58:	4638      	mov	r0, r7
 8001b5a:	f005 ff87 	bl	8007a6c <iprintf>
    i++;
 8001b5e:	3401      	adds	r4, #1
 8001b60:	e7ef      	b.n	8001b42 <CmdTasks+0x12>
 8001b62:	bf00      	nop
 8001b64:	0800844f 	.word	0x0800844f
 8001b68:	08014830 	.word	0x08014830
 8001b6c:	08014848 	.word	0x08014848
 8001b70:	08008468 	.word	0x08008468

08001b74 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 8001b78:	b1f9      	cbz	r1, 8001bba <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001b7a:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001b7c:	888a      	ldrh	r2, [r1, #4]
 8001b7e:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001b80:	2d10      	cmp	r5, #16
 8001b82:	d005      	beq.n	8001b90 <DecodeReadRegister+0x1c>
 8001b84:	2d20      	cmp	r5, #32
 8001b86:	d005      	beq.n	8001b94 <DecodeReadRegister+0x20>
 8001b88:	2d08      	cmp	r5, #8
 8001b8a:	d105      	bne.n	8001b98 <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 8001b8c:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 8001b90:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8001b92:	e7fc      	b.n	8001b8e <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 8001b94:	58d0      	ldr	r0, [r2, r3]
    break;
 8001b96:	e7fa      	b.n	8001b8e <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001b98:	6808      	ldr	r0, [r1, #0]
 8001b9a:	f7ff fa85 	bl	80010a8 <Uncompress>
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <DecodeReadRegister+0x4c>)
 8001ba4:	f005 ff62 	bl	8007a6c <iprintf>
    printf(" in periphral %s!\n",
 8001ba8:	6820      	ldr	r0, [r4, #0]
 8001baa:	f7ff fa7d 	bl	80010a8 <Uncompress>
 8001bae:	4601      	mov	r1, r0
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <DecodeReadRegister+0x50>)
 8001bb2:	f005 ff5b 	bl	8007a6c <iprintf>
    return 0;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e7e9      	b.n	8001b8e <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 8001bba:	4608      	mov	r0, r1
 8001bbc:	e7e7      	b.n	8001b8e <DecodeReadRegister+0x1a>
 8001bbe:	bf00      	nop
 8001bc0:	08008480 	.word	0x08008480
 8001bc4:	080084a2 	.word	0x080084a2

08001bc8 <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 8001bc8:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001bca:	b920      	cbnz	r0, 8001bd6 <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <CmdVersion+0x14>)
 8001bce:	4904      	ldr	r1, [pc, #16]	; (8001be0 <CmdVersion+0x18>)
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <CmdVersion+0x1c>)
 8001bd2:	f005 ff4b 	bl	8007a6c <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	bd08      	pop	{r3, pc}
 8001bda:	bf00      	nop
 8001bdc:	08014225 	.word	0x08014225
 8001be0:	0801420c 	.word	0x0801420c
 8001be4:	080084b5 	.word	0x080084b5

08001be8 <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 8001bec:	b149      	cbz	r1, 8001c02 <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001bee:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001bf0:	8888      	ldrh	r0, [r1, #4]
 8001bf2:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001bf4:	2d10      	cmp	r5, #16
 8001bf6:	d005      	beq.n	8001c04 <DecodeWriteRegister.isra.0+0x1c>
 8001bf8:	2d20      	cmp	r5, #32
 8001bfa:	d005      	beq.n	8001c08 <DecodeWriteRegister.isra.0+0x20>
 8001bfc:	2d08      	cmp	r5, #8
 8001bfe:	d105      	bne.n	8001c0c <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 8001c00:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001c04:	52c2      	strh	r2, [r0, r3]
    break;  
 8001c06:	e7fc      	b.n	8001c02 <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 8001c08:	50c2      	str	r2, [r0, r3]
    break;
 8001c0a:	e7fa      	b.n	8001c02 <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001c0c:	6808      	ldr	r0, [r1, #0]
 8001c0e:	f7ff fa4b 	bl	80010a8 <Uncompress>
 8001c12:	4629      	mov	r1, r5
 8001c14:	4602      	mov	r2, r0
 8001c16:	4806      	ldr	r0, [pc, #24]	; (8001c30 <DecodeWriteRegister.isra.0+0x48>)
 8001c18:	f005 ff28 	bl	8007a6c <iprintf>
    printf(" in periphral %s!\n",
 8001c1c:	6820      	ldr	r0, [r4, #0]
 8001c1e:	f7ff fa43 	bl	80010a8 <Uncompress>
}
 8001c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 8001c26:	4601      	mov	r1, r0
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DecodeWriteRegister.isra.0+0x4c>)
 8001c2a:	f005 bf1f 	b.w	8007a6c <iprintf>
 8001c2e:	bf00      	nop
 8001c30:	08008480 	.word	0x08008480
 8001c34:	080084a2 	.word	0x080084a2

08001c38 <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001c38:	2801      	cmp	r0, #1
{
 8001c3a:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001c3c:	d004      	beq.n	8001c48 <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d104      	bne.n	8001c4c <CmdTest+0x14>
    printf("testasm\n\n"
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <CmdTest+0x24>)
 8001c44:	f005 ffae 	bl	8007ba4 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 8001c48:	2000      	movs	r0, #0
 8001c4a:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8001c4c:	204d      	movs	r0, #77	; 0x4d
 8001c4e:	f7fe fac7 	bl	80001e0 <mytest>
 8001c52:	4601      	mov	r1, r0
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <CmdTest+0x28>)
 8001c56:	f005 ff09 	bl	8007a6c <iprintf>
  return CmdReturnOk;
 8001c5a:	e7f5      	b.n	8001c48 <CmdTest+0x10>
 8001c5c:	080084c5 	.word	0x080084c5
 8001c60:	080084fe 	.word	0x080084fe

08001c64 <LoopInit>:
  P = pidP;
 8001c64:	49ad      	ldr	r1, [pc, #692]	; (8001f1c <LoopInit+0x2b8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8001c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  P = pidP;
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
  D = pidD;
 8001c74:	4daa      	ldr	r5, [pc, #680]	; (8001f20 <LoopInit+0x2bc>)
 8001c76:	49ab      	ldr	r1, [pc, #684]	; (8001f24 <LoopInit+0x2c0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4eab      	ldr	r6, [pc, #684]	; (8001f28 <LoopInit+0x2c4>)
  D = pidD;
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	e9c1 4500 	strd	r4, r5, [r1]
  I = pidI;
 8001c80:	49aa      	ldr	r1, [pc, #680]	; (8001f2c <LoopInit+0x2c8>)
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
  encoderCurrent = 0;
 8001c86:	4baa      	ldr	r3, [pc, #680]	; (8001f30 <LoopInit+0x2cc>)
  errorCurrent = 0;
 8001c88:	49aa      	ldr	r1, [pc, #680]	; (8001f34 <LoopInit+0x2d0>)
  encoderCurrent = 0;
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	601c      	str	r4, [r3, #0]
  encoderPrevious = 0;
 8001c8e:	4baa      	ldr	r3, [pc, #680]	; (8001f38 <LoopInit+0x2d4>)
  errorCurrent = 0;
 8001c90:	2200      	movs	r2, #0
  encoderPrevious = 0;
 8001c92:	601c      	str	r4, [r3, #0]
  errorCurrent = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e9c1 2300 	strd	r2, r3, [r1]
  errorI = 0; 
 8001c9a:	49a8      	ldr	r1, [pc, #672]	; (8001f3c <LoopInit+0x2d8>)
 8001c9c:	e9c1 2300 	strd	r2, r3, [r1]
  errorD = 0;
 8001ca0:	49a7      	ldr	r1, [pc, #668]	; (8001f40 <LoopInit+0x2dc>)
 8001ca2:	e9c1 2300 	strd	r2, r3, [r1]
  targetRPM = 0;
 8001ca6:	49a7      	ldr	r1, [pc, #668]	; (8001f44 <LoopInit+0x2e0>)
{
 8001ca8:	b0ae      	sub	sp, #184	; 0xb8
  targetRPM = 0;
 8001caa:	e9c1 2300 	strd	r2, r3, [r1]
  pwmStatus = 0;
 8001cae:	4ba6      	ldr	r3, [pc, #664]	; (8001f48 <LoopInit+0x2e4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	2214      	movs	r2, #20
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	a819      	add	r0, sp, #100	; 0x64
  pwmStatus = 0;
 8001cb6:	601c      	str	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f001 fd96 	bl	80037e8 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	9400      	str	r4, [sp, #0]
 8001cbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6333      	str	r3, [r6, #48]	; 0x30
 8001cc6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitTypeDef gpioInitStructA = {0};
 8001cc8:	9416      	str	r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	9300      	str	r3, [sp, #0]
  GPIO_InitTypeDef gpioInitStructureB = {0};
 8001cd0:	2214      	movs	r2, #20
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	a80f      	add	r0, sp, #60	; 0x3c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitTypeDef gpioInitStructA = {0};
 8001cd8:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitTypeDef gpioInitStructureB = {0};
 8001cda:	f001 fd85 	bl	80037e8 <memset>
  GPIO_InitTypeDef gpioInitiStructureC = {0};  
 8001cde:	2214      	movs	r2, #20
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	a80a      	add	r0, sp, #40	; 0x28
 8001ce4:	f001 fd80 	bl	80037e8 <memset>
    HAL_GPIO_Init(GPIOA, &gpioInitStructA);
 8001ce8:	4898      	ldr	r0, [pc, #608]	; (8001f4c <LoopInit+0x2e8>)
    gpioInitStructA.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2502      	movs	r5, #2
    gpioInitStructA.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2701      	movs	r7, #1
 8001cee:	f240 1803 	movw	r8, #259	; 0x103
    HAL_GPIO_Init(GPIOA, &gpioInitStructA);
 8001cf2:	a914      	add	r1, sp, #80	; 0x50
    gpioInitStructA.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    gpioInitStructA.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	9517      	str	r5, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &gpioInitStructA);
 8001cfa:	f7ff fa41 	bl	8001180 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &gpioInitStructureB);
 8001cfe:	a90f      	add	r1, sp, #60	; 0x3c
 8001d00:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    gpioInitStructureB.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	e9cd 870f 	strd	r8, r7, [sp, #60]	; 0x3c
    gpioInitStructureB.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &gpioInitStructureB);
 8001d0c:	f7ff fa38 	bl	8001180 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &gpioInitiStructureC);
 8001d10:	a90a      	add	r1, sp, #40	; 0x28
 8001d12:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    gpioInitiStructureC.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
    gpioInitiStructureC.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001d1e:	f04f 08c0 	mov.w	r8, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &gpioInitiStructureC);
 8001d22:	f7ff fa2d 	bl	8001180 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	a919      	add	r1, sp, #100	; 0x64
 8001d28:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	e9cd 8519 	strd	r8, r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d30:	e9cd 451b 	strd	r4, r5, [sp, #108]	; 0x6c
    GPIO_InitStruct.Alternate = 2;
 8001d34:	951d      	str	r5, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f7ff fa23 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001d3a:	2313      	movs	r3, #19
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	e9cd 3719 	strd	r3, r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f7ff fa1c 	bl	8001180 <HAL_GPIO_Init>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	9401      	str	r4, [sp, #4]
 8001d4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001d4c:	432b      	orrs	r3, r5
 8001d4e:	6333      	str	r3, [r6, #48]	; 0x30
 8001d50:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = 2;
 8001d52:	951d      	str	r5, [sp, #116]	; 0x74
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	402b      	ands	r3, r5
 8001d56:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	e9cd 8519 	strd	r8, r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d60:	e9cd 451b 	strd	r4, r5, [sp, #108]	; 0x6c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	9b01      	ldr	r3, [sp, #4]
    tim1.Instance = TIM1;
 8001d66:	4d7a      	ldr	r5, [pc, #488]	; (8001f50 <LoopInit+0x2ec>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f7ff fa0a 	bl	8001180 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6c:	9402      	str	r4, [sp, #8]
 8001d6e:	6c73      	ldr	r3, [r6, #68]	; 0x44
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d70:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <LoopInit+0x2f0>)
 8001d72:	433b      	orrs	r3, r7
 8001d74:	6473      	str	r3, [r6, #68]	; 0x44
 8001d76:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001d78:	403b      	ands	r3, r7
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	9b02      	ldr	r3, [sp, #8]
    tim1.Instance = TIM1;
 8001d7e:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <LoopInit+0x2f4>)
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	68b3      	ldr	r3, [r6, #8]
    tim1.Init.RepetitionCounter = 0;
 8001d84:	616c      	str	r4, [r5, #20]
 8001d86:	f3c3 3342 	ubfx	r3, r3, #13, #3
    if (HAL_TIM_Base_Init(&tim1) != HAL_OK)
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	5cd2      	ldrb	r2, [r2, r3]
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <LoopInit+0x2f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	40d3      	lsrs	r3, r2
    tim1.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 100000 - 1;
 8001d94:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <LoopInit+0x2fc>)
 8001d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d9a:	3b01      	subs	r3, #1
    tim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	e9c5 3401 	strd	r3, r4, [r5, #4]
    tim1.Init.Period = period;
 8001da0:	f644 6320 	movw	r3, #20000	; 0x4e20
    tim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	e9c5 3403 	strd	r3, r4, [r5, #12]
    tim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	61ab      	str	r3, [r5, #24]
    if (HAL_TIM_Base_Init(&tim1) != HAL_OK)
 8001dac:	f7ff fd5e 	bl	800186c <HAL_TIM_Base_Init.constprop.0>
 8001db0:	b110      	cbz	r0, 8001db8 <LoopInit+0x154>
      printf("Couldn't initialize timer1. \n");
 8001db2:	486c      	ldr	r0, [pc, #432]	; (8001f64 <LoopInit+0x300>)
 8001db4:	f005 fef6 	bl	8007ba4 <puts>
  __HAL_LOCK(htim);
 8001db8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	f040 8089 	bne.w	8001ed4 <LoopInit+0x270>
      printf("Couldn't apply clock configuration on TIM1. \n");
 8001dc2:	4869      	ldr	r0, [pc, #420]	; (8001f68 <LoopInit+0x304>)
 8001dc4:	f005 feee 	bl	8007ba4 <puts>
  HAL_NVIC_SetPriority((IRQn_Type) TIM1_UP_TIM10_IRQn, (uint32_t) 0, (uint32_t) 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2019      	movs	r0, #25
 8001dce:	f7ff f9a9 	bl	8001124 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <LoopInit+0x308>)
 8001dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd8:	601a      	str	r2, [r3, #0]
  if (htim->State != HAL_TIM_STATE_READY)
 8001dda:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d126      	bne.n	8001e30 <LoopInit+0x1cc>
  htim->State = HAL_TIM_STATE_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df2:	4a59      	ldr	r2, [pc, #356]	; (8001f58 <LoopInit+0x2f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d012      	beq.n	8001e1e <LoopInit+0x1ba>
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d00f      	beq.n	8001e1e <LoopInit+0x1ba>
 8001dfe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <LoopInit+0x1ba>
 8001e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <LoopInit+0x1ba>
 8001e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <LoopInit+0x1ba>
 8001e16:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d104      	bne.n	8001e28 <LoopInit+0x1c4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e24:	2a06      	cmp	r2, #6
 8001e26:	d003      	beq.n	8001e30 <LoopInit+0x1cc>
    __HAL_TIM_ENABLE(htim);
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e30:	2500      	movs	r5, #0
  sConfig.Pulse = period/2;
 8001e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e36:	2260      	movs	r2, #96	; 0x60
 8001e38:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e3c:	2408      	movs	r4, #8
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_1);
 8001e3e:	462a      	mov	r2, r5
 8001e40:	a91e      	add	r1, sp, #120	; 0x78
 8001e42:	4843      	ldr	r0, [pc, #268]	; (8001f50 <LoopInit+0x2ec>)
  sConfig.OCNIdleState =TIM_OCNIDLESTATE_RESET;
 8001e44:	9524      	str	r5, [sp, #144]	; 0x90
  sConfig.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e46:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
  sConfig.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4a:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_1);
 8001e4e:	f7ff fbdb 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_2);
 8001e52:	2204      	movs	r2, #4
 8001e54:	a91e      	add	r1, sp, #120	; 0x78
 8001e56:	483e      	ldr	r0, [pc, #248]	; (8001f50 <LoopInit+0x2ec>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e58:	4f3c      	ldr	r7, [pc, #240]	; (8001f4c <LoopInit+0x2e8>)
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_2);
 8001e5a:	f7ff fbd5 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_3);
 8001e5e:	4622      	mov	r2, r4
 8001e60:	a91e      	add	r1, sp, #120	; 0x78
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	4c31      	ldr	r4, [pc, #196]	; (8001f28 <LoopInit+0x2c4>)
  HAL_TIM_PWM_ConfigChannel(&tim1, &sConfig, TIM_CHANNEL_3);
 8001e64:	483a      	ldr	r0, [pc, #232]	; (8001f50 <LoopInit+0x2ec>)
 8001e66:	f7ff fbcf 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	9503      	str	r5, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStructPWM = {0};
 8001e6c:	9507      	str	r5, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6323      	str	r3, [r4, #48]	; 0x30
 8001e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	9303      	str	r3, [sp, #12]
  GPIO_InitStructPWM.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e80:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructPWM.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e84:	9608      	str	r6, [sp, #32]
  GPIO_InitStructPWM.Mode = GPIO_MODE_AF_PP;
 8001e86:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e8a:	4638      	mov	r0, r7
  GPIO_InitStructPWM.Alternate = 1;
 8001e8c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructPWM.Mode = GPIO_MODE_AF_PP;
 8001e90:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStructPWM.Alternate = 1;
 8001e94:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPWM);
 8001e98:	f7ff f972 	bl	8001180 <HAL_GPIO_Init>
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9c:	9504      	str	r5, [sp, #16]
 8001e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ea0:	4333      	orrs	r3, r6
 8001ea2:	6423      	str	r3, [r4, #64]	; 0x40
 8001ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  tim3.Instance = TIM3;
 8001ea6:	4c32      	ldr	r4, [pc, #200]	; (8001f70 <LoopInit+0x30c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea8:	4033      	ands	r3, r6
 8001eaa:	9304      	str	r3, [sp, #16]
 8001eac:	9b04      	ldr	r3, [sp, #16]
  tim3.Instance = TIM3;
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <LoopInit+0x310>)
  tim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb0:	60a5      	str	r5, [r4, #8]
  tim3.Init.Prescaler = 0;
 8001eb2:	e9c4 3500 	strd	r3, r5, [r4]
  rc = HAL_TIM_Base_Init(&tim3);
 8001eb6:	4620      	mov	r0, r4
  tim3.Init.Period = periodEncoder;
 8001eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  tim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebc:	e9c4 3503 	strd	r3, r5, [r4, #12]
  tim3.Init.RepetitionCounter = 0;
 8001ec0:	6165      	str	r5, [r4, #20]
  rc = HAL_TIM_Base_Init(&tim3);
 8001ec2:	f7ff fcd3 	bl	800186c <HAL_TIM_Base_Init.constprop.0>
  if (rc != HAL_OK)
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	b1a8      	cbz	r0, 8001ef6 <LoopInit+0x292>
      printf("Couldn't Initialize TIM3, Error Code=%u\n", rc);
 8001eca:	482b      	ldr	r0, [pc, #172]	; (8001f78 <LoopInit+0x314>)
    printf("Couldn't Start CHANNEL 2 on Encoder, Error Code=%u\n", rc);
 8001ecc:	f005 fdce 	bl	8007a6c <iprintf>
    return CmdReturnBadParameter1;
 8001ed0:	2004      	movs	r0, #4
 8001ed2:	e096      	b.n	8002002 <LoopInit+0x39e>
  tmpsmcr = htim->Instance->SMCR;
 8001ed4:	682a      	ldr	r2, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001edc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001ee6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8001ef4:	e768      	b.n	8001dc8 <LoopInit+0x164>
  encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ef6:	2303      	movs	r3, #3
  encoderConfig.IC1Polarity = 0;
 8001ef8:	e9cd 3025 	strd	r3, r0, [sp, #148]	; 0x94
  encoderConfig.IC1Prescaler = 0;
 8001efc:	e9cd 8027 	strd	r8, r0, [sp, #156]	; 0x9c
  encoderConfig.IC2Polarity = 0;
 8001f00:	e9cd 3029 	strd	r3, r0, [sp, #164]	; 0xa4
  encoderConfig.IC2Prescaler = 0;
 8001f04:	e9cd 802b 	strd	r8, r0, [sp, #172]	; 0xac
  rc = HAL_TIM_Encoder_Init(&tim3, &encoderConfig);
 8001f08:	a925      	add	r1, sp, #148	; 0x94
 8001f0a:	4620      	mov	r0, r4
  encoderConfig.IC2Filter = 3;
 8001f0c:	932d      	str	r3, [sp, #180]	; 0xb4
  rc = HAL_TIM_Encoder_Init(&tim3, &encoderConfig);
 8001f0e:	f7ff fce7 	bl	80018e0 <HAL_TIM_Encoder_Init.constprop.0>
  if (rc != HAL_OK)
 8001f12:	b3a8      	cbz	r0, 8001f80 <LoopInit+0x31c>
      printf("Couldn't Initialize TIM3 Encoder, Error COde=%u\n",rc);
 8001f14:	4601      	mov	r1, r0
 8001f16:	4819      	ldr	r0, [pc, #100]	; (8001f7c <LoopInit+0x318>)
 8001f18:	e7d8      	b.n	8001ecc <LoopInit+0x268>
 8001f1a:	bf00      	nop
 8001f1c:	20000230 	.word	0x20000230
 8001f20:	3ff00000 	.word	0x3ff00000
 8001f24:	20000218 	.word	0x20000218
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	20000220 	.word	0x20000220
 8001f30:	20000a94 	.word	0x20000a94
 8001f34:	20000aa0 	.word	0x20000aa0
 8001f38:	20000a98 	.word	0x20000a98
 8001f3c:	20000ab0 	.word	0x20000ab0
 8001f40:	20000aa8 	.word	0x20000aa8
 8001f44:	20000c48 	.word	0x20000c48
 8001f48:	20000c3c 	.word	0x20000c3c
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	20000c50 	.word	0x20000c50
 8001f54:	0800c098 	.word	0x0800c098
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	0800850c 	.word	0x0800850c
 8001f68:	08008529 	.word	0x08008529
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	20000c98 	.word	0x20000c98
 8001f74:	40000400 	.word	0x40000400
 8001f78:	08008556 	.word	0x08008556
 8001f7c:	0800857f 	.word	0x0800857f
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f80:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f84:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f88:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f8c:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f90:	2a01      	cmp	r2, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f92:	b2db      	uxtb	r3, r3
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f94:	d138      	bne.n	8002008 <LoopInit+0x3a4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d136      	bne.n	8002008 <LoopInit+0x3a4>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f9a:	6823      	ldr	r3, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f9c:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  TIMx->CCER &= ~tmp;
 8001fa4:	6a1a      	ldr	r2, [r3, #32]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001fbc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001fc0:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001fc4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fcc:	2901      	cmp	r1, #1
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001fce:	b2d2      	uxtb	r2, r2
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fd0:	d11d      	bne.n	800200e <LoopInit+0x3aa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fd2:	2a01      	cmp	r2, #1
 8001fd4:	d11b      	bne.n	800200e <LoopInit+0x3aa>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fd6:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fda:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8001fde:	6a1a      	ldr	r2, [r3, #32]
 8001fe0:	f022 0210 	bic.w	r2, r2, #16
 8001fe4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	f042 0210 	orr.w	r2, r2, #16
 8001fec:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002000:	61bb      	str	r3, [r7, #24]
}
 8002002:	b02e      	add	sp, #184	; 0xb8
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printf("Couldn't Start CHANNEL 1 on Encoder, Error Code=%u\n",rc);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <LoopInit+0x3b0>)
 800200a:	2101      	movs	r1, #1
 800200c:	e75e      	b.n	8001ecc <LoopInit+0x268>
    printf("Couldn't Start CHANNEL 2 on Encoder, Error Code=%u\n", rc);
 800200e:	4802      	ldr	r0, [pc, #8]	; (8002018 <LoopInit+0x3b4>)
 8002010:	2101      	movs	r1, #1
 8002012:	e75b      	b.n	8001ecc <LoopInit+0x268>
 8002014:	080085b0 	.word	0x080085b0
 8002018:	080085e4 	.word	0x080085e4

0800201c <EncoderInit>:
{
 800201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002020:	4605      	mov	r5, r0
{
 8002022:	b09a      	sub	sp, #104	; 0x68
 if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002024:	2800      	cmp	r0, #0
 8002026:	f040 8150 	bne.w	80022ca <EncoderInit+0x2ae>
  __HAL_RCC_TIM1_CLK_ENABLE();
 800202a:	4baa      	ldr	r3, [pc, #680]	; (80022d4 <EncoderInit+0x2b8>)
 800202c:	9002      	str	r0, [sp, #8]
 800202e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  htim2.Instance = TIM1;
 8002030:	4ca9      	ldr	r4, [pc, #676]	; (80022d8 <EncoderInit+0x2bc>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203e:	4602      	mov	r2, r0
 8002040:	4601      	mov	r1, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002042:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002044:	201d      	movs	r0, #29
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002048:	f7ff f86c 	bl	8001124 <HAL_NVIC_SetPriority>
 800204c:	4ba3      	ldr	r3, [pc, #652]	; (80022dc <EncoderInit+0x2c0>)
 800204e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002052:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002054:	4629      	mov	r1, r5
 8002056:	221c      	movs	r2, #28
 8002058:	a80a      	add	r0, sp, #40	; 0x28
 800205a:	f001 fbc5 	bl	80037e8 <memset>
  htim2.Init.Prescaler = 49;
 800205e:	4aa0      	ldr	r2, [pc, #640]	; (80022e0 <EncoderInit+0x2c4>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002060:	60a5      	str	r5, [r4, #8]
  htim2.Init.Prescaler = 49;
 8002062:	2331      	movs	r3, #49	; 0x31
 8002064:	e9c4 2300 	strd	r2, r3, [r4]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8002068:	4620      	mov	r0, r4
  htim2.Init.Period = 199;
 800206a:	23c7      	movs	r3, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	e9cd 5503 	strd	r5, r5, [sp, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002074:	e9c4 5505 	strd	r5, r5, [r4, #20]
  rcOne= HAL_TIM_Base_Init(&htim2);
 8002078:	f7ff fbf8 	bl	800186c <HAL_TIM_Base_Init.constprop.0>
   if(rcOne!= HAL_OK)
 800207c:	b110      	cbz	r0, 8002084 <EncoderInit+0x68>
    printf("Error");
 800207e:	4899      	ldr	r0, [pc, #612]	; (80022e4 <EncoderInit+0x2c8>)
 8002080:	f005 fcf4 	bl	8007a6c <iprintf>
  __HAL_LOCK(htim);
 8002084:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	f040 808d 	bne.w	80021a8 <EncoderInit+0x18c>
    printf("Error");
 800208e:	4895      	ldr	r0, [pc, #596]	; (80022e4 <EncoderInit+0x2c8>)
 8002090:	f005 fcec 	bl	8007a6c <iprintf>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002094:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002098:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800209c:	b90b      	cbnz	r3, 80020a2 <EncoderInit+0x86>
    htim->Lock = HAL_UNLOCKED;
 800209e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80020a2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a4:	4990      	ldr	r1, [pc, #576]	; (80022e8 <EncoderInit+0x2cc>)
 80020a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	f7ff fb5e 	bl	800176c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80020b6:	4888      	ldr	r0, [pc, #544]	; (80022d8 <EncoderInit+0x2bc>)
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80020bc:	a903      	add	r1, sp, #12
 80020be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80020c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80020c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80020d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80020da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  rcOne = HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80020e4:	f7ff fb90 	bl	8001808 <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
  if(rcOne!= HAL_OK)
 80020e8:	b110      	cbz	r0, 80020f0 <EncoderInit+0xd4>
    printf("Error");
 80020ea:	487e      	ldr	r0, [pc, #504]	; (80022e4 <EncoderInit+0x2c8>)
 80020ec:	f005 fcbe 	bl	8007a6c <iprintf>
  sConfigOC.Pulse = 0;
 80020f0:	2200      	movs	r2, #0
 80020f2:	2360      	movs	r3, #96	; 0x60
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80020f4:	4878      	ldr	r0, [pc, #480]	; (80022d8 <EncoderInit+0x2bc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f6:	9210      	str	r2, [sp, #64]	; 0x40
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80020f8:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.Pulse = 0;
 80020fa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020fe:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002102:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8002106:	f7ff fa7f 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 800210a:	b110      	cbz	r0, 8002112 <EncoderInit+0xf6>
    printf("Error");
 800210c:	4875      	ldr	r0, [pc, #468]	; (80022e4 <EncoderInit+0x2c8>)
 800210e:	f005 fcad 	bl	8007a6c <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8002112:	4871      	ldr	r0, [pc, #452]	; (80022d8 <EncoderInit+0x2bc>)
 8002114:	2204      	movs	r2, #4
 8002116:	a90a      	add	r1, sp, #40	; 0x28
 8002118:	f7ff fa76 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 800211c:	b110      	cbz	r0, 8002124 <EncoderInit+0x108>
    printf("Error");
 800211e:	4871      	ldr	r0, [pc, #452]	; (80022e4 <EncoderInit+0x2c8>)
 8002120:	f005 fca4 	bl	8007a6c <iprintf>
  rcOne = HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8002124:	486c      	ldr	r0, [pc, #432]	; (80022d8 <EncoderInit+0x2bc>)
 8002126:	2208      	movs	r2, #8
 8002128:	a90a      	add	r1, sp, #40	; 0x28
 800212a:	f7ff fa6d 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
  if(rcOne!= HAL_OK)
 800212e:	b110      	cbz	r0, 8002136 <EncoderInit+0x11a>
    printf("Error");
 8002130:	486c      	ldr	r0, [pc, #432]	; (80022e4 <EncoderInit+0x2c8>)
 8002132:	f005 fc9b 	bl	8007a6c <iprintf>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002136:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d045      	beq.n	80021ca <EncoderInit+0x1ae>
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002146:	2300      	movs	r3, #0
 8002148:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   __HAL_RCC_TIM3_CLK_ENABLE();
 800214c:	2500      	movs	r5, #0
 800214e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80022d4 <EncoderInit+0x2b8>
 8002152:	9501      	str	r5, [sp, #4]
 8002154:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
  htim3.Instance = TIM3;
 8002158:	4c64      	ldr	r4, [pc, #400]	; (80022ec <EncoderInit+0x2d0>)
   __HAL_RCC_TIM3_CLK_ENABLE();
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002162:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	9301      	str	r3, [sp, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 800216c:	4629      	mov	r1, r5
 800216e:	2218      	movs	r2, #24
 8002170:	a814      	add	r0, sp, #80	; 0x50
   __HAL_RCC_TIM3_CLK_ENABLE();
 8002172:	9b01      	ldr	r3, [sp, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002174:	f001 fb38 	bl	80037e8 <memset>
  htim3.Instance = TIM3;
 8002178:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <EncoderInit+0x2d4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 0;
 800217c:	e9c4 3500 	strd	r3, r5, [r4]
  htim3.Init.Period = 65535;
 8002180:	f64f 73ff 	movw	r3, #65535	; 0xffff
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002184:	2602      	movs	r6, #2
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002186:	2701      	movs	r7, #1
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800218c:	a911      	add	r1, sp, #68	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800218e:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002190:	4620      	mov	r0, r4
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002192:	e9cd 3611 	strd	r3, r6, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002196:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219a:	61a5      	str	r5, [r4, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800219c:	9713      	str	r7, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800219e:	f7ff fb9f 	bl	80018e0 <HAL_TIM_Encoder_Init.constprop.0>
 80021a2:	b1b0      	cbz	r0, 80021d2 <EncoderInit+0x1b6>
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <EncoderInit+0x18a>
  tmpsmcr = htim->Instance->SMCR;
 80021a8:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80021b0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021ba:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	2301      	movs	r3, #1
 80021be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021c2:	2300      	movs	r3, #0
 80021c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if(rcOne!= HAL_OK)
 80021c8:	e764      	b.n	8002094 <EncoderInit+0x78>
    printf("Error");
 80021ca:	4846      	ldr	r0, [pc, #280]	; (80022e4 <EncoderInit+0x2c8>)
 80021cc:	f005 fc4e 	bl	8007a6c <iprintf>
 80021d0:	e7bc      	b.n	800214c <EncoderInit+0x130>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d2:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021d6:	a903      	add	r1, sp, #12
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff fb15 	bl	8001808 <HAL_TIMEx_MasterConfigSynchronization.constprop.0>
 80021de:	4605      	mov	r5, r0
 80021e0:	b108      	cbz	r0, 80021e6 <EncoderInit+0x1ca>
 80021e2:	b672      	cpsid	i
 80021e4:	e7fe      	b.n	80021e4 <EncoderInit+0x1c8>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	9000      	str	r0, [sp, #0]
 80021e8:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 80021f4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80022f4 <EncoderInit+0x2d8>
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021fc:	9709      	str	r7, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   
 8002206:	e9cd 0007 	strd	r0, r0, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800220e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	e9cd 3605 	strd	r3, r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f7fe ffb3 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 800221a:	2333      	movs	r3, #51	; 0x33
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f7fe ffac 	bl	8001180 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f508 6080 	add.w	r0, r8, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	e9cd 7705 	strd	r7, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f7fe ffa4 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;  // encoder pin configuration
 8002238:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 800223a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002244:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8002246:	f7fe ff9b 	bl	8001180 <HAL_GPIO_Init>
 800224a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800224e:	f8c8 3018 	str.w	r3, [r8, #24]
 8002252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002256:	f8c8 3018 	str.w	r3, [r8, #24]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800225a:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800225e:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002262:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002266:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800226a:	2801      	cmp	r0, #1
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800226c:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800226e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002270:	b2db      	uxtb	r3, r3
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002272:	d12a      	bne.n	80022ca <EncoderInit+0x2ae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002274:	2901      	cmp	r1, #1
 8002276:	d128      	bne.n	80022ca <EncoderInit+0x2ae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002278:	2a01      	cmp	r2, #1
 800227a:	d126      	bne.n	80022ca <EncoderInit+0x2ae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800227c:	2b01      	cmp	r3, #1
 800227e:	d124      	bne.n	80022ca <EncoderInit+0x2ae>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002280:	6823      	ldr	r3, [r4, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002282:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002286:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800228a:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800228e:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  TIMx->CCER &= ~tmp;
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800229a:	6a1a      	ldr	r2, [r3, #32]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	f022 0210 	bic.w	r2, r2, #16
 80022a8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	f042 0210 	orr.w	r2, r2, #16
 80022b0:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	f042 0202 	orr.w	r2, r2, #2
 80022b8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	f042 0204 	orr.w	r2, r2, #4
 80022c0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	2000      	movs	r0, #0
 80022cc:	b01a      	add	sp, #104	; 0x68
 80022ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	20000ac8 	.word	0x20000ac8
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	40010000 	.word	0x40010000
 80022e4:	08008618 	.word	0x08008618
 80022e8:	20000acc 	.word	0x20000acc
 80022ec:	20000b10 	.word	0x20000b10
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40020000 	.word	0x40020000

080022f8 <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80022f8:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80022fa:	4909      	ldr	r1, [pc, #36]	; (8002320 <fetch_string_arg+0x28>)
{
 80022fc:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80022fe:	2000      	movs	r0, #0
 8002300:	f002 fdd8 	bl	8004eb4 <strtok>
  if(p == NULL) {
 8002304:	4604      	mov	r4, r0
 8002306:	b140      	cbz	r0, 800231a <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8002308:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 800230a:	f7fd ff83 	bl	8000214 <strlen>
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <fetch_string_arg+0x2c>)
 8002310:	3001      	adds	r0, #1
 8002312:	4404      	add	r4, r0
 8002314:	601c      	str	r4, [r3, #0]
  return 0;
 8002316:	2000      	movs	r0, #0
}
 8002318:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 800231a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800231e:	e7fb      	b.n	8002318 <fetch_string_arg+0x20>
 8002320:	0800861e 	.word	0x0800861e
 8002324:	20000a84 	.word	0x20000a84

08002328 <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8002328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	460c      	mov	r4, r1
 800232e:	b086      	sub	sp, #24
 8002330:	4616      	mov	r6, r2
 8002332:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8002334:	4605      	mov	r5, r0
 8002336:	2800      	cmp	r0, #0
 8002338:	d046      	beq.n	80023c8 <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800233a:	6800      	ldr	r0, [r0, #0]
 800233c:	f7fe feb4 	bl	80010a8 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8002340:	88aa      	ldrh	r2, [r5, #4]
 8002342:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002344:	9201      	str	r2, [sp, #4]
 8002346:	79ab      	ldrb	r3, [r5, #6]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4601      	mov	r1, r0
 800234c:	4633      	mov	r3, r6
 800234e:	4820      	ldr	r0, [pc, #128]	; (80023d0 <DecodeRegister+0xa8>)
 8002350:	4632      	mov	r2, r6
 8002352:	f005 fb8b 	bl	8007a6c <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8002356:	68ac      	ldr	r4, [r5, #8]
 8002358:	b3a4      	cbz	r4, 80023c4 <DecodeRegister+0x9c>
 800235a:	b3af      	cbz	r7, 80023c8 <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800235c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80023d4 <DecodeRegister+0xac>
 8002360:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80023d8 <DecodeRegister+0xb0>
 8002364:	f8df a074 	ldr.w	sl, [pc, #116]	; 80023dc <DecodeRegister+0xb4>
 8002368:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 800236a:	2700      	movs	r7, #0
 800236c:	89ab      	ldrh	r3, [r5, #12]
 800236e:	429f      	cmp	r7, r3
 8002370:	d305      	bcc.n	800237e <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8002372:	200a      	movs	r0, #10
  }

}
 8002374:	b006      	add	sp, #24
 8002376:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 800237a:	f005 bb8f 	b.w	8007a9c <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800237e:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002382:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8002386:	2301      	movs	r3, #1
 8002388:	4093      	lsls	r3, r2
 800238a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 800238e:	3b01      	subs	r3, #1
 8002390:	fa26 f202 	lsr.w	r2, r6, r2
 8002394:	4013      	ands	r3, r2
 8002396:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8002398:	f7fe fe86 	bl	80010a8 <Uncompress>
	 (unsigned int)(f->width),
 800239c:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80023a0:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 80023a4:	9b05      	ldr	r3, [sp, #20]
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	4601      	mov	r1, r0
 80023aa:	2a01      	cmp	r2, #1
 80023ac:	bf8c      	ite	hi
 80023ae:	4640      	movhi	r0, r8
 80023b0:	4648      	movls	r0, r9
 80023b2:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4650      	mov	r0, sl
 80023ba:	f005 fb57 	bl	8007a6c <iprintf>
    for(i=0; i<r->numFields; i++) {
 80023be:	3701      	adds	r7, #1
 80023c0:	3408      	adds	r4, #8
 80023c2:	e7d3      	b.n	800236c <DecodeRegister+0x44>
  if(decodeFields) {
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d1d4      	bne.n	8002372 <DecodeRegister+0x4a>
}
 80023c8:	b006      	add	sp, #24
 80023ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ce:	bf00      	nop
 80023d0:	08008631 	.word	0x08008631
 80023d4:	08008625 	.word	0x08008625
 80023d8:	0800862b 	.word	0x0800862b
 80023dc:	0800866c 	.word	0x0800866c

080023e0 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80023e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e4:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80023e6:	6800      	ldr	r0, [r0, #0]
{
 80023e8:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80023ea:	f7fe fe5d 	bl	80010a8 <Uncompress>
 80023ee:	6862      	ldr	r2, [r4, #4]
 80023f0:	4601      	mov	r1, r0
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <DecodePeripheral+0x4c>)
 80023f4:	f005 fb3a 	bl	8007a6c <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 80023f8:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80023fc:	f1b8 0f00 	cmp.w	r8, #0
 8002400:	d112      	bne.n	8002428 <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8002402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8002406:	4639      	mov	r1, r7
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff fbb3 	bl	8001b74 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 800240e:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8002410:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8002412:	4633      	mov	r3, r6
 8002414:	4638      	mov	r0, r7
 8002416:	f7ff ff87 	bl	8002328 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 800241a:	3501      	adds	r5, #1
 800241c:	89a3      	ldrh	r3, [r4, #12]
 800241e:	429d      	cmp	r5, r3
 8002420:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8002424:	d3ef      	bcc.n	8002406 <DecodePeripheral+0x26>
 8002426:	e7ec      	b.n	8002402 <DecodePeripheral+0x22>
 8002428:	2500      	movs	r5, #0
 800242a:	e7f7      	b.n	800241c <DecodePeripheral+0x3c>
 800242c:	08008695 	.word	0x08008695

08002430 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002434:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8002436:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8002438:	460e      	mov	r6, r1
  printf("\t");
 800243a:	f005 fb2f 	bl	8007a9c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 800243e:	4f11      	ldr	r7, [pc, #68]	; (8002484 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8002440:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8002488 <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8002444:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800248c <DecodePrintRegisters+0x5c>
 8002448:	3510      	adds	r5, #16
  col = 8;
 800244a:	2408      	movs	r4, #8
  while(count--) {
 800244c:	3e01      	subs	r6, #1
 800244e:	d201      	bcs.n	8002454 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8002450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8002454:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8002458:	f7fe fe26 	bl	80010a8 <Uncompress>
 800245c:	4601      	mov	r1, r0
 800245e:	4638      	mov	r0, r7
 8002460:	f005 fb04 	bl	8007a6c <iprintf>
 8002464:	4420      	add	r0, r4
 8002466:	b2c4      	uxtb	r4, r0
    if(count) {
 8002468:	b156      	cbz	r6, 8002480 <DecodePrintRegisters+0x50>
      col += printf(", ");
 800246a:	4640      	mov	r0, r8
 800246c:	f005 fafe 	bl	8007a6c <iprintf>
 8002470:	4420      	add	r0, r4
 8002472:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8002474:	2c46      	cmp	r4, #70	; 0x46
 8002476:	d903      	bls.n	8002480 <DecodePrintRegisters+0x50>
	printf("\n\t");
 8002478:	4648      	mov	r0, r9
 800247a:	f005 faf7 	bl	8007a6c <iprintf>
	col = 8;
 800247e:	2408      	movs	r4, #8
    r++;
 8002480:	3510      	adds	r5, #16
 8002482:	e7e3      	b.n	800244c <DecodePrintRegisters+0x1c>
 8002484:	0800849f 	.word	0x0800849f
 8002488:	0800862e 	.word	0x0800862e
 800248c:	080086bd 	.word	0x080086bd

08002490 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 8002494:	2009      	movs	r0, #9
 8002496:	f005 fb01 	bl	8007a9c <putchar>
  for(; p->name != NULL; p++) {
 800249a:	4d0f      	ldr	r5, [pc, #60]	; (80024d8 <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 800249c:	4e0f      	ldr	r6, [pc, #60]	; (80024dc <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 800249e:	4f10      	ldr	r7, [pc, #64]	; (80024e0 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 80024a0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80024e4 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 80024a4:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 80024a6:	6828      	ldr	r0, [r5, #0]
 80024a8:	b908      	cbnz	r0, 80024ae <DecodePrintPeripherals.constprop.0+0x1e>
}
 80024aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 80024ae:	f7fe fdfb 	bl	80010a8 <Uncompress>
 80024b2:	4601      	mov	r1, r0
 80024b4:	4630      	mov	r0, r6
 80024b6:	f005 fad9 	bl	8007a6c <iprintf>
    if((p+1)->name != NULL) {
 80024ba:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 80024bc:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 80024be:	b14b      	cbz	r3, 80024d4 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 80024c0:	4638      	mov	r0, r7
 80024c2:	f005 fad3 	bl	8007a6c <iprintf>
 80024c6:	4404      	add	r4, r0
      if(col > 70) {
 80024c8:	2c46      	cmp	r4, #70	; 0x46
 80024ca:	d903      	bls.n	80024d4 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 80024cc:	4640      	mov	r0, r8
 80024ce:	f005 facd 	bl	8007a6c <iprintf>
	col = 8;
 80024d2:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 80024d4:	3510      	adds	r5, #16
 80024d6:	e7e6      	b.n	80024a6 <DecodePrintPeripherals.constprop.0+0x16>
 80024d8:	08010c6c 	.word	0x08010c6c
 80024dc:	0800849f 	.word	0x0800849f
 80024e0:	0800862e 	.word	0x0800862e
 80024e4:	080086bd 	.word	0x080086bd

080024e8 <TaskInput>:
{
 80024e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 80024ec:	4d6b      	ldr	r5, [pc, #428]	; (800269c <TaskInput+0x1b4>)
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	b123      	cbz	r3, 80024fc <TaskInput+0x14>
    printf("ARMON>");
 80024f2:	486b      	ldr	r0, [pc, #428]	; (80026a0 <TaskInput+0x1b8>)
 80024f4:	f005 faba 	bl	8007a6c <iprintf>
    printPrompt = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 80024fc:	2201      	movs	r2, #1
 80024fe:	f10d 010f 	add.w	r1, sp, #15
 8002502:	2000      	movs	r0, #0
 8002504:	f7fe fdaa 	bl	800105c <TerminalRead>
  if(rc) goto ProcessCharacter;
 8002508:	2800      	cmp	r0, #0
 800250a:	d054      	beq.n	80025b6 <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 800250c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d001      	beq.n	8002518 <TaskInput+0x30>
 8002514:	2b7f      	cmp	r3, #127	; 0x7f
 8002516:	d115      	bne.n	8002544 <TaskInput+0x5c>
 8002518:	4c62      	ldr	r4, [pc, #392]	; (80026a4 <TaskInput+0x1bc>)
 800251a:	6822      	ldr	r2, [r4, #0]
 800251c:	b192      	cbz	r2, 8002544 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 800251e:	4862      	ldr	r0, [pc, #392]	; (80026a8 <TaskInput+0x1c0>)
 8002520:	f005 faa4 	bl	8007a6c <iprintf>
    buf--;     /* Then remove it from the buffer */
 8002524:	4a61      	ldr	r2, [pc, #388]	; (80026ac <TaskInput+0x1c4>)
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	3b01      	subs	r3, #1
 800252a:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8002532:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002536:	f1a3 020d 	sub.w	r2, r3, #13
 800253a:	4253      	negs	r3, r2
 800253c:	4153      	adcs	r3, r2
 800253e:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <TaskInput+0x1c8>)
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e038      	b.n	80025b6 <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8002544:	2b21      	cmp	r3, #33	; 0x21
 8002546:	d12a      	bne.n	800259e <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 8002548:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <TaskInput+0x1cc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8002550:	4c59      	ldr	r4, [pc, #356]	; (80026b8 <TaskInput+0x1d0>)
 8002552:	495a      	ldr	r1, [pc, #360]	; (80026bc <TaskInput+0x1d4>)
 8002554:	4620      	mov	r0, r4
 8002556:	f005 fb47 	bl	8007be8 <strcpy>
      printf("%s",input);
 800255a:	4621      	mov	r1, r4
 800255c:	4858      	ldr	r0, [pc, #352]	; (80026c0 <TaskInput+0x1d8>)
 800255e:	f005 fa85 	bl	8007a6c <iprintf>
      count = strlen(input);
 8002562:	4620      	mov	r0, r4
 8002564:	f7fd fe56 	bl	8000214 <strlen>
 8002568:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <TaskInput+0x1bc>)
 800256a:	6018      	str	r0, [r3, #0]
      buf = input+count;
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <TaskInput+0x1c4>)
 800256e:	4404      	add	r4, r0
 8002570:	601c      	str	r4, [r3, #0]
    printf("\n");
 8002572:	200a      	movs	r0, #10
 8002574:	f005 fa92 	bl	8007a9c <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 8002578:	494f      	ldr	r1, [pc, #316]	; (80026b8 <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 800257a:	4c52      	ldr	r4, [pc, #328]	; (80026c4 <TaskInput+0x1dc>)
  i = len;
 800257c:	2350      	movs	r3, #80	; 0x50
 800257e:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8002580:	3b01      	subs	r3, #1
 8002582:	1c5f      	adds	r7, r3, #1
 8002584:	780a      	ldrb	r2, [r1, #0]
 8002586:	4608      	mov	r0, r1
 8002588:	f101 0101 	add.w	r1, r1, #1
 800258c:	d036      	beq.n	80025fc <TaskInput+0x114>
 800258e:	2a00      	cmp	r2, #0
 8002590:	d060      	beq.n	8002654 <TaskInput+0x16c>
 8002592:	5d12      	ldrb	r2, [r2, r4]
 8002594:	0717      	lsls	r7, r2, #28
 8002596:	d4f3      	bmi.n	8002580 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 8002598:	2b00      	cmp	r3, #0
 800259a:	d130      	bne.n	80025fe <TaskInput+0x116>
 800259c:	e05a      	b.n	8002654 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 800259e:	4a49      	ldr	r2, [pc, #292]	; (80026c4 <TaskInput+0x1dc>)
 80025a0:	5c9a      	ldrb	r2, [r3, r2]
 80025a2:	f012 0f97 	tst.w	r2, #151	; 0x97
 80025a6:	d015      	beq.n	80025d4 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 80025a8:	493e      	ldr	r1, [pc, #248]	; (80026a4 <TaskInput+0x1bc>)
 80025aa:	680a      	ldr	r2, [r1, #0]
 80025ac:	2a4f      	cmp	r2, #79	; 0x4f
 80025ae:	d905      	bls.n	80025bc <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 80025b0:	2007      	movs	r0, #7
 80025b2:	f005 fa73 	bl	8007a9c <putchar>
}
 80025b6:	b004      	add	sp, #16
 80025b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 80025bc:	4c3b      	ldr	r4, [pc, #236]	; (80026ac <TaskInput+0x1c4>)
 80025be:	6820      	ldr	r0, [r4, #0]
 80025c0:	7003      	strb	r3, [r0, #0]
 80025c2:	1c45      	adds	r5, r0, #1
      count++;
 80025c4:	3201      	adds	r2, #1
      printf("%c",c);
 80025c6:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 80025ca:	6025      	str	r5, [r4, #0]
      count++;
 80025cc:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 80025ce:	f005 fa65 	bl	8007a9c <putchar>
 80025d2:	e7ae      	b.n	8002532 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 80025d4:	2b0d      	cmp	r3, #13
 80025d6:	d005      	beq.n	80025e4 <TaskInput+0xfc>
 80025d8:	2b0a      	cmp	r3, #10
 80025da:	d1aa      	bne.n	8002532 <TaskInput+0x4a>
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <TaskInput+0x1c8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1a6      	bne.n	8002532 <TaskInput+0x4a>
    *buf = '\0';
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <TaskInput+0x1c4>)
    strcpy(input_b,input);
 80025e6:	4934      	ldr	r1, [pc, #208]	; (80026b8 <TaskInput+0x1d0>)
    *buf = '\0';
 80025e8:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80025ea:	4834      	ldr	r0, [pc, #208]	; (80026bc <TaskInput+0x1d4>)
    *buf = '\0';
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80025f0:	f005 fafa 	bl	8007be8 <strcpy>
    saved = 1;
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <TaskInput+0x1cc>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e7ba      	b.n	8002572 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 80025fc:	b352      	cbz	r2, 8002654 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 80025fe:	4932      	ldr	r1, [pc, #200]	; (80026c8 <TaskInput+0x1e0>)
 8002600:	f002 fc58 	bl	8004eb4 <strtok>
  if(p==NULL) {
 8002604:	4604      	mov	r4, r0
 8002606:	b920      	cbnz	r0, 8002612 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8002608:	4930      	ldr	r1, [pc, #192]	; (80026cc <TaskInput+0x1e4>)
 800260a:	4831      	ldr	r0, [pc, #196]	; (80026d0 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 800260c:	f005 fa2e 	bl	8007a6c <iprintf>
  return CmdReturnNotFound;
 8002610:	e020      	b.n	8002654 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 8002612:	4930      	ldr	r1, [pc, #192]	; (80026d4 <TaskInput+0x1ec>)
 8002614:	f005 face 	bl	8007bb4 <strcasecmp>
 8002618:	bb58      	cbnz	r0, 8002672 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 800261a:	492b      	ldr	r1, [pc, #172]	; (80026c8 <TaskInput+0x1e0>)
 800261c:	f002 fc4a 	bl	8004eb4 <strtok>
    if(p == NULL) {
 8002620:	4604      	mov	r4, r0
 8002622:	b318      	cbz	r0, 800266c <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 8002624:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 8002628:	4620      	mov	r0, r4
 800262a:	f7fd fdf3 	bl	8000214 <strlen>
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8002630:	4f2a      	ldr	r7, [pc, #168]	; (80026dc <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8002632:	3001      	adds	r0, #1
 8002634:	4420      	add	r0, r4
 8002636:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	b9e9      	cbnz	r1, 8002678 <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 800263c:	4828      	ldr	r0, [pc, #160]	; (80026e0 <TaskInput+0x1f8>)
 800263e:	4621      	mov	r1, r4
 8002640:	e7e4      	b.n	800260c <TaskInput+0x124>
	if(t->help != NULL) {
 8002642:	68a2      	ldr	r2, [r4, #8]
 8002644:	b172      	cbz	r2, 8002664 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8002646:	4638      	mov	r0, r7
 8002648:	f005 fa10 	bl	8007a6c <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 800264c:	340c      	adds	r4, #12
 800264e:	6821      	ldr	r1, [r4, #0]
 8002650:	2900      	cmp	r1, #0
 8002652:	d1f6      	bne.n	8002642 <TaskInput+0x15a>
    printPrompt = 1;
 8002654:	2301      	movs	r3, #1
 8002656:	602b      	str	r3, [r5, #0]
    buf = input;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <TaskInput+0x1c4>)
 800265a:	601e      	str	r6, [r3, #0]
    count = 0;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <TaskInput+0x1bc>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e766      	b.n	8002532 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8002664:	6863      	ldr	r3, [r4, #4]
 8002666:	2001      	movs	r0, #1
 8002668:	4798      	blx	r3
 800266a:	e7ef      	b.n	800264c <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 800266c:	4c1b      	ldr	r4, [pc, #108]	; (80026dc <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800266e:	4f1d      	ldr	r7, [pc, #116]	; (80026e4 <TaskInput+0x1fc>)
 8002670:	e7ed      	b.n	800264e <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8002672:	f04f 0800 	mov.w	r8, #0
 8002676:	e7d7      	b.n	8002628 <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 8002678:	4620      	mov	r0, r4
 800267a:	9101      	str	r1, [sp, #4]
 800267c:	f005 fa9a 	bl	8007bb4 <strcasecmp>
 8002680:	9901      	ldr	r1, [sp, #4]
 8002682:	b948      	cbnz	r0, 8002698 <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 8002684:	f1b8 0f00 	cmp.w	r8, #0
 8002688:	d002      	beq.n	8002690 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 800268a:	4817      	ldr	r0, [pc, #92]	; (80026e8 <TaskInput+0x200>)
 800268c:	f005 f9ee 	bl	8007a6c <iprintf>
      return t->func(arg);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4640      	mov	r0, r8
 8002694:	4798      	blx	r3
 8002696:	e7dd      	b.n	8002654 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 8002698:	370c      	adds	r7, #12
 800269a:	e7cd      	b.n	8002638 <TaskInput+0x150>
 800269c:	20000018 	.word	0x20000018
 80026a0:	080086c0 	.word	0x080086c0
 80026a4:	20000a8c 	.word	0x20000a8c
 80026a8:	080086c7 	.word	0x080086c7
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000a90 	.word	0x20000a90
 80026b4:	20000c40 	.word	0x20000c40
 80026b8:	20000b9c 	.word	0x20000b9c
 80026bc:	20000bec 	.word	0x20000bec
 80026c0:	0800849f 	.word	0x0800849f
 80026c4:	080142ae 	.word	0x080142ae
 80026c8:	0800861e 	.word	0x0800861e
 80026cc:	08014294 	.word	0x08014294
 80026d0:	080086cb 	.word	0x080086cb
 80026d4:	080086fb 	.word	0x080086fb
 80026d8:	20000a84 	.word	0x20000a84
 80026dc:	08014848 	.word	0x08014848
 80026e0:	08008711 	.word	0x08008711
 80026e4:	08008700 	.word	0x08008700
 80026e8:	0800870c 	.word	0x0800870c

080026ec <fetch_uint32_arg>:
{
 80026ec:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 80026ee:	490c      	ldr	r1, [pc, #48]	; (8002720 <fetch_uint32_arg+0x34>)
{
 80026f0:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f002 fbde 	bl	8004eb4 <strtok>
  if(p == NULL) {
 80026f8:	4604      	mov	r4, r0
 80026fa:	b168      	cbz	r0, 8002718 <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	4611      	mov	r1, r2
 8002700:	f002 fca6 	bl	8005050 <strtoul>
 8002704:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 8002706:	4620      	mov	r0, r4
 8002708:	f7fd fd84 	bl	8000214 <strlen>
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <fetch_uint32_arg+0x38>)
 800270e:	3001      	adds	r0, #1
 8002710:	4404      	add	r4, r0
 8002712:	601c      	str	r4, [r3, #0]
  return 0;
 8002714:	2000      	movs	r0, #0
}
 8002716:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8002718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800271c:	e7fb      	b.n	8002716 <fetch_uint32_arg+0x2a>
 800271e:	bf00      	nop
 8002720:	0800861e 	.word	0x0800861e
 8002724:	20000a84 	.word	0x20000a84

08002728 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8002728:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800272a:	b9d8      	cbnz	r0, 8002764 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 800272c:	a801      	add	r0, sp, #4
 800272e:	f7ff ffdd 	bl	80026ec <fetch_uint32_arg>
  if(rc) {
 8002732:	b128      	cbz	r0, 8002740 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8002734:	480e      	ldr	r0, [pc, #56]	; (8002770 <CmdLed+0x48>)
 8002736:	f005 fa35 	bl	8007ba4 <puts>
    return CmdReturnBadParameter1;
 800273a:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 800273c:	b002      	add	sp, #8
 800273e:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8002740:	9901      	ldr	r1, [sp, #4]
 8002742:	480c      	ldr	r0, [pc, #48]	; (8002774 <CmdLed+0x4c>)
 8002744:	f005 f992 	bl	8007a6c <iprintf>
  val = val ? 1 : 0;
 8002748:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 800274a:	480b      	ldr	r0, [pc, #44]	; (8002778 <CmdLed+0x50>)
  val = val ? 1 : 0;
 800274c:	3b00      	subs	r3, #0
 800274e:	bf18      	it	ne
 8002750:	2301      	movne	r3, #1
 8002752:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8002754:	f005 fa26 	bl	8007ba4 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8002758:	f89d 0004 	ldrb.w	r0, [sp, #4]
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <CmdLed+0x54>)
  if(PinState != GPIO_PIN_RESET)
 800275e:	b118      	cbz	r0, 8002768 <CmdLed+0x40>
    GPIOx->BSRR = GPIO_Pin;
 8002760:	2220      	movs	r2, #32
 8002762:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002764:	2000      	movs	r0, #0
 8002766:	e7e9      	b.n	800273c <CmdLed+0x14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002768:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	e7e5      	b.n	800273c <CmdLed+0x14>
 8002770:	08008746 	.word	0x08008746
 8002774:	08008774 	.word	0x08008774
 8002778:	08008790 	.word	0x08008790
 800277c:	40020000 	.word	0x40020000

08002780 <SetSpeed>:
{
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(fetch_uint32_arg(&direction)){
 8002782:	4839      	ldr	r0, [pc, #228]	; (8002868 <SetSpeed+0xe8>)
 8002784:	f7ff ffb2 	bl	80026ec <fetch_uint32_arg>
 8002788:	4605      	mov	r5, r0
 800278a:	b120      	cbz	r0, 8002796 <SetSpeed+0x16>
    printf("Please provide direction either 0 or 1. \n");
 800278c:	4837      	ldr	r0, [pc, #220]	; (800286c <SetSpeed+0xec>)
 800278e:	f005 fa09 	bl	8007ba4 <puts>
      return CmdReturnBadParameter1;
 8002792:	2004      	movs	r0, #4
 8002794:	e034      	b.n	8002800 <SetSpeed+0x80>
  p = strtok(NULL,SEPS);
 8002796:	4936      	ldr	r1, [pc, #216]	; (8002870 <SetSpeed+0xf0>)
 8002798:	f002 fb8c 	bl	8004eb4 <strtok>
  if(p == NULL) {
 800279c:	4604      	mov	r4, r0
 800279e:	b918      	cbnz	r0, 80027a8 <SetSpeed+0x28>
    printf("Please provide speed between 1 and 90.");
 80027a0:	4834      	ldr	r0, [pc, #208]	; (8002874 <SetSpeed+0xf4>)
      printf("Speed can't be more then 90. Please provide in Range 1 to 90.");
 80027a2:	f005 f963 	bl	8007a6c <iprintf>
 80027a6:	e7f4      	b.n	8002792 <SetSpeed+0x12>
  *dest = strtod(p,NULL);
 80027a8:	4629      	mov	r1, r5
 80027aa:	f002 fb77 	bl	8004e9c <strtod>
  cmdArgs = p + strlen(p) + 1;
 80027ae:	4620      	mov	r0, r4
  *dest = strtod(p,NULL);
 80027b0:	ec57 6b10 	vmov	r6, r7, d0
  cmdArgs = p + strlen(p) + 1;
 80027b4:	f7fd fd2e 	bl	8000214 <strlen>
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <SetSpeed+0xf8>)
 80027ba:	3001      	adds	r0, #1
 80027bc:	4404      	add	r4, r0
 80027be:	601c      	str	r4, [r3, #0]
    if (desiredSpeed > 1.00 && desiredSpeed <= 90.00)
 80027c0:	2200      	movs	r2, #0
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <SetSpeed+0xfc>)
 80027c4:	4630      	mov	r0, r6
 80027c6:	4639      	mov	r1, r7
 80027c8:	f7fe f9ce 	bl	8000b68 <__aeabi_dcmpgt>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d031      	beq.n	8002834 <SetSpeed+0xb4>
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <SetSpeed+0x100>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	4630      	mov	r0, r6
 80027d6:	4639      	mov	r1, r7
 80027d8:	f7fe f9b2 	bl	8000b40 <__aeabi_dcmple>
 80027dc:	b350      	cbz	r0, 8002834 <SetSpeed+0xb4>
      targetRPM = desiredSpeed;
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <SetSpeed+0x104>)
 80027e0:	e9c3 6700 	strd	r6, r7, [r3]
      pwmStatus = 1;
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <SetSpeed+0x108>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <SetSpeed+0x10c>)
 80027ec:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	619a      	str	r2, [r3, #24]
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <SetSpeed+0x110>)
 80027f6:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80027fa:	2a01      	cmp	r2, #1
 80027fc:	d001      	beq.n	8002802 <SetSpeed+0x82>
  return CmdReturnOk;
 80027fe:	2000      	movs	r0, #0
}
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002808:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~tmp;
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002812:	6a1a      	ldr	r2, [r3, #32]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <SetSpeed+0x114>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10b      	bne.n	8002838 <SetSpeed+0xb8>
    __HAL_TIM_MOE_ENABLE(htim);
 8002820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	2a06      	cmp	r2, #6
 8002830:	d114      	bne.n	800285c <SetSpeed+0xdc>
 8002832:	e7e4      	b.n	80027fe <SetSpeed+0x7e>
      printf("Speed can't be more then 90. Please provide in Range 1 to 90.");
 8002834:	4818      	ldr	r0, [pc, #96]	; (8002898 <SetSpeed+0x118>)
 8002836:	e7b4      	b.n	80027a2 <SetSpeed+0x22>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d0f4      	beq.n	8002828 <SetSpeed+0xa8>
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <SetSpeed+0x11c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d0f1      	beq.n	8002828 <SetSpeed+0xa8>
 8002844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002848:	4293      	cmp	r3, r2
 800284a:	d0ed      	beq.n	8002828 <SetSpeed+0xa8>
 800284c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002850:	4293      	cmp	r3, r2
 8002852:	d0e9      	beq.n	8002828 <SetSpeed+0xa8>
 8002854:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002858:	4293      	cmp	r3, r2
 800285a:	d0e5      	beq.n	8002828 <SetSpeed+0xa8>
    __HAL_TIM_ENABLE(htim);
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e7cb      	b.n	80027fe <SetSpeed+0x7e>
 8002866:	bf00      	nop
 8002868:	20000014 	.word	0x20000014
 800286c:	080087a0 	.word	0x080087a0
 8002870:	0800861e 	.word	0x0800861e
 8002874:	080087c9 	.word	0x080087c9
 8002878:	20000a84 	.word	0x20000a84
 800287c:	3ff00000 	.word	0x3ff00000
 8002880:	40568000 	.word	0x40568000
 8002884:	20000c48 	.word	0x20000c48
 8002888:	20000c3c 	.word	0x20000c3c
 800288c:	40020000 	.word	0x40020000
 8002890:	20000c50 	.word	0x20000c50
 8002894:	40010000 	.word	0x40010000
 8002898:	080087f0 	.word	0x080087f0
 800289c:	40000400 	.word	0x40000400

080028a0 <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 80028a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80028a4:	4604      	mov	r4, r0
 80028a6:	b9f0      	cbnz	r0, 80028e6 <CmdR+0x46>

  fetch_uint32_arg(&addr);
 80028a8:	a801      	add	r0, sp, #4
 80028aa:	f7ff ff1f 	bl	80026ec <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 80028ae:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80028b0:	4812      	ldr	r0, [pc, #72]	; (80028fc <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 80028b2:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 80028b4:	4e12      	ldr	r6, [pc, #72]	; (8002900 <CmdR+0x60>)
 80028b6:	4f13      	ldr	r7, [pc, #76]	; (8002904 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 80028b8:	462a      	mov	r2, r5
 80028ba:	f005 f8d7 	bl	8007a6c <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 80028be:	4812      	ldr	r0, [pc, #72]	; (8002908 <CmdR+0x68>)
 80028c0:	f005 f8d4 	bl	8007a6c <iprintf>
    printf("%s%c",
 80028c4:	4911      	ldr	r1, [pc, #68]	; (800290c <CmdR+0x6c>)
 80028c6:	4688      	mov	r8, r1
 80028c8:	2d00      	cmp	r5, #0
 80028ca:	bfb4      	ite	lt
 80028cc:	2231      	movlt	r2, #49	; 0x31
 80028ce:	2230      	movge	r2, #48	; 0x30
 80028d0:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 80028d2:	3401      	adds	r4, #1
    printf("%s%c",
 80028d4:	f005 f8ca 	bl	8007a6c <iprintf>
  for(i=0; i<32; i++) {
 80028d8:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 80028da:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 80028de:	d106      	bne.n	80028ee <CmdR+0x4e>
  }
  printf("\n");
 80028e0:	200a      	movs	r0, #10
 80028e2:	f005 f8db 	bl	8007a9c <putchar>
  return CmdReturnOk;
}
 80028e6:	2000      	movs	r0, #0
 80028e8:	b002      	add	sp, #8
 80028ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 80028ee:	f014 0f03 	tst.w	r4, #3
 80028f2:	bf14      	ite	ne
 80028f4:	4639      	movne	r1, r7
 80028f6:	4641      	moveq	r1, r8
 80028f8:	e7e6      	b.n	80028c8 <CmdR+0x28>
 80028fa:	bf00      	nop
 80028fc:	0800882e 	.word	0x0800882e
 8002900:	080088e8 	.word	0x080088e8
 8002904:	0800acc0 	.word	0x0800acc0
 8002908:	08008840 	.word	0x08008840
 800290c:	0800ac64 	.word	0x0800ac64

08002910 <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 8002910:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002912:	b940      	cbnz	r0, 8002926 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8002914:	4668      	mov	r0, sp
 8002916:	f7ff fee9 	bl	80026ec <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800291a:	a801      	add	r0, sp, #4
 800291c:	f7ff fee6 	bl	80026ec <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8002920:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002924:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 8002926:	2000      	movs	r0, #0
 8002928:	b003      	add	sp, #12
 800292a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002930 <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8002934:	2801      	cmp	r0, #1
{
 8002936:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8002938:	d00b      	beq.n	8002952 <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 800293a:	2802      	cmp	r0, #2
 800293c:	4f31      	ldr	r7, [pc, #196]	; (8002a04 <CmdDump+0xd4>)
 800293e:	4e32      	ldr	r6, [pc, #200]	; (8002a08 <CmdDump+0xd8>)
 8002940:	d10b      	bne.n	800295a <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 8002942:	4832      	ldr	r0, [pc, #200]	; (8002a0c <CmdDump+0xdc>)
 8002944:	f005 f92e 	bl	8007ba4 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6831      	ldr	r1, [r6, #0]
 800294c:	4830      	ldr	r0, [pc, #192]	; (8002a10 <CmdDump+0xe0>)
 800294e:	f005 f88d 	bl	8007a6c <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 8002952:	2000      	movs	r0, #0
 8002954:	b00b      	add	sp, #44	; 0x2c
 8002956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 800295a:	4630      	mov	r0, r6
 800295c:	f7ff fec6 	bl	80026ec <fetch_uint32_arg>
  if(rc == 0) {
 8002960:	b910      	cbnz	r0, 8002968 <CmdDump+0x38>
    fetch_uint32_arg(&count);
 8002962:	4638      	mov	r0, r7
 8002964:	f7ff fec2 	bl	80026ec <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8002968:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 800296a:	2c00      	cmp	r4, #0
 800296c:	d043      	beq.n	80029f6 <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 800296e:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 8002970:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002a20 <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 8002974:	9301      	str	r3, [sp, #4]
  bufp = buf;
 8002976:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 800297a:	2500      	movs	r5, #0
 800297c:	46c8      	mov	r8, r9
 800297e:	9b01      	ldr	r3, [sp, #4]
 8002980:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 8002982:	f015 030f 	ands.w	r3, r5, #15
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	d13a      	bne.n	8002a00 <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 800298a:	4822      	ldr	r0, [pc, #136]	; (8002a14 <CmdDump+0xe4>)
 800298c:	9103      	str	r1, [sp, #12]
 800298e:	f005 f86d 	bl	8007a6c <iprintf>
      bufp = buf;
 8002992:	9903      	ldr	r1, [sp, #12]
 8002994:	46c3      	mov	fp, r8
    c = *p++;
 8002996:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <CmdDump+0xe8>)
 800299a:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 800299e:	46d9      	mov	r9, fp
      *bufp++ = '.';
 80029a0:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 80029a4:	4601      	mov	r1, r0
      *bufp++ = '.';
 80029a6:	bf08      	it	eq
 80029a8:	202e      	moveq	r0, #46	; 0x2e
 80029aa:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 80029ae:	4650      	mov	r0, sl
 80029b0:	f005 f85c 	bl	8007a6c <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 80029b4:	9b02      	ldr	r3, [sp, #8]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d106      	bne.n	80029c8 <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 80029ba:	2100      	movs	r1, #0
 80029bc:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 80029c0:	4816      	ldr	r0, [pc, #88]	; (8002a1c <CmdDump+0xec>)
 80029c2:	4641      	mov	r1, r8
 80029c4:	f005 f852 	bl	8007a6c <iprintf>
  for(i=0; i<count; i++) {
 80029c8:	3501      	adds	r5, #1
 80029ca:	42ac      	cmp	r4, r5
 80029cc:	d1d7      	bne.n	800297e <CmdDump+0x4e>
  *bufp='\0';
 80029ce:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 80029d0:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80029d4:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 80029d8:	d00d      	beq.n	80029f6 <CmdDump+0xc6>
      printf("   ");
 80029da:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002a24 <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80029de:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 80029e2:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80029e4:	3501      	adds	r5, #1
      printf("   ");
 80029e6:	f005 f841 	bl	8007a6c <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80029ea:	42a5      	cmp	r5, r4
 80029ec:	d3f9      	bcc.n	80029e2 <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 80029ee:	480b      	ldr	r0, [pc, #44]	; (8002a1c <CmdDump+0xec>)
 80029f0:	4641      	mov	r1, r8
 80029f2:	f005 f83b 	bl	8007a6c <iprintf>
  address = address+count;
 80029f6:	6833      	ldr	r3, [r6, #0]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 80029fe:	e7a8      	b.n	8002952 <CmdDump+0x22>
 8002a00:	46cb      	mov	fp, r9
 8002a02:	e7c8      	b.n	8002996 <CmdDump+0x66>
 8002a04:	2000000c 	.word	0x2000000c
 8002a08:	20000a6c 	.word	0x20000a6c
 8002a0c:	080088ed 	.word	0x080088ed
 8002a10:	08008a85 	.word	0x08008a85
 8002a14:	08008ab7 	.word	0x08008ab7
 8002a18:	080142ae 	.word	0x080142ae
 8002a1c:	08008ac4 	.word	0x08008ac4
 8002a20:	08008abe 	.word	0x08008abe
 8002a24:	080088e4 	.word	0x080088e4

08002a28 <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 8002a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	bb50      	cbnz	r0, 8002a84 <CmdSend+0x5c>

  index = 0;
 8002a2e:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 8002a30:	a803      	add	r0, sp, #12
 8002a32:	f7ff fe5b 	bl	80026ec <fetch_uint32_arg>
  if(rc) {
 8002a36:	4602      	mov	r2, r0
 8002a38:	b130      	cbz	r0, 8002a48 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002a3a:	4813      	ldr	r0, [pc, #76]	; (8002a88 <CmdSend+0x60>)
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f005 f815 	bl	8007a6c <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 8002a42:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 8002a44:	b004      	add	sp, #16
 8002a46:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002a48:	9c03      	ldr	r4, [sp, #12]
 8002a4a:	b124      	cbz	r4, 8002a56 <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	480f      	ldr	r0, [pc, #60]	; (8002a8c <CmdSend+0x64>)
 8002a50:	f005 f80c 	bl	8007a6c <iprintf>
 8002a54:	e7f5      	b.n	8002a42 <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <CmdSend+0x68>)
 8002a58:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 8002a5a:	9101      	str	r1, [sp, #4]
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	f7fd fbd9 	bl	8000214 <strlen>
  if(len==0) {
 8002a62:	9901      	ldr	r1, [sp, #4]
 8002a64:	4602      	mov	r2, r0
 8002a66:	b920      	cbnz	r0, 8002a72 <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <CmdSend+0x6c>)
 8002a6a:	f005 f89b 	bl	8007ba4 <puts>
    return CmdReturnBadParameter2;
 8002a6e:	2005      	movs	r0, #5
 8002a70:	e7e8      	b.n	8002a44 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fe ffae 	bl	80019d4 <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <CmdSend+0x70>)
 8002a7a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f7fe ffa8 	bl	80019d4 <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a84:	2000      	movs	r0, #0
 8002a86:	e7dd      	b.n	8002a44 <CmdSend+0x1c>
 8002a88:	08008acc 	.word	0x08008acc
 8002a8c:	08008afa 	.word	0x08008afa
 8002a90:	20000a84 	.word	0x20000a84
 8002a94:	08008b30 	.word	0x08008b30
 8002a98:	080090be 	.word	0x080090be

08002a9c <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 8002a9c:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	bb18      	cbnz	r0, 8002aea <CmdReceive+0x4e>

  index = 0;
 8002aa2:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002aa4:	a801      	add	r0, sp, #4
 8002aa6:	f7ff fe21 	bl	80026ec <fetch_uint32_arg>
  if(rc) {
 8002aaa:	4602      	mov	r2, r0
 8002aac:	b130      	cbz	r0, 8002abc <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002aae:	4810      	ldr	r0, [pc, #64]	; (8002af0 <CmdReceive+0x54>)
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	f004 ffdb 	bl	8007a6c <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 8002ab6:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002abc:	9901      	ldr	r1, [sp, #4]
 8002abe:	b119      	cbz	r1, 8002ac8 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <CmdReceive+0x58>)
 8002ac2:	f004 ffd3 	bl	8007a6c <iprintf>
 8002ac6:	e7f6      	b.n	8002ab6 <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <CmdReceive+0x5c>)
 8002aca:	f004 ffcf 	bl	8007a6c <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 8002ace:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f10d 0103 	add.w	r1, sp, #3
 8002ad8:	f7fe fac0 	bl	800105c <TerminalRead>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d0eb      	beq.n	8002ab8 <CmdReceive+0x1c>
    printf("%c",c);
 8002ae0:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002ae4:	f004 ffda 	bl	8007a9c <putchar>
 8002ae8:	e7f1      	b.n	8002ace <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e7e4      	b.n	8002ab8 <CmdReceive+0x1c>
 8002aee:	bf00      	nop
 8002af0:	08008acc 	.word	0x08008acc
 8002af4:	08008afa 	.word	0x08008afa
 8002af8:	08008b5a 	.word	0x08008b5a

08002afc <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 8002afc:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002afe:	4604      	mov	r4, r0
 8002b00:	b9b0      	cbnz	r0, 8002b30 <CmdTransparent+0x34>

  index = 0;
 8002b02:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002b04:	a801      	add	r0, sp, #4
 8002b06:	f7ff fdf1 	bl	80026ec <fetch_uint32_arg>
  if(rc) {
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	b130      	cbz	r0, 8002b1c <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 8002b0e:	4809      	ldr	r0, [pc, #36]	; (8002b34 <CmdTransparent+0x38>)
 8002b10:	4621      	mov	r1, r4
 8002b12:	f004 ffab 	bl	8007a6c <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 8002b16:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 8002b1c:	9901      	ldr	r1, [sp, #4]
 8002b1e:	b119      	cbz	r1, 8002b28 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <CmdTransparent+0x3c>)
 8002b22:	f004 ffa3 	bl	8007a6c <iprintf>
    return CmdReturnBadParameter1;
 8002b26:	e7f6      	b.n	8002b16 <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <CmdTransparent+0x40>)
 8002b2a:	f005 f83b 	bl	8007ba4 <puts>
 8002b2e:	e7f2      	b.n	8002b16 <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002b30:	2000      	movs	r0, #0
 8002b32:	e7f1      	b.n	8002b18 <CmdTransparent+0x1c>
 8002b34:	08008acc 	.word	0x08008acc
 8002b38:	08008afa 	.word	0x08008afa
 8002b3c:	08008b75 	.word	0x08008b75

08002b40 <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 8002b40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002b44:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8002b46:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 8002b48:	d132      	bne.n	8002bb0 <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 8002b4a:	f7ff fbd5 	bl	80022f8 <fetch_string_arg>
    if(rc) {
 8002b4e:	b160      	cbz	r0, 8002b6a <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002b50:	488b      	ldr	r0, [pc, #556]	; (8002d80 <CmdDecode+0x240>)
 8002b52:	f005 f827 	bl	8007ba4 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8002b56:	f7ff fc9b 	bl	8002490 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 8002b5a:	488a      	ldr	r0, [pc, #552]	; (8002d84 <CmdDecode+0x244>)
 8002b5c:	f005 f822 	bl	8007ba4 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 8002b60:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 8002b62:	4620      	mov	r0, r4
 8002b64:	b004      	add	sp, #16
 8002b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 8002b6a:	4d87      	ldr	r5, [pc, #540]	; (8002d88 <CmdDecode+0x248>)
 8002b6c:	e008      	b.n	8002b80 <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002b6e:	9c03      	ldr	r4, [sp, #12]
 8002b70:	f7fe fa9a 	bl	80010a8 <Uncompress>
 8002b74:	4601      	mov	r1, r0
 8002b76:	4620      	mov	r0, r4
 8002b78:	f005 f81c 	bl	8007bb4 <strcasecmp>
 8002b7c:	b118      	cbz	r0, 8002b86 <CmdDecode+0x46>
	p++;
 8002b7e:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002b80:	6828      	ldr	r0, [r5, #0]
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d1f3      	bne.n	8002b6e <CmdDecode+0x2e>
      if(p->name == NULL) {
 8002b86:	682c      	ldr	r4, [r5, #0]
 8002b88:	b934      	cbnz	r4, 8002b98 <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 8002b8a:	9903      	ldr	r1, [sp, #12]
 8002b8c:	487f      	ldr	r0, [pc, #508]	; (8002d8c <CmdDecode+0x24c>)
 8002b8e:	f004 ff6d 	bl	8007a6c <iprintf>
	DecodePrintPeripherals(Peripherals);
 8002b92:	f7ff fc7d 	bl	8002490 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 8002b96:	e7e4      	b.n	8002b62 <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7fe fa85 	bl	80010a8 <Uncompress>
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	487b      	ldr	r0, [pc, #492]	; (8002d90 <CmdDecode+0x250>)
 8002ba2:	f004 ff63 	bl	8007a6c <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8002ba6:	89a9      	ldrh	r1, [r5, #12]
 8002ba8:	68a8      	ldr	r0, [r5, #8]
 8002baa:	f7ff fc41 	bl	8002430 <DecodePrintRegisters>
    printf("\n\n");
 8002bae:	e007      	b.n	8002bc0 <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 8002bb0:	f7ff fba2 	bl	80022f8 <fetch_string_arg>
  if(rc) {
 8002bb4:	b178      	cbz	r0, 8002bd6 <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 8002bb6:	4877      	ldr	r0, [pc, #476]	; (8002d94 <CmdDecode+0x254>)
 8002bb8:	f004 fff4 	bl	8007ba4 <puts>
    DecodePrintPeripherals(Peripherals);
 8002bbc:	f7ff fc68 	bl	8002490 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 8002bc0:	4875      	ldr	r0, [pc, #468]	; (8002d98 <CmdDecode+0x258>)
 8002bc2:	e7cb      	b.n	8002b5c <CmdDecode+0x1c>
    p++;
 8002bc4:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002bc6:	6828      	ldr	r0, [r5, #0]
 8002bc8:	9c03      	ldr	r4, [sp, #12]
 8002bca:	b930      	cbnz	r0, 8002bda <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8002bcc:	9903      	ldr	r1, [sp, #12]
 8002bce:	4873      	ldr	r0, [pc, #460]	; (8002d9c <CmdDecode+0x25c>)
 8002bd0:	f004 ff4c 	bl	8007a6c <iprintf>
    DecodePrintPeripherals(Peripherals);
 8002bd4:	e7f2      	b.n	8002bbc <CmdDecode+0x7c>
  p = Peripherals;
 8002bd6:	4d6c      	ldr	r5, [pc, #432]	; (8002d88 <CmdDecode+0x248>)
 8002bd8:	e7f5      	b.n	8002bc6 <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002bda:	f7fe fa65 	bl	80010a8 <Uncompress>
 8002bde:	4601      	mov	r1, r0
 8002be0:	4620      	mov	r0, r4
 8002be2:	f004 ffe7 	bl	8007bb4 <strcasecmp>
 8002be6:	4604      	mov	r4, r0
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d1eb      	bne.n	8002bc4 <CmdDecode+0x84>
  if(p->name == NULL) {
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ec      	beq.n	8002bcc <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8002bf2:	a802      	add	r0, sp, #8
 8002bf4:	f7ff fb80 	bl	80022f8 <fetch_string_arg>
  if(rc) {
 8002bf8:	b120      	cbz	r0, 8002c04 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f7ff fbef 	bl	80023e0 <DecodePeripheral>
    return CmdReturnOk;
 8002c02:	e7ae      	b.n	8002b62 <CmdDecode+0x22>
  r = p->registers;
 8002c04:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 8002c06:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8002c08:	9c02      	ldr	r4, [sp, #8]
 8002c0a:	2f00      	cmp	r7, #0
 8002c0c:	f000 80a8 	beq.w	8002d60 <CmdDecode+0x220>
 8002c10:	6830      	ldr	r0, [r6, #0]
 8002c12:	f7fe fa49 	bl	80010a8 <Uncompress>
 8002c16:	4601      	mov	r1, r0
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f004 ffcb 	bl	8007bb4 <strcasecmp>
 8002c1e:	3f01      	subs	r7, #1
 8002c20:	4604      	mov	r4, r0
 8002c22:	b958      	cbnz	r0, 8002c3c <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 8002c24:	a801      	add	r0, sp, #4
 8002c26:	f7ff fb67 	bl	80022f8 <fetch_string_arg>
  if(rc == 0) {
 8002c2a:	b170      	cbz	r0, 8002c4a <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f7fe ffa0 	bl	8001b74 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002c34:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8002c36:	4602      	mov	r2, r0
 8002c38:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 8002c3a:	e017      	b.n	8002c6c <CmdDecode+0x12c>
    r++;
 8002c3c:	3610      	adds	r6, #16
 8002c3e:	e7e3      	b.n	8002c08 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8002c40:	2101      	movs	r1, #1
 8002c42:	4628      	mov	r0, r5
 8002c44:	f7ff fbcc 	bl	80023e0 <DecodePeripheral>
      return CmdReturnOk;
 8002c48:	e78a      	b.n	8002b60 <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 8002c4a:	4955      	ldr	r1, [pc, #340]	; (8002da0 <CmdDecode+0x260>)
 8002c4c:	9801      	ldr	r0, [sp, #4]
 8002c4e:	f004 ffb1 	bl	8007bb4 <strcasecmp>
 8002c52:	b980      	cbnz	r0, 8002c76 <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 8002c54:	4668      	mov	r0, sp
 8002c56:	f7ff fd49 	bl	80026ec <fetch_uint32_arg>
      if(rc) {
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	b120      	cbz	r0, 8002c68 <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 8002c5e:	4851      	ldr	r0, [pc, #324]	; (8002da4 <CmdDecode+0x264>)
 8002c60:	f004 ffa0 	bl	8007ba4 <puts>
	return CmdReturnBadParameter4;
 8002c64:	2407      	movs	r4, #7
 8002c66:	e77c      	b.n	8002b62 <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 8002c68:	9a00      	ldr	r2, [sp, #0]
 8002c6a:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8002c6c:	6869      	ldr	r1, [r5, #4]
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f7ff fb5a 	bl	8002328 <DecodeRegister>
  return CmdReturnOk;
 8002c74:	e775      	b.n	8002b62 <CmdDecode+0x22>
    f = r->fields;
 8002c76:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 8002c78:	b15f      	cbz	r7, 8002c92 <CmdDecode+0x152>
	  && (f->name != NULL)
 8002c7a:	6838      	ldr	r0, [r7, #0]
 8002c7c:	b148      	cbz	r0, 8002c92 <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 8002c7e:	9c01      	ldr	r4, [sp, #4]
 8002c80:	f7fe fa12 	bl	80010a8 <Uncompress>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4620      	mov	r0, r4
 8002c88:	f004 ff94 	bl	8007bb4 <strcasecmp>
 8002c8c:	b998      	cbnz	r0, 8002cb6 <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b99b      	cbnz	r3, 8002cba <CmdDecode+0x17a>
    errno = 0;
 8002c92:	f000 fd7f 	bl	8003794 <__errno>
 8002c96:	2700      	movs	r7, #0
 8002c98:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	4639      	mov	r1, r7
 8002c9e:	9801      	ldr	r0, [sp, #4]
 8002ca0:	f002 f9d6 	bl	8005050 <strtoul>
 8002ca4:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 8002ca6:	f000 fd75 	bl	8003794 <__errno>
 8002caa:	6804      	ldr	r4, [r0, #0]
 8002cac:	2c00      	cmp	r4, #0
 8002cae:	d042      	beq.n	8002d36 <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 8002cb0:	9901      	ldr	r1, [sp, #4]
 8002cb2:	483d      	ldr	r0, [pc, #244]	; (8002da8 <CmdDecode+0x268>)
 8002cb4:	e00b      	b.n	8002cce <CmdDecode+0x18e>
      f++;
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	e7de      	b.n	8002c78 <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 8002cba:	4668      	mov	r0, sp
 8002cbc:	f7ff fd16 	bl	80026ec <fetch_uint32_arg>
      if(rc) {
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	b138      	cbz	r0, 8002cd4 <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 8002cc4:	6830      	ldr	r0, [r6, #0]
 8002cc6:	f7fe f9ef 	bl	80010a8 <Uncompress>
 8002cca:	4601      	mov	r1, r0
 8002ccc:	4837      	ldr	r0, [pc, #220]	; (8002dac <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 8002cce:	f004 fecd 	bl	8007a6c <iprintf>
      return CmdReturnOk;
 8002cd2:	e745      	b.n	8002b60 <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7fe ff4c 	bl	8001b74 <DecodeReadRegister>
      m = (1<<f->width)-1;
 8002cdc:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 8002cde:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8002ce6:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 8002cea:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 8002cee:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8002cf2:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 8002cf4:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 8002cf8:	4003      	ands	r3, r0
 8002cfa:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	4631      	mov	r1, r6
 8002d00:	4628      	mov	r0, r5
 8002d02:	f7fe ff71 	bl	8001be8 <DecodeWriteRegister.isra.0>
      printf("%s.",
 8002d06:	6828      	ldr	r0, [r5, #0]
 8002d08:	f7fe f9ce 	bl	80010a8 <Uncompress>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	4828      	ldr	r0, [pc, #160]	; (8002db0 <CmdDecode+0x270>)
 8002d10:	f004 feac 	bl	8007a6c <iprintf>
      printf("%s.",
 8002d14:	6830      	ldr	r0, [r6, #0]
 8002d16:	f7fe f9c7 	bl	80010a8 <Uncompress>
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4824      	ldr	r0, [pc, #144]	; (8002db0 <CmdDecode+0x270>)
 8002d1e:	f004 fea5 	bl	8007a6c <iprintf>
      printf("%s (%d) -> (%d)\n",
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f7fe f9c0 	bl	80010a8 <Uncompress>
 8002d28:	9b00      	ldr	r3, [sp, #0]
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	4821      	ldr	r0, [pc, #132]	; (8002db4 <CmdDecode+0x274>)
 8002d30:	f004 fe9c 	bl	8007a6c <iprintf>
      return CmdReturnOk;
 8002d34:	e715      	b.n	8002b62 <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 8002d36:	9a00      	ldr	r2, [sp, #0]
 8002d38:	4631      	mov	r1, r6
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f7fe ff54 	bl	8001be8 <DecodeWriteRegister.isra.0>
    printf("%s.",
 8002d40:	6828      	ldr	r0, [r5, #0]
 8002d42:	f7fe f9b1 	bl	80010a8 <Uncompress>
 8002d46:	4601      	mov	r1, r0
 8002d48:	4819      	ldr	r0, [pc, #100]	; (8002db0 <CmdDecode+0x270>)
 8002d4a:	f004 fe8f 	bl	8007a6c <iprintf>
    printf("%s = 0x%08x\n",
 8002d4e:	6830      	ldr	r0, [r6, #0]
 8002d50:	f7fe f9aa 	bl	80010a8 <Uncompress>
 8002d54:	9a00      	ldr	r2, [sp, #0]
 8002d56:	4601      	mov	r1, r0
 8002d58:	4817      	ldr	r0, [pc, #92]	; (8002db8 <CmdDecode+0x278>)
 8002d5a:	f004 fe87 	bl	8007a6c <iprintf>
    return CmdReturnOk;
 8002d5e:	e700      	b.n	8002b62 <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 8002d60:	4916      	ldr	r1, [pc, #88]	; (8002dbc <CmdDecode+0x27c>)
 8002d62:	4620      	mov	r0, r4
 8002d64:	f004 ff26 	bl	8007bb4 <strcasecmp>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	f43f af69 	beq.w	8002c40 <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002d6e:	6828      	ldr	r0, [r5, #0]
 8002d70:	f7fe f99a 	bl	80010a8 <Uncompress>
 8002d74:	4621      	mov	r1, r4
 8002d76:	4602      	mov	r2, r0
 8002d78:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <CmdDecode+0x280>)
 8002d7a:	f004 fe77 	bl	8007a6c <iprintf>
 8002d7e:	e712      	b.n	8002ba6 <CmdDecode+0x66>
 8002d80:	08008b9a 	.word	0x08008b9a
 8002d84:	08008dad 	.word	0x08008dad
 8002d88:	08010c6c 	.word	0x08010c6c
 8002d8c:	08008e02 	.word	0x08008e02
 8002d90:	08008e3d 	.word	0x08008e3d
 8002d94:	08008e62 	.word	0x08008e62
 8002d98:	08008ecb 	.word	0x08008ecb
 8002d9c:	08008e91 	.word	0x08008e91
 8002da0:	08008f0a 	.word	0x08008f0a
 8002da4:	08008f0e 	.word	0x08008f0e
 8002da8:	08008f6d 	.word	0x08008f6d
 8002dac:	08008f2d 	.word	0x08008f2d
 8002db0:	08008f58 	.word	0x08008f58
 8002db4:	08008f5c 	.word	0x08008f5c
 8002db8:	08008f8b 	.word	0x08008f8b
 8002dbc:	08008f98 	.word	0x08008f98
 8002dc0:	08008ecd 	.word	0x08008ecd

08002dc4 <PolledPrintf>:
{
 8002dc4:	b40f      	push	{r0, r1, r2, r3}
 8002dc6:	b500      	push	{lr}
 8002dc8:	b097      	sub	sp, #92	; 0x5c
 8002dca:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002dcc:	2150      	movs	r1, #80	; 0x50
{
 8002dce:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8002dd2:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002dd4:	a802      	add	r0, sp, #8
 8002dd6:	f004 ff3b 	bl	8007c50 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <PolledPrintf+0x38>)
  while(len) {
 8002ddc:	ab02      	add	r3, sp, #8
 8002dde:	b928      	cbnz	r0, 8002dec <PolledPrintf+0x28>
}
 8002de0:	b017      	add	sp, #92	; 0x5c
 8002de2:	f85d eb04 	ldr.w	lr, [sp], #4
 8002de6:	b004      	add	sp, #16
 8002de8:	4770      	bx	lr
      asm volatile ("nop");
 8002dea:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 8002dec:	6811      	ldr	r1, [r2, #0]
 8002dee:	0609      	lsls	r1, r1, #24
 8002df0:	d5fb      	bpl.n	8002dea <PolledPrintf+0x26>
    uart->DR = *p;
 8002df2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002df6:	6051      	str	r1, [r2, #4]
    len--;
 8002df8:	3801      	subs	r0, #1
 8002dfa:	e7f0      	b.n	8002dde <PolledPrintf+0x1a>
 8002dfc:	40004400 	.word	0x40004400

08002e00 <CmdStats>:
{
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002e04:	4601      	mov	r1, r0
{
 8002e06:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002e08:	bb10      	cbnz	r0, 8002e50 <CmdStats+0x50>
 8002e0a:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002e0e:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8002e10:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8002e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e16:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 8002e1a:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 8002e24:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8002e26:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8002e2a:	f000 fcdd 	bl	80037e8 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e2e:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 8002e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <CmdStats+0x5c>)
 8002e34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002e36:	480a      	ldr	r0, [pc, #40]	; (8002e60 <CmdStats+0x60>)
 8002e38:	9400      	str	r4, [sp, #0]
 8002e3a:	e9cd b307 	strd	fp, r3, [sp, #28]
 8002e3e:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 8002e42:	e9cd 7803 	strd	r7, r8, [sp, #12]
 8002e46:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <CmdStats+0x64>)
 8002e4c:	f004 fe0e 	bl	8007a6c <iprintf>
}
 8002e50:	2000      	movs	r0, #0
 8002e52:	b00d      	add	sp, #52	; 0x34
 8002e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e58:	20000238 	.word	0x20000238
 8002e5c:	08008fa5 	.word	0x08008fa5
 8002e60:	08008fad 	.word	0x08008fad
 8002e64:	08008f9d 	.word	0x08008f9d

08002e68 <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 8002e68:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <USR_LED_Toggle+0x10>)
 8002e6a:	6813      	ldr	r3, [r2, #0]
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000228 	.word	0x20000228

08002e7c <TIM1_UP_TIM10_IRQHandler>:
  HAL_TIM_IRQHandler(&tim1);
 8002e7c:	4801      	ldr	r0, [pc, #4]	; (8002e84 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8002e7e:	f7fe ba47 	b.w	8001310 <HAL_TIM_IRQHandler>
 8002e82:	bf00      	nop
 8002e84:	20000c50 	.word	0x20000c50

08002e88 <TIM3_IRQHandler>:
  HAL_TIM_IRQHandler(&htim3);
 8002e88:	4801      	ldr	r0, [pc, #4]	; (8002e90 <TIM3_IRQHandler+0x8>)
 8002e8a:	f7fe ba41 	b.w	8001310 <HAL_TIM_IRQHandler>
 8002e8e:	bf00      	nop
 8002e90:	20000b10 	.word	0x20000b10

08002e94 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8002e94:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <_sbrk_r+0x28>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	b90a      	cbnz	r2, 8002ea0 <_sbrk_r+0xc>
    heap_end = &end;
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <_sbrk_r+0x2c>)
 8002e9e:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8002ea0:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 8002ea2:	466a      	mov	r2, sp
 8002ea4:	4401      	add	r1, r0
 8002ea6:	4291      	cmp	r1, r2
 8002ea8:	d906      	bls.n	8002eb8 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8002eaa:	f000 fc73 	bl	8003794 <__errno>
 8002eae:	230c      	movs	r3, #12
 8002eb0:	6003      	str	r3, [r0, #0]
 8002eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8002eb6:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8002eb8:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8002eba:	e7fc      	b.n	8002eb6 <_sbrk_r+0x22>
 8002ebc:	20000ab8 	.word	0x20000ab8
 8002ec0:	20000cf8 	.word	0x20000cf8

08002ec4 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	4770      	bx	lr

08002ec8 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8002ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ecc:	6053      	str	r3, [r2, #4]
   return 0;
}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	4770      	bx	lr

08002ed2 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	4770      	bx	lr

08002ed6 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	4770      	bx	lr

08002eda <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8002eda:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8002edc:	2000      	movs	r0, #0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f7fe b8bc 	b.w	800105c <TerminalRead>

08002ee4 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8002ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002ee8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002f20 <_write_r+0x3c>
{
 8002eec:	461d      	mov	r5, r3
 8002eee:	4614      	mov	r4, r2
 8002ef0:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8002ef2:	42bc      	cmp	r4, r7
 8002ef4:	4626      	mov	r6, r4
 8002ef6:	d102      	bne.n	8002efe <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8002ef8:	4628      	mov	r0, r5
 8002efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8002efe:	7833      	ldrb	r3, [r6, #0]
 8002f00:	2b0a      	cmp	r3, #10
 8002f02:	f104 0401 	add.w	r4, r4, #1
 8002f06:	d104      	bne.n	8002f12 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fe fd61 	bl	80019d4 <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8002f12:	2201      	movs	r2, #1
 8002f14:	4631      	mov	r1, r6
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fe fd5c 	bl	80019d4 <TerminalOutputBufferWrite.isra.0>
    count--;
 8002f1c:	e7e9      	b.n	8002ef2 <_write_r+0xe>
 8002f1e:	bf00      	nop
 8002f20:	080096d3 	.word	0x080096d3

08002f24 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f28:	4770      	bx	lr

08002f2a <_exit>:

void _exit(int status)
{
  while(1) {}
 8002f2a:	e7fe      	b.n	8002f2a <_exit>

08002f2c <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	4770      	bx	lr

08002f30 <USART2_IRQHandler>:
  isr = uart->SR;
 8002f30:	4b37      	ldr	r3, [pc, #220]	; (8003010 <USART2_IRQHandler+0xe0>)
 8002f32:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002f34:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8002f36:	b510      	push	{r4, lr}
 8002f38:	d50d      	bpl.n	8002f56 <USART2_IRQHandler+0x26>
    c = uart->DR;
 8002f3a:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8002f3c:	4b35      	ldr	r3, [pc, #212]	; (8003014 <USART2_IRQHandler+0xe4>)
 8002f3e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002f42:	b292      	uxth	r2, r2
 8002f44:	3201      	adds	r2, #1
 8002f46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f4a:	d339      	bcc.n	8002fc0 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 8002f4c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002f50:	3201      	adds	r2, #1
 8002f52:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 8002f56:	060a      	lsls	r2, r1, #24
 8002f58:	d50a      	bpl.n	8002f70 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <USART2_IRQHandler+0xe4>)
 8002f5c:	482c      	ldr	r0, [pc, #176]	; (8003010 <USART2_IRQHandler+0xe0>)
 8002f5e:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002f62:	b292      	uxth	r2, r2
 8002f64:	2a00      	cmp	r2, #0
 8002f66:	d140      	bne.n	8002fea <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8002f68:	68c3      	ldr	r3, [r0, #12]
 8002f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6e:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 8002f70:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8002f72:	bf41      	itttt	mi
 8002f74:	4a26      	ldrmi	r2, [pc, #152]	; (8003010 <USART2_IRQHandler+0xe0>)
 8002f76:	68d3      	ldrmi	r3, [r2, #12]
 8002f78:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8002f7c:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 8002f7e:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 8002f80:	bf41      	itttt	mi
 8002f82:	4a24      	ldrmi	r2, [pc, #144]	; (8003014 <USART2_IRQHandler+0xe4>)
 8002f84:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 8002f88:	3301      	addmi	r3, #1
 8002f8a:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8002f8e:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 8002f90:	bf41      	itttt	mi
 8002f92:	4a20      	ldrmi	r2, [pc, #128]	; (8003014 <USART2_IRQHandler+0xe4>)
 8002f94:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 8002f98:	3301      	addmi	r3, #1
 8002f9a:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8002f9e:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 8002fa0:	bf41      	itttt	mi
 8002fa2:	4a1c      	ldrmi	r2, [pc, #112]	; (8003014 <USART2_IRQHandler+0xe4>)
 8002fa4:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 8002fa8:	3301      	addmi	r3, #1
 8002faa:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8002fae:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 8002fb0:	bf41      	itttt	mi
 8002fb2:	4a18      	ldrmi	r2, [pc, #96]	; (8003014 <USART2_IRQHandler+0xe4>)
 8002fb4:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 8002fb8:	3301      	addmi	r3, #1
 8002fba:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 8002fbe:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8002fc0:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 8002fc4:	3201      	adds	r2, #1
 8002fc6:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 8002fca:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002fce:	b292      	uxth	r2, r2
    c = uart->DR;
 8002fd0:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002fd8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 8002fdc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002fe8:	e7b5      	b.n	8002f56 <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 8002fea:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8002fee:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 8002ff2:	3201      	adds	r2, #1
      uart->DR = c;
 8002ff4:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 8002ff8:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 8002ffa:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 8002ffe:	3801      	subs	r0, #1
 8003000:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 8003002:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8003006:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 800300a:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 800300e:	e7af      	b.n	8002f70 <USART2_IRQHandler+0x40>
 8003010:	40004400 	.word	0x40004400
 8003014:	20000238 	.word	0x20000238

08003018 <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 8003018:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 800301c:	490d      	ldr	r1, [pc, #52]	; (8003054 <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 800301e:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <Default_IRQHandler+0x40>)
 8003022:	f7ff fecf 	bl	8002dc4 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8003026:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 800302a:	480c      	ldr	r0, [pc, #48]	; (800305c <Default_IRQHandler+0x44>)
 800302c:	f7ff feca 	bl	8002dc4 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <Default_IRQHandler+0x48>)
 8003032:	f1a4 0110 	sub.w	r1, r4, #16
 8003036:	f7ff fec5 	bl	8002dc4 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <Default_IRQHandler+0x4c>)
 800303c:	480a      	ldr	r0, [pc, #40]	; (8003068 <Default_IRQHandler+0x50>)
 800303e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003042:	f7ff febf 	bl	8002dc4 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8003046:	4809      	ldr	r0, [pc, #36]	; (800306c <Default_IRQHandler+0x54>)
 8003048:	f7ff febc 	bl	8002dc4 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 800304c:	e7fe      	b.n	800304c <Default_IRQHandler+0x34>
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	0801429a 	.word	0x0801429a
 8003058:	0800908a 	.word	0x0800908a
 800305c:	080090c1 	.word	0x080090c1
 8003060:	080090fd 	.word	0x080090fd
 8003064:	0800eb30 	.word	0x0800eb30
 8003068:	08009126 	.word	0x08009126
 800306c:	08009141 	.word	0x08009141

08003070 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003070:	4b69      	ldr	r3, [pc, #420]	; (8003218 <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003072:	4c6a      	ldr	r4, [pc, #424]	; (800321c <main+0x1ac>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800307a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800307e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4f67      	ldr	r7, [pc, #412]	; (8003220 <main+0x1b0>)
 8003084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003088:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 8003094:	4b63      	ldr	r3, [pc, #396]	; (8003224 <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 800309a:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 800309c:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 800309e:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a0:	2000      	movs	r0, #0
 80030a2:	b093      	sub	sp, #76	; 0x4c
 80030a4:	f7fe fc6c 	bl	8001980 <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a8:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <main+0x1b8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	920a      	str	r2, [sp, #40]	; 0x28
 80030ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030b0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80030b4:	6459      	str	r1, [r3, #68]	; 0x44
 80030b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030b8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80030bc:	910a      	str	r1, [sp, #40]	; 0x28
 80030be:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	9209      	str	r2, [sp, #36]	; 0x24
 80030c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030c8:	6419      	str	r1, [r3, #64]	; 0x40
 80030ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030cc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80030d0:	9109      	str	r1, [sp, #36]	; 0x24
 80030d2:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d4:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 80030d6:	4955      	ldr	r1, [pc, #340]	; (800322c <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d8:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 80030da:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 80030dc:	60e1      	str	r1, [r4, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	9208      	str	r2, [sp, #32]
 80030e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030e2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030e6:	6419      	str	r1, [r3, #64]	; 0x40
 80030e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030ea:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80030ee:	9108      	str	r1, [sp, #32]
 80030f0:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f2:	9207      	str	r2, [sp, #28]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <main+0x1c0>)
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003104:	9207      	str	r2, [sp, #28]
 8003106:	9a07      	ldr	r2, [sp, #28]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	f002 020c 	and.w	r2, r2, #12
 800310e:	2a04      	cmp	r2, #4
 8003110:	d007      	beq.n	8003122 <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003118:	2a08      	cmp	r2, #8
 800311a:	d13c      	bne.n	8003196 <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	0254      	lsls	r4, r2, #9
 8003120:	d539      	bpl.n	8003196 <main+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <main+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <main+0x1c4>)
 8003128:	2201      	movs	r2, #1
 800312a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800312e:	6839      	ldr	r1, [r7, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <main+0x1b8>)
 8003132:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003134:	0792      	lsls	r2, r2, #30
 8003136:	d541      	bpl.n	80031bc <main+0x14c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	f002 020c 	and.w	r2, r2, #12
 800313e:	2a08      	cmp	r2, #8
 8003140:	d04b      	beq.n	80031da <main+0x16a>
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <main+0x1c4>)
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
 8003148:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4a37      	ldr	r2, [pc, #220]	; (8003228 <main+0x1b8>)
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	019e      	lsls	r6, r3, #6
 8003150:	d439      	bmi.n	80031c6 <main+0x156>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <main+0x1c8>)
 8003154:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <main+0x1c4>)
 8003158:	2201      	movs	r2, #1
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
 800315c:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4a32      	ldr	r2, [pc, #200]	; (8003228 <main+0x1b8>)
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	019d      	lsls	r5, r3, #6
 8003164:	d534      	bpl.n	80031d0 <main+0x160>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003166:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <main+0x1a8>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	f002 0207 	and.w	r2, r2, #7
 800316e:	2a02      	cmp	r2, #2
 8003170:	d949      	bls.n	8003206 <main+0x196>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003172:	492d      	ldr	r1, [pc, #180]	; (8003228 <main+0x1b8>)
 8003174:	688b      	ldr	r3, [r1, #8]
 8003176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317a:	608b      	str	r3, [r1, #8]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	688b      	ldr	r3, [r1, #8]
 800317e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003182:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	688b      	ldr	r3, [r1, #8]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	608b      	str	r3, [r1, #8]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	680b      	ldr	r3, [r1, #0]
 800318e:	0198      	lsls	r0, r3, #6
 8003190:	d454      	bmi.n	800323c <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 8003192:	b672      	cpsid	i
  while (1)
 8003194:	e7fe      	b.n	8003194 <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	6839      	ldr	r1, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <main+0x1b8>)
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	0398      	lsls	r0, r3, #14
 80031ae:	d4ba      	bmi.n	8003126 <main+0xb6>
 80031b0:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b2:	1a5b      	subs	r3, r3, r1
 80031b4:	2b64      	cmp	r3, #100	; 0x64
 80031b6:	d9f8      	bls.n	80031aa <main+0x13a>
 80031b8:	b672      	cpsid	i
 80031ba:	e7fe      	b.n	80031ba <main+0x14a>
 80031bc:	683a      	ldr	r2, [r7, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031be:	1a52      	subs	r2, r2, r1
 80031c0:	2a02      	cmp	r2, #2
 80031c2:	d9b6      	bls.n	8003132 <main+0xc2>
 80031c4:	e7f8      	b.n	80031b8 <main+0x148>
 80031c6:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c8:	1a5b      	subs	r3, r3, r1
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d9be      	bls.n	800314c <main+0xdc>
 80031ce:	e7f3      	b.n	80031b8 <main+0x148>
 80031d0:	683b      	ldr	r3, [r7, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	1a5b      	subs	r3, r3, r1
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d9c3      	bls.n	8003160 <main+0xf0>
 80031d8:	e7ee      	b.n	80031b8 <main+0x148>
        pll_config = RCC->PLLCFGR;
 80031da:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	025c      	lsls	r4, r3, #9
 80031de:	d5eb      	bpl.n	80031b8 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e4:	2a04      	cmp	r2, #4
 80031e6:	d1e7      	bne.n	80031b8 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80031ec:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ee:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 80031f2:	d1e1      	bne.n	80031b8 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80031f8:	d1de      	bne.n	80031b8 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031fa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003202:	d1d9      	bne.n	80031b8 <main+0x148>
 8003204:	e7af      	b.n	8003166 <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	2203      	movs	r2, #3
 8003208:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4293      	cmp	r3, r2
 8003212:	d1be      	bne.n	8003192 <main+0x122>
 8003214:	e7ad      	b.n	8003172 <main+0x102>
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	20000ce0 	.word	0x20000ce0
 8003224:	05fa0300 	.word	0x05fa0300
 8003228:	40023800 	.word	0x40023800
 800322c:	05fa0700 	.word	0x05fa0700
 8003230:	40007000 	.word	0x40007000
 8003234:	42470000 	.word	0x42470000
 8003238:	04401904 	.word	0x04401904
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323c:	688b      	ldr	r3, [r1, #8]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	608b      	str	r3, [r1, #8]
 8003248:	683a      	ldr	r2, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324a:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	688b      	ldr	r3, [r1, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	f040 81cb 	bne.w	80035f0 <main+0x580>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800325a:	4bb6      	ldr	r3, [pc, #728]	; (8003534 <main+0x4c4>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	0752      	lsls	r2, r2, #29
 8003260:	f100 81cc 	bmi.w	80035fc <main+0x58c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	688b      	ldr	r3, [r1, #8]
 8003266:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800326a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800326e:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003270:	688b      	ldr	r3, [r1, #8]
 8003272:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003276:	608b      	str	r3, [r1, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	688b      	ldr	r3, [r1, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	f000 81e0 	beq.w	8003644 <main+0x5d4>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f000 81c2 	beq.w	800360e <main+0x59e>
      sysclockfreq = HSI_VALUE;
 800328a:	4dab      	ldr	r5, [pc, #684]	; (8003538 <main+0x4c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328c:	4eab      	ldr	r6, [pc, #684]	; (800353c <main+0x4cc>)
 800328e:	4aac      	ldr	r2, [pc, #688]	; (8003540 <main+0x4d0>)
 8003290:	68b3      	ldr	r3, [r6, #8]
 8003292:	4cac      	ldr	r4, [pc, #688]	; (8003544 <main+0x4d4>)
  huart2.Init.BaudRate = 115200;
 8003294:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8003574 <main+0x504>
 8003298:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f04f 0800 	mov.w	r8, #0
 80032a0:	5cd0      	ldrb	r0, [r2, r3]
 80032a2:	4ba9      	ldr	r3, [pc, #676]	; (8003548 <main+0x4d8>)
 80032a4:	40c5      	lsrs	r5, r0
 80032a6:	601d      	str	r5, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80032a8:	4ba8      	ldr	r3, [pc, #672]	; (800354c <main+0x4dc>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	f7fe fb68 	bl	8001980 <HAL_InitTick.isra.0>
 80032b0:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b4:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032be:	48a4      	ldr	r0, [pc, #656]	; (8003550 <main+0x4e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6333      	str	r3, [r6, #48]	; 0x30
 80032c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	9306      	str	r3, [sp, #24]
 80032ce:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80032d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	6333      	str	r3, [r6, #48]	; 0x30
 80032dc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	9305      	str	r3, [sp, #20]
 80032e4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80032ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6333      	str	r3, [r6, #48]	; 0x30
 80032f2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	9304      	str	r3, [sp, #16]
 80032fa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003300:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	6333      	str	r3, [r6, #48]	; 0x30
 8003308:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	9303      	str	r3, [sp, #12]
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003316:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003318:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800331c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003320:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003322:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003326:	f7fd ff2b 	bl	8001180 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332a:	2301      	movs	r3, #1
 800332c:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003330:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 8003332:	4c88      	ldr	r4, [pc, #544]	; (8003554 <main+0x4e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003334:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	e9cd 880f 	strd	r8, r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800333c:	f7fd ff20 	bl	8001180 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8003340:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003344:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003348:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 800334c:	f8c4 8010 	str.w	r8, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003352:	e9c4 8802 	strd	r8, r8, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	e9c4 2805 	strd	r2, r8, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335a:	f8c4 801c 	str.w	r8, [r4, #28]
 800335e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003362:	bb53      	cbnz	r3, 80033ba <main+0x34a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003364:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003368:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 8003370:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003376:	6433      	str	r3, [r6, #64]	; 0x40
 8003378:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	930c      	str	r3, [sp, #48]	; 0x30
 8003380:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003386:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6333      	str	r3, [r6, #48]	; 0x30
 800338e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003390:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	930b      	str	r3, [sp, #44]	; 0x2c
 8003398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800339e:	2603      	movs	r6, #3
 80033a0:	2307      	movs	r3, #7
 80033a2:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a6:	f7fd feeb 	bl	8001180 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033aa:	4642      	mov	r2, r8
 80033ac:	4641      	mov	r1, r8
 80033ae:	2026      	movs	r0, #38	; 0x26
 80033b0:	f7fd feb8 	bl	8001124 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <main+0x4e8>)
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	605a      	str	r2, [r3, #4]
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ba:	6826      	ldr	r6, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	68e2      	ldr	r2, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	2324      	movs	r3, #36	; 0x24
 80033c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80033c4:	68f3      	ldr	r3, [r6, #12]
 80033c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033ca:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033cc:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ce:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033d4:	4313      	orrs	r3, r2
 80033d6:	6133      	str	r3, [r6, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033d8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033da:	68f1      	ldr	r1, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033dc:	69e2      	ldr	r2, [r4, #28]
 80033de:	4303      	orrs	r3, r0
 80033e0:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80033e2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033e6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80033e8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 80033ee:	430b      	orrs	r3, r1
 80033f0:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f2:	6973      	ldr	r3, [r6, #20]
 80033f4:	69a1      	ldr	r1, [r4, #24]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6173      	str	r3, [r6, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <main+0x4ec>)
 8003400:	4957      	ldr	r1, [pc, #348]	; (8003560 <main+0x4f0>)
 8003402:	429e      	cmp	r6, r3
 8003404:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	d003      	beq.n	8003414 <main+0x3a4>
 800340c:	4855      	ldr	r0, [pc, #340]	; (8003564 <main+0x4f4>)
 800340e:	4286      	cmp	r6, r0
 8003410:	f040 811a 	bne.w	8003648 <main+0x5d8>
 8003414:	f3c3 3342 	ubfx	r3, r3, #13, #3
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	5cc9      	ldrb	r1, [r1, r3]
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800341a:	6863      	ldr	r3, [r4, #4]
 800341c:	40cd      	lsrs	r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003422:	f04f 0119 	mov.w	r1, #25
 8003426:	fba5 0101 	umull	r0, r1, r5, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342a:	f040 8110 	bne.w	800364e <main+0x5de>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800342e:	18da      	adds	r2, r3, r3
 8003430:	f04f 0500 	mov.w	r5, #0
 8003434:	eb45 0305 	adc.w	r3, r5, r5
 8003438:	f7fd fc34 	bl	8000ca4 <__aeabi_uldivmod>
 800343c:	2164      	movs	r1, #100	; 0x64
 800343e:	fbb0 f5f1 	udiv	r5, r0, r1
 8003442:	fb01 0315 	mls	r3, r1, r5, r0
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	3332      	adds	r3, #50	; 0x32
 800344a:	fbb3 f3f1 	udiv	r3, r3, r1
 800344e:	f003 0207 	and.w	r2, r3, #7
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8003458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800345c:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345e:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003460:	6933      	ldr	r3, [r6, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003462:	4a41      	ldr	r2, [pc, #260]	; (8003568 <main+0x4f8>)
 8003464:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003468:	6133      	str	r3, [r6, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346a:	6973      	ldr	r3, [r6, #20]
 800346c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003470:	6173      	str	r3, [r6, #20]
  __HAL_UART_ENABLE(huart);
 8003472:	68f3      	ldr	r3, [r6, #12]
 8003474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003478:	60f3      	str	r3, [r6, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	6423      	str	r3, [r4, #64]	; 0x40
  hiwdg.Instance = IWDG;
 800347e:	4e3b      	ldr	r6, [pc, #236]	; (800356c <main+0x4fc>)
  huart->gState = HAL_UART_STATE_READY;
 8003480:	2320      	movs	r3, #32
 8003482:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003486:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 8003488:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800348c:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 8003490:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8003494:	e9c6 2100 	strd	r2, r1, [r6]
  hiwdg.Init.Reload = 4095;
 8003498:	60b3      	str	r3, [r6, #8]
 800349a:	6010      	str	r0, [r2, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800349c:	f245 5055 	movw	r0, #21845	; 0x5555
 80034a0:	6010      	str	r0, [r2, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80034a2:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80034a4:	6093      	str	r3, [r2, #8]
 80034a6:	6839      	ldr	r1, [r7, #0]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034a8:	68d3      	ldr	r3, [r2, #12]
 80034aa:	f013 0303 	ands.w	r3, r3, #3
 80034ae:	f040 80de 	bne.w	800366e <main+0x5fe>
  setvbuf(stdin, NULL, _IONBF, 0);
 80034b2:	4c2f      	ldr	r4, [pc, #188]	; (8003570 <main+0x500>)
 80034b4:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034b6:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 80034ba:	6011      	str	r1, [r2, #0]
 80034bc:	6840      	ldr	r0, [r0, #4]
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	2202      	movs	r2, #2
 80034c4:	f000 fe02 	bl	80040cc <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80034c8:	6820      	ldr	r0, [r4, #0]
 80034ca:	9b01      	ldr	r3, [sp, #4]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	4619      	mov	r1, r3
 80034d0:	2202      	movs	r2, #2
 80034d2:	f000 fdfb 	bl	80040cc <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	9b01      	ldr	r3, [sp, #4]
 80034da:	68c0      	ldr	r0, [r0, #12]
 80034dc:	2202      	movs	r2, #2
 80034de:	4619      	mov	r1, r3
 80034e0:	f000 fdf4 	bl	80040cc <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <main+0x504>)
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80034ec:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 80034f6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80034fa:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 80034fc:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8003500:	d053      	beq.n	80035aa <main+0x53a>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8003502:	481d      	ldr	r0, [pc, #116]	; (8003578 <main+0x508>)
 8003504:	f004 fb4e 	bl	8007ba4 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 8003508:	2c00      	cmp	r4, #0
 800350a:	da02      	bge.n	8003512 <main+0x4a2>
 800350c:	481b      	ldr	r0, [pc, #108]	; (800357c <main+0x50c>)
 800350e:	f004 fb49 	bl	8007ba4 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8003512:	0067      	lsls	r7, r4, #1
 8003514:	d502      	bpl.n	800351c <main+0x4ac>
 8003516:	481a      	ldr	r0, [pc, #104]	; (8003580 <main+0x510>)
 8003518:	f004 fb44 	bl	8007ba4 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 800351c:	00a5      	lsls	r5, r4, #2
 800351e:	d502      	bpl.n	8003526 <main+0x4b6>
 8003520:	4818      	ldr	r0, [pc, #96]	; (8003584 <main+0x514>)
 8003522:	f004 fb3f 	bl	8007ba4 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 8003526:	00e0      	lsls	r0, r4, #3
 8003528:	d530      	bpl.n	800358c <main+0x51c>
 800352a:	4817      	ldr	r0, [pc, #92]	; (8003588 <main+0x518>)
 800352c:	f004 fb3a 	bl	8007ba4 <puts>
 8003530:	e02c      	b.n	800358c <main+0x51c>
 8003532:	bf00      	nop
 8003534:	40023c00 	.word	0x40023c00
 8003538:	00f42400 	.word	0x00f42400
 800353c:	40023800 	.word	0x40023800
 8003540:	0800c088 	.word	0x0800c088
 8003544:	40020000 	.word	0x40020000
 8003548:	20000004 	.word	0x20000004
 800354c:	2000001c 	.word	0x2000001c
 8003550:	40020800 	.word	0x40020800
 8003554:	20000b58 	.word	0x20000b58
 8003558:	e000e100 	.word	0xe000e100
 800355c:	40011000 	.word	0x40011000
 8003560:	0800c098 	.word	0x0800c098
 8003564:	40011400 	.word	0x40011400
 8003568:	40003000 	.word	0x40003000
 800356c:	20000abc 	.word	0x20000abc
 8003570:	20000020 	.word	0x20000020
 8003574:	40004400 	.word	0x40004400
 8003578:	0800916b 	.word	0x0800916b
 800357c:	080091a3 	.word	0x080091a3
 8003580:	080091ae 	.word	0x080091ae
 8003584:	080091c1 	.word	0x080091c1
 8003588:	080091e0 	.word	0x080091e0
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 800358c:	01a1      	lsls	r1, r4, #6
 800358e:	d502      	bpl.n	8003596 <main+0x526>
 8003590:	484f      	ldr	r0, [pc, #316]	; (80036d0 <main+0x660>)
 8003592:	f004 fb07 	bl	8007ba4 <puts>
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 8003596:	0162      	lsls	r2, r4, #5
 8003598:	d502      	bpl.n	80035a0 <main+0x530>
 800359a:	484e      	ldr	r0, [pc, #312]	; (80036d4 <main+0x664>)
 800359c:	f004 fb02 	bl	8007ba4 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 80035a0:	0123      	lsls	r3, r4, #4
 80035a2:	d502      	bpl.n	80035aa <main+0x53a>
 80035a4:	484c      	ldr	r0, [pc, #304]	; (80036d8 <main+0x668>)
 80035a6:	f004 fafd 	bl	8007ba4 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 80035aa:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <main+0x66c>)
 80035ac:	4d4c      	ldr	r5, [pc, #304]	; (80036e0 <main+0x670>)
  p = _tasktable_start;
 80035ae:	4c4d      	ldr	r4, [pc, #308]	; (80036e4 <main+0x674>)
  while(p != _tasktable_end) {
 80035b0:	4f4d      	ldr	r7, [pc, #308]	; (80036e8 <main+0x678>)
 80035b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035b6:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 80035b8:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 80035bc:	42bc      	cmp	r4, r7
 80035be:	d161      	bne.n	8003684 <main+0x614>
  my_Init();
 80035c0:	f7fc fe24 	bl	800020c <my_Init>
  ticks = AccumTicks;
 80035c4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80036f4 <main+0x684>
  AccumTicks = 0;
 80035c8:	f04f 0a00 	mov.w	sl, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80035cc:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 80035d0:	b672      	cpsid	i
  ticks = AccumTicks;
 80035d2:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 80035d6:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 80035da:	b662      	cpsie	i
  s = _taskstate_start;
 80035dc:	4d40      	ldr	r5, [pc, #256]	; (80036e0 <main+0x670>)
  p = _tasktable_start;
 80035de:	4c41      	ldr	r4, [pc, #260]	; (80036e4 <main+0x674>)
  while(p != _tasktable_end) {
 80035e0:	42bc      	cmp	r4, r7
 80035e2:	d157      	bne.n	8003694 <main+0x624>
  my_Loop();
 80035e4:	f7fc fe10 	bl	8000208 <my_Loop>
 80035e8:	6833      	ldr	r3, [r6, #0]
 80035ea:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 80035ee:	e7ef      	b.n	80035d0 <main+0x560>
 80035f0:	683b      	ldr	r3, [r7, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	4283      	cmp	r3, r0
 80035f6:	f67f ae2a 	bls.w	800324e <main+0x1de>
 80035fa:	e5ca      	b.n	8003192 <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fc:	2203      	movs	r2, #3
 80035fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	4293      	cmp	r3, r2
 8003608:	f47f adc3 	bne.w	8003192 <main+0x122>
 800360c:	e62a      	b.n	8003264 <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800360e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003610:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003614:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	bf14      	ite	ne
 800361a:	4834      	ldrne	r0, [pc, #208]	; (80036ec <main+0x67c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361c:	4834      	ldreq	r0, [pc, #208]	; (80036f0 <main+0x680>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003622:	bf18      	it	ne
 8003624:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003626:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	fba1 0100 	umull	r0, r1, r1, r0
 800362e:	f7fd fb39 	bl	8000ca4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <main+0x66c>)
 8003634:	685d      	ldr	r5, [r3, #4]
 8003636:	f3c5 4501 	ubfx	r5, r5, #16, #2
 800363a:	3501      	adds	r5, #1
 800363c:	006d      	lsls	r5, r5, #1
      sysclockfreq = pllvco/pllp;
 800363e:	fbb0 f5f5 	udiv	r5, r0, r5
  return sysclockfreq;
 8003642:	e623      	b.n	800328c <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003644:	4d29      	ldr	r5, [pc, #164]	; (80036ec <main+0x67c>)
 8003646:	e621      	b.n	800328c <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003648:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800364c:	e6e4      	b.n	8003418 <main+0x3a8>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	0f9b      	lsrs	r3, r3, #30
 8003652:	f7fd fb27 	bl	8000ca4 <__aeabi_uldivmod>
 8003656:	2264      	movs	r2, #100	; 0x64
 8003658:	fbb0 f1f2 	udiv	r1, r0, r2
 800365c:	fb02 0311 	mls	r3, r2, r1, r0
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	fbb3 f3f2 	udiv	r3, r3, r2
 8003668:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800366c:	e6f7      	b.n	800345e <main+0x3ee>
 800366e:	683b      	ldr	r3, [r7, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003670:	1a5b      	subs	r3, r3, r1
 8003672:	2b31      	cmp	r3, #49	; 0x31
 8003674:	f67f af18 	bls.w	80034a8 <main+0x438>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003678:	68d3      	ldr	r3, [r2, #12]
 800367a:	079b      	lsls	r3, r3, #30
 800367c:	f43f af14 	beq.w	80034a8 <main+0x438>
  __ASM volatile ("cpsid i" : : : "memory");
 8003680:	b672      	cpsid	i
  while (1)
 8003682:	e7fe      	b.n	8003682 <main+0x612>
    if(p->initFunc != NULL) {
 8003684:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 8003686:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 800368a:	b10b      	cbz	r3, 8003690 <main+0x620>
      p->initFunc(p->data);
 800368c:	68e0      	ldr	r0, [r4, #12]
 800368e:	4798      	blx	r3
    p++;
 8003690:	3418      	adds	r4, #24
    s++;
 8003692:	e793      	b.n	80035bc <main+0x54c>
    if(p->func != NULL) {
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	b11b      	cbz	r3, 80036a0 <main+0x630>
      if(p->interval == 0) {
 8003698:	6922      	ldr	r2, [r4, #16]
 800369a:	b9b2      	cbnz	r2, 80036ca <main+0x65a>
	p->func(p->data);
 800369c:	68e0      	ldr	r0, [r4, #12]
 800369e:	4798      	blx	r3
    p++;
 80036a0:	3418      	adds	r4, #24
    s++;
 80036a2:	3504      	adds	r5, #4
 80036a4:	e79c      	b.n	80035e0 <main+0x570>
	  if(s->interval) {
 80036a6:	682b      	ldr	r3, [r5, #0]
 80036a8:	b953      	cbnz	r3, 80036c0 <main+0x650>
	    p->func(p->data);
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	68e0      	ldr	r0, [r4, #12]
 80036ae:	9201      	str	r2, [sp, #4]
 80036b0:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	9a01      	ldr	r2, [sp, #4]
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	d1f3      	bne.n	80036a6 <main+0x636>
 80036be:	e7ef      	b.n	80036a0 <main+0x630>
	    s->interval--;
 80036c0:	3b01      	subs	r3, #1
 80036c2:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f7      	bne.n	80036b8 <main+0x648>
 80036c8:	e7ef      	b.n	80036aa <main+0x63a>
 80036ca:	465a      	mov	r2, fp
 80036cc:	e7f5      	b.n	80036ba <main+0x64a>
 80036ce:	bf00      	nop
 80036d0:	080091ea 	.word	0x080091ea
 80036d4:	080091f4 	.word	0x080091f4
 80036d8:	080091fe 	.word	0x080091fe
 80036dc:	40023800 	.word	0x40023800
 80036e0:	200001f4 	.word	0x200001f4
 80036e4:	08014830 	.word	0x08014830
 80036e8:	08014848 	.word	0x08014848
 80036ec:	007a1200 	.word	0x007a1200
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	20000214 	.word	0x20000214

080036f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <NMI_Handler>

080036fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler>

080036fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036fc:	e7fe      	b.n	80036fc <MemManage_Handler>

080036fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036fe:	e7fe      	b.n	80036fe <BusFault_Handler>

08003700 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003700:	e7fe      	b.n	8003700 <UsageFault_Handler>

08003702 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003702:	4770      	bx	lr

08003704 <DebugMon_Handler>:
 8003704:	4770      	bx	lr

08003706 <PendSV_Handler>:
 8003706:	4770      	bx	lr

08003708 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8003708:	4a05      	ldr	r2, [pc, #20]	; (8003720 <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800370a:	b508      	push	{r3, lr}
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 8003712:	f7fc fd6f 	bl	80001f4 <my_Tick>
  AccumTicks++;
 8003716:	4a03      	ldr	r2, [pc, #12]	; (8003724 <SysTick_Handler+0x1c>)
 8003718:	6813      	ldr	r3, [r2, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 800371e:	bd08      	pop	{r3, pc}
 8003720:	20000ce0 	.word	0x20000ce0
 8003724:	20000214 	.word	0x20000214

08003728 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4a03      	ldr	r2, [pc, #12]	; (8003738 <SystemInit+0x10>)
 800372a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800372e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003732:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003774 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003740:	480d      	ldr	r0, [pc, #52]	; (8003778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003742:	490e      	ldr	r1, [pc, #56]	; (800377c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003744:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003748:	e002      	b.n	8003750 <LoopCopyDataInit>

0800374a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800374c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800374e:	3304      	adds	r3, #4

08003750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003754:	d3f9      	bcc.n	800374a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003756:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003758:	4c0b      	ldr	r4, [pc, #44]	; (8003788 <LoopFillZerobss+0x26>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800375c:	e001      	b.n	8003762 <LoopFillZerobss>

0800375e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800375e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003760:	3204      	adds	r2, #4

08003762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003764:	d3fb      	bcc.n	800375e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003766:	f7ff ffdf 	bl	8003728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800376a:	f000 f819 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376e:	f7ff fc7f 	bl	8003070 <main>
  bx  lr    
 8003772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800377c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003780:	08014948 	.word	0x08014948
  ldr r2, =_sbss
 8003784:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003788:	20000cf4 	.word	0x20000cf4

0800378c <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 800378c:	f7ff fc44 	bl	8003018 <Default_IRQHandler>
  b  Infinite_Loop
 8003790:	e7fc      	b.n	800378c <ADC_IRQHandler>
	...

08003794 <__errno>:
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <__errno+0x8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000020 	.word	0x20000020

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4d0d      	ldr	r5, [pc, #52]	; (80037d8 <__libc_init_array+0x38>)
 80037a4:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	2600      	movs	r6, #0
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	4d0b      	ldr	r5, [pc, #44]	; (80037e0 <__libc_init_array+0x40>)
 80037b2:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <__libc_init_array+0x44>)
 80037b4:	f004 fbfe 	bl	8007fb4 <_init>
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	2600      	movs	r6, #0
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	08014940 	.word	0x08014940
 80037dc:	08014940 	.word	0x08014940
 80037e0:	08014940 	.word	0x08014940
 80037e4:	08014944 	.word	0x08014944

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <__cvt>:
 80037f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	ec55 4b10 	vmov	r4, r5, d0
 8003800:	2d00      	cmp	r5, #0
 8003802:	460e      	mov	r6, r1
 8003804:	4619      	mov	r1, r3
 8003806:	462b      	mov	r3, r5
 8003808:	bfbb      	ittet	lt
 800380a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800380e:	461d      	movlt	r5, r3
 8003810:	2300      	movge	r3, #0
 8003812:	232d      	movlt	r3, #45	; 0x2d
 8003814:	700b      	strb	r3, [r1, #0]
 8003816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800381c:	4691      	mov	r9, r2
 800381e:	f023 0820 	bic.w	r8, r3, #32
 8003822:	bfbc      	itt	lt
 8003824:	4622      	movlt	r2, r4
 8003826:	4614      	movlt	r4, r2
 8003828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800382c:	d005      	beq.n	800383a <__cvt+0x42>
 800382e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003832:	d100      	bne.n	8003836 <__cvt+0x3e>
 8003834:	3601      	adds	r6, #1
 8003836:	2102      	movs	r1, #2
 8003838:	e000      	b.n	800383c <__cvt+0x44>
 800383a:	2103      	movs	r1, #3
 800383c:	ab03      	add	r3, sp, #12
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	ab02      	add	r3, sp, #8
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	ec45 4b10 	vmov	d0, r4, r5
 8003848:	4653      	mov	r3, sl
 800384a:	4632      	mov	r2, r6
 800384c:	f001 fcb4 	bl	80051b8 <_dtoa_r>
 8003850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003854:	4607      	mov	r7, r0
 8003856:	d102      	bne.n	800385e <__cvt+0x66>
 8003858:	f019 0f01 	tst.w	r9, #1
 800385c:	d022      	beq.n	80038a4 <__cvt+0xac>
 800385e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003862:	eb07 0906 	add.w	r9, r7, r6
 8003866:	d110      	bne.n	800388a <__cvt+0x92>
 8003868:	783b      	ldrb	r3, [r7, #0]
 800386a:	2b30      	cmp	r3, #48	; 0x30
 800386c:	d10a      	bne.n	8003884 <__cvt+0x8c>
 800386e:	2200      	movs	r2, #0
 8003870:	2300      	movs	r3, #0
 8003872:	4620      	mov	r0, r4
 8003874:	4629      	mov	r1, r5
 8003876:	f7fd f94f 	bl	8000b18 <__aeabi_dcmpeq>
 800387a:	b918      	cbnz	r0, 8003884 <__cvt+0x8c>
 800387c:	f1c6 0601 	rsb	r6, r6, #1
 8003880:	f8ca 6000 	str.w	r6, [sl]
 8003884:	f8da 3000 	ldr.w	r3, [sl]
 8003888:	4499      	add	r9, r3
 800388a:	2200      	movs	r2, #0
 800388c:	2300      	movs	r3, #0
 800388e:	4620      	mov	r0, r4
 8003890:	4629      	mov	r1, r5
 8003892:	f7fd f941 	bl	8000b18 <__aeabi_dcmpeq>
 8003896:	b108      	cbz	r0, 800389c <__cvt+0xa4>
 8003898:	f8cd 900c 	str.w	r9, [sp, #12]
 800389c:	2230      	movs	r2, #48	; 0x30
 800389e:	9b03      	ldr	r3, [sp, #12]
 80038a0:	454b      	cmp	r3, r9
 80038a2:	d307      	bcc.n	80038b4 <__cvt+0xbc>
 80038a4:	9b03      	ldr	r3, [sp, #12]
 80038a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038a8:	1bdb      	subs	r3, r3, r7
 80038aa:	4638      	mov	r0, r7
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	b004      	add	sp, #16
 80038b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b4:	1c59      	adds	r1, r3, #1
 80038b6:	9103      	str	r1, [sp, #12]
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e7f0      	b.n	800389e <__cvt+0xa6>

080038bc <__exponent>:
 80038bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038be:	4603      	mov	r3, r0
 80038c0:	2900      	cmp	r1, #0
 80038c2:	bfb8      	it	lt
 80038c4:	4249      	neglt	r1, r1
 80038c6:	f803 2b02 	strb.w	r2, [r3], #2
 80038ca:	bfb4      	ite	lt
 80038cc:	222d      	movlt	r2, #45	; 0x2d
 80038ce:	222b      	movge	r2, #43	; 0x2b
 80038d0:	2909      	cmp	r1, #9
 80038d2:	7042      	strb	r2, [r0, #1]
 80038d4:	dd2a      	ble.n	800392c <__exponent+0x70>
 80038d6:	f10d 0407 	add.w	r4, sp, #7
 80038da:	46a4      	mov	ip, r4
 80038dc:	270a      	movs	r7, #10
 80038de:	46a6      	mov	lr, r4
 80038e0:	460a      	mov	r2, r1
 80038e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80038e6:	fb07 1516 	mls	r5, r7, r6, r1
 80038ea:	3530      	adds	r5, #48	; 0x30
 80038ec:	2a63      	cmp	r2, #99	; 0x63
 80038ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80038f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038f6:	4631      	mov	r1, r6
 80038f8:	dcf1      	bgt.n	80038de <__exponent+0x22>
 80038fa:	3130      	adds	r1, #48	; 0x30
 80038fc:	f1ae 0502 	sub.w	r5, lr, #2
 8003900:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003904:	1c44      	adds	r4, r0, #1
 8003906:	4629      	mov	r1, r5
 8003908:	4561      	cmp	r1, ip
 800390a:	d30a      	bcc.n	8003922 <__exponent+0x66>
 800390c:	f10d 0209 	add.w	r2, sp, #9
 8003910:	eba2 020e 	sub.w	r2, r2, lr
 8003914:	4565      	cmp	r5, ip
 8003916:	bf88      	it	hi
 8003918:	2200      	movhi	r2, #0
 800391a:	4413      	add	r3, r2
 800391c:	1a18      	subs	r0, r3, r0
 800391e:	b003      	add	sp, #12
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003926:	f804 2f01 	strb.w	r2, [r4, #1]!
 800392a:	e7ed      	b.n	8003908 <__exponent+0x4c>
 800392c:	2330      	movs	r3, #48	; 0x30
 800392e:	3130      	adds	r1, #48	; 0x30
 8003930:	7083      	strb	r3, [r0, #2]
 8003932:	70c1      	strb	r1, [r0, #3]
 8003934:	1d03      	adds	r3, r0, #4
 8003936:	e7f1      	b.n	800391c <__exponent+0x60>

08003938 <_printf_float>:
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	ed2d 8b02 	vpush	{d8}
 8003940:	b08d      	sub	sp, #52	; 0x34
 8003942:	460c      	mov	r4, r1
 8003944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003948:	4616      	mov	r6, r2
 800394a:	461f      	mov	r7, r3
 800394c:	4605      	mov	r5, r0
 800394e:	f002 ff59 	bl	8006804 <_localeconv_r>
 8003952:	f8d0 a000 	ldr.w	sl, [r0]
 8003956:	4650      	mov	r0, sl
 8003958:	f7fc fc5c 	bl	8000214 <strlen>
 800395c:	2300      	movs	r3, #0
 800395e:	930a      	str	r3, [sp, #40]	; 0x28
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	9305      	str	r3, [sp, #20]
 8003964:	f8d8 3000 	ldr.w	r3, [r8]
 8003968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800396c:	3307      	adds	r3, #7
 800396e:	f023 0307 	bic.w	r3, r3, #7
 8003972:	f103 0208 	add.w	r2, r3, #8
 8003976:	f8c8 2000 	str.w	r2, [r8]
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003982:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800398a:	9307      	str	r3, [sp, #28]
 800398c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003990:	ee08 0a10 	vmov	s16, r0
 8003994:	4b9f      	ldr	r3, [pc, #636]	; (8003c14 <_printf_float+0x2dc>)
 8003996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800399a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800399e:	f7fd f8ed 	bl	8000b7c <__aeabi_dcmpun>
 80039a2:	bb88      	cbnz	r0, 8003a08 <_printf_float+0xd0>
 80039a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039a8:	4b9a      	ldr	r3, [pc, #616]	; (8003c14 <_printf_float+0x2dc>)
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ae:	f7fd f8c7 	bl	8000b40 <__aeabi_dcmple>
 80039b2:	bb48      	cbnz	r0, 8003a08 <_printf_float+0xd0>
 80039b4:	2200      	movs	r2, #0
 80039b6:	2300      	movs	r3, #0
 80039b8:	4640      	mov	r0, r8
 80039ba:	4649      	mov	r1, r9
 80039bc:	f7fd f8b6 	bl	8000b2c <__aeabi_dcmplt>
 80039c0:	b110      	cbz	r0, 80039c8 <_printf_float+0x90>
 80039c2:	232d      	movs	r3, #45	; 0x2d
 80039c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c8:	4b93      	ldr	r3, [pc, #588]	; (8003c18 <_printf_float+0x2e0>)
 80039ca:	4894      	ldr	r0, [pc, #592]	; (8003c1c <_printf_float+0x2e4>)
 80039cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80039d0:	bf94      	ite	ls
 80039d2:	4698      	movls	r8, r3
 80039d4:	4680      	movhi	r8, r0
 80039d6:	2303      	movs	r3, #3
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	9b05      	ldr	r3, [sp, #20]
 80039dc:	f023 0204 	bic.w	r2, r3, #4
 80039e0:	6022      	str	r2, [r4, #0]
 80039e2:	f04f 0900 	mov.w	r9, #0
 80039e6:	9700      	str	r7, [sp, #0]
 80039e8:	4633      	mov	r3, r6
 80039ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 f9d8 	bl	8003da4 <_printf_common>
 80039f4:	3001      	adds	r0, #1
 80039f6:	f040 8090 	bne.w	8003b1a <_printf_float+0x1e2>
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039fe:	b00d      	add	sp, #52	; 0x34
 8003a00:	ecbd 8b02 	vpop	{d8}
 8003a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4649      	mov	r1, r9
 8003a10:	f7fd f8b4 	bl	8000b7c <__aeabi_dcmpun>
 8003a14:	b140      	cbz	r0, 8003a28 <_printf_float+0xf0>
 8003a16:	464b      	mov	r3, r9
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfbc      	itt	lt
 8003a1c:	232d      	movlt	r3, #45	; 0x2d
 8003a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a22:	487f      	ldr	r0, [pc, #508]	; (8003c20 <_printf_float+0x2e8>)
 8003a24:	4b7f      	ldr	r3, [pc, #508]	; (8003c24 <_printf_float+0x2ec>)
 8003a26:	e7d1      	b.n	80039cc <_printf_float+0x94>
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a2e:	9206      	str	r2, [sp, #24]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	d13f      	bne.n	8003ab4 <_printf_float+0x17c>
 8003a34:	2306      	movs	r3, #6
 8003a36:	6063      	str	r3, [r4, #4]
 8003a38:	9b05      	ldr	r3, [sp, #20]
 8003a3a:	6861      	ldr	r1, [r4, #4]
 8003a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a40:	2300      	movs	r3, #0
 8003a42:	9303      	str	r3, [sp, #12]
 8003a44:	ab0a      	add	r3, sp, #40	; 0x28
 8003a46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a4a:	ab09      	add	r3, sp, #36	; 0x24
 8003a4c:	ec49 8b10 	vmov	d0, r8, r9
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f7ff fecd 	bl	80037f8 <__cvt>
 8003a5e:	9b06      	ldr	r3, [sp, #24]
 8003a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a62:	2b47      	cmp	r3, #71	; 0x47
 8003a64:	4680      	mov	r8, r0
 8003a66:	d108      	bne.n	8003a7a <_printf_float+0x142>
 8003a68:	1cc8      	adds	r0, r1, #3
 8003a6a:	db02      	blt.n	8003a72 <_printf_float+0x13a>
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	4299      	cmp	r1, r3
 8003a70:	dd41      	ble.n	8003af6 <_printf_float+0x1be>
 8003a72:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a76:	fa5f fb8b 	uxtb.w	fp, fp
 8003a7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a7e:	d820      	bhi.n	8003ac2 <_printf_float+0x18a>
 8003a80:	3901      	subs	r1, #1
 8003a82:	465a      	mov	r2, fp
 8003a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a88:	9109      	str	r1, [sp, #36]	; 0x24
 8003a8a:	f7ff ff17 	bl	80038bc <__exponent>
 8003a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a90:	1813      	adds	r3, r2, r0
 8003a92:	2a01      	cmp	r2, #1
 8003a94:	4681      	mov	r9, r0
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	dc02      	bgt.n	8003aa0 <_printf_float+0x168>
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	07d2      	lsls	r2, r2, #31
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_float+0x16c>
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d09c      	beq.n	80039e6 <_printf_float+0xae>
 8003aac:	232d      	movs	r3, #45	; 0x2d
 8003aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab2:	e798      	b.n	80039e6 <_printf_float+0xae>
 8003ab4:	9a06      	ldr	r2, [sp, #24]
 8003ab6:	2a47      	cmp	r2, #71	; 0x47
 8003ab8:	d1be      	bne.n	8003a38 <_printf_float+0x100>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1bc      	bne.n	8003a38 <_printf_float+0x100>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e7b9      	b.n	8003a36 <_printf_float+0xfe>
 8003ac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ac6:	d118      	bne.n	8003afa <_printf_float+0x1c2>
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	dd0b      	ble.n	8003ae6 <_printf_float+0x1ae>
 8003ace:	6121      	str	r1, [r4, #16]
 8003ad0:	b913      	cbnz	r3, 8003ad8 <_printf_float+0x1a0>
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	07d0      	lsls	r0, r2, #31
 8003ad6:	d502      	bpl.n	8003ade <_printf_float+0x1a6>
 8003ad8:	3301      	adds	r3, #1
 8003ada:	440b      	add	r3, r1
 8003adc:	6123      	str	r3, [r4, #16]
 8003ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ae0:	f04f 0900 	mov.w	r9, #0
 8003ae4:	e7de      	b.n	8003aa4 <_printf_float+0x16c>
 8003ae6:	b913      	cbnz	r3, 8003aee <_printf_float+0x1b6>
 8003ae8:	6822      	ldr	r2, [r4, #0]
 8003aea:	07d2      	lsls	r2, r2, #31
 8003aec:	d501      	bpl.n	8003af2 <_printf_float+0x1ba>
 8003aee:	3302      	adds	r3, #2
 8003af0:	e7f4      	b.n	8003adc <_printf_float+0x1a4>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e7f2      	b.n	8003adc <_printf_float+0x1a4>
 8003af6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003afc:	4299      	cmp	r1, r3
 8003afe:	db05      	blt.n	8003b0c <_printf_float+0x1d4>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	6121      	str	r1, [r4, #16]
 8003b04:	07d8      	lsls	r0, r3, #31
 8003b06:	d5ea      	bpl.n	8003ade <_printf_float+0x1a6>
 8003b08:	1c4b      	adds	r3, r1, #1
 8003b0a:	e7e7      	b.n	8003adc <_printf_float+0x1a4>
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	bfd4      	ite	le
 8003b10:	f1c1 0202 	rsble	r2, r1, #2
 8003b14:	2201      	movgt	r2, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	e7e0      	b.n	8003adc <_printf_float+0x1a4>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	055a      	lsls	r2, r3, #21
 8003b1e:	d407      	bmi.n	8003b30 <_printf_float+0x1f8>
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	4642      	mov	r2, r8
 8003b24:	4631      	mov	r1, r6
 8003b26:	4628      	mov	r0, r5
 8003b28:	47b8      	blx	r7
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d12c      	bne.n	8003b88 <_printf_float+0x250>
 8003b2e:	e764      	b.n	80039fa <_printf_float+0xc2>
 8003b30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b34:	f240 80e0 	bls.w	8003cf8 <_printf_float+0x3c0>
 8003b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f7fc ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d034      	beq.n	8003bb2 <_printf_float+0x27a>
 8003b48:	4a37      	ldr	r2, [pc, #220]	; (8003c28 <_printf_float+0x2f0>)
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4628      	mov	r0, r5
 8003b50:	47b8      	blx	r7
 8003b52:	3001      	adds	r0, #1
 8003b54:	f43f af51 	beq.w	80039fa <_printf_float+0xc2>
 8003b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	db02      	blt.n	8003b66 <_printf_float+0x22e>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	07d8      	lsls	r0, r3, #31
 8003b64:	d510      	bpl.n	8003b88 <_printf_float+0x250>
 8003b66:	ee18 3a10 	vmov	r3, s16
 8003b6a:	4652      	mov	r2, sl
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	4628      	mov	r0, r5
 8003b70:	47b8      	blx	r7
 8003b72:	3001      	adds	r0, #1
 8003b74:	f43f af41 	beq.w	80039fa <_printf_float+0xc2>
 8003b78:	f04f 0800 	mov.w	r8, #0
 8003b7c:	f104 091a 	add.w	r9, r4, #26
 8003b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	4543      	cmp	r3, r8
 8003b86:	dc09      	bgt.n	8003b9c <_printf_float+0x264>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	079b      	lsls	r3, r3, #30
 8003b8c:	f100 8105 	bmi.w	8003d9a <_printf_float+0x462>
 8003b90:	68e0      	ldr	r0, [r4, #12]
 8003b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b94:	4298      	cmp	r0, r3
 8003b96:	bfb8      	it	lt
 8003b98:	4618      	movlt	r0, r3
 8003b9a:	e730      	b.n	80039fe <_printf_float+0xc6>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	464a      	mov	r2, r9
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	47b8      	blx	r7
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f43f af27 	beq.w	80039fa <_printf_float+0xc2>
 8003bac:	f108 0801 	add.w	r8, r8, #1
 8003bb0:	e7e6      	b.n	8003b80 <_printf_float+0x248>
 8003bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	dc39      	bgt.n	8003c2c <_printf_float+0x2f4>
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <_printf_float+0x2f0>)
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b8      	blx	r7
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f43f af19 	beq.w	80039fa <_printf_float+0xc2>
 8003bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d102      	bne.n	8003bd6 <_printf_float+0x29e>
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	07d9      	lsls	r1, r3, #31
 8003bd4:	d5d8      	bpl.n	8003b88 <_printf_float+0x250>
 8003bd6:	ee18 3a10 	vmov	r3, s16
 8003bda:	4652      	mov	r2, sl
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f af09 	beq.w	80039fa <_printf_float+0xc2>
 8003be8:	f04f 0900 	mov.w	r9, #0
 8003bec:	f104 0a1a 	add.w	sl, r4, #26
 8003bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bf2:	425b      	negs	r3, r3
 8003bf4:	454b      	cmp	r3, r9
 8003bf6:	dc01      	bgt.n	8003bfc <_printf_float+0x2c4>
 8003bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bfa:	e792      	b.n	8003b22 <_printf_float+0x1ea>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4652      	mov	r2, sl
 8003c00:	4631      	mov	r1, r6
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	f43f aef7 	beq.w	80039fa <_printf_float+0xc2>
 8003c0c:	f109 0901 	add.w	r9, r9, #1
 8003c10:	e7ee      	b.n	8003bf0 <_printf_float+0x2b8>
 8003c12:	bf00      	nop
 8003c14:	7fefffff 	.word	0x7fefffff
 8003c18:	080143b4 	.word	0x080143b4
 8003c1c:	080143b8 	.word	0x080143b8
 8003c20:	080143c0 	.word	0x080143c0
 8003c24:	080143bc 	.word	0x080143bc
 8003c28:	0800a457 	.word	0x0800a457
 8003c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c30:	429a      	cmp	r2, r3
 8003c32:	bfa8      	it	ge
 8003c34:	461a      	movge	r2, r3
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	4691      	mov	r9, r2
 8003c3a:	dc37      	bgt.n	8003cac <_printf_float+0x374>
 8003c3c:	f04f 0b00 	mov.w	fp, #0
 8003c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c44:	f104 021a 	add.w	r2, r4, #26
 8003c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c4a:	9305      	str	r3, [sp, #20]
 8003c4c:	eba3 0309 	sub.w	r3, r3, r9
 8003c50:	455b      	cmp	r3, fp
 8003c52:	dc33      	bgt.n	8003cbc <_printf_float+0x384>
 8003c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	db3b      	blt.n	8003cd4 <_printf_float+0x39c>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	07da      	lsls	r2, r3, #31
 8003c60:	d438      	bmi.n	8003cd4 <_printf_float+0x39c>
 8003c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c64:	9a05      	ldr	r2, [sp, #20]
 8003c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c68:	1a9a      	subs	r2, r3, r2
 8003c6a:	eba3 0901 	sub.w	r9, r3, r1
 8003c6e:	4591      	cmp	r9, r2
 8003c70:	bfa8      	it	ge
 8003c72:	4691      	movge	r9, r2
 8003c74:	f1b9 0f00 	cmp.w	r9, #0
 8003c78:	dc35      	bgt.n	8003ce6 <_printf_float+0x3ae>
 8003c7a:	f04f 0800 	mov.w	r8, #0
 8003c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c82:	f104 0a1a 	add.w	sl, r4, #26
 8003c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	eba3 0309 	sub.w	r3, r3, r9
 8003c90:	4543      	cmp	r3, r8
 8003c92:	f77f af79 	ble.w	8003b88 <_printf_float+0x250>
 8003c96:	2301      	movs	r3, #1
 8003c98:	4652      	mov	r2, sl
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b8      	blx	r7
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	f43f aeaa 	beq.w	80039fa <_printf_float+0xc2>
 8003ca6:	f108 0801 	add.w	r8, r8, #1
 8003caa:	e7ec      	b.n	8003c86 <_printf_float+0x34e>
 8003cac:	4613      	mov	r3, r2
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1c0      	bne.n	8003c3c <_printf_float+0x304>
 8003cba:	e69e      	b.n	80039fa <_printf_float+0xc2>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	9205      	str	r2, [sp, #20]
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f ae97 	beq.w	80039fa <_printf_float+0xc2>
 8003ccc:	9a05      	ldr	r2, [sp, #20]
 8003cce:	f10b 0b01 	add.w	fp, fp, #1
 8003cd2:	e7b9      	b.n	8003c48 <_printf_float+0x310>
 8003cd4:	ee18 3a10 	vmov	r3, s16
 8003cd8:	4652      	mov	r2, sl
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d1be      	bne.n	8003c62 <_printf_float+0x32a>
 8003ce4:	e689      	b.n	80039fa <_printf_float+0xc2>
 8003ce6:	9a05      	ldr	r2, [sp, #20]
 8003ce8:	464b      	mov	r3, r9
 8003cea:	4442      	add	r2, r8
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d1c1      	bne.n	8003c7a <_printf_float+0x342>
 8003cf6:	e680      	b.n	80039fa <_printf_float+0xc2>
 8003cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cfa:	2a01      	cmp	r2, #1
 8003cfc:	dc01      	bgt.n	8003d02 <_printf_float+0x3ca>
 8003cfe:	07db      	lsls	r3, r3, #31
 8003d00:	d538      	bpl.n	8003d74 <_printf_float+0x43c>
 8003d02:	2301      	movs	r3, #1
 8003d04:	4642      	mov	r2, r8
 8003d06:	4631      	mov	r1, r6
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47b8      	blx	r7
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	f43f ae74 	beq.w	80039fa <_printf_float+0xc2>
 8003d12:	ee18 3a10 	vmov	r3, s16
 8003d16:	4652      	mov	r2, sl
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f ae6b 	beq.w	80039fa <_printf_float+0xc2>
 8003d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f7fc fef4 	bl	8000b18 <__aeabi_dcmpeq>
 8003d30:	b9d8      	cbnz	r0, 8003d6a <_printf_float+0x432>
 8003d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d34:	f108 0201 	add.w	r2, r8, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b8      	blx	r7
 8003d40:	3001      	adds	r0, #1
 8003d42:	d10e      	bne.n	8003d62 <_printf_float+0x42a>
 8003d44:	e659      	b.n	80039fa <_printf_float+0xc2>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4652      	mov	r2, sl
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b8      	blx	r7
 8003d50:	3001      	adds	r0, #1
 8003d52:	f43f ae52 	beq.w	80039fa <_printf_float+0xc2>
 8003d56:	f108 0801 	add.w	r8, r8, #1
 8003d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	4543      	cmp	r3, r8
 8003d60:	dcf1      	bgt.n	8003d46 <_printf_float+0x40e>
 8003d62:	464b      	mov	r3, r9
 8003d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d68:	e6dc      	b.n	8003b24 <_printf_float+0x1ec>
 8003d6a:	f04f 0800 	mov.w	r8, #0
 8003d6e:	f104 0a1a 	add.w	sl, r4, #26
 8003d72:	e7f2      	b.n	8003d5a <_printf_float+0x422>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4642      	mov	r2, r8
 8003d78:	e7df      	b.n	8003d3a <_printf_float+0x402>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	464a      	mov	r2, r9
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f ae38 	beq.w	80039fa <_printf_float+0xc2>
 8003d8a:	f108 0801 	add.w	r8, r8, #1
 8003d8e:	68e3      	ldr	r3, [r4, #12]
 8003d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d92:	1a5b      	subs	r3, r3, r1
 8003d94:	4543      	cmp	r3, r8
 8003d96:	dcf0      	bgt.n	8003d7a <_printf_float+0x442>
 8003d98:	e6fa      	b.n	8003b90 <_printf_float+0x258>
 8003d9a:	f04f 0800 	mov.w	r8, #0
 8003d9e:	f104 0919 	add.w	r9, r4, #25
 8003da2:	e7f4      	b.n	8003d8e <_printf_float+0x456>

08003da4 <_printf_common>:
 8003da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da8:	4616      	mov	r6, r2
 8003daa:	4699      	mov	r9, r3
 8003dac:	688a      	ldr	r2, [r1, #8]
 8003dae:	690b      	ldr	r3, [r1, #16]
 8003db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db4:	4293      	cmp	r3, r2
 8003db6:	bfb8      	it	lt
 8003db8:	4613      	movlt	r3, r2
 8003dba:	6033      	str	r3, [r6, #0]
 8003dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	b10a      	cbz	r2, 8003dca <_printf_common+0x26>
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	0699      	lsls	r1, r3, #26
 8003dce:	bf42      	ittt	mi
 8003dd0:	6833      	ldrmi	r3, [r6, #0]
 8003dd2:	3302      	addmi	r3, #2
 8003dd4:	6033      	strmi	r3, [r6, #0]
 8003dd6:	6825      	ldr	r5, [r4, #0]
 8003dd8:	f015 0506 	ands.w	r5, r5, #6
 8003ddc:	d106      	bne.n	8003dec <_printf_common+0x48>
 8003dde:	f104 0a19 	add.w	sl, r4, #25
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	6832      	ldr	r2, [r6, #0]
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dc26      	bgt.n	8003e3a <_printf_common+0x96>
 8003dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df0:	1e13      	subs	r3, r2, #0
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	bf18      	it	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	0692      	lsls	r2, r2, #26
 8003dfa:	d42b      	bmi.n	8003e54 <_printf_common+0xb0>
 8003dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e00:	4649      	mov	r1, r9
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c0      	blx	r8
 8003e06:	3001      	adds	r0, #1
 8003e08:	d01e      	beq.n	8003e48 <_printf_common+0xa4>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	68e5      	ldr	r5, [r4, #12]
 8003e0e:	6832      	ldr	r2, [r6, #0]
 8003e10:	f003 0306 	and.w	r3, r3, #6
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	bf08      	it	eq
 8003e18:	1aad      	subeq	r5, r5, r2
 8003e1a:	68a3      	ldr	r3, [r4, #8]
 8003e1c:	6922      	ldr	r2, [r4, #16]
 8003e1e:	bf0c      	ite	eq
 8003e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e24:	2500      	movne	r5, #0
 8003e26:	4293      	cmp	r3, r2
 8003e28:	bfc4      	itt	gt
 8003e2a:	1a9b      	subgt	r3, r3, r2
 8003e2c:	18ed      	addgt	r5, r5, r3
 8003e2e:	2600      	movs	r6, #0
 8003e30:	341a      	adds	r4, #26
 8003e32:	42b5      	cmp	r5, r6
 8003e34:	d11a      	bne.n	8003e6c <_printf_common+0xc8>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e008      	b.n	8003e4c <_printf_common+0xa8>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	4649      	mov	r1, r9
 8003e40:	4638      	mov	r0, r7
 8003e42:	47c0      	blx	r8
 8003e44:	3001      	adds	r0, #1
 8003e46:	d103      	bne.n	8003e50 <_printf_common+0xac>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	3501      	adds	r5, #1
 8003e52:	e7c6      	b.n	8003de2 <_printf_common+0x3e>
 8003e54:	18e1      	adds	r1, r4, r3
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	2030      	movs	r0, #48	; 0x30
 8003e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e5e:	4422      	add	r2, r4
 8003e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e68:	3302      	adds	r3, #2
 8003e6a:	e7c7      	b.n	8003dfc <_printf_common+0x58>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4622      	mov	r2, r4
 8003e70:	4649      	mov	r1, r9
 8003e72:	4638      	mov	r0, r7
 8003e74:	47c0      	blx	r8
 8003e76:	3001      	adds	r0, #1
 8003e78:	d0e6      	beq.n	8003e48 <_printf_common+0xa4>
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7d9      	b.n	8003e32 <_printf_common+0x8e>
	...

08003e80 <_printf_i>:
 8003e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	7e0f      	ldrb	r7, [r1, #24]
 8003e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e88:	2f78      	cmp	r7, #120	; 0x78
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	4680      	mov	r8, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	469a      	mov	sl, r3
 8003e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e96:	d807      	bhi.n	8003ea8 <_printf_i+0x28>
 8003e98:	2f62      	cmp	r7, #98	; 0x62
 8003e9a:	d80a      	bhi.n	8003eb2 <_printf_i+0x32>
 8003e9c:	2f00      	cmp	r7, #0
 8003e9e:	f000 80d8 	beq.w	8004052 <_printf_i+0x1d2>
 8003ea2:	2f58      	cmp	r7, #88	; 0x58
 8003ea4:	f000 80a3 	beq.w	8003fee <_printf_i+0x16e>
 8003ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb0:	e03a      	b.n	8003f28 <_printf_i+0xa8>
 8003eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eb6:	2b15      	cmp	r3, #21
 8003eb8:	d8f6      	bhi.n	8003ea8 <_printf_i+0x28>
 8003eba:	a101      	add	r1, pc, #4	; (adr r1, 8003ec0 <_printf_i+0x40>)
 8003ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec0:	08003f19 	.word	0x08003f19
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003ea9 	.word	0x08003ea9
 8003ecc:	08003ea9 	.word	0x08003ea9
 8003ed0:	08003ea9 	.word	0x08003ea9
 8003ed4:	08003ea9 	.word	0x08003ea9
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003ea9 	.word	0x08003ea9
 8003ee0:	08003ea9 	.word	0x08003ea9
 8003ee4:	08003ea9 	.word	0x08003ea9
 8003ee8:	08003ea9 	.word	0x08003ea9
 8003eec:	08004039 	.word	0x08004039
 8003ef0:	08003f5d 	.word	0x08003f5d
 8003ef4:	0800401b 	.word	0x0800401b
 8003ef8:	08003ea9 	.word	0x08003ea9
 8003efc:	08003ea9 	.word	0x08003ea9
 8003f00:	0800405b 	.word	0x0800405b
 8003f04:	08003ea9 	.word	0x08003ea9
 8003f08:	08003f5d 	.word	0x08003f5d
 8003f0c:	08003ea9 	.word	0x08003ea9
 8003f10:	08003ea9 	.word	0x08003ea9
 8003f14:	08004023 	.word	0x08004023
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	1d1a      	adds	r2, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	602a      	str	r2, [r5, #0]
 8003f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0a3      	b.n	8004074 <_printf_i+0x1f4>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	6829      	ldr	r1, [r5, #0]
 8003f30:	0606      	lsls	r6, r0, #24
 8003f32:	f101 0304 	add.w	r3, r1, #4
 8003f36:	d50a      	bpl.n	8003f4e <_printf_i+0xce>
 8003f38:	680e      	ldr	r6, [r1, #0]
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	2e00      	cmp	r6, #0
 8003f3e:	da03      	bge.n	8003f48 <_printf_i+0xc8>
 8003f40:	232d      	movs	r3, #45	; 0x2d
 8003f42:	4276      	negs	r6, r6
 8003f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f48:	485e      	ldr	r0, [pc, #376]	; (80040c4 <_printf_i+0x244>)
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	e019      	b.n	8003f82 <_printf_i+0x102>
 8003f4e:	680e      	ldr	r6, [r1, #0]
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f56:	bf18      	it	ne
 8003f58:	b236      	sxthne	r6, r6
 8003f5a:	e7ef      	b.n	8003f3c <_printf_i+0xbc>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	1d19      	adds	r1, r3, #4
 8003f62:	6029      	str	r1, [r5, #0]
 8003f64:	0601      	lsls	r1, r0, #24
 8003f66:	d501      	bpl.n	8003f6c <_printf_i+0xec>
 8003f68:	681e      	ldr	r6, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <_printf_i+0xf2>
 8003f6c:	0646      	lsls	r6, r0, #25
 8003f6e:	d5fb      	bpl.n	8003f68 <_printf_i+0xe8>
 8003f70:	881e      	ldrh	r6, [r3, #0]
 8003f72:	4854      	ldr	r0, [pc, #336]	; (80040c4 <_printf_i+0x244>)
 8003f74:	2f6f      	cmp	r7, #111	; 0x6f
 8003f76:	bf0c      	ite	eq
 8003f78:	2308      	moveq	r3, #8
 8003f7a:	230a      	movne	r3, #10
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f82:	6865      	ldr	r5, [r4, #4]
 8003f84:	60a5      	str	r5, [r4, #8]
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	bfa2      	ittt	ge
 8003f8a:	6821      	ldrge	r1, [r4, #0]
 8003f8c:	f021 0104 	bicge.w	r1, r1, #4
 8003f90:	6021      	strge	r1, [r4, #0]
 8003f92:	b90e      	cbnz	r6, 8003f98 <_printf_i+0x118>
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	d04d      	beq.n	8004034 <_printf_i+0x1b4>
 8003f98:	4615      	mov	r5, r2
 8003f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003fa2:	5dc7      	ldrb	r7, [r0, r7]
 8003fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fa8:	4637      	mov	r7, r6
 8003faa:	42bb      	cmp	r3, r7
 8003fac:	460e      	mov	r6, r1
 8003fae:	d9f4      	bls.n	8003f9a <_printf_i+0x11a>
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d10b      	bne.n	8003fcc <_printf_i+0x14c>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	07de      	lsls	r6, r3, #31
 8003fb8:	d508      	bpl.n	8003fcc <_printf_i+0x14c>
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	6861      	ldr	r1, [r4, #4]
 8003fbe:	4299      	cmp	r1, r3
 8003fc0:	bfde      	ittt	le
 8003fc2:	2330      	movle	r3, #48	; 0x30
 8003fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fcc:	1b52      	subs	r2, r2, r5
 8003fce:	6122      	str	r2, [r4, #16]
 8003fd0:	f8cd a000 	str.w	sl, [sp]
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	aa03      	add	r2, sp, #12
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f7ff fee2 	bl	8003da4 <_printf_common>
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d14c      	bne.n	800407e <_printf_i+0x1fe>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe8:	b004      	add	sp, #16
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fee:	4835      	ldr	r0, [pc, #212]	; (80040c4 <_printf_i+0x244>)
 8003ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ff4:	6829      	ldr	r1, [r5, #0]
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ffc:	6029      	str	r1, [r5, #0]
 8003ffe:	061d      	lsls	r5, r3, #24
 8004000:	d514      	bpl.n	800402c <_printf_i+0x1ac>
 8004002:	07df      	lsls	r7, r3, #31
 8004004:	bf44      	itt	mi
 8004006:	f043 0320 	orrmi.w	r3, r3, #32
 800400a:	6023      	strmi	r3, [r4, #0]
 800400c:	b91e      	cbnz	r6, 8004016 <_printf_i+0x196>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f023 0320 	bic.w	r3, r3, #32
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	2310      	movs	r3, #16
 8004018:	e7b0      	b.n	8003f7c <_printf_i+0xfc>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	f043 0320 	orr.w	r3, r3, #32
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	2378      	movs	r3, #120	; 0x78
 8004024:	4828      	ldr	r0, [pc, #160]	; (80040c8 <_printf_i+0x248>)
 8004026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800402a:	e7e3      	b.n	8003ff4 <_printf_i+0x174>
 800402c:	0659      	lsls	r1, r3, #25
 800402e:	bf48      	it	mi
 8004030:	b2b6      	uxthmi	r6, r6
 8004032:	e7e6      	b.n	8004002 <_printf_i+0x182>
 8004034:	4615      	mov	r5, r2
 8004036:	e7bb      	b.n	8003fb0 <_printf_i+0x130>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	6826      	ldr	r6, [r4, #0]
 800403c:	6961      	ldr	r1, [r4, #20]
 800403e:	1d18      	adds	r0, r3, #4
 8004040:	6028      	str	r0, [r5, #0]
 8004042:	0635      	lsls	r5, r6, #24
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	d501      	bpl.n	800404c <_printf_i+0x1cc>
 8004048:	6019      	str	r1, [r3, #0]
 800404a:	e002      	b.n	8004052 <_printf_i+0x1d2>
 800404c:	0670      	lsls	r0, r6, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0x1c8>
 8004050:	8019      	strh	r1, [r3, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	4615      	mov	r5, r2
 8004058:	e7ba      	b.n	8003fd0 <_printf_i+0x150>
 800405a:	682b      	ldr	r3, [r5, #0]
 800405c:	1d1a      	adds	r2, r3, #4
 800405e:	602a      	str	r2, [r5, #0]
 8004060:	681d      	ldr	r5, [r3, #0]
 8004062:	6862      	ldr	r2, [r4, #4]
 8004064:	2100      	movs	r1, #0
 8004066:	4628      	mov	r0, r5
 8004068:	f7fc f8e2 	bl	8000230 <memchr>
 800406c:	b108      	cbz	r0, 8004072 <_printf_i+0x1f2>
 800406e:	1b40      	subs	r0, r0, r5
 8004070:	6060      	str	r0, [r4, #4]
 8004072:	6863      	ldr	r3, [r4, #4]
 8004074:	6123      	str	r3, [r4, #16]
 8004076:	2300      	movs	r3, #0
 8004078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407c:	e7a8      	b.n	8003fd0 <_printf_i+0x150>
 800407e:	6923      	ldr	r3, [r4, #16]
 8004080:	462a      	mov	r2, r5
 8004082:	4649      	mov	r1, r9
 8004084:	4640      	mov	r0, r8
 8004086:	47d0      	blx	sl
 8004088:	3001      	adds	r0, #1
 800408a:	d0ab      	beq.n	8003fe4 <_printf_i+0x164>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	079b      	lsls	r3, r3, #30
 8004090:	d413      	bmi.n	80040ba <_printf_i+0x23a>
 8004092:	68e0      	ldr	r0, [r4, #12]
 8004094:	9b03      	ldr	r3, [sp, #12]
 8004096:	4298      	cmp	r0, r3
 8004098:	bfb8      	it	lt
 800409a:	4618      	movlt	r0, r3
 800409c:	e7a4      	b.n	8003fe8 <_printf_i+0x168>
 800409e:	2301      	movs	r3, #1
 80040a0:	4632      	mov	r2, r6
 80040a2:	4649      	mov	r1, r9
 80040a4:	4640      	mov	r0, r8
 80040a6:	47d0      	blx	sl
 80040a8:	3001      	adds	r0, #1
 80040aa:	d09b      	beq.n	8003fe4 <_printf_i+0x164>
 80040ac:	3501      	adds	r5, #1
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	9903      	ldr	r1, [sp, #12]
 80040b2:	1a5b      	subs	r3, r3, r1
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	dcf2      	bgt.n	800409e <_printf_i+0x21e>
 80040b8:	e7eb      	b.n	8004092 <_printf_i+0x212>
 80040ba:	2500      	movs	r5, #0
 80040bc:	f104 0619 	add.w	r6, r4, #25
 80040c0:	e7f5      	b.n	80040ae <_printf_i+0x22e>
 80040c2:	bf00      	nop
 80040c4:	080143c4 	.word	0x080143c4
 80040c8:	080143d5 	.word	0x080143d5

080040cc <setvbuf>:
 80040cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040d0:	461d      	mov	r5, r3
 80040d2:	4b5d      	ldr	r3, [pc, #372]	; (8004248 <setvbuf+0x17c>)
 80040d4:	681f      	ldr	r7, [r3, #0]
 80040d6:	4604      	mov	r4, r0
 80040d8:	460e      	mov	r6, r1
 80040da:	4690      	mov	r8, r2
 80040dc:	b127      	cbz	r7, 80040e8 <setvbuf+0x1c>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	b913      	cbnz	r3, 80040e8 <setvbuf+0x1c>
 80040e2:	4638      	mov	r0, r7
 80040e4:	f001 ff70 	bl	8005fc8 <__sinit>
 80040e8:	4b58      	ldr	r3, [pc, #352]	; (800424c <setvbuf+0x180>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d167      	bne.n	80041be <setvbuf+0xf2>
 80040ee:	687c      	ldr	r4, [r7, #4]
 80040f0:	f1b8 0f02 	cmp.w	r8, #2
 80040f4:	d006      	beq.n	8004104 <setvbuf+0x38>
 80040f6:	f1b8 0f01 	cmp.w	r8, #1
 80040fa:	f200 809f 	bhi.w	800423c <setvbuf+0x170>
 80040fe:	2d00      	cmp	r5, #0
 8004100:	f2c0 809c 	blt.w	800423c <setvbuf+0x170>
 8004104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004106:	07db      	lsls	r3, r3, #31
 8004108:	d405      	bmi.n	8004116 <setvbuf+0x4a>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	0598      	lsls	r0, r3, #22
 800410e:	d402      	bmi.n	8004116 <setvbuf+0x4a>
 8004110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004112:	f002 fb7c 	bl	800680e <__retarget_lock_acquire_recursive>
 8004116:	4621      	mov	r1, r4
 8004118:	4638      	mov	r0, r7
 800411a:	f001 fec1 	bl	8005ea0 <_fflush_r>
 800411e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004120:	b141      	cbz	r1, 8004134 <setvbuf+0x68>
 8004122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004126:	4299      	cmp	r1, r3
 8004128:	d002      	beq.n	8004130 <setvbuf+0x64>
 800412a:	4638      	mov	r0, r7
 800412c:	f003 f8ce 	bl	80072cc <_free_r>
 8004130:	2300      	movs	r3, #0
 8004132:	6363      	str	r3, [r4, #52]	; 0x34
 8004134:	2300      	movs	r3, #0
 8004136:	61a3      	str	r3, [r4, #24]
 8004138:	6063      	str	r3, [r4, #4]
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	0619      	lsls	r1, r3, #24
 800413e:	d503      	bpl.n	8004148 <setvbuf+0x7c>
 8004140:	6921      	ldr	r1, [r4, #16]
 8004142:	4638      	mov	r0, r7
 8004144:	f003 f8c2 	bl	80072cc <_free_r>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	f1b8 0f02 	cmp.w	r8, #2
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	d06c      	beq.n	8004234 <setvbuf+0x168>
 800415a:	ab01      	add	r3, sp, #4
 800415c:	466a      	mov	r2, sp
 800415e:	4621      	mov	r1, r4
 8004160:	4638      	mov	r0, r7
 8004162:	f002 fb56 	bl	8006812 <__swhatbuf_r>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	4318      	orrs	r0, r3
 800416a:	81a0      	strh	r0, [r4, #12]
 800416c:	2d00      	cmp	r5, #0
 800416e:	d130      	bne.n	80041d2 <setvbuf+0x106>
 8004170:	9d00      	ldr	r5, [sp, #0]
 8004172:	4628      	mov	r0, r5
 8004174:	f002 fbb2 	bl	80068dc <malloc>
 8004178:	4606      	mov	r6, r0
 800417a:	2800      	cmp	r0, #0
 800417c:	d155      	bne.n	800422a <setvbuf+0x15e>
 800417e:	f8dd 9000 	ldr.w	r9, [sp]
 8004182:	45a9      	cmp	r9, r5
 8004184:	d14a      	bne.n	800421c <setvbuf+0x150>
 8004186:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800418a:	2200      	movs	r2, #0
 800418c:	60a2      	str	r2, [r4, #8]
 800418e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004192:	6022      	str	r2, [r4, #0]
 8004194:	6122      	str	r2, [r4, #16]
 8004196:	2201      	movs	r2, #1
 8004198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800419c:	6162      	str	r2, [r4, #20]
 800419e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	07d2      	lsls	r2, r2, #31
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	d405      	bmi.n	80041b6 <setvbuf+0xea>
 80041aa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80041ae:	d102      	bne.n	80041b6 <setvbuf+0xea>
 80041b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b2:	f002 fb2d 	bl	8006810 <__retarget_lock_release_recursive>
 80041b6:	4628      	mov	r0, r5
 80041b8:	b003      	add	sp, #12
 80041ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <setvbuf+0x184>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	d101      	bne.n	80041c8 <setvbuf+0xfc>
 80041c4:	68bc      	ldr	r4, [r7, #8]
 80041c6:	e793      	b.n	80040f0 <setvbuf+0x24>
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <setvbuf+0x188>)
 80041ca:	429c      	cmp	r4, r3
 80041cc:	bf08      	it	eq
 80041ce:	68fc      	ldreq	r4, [r7, #12]
 80041d0:	e78e      	b.n	80040f0 <setvbuf+0x24>
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d0cd      	beq.n	8004172 <setvbuf+0xa6>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	b913      	cbnz	r3, 80041e0 <setvbuf+0x114>
 80041da:	4638      	mov	r0, r7
 80041dc:	f001 fef4 	bl	8005fc8 <__sinit>
 80041e0:	f1b8 0f01 	cmp.w	r8, #1
 80041e4:	bf08      	it	eq
 80041e6:	89a3      	ldrheq	r3, [r4, #12]
 80041e8:	6026      	str	r6, [r4, #0]
 80041ea:	bf04      	itt	eq
 80041ec:	f043 0301 	orreq.w	r3, r3, #1
 80041f0:	81a3      	strheq	r3, [r4, #12]
 80041f2:	89a2      	ldrh	r2, [r4, #12]
 80041f4:	f012 0308 	ands.w	r3, r2, #8
 80041f8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80041fc:	d01c      	beq.n	8004238 <setvbuf+0x16c>
 80041fe:	07d3      	lsls	r3, r2, #31
 8004200:	bf41      	itttt	mi
 8004202:	2300      	movmi	r3, #0
 8004204:	426d      	negmi	r5, r5
 8004206:	60a3      	strmi	r3, [r4, #8]
 8004208:	61a5      	strmi	r5, [r4, #24]
 800420a:	bf58      	it	pl
 800420c:	60a5      	strpl	r5, [r4, #8]
 800420e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004210:	f015 0501 	ands.w	r5, r5, #1
 8004214:	d115      	bne.n	8004242 <setvbuf+0x176>
 8004216:	f412 7f00 	tst.w	r2, #512	; 0x200
 800421a:	e7c8      	b.n	80041ae <setvbuf+0xe2>
 800421c:	4648      	mov	r0, r9
 800421e:	f002 fb5d 	bl	80068dc <malloc>
 8004222:	4606      	mov	r6, r0
 8004224:	2800      	cmp	r0, #0
 8004226:	d0ae      	beq.n	8004186 <setvbuf+0xba>
 8004228:	464d      	mov	r5, r9
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	e7d0      	b.n	80041d6 <setvbuf+0x10a>
 8004234:	2500      	movs	r5, #0
 8004236:	e7a8      	b.n	800418a <setvbuf+0xbe>
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	e7e8      	b.n	800420e <setvbuf+0x142>
 800423c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004240:	e7b9      	b.n	80041b6 <setvbuf+0xea>
 8004242:	2500      	movs	r5, #0
 8004244:	e7b7      	b.n	80041b6 <setvbuf+0xea>
 8004246:	bf00      	nop
 8004248:	20000020 	.word	0x20000020
 800424c:	080145c8 	.word	0x080145c8
 8004250:	080145e8 	.word	0x080145e8
 8004254:	080145a8 	.word	0x080145a8

08004258 <sulp>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4604      	mov	r4, r0
 800425c:	460d      	mov	r5, r1
 800425e:	ec45 4b10 	vmov	d0, r4, r5
 8004262:	4616      	mov	r6, r2
 8004264:	f002 fed4 	bl	8007010 <__ulp>
 8004268:	ec51 0b10 	vmov	r0, r1, d0
 800426c:	b17e      	cbz	r6, 800428e <sulp+0x36>
 800426e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004276:	2b00      	cmp	r3, #0
 8004278:	dd09      	ble.n	800428e <sulp+0x36>
 800427a:	051b      	lsls	r3, r3, #20
 800427c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004280:	2400      	movs	r4, #0
 8004282:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	f7fc f9dd 	bl	8000648 <__aeabi_dmul>
 800428e:	bd70      	pop	{r4, r5, r6, pc}

08004290 <_strtod_l>:
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	ed2d 8b02 	vpush	{d8}
 8004298:	b09d      	sub	sp, #116	; 0x74
 800429a:	461f      	mov	r7, r3
 800429c:	2300      	movs	r3, #0
 800429e:	9318      	str	r3, [sp, #96]	; 0x60
 80042a0:	4ba2      	ldr	r3, [pc, #648]	; (800452c <_strtod_l+0x29c>)
 80042a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	9305      	str	r3, [sp, #20]
 80042a8:	4604      	mov	r4, r0
 80042aa:	4618      	mov	r0, r3
 80042ac:	4688      	mov	r8, r1
 80042ae:	f7fb ffb1 	bl	8000214 <strlen>
 80042b2:	f04f 0a00 	mov.w	sl, #0
 80042b6:	4605      	mov	r5, r0
 80042b8:	f04f 0b00 	mov.w	fp, #0
 80042bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80042c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	2a2b      	cmp	r2, #43	; 0x2b
 80042c6:	d04e      	beq.n	8004366 <_strtod_l+0xd6>
 80042c8:	d83b      	bhi.n	8004342 <_strtod_l+0xb2>
 80042ca:	2a0d      	cmp	r2, #13
 80042cc:	d834      	bhi.n	8004338 <_strtod_l+0xa8>
 80042ce:	2a08      	cmp	r2, #8
 80042d0:	d834      	bhi.n	800433c <_strtod_l+0xac>
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	d03e      	beq.n	8004354 <_strtod_l+0xc4>
 80042d6:	2300      	movs	r3, #0
 80042d8:	930a      	str	r3, [sp, #40]	; 0x28
 80042da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80042dc:	7833      	ldrb	r3, [r6, #0]
 80042de:	2b30      	cmp	r3, #48	; 0x30
 80042e0:	f040 80b0 	bne.w	8004444 <_strtod_l+0x1b4>
 80042e4:	7873      	ldrb	r3, [r6, #1]
 80042e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042ea:	2b58      	cmp	r3, #88	; 0x58
 80042ec:	d168      	bne.n	80043c0 <_strtod_l+0x130>
 80042ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	ab18      	add	r3, sp, #96	; 0x60
 80042f4:	9702      	str	r7, [sp, #8]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4a8d      	ldr	r2, [pc, #564]	; (8004530 <_strtod_l+0x2a0>)
 80042fa:	ab19      	add	r3, sp, #100	; 0x64
 80042fc:	a917      	add	r1, sp, #92	; 0x5c
 80042fe:	4620      	mov	r0, r4
 8004300:	f001 ff78 	bl	80061f4 <__gethex>
 8004304:	f010 0707 	ands.w	r7, r0, #7
 8004308:	4605      	mov	r5, r0
 800430a:	d005      	beq.n	8004318 <_strtod_l+0x88>
 800430c:	2f06      	cmp	r7, #6
 800430e:	d12c      	bne.n	800436a <_strtod_l+0xda>
 8004310:	3601      	adds	r6, #1
 8004312:	2300      	movs	r3, #0
 8004314:	9617      	str	r6, [sp, #92]	; 0x5c
 8004316:	930a      	str	r3, [sp, #40]	; 0x28
 8004318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8590 	bne.w	8004e40 <_strtod_l+0xbb0>
 8004320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004322:	b1eb      	cbz	r3, 8004360 <_strtod_l+0xd0>
 8004324:	4652      	mov	r2, sl
 8004326:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800432a:	ec43 2b10 	vmov	d0, r2, r3
 800432e:	b01d      	add	sp, #116	; 0x74
 8004330:	ecbd 8b02 	vpop	{d8}
 8004334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004338:	2a20      	cmp	r2, #32
 800433a:	d1cc      	bne.n	80042d6 <_strtod_l+0x46>
 800433c:	3301      	adds	r3, #1
 800433e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004340:	e7be      	b.n	80042c0 <_strtod_l+0x30>
 8004342:	2a2d      	cmp	r2, #45	; 0x2d
 8004344:	d1c7      	bne.n	80042d6 <_strtod_l+0x46>
 8004346:	2201      	movs	r2, #1
 8004348:	920a      	str	r2, [sp, #40]	; 0x28
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	9217      	str	r2, [sp, #92]	; 0x5c
 800434e:	785b      	ldrb	r3, [r3, #1]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1c2      	bne.n	80042da <_strtod_l+0x4a>
 8004354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004356:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 856e 	bne.w	8004e3c <_strtod_l+0xbac>
 8004360:	4652      	mov	r2, sl
 8004362:	465b      	mov	r3, fp
 8004364:	e7e1      	b.n	800432a <_strtod_l+0x9a>
 8004366:	2200      	movs	r2, #0
 8004368:	e7ee      	b.n	8004348 <_strtod_l+0xb8>
 800436a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800436c:	b13a      	cbz	r2, 800437e <_strtod_l+0xee>
 800436e:	2135      	movs	r1, #53	; 0x35
 8004370:	a81a      	add	r0, sp, #104	; 0x68
 8004372:	f002 ff58 	bl	8007226 <__copybits>
 8004376:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004378:	4620      	mov	r0, r4
 800437a:	f002 fb17 	bl	80069ac <_Bfree>
 800437e:	3f01      	subs	r7, #1
 8004380:	2f04      	cmp	r7, #4
 8004382:	d806      	bhi.n	8004392 <_strtod_l+0x102>
 8004384:	e8df f007 	tbb	[pc, r7]
 8004388:	1714030a 	.word	0x1714030a
 800438c:	0a          	.byte	0x0a
 800438d:	00          	.byte	0x00
 800438e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004392:	0728      	lsls	r0, r5, #28
 8004394:	d5c0      	bpl.n	8004318 <_strtod_l+0x88>
 8004396:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800439a:	e7bd      	b.n	8004318 <_strtod_l+0x88>
 800439c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80043a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80043aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80043ae:	e7f0      	b.n	8004392 <_strtod_l+0x102>
 80043b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004534 <_strtod_l+0x2a4>
 80043b4:	e7ed      	b.n	8004392 <_strtod_l+0x102>
 80043b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80043ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80043be:	e7e8      	b.n	8004392 <_strtod_l+0x102>
 80043c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d0f9      	beq.n	80043c0 <_strtod_l+0x130>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0a3      	beq.n	8004318 <_strtod_l+0x88>
 80043d0:	2301      	movs	r3, #1
 80043d2:	f04f 0900 	mov.w	r9, #0
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043da:	9308      	str	r3, [sp, #32]
 80043dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80043e0:	464f      	mov	r7, r9
 80043e2:	220a      	movs	r2, #10
 80043e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80043e6:	7806      	ldrb	r6, [r0, #0]
 80043e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80043ec:	b2d9      	uxtb	r1, r3
 80043ee:	2909      	cmp	r1, #9
 80043f0:	d92a      	bls.n	8004448 <_strtod_l+0x1b8>
 80043f2:	9905      	ldr	r1, [sp, #20]
 80043f4:	462a      	mov	r2, r5
 80043f6:	f003 f9b6 	bl	8007766 <strncmp>
 80043fa:	b398      	cbz	r0, 8004464 <_strtod_l+0x1d4>
 80043fc:	2000      	movs	r0, #0
 80043fe:	4632      	mov	r2, r6
 8004400:	463d      	mov	r5, r7
 8004402:	9005      	str	r0, [sp, #20]
 8004404:	4603      	mov	r3, r0
 8004406:	2a65      	cmp	r2, #101	; 0x65
 8004408:	d001      	beq.n	800440e <_strtod_l+0x17e>
 800440a:	2a45      	cmp	r2, #69	; 0x45
 800440c:	d118      	bne.n	8004440 <_strtod_l+0x1b0>
 800440e:	b91d      	cbnz	r5, 8004418 <_strtod_l+0x188>
 8004410:	9a04      	ldr	r2, [sp, #16]
 8004412:	4302      	orrs	r2, r0
 8004414:	d09e      	beq.n	8004354 <_strtod_l+0xc4>
 8004416:	2500      	movs	r5, #0
 8004418:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800441c:	f108 0201 	add.w	r2, r8, #1
 8004420:	9217      	str	r2, [sp, #92]	; 0x5c
 8004422:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004426:	2a2b      	cmp	r2, #43	; 0x2b
 8004428:	d075      	beq.n	8004516 <_strtod_l+0x286>
 800442a:	2a2d      	cmp	r2, #45	; 0x2d
 800442c:	d07b      	beq.n	8004526 <_strtod_l+0x296>
 800442e:	f04f 0c00 	mov.w	ip, #0
 8004432:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004436:	2909      	cmp	r1, #9
 8004438:	f240 8082 	bls.w	8004540 <_strtod_l+0x2b0>
 800443c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004440:	2600      	movs	r6, #0
 8004442:	e09d      	b.n	8004580 <_strtod_l+0x2f0>
 8004444:	2300      	movs	r3, #0
 8004446:	e7c4      	b.n	80043d2 <_strtod_l+0x142>
 8004448:	2f08      	cmp	r7, #8
 800444a:	bfd8      	it	le
 800444c:	9907      	ldrle	r1, [sp, #28]
 800444e:	f100 0001 	add.w	r0, r0, #1
 8004452:	bfda      	itte	le
 8004454:	fb02 3301 	mlale	r3, r2, r1, r3
 8004458:	9307      	strle	r3, [sp, #28]
 800445a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800445e:	3701      	adds	r7, #1
 8004460:	9017      	str	r0, [sp, #92]	; 0x5c
 8004462:	e7bf      	b.n	80043e4 <_strtod_l+0x154>
 8004464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004466:	195a      	adds	r2, r3, r5
 8004468:	9217      	str	r2, [sp, #92]	; 0x5c
 800446a:	5d5a      	ldrb	r2, [r3, r5]
 800446c:	2f00      	cmp	r7, #0
 800446e:	d037      	beq.n	80044e0 <_strtod_l+0x250>
 8004470:	9005      	str	r0, [sp, #20]
 8004472:	463d      	mov	r5, r7
 8004474:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004478:	2b09      	cmp	r3, #9
 800447a:	d912      	bls.n	80044a2 <_strtod_l+0x212>
 800447c:	2301      	movs	r3, #1
 800447e:	e7c2      	b.n	8004406 <_strtod_l+0x176>
 8004480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	9217      	str	r2, [sp, #92]	; 0x5c
 8004486:	785a      	ldrb	r2, [r3, #1]
 8004488:	3001      	adds	r0, #1
 800448a:	2a30      	cmp	r2, #48	; 0x30
 800448c:	d0f8      	beq.n	8004480 <_strtod_l+0x1f0>
 800448e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004492:	2b08      	cmp	r3, #8
 8004494:	f200 84d9 	bhi.w	8004e4a <_strtod_l+0xbba>
 8004498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800449a:	9005      	str	r0, [sp, #20]
 800449c:	2000      	movs	r0, #0
 800449e:	9308      	str	r3, [sp, #32]
 80044a0:	4605      	mov	r5, r0
 80044a2:	3a30      	subs	r2, #48	; 0x30
 80044a4:	f100 0301 	add.w	r3, r0, #1
 80044a8:	d014      	beq.n	80044d4 <_strtod_l+0x244>
 80044aa:	9905      	ldr	r1, [sp, #20]
 80044ac:	4419      	add	r1, r3
 80044ae:	9105      	str	r1, [sp, #20]
 80044b0:	462b      	mov	r3, r5
 80044b2:	eb00 0e05 	add.w	lr, r0, r5
 80044b6:	210a      	movs	r1, #10
 80044b8:	4573      	cmp	r3, lr
 80044ba:	d113      	bne.n	80044e4 <_strtod_l+0x254>
 80044bc:	182b      	adds	r3, r5, r0
 80044be:	2b08      	cmp	r3, #8
 80044c0:	f105 0501 	add.w	r5, r5, #1
 80044c4:	4405      	add	r5, r0
 80044c6:	dc1c      	bgt.n	8004502 <_strtod_l+0x272>
 80044c8:	9907      	ldr	r1, [sp, #28]
 80044ca:	230a      	movs	r3, #10
 80044cc:	fb03 2301 	mla	r3, r3, r1, r2
 80044d0:	9307      	str	r3, [sp, #28]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044d6:	1c51      	adds	r1, r2, #1
 80044d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80044da:	7852      	ldrb	r2, [r2, #1]
 80044dc:	4618      	mov	r0, r3
 80044de:	e7c9      	b.n	8004474 <_strtod_l+0x1e4>
 80044e0:	4638      	mov	r0, r7
 80044e2:	e7d2      	b.n	800448a <_strtod_l+0x1fa>
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	dc04      	bgt.n	80044f2 <_strtod_l+0x262>
 80044e8:	9e07      	ldr	r6, [sp, #28]
 80044ea:	434e      	muls	r6, r1
 80044ec:	9607      	str	r6, [sp, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	e7e2      	b.n	80044b8 <_strtod_l+0x228>
 80044f2:	f103 0c01 	add.w	ip, r3, #1
 80044f6:	f1bc 0f10 	cmp.w	ip, #16
 80044fa:	bfd8      	it	le
 80044fc:	fb01 f909 	mulle.w	r9, r1, r9
 8004500:	e7f5      	b.n	80044ee <_strtod_l+0x25e>
 8004502:	2d10      	cmp	r5, #16
 8004504:	bfdc      	itt	le
 8004506:	230a      	movle	r3, #10
 8004508:	fb03 2909 	mlale	r9, r3, r9, r2
 800450c:	e7e1      	b.n	80044d2 <_strtod_l+0x242>
 800450e:	2300      	movs	r3, #0
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	2301      	movs	r3, #1
 8004514:	e77c      	b.n	8004410 <_strtod_l+0x180>
 8004516:	f04f 0c00 	mov.w	ip, #0
 800451a:	f108 0202 	add.w	r2, r8, #2
 800451e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004520:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004524:	e785      	b.n	8004432 <_strtod_l+0x1a2>
 8004526:	f04f 0c01 	mov.w	ip, #1
 800452a:	e7f6      	b.n	800451a <_strtod_l+0x28a>
 800452c:	08014690 	.word	0x08014690
 8004530:	080143e8 	.word	0x080143e8
 8004534:	7ff00000 	.word	0x7ff00000
 8004538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800453a:	1c51      	adds	r1, r2, #1
 800453c:	9117      	str	r1, [sp, #92]	; 0x5c
 800453e:	7852      	ldrb	r2, [r2, #1]
 8004540:	2a30      	cmp	r2, #48	; 0x30
 8004542:	d0f9      	beq.n	8004538 <_strtod_l+0x2a8>
 8004544:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004548:	2908      	cmp	r1, #8
 800454a:	f63f af79 	bhi.w	8004440 <_strtod_l+0x1b0>
 800454e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004554:	9206      	str	r2, [sp, #24]
 8004556:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004558:	1c51      	adds	r1, r2, #1
 800455a:	9117      	str	r1, [sp, #92]	; 0x5c
 800455c:	7852      	ldrb	r2, [r2, #1]
 800455e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004562:	2e09      	cmp	r6, #9
 8004564:	d937      	bls.n	80045d6 <_strtod_l+0x346>
 8004566:	9e06      	ldr	r6, [sp, #24]
 8004568:	1b89      	subs	r1, r1, r6
 800456a:	2908      	cmp	r1, #8
 800456c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004570:	dc02      	bgt.n	8004578 <_strtod_l+0x2e8>
 8004572:	4576      	cmp	r6, lr
 8004574:	bfa8      	it	ge
 8004576:	4676      	movge	r6, lr
 8004578:	f1bc 0f00 	cmp.w	ip, #0
 800457c:	d000      	beq.n	8004580 <_strtod_l+0x2f0>
 800457e:	4276      	negs	r6, r6
 8004580:	2d00      	cmp	r5, #0
 8004582:	d14d      	bne.n	8004620 <_strtod_l+0x390>
 8004584:	9904      	ldr	r1, [sp, #16]
 8004586:	4301      	orrs	r1, r0
 8004588:	f47f aec6 	bne.w	8004318 <_strtod_l+0x88>
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f aee1 	bne.w	8004354 <_strtod_l+0xc4>
 8004592:	2a69      	cmp	r2, #105	; 0x69
 8004594:	d027      	beq.n	80045e6 <_strtod_l+0x356>
 8004596:	dc24      	bgt.n	80045e2 <_strtod_l+0x352>
 8004598:	2a49      	cmp	r2, #73	; 0x49
 800459a:	d024      	beq.n	80045e6 <_strtod_l+0x356>
 800459c:	2a4e      	cmp	r2, #78	; 0x4e
 800459e:	f47f aed9 	bne.w	8004354 <_strtod_l+0xc4>
 80045a2:	499f      	ldr	r1, [pc, #636]	; (8004820 <_strtod_l+0x590>)
 80045a4:	a817      	add	r0, sp, #92	; 0x5c
 80045a6:	f002 f87d 	bl	80066a4 <__match>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	f43f aed2 	beq.w	8004354 <_strtod_l+0xc4>
 80045b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b28      	cmp	r3, #40	; 0x28
 80045b6:	d12d      	bne.n	8004614 <_strtod_l+0x384>
 80045b8:	499a      	ldr	r1, [pc, #616]	; (8004824 <_strtod_l+0x594>)
 80045ba:	aa1a      	add	r2, sp, #104	; 0x68
 80045bc:	a817      	add	r0, sp, #92	; 0x5c
 80045be:	f002 f885 	bl	80066cc <__hexnan>
 80045c2:	2805      	cmp	r0, #5
 80045c4:	d126      	bne.n	8004614 <_strtod_l+0x384>
 80045c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80045cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80045d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80045d4:	e6a0      	b.n	8004318 <_strtod_l+0x88>
 80045d6:	210a      	movs	r1, #10
 80045d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80045dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80045e0:	e7b9      	b.n	8004556 <_strtod_l+0x2c6>
 80045e2:	2a6e      	cmp	r2, #110	; 0x6e
 80045e4:	e7db      	b.n	800459e <_strtod_l+0x30e>
 80045e6:	4990      	ldr	r1, [pc, #576]	; (8004828 <_strtod_l+0x598>)
 80045e8:	a817      	add	r0, sp, #92	; 0x5c
 80045ea:	f002 f85b 	bl	80066a4 <__match>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f43f aeb0 	beq.w	8004354 <_strtod_l+0xc4>
 80045f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045f6:	498d      	ldr	r1, [pc, #564]	; (800482c <_strtod_l+0x59c>)
 80045f8:	3b01      	subs	r3, #1
 80045fa:	a817      	add	r0, sp, #92	; 0x5c
 80045fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80045fe:	f002 f851 	bl	80066a4 <__match>
 8004602:	b910      	cbnz	r0, 800460a <_strtod_l+0x37a>
 8004604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004606:	3301      	adds	r3, #1
 8004608:	9317      	str	r3, [sp, #92]	; 0x5c
 800460a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800483c <_strtod_l+0x5ac>
 800460e:	f04f 0a00 	mov.w	sl, #0
 8004612:	e681      	b.n	8004318 <_strtod_l+0x88>
 8004614:	4886      	ldr	r0, [pc, #536]	; (8004830 <_strtod_l+0x5a0>)
 8004616:	f003 f85b 	bl	80076d0 <nan>
 800461a:	ec5b ab10 	vmov	sl, fp, d0
 800461e:	e67b      	b.n	8004318 <_strtod_l+0x88>
 8004620:	9b05      	ldr	r3, [sp, #20]
 8004622:	9807      	ldr	r0, [sp, #28]
 8004624:	1af3      	subs	r3, r6, r3
 8004626:	2f00      	cmp	r7, #0
 8004628:	bf08      	it	eq
 800462a:	462f      	moveq	r7, r5
 800462c:	2d10      	cmp	r5, #16
 800462e:	9306      	str	r3, [sp, #24]
 8004630:	46a8      	mov	r8, r5
 8004632:	bfa8      	it	ge
 8004634:	f04f 0810 	movge.w	r8, #16
 8004638:	f7fb ff8c 	bl	8000554 <__aeabi_ui2d>
 800463c:	2d09      	cmp	r5, #9
 800463e:	4682      	mov	sl, r0
 8004640:	468b      	mov	fp, r1
 8004642:	dd13      	ble.n	800466c <_strtod_l+0x3dc>
 8004644:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <_strtod_l+0x5a4>)
 8004646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800464a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800464e:	f7fb fffb 	bl	8000648 <__aeabi_dmul>
 8004652:	4682      	mov	sl, r0
 8004654:	4648      	mov	r0, r9
 8004656:	468b      	mov	fp, r1
 8004658:	f7fb ff7c 	bl	8000554 <__aeabi_ui2d>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4650      	mov	r0, sl
 8004662:	4659      	mov	r1, fp
 8004664:	f7fb fe3a 	bl	80002dc <__adddf3>
 8004668:	4682      	mov	sl, r0
 800466a:	468b      	mov	fp, r1
 800466c:	2d0f      	cmp	r5, #15
 800466e:	dc38      	bgt.n	80046e2 <_strtod_l+0x452>
 8004670:	9b06      	ldr	r3, [sp, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f43f ae50 	beq.w	8004318 <_strtod_l+0x88>
 8004678:	dd24      	ble.n	80046c4 <_strtod_l+0x434>
 800467a:	2b16      	cmp	r3, #22
 800467c:	dc0b      	bgt.n	8004696 <_strtod_l+0x406>
 800467e:	496d      	ldr	r1, [pc, #436]	; (8004834 <_strtod_l+0x5a4>)
 8004680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004688:	4652      	mov	r2, sl
 800468a:	465b      	mov	r3, fp
 800468c:	f7fb ffdc 	bl	8000648 <__aeabi_dmul>
 8004690:	4682      	mov	sl, r0
 8004692:	468b      	mov	fp, r1
 8004694:	e640      	b.n	8004318 <_strtod_l+0x88>
 8004696:	9a06      	ldr	r2, [sp, #24]
 8004698:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800469c:	4293      	cmp	r3, r2
 800469e:	db20      	blt.n	80046e2 <_strtod_l+0x452>
 80046a0:	4c64      	ldr	r4, [pc, #400]	; (8004834 <_strtod_l+0x5a4>)
 80046a2:	f1c5 050f 	rsb	r5, r5, #15
 80046a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80046aa:	4652      	mov	r2, sl
 80046ac:	465b      	mov	r3, fp
 80046ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b2:	f7fb ffc9 	bl	8000648 <__aeabi_dmul>
 80046b6:	9b06      	ldr	r3, [sp, #24]
 80046b8:	1b5d      	subs	r5, r3, r5
 80046ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80046be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80046c2:	e7e3      	b.n	800468c <_strtod_l+0x3fc>
 80046c4:	9b06      	ldr	r3, [sp, #24]
 80046c6:	3316      	adds	r3, #22
 80046c8:	db0b      	blt.n	80046e2 <_strtod_l+0x452>
 80046ca:	9b05      	ldr	r3, [sp, #20]
 80046cc:	1b9e      	subs	r6, r3, r6
 80046ce:	4b59      	ldr	r3, [pc, #356]	; (8004834 <_strtod_l+0x5a4>)
 80046d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80046d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046d8:	4650      	mov	r0, sl
 80046da:	4659      	mov	r1, fp
 80046dc:	f7fc f8de 	bl	800089c <__aeabi_ddiv>
 80046e0:	e7d6      	b.n	8004690 <_strtod_l+0x400>
 80046e2:	9b06      	ldr	r3, [sp, #24]
 80046e4:	eba5 0808 	sub.w	r8, r5, r8
 80046e8:	4498      	add	r8, r3
 80046ea:	f1b8 0f00 	cmp.w	r8, #0
 80046ee:	dd74      	ble.n	80047da <_strtod_l+0x54a>
 80046f0:	f018 030f 	ands.w	r3, r8, #15
 80046f4:	d00a      	beq.n	800470c <_strtod_l+0x47c>
 80046f6:	494f      	ldr	r1, [pc, #316]	; (8004834 <_strtod_l+0x5a4>)
 80046f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80046fc:	4652      	mov	r2, sl
 80046fe:	465b      	mov	r3, fp
 8004700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004704:	f7fb ffa0 	bl	8000648 <__aeabi_dmul>
 8004708:	4682      	mov	sl, r0
 800470a:	468b      	mov	fp, r1
 800470c:	f038 080f 	bics.w	r8, r8, #15
 8004710:	d04f      	beq.n	80047b2 <_strtod_l+0x522>
 8004712:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004716:	dd22      	ble.n	800475e <_strtod_l+0x4ce>
 8004718:	2500      	movs	r5, #0
 800471a:	462e      	mov	r6, r5
 800471c:	9507      	str	r5, [sp, #28]
 800471e:	9505      	str	r5, [sp, #20]
 8004720:	2322      	movs	r3, #34	; 0x22
 8004722:	f8df b118 	ldr.w	fp, [pc, #280]	; 800483c <_strtod_l+0x5ac>
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	f04f 0a00 	mov.w	sl, #0
 800472c:	9b07      	ldr	r3, [sp, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f43f adf2 	beq.w	8004318 <_strtod_l+0x88>
 8004734:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004736:	4620      	mov	r0, r4
 8004738:	f002 f938 	bl	80069ac <_Bfree>
 800473c:	9905      	ldr	r1, [sp, #20]
 800473e:	4620      	mov	r0, r4
 8004740:	f002 f934 	bl	80069ac <_Bfree>
 8004744:	4631      	mov	r1, r6
 8004746:	4620      	mov	r0, r4
 8004748:	f002 f930 	bl	80069ac <_Bfree>
 800474c:	9907      	ldr	r1, [sp, #28]
 800474e:	4620      	mov	r0, r4
 8004750:	f002 f92c 	bl	80069ac <_Bfree>
 8004754:	4629      	mov	r1, r5
 8004756:	4620      	mov	r0, r4
 8004758:	f002 f928 	bl	80069ac <_Bfree>
 800475c:	e5dc      	b.n	8004318 <_strtod_l+0x88>
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <_strtod_l+0x5a8>)
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	2300      	movs	r3, #0
 8004764:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004768:	4650      	mov	r0, sl
 800476a:	4659      	mov	r1, fp
 800476c:	4699      	mov	r9, r3
 800476e:	f1b8 0f01 	cmp.w	r8, #1
 8004772:	dc21      	bgt.n	80047b8 <_strtod_l+0x528>
 8004774:	b10b      	cbz	r3, 800477a <_strtod_l+0x4ea>
 8004776:	4682      	mov	sl, r0
 8004778:	468b      	mov	fp, r1
 800477a:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <_strtod_l+0x5a8>)
 800477c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004780:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004784:	4652      	mov	r2, sl
 8004786:	465b      	mov	r3, fp
 8004788:	e9d9 0100 	ldrd	r0, r1, [r9]
 800478c:	f7fb ff5c 	bl	8000648 <__aeabi_dmul>
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <_strtod_l+0x5ac>)
 8004792:	460a      	mov	r2, r1
 8004794:	400b      	ands	r3, r1
 8004796:	492a      	ldr	r1, [pc, #168]	; (8004840 <_strtod_l+0x5b0>)
 8004798:	428b      	cmp	r3, r1
 800479a:	4682      	mov	sl, r0
 800479c:	d8bc      	bhi.n	8004718 <_strtod_l+0x488>
 800479e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80047a2:	428b      	cmp	r3, r1
 80047a4:	bf86      	itte	hi
 80047a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004844 <_strtod_l+0x5b4>
 80047aa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80047ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80047b2:	2300      	movs	r3, #0
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	e084      	b.n	80048c2 <_strtod_l+0x632>
 80047b8:	f018 0f01 	tst.w	r8, #1
 80047bc:	d005      	beq.n	80047ca <_strtod_l+0x53a>
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	f7fb ff40 	bl	8000648 <__aeabi_dmul>
 80047c8:	2301      	movs	r3, #1
 80047ca:	9a04      	ldr	r2, [sp, #16]
 80047cc:	3208      	adds	r2, #8
 80047ce:	f109 0901 	add.w	r9, r9, #1
 80047d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80047d6:	9204      	str	r2, [sp, #16]
 80047d8:	e7c9      	b.n	800476e <_strtod_l+0x4de>
 80047da:	d0ea      	beq.n	80047b2 <_strtod_l+0x522>
 80047dc:	f1c8 0800 	rsb	r8, r8, #0
 80047e0:	f018 020f 	ands.w	r2, r8, #15
 80047e4:	d00a      	beq.n	80047fc <_strtod_l+0x56c>
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <_strtod_l+0x5a4>)
 80047e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047ec:	4650      	mov	r0, sl
 80047ee:	4659      	mov	r1, fp
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fc f852 	bl	800089c <__aeabi_ddiv>
 80047f8:	4682      	mov	sl, r0
 80047fa:	468b      	mov	fp, r1
 80047fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004800:	d0d7      	beq.n	80047b2 <_strtod_l+0x522>
 8004802:	f1b8 0f1f 	cmp.w	r8, #31
 8004806:	dd1f      	ble.n	8004848 <_strtod_l+0x5b8>
 8004808:	2500      	movs	r5, #0
 800480a:	462e      	mov	r6, r5
 800480c:	9507      	str	r5, [sp, #28]
 800480e:	9505      	str	r5, [sp, #20]
 8004810:	2322      	movs	r3, #34	; 0x22
 8004812:	f04f 0a00 	mov.w	sl, #0
 8004816:	f04f 0b00 	mov.w	fp, #0
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	e786      	b.n	800472c <_strtod_l+0x49c>
 800481e:	bf00      	nop
 8004820:	080143c1 	.word	0x080143c1
 8004824:	080143fc 	.word	0x080143fc
 8004828:	080143b9 	.word	0x080143b9
 800482c:	0801450d 	.word	0x0801450d
 8004830:	0800acc0 	.word	0x0800acc0
 8004834:	08014748 	.word	0x08014748
 8004838:	08014720 	.word	0x08014720
 800483c:	7ff00000 	.word	0x7ff00000
 8004840:	7ca00000 	.word	0x7ca00000
 8004844:	7fefffff 	.word	0x7fefffff
 8004848:	f018 0310 	ands.w	r3, r8, #16
 800484c:	bf18      	it	ne
 800484e:	236a      	movne	r3, #106	; 0x6a
 8004850:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004c00 <_strtod_l+0x970>
 8004854:	9304      	str	r3, [sp, #16]
 8004856:	4650      	mov	r0, sl
 8004858:	4659      	mov	r1, fp
 800485a:	2300      	movs	r3, #0
 800485c:	f018 0f01 	tst.w	r8, #1
 8004860:	d004      	beq.n	800486c <_strtod_l+0x5dc>
 8004862:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004866:	f7fb feef 	bl	8000648 <__aeabi_dmul>
 800486a:	2301      	movs	r3, #1
 800486c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004870:	f109 0908 	add.w	r9, r9, #8
 8004874:	d1f2      	bne.n	800485c <_strtod_l+0x5cc>
 8004876:	b10b      	cbz	r3, 800487c <_strtod_l+0x5ec>
 8004878:	4682      	mov	sl, r0
 800487a:	468b      	mov	fp, r1
 800487c:	9b04      	ldr	r3, [sp, #16]
 800487e:	b1c3      	cbz	r3, 80048b2 <_strtod_l+0x622>
 8004880:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004884:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004888:	2b00      	cmp	r3, #0
 800488a:	4659      	mov	r1, fp
 800488c:	dd11      	ble.n	80048b2 <_strtod_l+0x622>
 800488e:	2b1f      	cmp	r3, #31
 8004890:	f340 8124 	ble.w	8004adc <_strtod_l+0x84c>
 8004894:	2b34      	cmp	r3, #52	; 0x34
 8004896:	bfde      	ittt	le
 8004898:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800489c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80048a0:	fa03 f202 	lslle.w	r2, r3, r2
 80048a4:	f04f 0a00 	mov.w	sl, #0
 80048a8:	bfcc      	ite	gt
 80048aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80048ae:	ea02 0b01 	andle.w	fp, r2, r1
 80048b2:	2200      	movs	r2, #0
 80048b4:	2300      	movs	r3, #0
 80048b6:	4650      	mov	r0, sl
 80048b8:	4659      	mov	r1, fp
 80048ba:	f7fc f92d 	bl	8000b18 <__aeabi_dcmpeq>
 80048be:	2800      	cmp	r0, #0
 80048c0:	d1a2      	bne.n	8004808 <_strtod_l+0x578>
 80048c2:	9b07      	ldr	r3, [sp, #28]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	9908      	ldr	r1, [sp, #32]
 80048c8:	462b      	mov	r3, r5
 80048ca:	463a      	mov	r2, r7
 80048cc:	4620      	mov	r0, r4
 80048ce:	f002 f8d5 	bl	8006a7c <__s2b>
 80048d2:	9007      	str	r0, [sp, #28]
 80048d4:	2800      	cmp	r0, #0
 80048d6:	f43f af1f 	beq.w	8004718 <_strtod_l+0x488>
 80048da:	9b05      	ldr	r3, [sp, #20]
 80048dc:	1b9e      	subs	r6, r3, r6
 80048de:	9b06      	ldr	r3, [sp, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bfb4      	ite	lt
 80048e4:	4633      	movlt	r3, r6
 80048e6:	2300      	movge	r3, #0
 80048e8:	930c      	str	r3, [sp, #48]	; 0x30
 80048ea:	9b06      	ldr	r3, [sp, #24]
 80048ec:	2500      	movs	r5, #0
 80048ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80048f2:	9312      	str	r3, [sp, #72]	; 0x48
 80048f4:	462e      	mov	r6, r5
 80048f6:	9b07      	ldr	r3, [sp, #28]
 80048f8:	4620      	mov	r0, r4
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	f002 f816 	bl	800692c <_Balloc>
 8004900:	9005      	str	r0, [sp, #20]
 8004902:	2800      	cmp	r0, #0
 8004904:	f43f af0c 	beq.w	8004720 <_strtod_l+0x490>
 8004908:	9b07      	ldr	r3, [sp, #28]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	3202      	adds	r2, #2
 800490e:	f103 010c 	add.w	r1, r3, #12
 8004912:	0092      	lsls	r2, r2, #2
 8004914:	300c      	adds	r0, #12
 8004916:	f001 fffb 	bl	8006910 <memcpy>
 800491a:	ec4b ab10 	vmov	d0, sl, fp
 800491e:	aa1a      	add	r2, sp, #104	; 0x68
 8004920:	a919      	add	r1, sp, #100	; 0x64
 8004922:	4620      	mov	r0, r4
 8004924:	f002 fbf0 	bl	8007108 <__d2b>
 8004928:	ec4b ab18 	vmov	d8, sl, fp
 800492c:	9018      	str	r0, [sp, #96]	; 0x60
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f aef6 	beq.w	8004720 <_strtod_l+0x490>
 8004934:	2101      	movs	r1, #1
 8004936:	4620      	mov	r0, r4
 8004938:	f002 f93a 	bl	8006bb0 <__i2b>
 800493c:	4606      	mov	r6, r0
 800493e:	2800      	cmp	r0, #0
 8004940:	f43f aeee 	beq.w	8004720 <_strtod_l+0x490>
 8004944:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004946:	9904      	ldr	r1, [sp, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfab      	itete	ge
 800494c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800494e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004950:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004952:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004956:	bfac      	ite	ge
 8004958:	eb03 0902 	addge.w	r9, r3, r2
 800495c:	1ad7      	sublt	r7, r2, r3
 800495e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004960:	eba3 0801 	sub.w	r8, r3, r1
 8004964:	4490      	add	r8, r2
 8004966:	4ba1      	ldr	r3, [pc, #644]	; (8004bec <_strtod_l+0x95c>)
 8004968:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800496c:	4598      	cmp	r8, r3
 800496e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004972:	f280 80c7 	bge.w	8004b04 <_strtod_l+0x874>
 8004976:	eba3 0308 	sub.w	r3, r3, r8
 800497a:	2b1f      	cmp	r3, #31
 800497c:	eba2 0203 	sub.w	r2, r2, r3
 8004980:	f04f 0101 	mov.w	r1, #1
 8004984:	f300 80b1 	bgt.w	8004aea <_strtod_l+0x85a>
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	930d      	str	r3, [sp, #52]	; 0x34
 800498e:	2300      	movs	r3, #0
 8004990:	9308      	str	r3, [sp, #32]
 8004992:	eb09 0802 	add.w	r8, r9, r2
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	45c1      	cmp	r9, r8
 800499a:	4417      	add	r7, r2
 800499c:	441f      	add	r7, r3
 800499e:	464b      	mov	r3, r9
 80049a0:	bfa8      	it	ge
 80049a2:	4643      	movge	r3, r8
 80049a4:	42bb      	cmp	r3, r7
 80049a6:	bfa8      	it	ge
 80049a8:	463b      	movge	r3, r7
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bfc2      	ittt	gt
 80049ae:	eba8 0803 	subgt.w	r8, r8, r3
 80049b2:	1aff      	subgt	r7, r7, r3
 80049b4:	eba9 0903 	subgt.w	r9, r9, r3
 80049b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dd17      	ble.n	80049ee <_strtod_l+0x75e>
 80049be:	4631      	mov	r1, r6
 80049c0:	461a      	mov	r2, r3
 80049c2:	4620      	mov	r0, r4
 80049c4:	f002 f9b4 	bl	8006d30 <__pow5mult>
 80049c8:	4606      	mov	r6, r0
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f43f aea8 	beq.w	8004720 <_strtod_l+0x490>
 80049d0:	4601      	mov	r1, r0
 80049d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80049d4:	4620      	mov	r0, r4
 80049d6:	f002 f901 	bl	8006bdc <__multiply>
 80049da:	900b      	str	r0, [sp, #44]	; 0x2c
 80049dc:	2800      	cmp	r0, #0
 80049de:	f43f ae9f 	beq.w	8004720 <_strtod_l+0x490>
 80049e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049e4:	4620      	mov	r0, r4
 80049e6:	f001 ffe1 	bl	80069ac <_Bfree>
 80049ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ec:	9318      	str	r3, [sp, #96]	; 0x60
 80049ee:	f1b8 0f00 	cmp.w	r8, #0
 80049f2:	f300 808c 	bgt.w	8004b0e <_strtod_l+0x87e>
 80049f6:	9b06      	ldr	r3, [sp, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dd08      	ble.n	8004a0e <_strtod_l+0x77e>
 80049fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049fe:	9905      	ldr	r1, [sp, #20]
 8004a00:	4620      	mov	r0, r4
 8004a02:	f002 f995 	bl	8006d30 <__pow5mult>
 8004a06:	9005      	str	r0, [sp, #20]
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f43f ae89 	beq.w	8004720 <_strtod_l+0x490>
 8004a0e:	2f00      	cmp	r7, #0
 8004a10:	dd08      	ble.n	8004a24 <_strtod_l+0x794>
 8004a12:	9905      	ldr	r1, [sp, #20]
 8004a14:	463a      	mov	r2, r7
 8004a16:	4620      	mov	r0, r4
 8004a18:	f002 f9e4 	bl	8006de4 <__lshift>
 8004a1c:	9005      	str	r0, [sp, #20]
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	f43f ae7e 	beq.w	8004720 <_strtod_l+0x490>
 8004a24:	f1b9 0f00 	cmp.w	r9, #0
 8004a28:	dd08      	ble.n	8004a3c <_strtod_l+0x7ac>
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	464a      	mov	r2, r9
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f002 f9d8 	bl	8006de4 <__lshift>
 8004a34:	4606      	mov	r6, r0
 8004a36:	2800      	cmp	r0, #0
 8004a38:	f43f ae72 	beq.w	8004720 <_strtod_l+0x490>
 8004a3c:	9a05      	ldr	r2, [sp, #20]
 8004a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a40:	4620      	mov	r0, r4
 8004a42:	f002 fa5b 	bl	8006efc <__mdiff>
 8004a46:	4605      	mov	r5, r0
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	f43f ae69 	beq.w	8004720 <_strtod_l+0x490>
 8004a4e:	68c3      	ldr	r3, [r0, #12]
 8004a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a52:	2300      	movs	r3, #0
 8004a54:	60c3      	str	r3, [r0, #12]
 8004a56:	4631      	mov	r1, r6
 8004a58:	f002 fa34 	bl	8006ec4 <__mcmp>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	da60      	bge.n	8004b22 <_strtod_l+0x892>
 8004a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a62:	ea53 030a 	orrs.w	r3, r3, sl
 8004a66:	f040 8082 	bne.w	8004b6e <_strtod_l+0x8de>
 8004a6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d17d      	bne.n	8004b6e <_strtod_l+0x8de>
 8004a72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a76:	0d1b      	lsrs	r3, r3, #20
 8004a78:	051b      	lsls	r3, r3, #20
 8004a7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a7e:	d976      	bls.n	8004b6e <_strtod_l+0x8de>
 8004a80:	696b      	ldr	r3, [r5, #20]
 8004a82:	b913      	cbnz	r3, 8004a8a <_strtod_l+0x7fa>
 8004a84:	692b      	ldr	r3, [r5, #16]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	dd71      	ble.n	8004b6e <_strtod_l+0x8de>
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f002 f9a8 	bl	8006de4 <__lshift>
 8004a94:	4631      	mov	r1, r6
 8004a96:	4605      	mov	r5, r0
 8004a98:	f002 fa14 	bl	8006ec4 <__mcmp>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	dd66      	ble.n	8004b6e <_strtod_l+0x8de>
 8004aa0:	9904      	ldr	r1, [sp, #16]
 8004aa2:	4a53      	ldr	r2, [pc, #332]	; (8004bf0 <_strtod_l+0x960>)
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	2900      	cmp	r1, #0
 8004aa8:	f000 8081 	beq.w	8004bae <_strtod_l+0x91e>
 8004aac:	ea02 010b 	and.w	r1, r2, fp
 8004ab0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ab4:	dc7b      	bgt.n	8004bae <_strtod_l+0x91e>
 8004ab6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004aba:	f77f aea9 	ble.w	8004810 <_strtod_l+0x580>
 8004abe:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <_strtod_l+0x964>)
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f7fb fdbf 	bl	8000648 <__aeabi_dmul>
 8004aca:	460b      	mov	r3, r1
 8004acc:	4303      	orrs	r3, r0
 8004ace:	bf08      	it	eq
 8004ad0:	2322      	moveq	r3, #34	; 0x22
 8004ad2:	4682      	mov	sl, r0
 8004ad4:	468b      	mov	fp, r1
 8004ad6:	bf08      	it	eq
 8004ad8:	6023      	streq	r3, [r4, #0]
 8004ada:	e62b      	b.n	8004734 <_strtod_l+0x4a4>
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	ea03 0a0a 	and.w	sl, r3, sl
 8004ae8:	e6e3      	b.n	80048b2 <_strtod_l+0x622>
 8004aea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004aee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004af2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004af6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004afa:	fa01 f308 	lsl.w	r3, r1, r8
 8004afe:	9308      	str	r3, [sp, #32]
 8004b00:	910d      	str	r1, [sp, #52]	; 0x34
 8004b02:	e746      	b.n	8004992 <_strtod_l+0x702>
 8004b04:	2300      	movs	r3, #0
 8004b06:	9308      	str	r3, [sp, #32]
 8004b08:	2301      	movs	r3, #1
 8004b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8004b0c:	e741      	b.n	8004992 <_strtod_l+0x702>
 8004b0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b10:	4642      	mov	r2, r8
 8004b12:	4620      	mov	r0, r4
 8004b14:	f002 f966 	bl	8006de4 <__lshift>
 8004b18:	9018      	str	r0, [sp, #96]	; 0x60
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	f47f af6b 	bne.w	80049f6 <_strtod_l+0x766>
 8004b20:	e5fe      	b.n	8004720 <_strtod_l+0x490>
 8004b22:	465f      	mov	r7, fp
 8004b24:	d16e      	bne.n	8004c04 <_strtod_l+0x974>
 8004b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b2c:	b342      	cbz	r2, 8004b80 <_strtod_l+0x8f0>
 8004b2e:	4a32      	ldr	r2, [pc, #200]	; (8004bf8 <_strtod_l+0x968>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d128      	bne.n	8004b86 <_strtod_l+0x8f6>
 8004b34:	9b04      	ldr	r3, [sp, #16]
 8004b36:	4651      	mov	r1, sl
 8004b38:	b1eb      	cbz	r3, 8004b76 <_strtod_l+0x8e6>
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <_strtod_l+0x960>)
 8004b3c:	403b      	ands	r3, r7
 8004b3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b46:	d819      	bhi.n	8004b7c <_strtod_l+0x8ec>
 8004b48:	0d1b      	lsrs	r3, r3, #20
 8004b4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	4299      	cmp	r1, r3
 8004b54:	d117      	bne.n	8004b86 <_strtod_l+0x8f6>
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <_strtod_l+0x96c>)
 8004b58:	429f      	cmp	r7, r3
 8004b5a:	d102      	bne.n	8004b62 <_strtod_l+0x8d2>
 8004b5c:	3101      	adds	r1, #1
 8004b5e:	f43f addf 	beq.w	8004720 <_strtod_l+0x490>
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <_strtod_l+0x960>)
 8004b64:	403b      	ands	r3, r7
 8004b66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004b6a:	f04f 0a00 	mov.w	sl, #0
 8004b6e:	9b04      	ldr	r3, [sp, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1a4      	bne.n	8004abe <_strtod_l+0x82e>
 8004b74:	e5de      	b.n	8004734 <_strtod_l+0x4a4>
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b7a:	e7ea      	b.n	8004b52 <_strtod_l+0x8c2>
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	e7e8      	b.n	8004b52 <_strtod_l+0x8c2>
 8004b80:	ea53 030a 	orrs.w	r3, r3, sl
 8004b84:	d08c      	beq.n	8004aa0 <_strtod_l+0x810>
 8004b86:	9b08      	ldr	r3, [sp, #32]
 8004b88:	b1db      	cbz	r3, 8004bc2 <_strtod_l+0x932>
 8004b8a:	423b      	tst	r3, r7
 8004b8c:	d0ef      	beq.n	8004b6e <_strtod_l+0x8de>
 8004b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	4650      	mov	r0, sl
 8004b94:	4659      	mov	r1, fp
 8004b96:	b1c3      	cbz	r3, 8004bca <_strtod_l+0x93a>
 8004b98:	f7ff fb5e 	bl	8004258 <sulp>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	ec51 0b18 	vmov	r0, r1, d8
 8004ba4:	f7fb fb9a 	bl	80002dc <__adddf3>
 8004ba8:	4682      	mov	sl, r0
 8004baa:	468b      	mov	fp, r1
 8004bac:	e7df      	b.n	8004b6e <_strtod_l+0x8de>
 8004bae:	4013      	ands	r3, r2
 8004bb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004bb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004bb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004bbc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004bc0:	e7d5      	b.n	8004b6e <_strtod_l+0x8de>
 8004bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc4:	ea13 0f0a 	tst.w	r3, sl
 8004bc8:	e7e0      	b.n	8004b8c <_strtod_l+0x8fc>
 8004bca:	f7ff fb45 	bl	8004258 <sulp>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	ec51 0b18 	vmov	r0, r1, d8
 8004bd6:	f7fb fb7f 	bl	80002d8 <__aeabi_dsub>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4682      	mov	sl, r0
 8004be0:	468b      	mov	fp, r1
 8004be2:	f7fb ff99 	bl	8000b18 <__aeabi_dcmpeq>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0c1      	beq.n	8004b6e <_strtod_l+0x8de>
 8004bea:	e611      	b.n	8004810 <_strtod_l+0x580>
 8004bec:	fffffc02 	.word	0xfffffc02
 8004bf0:	7ff00000 	.word	0x7ff00000
 8004bf4:	39500000 	.word	0x39500000
 8004bf8:	000fffff 	.word	0x000fffff
 8004bfc:	7fefffff 	.word	0x7fefffff
 8004c00:	08014410 	.word	0x08014410
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	f002 fada 	bl	80071c0 <__ratio>
 8004c0c:	ec59 8b10 	vmov	r8, r9, d0
 8004c10:	ee10 0a10 	vmov	r0, s0
 8004c14:	2200      	movs	r2, #0
 8004c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	f7fb ff90 	bl	8000b40 <__aeabi_dcmple>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d07a      	beq.n	8004d1a <_strtod_l+0xa8a>
 8004c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04a      	beq.n	8004cc0 <_strtod_l+0xa30>
 8004c2a:	4b95      	ldr	r3, [pc, #596]	; (8004e80 <_strtod_l+0xbf0>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004e80 <_strtod_l+0xbf0>
 8004c36:	f04f 0800 	mov.w	r8, #0
 8004c3a:	4b92      	ldr	r3, [pc, #584]	; (8004e84 <_strtod_l+0xbf4>)
 8004c3c:	403b      	ands	r3, r7
 8004c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8004c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c42:	4b91      	ldr	r3, [pc, #580]	; (8004e88 <_strtod_l+0xbf8>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	f040 80b0 	bne.w	8004daa <_strtod_l+0xb1a>
 8004c4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004c52:	ec4b ab10 	vmov	d0, sl, fp
 8004c56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c5a:	f002 f9d9 	bl	8007010 <__ulp>
 8004c5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c62:	ec53 2b10 	vmov	r2, r3, d0
 8004c66:	f7fb fcef 	bl	8000648 <__aeabi_dmul>
 8004c6a:	4652      	mov	r2, sl
 8004c6c:	465b      	mov	r3, fp
 8004c6e:	f7fb fb35 	bl	80002dc <__adddf3>
 8004c72:	460b      	mov	r3, r1
 8004c74:	4983      	ldr	r1, [pc, #524]	; (8004e84 <_strtod_l+0xbf4>)
 8004c76:	4a85      	ldr	r2, [pc, #532]	; (8004e8c <_strtod_l+0xbfc>)
 8004c78:	4019      	ands	r1, r3
 8004c7a:	4291      	cmp	r1, r2
 8004c7c:	4682      	mov	sl, r0
 8004c7e:	d960      	bls.n	8004d42 <_strtod_l+0xab2>
 8004c80:	ee18 3a90 	vmov	r3, s17
 8004c84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d104      	bne.n	8004c96 <_strtod_l+0xa06>
 8004c8c:	ee18 3a10 	vmov	r3, s16
 8004c90:	3301      	adds	r3, #1
 8004c92:	f43f ad45 	beq.w	8004720 <_strtod_l+0x490>
 8004c96:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004e98 <_strtod_l+0xc08>
 8004c9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f001 fe83 	bl	80069ac <_Bfree>
 8004ca6:	9905      	ldr	r1, [sp, #20]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f001 fe7f 	bl	80069ac <_Bfree>
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f001 fe7b 	bl	80069ac <_Bfree>
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f001 fe77 	bl	80069ac <_Bfree>
 8004cbe:	e61a      	b.n	80048f6 <_strtod_l+0x666>
 8004cc0:	f1ba 0f00 	cmp.w	sl, #0
 8004cc4:	d11b      	bne.n	8004cfe <_strtod_l+0xa6e>
 8004cc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cca:	b9f3      	cbnz	r3, 8004d0a <_strtod_l+0xa7a>
 8004ccc:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <_strtod_l+0xbf0>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb ff2a 	bl	8000b2c <__aeabi_dcmplt>
 8004cd8:	b9d0      	cbnz	r0, 8004d10 <_strtod_l+0xa80>
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4649      	mov	r1, r9
 8004cde:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <_strtod_l+0xc00>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f7fb fcb1 	bl	8000648 <__aeabi_dmul>
 8004ce6:	4680      	mov	r8, r0
 8004ce8:	4689      	mov	r9, r1
 8004cea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004cf2:	9315      	str	r3, [sp, #84]	; 0x54
 8004cf4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004cf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cfc:	e79d      	b.n	8004c3a <_strtod_l+0x9aa>
 8004cfe:	f1ba 0f01 	cmp.w	sl, #1
 8004d02:	d102      	bne.n	8004d0a <_strtod_l+0xa7a>
 8004d04:	2f00      	cmp	r7, #0
 8004d06:	f43f ad83 	beq.w	8004810 <_strtod_l+0x580>
 8004d0a:	4b62      	ldr	r3, [pc, #392]	; (8004e94 <_strtod_l+0xc04>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	e78e      	b.n	8004c2e <_strtod_l+0x99e>
 8004d10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004e90 <_strtod_l+0xc00>
 8004d14:	f04f 0800 	mov.w	r8, #0
 8004d18:	e7e7      	b.n	8004cea <_strtod_l+0xa5a>
 8004d1a:	4b5d      	ldr	r3, [pc, #372]	; (8004e90 <_strtod_l+0xc00>)
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	2200      	movs	r2, #0
 8004d22:	f7fb fc91 	bl	8000648 <__aeabi_dmul>
 8004d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d28:	4680      	mov	r8, r0
 8004d2a:	4689      	mov	r9, r1
 8004d2c:	b933      	cbnz	r3, 8004d3c <_strtod_l+0xaac>
 8004d2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d32:	900e      	str	r0, [sp, #56]	; 0x38
 8004d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004d3a:	e7dd      	b.n	8004cf8 <_strtod_l+0xa68>
 8004d3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004d40:	e7f9      	b.n	8004d36 <_strtod_l+0xaa6>
 8004d42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004d46:	9b04      	ldr	r3, [sp, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1a8      	bne.n	8004c9e <_strtod_l+0xa0e>
 8004d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d52:	0d1b      	lsrs	r3, r3, #20
 8004d54:	051b      	lsls	r3, r3, #20
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d1a1      	bne.n	8004c9e <_strtod_l+0xa0e>
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	f7fb ff6b 	bl	8000c38 <__aeabi_d2lz>
 8004d62:	f7fb fc43 	bl	80005ec <__aeabi_l2d>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	f7fb fab3 	bl	80002d8 <__aeabi_dsub>
 8004d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d78:	ea43 030a 	orr.w	r3, r3, sl
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	4680      	mov	r8, r0
 8004d80:	4689      	mov	r9, r1
 8004d82:	d055      	beq.n	8004e30 <_strtod_l+0xba0>
 8004d84:	a336      	add	r3, pc, #216	; (adr r3, 8004e60 <_strtod_l+0xbd0>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fecf 	bl	8000b2c <__aeabi_dcmplt>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	f47f acd0 	bne.w	8004734 <_strtod_l+0x4a4>
 8004d94:	a334      	add	r3, pc, #208	; (adr r3, 8004e68 <_strtod_l+0xbd8>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	f7fb fee3 	bl	8000b68 <__aeabi_dcmpgt>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f43f af7b 	beq.w	8004c9e <_strtod_l+0xa0e>
 8004da8:	e4c4      	b.n	8004734 <_strtod_l+0x4a4>
 8004daa:	9b04      	ldr	r3, [sp, #16]
 8004dac:	b333      	cbz	r3, 8004dfc <_strtod_l+0xb6c>
 8004dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004db4:	d822      	bhi.n	8004dfc <_strtod_l+0xb6c>
 8004db6:	a32e      	add	r3, pc, #184	; (adr r3, 8004e70 <_strtod_l+0xbe0>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	f7fb febe 	bl	8000b40 <__aeabi_dcmple>
 8004dc4:	b1a0      	cbz	r0, 8004df0 <_strtod_l+0xb60>
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4640      	mov	r0, r8
 8004dca:	f7fb ff15 	bl	8000bf8 <__aeabi_d2uiz>
 8004dce:	2801      	cmp	r0, #1
 8004dd0:	bf38      	it	cc
 8004dd2:	2001      	movcc	r0, #1
 8004dd4:	f7fb fbbe 	bl	8000554 <__aeabi_ui2d>
 8004dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dda:	4680      	mov	r8, r0
 8004ddc:	4689      	mov	r9, r1
 8004dde:	bb23      	cbnz	r3, 8004e2a <_strtod_l+0xb9a>
 8004de0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004de4:	9010      	str	r0, [sp, #64]	; 0x40
 8004de6:	9311      	str	r3, [sp, #68]	; 0x44
 8004de8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004df4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e00:	eeb0 0a48 	vmov.f32	s0, s16
 8004e04:	eef0 0a68 	vmov.f32	s1, s17
 8004e08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e0c:	f002 f900 	bl	8007010 <__ulp>
 8004e10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e14:	ec53 2b10 	vmov	r2, r3, d0
 8004e18:	f7fb fc16 	bl	8000648 <__aeabi_dmul>
 8004e1c:	ec53 2b18 	vmov	r2, r3, d8
 8004e20:	f7fb fa5c 	bl	80002dc <__adddf3>
 8004e24:	4682      	mov	sl, r0
 8004e26:	468b      	mov	fp, r1
 8004e28:	e78d      	b.n	8004d46 <_strtod_l+0xab6>
 8004e2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004e2e:	e7db      	b.n	8004de8 <_strtod_l+0xb58>
 8004e30:	a311      	add	r3, pc, #68	; (adr r3, 8004e78 <_strtod_l+0xbe8>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f7fb fe79 	bl	8000b2c <__aeabi_dcmplt>
 8004e3a:	e7b2      	b.n	8004da2 <_strtod_l+0xb12>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	f7ff ba6b 	b.w	8004320 <_strtod_l+0x90>
 8004e4a:	2a65      	cmp	r2, #101	; 0x65
 8004e4c:	f43f ab5f 	beq.w	800450e <_strtod_l+0x27e>
 8004e50:	2a45      	cmp	r2, #69	; 0x45
 8004e52:	f43f ab5c 	beq.w	800450e <_strtod_l+0x27e>
 8004e56:	2301      	movs	r3, #1
 8004e58:	f7ff bb94 	b.w	8004584 <_strtod_l+0x2f4>
 8004e5c:	f3af 8000 	nop.w
 8004e60:	94a03595 	.word	0x94a03595
 8004e64:	3fdfffff 	.word	0x3fdfffff
 8004e68:	35afe535 	.word	0x35afe535
 8004e6c:	3fe00000 	.word	0x3fe00000
 8004e70:	ffc00000 	.word	0xffc00000
 8004e74:	41dfffff 	.word	0x41dfffff
 8004e78:	94a03595 	.word	0x94a03595
 8004e7c:	3fcfffff 	.word	0x3fcfffff
 8004e80:	3ff00000 	.word	0x3ff00000
 8004e84:	7ff00000 	.word	0x7ff00000
 8004e88:	7fe00000 	.word	0x7fe00000
 8004e8c:	7c9fffff 	.word	0x7c9fffff
 8004e90:	3fe00000 	.word	0x3fe00000
 8004e94:	bff00000 	.word	0xbff00000
 8004e98:	7fefffff 	.word	0x7fefffff

08004e9c <strtod>:
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	4802      	ldr	r0, [pc, #8]	; (8004eac <strtod+0x10>)
 8004ea2:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <strtod+0x14>)
 8004ea4:	6800      	ldr	r0, [r0, #0]
 8004ea6:	f7ff b9f3 	b.w	8004290 <_strtod_l>
 8004eaa:	bf00      	nop
 8004eac:	20000020 	.word	0x20000020
 8004eb0:	20000088 	.word	0x20000088

08004eb4 <strtok>:
 8004eb4:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <strtok+0x5c>)
 8004eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eb8:	681e      	ldr	r6, [r3, #0]
 8004eba:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	b9fc      	cbnz	r4, 8004f00 <strtok+0x4c>
 8004ec0:	2050      	movs	r0, #80	; 0x50
 8004ec2:	9101      	str	r1, [sp, #4]
 8004ec4:	f001 fd0a 	bl	80068dc <malloc>
 8004ec8:	9901      	ldr	r1, [sp, #4]
 8004eca:	65b0      	str	r0, [r6, #88]	; 0x58
 8004ecc:	4602      	mov	r2, r0
 8004ece:	b920      	cbnz	r0, 8004eda <strtok+0x26>
 8004ed0:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <strtok+0x60>)
 8004ed2:	4811      	ldr	r0, [pc, #68]	; (8004f18 <strtok+0x64>)
 8004ed4:	2157      	movs	r1, #87	; 0x57
 8004ed6:	f000 f8c5 	bl	8005064 <__assert_func>
 8004eda:	e9c0 4400 	strd	r4, r4, [r0]
 8004ede:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ee2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ee6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004eea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004eee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004ef2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004ef6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004efa:	6184      	str	r4, [r0, #24]
 8004efc:	7704      	strb	r4, [r0, #28]
 8004efe:	6244      	str	r4, [r0, #36]	; 0x24
 8004f00:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004f02:	2301      	movs	r3, #1
 8004f04:	4628      	mov	r0, r5
 8004f06:	b002      	add	sp, #8
 8004f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f0c:	f000 b806 	b.w	8004f1c <__strtok_r>
 8004f10:	20000020 	.word	0x20000020
 8004f14:	08014438 	.word	0x08014438
 8004f18:	0801444f 	.word	0x0801444f

08004f1c <__strtok_r>:
 8004f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1e:	b908      	cbnz	r0, 8004f24 <__strtok_r+0x8>
 8004f20:	6810      	ldr	r0, [r2, #0]
 8004f22:	b188      	cbz	r0, 8004f48 <__strtok_r+0x2c>
 8004f24:	4604      	mov	r4, r0
 8004f26:	4620      	mov	r0, r4
 8004f28:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f32:	b91e      	cbnz	r6, 8004f3c <__strtok_r+0x20>
 8004f34:	b965      	cbnz	r5, 8004f50 <__strtok_r+0x34>
 8004f36:	6015      	str	r5, [r2, #0]
 8004f38:	4628      	mov	r0, r5
 8004f3a:	e005      	b.n	8004f48 <__strtok_r+0x2c>
 8004f3c:	42b5      	cmp	r5, r6
 8004f3e:	d1f6      	bne.n	8004f2e <__strtok_r+0x12>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <__strtok_r+0xa>
 8004f44:	6014      	str	r4, [r2, #0]
 8004f46:	7003      	strb	r3, [r0, #0]
 8004f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4a:	461c      	mov	r4, r3
 8004f4c:	e00c      	b.n	8004f68 <__strtok_r+0x4c>
 8004f4e:	b915      	cbnz	r5, 8004f56 <__strtok_r+0x3a>
 8004f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f54:	460e      	mov	r6, r1
 8004f56:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f5a:	42ab      	cmp	r3, r5
 8004f5c:	d1f7      	bne.n	8004f4e <__strtok_r+0x32>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f3      	beq.n	8004f4a <__strtok_r+0x2e>
 8004f62:	2300      	movs	r3, #0
 8004f64:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f68:	6014      	str	r4, [r2, #0]
 8004f6a:	e7ed      	b.n	8004f48 <__strtok_r+0x2c>

08004f6c <_strtoul_l.constprop.0>:
 8004f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f70:	4f36      	ldr	r7, [pc, #216]	; (800504c <_strtoul_l.constprop.0+0xe0>)
 8004f72:	4686      	mov	lr, r0
 8004f74:	460d      	mov	r5, r1
 8004f76:	4628      	mov	r0, r5
 8004f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f7c:	5de6      	ldrb	r6, [r4, r7]
 8004f7e:	f016 0608 	ands.w	r6, r6, #8
 8004f82:	d1f8      	bne.n	8004f76 <_strtoul_l.constprop.0+0xa>
 8004f84:	2c2d      	cmp	r4, #45	; 0x2d
 8004f86:	d12f      	bne.n	8004fe8 <_strtoul_l.constprop.0+0x7c>
 8004f88:	782c      	ldrb	r4, [r5, #0]
 8004f8a:	2601      	movs	r6, #1
 8004f8c:	1c85      	adds	r5, r0, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d057      	beq.n	8005042 <_strtoul_l.constprop.0+0xd6>
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d109      	bne.n	8004faa <_strtoul_l.constprop.0+0x3e>
 8004f96:	2c30      	cmp	r4, #48	; 0x30
 8004f98:	d107      	bne.n	8004faa <_strtoul_l.constprop.0+0x3e>
 8004f9a:	7828      	ldrb	r0, [r5, #0]
 8004f9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004fa0:	2858      	cmp	r0, #88	; 0x58
 8004fa2:	d149      	bne.n	8005038 <_strtoul_l.constprop.0+0xcc>
 8004fa4:	786c      	ldrb	r4, [r5, #1]
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	3502      	adds	r5, #2
 8004faa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004fae:	2700      	movs	r7, #0
 8004fb0:	fbb8 f8f3 	udiv	r8, r8, r3
 8004fb4:	fb03 f908 	mul.w	r9, r3, r8
 8004fb8:	ea6f 0909 	mvn.w	r9, r9
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004fc2:	f1bc 0f09 	cmp.w	ip, #9
 8004fc6:	d814      	bhi.n	8004ff2 <_strtoul_l.constprop.0+0x86>
 8004fc8:	4664      	mov	r4, ip
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	dd22      	ble.n	8005014 <_strtoul_l.constprop.0+0xa8>
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	db1d      	blt.n	800500e <_strtoul_l.constprop.0+0xa2>
 8004fd2:	4580      	cmp	r8, r0
 8004fd4:	d31b      	bcc.n	800500e <_strtoul_l.constprop.0+0xa2>
 8004fd6:	d101      	bne.n	8004fdc <_strtoul_l.constprop.0+0x70>
 8004fd8:	45a1      	cmp	r9, r4
 8004fda:	db18      	blt.n	800500e <_strtoul_l.constprop.0+0xa2>
 8004fdc:	fb00 4003 	mla	r0, r0, r3, r4
 8004fe0:	2701      	movs	r7, #1
 8004fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fe6:	e7ea      	b.n	8004fbe <_strtoul_l.constprop.0+0x52>
 8004fe8:	2c2b      	cmp	r4, #43	; 0x2b
 8004fea:	bf04      	itt	eq
 8004fec:	782c      	ldrbeq	r4, [r5, #0]
 8004fee:	1c85      	addeq	r5, r0, #2
 8004ff0:	e7cd      	b.n	8004f8e <_strtoul_l.constprop.0+0x22>
 8004ff2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ff6:	f1bc 0f19 	cmp.w	ip, #25
 8004ffa:	d801      	bhi.n	8005000 <_strtoul_l.constprop.0+0x94>
 8004ffc:	3c37      	subs	r4, #55	; 0x37
 8004ffe:	e7e4      	b.n	8004fca <_strtoul_l.constprop.0+0x5e>
 8005000:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005004:	f1bc 0f19 	cmp.w	ip, #25
 8005008:	d804      	bhi.n	8005014 <_strtoul_l.constprop.0+0xa8>
 800500a:	3c57      	subs	r4, #87	; 0x57
 800500c:	e7dd      	b.n	8004fca <_strtoul_l.constprop.0+0x5e>
 800500e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005012:	e7e6      	b.n	8004fe2 <_strtoul_l.constprop.0+0x76>
 8005014:	2f00      	cmp	r7, #0
 8005016:	da07      	bge.n	8005028 <_strtoul_l.constprop.0+0xbc>
 8005018:	2322      	movs	r3, #34	; 0x22
 800501a:	f8ce 3000 	str.w	r3, [lr]
 800501e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005022:	b932      	cbnz	r2, 8005032 <_strtoul_l.constprop.0+0xc6>
 8005024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005028:	b106      	cbz	r6, 800502c <_strtoul_l.constprop.0+0xc0>
 800502a:	4240      	negs	r0, r0
 800502c:	2a00      	cmp	r2, #0
 800502e:	d0f9      	beq.n	8005024 <_strtoul_l.constprop.0+0xb8>
 8005030:	b107      	cbz	r7, 8005034 <_strtoul_l.constprop.0+0xc8>
 8005032:	1e69      	subs	r1, r5, #1
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	e7f5      	b.n	8005024 <_strtoul_l.constprop.0+0xb8>
 8005038:	2430      	movs	r4, #48	; 0x30
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1b5      	bne.n	8004faa <_strtoul_l.constprop.0+0x3e>
 800503e:	2308      	movs	r3, #8
 8005040:	e7b3      	b.n	8004faa <_strtoul_l.constprop.0+0x3e>
 8005042:	2c30      	cmp	r4, #48	; 0x30
 8005044:	d0a9      	beq.n	8004f9a <_strtoul_l.constprop.0+0x2e>
 8005046:	230a      	movs	r3, #10
 8005048:	e7af      	b.n	8004faa <_strtoul_l.constprop.0+0x3e>
 800504a:	bf00      	nop
 800504c:	080142ae 	.word	0x080142ae

08005050 <strtoul>:
 8005050:	4613      	mov	r3, r2
 8005052:	460a      	mov	r2, r1
 8005054:	4601      	mov	r1, r0
 8005056:	4802      	ldr	r0, [pc, #8]	; (8005060 <strtoul+0x10>)
 8005058:	6800      	ldr	r0, [r0, #0]
 800505a:	f7ff bf87 	b.w	8004f6c <_strtoul_l.constprop.0>
 800505e:	bf00      	nop
 8005060:	20000020 	.word	0x20000020

08005064 <__assert_func>:
 8005064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005066:	4614      	mov	r4, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <__assert_func+0x2c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4605      	mov	r5, r0
 8005070:	68d8      	ldr	r0, [r3, #12]
 8005072:	b14c      	cbz	r4, 8005088 <__assert_func+0x24>
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <__assert_func+0x30>)
 8005076:	9100      	str	r1, [sp, #0]
 8005078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800507c:	4906      	ldr	r1, [pc, #24]	; (8005098 <__assert_func+0x34>)
 800507e:	462b      	mov	r3, r5
 8005080:	f001 f820 	bl	80060c4 <fiprintf>
 8005084:	f002 fc52 	bl	800792c <abort>
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <__assert_func+0x38>)
 800508a:	461c      	mov	r4, r3
 800508c:	e7f3      	b.n	8005076 <__assert_func+0x12>
 800508e:	bf00      	nop
 8005090:	20000020 	.word	0x20000020
 8005094:	080144ce 	.word	0x080144ce
 8005098:	080144db 	.word	0x080144db
 800509c:	0800acc0 	.word	0x0800acc0

080050a0 <quorem>:
 80050a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	6903      	ldr	r3, [r0, #16]
 80050a6:	690c      	ldr	r4, [r1, #16]
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	4607      	mov	r7, r0
 80050ac:	f2c0 8081 	blt.w	80051b2 <quorem+0x112>
 80050b0:	3c01      	subs	r4, #1
 80050b2:	f101 0814 	add.w	r8, r1, #20
 80050b6:	f100 0514 	add.w	r5, r0, #20
 80050ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050c8:	3301      	adds	r3, #1
 80050ca:	429a      	cmp	r2, r3
 80050cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80050d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80050d8:	d331      	bcc.n	800513e <quorem+0x9e>
 80050da:	f04f 0e00 	mov.w	lr, #0
 80050de:	4640      	mov	r0, r8
 80050e0:	46ac      	mov	ip, r5
 80050e2:	46f2      	mov	sl, lr
 80050e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80050e8:	b293      	uxth	r3, r2
 80050ea:	fb06 e303 	mla	r3, r6, r3, lr
 80050ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	ebaa 0303 	sub.w	r3, sl, r3
 80050f8:	0c12      	lsrs	r2, r2, #16
 80050fa:	f8dc a000 	ldr.w	sl, [ip]
 80050fe:	fb06 e202 	mla	r2, r6, r2, lr
 8005102:	fa13 f38a 	uxtah	r3, r3, sl
 8005106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800510a:	fa1f fa82 	uxth.w	sl, r2
 800510e:	f8dc 2000 	ldr.w	r2, [ip]
 8005112:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800511a:	b29b      	uxth	r3, r3
 800511c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005120:	4581      	cmp	r9, r0
 8005122:	f84c 3b04 	str.w	r3, [ip], #4
 8005126:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800512a:	d2db      	bcs.n	80050e4 <quorem+0x44>
 800512c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005130:	b92b      	cbnz	r3, 800513e <quorem+0x9e>
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	3b04      	subs	r3, #4
 8005136:	429d      	cmp	r5, r3
 8005138:	461a      	mov	r2, r3
 800513a:	d32e      	bcc.n	800519a <quorem+0xfa>
 800513c:	613c      	str	r4, [r7, #16]
 800513e:	4638      	mov	r0, r7
 8005140:	f001 fec0 	bl	8006ec4 <__mcmp>
 8005144:	2800      	cmp	r0, #0
 8005146:	db24      	blt.n	8005192 <quorem+0xf2>
 8005148:	3601      	adds	r6, #1
 800514a:	4628      	mov	r0, r5
 800514c:	f04f 0c00 	mov.w	ip, #0
 8005150:	f858 2b04 	ldr.w	r2, [r8], #4
 8005154:	f8d0 e000 	ldr.w	lr, [r0]
 8005158:	b293      	uxth	r3, r2
 800515a:	ebac 0303 	sub.w	r3, ip, r3
 800515e:	0c12      	lsrs	r2, r2, #16
 8005160:	fa13 f38e 	uxtah	r3, r3, lr
 8005164:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800516c:	b29b      	uxth	r3, r3
 800516e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005172:	45c1      	cmp	r9, r8
 8005174:	f840 3b04 	str.w	r3, [r0], #4
 8005178:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800517c:	d2e8      	bcs.n	8005150 <quorem+0xb0>
 800517e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005186:	b922      	cbnz	r2, 8005192 <quorem+0xf2>
 8005188:	3b04      	subs	r3, #4
 800518a:	429d      	cmp	r5, r3
 800518c:	461a      	mov	r2, r3
 800518e:	d30a      	bcc.n	80051a6 <quorem+0x106>
 8005190:	613c      	str	r4, [r7, #16]
 8005192:	4630      	mov	r0, r6
 8005194:	b003      	add	sp, #12
 8005196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	3b04      	subs	r3, #4
 800519e:	2a00      	cmp	r2, #0
 80051a0:	d1cc      	bne.n	800513c <quorem+0x9c>
 80051a2:	3c01      	subs	r4, #1
 80051a4:	e7c7      	b.n	8005136 <quorem+0x96>
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	3b04      	subs	r3, #4
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d1f0      	bne.n	8005190 <quorem+0xf0>
 80051ae:	3c01      	subs	r4, #1
 80051b0:	e7eb      	b.n	800518a <quorem+0xea>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e7ee      	b.n	8005194 <quorem+0xf4>
	...

080051b8 <_dtoa_r>:
 80051b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051bc:	ed2d 8b04 	vpush	{d8-d9}
 80051c0:	ec57 6b10 	vmov	r6, r7, d0
 80051c4:	b093      	sub	sp, #76	; 0x4c
 80051c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051cc:	9106      	str	r1, [sp, #24]
 80051ce:	ee10 aa10 	vmov	sl, s0
 80051d2:	4604      	mov	r4, r0
 80051d4:	9209      	str	r2, [sp, #36]	; 0x24
 80051d6:	930c      	str	r3, [sp, #48]	; 0x30
 80051d8:	46bb      	mov	fp, r7
 80051da:	b975      	cbnz	r5, 80051fa <_dtoa_r+0x42>
 80051dc:	2010      	movs	r0, #16
 80051de:	f001 fb7d 	bl	80068dc <malloc>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6260      	str	r0, [r4, #36]	; 0x24
 80051e6:	b920      	cbnz	r0, 80051f2 <_dtoa_r+0x3a>
 80051e8:	4ba7      	ldr	r3, [pc, #668]	; (8005488 <_dtoa_r+0x2d0>)
 80051ea:	21ea      	movs	r1, #234	; 0xea
 80051ec:	48a7      	ldr	r0, [pc, #668]	; (800548c <_dtoa_r+0x2d4>)
 80051ee:	f7ff ff39 	bl	8005064 <__assert_func>
 80051f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051f6:	6005      	str	r5, [r0, #0]
 80051f8:	60c5      	str	r5, [r0, #12]
 80051fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051fc:	6819      	ldr	r1, [r3, #0]
 80051fe:	b151      	cbz	r1, 8005216 <_dtoa_r+0x5e>
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	604a      	str	r2, [r1, #4]
 8005204:	2301      	movs	r3, #1
 8005206:	4093      	lsls	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
 800520a:	4620      	mov	r0, r4
 800520c:	f001 fbce 	bl	80069ac <_Bfree>
 8005210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	1e3b      	subs	r3, r7, #0
 8005218:	bfaa      	itet	ge
 800521a:	2300      	movge	r3, #0
 800521c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005220:	f8c8 3000 	strge.w	r3, [r8]
 8005224:	4b9a      	ldr	r3, [pc, #616]	; (8005490 <_dtoa_r+0x2d8>)
 8005226:	bfbc      	itt	lt
 8005228:	2201      	movlt	r2, #1
 800522a:	f8c8 2000 	strlt.w	r2, [r8]
 800522e:	ea33 030b 	bics.w	r3, r3, fp
 8005232:	d11b      	bne.n	800526c <_dtoa_r+0xb4>
 8005234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005236:	f242 730f 	movw	r3, #9999	; 0x270f
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005240:	4333      	orrs	r3, r6
 8005242:	f000 8592 	beq.w	8005d6a <_dtoa_r+0xbb2>
 8005246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005248:	b963      	cbnz	r3, 8005264 <_dtoa_r+0xac>
 800524a:	4b92      	ldr	r3, [pc, #584]	; (8005494 <_dtoa_r+0x2dc>)
 800524c:	e022      	b.n	8005294 <_dtoa_r+0xdc>
 800524e:	4b92      	ldr	r3, [pc, #584]	; (8005498 <_dtoa_r+0x2e0>)
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	3308      	adds	r3, #8
 8005254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	9801      	ldr	r0, [sp, #4]
 800525a:	b013      	add	sp, #76	; 0x4c
 800525c:	ecbd 8b04 	vpop	{d8-d9}
 8005260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005264:	4b8b      	ldr	r3, [pc, #556]	; (8005494 <_dtoa_r+0x2dc>)
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	3303      	adds	r3, #3
 800526a:	e7f3      	b.n	8005254 <_dtoa_r+0x9c>
 800526c:	2200      	movs	r2, #0
 800526e:	2300      	movs	r3, #0
 8005270:	4650      	mov	r0, sl
 8005272:	4659      	mov	r1, fp
 8005274:	f7fb fc50 	bl	8000b18 <__aeabi_dcmpeq>
 8005278:	ec4b ab19 	vmov	d9, sl, fp
 800527c:	4680      	mov	r8, r0
 800527e:	b158      	cbz	r0, 8005298 <_dtoa_r+0xe0>
 8005280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005282:	2301      	movs	r3, #1
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 856b 	beq.w	8005d64 <_dtoa_r+0xbac>
 800528e:	4883      	ldr	r0, [pc, #524]	; (800549c <_dtoa_r+0x2e4>)
 8005290:	6018      	str	r0, [r3, #0]
 8005292:	1e43      	subs	r3, r0, #1
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	e7df      	b.n	8005258 <_dtoa_r+0xa0>
 8005298:	ec4b ab10 	vmov	d0, sl, fp
 800529c:	aa10      	add	r2, sp, #64	; 0x40
 800529e:	a911      	add	r1, sp, #68	; 0x44
 80052a0:	4620      	mov	r0, r4
 80052a2:	f001 ff31 	bl	8007108 <__d2b>
 80052a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80052aa:	ee08 0a10 	vmov	s16, r0
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f000 8084 	beq.w	80053bc <_dtoa_r+0x204>
 80052b4:	ee19 3a90 	vmov	r3, s19
 80052b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80052c0:	4656      	mov	r6, sl
 80052c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80052c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80052ce:	4b74      	ldr	r3, [pc, #464]	; (80054a0 <_dtoa_r+0x2e8>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	4630      	mov	r0, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	f7fa ffff 	bl	80002d8 <__aeabi_dsub>
 80052da:	a365      	add	r3, pc, #404	; (adr r3, 8005470 <_dtoa_r+0x2b8>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f7fb f9b2 	bl	8000648 <__aeabi_dmul>
 80052e4:	a364      	add	r3, pc, #400	; (adr r3, 8005478 <_dtoa_r+0x2c0>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fa fff7 	bl	80002dc <__adddf3>
 80052ee:	4606      	mov	r6, r0
 80052f0:	4628      	mov	r0, r5
 80052f2:	460f      	mov	r7, r1
 80052f4:	f7fb f93e 	bl	8000574 <__aeabi_i2d>
 80052f8:	a361      	add	r3, pc, #388	; (adr r3, 8005480 <_dtoa_r+0x2c8>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f9a3 	bl	8000648 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4630      	mov	r0, r6
 8005308:	4639      	mov	r1, r7
 800530a:	f7fa ffe7 	bl	80002dc <__adddf3>
 800530e:	4606      	mov	r6, r0
 8005310:	460f      	mov	r7, r1
 8005312:	f7fb fc49 	bl	8000ba8 <__aeabi_d2iz>
 8005316:	2200      	movs	r2, #0
 8005318:	9000      	str	r0, [sp, #0]
 800531a:	2300      	movs	r3, #0
 800531c:	4630      	mov	r0, r6
 800531e:	4639      	mov	r1, r7
 8005320:	f7fb fc04 	bl	8000b2c <__aeabi_dcmplt>
 8005324:	b150      	cbz	r0, 800533c <_dtoa_r+0x184>
 8005326:	9800      	ldr	r0, [sp, #0]
 8005328:	f7fb f924 	bl	8000574 <__aeabi_i2d>
 800532c:	4632      	mov	r2, r6
 800532e:	463b      	mov	r3, r7
 8005330:	f7fb fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 8005334:	b910      	cbnz	r0, 800533c <_dtoa_r+0x184>
 8005336:	9b00      	ldr	r3, [sp, #0]
 8005338:	3b01      	subs	r3, #1
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	9b00      	ldr	r3, [sp, #0]
 800533e:	2b16      	cmp	r3, #22
 8005340:	d85a      	bhi.n	80053f8 <_dtoa_r+0x240>
 8005342:	9a00      	ldr	r2, [sp, #0]
 8005344:	4b57      	ldr	r3, [pc, #348]	; (80054a4 <_dtoa_r+0x2ec>)
 8005346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	ec51 0b19 	vmov	r0, r1, d9
 8005352:	f7fb fbeb 	bl	8000b2c <__aeabi_dcmplt>
 8005356:	2800      	cmp	r0, #0
 8005358:	d050      	beq.n	80053fc <_dtoa_r+0x244>
 800535a:	9b00      	ldr	r3, [sp, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2300      	movs	r3, #0
 8005362:	930b      	str	r3, [sp, #44]	; 0x2c
 8005364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005366:	1b5d      	subs	r5, r3, r5
 8005368:	1e6b      	subs	r3, r5, #1
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	bf45      	ittet	mi
 800536e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005372:	9304      	strmi	r3, [sp, #16]
 8005374:	2300      	movpl	r3, #0
 8005376:	2300      	movmi	r3, #0
 8005378:	bf4c      	ite	mi
 800537a:	9305      	strmi	r3, [sp, #20]
 800537c:	9304      	strpl	r3, [sp, #16]
 800537e:	9b00      	ldr	r3, [sp, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	db3d      	blt.n	8005400 <_dtoa_r+0x248>
 8005384:	9b05      	ldr	r3, [sp, #20]
 8005386:	9a00      	ldr	r2, [sp, #0]
 8005388:	920a      	str	r2, [sp, #40]	; 0x28
 800538a:	4413      	add	r3, r2
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	2300      	movs	r3, #0
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	9b06      	ldr	r3, [sp, #24]
 8005394:	2b09      	cmp	r3, #9
 8005396:	f200 8089 	bhi.w	80054ac <_dtoa_r+0x2f4>
 800539a:	2b05      	cmp	r3, #5
 800539c:	bfc4      	itt	gt
 800539e:	3b04      	subgt	r3, #4
 80053a0:	9306      	strgt	r3, [sp, #24]
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	f1a3 0302 	sub.w	r3, r3, #2
 80053a8:	bfcc      	ite	gt
 80053aa:	2500      	movgt	r5, #0
 80053ac:	2501      	movle	r5, #1
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	f200 8087 	bhi.w	80054c2 <_dtoa_r+0x30a>
 80053b4:	e8df f003 	tbb	[pc, r3]
 80053b8:	59383a2d 	.word	0x59383a2d
 80053bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80053c0:	441d      	add	r5, r3
 80053c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	bfc1      	itttt	gt
 80053ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80053ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80053d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80053d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80053da:	bfda      	itte	le
 80053dc:	f1c3 0320 	rsble	r3, r3, #32
 80053e0:	fa06 f003 	lslle.w	r0, r6, r3
 80053e4:	4318      	orrgt	r0, r3
 80053e6:	f7fb f8b5 	bl	8000554 <__aeabi_ui2d>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4606      	mov	r6, r0
 80053ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053f2:	3d01      	subs	r5, #1
 80053f4:	930e      	str	r3, [sp, #56]	; 0x38
 80053f6:	e76a      	b.n	80052ce <_dtoa_r+0x116>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e7b2      	b.n	8005362 <_dtoa_r+0x1aa>
 80053fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80053fe:	e7b1      	b.n	8005364 <_dtoa_r+0x1ac>
 8005400:	9b04      	ldr	r3, [sp, #16]
 8005402:	9a00      	ldr	r2, [sp, #0]
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	4253      	negs	r3, r2
 800540a:	9307      	str	r3, [sp, #28]
 800540c:	2300      	movs	r3, #0
 800540e:	930a      	str	r3, [sp, #40]	; 0x28
 8005410:	e7bf      	b.n	8005392 <_dtoa_r+0x1da>
 8005412:	2300      	movs	r3, #0
 8005414:	9308      	str	r3, [sp, #32]
 8005416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	dc55      	bgt.n	80054c8 <_dtoa_r+0x310>
 800541c:	2301      	movs	r3, #1
 800541e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005422:	461a      	mov	r2, r3
 8005424:	9209      	str	r2, [sp, #36]	; 0x24
 8005426:	e00c      	b.n	8005442 <_dtoa_r+0x28a>
 8005428:	2301      	movs	r3, #1
 800542a:	e7f3      	b.n	8005414 <_dtoa_r+0x25c>
 800542c:	2300      	movs	r3, #0
 800542e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005430:	9308      	str	r3, [sp, #32]
 8005432:	9b00      	ldr	r3, [sp, #0]
 8005434:	4413      	add	r3, r2
 8005436:	9302      	str	r3, [sp, #8]
 8005438:	3301      	adds	r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	9303      	str	r3, [sp, #12]
 800543e:	bfb8      	it	lt
 8005440:	2301      	movlt	r3, #1
 8005442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005444:	2200      	movs	r2, #0
 8005446:	6042      	str	r2, [r0, #4]
 8005448:	2204      	movs	r2, #4
 800544a:	f102 0614 	add.w	r6, r2, #20
 800544e:	429e      	cmp	r6, r3
 8005450:	6841      	ldr	r1, [r0, #4]
 8005452:	d93d      	bls.n	80054d0 <_dtoa_r+0x318>
 8005454:	4620      	mov	r0, r4
 8005456:	f001 fa69 	bl	800692c <_Balloc>
 800545a:	9001      	str	r0, [sp, #4]
 800545c:	2800      	cmp	r0, #0
 800545e:	d13b      	bne.n	80054d8 <_dtoa_r+0x320>
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <_dtoa_r+0x2f0>)
 8005462:	4602      	mov	r2, r0
 8005464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005468:	e6c0      	b.n	80051ec <_dtoa_r+0x34>
 800546a:	2301      	movs	r3, #1
 800546c:	e7df      	b.n	800542e <_dtoa_r+0x276>
 800546e:	bf00      	nop
 8005470:	636f4361 	.word	0x636f4361
 8005474:	3fd287a7 	.word	0x3fd287a7
 8005478:	8b60c8b3 	.word	0x8b60c8b3
 800547c:	3fc68a28 	.word	0x3fc68a28
 8005480:	509f79fb 	.word	0x509f79fb
 8005484:	3fd34413 	.word	0x3fd34413
 8005488:	08014438 	.word	0x08014438
 800548c:	08014517 	.word	0x08014517
 8005490:	7ff00000 	.word	0x7ff00000
 8005494:	08014513 	.word	0x08014513
 8005498:	0801450a 	.word	0x0801450a
 800549c:	0800a458 	.word	0x0800a458
 80054a0:	3ff80000 	.word	0x3ff80000
 80054a4:	08014748 	.word	0x08014748
 80054a8:	08014594 	.word	0x08014594
 80054ac:	2501      	movs	r5, #1
 80054ae:	2300      	movs	r3, #0
 80054b0:	9306      	str	r3, [sp, #24]
 80054b2:	9508      	str	r5, [sp, #32]
 80054b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	2312      	movs	r3, #18
 80054c0:	e7b0      	b.n	8005424 <_dtoa_r+0x26c>
 80054c2:	2301      	movs	r3, #1
 80054c4:	9308      	str	r3, [sp, #32]
 80054c6:	e7f5      	b.n	80054b4 <_dtoa_r+0x2fc>
 80054c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054ce:	e7b8      	b.n	8005442 <_dtoa_r+0x28a>
 80054d0:	3101      	adds	r1, #1
 80054d2:	6041      	str	r1, [r0, #4]
 80054d4:	0052      	lsls	r2, r2, #1
 80054d6:	e7b8      	b.n	800544a <_dtoa_r+0x292>
 80054d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054da:	9a01      	ldr	r2, [sp, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	2b0e      	cmp	r3, #14
 80054e2:	f200 809d 	bhi.w	8005620 <_dtoa_r+0x468>
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	f000 809a 	beq.w	8005620 <_dtoa_r+0x468>
 80054ec:	9b00      	ldr	r3, [sp, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dd32      	ble.n	8005558 <_dtoa_r+0x3a0>
 80054f2:	4ab7      	ldr	r2, [pc, #732]	; (80057d0 <_dtoa_r+0x618>)
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005500:	9b00      	ldr	r3, [sp, #0]
 8005502:	05d8      	lsls	r0, r3, #23
 8005504:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005508:	d516      	bpl.n	8005538 <_dtoa_r+0x380>
 800550a:	4bb2      	ldr	r3, [pc, #712]	; (80057d4 <_dtoa_r+0x61c>)
 800550c:	ec51 0b19 	vmov	r0, r1, d9
 8005510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005514:	f7fb f9c2 	bl	800089c <__aeabi_ddiv>
 8005518:	f007 070f 	and.w	r7, r7, #15
 800551c:	4682      	mov	sl, r0
 800551e:	468b      	mov	fp, r1
 8005520:	2503      	movs	r5, #3
 8005522:	4eac      	ldr	r6, [pc, #688]	; (80057d4 <_dtoa_r+0x61c>)
 8005524:	b957      	cbnz	r7, 800553c <_dtoa_r+0x384>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	4650      	mov	r0, sl
 800552c:	4659      	mov	r1, fp
 800552e:	f7fb f9b5 	bl	800089c <__aeabi_ddiv>
 8005532:	4682      	mov	sl, r0
 8005534:	468b      	mov	fp, r1
 8005536:	e028      	b.n	800558a <_dtoa_r+0x3d2>
 8005538:	2502      	movs	r5, #2
 800553a:	e7f2      	b.n	8005522 <_dtoa_r+0x36a>
 800553c:	07f9      	lsls	r1, r7, #31
 800553e:	d508      	bpl.n	8005552 <_dtoa_r+0x39a>
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005548:	f7fb f87e 	bl	8000648 <__aeabi_dmul>
 800554c:	3501      	adds	r5, #1
 800554e:	4680      	mov	r8, r0
 8005550:	4689      	mov	r9, r1
 8005552:	107f      	asrs	r7, r7, #1
 8005554:	3608      	adds	r6, #8
 8005556:	e7e5      	b.n	8005524 <_dtoa_r+0x36c>
 8005558:	f000 809b 	beq.w	8005692 <_dtoa_r+0x4da>
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	4f9d      	ldr	r7, [pc, #628]	; (80057d4 <_dtoa_r+0x61c>)
 8005560:	425e      	negs	r6, r3
 8005562:	4b9b      	ldr	r3, [pc, #620]	; (80057d0 <_dtoa_r+0x618>)
 8005564:	f006 020f 	and.w	r2, r6, #15
 8005568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	ec51 0b19 	vmov	r0, r1, d9
 8005574:	f7fb f868 	bl	8000648 <__aeabi_dmul>
 8005578:	1136      	asrs	r6, r6, #4
 800557a:	4682      	mov	sl, r0
 800557c:	468b      	mov	fp, r1
 800557e:	2300      	movs	r3, #0
 8005580:	2502      	movs	r5, #2
 8005582:	2e00      	cmp	r6, #0
 8005584:	d17a      	bne.n	800567c <_dtoa_r+0x4c4>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d3      	bne.n	8005532 <_dtoa_r+0x37a>
 800558a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8082 	beq.w	8005696 <_dtoa_r+0x4de>
 8005592:	4b91      	ldr	r3, [pc, #580]	; (80057d8 <_dtoa_r+0x620>)
 8005594:	2200      	movs	r2, #0
 8005596:	4650      	mov	r0, sl
 8005598:	4659      	mov	r1, fp
 800559a:	f7fb fac7 	bl	8000b2c <__aeabi_dcmplt>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d079      	beq.n	8005696 <_dtoa_r+0x4de>
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d076      	beq.n	8005696 <_dtoa_r+0x4de>
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd36      	ble.n	800561c <_dtoa_r+0x464>
 80055ae:	9b00      	ldr	r3, [sp, #0]
 80055b0:	4650      	mov	r0, sl
 80055b2:	4659      	mov	r1, fp
 80055b4:	1e5f      	subs	r7, r3, #1
 80055b6:	2200      	movs	r2, #0
 80055b8:	4b88      	ldr	r3, [pc, #544]	; (80057dc <_dtoa_r+0x624>)
 80055ba:	f7fb f845 	bl	8000648 <__aeabi_dmul>
 80055be:	9e02      	ldr	r6, [sp, #8]
 80055c0:	4682      	mov	sl, r0
 80055c2:	468b      	mov	fp, r1
 80055c4:	3501      	adds	r5, #1
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7fa ffd4 	bl	8000574 <__aeabi_i2d>
 80055cc:	4652      	mov	r2, sl
 80055ce:	465b      	mov	r3, fp
 80055d0:	f7fb f83a 	bl	8000648 <__aeabi_dmul>
 80055d4:	4b82      	ldr	r3, [pc, #520]	; (80057e0 <_dtoa_r+0x628>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	f7fa fe80 	bl	80002dc <__adddf3>
 80055dc:	46d0      	mov	r8, sl
 80055de:	46d9      	mov	r9, fp
 80055e0:	4682      	mov	sl, r0
 80055e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	d158      	bne.n	800569c <_dtoa_r+0x4e4>
 80055ea:	4b7e      	ldr	r3, [pc, #504]	; (80057e4 <_dtoa_r+0x62c>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fe71 	bl	80002d8 <__aeabi_dsub>
 80055f6:	4652      	mov	r2, sl
 80055f8:	465b      	mov	r3, fp
 80055fa:	4680      	mov	r8, r0
 80055fc:	4689      	mov	r9, r1
 80055fe:	f7fb fab3 	bl	8000b68 <__aeabi_dcmpgt>
 8005602:	2800      	cmp	r0, #0
 8005604:	f040 8295 	bne.w	8005b32 <_dtoa_r+0x97a>
 8005608:	4652      	mov	r2, sl
 800560a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fb fa8b 	bl	8000b2c <__aeabi_dcmplt>
 8005616:	2800      	cmp	r0, #0
 8005618:	f040 8289 	bne.w	8005b2e <_dtoa_r+0x976>
 800561c:	ec5b ab19 	vmov	sl, fp, d9
 8005620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005622:	2b00      	cmp	r3, #0
 8005624:	f2c0 8148 	blt.w	80058b8 <_dtoa_r+0x700>
 8005628:	9a00      	ldr	r2, [sp, #0]
 800562a:	2a0e      	cmp	r2, #14
 800562c:	f300 8144 	bgt.w	80058b8 <_dtoa_r+0x700>
 8005630:	4b67      	ldr	r3, [pc, #412]	; (80057d0 <_dtoa_r+0x618>)
 8005632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	f280 80d5 	bge.w	80057ec <_dtoa_r+0x634>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f300 80d1 	bgt.w	80057ec <_dtoa_r+0x634>
 800564a:	f040 826f 	bne.w	8005b2c <_dtoa_r+0x974>
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <_dtoa_r+0x62c>)
 8005650:	2200      	movs	r2, #0
 8005652:	4640      	mov	r0, r8
 8005654:	4649      	mov	r1, r9
 8005656:	f7fa fff7 	bl	8000648 <__aeabi_dmul>
 800565a:	4652      	mov	r2, sl
 800565c:	465b      	mov	r3, fp
 800565e:	f7fb fa79 	bl	8000b54 <__aeabi_dcmpge>
 8005662:	9e03      	ldr	r6, [sp, #12]
 8005664:	4637      	mov	r7, r6
 8005666:	2800      	cmp	r0, #0
 8005668:	f040 8245 	bne.w	8005af6 <_dtoa_r+0x93e>
 800566c:	9d01      	ldr	r5, [sp, #4]
 800566e:	2331      	movs	r3, #49	; 0x31
 8005670:	f805 3b01 	strb.w	r3, [r5], #1
 8005674:	9b00      	ldr	r3, [sp, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	e240      	b.n	8005afe <_dtoa_r+0x946>
 800567c:	07f2      	lsls	r2, r6, #31
 800567e:	d505      	bpl.n	800568c <_dtoa_r+0x4d4>
 8005680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005684:	f7fa ffe0 	bl	8000648 <__aeabi_dmul>
 8005688:	3501      	adds	r5, #1
 800568a:	2301      	movs	r3, #1
 800568c:	1076      	asrs	r6, r6, #1
 800568e:	3708      	adds	r7, #8
 8005690:	e777      	b.n	8005582 <_dtoa_r+0x3ca>
 8005692:	2502      	movs	r5, #2
 8005694:	e779      	b.n	800558a <_dtoa_r+0x3d2>
 8005696:	9f00      	ldr	r7, [sp, #0]
 8005698:	9e03      	ldr	r6, [sp, #12]
 800569a:	e794      	b.n	80055c6 <_dtoa_r+0x40e>
 800569c:	9901      	ldr	r1, [sp, #4]
 800569e:	4b4c      	ldr	r3, [pc, #304]	; (80057d0 <_dtoa_r+0x618>)
 80056a0:	4431      	add	r1, r6
 80056a2:	910d      	str	r1, [sp, #52]	; 0x34
 80056a4:	9908      	ldr	r1, [sp, #32]
 80056a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056ae:	2900      	cmp	r1, #0
 80056b0:	d043      	beq.n	800573a <_dtoa_r+0x582>
 80056b2:	494d      	ldr	r1, [pc, #308]	; (80057e8 <_dtoa_r+0x630>)
 80056b4:	2000      	movs	r0, #0
 80056b6:	f7fb f8f1 	bl	800089c <__aeabi_ddiv>
 80056ba:	4652      	mov	r2, sl
 80056bc:	465b      	mov	r3, fp
 80056be:	f7fa fe0b 	bl	80002d8 <__aeabi_dsub>
 80056c2:	9d01      	ldr	r5, [sp, #4]
 80056c4:	4682      	mov	sl, r0
 80056c6:	468b      	mov	fp, r1
 80056c8:	4649      	mov	r1, r9
 80056ca:	4640      	mov	r0, r8
 80056cc:	f7fb fa6c 	bl	8000ba8 <__aeabi_d2iz>
 80056d0:	4606      	mov	r6, r0
 80056d2:	f7fa ff4f 	bl	8000574 <__aeabi_i2d>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fa fdfb 	bl	80002d8 <__aeabi_dsub>
 80056e2:	3630      	adds	r6, #48	; 0x30
 80056e4:	f805 6b01 	strb.w	r6, [r5], #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	465b      	mov	r3, fp
 80056ec:	4680      	mov	r8, r0
 80056ee:	4689      	mov	r9, r1
 80056f0:	f7fb fa1c 	bl	8000b2c <__aeabi_dcmplt>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d163      	bne.n	80057c0 <_dtoa_r+0x608>
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	4936      	ldr	r1, [pc, #216]	; (80057d8 <_dtoa_r+0x620>)
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fa fdea 	bl	80002d8 <__aeabi_dsub>
 8005704:	4652      	mov	r2, sl
 8005706:	465b      	mov	r3, fp
 8005708:	f7fb fa10 	bl	8000b2c <__aeabi_dcmplt>
 800570c:	2800      	cmp	r0, #0
 800570e:	f040 80b5 	bne.w	800587c <_dtoa_r+0x6c4>
 8005712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005714:	429d      	cmp	r5, r3
 8005716:	d081      	beq.n	800561c <_dtoa_r+0x464>
 8005718:	4b30      	ldr	r3, [pc, #192]	; (80057dc <_dtoa_r+0x624>)
 800571a:	2200      	movs	r2, #0
 800571c:	4650      	mov	r0, sl
 800571e:	4659      	mov	r1, fp
 8005720:	f7fa ff92 	bl	8000648 <__aeabi_dmul>
 8005724:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <_dtoa_r+0x624>)
 8005726:	4682      	mov	sl, r0
 8005728:	468b      	mov	fp, r1
 800572a:	4640      	mov	r0, r8
 800572c:	4649      	mov	r1, r9
 800572e:	2200      	movs	r2, #0
 8005730:	f7fa ff8a 	bl	8000648 <__aeabi_dmul>
 8005734:	4680      	mov	r8, r0
 8005736:	4689      	mov	r9, r1
 8005738:	e7c6      	b.n	80056c8 <_dtoa_r+0x510>
 800573a:	4650      	mov	r0, sl
 800573c:	4659      	mov	r1, fp
 800573e:	f7fa ff83 	bl	8000648 <__aeabi_dmul>
 8005742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005744:	9d01      	ldr	r5, [sp, #4]
 8005746:	930f      	str	r3, [sp, #60]	; 0x3c
 8005748:	4682      	mov	sl, r0
 800574a:	468b      	mov	fp, r1
 800574c:	4649      	mov	r1, r9
 800574e:	4640      	mov	r0, r8
 8005750:	f7fb fa2a 	bl	8000ba8 <__aeabi_d2iz>
 8005754:	4606      	mov	r6, r0
 8005756:	f7fa ff0d 	bl	8000574 <__aeabi_i2d>
 800575a:	3630      	adds	r6, #48	; 0x30
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	f7fa fdb8 	bl	80002d8 <__aeabi_dsub>
 8005768:	f805 6b01 	strb.w	r6, [r5], #1
 800576c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800576e:	429d      	cmp	r5, r3
 8005770:	4680      	mov	r8, r0
 8005772:	4689      	mov	r9, r1
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	d124      	bne.n	80057c4 <_dtoa_r+0x60c>
 800577a:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <_dtoa_r+0x630>)
 800577c:	4650      	mov	r0, sl
 800577e:	4659      	mov	r1, fp
 8005780:	f7fa fdac 	bl	80002dc <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	f7fb f9ec 	bl	8000b68 <__aeabi_dcmpgt>
 8005790:	2800      	cmp	r0, #0
 8005792:	d173      	bne.n	800587c <_dtoa_r+0x6c4>
 8005794:	4652      	mov	r2, sl
 8005796:	465b      	mov	r3, fp
 8005798:	4913      	ldr	r1, [pc, #76]	; (80057e8 <_dtoa_r+0x630>)
 800579a:	2000      	movs	r0, #0
 800579c:	f7fa fd9c 	bl	80002d8 <__aeabi_dsub>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f7fb f9c0 	bl	8000b2c <__aeabi_dcmplt>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f43f af35 	beq.w	800561c <_dtoa_r+0x464>
 80057b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80057b4:	1e6b      	subs	r3, r5, #1
 80057b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d0f8      	beq.n	80057b2 <_dtoa_r+0x5fa>
 80057c0:	9700      	str	r7, [sp, #0]
 80057c2:	e049      	b.n	8005858 <_dtoa_r+0x6a0>
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <_dtoa_r+0x624>)
 80057c6:	f7fa ff3f 	bl	8000648 <__aeabi_dmul>
 80057ca:	4680      	mov	r8, r0
 80057cc:	4689      	mov	r9, r1
 80057ce:	e7bd      	b.n	800574c <_dtoa_r+0x594>
 80057d0:	08014748 	.word	0x08014748
 80057d4:	08014720 	.word	0x08014720
 80057d8:	3ff00000 	.word	0x3ff00000
 80057dc:	40240000 	.word	0x40240000
 80057e0:	401c0000 	.word	0x401c0000
 80057e4:	40140000 	.word	0x40140000
 80057e8:	3fe00000 	.word	0x3fe00000
 80057ec:	9d01      	ldr	r5, [sp, #4]
 80057ee:	4656      	mov	r6, sl
 80057f0:	465f      	mov	r7, fp
 80057f2:	4642      	mov	r2, r8
 80057f4:	464b      	mov	r3, r9
 80057f6:	4630      	mov	r0, r6
 80057f8:	4639      	mov	r1, r7
 80057fa:	f7fb f84f 	bl	800089c <__aeabi_ddiv>
 80057fe:	f7fb f9d3 	bl	8000ba8 <__aeabi_d2iz>
 8005802:	4682      	mov	sl, r0
 8005804:	f7fa feb6 	bl	8000574 <__aeabi_i2d>
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	f7fa ff1c 	bl	8000648 <__aeabi_dmul>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4630      	mov	r0, r6
 8005816:	4639      	mov	r1, r7
 8005818:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800581c:	f7fa fd5c 	bl	80002d8 <__aeabi_dsub>
 8005820:	f805 6b01 	strb.w	r6, [r5], #1
 8005824:	9e01      	ldr	r6, [sp, #4]
 8005826:	9f03      	ldr	r7, [sp, #12]
 8005828:	1bae      	subs	r6, r5, r6
 800582a:	42b7      	cmp	r7, r6
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	d135      	bne.n	800589e <_dtoa_r+0x6e6>
 8005832:	f7fa fd53 	bl	80002dc <__adddf3>
 8005836:	4642      	mov	r2, r8
 8005838:	464b      	mov	r3, r9
 800583a:	4606      	mov	r6, r0
 800583c:	460f      	mov	r7, r1
 800583e:	f7fb f993 	bl	8000b68 <__aeabi_dcmpgt>
 8005842:	b9d0      	cbnz	r0, 800587a <_dtoa_r+0x6c2>
 8005844:	4642      	mov	r2, r8
 8005846:	464b      	mov	r3, r9
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	f7fb f964 	bl	8000b18 <__aeabi_dcmpeq>
 8005850:	b110      	cbz	r0, 8005858 <_dtoa_r+0x6a0>
 8005852:	f01a 0f01 	tst.w	sl, #1
 8005856:	d110      	bne.n	800587a <_dtoa_r+0x6c2>
 8005858:	4620      	mov	r0, r4
 800585a:	ee18 1a10 	vmov	r1, s16
 800585e:	f001 f8a5 	bl	80069ac <_Bfree>
 8005862:	2300      	movs	r3, #0
 8005864:	9800      	ldr	r0, [sp, #0]
 8005866:	702b      	strb	r3, [r5, #0]
 8005868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800586a:	3001      	adds	r0, #1
 800586c:	6018      	str	r0, [r3, #0]
 800586e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005870:	2b00      	cmp	r3, #0
 8005872:	f43f acf1 	beq.w	8005258 <_dtoa_r+0xa0>
 8005876:	601d      	str	r5, [r3, #0]
 8005878:	e4ee      	b.n	8005258 <_dtoa_r+0xa0>
 800587a:	9f00      	ldr	r7, [sp, #0]
 800587c:	462b      	mov	r3, r5
 800587e:	461d      	mov	r5, r3
 8005880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005884:	2a39      	cmp	r2, #57	; 0x39
 8005886:	d106      	bne.n	8005896 <_dtoa_r+0x6de>
 8005888:	9a01      	ldr	r2, [sp, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d1f7      	bne.n	800587e <_dtoa_r+0x6c6>
 800588e:	9901      	ldr	r1, [sp, #4]
 8005890:	2230      	movs	r2, #48	; 0x30
 8005892:	3701      	adds	r7, #1
 8005894:	700a      	strb	r2, [r1, #0]
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	3201      	adds	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e790      	b.n	80057c0 <_dtoa_r+0x608>
 800589e:	4ba6      	ldr	r3, [pc, #664]	; (8005b38 <_dtoa_r+0x980>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	f7fa fed1 	bl	8000648 <__aeabi_dmul>
 80058a6:	2200      	movs	r2, #0
 80058a8:	2300      	movs	r3, #0
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	f7fb f933 	bl	8000b18 <__aeabi_dcmpeq>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d09d      	beq.n	80057f2 <_dtoa_r+0x63a>
 80058b6:	e7cf      	b.n	8005858 <_dtoa_r+0x6a0>
 80058b8:	9a08      	ldr	r2, [sp, #32]
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	f000 80d7 	beq.w	8005a6e <_dtoa_r+0x8b6>
 80058c0:	9a06      	ldr	r2, [sp, #24]
 80058c2:	2a01      	cmp	r2, #1
 80058c4:	f300 80ba 	bgt.w	8005a3c <_dtoa_r+0x884>
 80058c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	f000 80b2 	beq.w	8005a34 <_dtoa_r+0x87c>
 80058d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058d4:	9e07      	ldr	r6, [sp, #28]
 80058d6:	9d04      	ldr	r5, [sp, #16]
 80058d8:	9a04      	ldr	r2, [sp, #16]
 80058da:	441a      	add	r2, r3
 80058dc:	9204      	str	r2, [sp, #16]
 80058de:	9a05      	ldr	r2, [sp, #20]
 80058e0:	2101      	movs	r1, #1
 80058e2:	441a      	add	r2, r3
 80058e4:	4620      	mov	r0, r4
 80058e6:	9205      	str	r2, [sp, #20]
 80058e8:	f001 f962 	bl	8006bb0 <__i2b>
 80058ec:	4607      	mov	r7, r0
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	dd0c      	ble.n	800590c <_dtoa_r+0x754>
 80058f2:	9b05      	ldr	r3, [sp, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dd09      	ble.n	800590c <_dtoa_r+0x754>
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	9a04      	ldr	r2, [sp, #16]
 80058fc:	bfa8      	it	ge
 80058fe:	462b      	movge	r3, r5
 8005900:	1ad2      	subs	r2, r2, r3
 8005902:	9204      	str	r2, [sp, #16]
 8005904:	9a05      	ldr	r2, [sp, #20]
 8005906:	1aed      	subs	r5, r5, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	9b07      	ldr	r3, [sp, #28]
 800590e:	b31b      	cbz	r3, 8005958 <_dtoa_r+0x7a0>
 8005910:	9b08      	ldr	r3, [sp, #32]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80af 	beq.w	8005a76 <_dtoa_r+0x8be>
 8005918:	2e00      	cmp	r6, #0
 800591a:	dd13      	ble.n	8005944 <_dtoa_r+0x78c>
 800591c:	4639      	mov	r1, r7
 800591e:	4632      	mov	r2, r6
 8005920:	4620      	mov	r0, r4
 8005922:	f001 fa05 	bl	8006d30 <__pow5mult>
 8005926:	ee18 2a10 	vmov	r2, s16
 800592a:	4601      	mov	r1, r0
 800592c:	4607      	mov	r7, r0
 800592e:	4620      	mov	r0, r4
 8005930:	f001 f954 	bl	8006bdc <__multiply>
 8005934:	ee18 1a10 	vmov	r1, s16
 8005938:	4680      	mov	r8, r0
 800593a:	4620      	mov	r0, r4
 800593c:	f001 f836 	bl	80069ac <_Bfree>
 8005940:	ee08 8a10 	vmov	s16, r8
 8005944:	9b07      	ldr	r3, [sp, #28]
 8005946:	1b9a      	subs	r2, r3, r6
 8005948:	d006      	beq.n	8005958 <_dtoa_r+0x7a0>
 800594a:	ee18 1a10 	vmov	r1, s16
 800594e:	4620      	mov	r0, r4
 8005950:	f001 f9ee 	bl	8006d30 <__pow5mult>
 8005954:	ee08 0a10 	vmov	s16, r0
 8005958:	2101      	movs	r1, #1
 800595a:	4620      	mov	r0, r4
 800595c:	f001 f928 	bl	8006bb0 <__i2b>
 8005960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	4606      	mov	r6, r0
 8005966:	f340 8088 	ble.w	8005a7a <_dtoa_r+0x8c2>
 800596a:	461a      	mov	r2, r3
 800596c:	4601      	mov	r1, r0
 800596e:	4620      	mov	r0, r4
 8005970:	f001 f9de 	bl	8006d30 <__pow5mult>
 8005974:	9b06      	ldr	r3, [sp, #24]
 8005976:	2b01      	cmp	r3, #1
 8005978:	4606      	mov	r6, r0
 800597a:	f340 8081 	ble.w	8005a80 <_dtoa_r+0x8c8>
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	6933      	ldr	r3, [r6, #16]
 8005984:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005988:	6918      	ldr	r0, [r3, #16]
 800598a:	f001 f8c1 	bl	8006b10 <__hi0bits>
 800598e:	f1c0 0020 	rsb	r0, r0, #32
 8005992:	9b05      	ldr	r3, [sp, #20]
 8005994:	4418      	add	r0, r3
 8005996:	f010 001f 	ands.w	r0, r0, #31
 800599a:	f000 8092 	beq.w	8005ac2 <_dtoa_r+0x90a>
 800599e:	f1c0 0320 	rsb	r3, r0, #32
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	f340 808a 	ble.w	8005abc <_dtoa_r+0x904>
 80059a8:	f1c0 001c 	rsb	r0, r0, #28
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	4403      	add	r3, r0
 80059b0:	9304      	str	r3, [sp, #16]
 80059b2:	9b05      	ldr	r3, [sp, #20]
 80059b4:	4403      	add	r3, r0
 80059b6:	4405      	add	r5, r0
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd07      	ble.n	80059d0 <_dtoa_r+0x818>
 80059c0:	ee18 1a10 	vmov	r1, s16
 80059c4:	461a      	mov	r2, r3
 80059c6:	4620      	mov	r0, r4
 80059c8:	f001 fa0c 	bl	8006de4 <__lshift>
 80059cc:	ee08 0a10 	vmov	s16, r0
 80059d0:	9b05      	ldr	r3, [sp, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dd05      	ble.n	80059e2 <_dtoa_r+0x82a>
 80059d6:	4631      	mov	r1, r6
 80059d8:	461a      	mov	r2, r3
 80059da:	4620      	mov	r0, r4
 80059dc:	f001 fa02 	bl	8006de4 <__lshift>
 80059e0:	4606      	mov	r6, r0
 80059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d06e      	beq.n	8005ac6 <_dtoa_r+0x90e>
 80059e8:	ee18 0a10 	vmov	r0, s16
 80059ec:	4631      	mov	r1, r6
 80059ee:	f001 fa69 	bl	8006ec4 <__mcmp>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	da67      	bge.n	8005ac6 <_dtoa_r+0x90e>
 80059f6:	9b00      	ldr	r3, [sp, #0]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	ee18 1a10 	vmov	r1, s16
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	220a      	movs	r2, #10
 8005a02:	2300      	movs	r3, #0
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fff3 	bl	80069f0 <__multadd>
 8005a0a:	9b08      	ldr	r3, [sp, #32]
 8005a0c:	ee08 0a10 	vmov	s16, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 81b1 	beq.w	8005d78 <_dtoa_r+0xbc0>
 8005a16:	2300      	movs	r3, #0
 8005a18:	4639      	mov	r1, r7
 8005a1a:	220a      	movs	r2, #10
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 ffe7 	bl	80069f0 <__multadd>
 8005a22:	9b02      	ldr	r3, [sp, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	4607      	mov	r7, r0
 8005a28:	f300 808e 	bgt.w	8005b48 <_dtoa_r+0x990>
 8005a2c:	9b06      	ldr	r3, [sp, #24]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	dc51      	bgt.n	8005ad6 <_dtoa_r+0x91e>
 8005a32:	e089      	b.n	8005b48 <_dtoa_r+0x990>
 8005a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a3a:	e74b      	b.n	80058d4 <_dtoa_r+0x71c>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	1e5e      	subs	r6, r3, #1
 8005a40:	9b07      	ldr	r3, [sp, #28]
 8005a42:	42b3      	cmp	r3, r6
 8005a44:	bfbf      	itttt	lt
 8005a46:	9b07      	ldrlt	r3, [sp, #28]
 8005a48:	9607      	strlt	r6, [sp, #28]
 8005a4a:	1af2      	sublt	r2, r6, r3
 8005a4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a4e:	bfb6      	itet	lt
 8005a50:	189b      	addlt	r3, r3, r2
 8005a52:	1b9e      	subge	r6, r3, r6
 8005a54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	bfb8      	it	lt
 8005a5a:	2600      	movlt	r6, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bfb7      	itett	lt
 8005a60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005a64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005a68:	1a9d      	sublt	r5, r3, r2
 8005a6a:	2300      	movlt	r3, #0
 8005a6c:	e734      	b.n	80058d8 <_dtoa_r+0x720>
 8005a6e:	9e07      	ldr	r6, [sp, #28]
 8005a70:	9d04      	ldr	r5, [sp, #16]
 8005a72:	9f08      	ldr	r7, [sp, #32]
 8005a74:	e73b      	b.n	80058ee <_dtoa_r+0x736>
 8005a76:	9a07      	ldr	r2, [sp, #28]
 8005a78:	e767      	b.n	800594a <_dtoa_r+0x792>
 8005a7a:	9b06      	ldr	r3, [sp, #24]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	dc18      	bgt.n	8005ab2 <_dtoa_r+0x8fa>
 8005a80:	f1ba 0f00 	cmp.w	sl, #0
 8005a84:	d115      	bne.n	8005ab2 <_dtoa_r+0x8fa>
 8005a86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a8a:	b993      	cbnz	r3, 8005ab2 <_dtoa_r+0x8fa>
 8005a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a90:	0d1b      	lsrs	r3, r3, #20
 8005a92:	051b      	lsls	r3, r3, #20
 8005a94:	b183      	cbz	r3, 8005ab8 <_dtoa_r+0x900>
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	9b05      	ldr	r3, [sp, #20]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	9305      	str	r3, [sp, #20]
 8005aa2:	f04f 0801 	mov.w	r8, #1
 8005aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af6a 	bne.w	8005982 <_dtoa_r+0x7ca>
 8005aae:	2001      	movs	r0, #1
 8005ab0:	e76f      	b.n	8005992 <_dtoa_r+0x7da>
 8005ab2:	f04f 0800 	mov.w	r8, #0
 8005ab6:	e7f6      	b.n	8005aa6 <_dtoa_r+0x8ee>
 8005ab8:	4698      	mov	r8, r3
 8005aba:	e7f4      	b.n	8005aa6 <_dtoa_r+0x8ee>
 8005abc:	f43f af7d 	beq.w	80059ba <_dtoa_r+0x802>
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	301c      	adds	r0, #28
 8005ac4:	e772      	b.n	80059ac <_dtoa_r+0x7f4>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	dc37      	bgt.n	8005b3c <_dtoa_r+0x984>
 8005acc:	9b06      	ldr	r3, [sp, #24]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	dd34      	ble.n	8005b3c <_dtoa_r+0x984>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	9302      	str	r3, [sp, #8]
 8005ad6:	9b02      	ldr	r3, [sp, #8]
 8005ad8:	b96b      	cbnz	r3, 8005af6 <_dtoa_r+0x93e>
 8005ada:	4631      	mov	r1, r6
 8005adc:	2205      	movs	r2, #5
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 ff86 	bl	80069f0 <__multadd>
 8005ae4:	4601      	mov	r1, r0
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	ee18 0a10 	vmov	r0, s16
 8005aec:	f001 f9ea 	bl	8006ec4 <__mcmp>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f73f adbb 	bgt.w	800566c <_dtoa_r+0x4b4>
 8005af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af8:	9d01      	ldr	r5, [sp, #4]
 8005afa:	43db      	mvns	r3, r3
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	f04f 0800 	mov.w	r8, #0
 8005b02:	4631      	mov	r1, r6
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 ff51 	bl	80069ac <_Bfree>
 8005b0a:	2f00      	cmp	r7, #0
 8005b0c:	f43f aea4 	beq.w	8005858 <_dtoa_r+0x6a0>
 8005b10:	f1b8 0f00 	cmp.w	r8, #0
 8005b14:	d005      	beq.n	8005b22 <_dtoa_r+0x96a>
 8005b16:	45b8      	cmp	r8, r7
 8005b18:	d003      	beq.n	8005b22 <_dtoa_r+0x96a>
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 ff45 	bl	80069ac <_Bfree>
 8005b22:	4639      	mov	r1, r7
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 ff41 	bl	80069ac <_Bfree>
 8005b2a:	e695      	b.n	8005858 <_dtoa_r+0x6a0>
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	4637      	mov	r7, r6
 8005b30:	e7e1      	b.n	8005af6 <_dtoa_r+0x93e>
 8005b32:	9700      	str	r7, [sp, #0]
 8005b34:	4637      	mov	r7, r6
 8005b36:	e599      	b.n	800566c <_dtoa_r+0x4b4>
 8005b38:	40240000 	.word	0x40240000
 8005b3c:	9b08      	ldr	r3, [sp, #32]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80ca 	beq.w	8005cd8 <_dtoa_r+0xb20>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	2d00      	cmp	r5, #0
 8005b4a:	dd05      	ble.n	8005b58 <_dtoa_r+0x9a0>
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	462a      	mov	r2, r5
 8005b50:	4620      	mov	r0, r4
 8005b52:	f001 f947 	bl	8006de4 <__lshift>
 8005b56:	4607      	mov	r7, r0
 8005b58:	f1b8 0f00 	cmp.w	r8, #0
 8005b5c:	d05b      	beq.n	8005c16 <_dtoa_r+0xa5e>
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fee3 	bl	800692c <_Balloc>
 8005b66:	4605      	mov	r5, r0
 8005b68:	b928      	cbnz	r0, 8005b76 <_dtoa_r+0x9be>
 8005b6a:	4b87      	ldr	r3, [pc, #540]	; (8005d88 <_dtoa_r+0xbd0>)
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b72:	f7ff bb3b 	b.w	80051ec <_dtoa_r+0x34>
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	3202      	adds	r2, #2
 8005b7a:	0092      	lsls	r2, r2, #2
 8005b7c:	f107 010c 	add.w	r1, r7, #12
 8005b80:	300c      	adds	r0, #12
 8005b82:	f000 fec5 	bl	8006910 <memcpy>
 8005b86:	2201      	movs	r2, #1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f001 f92a 	bl	8006de4 <__lshift>
 8005b90:	9b01      	ldr	r3, [sp, #4]
 8005b92:	f103 0901 	add.w	r9, r3, #1
 8005b96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	f00a 0301 	and.w	r3, sl, #1
 8005ba2:	46b8      	mov	r8, r7
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	4631      	mov	r1, r6
 8005baa:	ee18 0a10 	vmov	r0, s16
 8005bae:	f7ff fa77 	bl	80050a0 <quorem>
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	9002      	str	r0, [sp, #8]
 8005bb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005bba:	ee18 0a10 	vmov	r0, s16
 8005bbe:	f001 f981 	bl	8006ec4 <__mcmp>
 8005bc2:	463a      	mov	r2, r7
 8005bc4:	9003      	str	r0, [sp, #12]
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f001 f997 	bl	8006efc <__mdiff>
 8005bce:	68c2      	ldr	r2, [r0, #12]
 8005bd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	bb02      	cbnz	r2, 8005c1a <_dtoa_r+0xa62>
 8005bd8:	4601      	mov	r1, r0
 8005bda:	ee18 0a10 	vmov	r0, s16
 8005bde:	f001 f971 	bl	8006ec4 <__mcmp>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4629      	mov	r1, r5
 8005be6:	4620      	mov	r0, r4
 8005be8:	9207      	str	r2, [sp, #28]
 8005bea:	f000 fedf 	bl	80069ac <_Bfree>
 8005bee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005bf2:	ea43 0102 	orr.w	r1, r3, r2
 8005bf6:	9b04      	ldr	r3, [sp, #16]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	464d      	mov	r5, r9
 8005bfc:	d10f      	bne.n	8005c1e <_dtoa_r+0xa66>
 8005bfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c02:	d02a      	beq.n	8005c5a <_dtoa_r+0xaa2>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dd02      	ble.n	8005c10 <_dtoa_r+0xa58>
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005c10:	f88b a000 	strb.w	sl, [fp]
 8005c14:	e775      	b.n	8005b02 <_dtoa_r+0x94a>
 8005c16:	4638      	mov	r0, r7
 8005c18:	e7ba      	b.n	8005b90 <_dtoa_r+0x9d8>
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	e7e2      	b.n	8005be4 <_dtoa_r+0xa2c>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	db04      	blt.n	8005c2e <_dtoa_r+0xa76>
 8005c24:	9906      	ldr	r1, [sp, #24]
 8005c26:	430b      	orrs	r3, r1
 8005c28:	9904      	ldr	r1, [sp, #16]
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	d122      	bne.n	8005c74 <_dtoa_r+0xabc>
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	ddee      	ble.n	8005c10 <_dtoa_r+0xa58>
 8005c32:	ee18 1a10 	vmov	r1, s16
 8005c36:	2201      	movs	r2, #1
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f001 f8d3 	bl	8006de4 <__lshift>
 8005c3e:	4631      	mov	r1, r6
 8005c40:	ee08 0a10 	vmov	s16, r0
 8005c44:	f001 f93e 	bl	8006ec4 <__mcmp>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	dc03      	bgt.n	8005c54 <_dtoa_r+0xa9c>
 8005c4c:	d1e0      	bne.n	8005c10 <_dtoa_r+0xa58>
 8005c4e:	f01a 0f01 	tst.w	sl, #1
 8005c52:	d0dd      	beq.n	8005c10 <_dtoa_r+0xa58>
 8005c54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c58:	d1d7      	bne.n	8005c0a <_dtoa_r+0xa52>
 8005c5a:	2339      	movs	r3, #57	; 0x39
 8005c5c:	f88b 3000 	strb.w	r3, [fp]
 8005c60:	462b      	mov	r3, r5
 8005c62:	461d      	mov	r5, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c6a:	2a39      	cmp	r2, #57	; 0x39
 8005c6c:	d071      	beq.n	8005d52 <_dtoa_r+0xb9a>
 8005c6e:	3201      	adds	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	e746      	b.n	8005b02 <_dtoa_r+0x94a>
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	dd07      	ble.n	8005c88 <_dtoa_r+0xad0>
 8005c78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c7c:	d0ed      	beq.n	8005c5a <_dtoa_r+0xaa2>
 8005c7e:	f10a 0301 	add.w	r3, sl, #1
 8005c82:	f88b 3000 	strb.w	r3, [fp]
 8005c86:	e73c      	b.n	8005b02 <_dtoa_r+0x94a>
 8005c88:	9b05      	ldr	r3, [sp, #20]
 8005c8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c8e:	4599      	cmp	r9, r3
 8005c90:	d047      	beq.n	8005d22 <_dtoa_r+0xb6a>
 8005c92:	ee18 1a10 	vmov	r1, s16
 8005c96:	2300      	movs	r3, #0
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 fea8 	bl	80069f0 <__multadd>
 8005ca0:	45b8      	cmp	r8, r7
 8005ca2:	ee08 0a10 	vmov	s16, r0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	f04f 020a 	mov.w	r2, #10
 8005cae:	4641      	mov	r1, r8
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	d106      	bne.n	8005cc2 <_dtoa_r+0xb0a>
 8005cb4:	f000 fe9c 	bl	80069f0 <__multadd>
 8005cb8:	4680      	mov	r8, r0
 8005cba:	4607      	mov	r7, r0
 8005cbc:	f109 0901 	add.w	r9, r9, #1
 8005cc0:	e772      	b.n	8005ba8 <_dtoa_r+0x9f0>
 8005cc2:	f000 fe95 	bl	80069f0 <__multadd>
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	4680      	mov	r8, r0
 8005cca:	2300      	movs	r3, #0
 8005ccc:	220a      	movs	r2, #10
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fe8e 	bl	80069f0 <__multadd>
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	e7f1      	b.n	8005cbc <_dtoa_r+0xb04>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	9302      	str	r3, [sp, #8]
 8005cdc:	9d01      	ldr	r5, [sp, #4]
 8005cde:	ee18 0a10 	vmov	r0, s16
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	f7ff f9dc 	bl	80050a0 <quorem>
 8005ce8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	f805 ab01 	strb.w	sl, [r5], #1
 8005cf2:	1aea      	subs	r2, r5, r3
 8005cf4:	9b02      	ldr	r3, [sp, #8]
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	dd09      	ble.n	8005d0e <_dtoa_r+0xb56>
 8005cfa:	ee18 1a10 	vmov	r1, s16
 8005cfe:	2300      	movs	r3, #0
 8005d00:	220a      	movs	r2, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 fe74 	bl	80069f0 <__multadd>
 8005d08:	ee08 0a10 	vmov	s16, r0
 8005d0c:	e7e7      	b.n	8005cde <_dtoa_r+0xb26>
 8005d0e:	9b02      	ldr	r3, [sp, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bfc8      	it	gt
 8005d14:	461d      	movgt	r5, r3
 8005d16:	9b01      	ldr	r3, [sp, #4]
 8005d18:	bfd8      	it	le
 8005d1a:	2501      	movle	r5, #1
 8005d1c:	441d      	add	r5, r3
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	ee18 1a10 	vmov	r1, s16
 8005d26:	2201      	movs	r2, #1
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f001 f85b 	bl	8006de4 <__lshift>
 8005d2e:	4631      	mov	r1, r6
 8005d30:	ee08 0a10 	vmov	s16, r0
 8005d34:	f001 f8c6 	bl	8006ec4 <__mcmp>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	dc91      	bgt.n	8005c60 <_dtoa_r+0xaa8>
 8005d3c:	d102      	bne.n	8005d44 <_dtoa_r+0xb8c>
 8005d3e:	f01a 0f01 	tst.w	sl, #1
 8005d42:	d18d      	bne.n	8005c60 <_dtoa_r+0xaa8>
 8005d44:	462b      	mov	r3, r5
 8005d46:	461d      	mov	r5, r3
 8005d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4c:	2a30      	cmp	r2, #48	; 0x30
 8005d4e:	d0fa      	beq.n	8005d46 <_dtoa_r+0xb8e>
 8005d50:	e6d7      	b.n	8005b02 <_dtoa_r+0x94a>
 8005d52:	9a01      	ldr	r2, [sp, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d184      	bne.n	8005c62 <_dtoa_r+0xaaa>
 8005d58:	9b00      	ldr	r3, [sp, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	2331      	movs	r3, #49	; 0x31
 8005d60:	7013      	strb	r3, [r2, #0]
 8005d62:	e6ce      	b.n	8005b02 <_dtoa_r+0x94a>
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <_dtoa_r+0xbd4>)
 8005d66:	f7ff ba95 	b.w	8005294 <_dtoa_r+0xdc>
 8005d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f aa6e 	bne.w	800524e <_dtoa_r+0x96>
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <_dtoa_r+0xbd8>)
 8005d74:	f7ff ba8e 	b.w	8005294 <_dtoa_r+0xdc>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dcae      	bgt.n	8005cdc <_dtoa_r+0xb24>
 8005d7e:	9b06      	ldr	r3, [sp, #24]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	f73f aea8 	bgt.w	8005ad6 <_dtoa_r+0x91e>
 8005d86:	e7a9      	b.n	8005cdc <_dtoa_r+0xb24>
 8005d88:	08014594 	.word	0x08014594
 8005d8c:	0800a457 	.word	0x0800a457
 8005d90:	0801450a 	.word	0x0801450a

08005d94 <__sflush_r>:
 8005d94:	898a      	ldrh	r2, [r1, #12]
 8005d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	0710      	lsls	r0, r2, #28
 8005d9e:	460c      	mov	r4, r1
 8005da0:	d458      	bmi.n	8005e54 <__sflush_r+0xc0>
 8005da2:	684b      	ldr	r3, [r1, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dc05      	bgt.n	8005db4 <__sflush_r+0x20>
 8005da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dc02      	bgt.n	8005db4 <__sflush_r+0x20>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	d0f9      	beq.n	8005dae <__sflush_r+0x1a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dc0:	682f      	ldr	r7, [r5, #0]
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	d032      	beq.n	8005e2c <__sflush_r+0x98>
 8005dc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	075a      	lsls	r2, r3, #29
 8005dcc:	d505      	bpl.n	8005dda <__sflush_r+0x46>
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	1ac0      	subs	r0, r0, r3
 8005dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dd4:	b10b      	cbz	r3, 8005dda <__sflush_r+0x46>
 8005dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dd8:	1ac0      	subs	r0, r0, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005de0:	6a21      	ldr	r1, [r4, #32]
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b0      	blx	r6
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	d106      	bne.n	8005dfa <__sflush_r+0x66>
 8005dec:	6829      	ldr	r1, [r5, #0]
 8005dee:	291d      	cmp	r1, #29
 8005df0:	d82c      	bhi.n	8005e4c <__sflush_r+0xb8>
 8005df2:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <__sflush_r+0x108>)
 8005df4:	40ca      	lsrs	r2, r1
 8005df6:	07d6      	lsls	r6, r2, #31
 8005df8:	d528      	bpl.n	8005e4c <__sflush_r+0xb8>
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	6062      	str	r2, [r4, #4]
 8005dfe:	04d9      	lsls	r1, r3, #19
 8005e00:	6922      	ldr	r2, [r4, #16]
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	d504      	bpl.n	8005e10 <__sflush_r+0x7c>
 8005e06:	1c42      	adds	r2, r0, #1
 8005e08:	d101      	bne.n	8005e0e <__sflush_r+0x7a>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	b903      	cbnz	r3, 8005e10 <__sflush_r+0x7c>
 8005e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e12:	602f      	str	r7, [r5, #0]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	d0ca      	beq.n	8005dae <__sflush_r+0x1a>
 8005e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d002      	beq.n	8005e26 <__sflush_r+0x92>
 8005e20:	4628      	mov	r0, r5
 8005e22:	f001 fa53 	bl	80072cc <_free_r>
 8005e26:	2000      	movs	r0, #0
 8005e28:	6360      	str	r0, [r4, #52]	; 0x34
 8005e2a:	e7c1      	b.n	8005db0 <__sflush_r+0x1c>
 8005e2c:	6a21      	ldr	r1, [r4, #32]
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b0      	blx	r6
 8005e34:	1c41      	adds	r1, r0, #1
 8005e36:	d1c7      	bne.n	8005dc8 <__sflush_r+0x34>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0c4      	beq.n	8005dc8 <__sflush_r+0x34>
 8005e3e:	2b1d      	cmp	r3, #29
 8005e40:	d001      	beq.n	8005e46 <__sflush_r+0xb2>
 8005e42:	2b16      	cmp	r3, #22
 8005e44:	d101      	bne.n	8005e4a <__sflush_r+0xb6>
 8005e46:	602f      	str	r7, [r5, #0]
 8005e48:	e7b1      	b.n	8005dae <__sflush_r+0x1a>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	e7ad      	b.n	8005db0 <__sflush_r+0x1c>
 8005e54:	690f      	ldr	r7, [r1, #16]
 8005e56:	2f00      	cmp	r7, #0
 8005e58:	d0a9      	beq.n	8005dae <__sflush_r+0x1a>
 8005e5a:	0793      	lsls	r3, r2, #30
 8005e5c:	680e      	ldr	r6, [r1, #0]
 8005e5e:	bf08      	it	eq
 8005e60:	694b      	ldreq	r3, [r1, #20]
 8005e62:	600f      	str	r7, [r1, #0]
 8005e64:	bf18      	it	ne
 8005e66:	2300      	movne	r3, #0
 8005e68:	eba6 0807 	sub.w	r8, r6, r7
 8005e6c:	608b      	str	r3, [r1, #8]
 8005e6e:	f1b8 0f00 	cmp.w	r8, #0
 8005e72:	dd9c      	ble.n	8005dae <__sflush_r+0x1a>
 8005e74:	6a21      	ldr	r1, [r4, #32]
 8005e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e78:	4643      	mov	r3, r8
 8005e7a:	463a      	mov	r2, r7
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b0      	blx	r6
 8005e80:	2800      	cmp	r0, #0
 8005e82:	dc06      	bgt.n	8005e92 <__sflush_r+0xfe>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	e78e      	b.n	8005db0 <__sflush_r+0x1c>
 8005e92:	4407      	add	r7, r0
 8005e94:	eba8 0800 	sub.w	r8, r8, r0
 8005e98:	e7e9      	b.n	8005e6e <__sflush_r+0xda>
 8005e9a:	bf00      	nop
 8005e9c:	20400001 	.word	0x20400001

08005ea0 <_fflush_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	b913      	cbnz	r3, 8005eb0 <_fflush_r+0x10>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	4628      	mov	r0, r5
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	b118      	cbz	r0, 8005eba <_fflush_r+0x1a>
 8005eb2:	6983      	ldr	r3, [r0, #24]
 8005eb4:	b90b      	cbnz	r3, 8005eba <_fflush_r+0x1a>
 8005eb6:	f000 f887 	bl	8005fc8 <__sinit>
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <_fflush_r+0x6c>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d11b      	bne.n	8005ef8 <_fflush_r+0x58>
 8005ec0:	686c      	ldr	r4, [r5, #4]
 8005ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0ef      	beq.n	8005eaa <_fflush_r+0xa>
 8005eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ecc:	07d0      	lsls	r0, r2, #31
 8005ece:	d404      	bmi.n	8005eda <_fflush_r+0x3a>
 8005ed0:	0599      	lsls	r1, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_fflush_r+0x3a>
 8005ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ed6:	f000 fc9a 	bl	800680e <__retarget_lock_acquire_recursive>
 8005eda:	4628      	mov	r0, r5
 8005edc:	4621      	mov	r1, r4
 8005ede:	f7ff ff59 	bl	8005d94 <__sflush_r>
 8005ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ee4:	07da      	lsls	r2, r3, #31
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	d4e0      	bmi.n	8005eac <_fflush_r+0xc>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	059b      	lsls	r3, r3, #22
 8005eee:	d4dd      	bmi.n	8005eac <_fflush_r+0xc>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ef2:	f000 fc8d 	bl	8006810 <__retarget_lock_release_recursive>
 8005ef6:	e7d9      	b.n	8005eac <_fflush_r+0xc>
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <_fflush_r+0x70>)
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d101      	bne.n	8005f02 <_fflush_r+0x62>
 8005efe:	68ac      	ldr	r4, [r5, #8]
 8005f00:	e7df      	b.n	8005ec2 <_fflush_r+0x22>
 8005f02:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <_fflush_r+0x74>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	bf08      	it	eq
 8005f08:	68ec      	ldreq	r4, [r5, #12]
 8005f0a:	e7da      	b.n	8005ec2 <_fflush_r+0x22>
 8005f0c:	080145c8 	.word	0x080145c8
 8005f10:	080145e8 	.word	0x080145e8
 8005f14:	080145a8 	.word	0x080145a8

08005f18 <std>:
 8005f18:	2300      	movs	r3, #0
 8005f1a:	b510      	push	{r4, lr}
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f26:	6083      	str	r3, [r0, #8]
 8005f28:	8181      	strh	r1, [r0, #12]
 8005f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f2c:	81c2      	strh	r2, [r0, #14]
 8005f2e:	6183      	str	r3, [r0, #24]
 8005f30:	4619      	mov	r1, r3
 8005f32:	2208      	movs	r2, #8
 8005f34:	305c      	adds	r0, #92	; 0x5c
 8005f36:	f7fd fc57 	bl	80037e8 <memset>
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <std+0x38>)
 8005f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <std+0x3c>)
 8005f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <std+0x40>)
 8005f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <std+0x44>)
 8005f48:	6224      	str	r4, [r4, #32]
 8005f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	080076e1 	.word	0x080076e1
 8005f54:	08007703 	.word	0x08007703
 8005f58:	0800773b 	.word	0x0800773b
 8005f5c:	0800775f 	.word	0x0800775f

08005f60 <_cleanup_r>:
 8005f60:	4901      	ldr	r1, [pc, #4]	; (8005f68 <_cleanup_r+0x8>)
 8005f62:	f000 b8c1 	b.w	80060e8 <_fwalk_reent>
 8005f66:	bf00      	nop
 8005f68:	08005ea1 	.word	0x08005ea1

08005f6c <__sfmoreglue>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	2268      	movs	r2, #104	; 0x68
 8005f70:	1e4d      	subs	r5, r1, #1
 8005f72:	4355      	muls	r5, r2
 8005f74:	460e      	mov	r6, r1
 8005f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f7a:	f001 f9f3 	bl	8007364 <_malloc_r>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	b140      	cbz	r0, 8005f94 <__sfmoreglue+0x28>
 8005f82:	2100      	movs	r1, #0
 8005f84:	e9c0 1600 	strd	r1, r6, [r0]
 8005f88:	300c      	adds	r0, #12
 8005f8a:	60a0      	str	r0, [r4, #8]
 8005f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f90:	f7fd fc2a 	bl	80037e8 <memset>
 8005f94:	4620      	mov	r0, r4
 8005f96:	bd70      	pop	{r4, r5, r6, pc}

08005f98 <__sfp_lock_acquire>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__sfp_lock_acquire+0x8>)
 8005f9a:	f000 bc38 	b.w	800680e <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000ce5 	.word	0x20000ce5

08005fa4 <__sfp_lock_release>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__sfp_lock_release+0x8>)
 8005fa6:	f000 bc33 	b.w	8006810 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000ce5 	.word	0x20000ce5

08005fb0 <__sinit_lock_acquire>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__sinit_lock_acquire+0x8>)
 8005fb2:	f000 bc2c 	b.w	800680e <__retarget_lock_acquire_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20000ce6 	.word	0x20000ce6

08005fbc <__sinit_lock_release>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	; (8005fc4 <__sinit_lock_release+0x8>)
 8005fbe:	f000 bc27 	b.w	8006810 <__retarget_lock_release_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	20000ce6 	.word	0x20000ce6

08005fc8 <__sinit>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	f7ff fff0 	bl	8005fb0 <__sinit_lock_acquire>
 8005fd0:	69a3      	ldr	r3, [r4, #24]
 8005fd2:	b11b      	cbz	r3, 8005fdc <__sinit+0x14>
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	f7ff bff0 	b.w	8005fbc <__sinit_lock_release>
 8005fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <__sinit+0x68>)
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <__sinit+0x6c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	bf04      	itt	eq
 8005fee:	2301      	moveq	r3, #1
 8005ff0:	61a3      	streq	r3, [r4, #24]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f820 	bl	8006038 <__sfp>
 8005ff8:	6060      	str	r0, [r4, #4]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 f81c 	bl	8006038 <__sfp>
 8006000:	60a0      	str	r0, [r4, #8]
 8006002:	4620      	mov	r0, r4
 8006004:	f000 f818 	bl	8006038 <__sfp>
 8006008:	2200      	movs	r2, #0
 800600a:	60e0      	str	r0, [r4, #12]
 800600c:	2104      	movs	r1, #4
 800600e:	6860      	ldr	r0, [r4, #4]
 8006010:	f7ff ff82 	bl	8005f18 <std>
 8006014:	68a0      	ldr	r0, [r4, #8]
 8006016:	2201      	movs	r2, #1
 8006018:	2109      	movs	r1, #9
 800601a:	f7ff ff7d 	bl	8005f18 <std>
 800601e:	68e0      	ldr	r0, [r4, #12]
 8006020:	2202      	movs	r2, #2
 8006022:	2112      	movs	r1, #18
 8006024:	f7ff ff78 	bl	8005f18 <std>
 8006028:	2301      	movs	r3, #1
 800602a:	61a3      	str	r3, [r4, #24]
 800602c:	e7d2      	b.n	8005fd4 <__sinit+0xc>
 800602e:	bf00      	nop
 8006030:	080143b0 	.word	0x080143b0
 8006034:	08005f61 	.word	0x08005f61

08006038 <__sfp>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	4607      	mov	r7, r0
 800603c:	f7ff ffac 	bl	8005f98 <__sfp_lock_acquire>
 8006040:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <__sfp+0x84>)
 8006042:	681e      	ldr	r6, [r3, #0]
 8006044:	69b3      	ldr	r3, [r6, #24]
 8006046:	b913      	cbnz	r3, 800604e <__sfp+0x16>
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff ffbd 	bl	8005fc8 <__sinit>
 800604e:	3648      	adds	r6, #72	; 0x48
 8006050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006054:	3b01      	subs	r3, #1
 8006056:	d503      	bpl.n	8006060 <__sfp+0x28>
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	b30b      	cbz	r3, 80060a0 <__sfp+0x68>
 800605c:	6836      	ldr	r6, [r6, #0]
 800605e:	e7f7      	b.n	8006050 <__sfp+0x18>
 8006060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006064:	b9d5      	cbnz	r5, 800609c <__sfp+0x64>
 8006066:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <__sfp+0x88>)
 8006068:	60e3      	str	r3, [r4, #12]
 800606a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800606e:	6665      	str	r5, [r4, #100]	; 0x64
 8006070:	f000 fbcc 	bl	800680c <__retarget_lock_init_recursive>
 8006074:	f7ff ff96 	bl	8005fa4 <__sfp_lock_release>
 8006078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800607c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006080:	6025      	str	r5, [r4, #0]
 8006082:	61a5      	str	r5, [r4, #24]
 8006084:	2208      	movs	r2, #8
 8006086:	4629      	mov	r1, r5
 8006088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800608c:	f7fd fbac 	bl	80037e8 <memset>
 8006090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006098:	4620      	mov	r0, r4
 800609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800609c:	3468      	adds	r4, #104	; 0x68
 800609e:	e7d9      	b.n	8006054 <__sfp+0x1c>
 80060a0:	2104      	movs	r1, #4
 80060a2:	4638      	mov	r0, r7
 80060a4:	f7ff ff62 	bl	8005f6c <__sfmoreglue>
 80060a8:	4604      	mov	r4, r0
 80060aa:	6030      	str	r0, [r6, #0]
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1d5      	bne.n	800605c <__sfp+0x24>
 80060b0:	f7ff ff78 	bl	8005fa4 <__sfp_lock_release>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	e7ee      	b.n	8006098 <__sfp+0x60>
 80060ba:	bf00      	nop
 80060bc:	080143b0 	.word	0x080143b0
 80060c0:	ffff0001 	.word	0xffff0001

080060c4 <fiprintf>:
 80060c4:	b40e      	push	{r1, r2, r3}
 80060c6:	b503      	push	{r0, r1, lr}
 80060c8:	4601      	mov	r1, r0
 80060ca:	ab03      	add	r3, sp, #12
 80060cc:	4805      	ldr	r0, [pc, #20]	; (80060e4 <fiprintf+0x20>)
 80060ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d2:	6800      	ldr	r0, [r0, #0]
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	f001 f9c9 	bl	800746c <_vfiprintf_r>
 80060da:	b002      	add	sp, #8
 80060dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060e0:	b003      	add	sp, #12
 80060e2:	4770      	bx	lr
 80060e4:	20000020 	.word	0x20000020

080060e8 <_fwalk_reent>:
 80060e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ec:	4606      	mov	r6, r0
 80060ee:	4688      	mov	r8, r1
 80060f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060f4:	2700      	movs	r7, #0
 80060f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060fa:	f1b9 0901 	subs.w	r9, r9, #1
 80060fe:	d505      	bpl.n	800610c <_fwalk_reent+0x24>
 8006100:	6824      	ldr	r4, [r4, #0]
 8006102:	2c00      	cmp	r4, #0
 8006104:	d1f7      	bne.n	80060f6 <_fwalk_reent+0xe>
 8006106:	4638      	mov	r0, r7
 8006108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610c:	89ab      	ldrh	r3, [r5, #12]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d907      	bls.n	8006122 <_fwalk_reent+0x3a>
 8006112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006116:	3301      	adds	r3, #1
 8006118:	d003      	beq.n	8006122 <_fwalk_reent+0x3a>
 800611a:	4629      	mov	r1, r5
 800611c:	4630      	mov	r0, r6
 800611e:	47c0      	blx	r8
 8006120:	4307      	orrs	r7, r0
 8006122:	3568      	adds	r5, #104	; 0x68
 8006124:	e7e9      	b.n	80060fa <_fwalk_reent+0x12>

08006126 <rshift>:
 8006126:	6903      	ldr	r3, [r0, #16]
 8006128:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800612c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006130:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006134:	f100 0414 	add.w	r4, r0, #20
 8006138:	dd45      	ble.n	80061c6 <rshift+0xa0>
 800613a:	f011 011f 	ands.w	r1, r1, #31
 800613e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006142:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006146:	d10c      	bne.n	8006162 <rshift+0x3c>
 8006148:	f100 0710 	add.w	r7, r0, #16
 800614c:	4629      	mov	r1, r5
 800614e:	42b1      	cmp	r1, r6
 8006150:	d334      	bcc.n	80061bc <rshift+0x96>
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	1eea      	subs	r2, r5, #3
 8006158:	4296      	cmp	r6, r2
 800615a:	bf38      	it	cc
 800615c:	2300      	movcc	r3, #0
 800615e:	4423      	add	r3, r4
 8006160:	e015      	b.n	800618e <rshift+0x68>
 8006162:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006166:	f1c1 0820 	rsb	r8, r1, #32
 800616a:	40cf      	lsrs	r7, r1
 800616c:	f105 0e04 	add.w	lr, r5, #4
 8006170:	46a1      	mov	r9, r4
 8006172:	4576      	cmp	r6, lr
 8006174:	46f4      	mov	ip, lr
 8006176:	d815      	bhi.n	80061a4 <rshift+0x7e>
 8006178:	1a9a      	subs	r2, r3, r2
 800617a:	0092      	lsls	r2, r2, #2
 800617c:	3a04      	subs	r2, #4
 800617e:	3501      	adds	r5, #1
 8006180:	42ae      	cmp	r6, r5
 8006182:	bf38      	it	cc
 8006184:	2200      	movcc	r2, #0
 8006186:	18a3      	adds	r3, r4, r2
 8006188:	50a7      	str	r7, [r4, r2]
 800618a:	b107      	cbz	r7, 800618e <rshift+0x68>
 800618c:	3304      	adds	r3, #4
 800618e:	1b1a      	subs	r2, r3, r4
 8006190:	42a3      	cmp	r3, r4
 8006192:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006196:	bf08      	it	eq
 8006198:	2300      	moveq	r3, #0
 800619a:	6102      	str	r2, [r0, #16]
 800619c:	bf08      	it	eq
 800619e:	6143      	streq	r3, [r0, #20]
 80061a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061a4:	f8dc c000 	ldr.w	ip, [ip]
 80061a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80061ac:	ea4c 0707 	orr.w	r7, ip, r7
 80061b0:	f849 7b04 	str.w	r7, [r9], #4
 80061b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80061b8:	40cf      	lsrs	r7, r1
 80061ba:	e7da      	b.n	8006172 <rshift+0x4c>
 80061bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80061c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80061c4:	e7c3      	b.n	800614e <rshift+0x28>
 80061c6:	4623      	mov	r3, r4
 80061c8:	e7e1      	b.n	800618e <rshift+0x68>

080061ca <__hexdig_fun>:
 80061ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d802      	bhi.n	80061d8 <__hexdig_fun+0xe>
 80061d2:	3820      	subs	r0, #32
 80061d4:	b2c0      	uxtb	r0, r0
 80061d6:	4770      	bx	lr
 80061d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d801      	bhi.n	80061e4 <__hexdig_fun+0x1a>
 80061e0:	3847      	subs	r0, #71	; 0x47
 80061e2:	e7f7      	b.n	80061d4 <__hexdig_fun+0xa>
 80061e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80061e8:	2b05      	cmp	r3, #5
 80061ea:	d801      	bhi.n	80061f0 <__hexdig_fun+0x26>
 80061ec:	3827      	subs	r0, #39	; 0x27
 80061ee:	e7f1      	b.n	80061d4 <__hexdig_fun+0xa>
 80061f0:	2000      	movs	r0, #0
 80061f2:	4770      	bx	lr

080061f4 <__gethex>:
 80061f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f8:	ed2d 8b02 	vpush	{d8}
 80061fc:	b089      	sub	sp, #36	; 0x24
 80061fe:	ee08 0a10 	vmov	s16, r0
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	4bb4      	ldr	r3, [pc, #720]	; (80064d8 <__gethex+0x2e4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	4618      	mov	r0, r3
 800620c:	468b      	mov	fp, r1
 800620e:	4690      	mov	r8, r2
 8006210:	f7fa f800 	bl	8000214 <strlen>
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	f8db 2000 	ldr.w	r2, [fp]
 800621a:	4403      	add	r3, r0
 800621c:	4682      	mov	sl, r0
 800621e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	1c93      	adds	r3, r2, #2
 8006226:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800622a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800622e:	32fe      	adds	r2, #254	; 0xfe
 8006230:	18d1      	adds	r1, r2, r3
 8006232:	461f      	mov	r7, r3
 8006234:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006238:	9100      	str	r1, [sp, #0]
 800623a:	2830      	cmp	r0, #48	; 0x30
 800623c:	d0f8      	beq.n	8006230 <__gethex+0x3c>
 800623e:	f7ff ffc4 	bl	80061ca <__hexdig_fun>
 8006242:	4604      	mov	r4, r0
 8006244:	2800      	cmp	r0, #0
 8006246:	d13a      	bne.n	80062be <__gethex+0xca>
 8006248:	9901      	ldr	r1, [sp, #4]
 800624a:	4652      	mov	r2, sl
 800624c:	4638      	mov	r0, r7
 800624e:	f001 fa8a 	bl	8007766 <strncmp>
 8006252:	4605      	mov	r5, r0
 8006254:	2800      	cmp	r0, #0
 8006256:	d168      	bne.n	800632a <__gethex+0x136>
 8006258:	f817 000a 	ldrb.w	r0, [r7, sl]
 800625c:	eb07 060a 	add.w	r6, r7, sl
 8006260:	f7ff ffb3 	bl	80061ca <__hexdig_fun>
 8006264:	2800      	cmp	r0, #0
 8006266:	d062      	beq.n	800632e <__gethex+0x13a>
 8006268:	4633      	mov	r3, r6
 800626a:	7818      	ldrb	r0, [r3, #0]
 800626c:	2830      	cmp	r0, #48	; 0x30
 800626e:	461f      	mov	r7, r3
 8006270:	f103 0301 	add.w	r3, r3, #1
 8006274:	d0f9      	beq.n	800626a <__gethex+0x76>
 8006276:	f7ff ffa8 	bl	80061ca <__hexdig_fun>
 800627a:	2301      	movs	r3, #1
 800627c:	fab0 f480 	clz	r4, r0
 8006280:	0964      	lsrs	r4, r4, #5
 8006282:	4635      	mov	r5, r6
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	463a      	mov	r2, r7
 8006288:	4616      	mov	r6, r2
 800628a:	3201      	adds	r2, #1
 800628c:	7830      	ldrb	r0, [r6, #0]
 800628e:	f7ff ff9c 	bl	80061ca <__hexdig_fun>
 8006292:	2800      	cmp	r0, #0
 8006294:	d1f8      	bne.n	8006288 <__gethex+0x94>
 8006296:	9901      	ldr	r1, [sp, #4]
 8006298:	4652      	mov	r2, sl
 800629a:	4630      	mov	r0, r6
 800629c:	f001 fa63 	bl	8007766 <strncmp>
 80062a0:	b980      	cbnz	r0, 80062c4 <__gethex+0xd0>
 80062a2:	b94d      	cbnz	r5, 80062b8 <__gethex+0xc4>
 80062a4:	eb06 050a 	add.w	r5, r6, sl
 80062a8:	462a      	mov	r2, r5
 80062aa:	4616      	mov	r6, r2
 80062ac:	3201      	adds	r2, #1
 80062ae:	7830      	ldrb	r0, [r6, #0]
 80062b0:	f7ff ff8b 	bl	80061ca <__hexdig_fun>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d1f8      	bne.n	80062aa <__gethex+0xb6>
 80062b8:	1bad      	subs	r5, r5, r6
 80062ba:	00ad      	lsls	r5, r5, #2
 80062bc:	e004      	b.n	80062c8 <__gethex+0xd4>
 80062be:	2400      	movs	r4, #0
 80062c0:	4625      	mov	r5, r4
 80062c2:	e7e0      	b.n	8006286 <__gethex+0x92>
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	d1f7      	bne.n	80062b8 <__gethex+0xc4>
 80062c8:	7833      	ldrb	r3, [r6, #0]
 80062ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062ce:	2b50      	cmp	r3, #80	; 0x50
 80062d0:	d13b      	bne.n	800634a <__gethex+0x156>
 80062d2:	7873      	ldrb	r3, [r6, #1]
 80062d4:	2b2b      	cmp	r3, #43	; 0x2b
 80062d6:	d02c      	beq.n	8006332 <__gethex+0x13e>
 80062d8:	2b2d      	cmp	r3, #45	; 0x2d
 80062da:	d02e      	beq.n	800633a <__gethex+0x146>
 80062dc:	1c71      	adds	r1, r6, #1
 80062de:	f04f 0900 	mov.w	r9, #0
 80062e2:	7808      	ldrb	r0, [r1, #0]
 80062e4:	f7ff ff71 	bl	80061ca <__hexdig_fun>
 80062e8:	1e43      	subs	r3, r0, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b18      	cmp	r3, #24
 80062ee:	d82c      	bhi.n	800634a <__gethex+0x156>
 80062f0:	f1a0 0210 	sub.w	r2, r0, #16
 80062f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80062f8:	f7ff ff67 	bl	80061ca <__hexdig_fun>
 80062fc:	1e43      	subs	r3, r0, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b18      	cmp	r3, #24
 8006302:	d91d      	bls.n	8006340 <__gethex+0x14c>
 8006304:	f1b9 0f00 	cmp.w	r9, #0
 8006308:	d000      	beq.n	800630c <__gethex+0x118>
 800630a:	4252      	negs	r2, r2
 800630c:	4415      	add	r5, r2
 800630e:	f8cb 1000 	str.w	r1, [fp]
 8006312:	b1e4      	cbz	r4, 800634e <__gethex+0x15a>
 8006314:	9b00      	ldr	r3, [sp, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	bf14      	ite	ne
 800631a:	2700      	movne	r7, #0
 800631c:	2706      	moveq	r7, #6
 800631e:	4638      	mov	r0, r7
 8006320:	b009      	add	sp, #36	; 0x24
 8006322:	ecbd 8b02 	vpop	{d8}
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	463e      	mov	r6, r7
 800632c:	4625      	mov	r5, r4
 800632e:	2401      	movs	r4, #1
 8006330:	e7ca      	b.n	80062c8 <__gethex+0xd4>
 8006332:	f04f 0900 	mov.w	r9, #0
 8006336:	1cb1      	adds	r1, r6, #2
 8006338:	e7d3      	b.n	80062e2 <__gethex+0xee>
 800633a:	f04f 0901 	mov.w	r9, #1
 800633e:	e7fa      	b.n	8006336 <__gethex+0x142>
 8006340:	230a      	movs	r3, #10
 8006342:	fb03 0202 	mla	r2, r3, r2, r0
 8006346:	3a10      	subs	r2, #16
 8006348:	e7d4      	b.n	80062f4 <__gethex+0x100>
 800634a:	4631      	mov	r1, r6
 800634c:	e7df      	b.n	800630e <__gethex+0x11a>
 800634e:	1bf3      	subs	r3, r6, r7
 8006350:	3b01      	subs	r3, #1
 8006352:	4621      	mov	r1, r4
 8006354:	2b07      	cmp	r3, #7
 8006356:	dc0b      	bgt.n	8006370 <__gethex+0x17c>
 8006358:	ee18 0a10 	vmov	r0, s16
 800635c:	f000 fae6 	bl	800692c <_Balloc>
 8006360:	4604      	mov	r4, r0
 8006362:	b940      	cbnz	r0, 8006376 <__gethex+0x182>
 8006364:	4b5d      	ldr	r3, [pc, #372]	; (80064dc <__gethex+0x2e8>)
 8006366:	4602      	mov	r2, r0
 8006368:	21de      	movs	r1, #222	; 0xde
 800636a:	485d      	ldr	r0, [pc, #372]	; (80064e0 <__gethex+0x2ec>)
 800636c:	f7fe fe7a 	bl	8005064 <__assert_func>
 8006370:	3101      	adds	r1, #1
 8006372:	105b      	asrs	r3, r3, #1
 8006374:	e7ee      	b.n	8006354 <__gethex+0x160>
 8006376:	f100 0914 	add.w	r9, r0, #20
 800637a:	f04f 0b00 	mov.w	fp, #0
 800637e:	f1ca 0301 	rsb	r3, sl, #1
 8006382:	f8cd 9008 	str.w	r9, [sp, #8]
 8006386:	f8cd b000 	str.w	fp, [sp]
 800638a:	9306      	str	r3, [sp, #24]
 800638c:	42b7      	cmp	r7, r6
 800638e:	d340      	bcc.n	8006412 <__gethex+0x21e>
 8006390:	9802      	ldr	r0, [sp, #8]
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	f840 3b04 	str.w	r3, [r0], #4
 8006398:	eba0 0009 	sub.w	r0, r0, r9
 800639c:	1080      	asrs	r0, r0, #2
 800639e:	0146      	lsls	r6, r0, #5
 80063a0:	6120      	str	r0, [r4, #16]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fbb4 	bl	8006b10 <__hi0bits>
 80063a8:	1a30      	subs	r0, r6, r0
 80063aa:	f8d8 6000 	ldr.w	r6, [r8]
 80063ae:	42b0      	cmp	r0, r6
 80063b0:	dd63      	ble.n	800647a <__gethex+0x286>
 80063b2:	1b87      	subs	r7, r0, r6
 80063b4:	4639      	mov	r1, r7
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 ff58 	bl	800726c <__any_on>
 80063bc:	4682      	mov	sl, r0
 80063be:	b1a8      	cbz	r0, 80063ec <__gethex+0x1f8>
 80063c0:	1e7b      	subs	r3, r7, #1
 80063c2:	1159      	asrs	r1, r3, #5
 80063c4:	f003 021f 	and.w	r2, r3, #31
 80063c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80063cc:	f04f 0a01 	mov.w	sl, #1
 80063d0:	fa0a f202 	lsl.w	r2, sl, r2
 80063d4:	420a      	tst	r2, r1
 80063d6:	d009      	beq.n	80063ec <__gethex+0x1f8>
 80063d8:	4553      	cmp	r3, sl
 80063da:	dd05      	ble.n	80063e8 <__gethex+0x1f4>
 80063dc:	1eb9      	subs	r1, r7, #2
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 ff44 	bl	800726c <__any_on>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d145      	bne.n	8006474 <__gethex+0x280>
 80063e8:	f04f 0a02 	mov.w	sl, #2
 80063ec:	4639      	mov	r1, r7
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff fe99 	bl	8006126 <rshift>
 80063f4:	443d      	add	r5, r7
 80063f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	da4c      	bge.n	8006498 <__gethex+0x2a4>
 80063fe:	ee18 0a10 	vmov	r0, s16
 8006402:	4621      	mov	r1, r4
 8006404:	f000 fad2 	bl	80069ac <_Bfree>
 8006408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800640a:	2300      	movs	r3, #0
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	27a3      	movs	r7, #163	; 0xa3
 8006410:	e785      	b.n	800631e <__gethex+0x12a>
 8006412:	1e73      	subs	r3, r6, #1
 8006414:	9a05      	ldr	r2, [sp, #20]
 8006416:	9303      	str	r3, [sp, #12]
 8006418:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800641c:	4293      	cmp	r3, r2
 800641e:	d019      	beq.n	8006454 <__gethex+0x260>
 8006420:	f1bb 0f20 	cmp.w	fp, #32
 8006424:	d107      	bne.n	8006436 <__gethex+0x242>
 8006426:	9b02      	ldr	r3, [sp, #8]
 8006428:	9a00      	ldr	r2, [sp, #0]
 800642a:	f843 2b04 	str.w	r2, [r3], #4
 800642e:	9302      	str	r3, [sp, #8]
 8006430:	2300      	movs	r3, #0
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	469b      	mov	fp, r3
 8006436:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800643a:	f7ff fec6 	bl	80061ca <__hexdig_fun>
 800643e:	9b00      	ldr	r3, [sp, #0]
 8006440:	f000 000f 	and.w	r0, r0, #15
 8006444:	fa00 f00b 	lsl.w	r0, r0, fp
 8006448:	4303      	orrs	r3, r0
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	f10b 0b04 	add.w	fp, fp, #4
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	e00d      	b.n	8006470 <__gethex+0x27c>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	9a06      	ldr	r2, [sp, #24]
 8006458:	4413      	add	r3, r2
 800645a:	42bb      	cmp	r3, r7
 800645c:	d3e0      	bcc.n	8006420 <__gethex+0x22c>
 800645e:	4618      	mov	r0, r3
 8006460:	9901      	ldr	r1, [sp, #4]
 8006462:	9307      	str	r3, [sp, #28]
 8006464:	4652      	mov	r2, sl
 8006466:	f001 f97e 	bl	8007766 <strncmp>
 800646a:	9b07      	ldr	r3, [sp, #28]
 800646c:	2800      	cmp	r0, #0
 800646e:	d1d7      	bne.n	8006420 <__gethex+0x22c>
 8006470:	461e      	mov	r6, r3
 8006472:	e78b      	b.n	800638c <__gethex+0x198>
 8006474:	f04f 0a03 	mov.w	sl, #3
 8006478:	e7b8      	b.n	80063ec <__gethex+0x1f8>
 800647a:	da0a      	bge.n	8006492 <__gethex+0x29e>
 800647c:	1a37      	subs	r7, r6, r0
 800647e:	4621      	mov	r1, r4
 8006480:	ee18 0a10 	vmov	r0, s16
 8006484:	463a      	mov	r2, r7
 8006486:	f000 fcad 	bl	8006de4 <__lshift>
 800648a:	1bed      	subs	r5, r5, r7
 800648c:	4604      	mov	r4, r0
 800648e:	f100 0914 	add.w	r9, r0, #20
 8006492:	f04f 0a00 	mov.w	sl, #0
 8006496:	e7ae      	b.n	80063f6 <__gethex+0x202>
 8006498:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800649c:	42a8      	cmp	r0, r5
 800649e:	dd72      	ble.n	8006586 <__gethex+0x392>
 80064a0:	1b45      	subs	r5, r0, r5
 80064a2:	42ae      	cmp	r6, r5
 80064a4:	dc36      	bgt.n	8006514 <__gethex+0x320>
 80064a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d02a      	beq.n	8006504 <__gethex+0x310>
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d02c      	beq.n	800650c <__gethex+0x318>
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d11c      	bne.n	80064f0 <__gethex+0x2fc>
 80064b6:	42ae      	cmp	r6, r5
 80064b8:	d11a      	bne.n	80064f0 <__gethex+0x2fc>
 80064ba:	2e01      	cmp	r6, #1
 80064bc:	d112      	bne.n	80064e4 <__gethex+0x2f0>
 80064be:	9a04      	ldr	r2, [sp, #16]
 80064c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	2301      	movs	r3, #1
 80064c8:	6123      	str	r3, [r4, #16]
 80064ca:	f8c9 3000 	str.w	r3, [r9]
 80064ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064d0:	2762      	movs	r7, #98	; 0x62
 80064d2:	601c      	str	r4, [r3, #0]
 80064d4:	e723      	b.n	800631e <__gethex+0x12a>
 80064d6:	bf00      	nop
 80064d8:	08014690 	.word	0x08014690
 80064dc:	08014594 	.word	0x08014594
 80064e0:	08014608 	.word	0x08014608
 80064e4:	1e71      	subs	r1, r6, #1
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 fec0 	bl	800726c <__any_on>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d1e6      	bne.n	80064be <__gethex+0x2ca>
 80064f0:	ee18 0a10 	vmov	r0, s16
 80064f4:	4621      	mov	r1, r4
 80064f6:	f000 fa59 	bl	80069ac <_Bfree>
 80064fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064fc:	2300      	movs	r3, #0
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	2750      	movs	r7, #80	; 0x50
 8006502:	e70c      	b.n	800631e <__gethex+0x12a>
 8006504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f2      	bne.n	80064f0 <__gethex+0x2fc>
 800650a:	e7d8      	b.n	80064be <__gethex+0x2ca>
 800650c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1d5      	bne.n	80064be <__gethex+0x2ca>
 8006512:	e7ed      	b.n	80064f0 <__gethex+0x2fc>
 8006514:	1e6f      	subs	r7, r5, #1
 8006516:	f1ba 0f00 	cmp.w	sl, #0
 800651a:	d131      	bne.n	8006580 <__gethex+0x38c>
 800651c:	b127      	cbz	r7, 8006528 <__gethex+0x334>
 800651e:	4639      	mov	r1, r7
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fea3 	bl	800726c <__any_on>
 8006526:	4682      	mov	sl, r0
 8006528:	117b      	asrs	r3, r7, #5
 800652a:	2101      	movs	r1, #1
 800652c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006530:	f007 071f 	and.w	r7, r7, #31
 8006534:	fa01 f707 	lsl.w	r7, r1, r7
 8006538:	421f      	tst	r7, r3
 800653a:	4629      	mov	r1, r5
 800653c:	4620      	mov	r0, r4
 800653e:	bf18      	it	ne
 8006540:	f04a 0a02 	orrne.w	sl, sl, #2
 8006544:	1b76      	subs	r6, r6, r5
 8006546:	f7ff fdee 	bl	8006126 <rshift>
 800654a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800654e:	2702      	movs	r7, #2
 8006550:	f1ba 0f00 	cmp.w	sl, #0
 8006554:	d048      	beq.n	80065e8 <__gethex+0x3f4>
 8006556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d015      	beq.n	800658a <__gethex+0x396>
 800655e:	2b03      	cmp	r3, #3
 8006560:	d017      	beq.n	8006592 <__gethex+0x39e>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d109      	bne.n	800657a <__gethex+0x386>
 8006566:	f01a 0f02 	tst.w	sl, #2
 800656a:	d006      	beq.n	800657a <__gethex+0x386>
 800656c:	f8d9 0000 	ldr.w	r0, [r9]
 8006570:	ea4a 0a00 	orr.w	sl, sl, r0
 8006574:	f01a 0f01 	tst.w	sl, #1
 8006578:	d10e      	bne.n	8006598 <__gethex+0x3a4>
 800657a:	f047 0710 	orr.w	r7, r7, #16
 800657e:	e033      	b.n	80065e8 <__gethex+0x3f4>
 8006580:	f04f 0a01 	mov.w	sl, #1
 8006584:	e7d0      	b.n	8006528 <__gethex+0x334>
 8006586:	2701      	movs	r7, #1
 8006588:	e7e2      	b.n	8006550 <__gethex+0x35c>
 800658a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800658c:	f1c3 0301 	rsb	r3, r3, #1
 8006590:	9315      	str	r3, [sp, #84]	; 0x54
 8006592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <__gethex+0x386>
 8006598:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800659c:	f104 0314 	add.w	r3, r4, #20
 80065a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80065a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80065a8:	f04f 0c00 	mov.w	ip, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80065b6:	d01c      	beq.n	80065f2 <__gethex+0x3fe>
 80065b8:	3201      	adds	r2, #1
 80065ba:	6002      	str	r2, [r0, #0]
 80065bc:	2f02      	cmp	r7, #2
 80065be:	f104 0314 	add.w	r3, r4, #20
 80065c2:	d13f      	bne.n	8006644 <__gethex+0x450>
 80065c4:	f8d8 2000 	ldr.w	r2, [r8]
 80065c8:	3a01      	subs	r2, #1
 80065ca:	42b2      	cmp	r2, r6
 80065cc:	d10a      	bne.n	80065e4 <__gethex+0x3f0>
 80065ce:	1171      	asrs	r1, r6, #5
 80065d0:	2201      	movs	r2, #1
 80065d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065d6:	f006 061f 	and.w	r6, r6, #31
 80065da:	fa02 f606 	lsl.w	r6, r2, r6
 80065de:	421e      	tst	r6, r3
 80065e0:	bf18      	it	ne
 80065e2:	4617      	movne	r7, r2
 80065e4:	f047 0720 	orr.w	r7, r7, #32
 80065e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065ea:	601c      	str	r4, [r3, #0]
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	601d      	str	r5, [r3, #0]
 80065f0:	e695      	b.n	800631e <__gethex+0x12a>
 80065f2:	4299      	cmp	r1, r3
 80065f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80065f8:	d8d8      	bhi.n	80065ac <__gethex+0x3b8>
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	459b      	cmp	fp, r3
 80065fe:	db19      	blt.n	8006634 <__gethex+0x440>
 8006600:	6861      	ldr	r1, [r4, #4]
 8006602:	ee18 0a10 	vmov	r0, s16
 8006606:	3101      	adds	r1, #1
 8006608:	f000 f990 	bl	800692c <_Balloc>
 800660c:	4681      	mov	r9, r0
 800660e:	b918      	cbnz	r0, 8006618 <__gethex+0x424>
 8006610:	4b1a      	ldr	r3, [pc, #104]	; (800667c <__gethex+0x488>)
 8006612:	4602      	mov	r2, r0
 8006614:	2184      	movs	r1, #132	; 0x84
 8006616:	e6a8      	b.n	800636a <__gethex+0x176>
 8006618:	6922      	ldr	r2, [r4, #16]
 800661a:	3202      	adds	r2, #2
 800661c:	f104 010c 	add.w	r1, r4, #12
 8006620:	0092      	lsls	r2, r2, #2
 8006622:	300c      	adds	r0, #12
 8006624:	f000 f974 	bl	8006910 <memcpy>
 8006628:	4621      	mov	r1, r4
 800662a:	ee18 0a10 	vmov	r0, s16
 800662e:	f000 f9bd 	bl	80069ac <_Bfree>
 8006632:	464c      	mov	r4, r9
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800663c:	6122      	str	r2, [r4, #16]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]
 8006642:	e7bb      	b.n	80065bc <__gethex+0x3c8>
 8006644:	6922      	ldr	r2, [r4, #16]
 8006646:	455a      	cmp	r2, fp
 8006648:	dd0b      	ble.n	8006662 <__gethex+0x46e>
 800664a:	2101      	movs	r1, #1
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff fd6a 	bl	8006126 <rshift>
 8006652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006656:	3501      	adds	r5, #1
 8006658:	42ab      	cmp	r3, r5
 800665a:	f6ff aed0 	blt.w	80063fe <__gethex+0x20a>
 800665e:	2701      	movs	r7, #1
 8006660:	e7c0      	b.n	80065e4 <__gethex+0x3f0>
 8006662:	f016 061f 	ands.w	r6, r6, #31
 8006666:	d0fa      	beq.n	800665e <__gethex+0x46a>
 8006668:	4453      	add	r3, sl
 800666a:	f1c6 0620 	rsb	r6, r6, #32
 800666e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006672:	f000 fa4d 	bl	8006b10 <__hi0bits>
 8006676:	42b0      	cmp	r0, r6
 8006678:	dbe7      	blt.n	800664a <__gethex+0x456>
 800667a:	e7f0      	b.n	800665e <__gethex+0x46a>
 800667c:	08014594 	.word	0x08014594

08006680 <L_shift>:
 8006680:	f1c2 0208 	rsb	r2, r2, #8
 8006684:	0092      	lsls	r2, r2, #2
 8006686:	b570      	push	{r4, r5, r6, lr}
 8006688:	f1c2 0620 	rsb	r6, r2, #32
 800668c:	6843      	ldr	r3, [r0, #4]
 800668e:	6804      	ldr	r4, [r0, #0]
 8006690:	fa03 f506 	lsl.w	r5, r3, r6
 8006694:	432c      	orrs	r4, r5
 8006696:	40d3      	lsrs	r3, r2
 8006698:	6004      	str	r4, [r0, #0]
 800669a:	f840 3f04 	str.w	r3, [r0, #4]!
 800669e:	4288      	cmp	r0, r1
 80066a0:	d3f4      	bcc.n	800668c <L_shift+0xc>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}

080066a4 <__match>:
 80066a4:	b530      	push	{r4, r5, lr}
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ae:	b914      	cbnz	r4, 80066b6 <__match+0x12>
 80066b0:	6003      	str	r3, [r0, #0]
 80066b2:	2001      	movs	r0, #1
 80066b4:	bd30      	pop	{r4, r5, pc}
 80066b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80066be:	2d19      	cmp	r5, #25
 80066c0:	bf98      	it	ls
 80066c2:	3220      	addls	r2, #32
 80066c4:	42a2      	cmp	r2, r4
 80066c6:	d0f0      	beq.n	80066aa <__match+0x6>
 80066c8:	2000      	movs	r0, #0
 80066ca:	e7f3      	b.n	80066b4 <__match+0x10>

080066cc <__hexnan>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	680b      	ldr	r3, [r1, #0]
 80066d2:	115e      	asrs	r6, r3, #5
 80066d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80066d8:	f013 031f 	ands.w	r3, r3, #31
 80066dc:	b087      	sub	sp, #28
 80066de:	bf18      	it	ne
 80066e0:	3604      	addne	r6, #4
 80066e2:	2500      	movs	r5, #0
 80066e4:	1f37      	subs	r7, r6, #4
 80066e6:	4690      	mov	r8, r2
 80066e8:	6802      	ldr	r2, [r0, #0]
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	4682      	mov	sl, r0
 80066ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80066f2:	46b9      	mov	r9, r7
 80066f4:	463c      	mov	r4, r7
 80066f6:	9502      	str	r5, [sp, #8]
 80066f8:	46ab      	mov	fp, r5
 80066fa:	7851      	ldrb	r1, [r2, #1]
 80066fc:	1c53      	adds	r3, r2, #1
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	b341      	cbz	r1, 8006754 <__hexnan+0x88>
 8006702:	4608      	mov	r0, r1
 8006704:	9205      	str	r2, [sp, #20]
 8006706:	9104      	str	r1, [sp, #16]
 8006708:	f7ff fd5f 	bl	80061ca <__hexdig_fun>
 800670c:	2800      	cmp	r0, #0
 800670e:	d14f      	bne.n	80067b0 <__hexnan+0xe4>
 8006710:	9904      	ldr	r1, [sp, #16]
 8006712:	9a05      	ldr	r2, [sp, #20]
 8006714:	2920      	cmp	r1, #32
 8006716:	d818      	bhi.n	800674a <__hexnan+0x7e>
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	459b      	cmp	fp, r3
 800671c:	dd13      	ble.n	8006746 <__hexnan+0x7a>
 800671e:	454c      	cmp	r4, r9
 8006720:	d206      	bcs.n	8006730 <__hexnan+0x64>
 8006722:	2d07      	cmp	r5, #7
 8006724:	dc04      	bgt.n	8006730 <__hexnan+0x64>
 8006726:	462a      	mov	r2, r5
 8006728:	4649      	mov	r1, r9
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff ffa8 	bl	8006680 <L_shift>
 8006730:	4544      	cmp	r4, r8
 8006732:	d950      	bls.n	80067d6 <__hexnan+0x10a>
 8006734:	2300      	movs	r3, #0
 8006736:	f1a4 0904 	sub.w	r9, r4, #4
 800673a:	f844 3c04 	str.w	r3, [r4, #-4]
 800673e:	f8cd b008 	str.w	fp, [sp, #8]
 8006742:	464c      	mov	r4, r9
 8006744:	461d      	mov	r5, r3
 8006746:	9a03      	ldr	r2, [sp, #12]
 8006748:	e7d7      	b.n	80066fa <__hexnan+0x2e>
 800674a:	2929      	cmp	r1, #41	; 0x29
 800674c:	d156      	bne.n	80067fc <__hexnan+0x130>
 800674e:	3202      	adds	r2, #2
 8006750:	f8ca 2000 	str.w	r2, [sl]
 8006754:	f1bb 0f00 	cmp.w	fp, #0
 8006758:	d050      	beq.n	80067fc <__hexnan+0x130>
 800675a:	454c      	cmp	r4, r9
 800675c:	d206      	bcs.n	800676c <__hexnan+0xa0>
 800675e:	2d07      	cmp	r5, #7
 8006760:	dc04      	bgt.n	800676c <__hexnan+0xa0>
 8006762:	462a      	mov	r2, r5
 8006764:	4649      	mov	r1, r9
 8006766:	4620      	mov	r0, r4
 8006768:	f7ff ff8a 	bl	8006680 <L_shift>
 800676c:	4544      	cmp	r4, r8
 800676e:	d934      	bls.n	80067da <__hexnan+0x10e>
 8006770:	f1a8 0204 	sub.w	r2, r8, #4
 8006774:	4623      	mov	r3, r4
 8006776:	f853 1b04 	ldr.w	r1, [r3], #4
 800677a:	f842 1f04 	str.w	r1, [r2, #4]!
 800677e:	429f      	cmp	r7, r3
 8006780:	d2f9      	bcs.n	8006776 <__hexnan+0xaa>
 8006782:	1b3b      	subs	r3, r7, r4
 8006784:	f023 0303 	bic.w	r3, r3, #3
 8006788:	3304      	adds	r3, #4
 800678a:	3401      	adds	r4, #1
 800678c:	3e03      	subs	r6, #3
 800678e:	42b4      	cmp	r4, r6
 8006790:	bf88      	it	hi
 8006792:	2304      	movhi	r3, #4
 8006794:	4443      	add	r3, r8
 8006796:	2200      	movs	r2, #0
 8006798:	f843 2b04 	str.w	r2, [r3], #4
 800679c:	429f      	cmp	r7, r3
 800679e:	d2fb      	bcs.n	8006798 <__hexnan+0xcc>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	b91b      	cbnz	r3, 80067ac <__hexnan+0xe0>
 80067a4:	4547      	cmp	r7, r8
 80067a6:	d127      	bne.n	80067f8 <__hexnan+0x12c>
 80067a8:	2301      	movs	r3, #1
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	2005      	movs	r0, #5
 80067ae:	e026      	b.n	80067fe <__hexnan+0x132>
 80067b0:	3501      	adds	r5, #1
 80067b2:	2d08      	cmp	r5, #8
 80067b4:	f10b 0b01 	add.w	fp, fp, #1
 80067b8:	dd06      	ble.n	80067c8 <__hexnan+0xfc>
 80067ba:	4544      	cmp	r4, r8
 80067bc:	d9c3      	bls.n	8006746 <__hexnan+0x7a>
 80067be:	2300      	movs	r3, #0
 80067c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80067c4:	2501      	movs	r5, #1
 80067c6:	3c04      	subs	r4, #4
 80067c8:	6822      	ldr	r2, [r4, #0]
 80067ca:	f000 000f 	and.w	r0, r0, #15
 80067ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80067d2:	6022      	str	r2, [r4, #0]
 80067d4:	e7b7      	b.n	8006746 <__hexnan+0x7a>
 80067d6:	2508      	movs	r5, #8
 80067d8:	e7b5      	b.n	8006746 <__hexnan+0x7a>
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0df      	beq.n	80067a0 <__hexnan+0xd4>
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e4:	f1c3 0320 	rsb	r3, r3, #32
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80067f0:	401a      	ands	r2, r3
 80067f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80067f6:	e7d3      	b.n	80067a0 <__hexnan+0xd4>
 80067f8:	3f04      	subs	r7, #4
 80067fa:	e7d1      	b.n	80067a0 <__hexnan+0xd4>
 80067fc:	2004      	movs	r0, #4
 80067fe:	b007      	add	sp, #28
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006804 <_localeconv_r>:
 8006804:	4800      	ldr	r0, [pc, #0]	; (8006808 <_localeconv_r+0x4>)
 8006806:	4770      	bx	lr
 8006808:	20000178 	.word	0x20000178

0800680c <__retarget_lock_init_recursive>:
 800680c:	4770      	bx	lr

0800680e <__retarget_lock_acquire_recursive>:
 800680e:	4770      	bx	lr

08006810 <__retarget_lock_release_recursive>:
 8006810:	4770      	bx	lr

08006812 <__swhatbuf_r>:
 8006812:	b570      	push	{r4, r5, r6, lr}
 8006814:	460e      	mov	r6, r1
 8006816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681a:	2900      	cmp	r1, #0
 800681c:	b096      	sub	sp, #88	; 0x58
 800681e:	4614      	mov	r4, r2
 8006820:	461d      	mov	r5, r3
 8006822:	da08      	bge.n	8006836 <__swhatbuf_r+0x24>
 8006824:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	602a      	str	r2, [r5, #0]
 800682c:	061a      	lsls	r2, r3, #24
 800682e:	d410      	bmi.n	8006852 <__swhatbuf_r+0x40>
 8006830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006834:	e00e      	b.n	8006854 <__swhatbuf_r+0x42>
 8006836:	466a      	mov	r2, sp
 8006838:	f7fc fb46 	bl	8002ec8 <_fstat_r>
 800683c:	2800      	cmp	r0, #0
 800683e:	dbf1      	blt.n	8006824 <__swhatbuf_r+0x12>
 8006840:	9a01      	ldr	r2, [sp, #4]
 8006842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800684a:	425a      	negs	r2, r3
 800684c:	415a      	adcs	r2, r3
 800684e:	602a      	str	r2, [r5, #0]
 8006850:	e7ee      	b.n	8006830 <__swhatbuf_r+0x1e>
 8006852:	2340      	movs	r3, #64	; 0x40
 8006854:	2000      	movs	r0, #0
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	b016      	add	sp, #88	; 0x58
 800685a:	bd70      	pop	{r4, r5, r6, pc}

0800685c <__smakebuf_r>:
 800685c:	898b      	ldrh	r3, [r1, #12]
 800685e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006860:	079d      	lsls	r5, r3, #30
 8006862:	4606      	mov	r6, r0
 8006864:	460c      	mov	r4, r1
 8006866:	d507      	bpl.n	8006878 <__smakebuf_r+0x1c>
 8006868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	2301      	movs	r3, #1
 8006872:	6163      	str	r3, [r4, #20]
 8006874:	b002      	add	sp, #8
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	ab01      	add	r3, sp, #4
 800687a:	466a      	mov	r2, sp
 800687c:	f7ff ffc9 	bl	8006812 <__swhatbuf_r>
 8006880:	9900      	ldr	r1, [sp, #0]
 8006882:	4605      	mov	r5, r0
 8006884:	4630      	mov	r0, r6
 8006886:	f000 fd6d 	bl	8007364 <_malloc_r>
 800688a:	b948      	cbnz	r0, 80068a0 <__smakebuf_r+0x44>
 800688c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006890:	059a      	lsls	r2, r3, #22
 8006892:	d4ef      	bmi.n	8006874 <__smakebuf_r+0x18>
 8006894:	f023 0303 	bic.w	r3, r3, #3
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	e7e3      	b.n	8006868 <__smakebuf_r+0xc>
 80068a0:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <__smakebuf_r+0x7c>)
 80068a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	6020      	str	r0, [r4, #0]
 80068a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	9b00      	ldr	r3, [sp, #0]
 80068b0:	6163      	str	r3, [r4, #20]
 80068b2:	9b01      	ldr	r3, [sp, #4]
 80068b4:	6120      	str	r0, [r4, #16]
 80068b6:	b15b      	cbz	r3, 80068d0 <__smakebuf_r+0x74>
 80068b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068bc:	4630      	mov	r0, r6
 80068be:	f7fc fb08 	bl	8002ed2 <_isatty_r>
 80068c2:	b128      	cbz	r0, 80068d0 <__smakebuf_r+0x74>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	89a0      	ldrh	r0, [r4, #12]
 80068d2:	4305      	orrs	r5, r0
 80068d4:	81a5      	strh	r5, [r4, #12]
 80068d6:	e7cd      	b.n	8006874 <__smakebuf_r+0x18>
 80068d8:	08005f61 	.word	0x08005f61

080068dc <malloc>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <malloc+0xc>)
 80068de:	4601      	mov	r1, r0
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f000 bd3f 	b.w	8007364 <_malloc_r>
 80068e6:	bf00      	nop
 80068e8:	20000020 	.word	0x20000020

080068ec <__ascii_mbtowc>:
 80068ec:	b082      	sub	sp, #8
 80068ee:	b901      	cbnz	r1, 80068f2 <__ascii_mbtowc+0x6>
 80068f0:	a901      	add	r1, sp, #4
 80068f2:	b142      	cbz	r2, 8006906 <__ascii_mbtowc+0x1a>
 80068f4:	b14b      	cbz	r3, 800690a <__ascii_mbtowc+0x1e>
 80068f6:	7813      	ldrb	r3, [r2, #0]
 80068f8:	600b      	str	r3, [r1, #0]
 80068fa:	7812      	ldrb	r2, [r2, #0]
 80068fc:	1e10      	subs	r0, r2, #0
 80068fe:	bf18      	it	ne
 8006900:	2001      	movne	r0, #1
 8006902:	b002      	add	sp, #8
 8006904:	4770      	bx	lr
 8006906:	4610      	mov	r0, r2
 8006908:	e7fb      	b.n	8006902 <__ascii_mbtowc+0x16>
 800690a:	f06f 0001 	mvn.w	r0, #1
 800690e:	e7f8      	b.n	8006902 <__ascii_mbtowc+0x16>

08006910 <memcpy>:
 8006910:	440a      	add	r2, r1
 8006912:	4291      	cmp	r1, r2
 8006914:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006918:	d100      	bne.n	800691c <memcpy+0xc>
 800691a:	4770      	bx	lr
 800691c:	b510      	push	{r4, lr}
 800691e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006926:	4291      	cmp	r1, r2
 8006928:	d1f9      	bne.n	800691e <memcpy+0xe>
 800692a:	bd10      	pop	{r4, pc}

0800692c <_Balloc>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
 8006934:	b976      	cbnz	r6, 8006954 <_Balloc+0x28>
 8006936:	2010      	movs	r0, #16
 8006938:	f7ff ffd0 	bl	80068dc <malloc>
 800693c:	4602      	mov	r2, r0
 800693e:	6260      	str	r0, [r4, #36]	; 0x24
 8006940:	b920      	cbnz	r0, 800694c <_Balloc+0x20>
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <_Balloc+0x78>)
 8006944:	4818      	ldr	r0, [pc, #96]	; (80069a8 <_Balloc+0x7c>)
 8006946:	2166      	movs	r1, #102	; 0x66
 8006948:	f7fe fb8c 	bl	8005064 <__assert_func>
 800694c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006950:	6006      	str	r6, [r0, #0]
 8006952:	60c6      	str	r6, [r0, #12]
 8006954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006956:	68f3      	ldr	r3, [r6, #12]
 8006958:	b183      	cbz	r3, 800697c <_Balloc+0x50>
 800695a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006962:	b9b8      	cbnz	r0, 8006994 <_Balloc+0x68>
 8006964:	2101      	movs	r1, #1
 8006966:	fa01 f605 	lsl.w	r6, r1, r5
 800696a:	1d72      	adds	r2, r6, #5
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	4620      	mov	r0, r4
 8006970:	f000 fc9d 	bl	80072ae <_calloc_r>
 8006974:	b160      	cbz	r0, 8006990 <_Balloc+0x64>
 8006976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800697a:	e00e      	b.n	800699a <_Balloc+0x6e>
 800697c:	2221      	movs	r2, #33	; 0x21
 800697e:	2104      	movs	r1, #4
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fc94 	bl	80072ae <_calloc_r>
 8006986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006988:	60f0      	str	r0, [r6, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e4      	bne.n	800695a <_Balloc+0x2e>
 8006990:	2000      	movs	r0, #0
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	6802      	ldr	r2, [r0, #0]
 8006996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800699a:	2300      	movs	r3, #0
 800699c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069a0:	e7f7      	b.n	8006992 <_Balloc+0x66>
 80069a2:	bf00      	nop
 80069a4:	08014438 	.word	0x08014438
 80069a8:	080146a2 	.word	0x080146a2

080069ac <_Bfree>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069b0:	4605      	mov	r5, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	b976      	cbnz	r6, 80069d4 <_Bfree+0x28>
 80069b6:	2010      	movs	r0, #16
 80069b8:	f7ff ff90 	bl	80068dc <malloc>
 80069bc:	4602      	mov	r2, r0
 80069be:	6268      	str	r0, [r5, #36]	; 0x24
 80069c0:	b920      	cbnz	r0, 80069cc <_Bfree+0x20>
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <_Bfree+0x3c>)
 80069c4:	4809      	ldr	r0, [pc, #36]	; (80069ec <_Bfree+0x40>)
 80069c6:	218a      	movs	r1, #138	; 0x8a
 80069c8:	f7fe fb4c 	bl	8005064 <__assert_func>
 80069cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d0:	6006      	str	r6, [r0, #0]
 80069d2:	60c6      	str	r6, [r0, #12]
 80069d4:	b13c      	cbz	r4, 80069e6 <_Bfree+0x3a>
 80069d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069d8:	6862      	ldr	r2, [r4, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069e0:	6021      	str	r1, [r4, #0]
 80069e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	08014438 	.word	0x08014438
 80069ec:	080146a2 	.word	0x080146a2

080069f0 <__multadd>:
 80069f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	690d      	ldr	r5, [r1, #16]
 80069f6:	4607      	mov	r7, r0
 80069f8:	460c      	mov	r4, r1
 80069fa:	461e      	mov	r6, r3
 80069fc:	f101 0c14 	add.w	ip, r1, #20
 8006a00:	2000      	movs	r0, #0
 8006a02:	f8dc 3000 	ldr.w	r3, [ip]
 8006a06:	b299      	uxth	r1, r3
 8006a08:	fb02 6101 	mla	r1, r2, r1, r6
 8006a0c:	0c1e      	lsrs	r6, r3, #16
 8006a0e:	0c0b      	lsrs	r3, r1, #16
 8006a10:	fb02 3306 	mla	r3, r2, r6, r3
 8006a14:	b289      	uxth	r1, r1
 8006a16:	3001      	adds	r0, #1
 8006a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a1c:	4285      	cmp	r5, r0
 8006a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8006a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a26:	dcec      	bgt.n	8006a02 <__multadd+0x12>
 8006a28:	b30e      	cbz	r6, 8006a6e <__multadd+0x7e>
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	42ab      	cmp	r3, r5
 8006a2e:	dc19      	bgt.n	8006a64 <__multadd+0x74>
 8006a30:	6861      	ldr	r1, [r4, #4]
 8006a32:	4638      	mov	r0, r7
 8006a34:	3101      	adds	r1, #1
 8006a36:	f7ff ff79 	bl	800692c <_Balloc>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	b928      	cbnz	r0, 8006a4a <__multadd+0x5a>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <__multadd+0x84>)
 8006a42:	480d      	ldr	r0, [pc, #52]	; (8006a78 <__multadd+0x88>)
 8006a44:	21b5      	movs	r1, #181	; 0xb5
 8006a46:	f7fe fb0d 	bl	8005064 <__assert_func>
 8006a4a:	6922      	ldr	r2, [r4, #16]
 8006a4c:	3202      	adds	r2, #2
 8006a4e:	f104 010c 	add.w	r1, r4, #12
 8006a52:	0092      	lsls	r2, r2, #2
 8006a54:	300c      	adds	r0, #12
 8006a56:	f7ff ff5b 	bl	8006910 <memcpy>
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	f7ff ffa5 	bl	80069ac <_Bfree>
 8006a62:	4644      	mov	r4, r8
 8006a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a68:	3501      	adds	r5, #1
 8006a6a:	615e      	str	r6, [r3, #20]
 8006a6c:	6125      	str	r5, [r4, #16]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a74:	08014594 	.word	0x08014594
 8006a78:	080146a2 	.word	0x080146a2

08006a7c <__s2b>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	460c      	mov	r4, r1
 8006a82:	4615      	mov	r5, r2
 8006a84:	461f      	mov	r7, r3
 8006a86:	2209      	movs	r2, #9
 8006a88:	3308      	adds	r3, #8
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a90:	2100      	movs	r1, #0
 8006a92:	2201      	movs	r2, #1
 8006a94:	429a      	cmp	r2, r3
 8006a96:	db09      	blt.n	8006aac <__s2b+0x30>
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7ff ff47 	bl	800692c <_Balloc>
 8006a9e:	b940      	cbnz	r0, 8006ab2 <__s2b+0x36>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <__s2b+0x8c>)
 8006aa4:	4819      	ldr	r0, [pc, #100]	; (8006b0c <__s2b+0x90>)
 8006aa6:	21ce      	movs	r1, #206	; 0xce
 8006aa8:	f7fe fadc 	bl	8005064 <__assert_func>
 8006aac:	0052      	lsls	r2, r2, #1
 8006aae:	3101      	adds	r1, #1
 8006ab0:	e7f0      	b.n	8006a94 <__s2b+0x18>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	6143      	str	r3, [r0, #20]
 8006ab6:	2d09      	cmp	r5, #9
 8006ab8:	f04f 0301 	mov.w	r3, #1
 8006abc:	6103      	str	r3, [r0, #16]
 8006abe:	dd16      	ble.n	8006aee <__s2b+0x72>
 8006ac0:	f104 0909 	add.w	r9, r4, #9
 8006ac4:	46c8      	mov	r8, r9
 8006ac6:	442c      	add	r4, r5
 8006ac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006acc:	4601      	mov	r1, r0
 8006ace:	3b30      	subs	r3, #48	; 0x30
 8006ad0:	220a      	movs	r2, #10
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ff8c 	bl	80069f0 <__multadd>
 8006ad8:	45a0      	cmp	r8, r4
 8006ada:	d1f5      	bne.n	8006ac8 <__s2b+0x4c>
 8006adc:	f1a5 0408 	sub.w	r4, r5, #8
 8006ae0:	444c      	add	r4, r9
 8006ae2:	1b2d      	subs	r5, r5, r4
 8006ae4:	1963      	adds	r3, r4, r5
 8006ae6:	42bb      	cmp	r3, r7
 8006ae8:	db04      	blt.n	8006af4 <__s2b+0x78>
 8006aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aee:	340a      	adds	r4, #10
 8006af0:	2509      	movs	r5, #9
 8006af2:	e7f6      	b.n	8006ae2 <__s2b+0x66>
 8006af4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006af8:	4601      	mov	r1, r0
 8006afa:	3b30      	subs	r3, #48	; 0x30
 8006afc:	220a      	movs	r2, #10
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ff76 	bl	80069f0 <__multadd>
 8006b04:	e7ee      	b.n	8006ae4 <__s2b+0x68>
 8006b06:	bf00      	nop
 8006b08:	08014594 	.word	0x08014594
 8006b0c:	080146a2 	.word	0x080146a2

08006b10 <__hi0bits>:
 8006b10:	0c03      	lsrs	r3, r0, #16
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	b9d3      	cbnz	r3, 8006b4c <__hi0bits+0x3c>
 8006b16:	0400      	lsls	r0, r0, #16
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b1e:	bf04      	itt	eq
 8006b20:	0200      	lsleq	r0, r0, #8
 8006b22:	3308      	addeq	r3, #8
 8006b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b28:	bf04      	itt	eq
 8006b2a:	0100      	lsleq	r0, r0, #4
 8006b2c:	3304      	addeq	r3, #4
 8006b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b32:	bf04      	itt	eq
 8006b34:	0080      	lsleq	r0, r0, #2
 8006b36:	3302      	addeq	r3, #2
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	db05      	blt.n	8006b48 <__hi0bits+0x38>
 8006b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b40:	f103 0301 	add.w	r3, r3, #1
 8006b44:	bf08      	it	eq
 8006b46:	2320      	moveq	r3, #32
 8006b48:	4618      	mov	r0, r3
 8006b4a:	4770      	bx	lr
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e7e4      	b.n	8006b1a <__hi0bits+0xa>

08006b50 <__lo0bits>:
 8006b50:	6803      	ldr	r3, [r0, #0]
 8006b52:	f013 0207 	ands.w	r2, r3, #7
 8006b56:	4601      	mov	r1, r0
 8006b58:	d00b      	beq.n	8006b72 <__lo0bits+0x22>
 8006b5a:	07da      	lsls	r2, r3, #31
 8006b5c:	d423      	bmi.n	8006ba6 <__lo0bits+0x56>
 8006b5e:	0798      	lsls	r0, r3, #30
 8006b60:	bf49      	itett	mi
 8006b62:	085b      	lsrmi	r3, r3, #1
 8006b64:	089b      	lsrpl	r3, r3, #2
 8006b66:	2001      	movmi	r0, #1
 8006b68:	600b      	strmi	r3, [r1, #0]
 8006b6a:	bf5c      	itt	pl
 8006b6c:	600b      	strpl	r3, [r1, #0]
 8006b6e:	2002      	movpl	r0, #2
 8006b70:	4770      	bx	lr
 8006b72:	b298      	uxth	r0, r3
 8006b74:	b9a8      	cbnz	r0, 8006ba2 <__lo0bits+0x52>
 8006b76:	0c1b      	lsrs	r3, r3, #16
 8006b78:	2010      	movs	r0, #16
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	b90a      	cbnz	r2, 8006b82 <__lo0bits+0x32>
 8006b7e:	3008      	adds	r0, #8
 8006b80:	0a1b      	lsrs	r3, r3, #8
 8006b82:	071a      	lsls	r2, r3, #28
 8006b84:	bf04      	itt	eq
 8006b86:	091b      	lsreq	r3, r3, #4
 8006b88:	3004      	addeq	r0, #4
 8006b8a:	079a      	lsls	r2, r3, #30
 8006b8c:	bf04      	itt	eq
 8006b8e:	089b      	lsreq	r3, r3, #2
 8006b90:	3002      	addeq	r0, #2
 8006b92:	07da      	lsls	r2, r3, #31
 8006b94:	d403      	bmi.n	8006b9e <__lo0bits+0x4e>
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	f100 0001 	add.w	r0, r0, #1
 8006b9c:	d005      	beq.n	8006baa <__lo0bits+0x5a>
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	4770      	bx	lr
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	e7e9      	b.n	8006b7a <__lo0bits+0x2a>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	4770      	bx	lr
 8006baa:	2020      	movs	r0, #32
 8006bac:	4770      	bx	lr
	...

08006bb0 <__i2b>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	f7ff feb9 	bl	800692c <_Balloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	b928      	cbnz	r0, 8006bca <__i2b+0x1a>
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <__i2b+0x24>)
 8006bc0:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <__i2b+0x28>)
 8006bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bc6:	f7fe fa4d 	bl	8005064 <__assert_func>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	6144      	str	r4, [r0, #20]
 8006bce:	6103      	str	r3, [r0, #16]
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08014594 	.word	0x08014594
 8006bd8:	080146a2 	.word	0x080146a2

08006bdc <__multiply>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4691      	mov	r9, r2
 8006be2:	690a      	ldr	r2, [r1, #16]
 8006be4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	bfb8      	it	lt
 8006bec:	460b      	movlt	r3, r1
 8006bee:	460c      	mov	r4, r1
 8006bf0:	bfbc      	itt	lt
 8006bf2:	464c      	movlt	r4, r9
 8006bf4:	4699      	movlt	r9, r3
 8006bf6:	6927      	ldr	r7, [r4, #16]
 8006bf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bfc:	68a3      	ldr	r3, [r4, #8]
 8006bfe:	6861      	ldr	r1, [r4, #4]
 8006c00:	eb07 060a 	add.w	r6, r7, sl
 8006c04:	42b3      	cmp	r3, r6
 8006c06:	b085      	sub	sp, #20
 8006c08:	bfb8      	it	lt
 8006c0a:	3101      	addlt	r1, #1
 8006c0c:	f7ff fe8e 	bl	800692c <_Balloc>
 8006c10:	b930      	cbnz	r0, 8006c20 <__multiply+0x44>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4b44      	ldr	r3, [pc, #272]	; (8006d28 <__multiply+0x14c>)
 8006c16:	4845      	ldr	r0, [pc, #276]	; (8006d2c <__multiply+0x150>)
 8006c18:	f240 115d 	movw	r1, #349	; 0x15d
 8006c1c:	f7fe fa22 	bl	8005064 <__assert_func>
 8006c20:	f100 0514 	add.w	r5, r0, #20
 8006c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c28:	462b      	mov	r3, r5
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4543      	cmp	r3, r8
 8006c2e:	d321      	bcc.n	8006c74 <__multiply+0x98>
 8006c30:	f104 0314 	add.w	r3, r4, #20
 8006c34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c38:	f109 0314 	add.w	r3, r9, #20
 8006c3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c40:	9202      	str	r2, [sp, #8]
 8006c42:	1b3a      	subs	r2, r7, r4
 8006c44:	3a15      	subs	r2, #21
 8006c46:	f022 0203 	bic.w	r2, r2, #3
 8006c4a:	3204      	adds	r2, #4
 8006c4c:	f104 0115 	add.w	r1, r4, #21
 8006c50:	428f      	cmp	r7, r1
 8006c52:	bf38      	it	cc
 8006c54:	2204      	movcc	r2, #4
 8006c56:	9201      	str	r2, [sp, #4]
 8006c58:	9a02      	ldr	r2, [sp, #8]
 8006c5a:	9303      	str	r3, [sp, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d80c      	bhi.n	8006c7a <__multiply+0x9e>
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	dd03      	ble.n	8006c6c <__multiply+0x90>
 8006c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d05a      	beq.n	8006d22 <__multiply+0x146>
 8006c6c:	6106      	str	r6, [r0, #16]
 8006c6e:	b005      	add	sp, #20
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	f843 2b04 	str.w	r2, [r3], #4
 8006c78:	e7d8      	b.n	8006c2c <__multiply+0x50>
 8006c7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c7e:	f1ba 0f00 	cmp.w	sl, #0
 8006c82:	d024      	beq.n	8006cce <__multiply+0xf2>
 8006c84:	f104 0e14 	add.w	lr, r4, #20
 8006c88:	46a9      	mov	r9, r5
 8006c8a:	f04f 0c00 	mov.w	ip, #0
 8006c8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c92:	f8d9 1000 	ldr.w	r1, [r9]
 8006c96:	fa1f fb82 	uxth.w	fp, r2
 8006c9a:	b289      	uxth	r1, r1
 8006c9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca8:	4461      	add	r1, ip
 8006caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cae:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cb6:	b289      	uxth	r1, r1
 8006cb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cbc:	4577      	cmp	r7, lr
 8006cbe:	f849 1b04 	str.w	r1, [r9], #4
 8006cc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cc6:	d8e2      	bhi.n	8006c8e <__multiply+0xb2>
 8006cc8:	9a01      	ldr	r2, [sp, #4]
 8006cca:	f845 c002 	str.w	ip, [r5, r2]
 8006cce:	9a03      	ldr	r2, [sp, #12]
 8006cd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	f1b9 0f00 	cmp.w	r9, #0
 8006cda:	d020      	beq.n	8006d1e <__multiply+0x142>
 8006cdc:	6829      	ldr	r1, [r5, #0]
 8006cde:	f104 0c14 	add.w	ip, r4, #20
 8006ce2:	46ae      	mov	lr, r5
 8006ce4:	f04f 0a00 	mov.w	sl, #0
 8006ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8006cec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cf0:	fb09 220b 	mla	r2, r9, fp, r2
 8006cf4:	4492      	add	sl, r2
 8006cf6:	b289      	uxth	r1, r1
 8006cf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cfc:	f84e 1b04 	str.w	r1, [lr], #4
 8006d00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d04:	f8be 1000 	ldrh.w	r1, [lr]
 8006d08:	0c12      	lsrs	r2, r2, #16
 8006d0a:	fb09 1102 	mla	r1, r9, r2, r1
 8006d0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d12:	4567      	cmp	r7, ip
 8006d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d18:	d8e6      	bhi.n	8006ce8 <__multiply+0x10c>
 8006d1a:	9a01      	ldr	r2, [sp, #4]
 8006d1c:	50a9      	str	r1, [r5, r2]
 8006d1e:	3504      	adds	r5, #4
 8006d20:	e79a      	b.n	8006c58 <__multiply+0x7c>
 8006d22:	3e01      	subs	r6, #1
 8006d24:	e79c      	b.n	8006c60 <__multiply+0x84>
 8006d26:	bf00      	nop
 8006d28:	08014594 	.word	0x08014594
 8006d2c:	080146a2 	.word	0x080146a2

08006d30 <__pow5mult>:
 8006d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d34:	4615      	mov	r5, r2
 8006d36:	f012 0203 	ands.w	r2, r2, #3
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460f      	mov	r7, r1
 8006d3e:	d007      	beq.n	8006d50 <__pow5mult+0x20>
 8006d40:	4c25      	ldr	r4, [pc, #148]	; (8006dd8 <__pow5mult+0xa8>)
 8006d42:	3a01      	subs	r2, #1
 8006d44:	2300      	movs	r3, #0
 8006d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d4a:	f7ff fe51 	bl	80069f0 <__multadd>
 8006d4e:	4607      	mov	r7, r0
 8006d50:	10ad      	asrs	r5, r5, #2
 8006d52:	d03d      	beq.n	8006dd0 <__pow5mult+0xa0>
 8006d54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d56:	b97c      	cbnz	r4, 8006d78 <__pow5mult+0x48>
 8006d58:	2010      	movs	r0, #16
 8006d5a:	f7ff fdbf 	bl	80068dc <malloc>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	6270      	str	r0, [r6, #36]	; 0x24
 8006d62:	b928      	cbnz	r0, 8006d70 <__pow5mult+0x40>
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <__pow5mult+0xac>)
 8006d66:	481e      	ldr	r0, [pc, #120]	; (8006de0 <__pow5mult+0xb0>)
 8006d68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d6c:	f7fe f97a 	bl	8005064 <__assert_func>
 8006d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d74:	6004      	str	r4, [r0, #0]
 8006d76:	60c4      	str	r4, [r0, #12]
 8006d78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d80:	b94c      	cbnz	r4, 8006d96 <__pow5mult+0x66>
 8006d82:	f240 2171 	movw	r1, #625	; 0x271
 8006d86:	4630      	mov	r0, r6
 8006d88:	f7ff ff12 	bl	8006bb0 <__i2b>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d92:	4604      	mov	r4, r0
 8006d94:	6003      	str	r3, [r0, #0]
 8006d96:	f04f 0900 	mov.w	r9, #0
 8006d9a:	07eb      	lsls	r3, r5, #31
 8006d9c:	d50a      	bpl.n	8006db4 <__pow5mult+0x84>
 8006d9e:	4639      	mov	r1, r7
 8006da0:	4622      	mov	r2, r4
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7ff ff1a 	bl	8006bdc <__multiply>
 8006da8:	4639      	mov	r1, r7
 8006daa:	4680      	mov	r8, r0
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7ff fdfd 	bl	80069ac <_Bfree>
 8006db2:	4647      	mov	r7, r8
 8006db4:	106d      	asrs	r5, r5, #1
 8006db6:	d00b      	beq.n	8006dd0 <__pow5mult+0xa0>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	b938      	cbnz	r0, 8006dcc <__pow5mult+0x9c>
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff ff0b 	bl	8006bdc <__multiply>
 8006dc6:	6020      	str	r0, [r4, #0]
 8006dc8:	f8c0 9000 	str.w	r9, [r0]
 8006dcc:	4604      	mov	r4, r0
 8006dce:	e7e4      	b.n	8006d9a <__pow5mult+0x6a>
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08014810 	.word	0x08014810
 8006ddc:	08014438 	.word	0x08014438
 8006de0:	080146a2 	.word	0x080146a2

08006de4 <__lshift>:
 8006de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	460c      	mov	r4, r1
 8006dea:	6849      	ldr	r1, [r1, #4]
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	4607      	mov	r7, r0
 8006df6:	4691      	mov	r9, r2
 8006df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dfc:	f108 0601 	add.w	r6, r8, #1
 8006e00:	42b3      	cmp	r3, r6
 8006e02:	db0b      	blt.n	8006e1c <__lshift+0x38>
 8006e04:	4638      	mov	r0, r7
 8006e06:	f7ff fd91 	bl	800692c <_Balloc>
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	b948      	cbnz	r0, 8006e22 <__lshift+0x3e>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <__lshift+0xd8>)
 8006e12:	482b      	ldr	r0, [pc, #172]	; (8006ec0 <__lshift+0xdc>)
 8006e14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e18:	f7fe f924 	bl	8005064 <__assert_func>
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	e7ee      	b.n	8006e00 <__lshift+0x1c>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f100 0114 	add.w	r1, r0, #20
 8006e28:	f100 0210 	add.w	r2, r0, #16
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	4553      	cmp	r3, sl
 8006e30:	db37      	blt.n	8006ea2 <__lshift+0xbe>
 8006e32:	6920      	ldr	r0, [r4, #16]
 8006e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e38:	f104 0314 	add.w	r3, r4, #20
 8006e3c:	f019 091f 	ands.w	r9, r9, #31
 8006e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e48:	d02f      	beq.n	8006eaa <__lshift+0xc6>
 8006e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e4e:	468a      	mov	sl, r1
 8006e50:	f04f 0c00 	mov.w	ip, #0
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	fa02 f209 	lsl.w	r2, r2, r9
 8006e5a:	ea42 020c 	orr.w	r2, r2, ip
 8006e5e:	f84a 2b04 	str.w	r2, [sl], #4
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	4298      	cmp	r0, r3
 8006e68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e6c:	d8f2      	bhi.n	8006e54 <__lshift+0x70>
 8006e6e:	1b03      	subs	r3, r0, r4
 8006e70:	3b15      	subs	r3, #21
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	3304      	adds	r3, #4
 8006e78:	f104 0215 	add.w	r2, r4, #21
 8006e7c:	4290      	cmp	r0, r2
 8006e7e:	bf38      	it	cc
 8006e80:	2304      	movcc	r3, #4
 8006e82:	f841 c003 	str.w	ip, [r1, r3]
 8006e86:	f1bc 0f00 	cmp.w	ip, #0
 8006e8a:	d001      	beq.n	8006e90 <__lshift+0xac>
 8006e8c:	f108 0602 	add.w	r6, r8, #2
 8006e90:	3e01      	subs	r6, #1
 8006e92:	4638      	mov	r0, r7
 8006e94:	612e      	str	r6, [r5, #16]
 8006e96:	4621      	mov	r1, r4
 8006e98:	f7ff fd88 	bl	80069ac <_Bfree>
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	e7c1      	b.n	8006e2e <__lshift+0x4a>
 8006eaa:	3904      	subs	r1, #4
 8006eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb4:	4298      	cmp	r0, r3
 8006eb6:	d8f9      	bhi.n	8006eac <__lshift+0xc8>
 8006eb8:	e7ea      	b.n	8006e90 <__lshift+0xac>
 8006eba:	bf00      	nop
 8006ebc:	08014594 	.word	0x08014594
 8006ec0:	080146a2 	.word	0x080146a2

08006ec4 <__mcmp>:
 8006ec4:	b530      	push	{r4, r5, lr}
 8006ec6:	6902      	ldr	r2, [r0, #16]
 8006ec8:	690c      	ldr	r4, [r1, #16]
 8006eca:	1b12      	subs	r2, r2, r4
 8006ecc:	d10e      	bne.n	8006eec <__mcmp+0x28>
 8006ece:	f100 0314 	add.w	r3, r0, #20
 8006ed2:	3114      	adds	r1, #20
 8006ed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006edc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ee4:	42a5      	cmp	r5, r4
 8006ee6:	d003      	beq.n	8006ef0 <__mcmp+0x2c>
 8006ee8:	d305      	bcc.n	8006ef6 <__mcmp+0x32>
 8006eea:	2201      	movs	r2, #1
 8006eec:	4610      	mov	r0, r2
 8006eee:	bd30      	pop	{r4, r5, pc}
 8006ef0:	4283      	cmp	r3, r0
 8006ef2:	d3f3      	bcc.n	8006edc <__mcmp+0x18>
 8006ef4:	e7fa      	b.n	8006eec <__mcmp+0x28>
 8006ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006efa:	e7f7      	b.n	8006eec <__mcmp+0x28>

08006efc <__mdiff>:
 8006efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	4606      	mov	r6, r0
 8006f04:	4611      	mov	r1, r2
 8006f06:	4620      	mov	r0, r4
 8006f08:	4690      	mov	r8, r2
 8006f0a:	f7ff ffdb 	bl	8006ec4 <__mcmp>
 8006f0e:	1e05      	subs	r5, r0, #0
 8006f10:	d110      	bne.n	8006f34 <__mdiff+0x38>
 8006f12:	4629      	mov	r1, r5
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff fd09 	bl	800692c <_Balloc>
 8006f1a:	b930      	cbnz	r0, 8006f2a <__mdiff+0x2e>
 8006f1c:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <__mdiff+0x10c>)
 8006f1e:	4602      	mov	r2, r0
 8006f20:	f240 2132 	movw	r1, #562	; 0x232
 8006f24:	4839      	ldr	r0, [pc, #228]	; (800700c <__mdiff+0x110>)
 8006f26:	f7fe f89d 	bl	8005064 <__assert_func>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	bfa4      	itt	ge
 8006f36:	4643      	movge	r3, r8
 8006f38:	46a0      	movge	r8, r4
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f40:	bfa6      	itte	ge
 8006f42:	461c      	movge	r4, r3
 8006f44:	2500      	movge	r5, #0
 8006f46:	2501      	movlt	r5, #1
 8006f48:	f7ff fcf0 	bl	800692c <_Balloc>
 8006f4c:	b920      	cbnz	r0, 8006f58 <__mdiff+0x5c>
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <__mdiff+0x10c>)
 8006f50:	4602      	mov	r2, r0
 8006f52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f56:	e7e5      	b.n	8006f24 <__mdiff+0x28>
 8006f58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f5c:	6926      	ldr	r6, [r4, #16]
 8006f5e:	60c5      	str	r5, [r0, #12]
 8006f60:	f104 0914 	add.w	r9, r4, #20
 8006f64:	f108 0514 	add.w	r5, r8, #20
 8006f68:	f100 0e14 	add.w	lr, r0, #20
 8006f6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f74:	f108 0210 	add.w	r2, r8, #16
 8006f78:	46f2      	mov	sl, lr
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f84:	fa1f f883 	uxth.w	r8, r3
 8006f88:	fa11 f18b 	uxtah	r1, r1, fp
 8006f8c:	0c1b      	lsrs	r3, r3, #16
 8006f8e:	eba1 0808 	sub.w	r8, r1, r8
 8006f92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f9a:	fa1f f888 	uxth.w	r8, r8
 8006f9e:	1419      	asrs	r1, r3, #16
 8006fa0:	454e      	cmp	r6, r9
 8006fa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fa6:	f84a 3b04 	str.w	r3, [sl], #4
 8006faa:	d8e7      	bhi.n	8006f7c <__mdiff+0x80>
 8006fac:	1b33      	subs	r3, r6, r4
 8006fae:	3b15      	subs	r3, #21
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	3415      	adds	r4, #21
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	bf38      	it	cc
 8006fbc:	2304      	movcc	r3, #4
 8006fbe:	441d      	add	r5, r3
 8006fc0:	4473      	add	r3, lr
 8006fc2:	469e      	mov	lr, r3
 8006fc4:	462e      	mov	r6, r5
 8006fc6:	4566      	cmp	r6, ip
 8006fc8:	d30e      	bcc.n	8006fe8 <__mdiff+0xec>
 8006fca:	f10c 0203 	add.w	r2, ip, #3
 8006fce:	1b52      	subs	r2, r2, r5
 8006fd0:	f022 0203 	bic.w	r2, r2, #3
 8006fd4:	3d03      	subs	r5, #3
 8006fd6:	45ac      	cmp	ip, r5
 8006fd8:	bf38      	it	cc
 8006fda:	2200      	movcc	r2, #0
 8006fdc:	441a      	add	r2, r3
 8006fde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fe2:	b17b      	cbz	r3, 8007004 <__mdiff+0x108>
 8006fe4:	6107      	str	r7, [r0, #16]
 8006fe6:	e7a3      	b.n	8006f30 <__mdiff+0x34>
 8006fe8:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fec:	fa11 f288 	uxtah	r2, r1, r8
 8006ff0:	1414      	asrs	r4, r2, #16
 8006ff2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ff6:	b292      	uxth	r2, r2
 8006ff8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ffc:	f84e 2b04 	str.w	r2, [lr], #4
 8007000:	1421      	asrs	r1, r4, #16
 8007002:	e7e0      	b.n	8006fc6 <__mdiff+0xca>
 8007004:	3f01      	subs	r7, #1
 8007006:	e7ea      	b.n	8006fde <__mdiff+0xe2>
 8007008:	08014594 	.word	0x08014594
 800700c:	080146a2 	.word	0x080146a2

08007010 <__ulp>:
 8007010:	b082      	sub	sp, #8
 8007012:	ed8d 0b00 	vstr	d0, [sp]
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	4912      	ldr	r1, [pc, #72]	; (8007064 <__ulp+0x54>)
 800701a:	4019      	ands	r1, r3
 800701c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007020:	2900      	cmp	r1, #0
 8007022:	dd05      	ble.n	8007030 <__ulp+0x20>
 8007024:	2200      	movs	r2, #0
 8007026:	460b      	mov	r3, r1
 8007028:	ec43 2b10 	vmov	d0, r2, r3
 800702c:	b002      	add	sp, #8
 800702e:	4770      	bx	lr
 8007030:	4249      	negs	r1, r1
 8007032:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007036:	ea4f 5021 	mov.w	r0, r1, asr #20
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	da04      	bge.n	800704e <__ulp+0x3e>
 8007044:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007048:	fa41 f300 	asr.w	r3, r1, r0
 800704c:	e7ec      	b.n	8007028 <__ulp+0x18>
 800704e:	f1a0 0114 	sub.w	r1, r0, #20
 8007052:	291e      	cmp	r1, #30
 8007054:	bfda      	itte	le
 8007056:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800705a:	fa20 f101 	lsrle.w	r1, r0, r1
 800705e:	2101      	movgt	r1, #1
 8007060:	460a      	mov	r2, r1
 8007062:	e7e1      	b.n	8007028 <__ulp+0x18>
 8007064:	7ff00000 	.word	0x7ff00000

08007068 <__b2d>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	6905      	ldr	r5, [r0, #16]
 800706c:	f100 0714 	add.w	r7, r0, #20
 8007070:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007074:	1f2e      	subs	r6, r5, #4
 8007076:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff fd48 	bl	8006b10 <__hi0bits>
 8007080:	f1c0 0320 	rsb	r3, r0, #32
 8007084:	280a      	cmp	r0, #10
 8007086:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007104 <__b2d+0x9c>
 800708a:	600b      	str	r3, [r1, #0]
 800708c:	dc14      	bgt.n	80070b8 <__b2d+0x50>
 800708e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007092:	fa24 f10e 	lsr.w	r1, r4, lr
 8007096:	42b7      	cmp	r7, r6
 8007098:	ea41 030c 	orr.w	r3, r1, ip
 800709c:	bf34      	ite	cc
 800709e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070a2:	2100      	movcs	r1, #0
 80070a4:	3015      	adds	r0, #21
 80070a6:	fa04 f000 	lsl.w	r0, r4, r0
 80070aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80070ae:	ea40 0201 	orr.w	r2, r0, r1
 80070b2:	ec43 2b10 	vmov	d0, r2, r3
 80070b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b8:	42b7      	cmp	r7, r6
 80070ba:	bf3a      	itte	cc
 80070bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80070c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80070c4:	2100      	movcs	r1, #0
 80070c6:	380b      	subs	r0, #11
 80070c8:	d017      	beq.n	80070fa <__b2d+0x92>
 80070ca:	f1c0 0c20 	rsb	ip, r0, #32
 80070ce:	fa04 f500 	lsl.w	r5, r4, r0
 80070d2:	42be      	cmp	r6, r7
 80070d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80070d8:	ea45 0504 	orr.w	r5, r5, r4
 80070dc:	bf8c      	ite	hi
 80070de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80070e2:	2400      	movls	r4, #0
 80070e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80070e8:	fa01 f000 	lsl.w	r0, r1, r0
 80070ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80070f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070f4:	ea40 0204 	orr.w	r2, r0, r4
 80070f8:	e7db      	b.n	80070b2 <__b2d+0x4a>
 80070fa:	ea44 030c 	orr.w	r3, r4, ip
 80070fe:	460a      	mov	r2, r1
 8007100:	e7d7      	b.n	80070b2 <__b2d+0x4a>
 8007102:	bf00      	nop
 8007104:	3ff00000 	.word	0x3ff00000

08007108 <__d2b>:
 8007108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4689      	mov	r9, r1
 800710e:	2101      	movs	r1, #1
 8007110:	ec57 6b10 	vmov	r6, r7, d0
 8007114:	4690      	mov	r8, r2
 8007116:	f7ff fc09 	bl	800692c <_Balloc>
 800711a:	4604      	mov	r4, r0
 800711c:	b930      	cbnz	r0, 800712c <__d2b+0x24>
 800711e:	4602      	mov	r2, r0
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <__d2b+0xb0>)
 8007122:	4826      	ldr	r0, [pc, #152]	; (80071bc <__d2b+0xb4>)
 8007124:	f240 310a 	movw	r1, #778	; 0x30a
 8007128:	f7fd ff9c 	bl	8005064 <__assert_func>
 800712c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007134:	bb35      	cbnz	r5, 8007184 <__d2b+0x7c>
 8007136:	2e00      	cmp	r6, #0
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	d028      	beq.n	800718e <__d2b+0x86>
 800713c:	4668      	mov	r0, sp
 800713e:	9600      	str	r6, [sp, #0]
 8007140:	f7ff fd06 	bl	8006b50 <__lo0bits>
 8007144:	9900      	ldr	r1, [sp, #0]
 8007146:	b300      	cbz	r0, 800718a <__d2b+0x82>
 8007148:	9a01      	ldr	r2, [sp, #4]
 800714a:	f1c0 0320 	rsb	r3, r0, #32
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	430b      	orrs	r3, r1
 8007154:	40c2      	lsrs	r2, r0
 8007156:	6163      	str	r3, [r4, #20]
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	61a3      	str	r3, [r4, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf14      	ite	ne
 8007162:	2202      	movne	r2, #2
 8007164:	2201      	moveq	r2, #1
 8007166:	6122      	str	r2, [r4, #16]
 8007168:	b1d5      	cbz	r5, 80071a0 <__d2b+0x98>
 800716a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800716e:	4405      	add	r5, r0
 8007170:	f8c9 5000 	str.w	r5, [r9]
 8007174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007178:	f8c8 0000 	str.w	r0, [r8]
 800717c:	4620      	mov	r0, r4
 800717e:	b003      	add	sp, #12
 8007180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007188:	e7d5      	b.n	8007136 <__d2b+0x2e>
 800718a:	6161      	str	r1, [r4, #20]
 800718c:	e7e5      	b.n	800715a <__d2b+0x52>
 800718e:	a801      	add	r0, sp, #4
 8007190:	f7ff fcde 	bl	8006b50 <__lo0bits>
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	2201      	movs	r2, #1
 800719a:	6122      	str	r2, [r4, #16]
 800719c:	3020      	adds	r0, #32
 800719e:	e7e3      	b.n	8007168 <__d2b+0x60>
 80071a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071a8:	f8c9 0000 	str.w	r0, [r9]
 80071ac:	6918      	ldr	r0, [r3, #16]
 80071ae:	f7ff fcaf 	bl	8006b10 <__hi0bits>
 80071b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071b6:	e7df      	b.n	8007178 <__d2b+0x70>
 80071b8:	08014594 	.word	0x08014594
 80071bc:	080146a2 	.word	0x080146a2

080071c0 <__ratio>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4688      	mov	r8, r1
 80071c6:	4669      	mov	r1, sp
 80071c8:	4681      	mov	r9, r0
 80071ca:	f7ff ff4d 	bl	8007068 <__b2d>
 80071ce:	a901      	add	r1, sp, #4
 80071d0:	4640      	mov	r0, r8
 80071d2:	ec55 4b10 	vmov	r4, r5, d0
 80071d6:	f7ff ff47 	bl	8007068 <__b2d>
 80071da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80071e2:	eba3 0c02 	sub.w	ip, r3, r2
 80071e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80071f0:	ec51 0b10 	vmov	r0, r1, d0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfd6      	itet	le
 80071f8:	460a      	movle	r2, r1
 80071fa:	462a      	movgt	r2, r5
 80071fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007200:	468b      	mov	fp, r1
 8007202:	462f      	mov	r7, r5
 8007204:	bfd4      	ite	le
 8007206:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800720a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800720e:	4620      	mov	r0, r4
 8007210:	ee10 2a10 	vmov	r2, s0
 8007214:	465b      	mov	r3, fp
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 fb40 	bl	800089c <__aeabi_ddiv>
 800721c:	ec41 0b10 	vmov	d0, r0, r1
 8007220:	b003      	add	sp, #12
 8007222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007226 <__copybits>:
 8007226:	3901      	subs	r1, #1
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	1149      	asrs	r1, r1, #5
 800722c:	6914      	ldr	r4, [r2, #16]
 800722e:	3101      	adds	r1, #1
 8007230:	f102 0314 	add.w	r3, r2, #20
 8007234:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007238:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800723c:	1f05      	subs	r5, r0, #4
 800723e:	42a3      	cmp	r3, r4
 8007240:	d30c      	bcc.n	800725c <__copybits+0x36>
 8007242:	1aa3      	subs	r3, r4, r2
 8007244:	3b11      	subs	r3, #17
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	3211      	adds	r2, #17
 800724c:	42a2      	cmp	r2, r4
 800724e:	bf88      	it	hi
 8007250:	2300      	movhi	r3, #0
 8007252:	4418      	add	r0, r3
 8007254:	2300      	movs	r3, #0
 8007256:	4288      	cmp	r0, r1
 8007258:	d305      	bcc.n	8007266 <__copybits+0x40>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007260:	f845 6f04 	str.w	r6, [r5, #4]!
 8007264:	e7eb      	b.n	800723e <__copybits+0x18>
 8007266:	f840 3b04 	str.w	r3, [r0], #4
 800726a:	e7f4      	b.n	8007256 <__copybits+0x30>

0800726c <__any_on>:
 800726c:	f100 0214 	add.w	r2, r0, #20
 8007270:	6900      	ldr	r0, [r0, #16]
 8007272:	114b      	asrs	r3, r1, #5
 8007274:	4298      	cmp	r0, r3
 8007276:	b510      	push	{r4, lr}
 8007278:	db11      	blt.n	800729e <__any_on+0x32>
 800727a:	dd0a      	ble.n	8007292 <__any_on+0x26>
 800727c:	f011 011f 	ands.w	r1, r1, #31
 8007280:	d007      	beq.n	8007292 <__any_on+0x26>
 8007282:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007286:	fa24 f001 	lsr.w	r0, r4, r1
 800728a:	fa00 f101 	lsl.w	r1, r0, r1
 800728e:	428c      	cmp	r4, r1
 8007290:	d10b      	bne.n	80072aa <__any_on+0x3e>
 8007292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007296:	4293      	cmp	r3, r2
 8007298:	d803      	bhi.n	80072a2 <__any_on+0x36>
 800729a:	2000      	movs	r0, #0
 800729c:	bd10      	pop	{r4, pc}
 800729e:	4603      	mov	r3, r0
 80072a0:	e7f7      	b.n	8007292 <__any_on+0x26>
 80072a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072a6:	2900      	cmp	r1, #0
 80072a8:	d0f5      	beq.n	8007296 <__any_on+0x2a>
 80072aa:	2001      	movs	r0, #1
 80072ac:	e7f6      	b.n	800729c <__any_on+0x30>

080072ae <_calloc_r>:
 80072ae:	b513      	push	{r0, r1, r4, lr}
 80072b0:	434a      	muls	r2, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	9201      	str	r2, [sp, #4]
 80072b6:	f000 f855 	bl	8007364 <_malloc_r>
 80072ba:	4604      	mov	r4, r0
 80072bc:	b118      	cbz	r0, 80072c6 <_calloc_r+0x18>
 80072be:	9a01      	ldr	r2, [sp, #4]
 80072c0:	2100      	movs	r1, #0
 80072c2:	f7fc fa91 	bl	80037e8 <memset>
 80072c6:	4620      	mov	r0, r4
 80072c8:	b002      	add	sp, #8
 80072ca:	bd10      	pop	{r4, pc}

080072cc <_free_r>:
 80072cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d044      	beq.n	800735c <_free_r+0x90>
 80072d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d6:	9001      	str	r0, [sp, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f1a1 0404 	sub.w	r4, r1, #4
 80072de:	bfb8      	it	lt
 80072e0:	18e4      	addlt	r4, r4, r3
 80072e2:	f000 fb45 	bl	8007970 <__malloc_lock>
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <_free_r+0x94>)
 80072e8:	9801      	ldr	r0, [sp, #4]
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	b933      	cbnz	r3, 80072fc <_free_r+0x30>
 80072ee:	6063      	str	r3, [r4, #4]
 80072f0:	6014      	str	r4, [r2, #0]
 80072f2:	b003      	add	sp, #12
 80072f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f8:	f000 bb40 	b.w	800797c <__malloc_unlock>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d908      	bls.n	8007312 <_free_r+0x46>
 8007300:	6825      	ldr	r5, [r4, #0]
 8007302:	1961      	adds	r1, r4, r5
 8007304:	428b      	cmp	r3, r1
 8007306:	bf01      	itttt	eq
 8007308:	6819      	ldreq	r1, [r3, #0]
 800730a:	685b      	ldreq	r3, [r3, #4]
 800730c:	1949      	addeq	r1, r1, r5
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	e7ed      	b.n	80072ee <_free_r+0x22>
 8007312:	461a      	mov	r2, r3
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b10b      	cbz	r3, 800731c <_free_r+0x50>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d9fa      	bls.n	8007312 <_free_r+0x46>
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	1855      	adds	r5, r2, r1
 8007320:	42a5      	cmp	r5, r4
 8007322:	d10b      	bne.n	800733c <_free_r+0x70>
 8007324:	6824      	ldr	r4, [r4, #0]
 8007326:	4421      	add	r1, r4
 8007328:	1854      	adds	r4, r2, r1
 800732a:	42a3      	cmp	r3, r4
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	d1e0      	bne.n	80072f2 <_free_r+0x26>
 8007330:	681c      	ldr	r4, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	6053      	str	r3, [r2, #4]
 8007336:	4421      	add	r1, r4
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	e7da      	b.n	80072f2 <_free_r+0x26>
 800733c:	d902      	bls.n	8007344 <_free_r+0x78>
 800733e:	230c      	movs	r3, #12
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	e7d6      	b.n	80072f2 <_free_r+0x26>
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	1961      	adds	r1, r4, r5
 8007348:	428b      	cmp	r3, r1
 800734a:	bf04      	itt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	bf04      	itt	eq
 8007354:	1949      	addeq	r1, r1, r5
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	6054      	str	r4, [r2, #4]
 800735a:	e7ca      	b.n	80072f2 <_free_r+0x26>
 800735c:	b003      	add	sp, #12
 800735e:	bd30      	pop	{r4, r5, pc}
 8007360:	20000ce8 	.word	0x20000ce8

08007364 <_malloc_r>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	1ccd      	adds	r5, r1, #3
 8007368:	f025 0503 	bic.w	r5, r5, #3
 800736c:	3508      	adds	r5, #8
 800736e:	2d0c      	cmp	r5, #12
 8007370:	bf38      	it	cc
 8007372:	250c      	movcc	r5, #12
 8007374:	2d00      	cmp	r5, #0
 8007376:	4606      	mov	r6, r0
 8007378:	db01      	blt.n	800737e <_malloc_r+0x1a>
 800737a:	42a9      	cmp	r1, r5
 800737c:	d903      	bls.n	8007386 <_malloc_r+0x22>
 800737e:	230c      	movs	r3, #12
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	2000      	movs	r0, #0
 8007384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007386:	f000 faf3 	bl	8007970 <__malloc_lock>
 800738a:	4921      	ldr	r1, [pc, #132]	; (8007410 <_malloc_r+0xac>)
 800738c:	680a      	ldr	r2, [r1, #0]
 800738e:	4614      	mov	r4, r2
 8007390:	b99c      	cbnz	r4, 80073ba <_malloc_r+0x56>
 8007392:	4f20      	ldr	r7, [pc, #128]	; (8007414 <_malloc_r+0xb0>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	b923      	cbnz	r3, 80073a2 <_malloc_r+0x3e>
 8007398:	4621      	mov	r1, r4
 800739a:	4630      	mov	r0, r6
 800739c:	f7fb fd7a 	bl	8002e94 <_sbrk_r>
 80073a0:	6038      	str	r0, [r7, #0]
 80073a2:	4629      	mov	r1, r5
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7fb fd75 	bl	8002e94 <_sbrk_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d123      	bne.n	80073f6 <_malloc_r+0x92>
 80073ae:	230c      	movs	r3, #12
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 fae2 	bl	800797c <__malloc_unlock>
 80073b8:	e7e3      	b.n	8007382 <_malloc_r+0x1e>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	1b5b      	subs	r3, r3, r5
 80073be:	d417      	bmi.n	80073f0 <_malloc_r+0x8c>
 80073c0:	2b0b      	cmp	r3, #11
 80073c2:	d903      	bls.n	80073cc <_malloc_r+0x68>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	441c      	add	r4, r3
 80073c8:	6025      	str	r5, [r4, #0]
 80073ca:	e004      	b.n	80073d6 <_malloc_r+0x72>
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	42a2      	cmp	r2, r4
 80073d0:	bf0c      	ite	eq
 80073d2:	600b      	streq	r3, [r1, #0]
 80073d4:	6053      	strne	r3, [r2, #4]
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 fad0 	bl	800797c <__malloc_unlock>
 80073dc:	f104 000b 	add.w	r0, r4, #11
 80073e0:	1d23      	adds	r3, r4, #4
 80073e2:	f020 0007 	bic.w	r0, r0, #7
 80073e6:	1ac2      	subs	r2, r0, r3
 80073e8:	d0cc      	beq.n	8007384 <_malloc_r+0x20>
 80073ea:	1a1b      	subs	r3, r3, r0
 80073ec:	50a3      	str	r3, [r4, r2]
 80073ee:	e7c9      	b.n	8007384 <_malloc_r+0x20>
 80073f0:	4622      	mov	r2, r4
 80073f2:	6864      	ldr	r4, [r4, #4]
 80073f4:	e7cc      	b.n	8007390 <_malloc_r+0x2c>
 80073f6:	1cc4      	adds	r4, r0, #3
 80073f8:	f024 0403 	bic.w	r4, r4, #3
 80073fc:	42a0      	cmp	r0, r4
 80073fe:	d0e3      	beq.n	80073c8 <_malloc_r+0x64>
 8007400:	1a21      	subs	r1, r4, r0
 8007402:	4630      	mov	r0, r6
 8007404:	f7fb fd46 	bl	8002e94 <_sbrk_r>
 8007408:	3001      	adds	r0, #1
 800740a:	d1dd      	bne.n	80073c8 <_malloc_r+0x64>
 800740c:	e7cf      	b.n	80073ae <_malloc_r+0x4a>
 800740e:	bf00      	nop
 8007410:	20000ce8 	.word	0x20000ce8
 8007414:	20000cec 	.word	0x20000cec

08007418 <__sfputc_r>:
 8007418:	6893      	ldr	r3, [r2, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	b410      	push	{r4}
 8007420:	6093      	str	r3, [r2, #8]
 8007422:	da08      	bge.n	8007436 <__sfputc_r+0x1e>
 8007424:	6994      	ldr	r4, [r2, #24]
 8007426:	42a3      	cmp	r3, r4
 8007428:	db01      	blt.n	800742e <__sfputc_r+0x16>
 800742a:	290a      	cmp	r1, #10
 800742c:	d103      	bne.n	8007436 <__sfputc_r+0x1e>
 800742e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007432:	f000 b9ad 	b.w	8007790 <__swbuf_r>
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	1c58      	adds	r0, r3, #1
 800743a:	6010      	str	r0, [r2, #0]
 800743c:	7019      	strb	r1, [r3, #0]
 800743e:	4608      	mov	r0, r1
 8007440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007444:	4770      	bx	lr

08007446 <__sfputs_r>:
 8007446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007448:	4606      	mov	r6, r0
 800744a:	460f      	mov	r7, r1
 800744c:	4614      	mov	r4, r2
 800744e:	18d5      	adds	r5, r2, r3
 8007450:	42ac      	cmp	r4, r5
 8007452:	d101      	bne.n	8007458 <__sfputs_r+0x12>
 8007454:	2000      	movs	r0, #0
 8007456:	e007      	b.n	8007468 <__sfputs_r+0x22>
 8007458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745c:	463a      	mov	r2, r7
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ffda 	bl	8007418 <__sfputc_r>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d1f3      	bne.n	8007450 <__sfputs_r+0xa>
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800746c <_vfiprintf_r>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	460d      	mov	r5, r1
 8007472:	b09d      	sub	sp, #116	; 0x74
 8007474:	4614      	mov	r4, r2
 8007476:	4698      	mov	r8, r3
 8007478:	4606      	mov	r6, r0
 800747a:	b118      	cbz	r0, 8007484 <_vfiprintf_r+0x18>
 800747c:	6983      	ldr	r3, [r0, #24]
 800747e:	b90b      	cbnz	r3, 8007484 <_vfiprintf_r+0x18>
 8007480:	f7fe fda2 	bl	8005fc8 <__sinit>
 8007484:	4b89      	ldr	r3, [pc, #548]	; (80076ac <_vfiprintf_r+0x240>)
 8007486:	429d      	cmp	r5, r3
 8007488:	d11b      	bne.n	80074c2 <_vfiprintf_r+0x56>
 800748a:	6875      	ldr	r5, [r6, #4]
 800748c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800748e:	07d9      	lsls	r1, r3, #31
 8007490:	d405      	bmi.n	800749e <_vfiprintf_r+0x32>
 8007492:	89ab      	ldrh	r3, [r5, #12]
 8007494:	059a      	lsls	r2, r3, #22
 8007496:	d402      	bmi.n	800749e <_vfiprintf_r+0x32>
 8007498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800749a:	f7ff f9b8 	bl	800680e <__retarget_lock_acquire_recursive>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	071b      	lsls	r3, r3, #28
 80074a2:	d501      	bpl.n	80074a8 <_vfiprintf_r+0x3c>
 80074a4:	692b      	ldr	r3, [r5, #16]
 80074a6:	b9eb      	cbnz	r3, 80074e4 <_vfiprintf_r+0x78>
 80074a8:	4629      	mov	r1, r5
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f9d0 	bl	8007850 <__swsetup_r>
 80074b0:	b1c0      	cbz	r0, 80074e4 <_vfiprintf_r+0x78>
 80074b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074b4:	07dc      	lsls	r4, r3, #31
 80074b6:	d50e      	bpl.n	80074d6 <_vfiprintf_r+0x6a>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074bc:	b01d      	add	sp, #116	; 0x74
 80074be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c2:	4b7b      	ldr	r3, [pc, #492]	; (80076b0 <_vfiprintf_r+0x244>)
 80074c4:	429d      	cmp	r5, r3
 80074c6:	d101      	bne.n	80074cc <_vfiprintf_r+0x60>
 80074c8:	68b5      	ldr	r5, [r6, #8]
 80074ca:	e7df      	b.n	800748c <_vfiprintf_r+0x20>
 80074cc:	4b79      	ldr	r3, [pc, #484]	; (80076b4 <_vfiprintf_r+0x248>)
 80074ce:	429d      	cmp	r5, r3
 80074d0:	bf08      	it	eq
 80074d2:	68f5      	ldreq	r5, [r6, #12]
 80074d4:	e7da      	b.n	800748c <_vfiprintf_r+0x20>
 80074d6:	89ab      	ldrh	r3, [r5, #12]
 80074d8:	0598      	lsls	r0, r3, #22
 80074da:	d4ed      	bmi.n	80074b8 <_vfiprintf_r+0x4c>
 80074dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074de:	f7ff f997 	bl	8006810 <__retarget_lock_release_recursive>
 80074e2:	e7e9      	b.n	80074b8 <_vfiprintf_r+0x4c>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	2320      	movs	r3, #32
 80074ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80074f2:	2330      	movs	r3, #48	; 0x30
 80074f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076b8 <_vfiprintf_r+0x24c>
 80074f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074fc:	f04f 0901 	mov.w	r9, #1
 8007500:	4623      	mov	r3, r4
 8007502:	469a      	mov	sl, r3
 8007504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007508:	b10a      	cbz	r2, 800750e <_vfiprintf_r+0xa2>
 800750a:	2a25      	cmp	r2, #37	; 0x25
 800750c:	d1f9      	bne.n	8007502 <_vfiprintf_r+0x96>
 800750e:	ebba 0b04 	subs.w	fp, sl, r4
 8007512:	d00b      	beq.n	800752c <_vfiprintf_r+0xc0>
 8007514:	465b      	mov	r3, fp
 8007516:	4622      	mov	r2, r4
 8007518:	4629      	mov	r1, r5
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ff93 	bl	8007446 <__sfputs_r>
 8007520:	3001      	adds	r0, #1
 8007522:	f000 80aa 	beq.w	800767a <_vfiprintf_r+0x20e>
 8007526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007528:	445a      	add	r2, fp
 800752a:	9209      	str	r2, [sp, #36]	; 0x24
 800752c:	f89a 3000 	ldrb.w	r3, [sl]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80a2 	beq.w	800767a <_vfiprintf_r+0x20e>
 8007536:	2300      	movs	r3, #0
 8007538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007540:	f10a 0a01 	add.w	sl, sl, #1
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	9307      	str	r3, [sp, #28]
 8007548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800754c:	931a      	str	r3, [sp, #104]	; 0x68
 800754e:	4654      	mov	r4, sl
 8007550:	2205      	movs	r2, #5
 8007552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007556:	4858      	ldr	r0, [pc, #352]	; (80076b8 <_vfiprintf_r+0x24c>)
 8007558:	f7f8 fe6a 	bl	8000230 <memchr>
 800755c:	9a04      	ldr	r2, [sp, #16]
 800755e:	b9d8      	cbnz	r0, 8007598 <_vfiprintf_r+0x12c>
 8007560:	06d1      	lsls	r1, r2, #27
 8007562:	bf44      	itt	mi
 8007564:	2320      	movmi	r3, #32
 8007566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756a:	0713      	lsls	r3, r2, #28
 800756c:	bf44      	itt	mi
 800756e:	232b      	movmi	r3, #43	; 0x2b
 8007570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007574:	f89a 3000 	ldrb.w	r3, [sl]
 8007578:	2b2a      	cmp	r3, #42	; 0x2a
 800757a:	d015      	beq.n	80075a8 <_vfiprintf_r+0x13c>
 800757c:	9a07      	ldr	r2, [sp, #28]
 800757e:	4654      	mov	r4, sl
 8007580:	2000      	movs	r0, #0
 8007582:	f04f 0c0a 	mov.w	ip, #10
 8007586:	4621      	mov	r1, r4
 8007588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800758c:	3b30      	subs	r3, #48	; 0x30
 800758e:	2b09      	cmp	r3, #9
 8007590:	d94e      	bls.n	8007630 <_vfiprintf_r+0x1c4>
 8007592:	b1b0      	cbz	r0, 80075c2 <_vfiprintf_r+0x156>
 8007594:	9207      	str	r2, [sp, #28]
 8007596:	e014      	b.n	80075c2 <_vfiprintf_r+0x156>
 8007598:	eba0 0308 	sub.w	r3, r0, r8
 800759c:	fa09 f303 	lsl.w	r3, r9, r3
 80075a0:	4313      	orrs	r3, r2
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	46a2      	mov	sl, r4
 80075a6:	e7d2      	b.n	800754e <_vfiprintf_r+0xe2>
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	1d19      	adds	r1, r3, #4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	9103      	str	r1, [sp, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bfbb      	ittet	lt
 80075b4:	425b      	neglt	r3, r3
 80075b6:	f042 0202 	orrlt.w	r2, r2, #2
 80075ba:	9307      	strge	r3, [sp, #28]
 80075bc:	9307      	strlt	r3, [sp, #28]
 80075be:	bfb8      	it	lt
 80075c0:	9204      	strlt	r2, [sp, #16]
 80075c2:	7823      	ldrb	r3, [r4, #0]
 80075c4:	2b2e      	cmp	r3, #46	; 0x2e
 80075c6:	d10c      	bne.n	80075e2 <_vfiprintf_r+0x176>
 80075c8:	7863      	ldrb	r3, [r4, #1]
 80075ca:	2b2a      	cmp	r3, #42	; 0x2a
 80075cc:	d135      	bne.n	800763a <_vfiprintf_r+0x1ce>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	1d1a      	adds	r2, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	9203      	str	r2, [sp, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfb8      	it	lt
 80075da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075de:	3402      	adds	r4, #2
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076c8 <_vfiprintf_r+0x25c>
 80075e6:	7821      	ldrb	r1, [r4, #0]
 80075e8:	2203      	movs	r2, #3
 80075ea:	4650      	mov	r0, sl
 80075ec:	f7f8 fe20 	bl	8000230 <memchr>
 80075f0:	b140      	cbz	r0, 8007604 <_vfiprintf_r+0x198>
 80075f2:	2340      	movs	r3, #64	; 0x40
 80075f4:	eba0 000a 	sub.w	r0, r0, sl
 80075f8:	fa03 f000 	lsl.w	r0, r3, r0
 80075fc:	9b04      	ldr	r3, [sp, #16]
 80075fe:	4303      	orrs	r3, r0
 8007600:	3401      	adds	r4, #1
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007608:	482c      	ldr	r0, [pc, #176]	; (80076bc <_vfiprintf_r+0x250>)
 800760a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800760e:	2206      	movs	r2, #6
 8007610:	f7f8 fe0e 	bl	8000230 <memchr>
 8007614:	2800      	cmp	r0, #0
 8007616:	d03f      	beq.n	8007698 <_vfiprintf_r+0x22c>
 8007618:	4b29      	ldr	r3, [pc, #164]	; (80076c0 <_vfiprintf_r+0x254>)
 800761a:	bb1b      	cbnz	r3, 8007664 <_vfiprintf_r+0x1f8>
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	3307      	adds	r3, #7
 8007620:	f023 0307 	bic.w	r3, r3, #7
 8007624:	3308      	adds	r3, #8
 8007626:	9303      	str	r3, [sp, #12]
 8007628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762a:	443b      	add	r3, r7
 800762c:	9309      	str	r3, [sp, #36]	; 0x24
 800762e:	e767      	b.n	8007500 <_vfiprintf_r+0x94>
 8007630:	fb0c 3202 	mla	r2, ip, r2, r3
 8007634:	460c      	mov	r4, r1
 8007636:	2001      	movs	r0, #1
 8007638:	e7a5      	b.n	8007586 <_vfiprintf_r+0x11a>
 800763a:	2300      	movs	r3, #0
 800763c:	3401      	adds	r4, #1
 800763e:	9305      	str	r3, [sp, #20]
 8007640:	4619      	mov	r1, r3
 8007642:	f04f 0c0a 	mov.w	ip, #10
 8007646:	4620      	mov	r0, r4
 8007648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764c:	3a30      	subs	r2, #48	; 0x30
 800764e:	2a09      	cmp	r2, #9
 8007650:	d903      	bls.n	800765a <_vfiprintf_r+0x1ee>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0c5      	beq.n	80075e2 <_vfiprintf_r+0x176>
 8007656:	9105      	str	r1, [sp, #20]
 8007658:	e7c3      	b.n	80075e2 <_vfiprintf_r+0x176>
 800765a:	fb0c 2101 	mla	r1, ip, r1, r2
 800765e:	4604      	mov	r4, r0
 8007660:	2301      	movs	r3, #1
 8007662:	e7f0      	b.n	8007646 <_vfiprintf_r+0x1da>
 8007664:	ab03      	add	r3, sp, #12
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	462a      	mov	r2, r5
 800766a:	4b16      	ldr	r3, [pc, #88]	; (80076c4 <_vfiprintf_r+0x258>)
 800766c:	a904      	add	r1, sp, #16
 800766e:	4630      	mov	r0, r6
 8007670:	f7fc f962 	bl	8003938 <_printf_float>
 8007674:	4607      	mov	r7, r0
 8007676:	1c78      	adds	r0, r7, #1
 8007678:	d1d6      	bne.n	8007628 <_vfiprintf_r+0x1bc>
 800767a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767c:	07d9      	lsls	r1, r3, #31
 800767e:	d405      	bmi.n	800768c <_vfiprintf_r+0x220>
 8007680:	89ab      	ldrh	r3, [r5, #12]
 8007682:	059a      	lsls	r2, r3, #22
 8007684:	d402      	bmi.n	800768c <_vfiprintf_r+0x220>
 8007686:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007688:	f7ff f8c2 	bl	8006810 <__retarget_lock_release_recursive>
 800768c:	89ab      	ldrh	r3, [r5, #12]
 800768e:	065b      	lsls	r3, r3, #25
 8007690:	f53f af12 	bmi.w	80074b8 <_vfiprintf_r+0x4c>
 8007694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007696:	e711      	b.n	80074bc <_vfiprintf_r+0x50>
 8007698:	ab03      	add	r3, sp, #12
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	462a      	mov	r2, r5
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <_vfiprintf_r+0x258>)
 80076a0:	a904      	add	r1, sp, #16
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7fc fbec 	bl	8003e80 <_printf_i>
 80076a8:	e7e4      	b.n	8007674 <_vfiprintf_r+0x208>
 80076aa:	bf00      	nop
 80076ac:	080145c8 	.word	0x080145c8
 80076b0:	080145e8 	.word	0x080145e8
 80076b4:	080145a8 	.word	0x080145a8
 80076b8:	0801481c 	.word	0x0801481c
 80076bc:	08014826 	.word	0x08014826
 80076c0:	08003939 	.word	0x08003939
 80076c4:	08007447 	.word	0x08007447
 80076c8:	08014822 	.word	0x08014822
 80076cc:	00000000 	.word	0x00000000

080076d0 <nan>:
 80076d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80076d8 <nan+0x8>
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	00000000 	.word	0x00000000
 80076dc:	7ff80000 	.word	0x7ff80000

080076e0 <__sread>:
 80076e0:	b510      	push	{r4, lr}
 80076e2:	460c      	mov	r4, r1
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	f7fb fbf7 	bl	8002eda <_read_r>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	bfab      	itete	ge
 80076f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076f2:	89a3      	ldrhlt	r3, [r4, #12]
 80076f4:	181b      	addge	r3, r3, r0
 80076f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076fa:	bfac      	ite	ge
 80076fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076fe:	81a3      	strhlt	r3, [r4, #12]
 8007700:	bd10      	pop	{r4, pc}

08007702 <__swrite>:
 8007702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	461f      	mov	r7, r3
 8007708:	898b      	ldrh	r3, [r1, #12]
 800770a:	05db      	lsls	r3, r3, #23
 800770c:	4605      	mov	r5, r0
 800770e:	460c      	mov	r4, r1
 8007710:	4616      	mov	r6, r2
 8007712:	d505      	bpl.n	8007720 <__swrite+0x1e>
 8007714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007718:	2302      	movs	r3, #2
 800771a:	2200      	movs	r2, #0
 800771c:	f7fb fbdb 	bl	8002ed6 <_lseek_r>
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800772a:	81a3      	strh	r3, [r4, #12]
 800772c:	4632      	mov	r2, r6
 800772e:	463b      	mov	r3, r7
 8007730:	4628      	mov	r0, r5
 8007732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007736:	f7fb bbd5 	b.w	8002ee4 <_write_r>

0800773a <__sseek>:
 800773a:	b510      	push	{r4, lr}
 800773c:	460c      	mov	r4, r1
 800773e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007742:	f7fb fbc8 	bl	8002ed6 <_lseek_r>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	bf15      	itete	ne
 800774c:	6560      	strne	r0, [r4, #84]	; 0x54
 800774e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007756:	81a3      	strheq	r3, [r4, #12]
 8007758:	bf18      	it	ne
 800775a:	81a3      	strhne	r3, [r4, #12]
 800775c:	bd10      	pop	{r4, pc}

0800775e <__sclose>:
 800775e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007762:	f7fb bbaf 	b.w	8002ec4 <_close_r>

08007766 <strncmp>:
 8007766:	b510      	push	{r4, lr}
 8007768:	b17a      	cbz	r2, 800778a <strncmp+0x24>
 800776a:	4603      	mov	r3, r0
 800776c:	3901      	subs	r1, #1
 800776e:	1884      	adds	r4, r0, r2
 8007770:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007774:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007778:	4290      	cmp	r0, r2
 800777a:	d101      	bne.n	8007780 <strncmp+0x1a>
 800777c:	42a3      	cmp	r3, r4
 800777e:	d101      	bne.n	8007784 <strncmp+0x1e>
 8007780:	1a80      	subs	r0, r0, r2
 8007782:	bd10      	pop	{r4, pc}
 8007784:	2800      	cmp	r0, #0
 8007786:	d1f3      	bne.n	8007770 <strncmp+0xa>
 8007788:	e7fa      	b.n	8007780 <strncmp+0x1a>
 800778a:	4610      	mov	r0, r2
 800778c:	e7f9      	b.n	8007782 <strncmp+0x1c>
	...

08007790 <__swbuf_r>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	460e      	mov	r6, r1
 8007794:	4614      	mov	r4, r2
 8007796:	4605      	mov	r5, r0
 8007798:	b118      	cbz	r0, 80077a2 <__swbuf_r+0x12>
 800779a:	6983      	ldr	r3, [r0, #24]
 800779c:	b90b      	cbnz	r3, 80077a2 <__swbuf_r+0x12>
 800779e:	f7fe fc13 	bl	8005fc8 <__sinit>
 80077a2:	4b21      	ldr	r3, [pc, #132]	; (8007828 <__swbuf_r+0x98>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d12b      	bne.n	8007800 <__swbuf_r+0x70>
 80077a8:	686c      	ldr	r4, [r5, #4]
 80077aa:	69a3      	ldr	r3, [r4, #24]
 80077ac:	60a3      	str	r3, [r4, #8]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	071a      	lsls	r2, r3, #28
 80077b2:	d52f      	bpl.n	8007814 <__swbuf_r+0x84>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	b36b      	cbz	r3, 8007814 <__swbuf_r+0x84>
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1ac0      	subs	r0, r0, r3
 80077be:	6963      	ldr	r3, [r4, #20]
 80077c0:	b2f6      	uxtb	r6, r6
 80077c2:	4283      	cmp	r3, r0
 80077c4:	4637      	mov	r7, r6
 80077c6:	dc04      	bgt.n	80077d2 <__swbuf_r+0x42>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7fe fb68 	bl	8005ea0 <_fflush_r>
 80077d0:	bb30      	cbnz	r0, 8007820 <__swbuf_r+0x90>
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60a3      	str	r3, [r4, #8]
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	6022      	str	r2, [r4, #0]
 80077de:	701e      	strb	r6, [r3, #0]
 80077e0:	6963      	ldr	r3, [r4, #20]
 80077e2:	3001      	adds	r0, #1
 80077e4:	4283      	cmp	r3, r0
 80077e6:	d004      	beq.n	80077f2 <__swbuf_r+0x62>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	07db      	lsls	r3, r3, #31
 80077ec:	d506      	bpl.n	80077fc <__swbuf_r+0x6c>
 80077ee:	2e0a      	cmp	r6, #10
 80077f0:	d104      	bne.n	80077fc <__swbuf_r+0x6c>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f7fe fb53 	bl	8005ea0 <_fflush_r>
 80077fa:	b988      	cbnz	r0, 8007820 <__swbuf_r+0x90>
 80077fc:	4638      	mov	r0, r7
 80077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <__swbuf_r+0x9c>)
 8007802:	429c      	cmp	r4, r3
 8007804:	d101      	bne.n	800780a <__swbuf_r+0x7a>
 8007806:	68ac      	ldr	r4, [r5, #8]
 8007808:	e7cf      	b.n	80077aa <__swbuf_r+0x1a>
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <__swbuf_r+0xa0>)
 800780c:	429c      	cmp	r4, r3
 800780e:	bf08      	it	eq
 8007810:	68ec      	ldreq	r4, [r5, #12]
 8007812:	e7ca      	b.n	80077aa <__swbuf_r+0x1a>
 8007814:	4621      	mov	r1, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f81a 	bl	8007850 <__swsetup_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	d0cb      	beq.n	80077b8 <__swbuf_r+0x28>
 8007820:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007824:	e7ea      	b.n	80077fc <__swbuf_r+0x6c>
 8007826:	bf00      	nop
 8007828:	080145c8 	.word	0x080145c8
 800782c:	080145e8 	.word	0x080145e8
 8007830:	080145a8 	.word	0x080145a8

08007834 <__ascii_wctomb>:
 8007834:	b149      	cbz	r1, 800784a <__ascii_wctomb+0x16>
 8007836:	2aff      	cmp	r2, #255	; 0xff
 8007838:	bf85      	ittet	hi
 800783a:	238a      	movhi	r3, #138	; 0x8a
 800783c:	6003      	strhi	r3, [r0, #0]
 800783e:	700a      	strbls	r2, [r1, #0]
 8007840:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007844:	bf98      	it	ls
 8007846:	2001      	movls	r0, #1
 8007848:	4770      	bx	lr
 800784a:	4608      	mov	r0, r1
 800784c:	4770      	bx	lr
	...

08007850 <__swsetup_r>:
 8007850:	4b32      	ldr	r3, [pc, #200]	; (800791c <__swsetup_r+0xcc>)
 8007852:	b570      	push	{r4, r5, r6, lr}
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	4606      	mov	r6, r0
 8007858:	460c      	mov	r4, r1
 800785a:	b125      	cbz	r5, 8007866 <__swsetup_r+0x16>
 800785c:	69ab      	ldr	r3, [r5, #24]
 800785e:	b913      	cbnz	r3, 8007866 <__swsetup_r+0x16>
 8007860:	4628      	mov	r0, r5
 8007862:	f7fe fbb1 	bl	8005fc8 <__sinit>
 8007866:	4b2e      	ldr	r3, [pc, #184]	; (8007920 <__swsetup_r+0xd0>)
 8007868:	429c      	cmp	r4, r3
 800786a:	d10f      	bne.n	800788c <__swsetup_r+0x3c>
 800786c:	686c      	ldr	r4, [r5, #4]
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007874:	0719      	lsls	r1, r3, #28
 8007876:	d42c      	bmi.n	80078d2 <__swsetup_r+0x82>
 8007878:	06dd      	lsls	r5, r3, #27
 800787a:	d411      	bmi.n	80078a0 <__swsetup_r+0x50>
 800787c:	2309      	movs	r3, #9
 800787e:	6033      	str	r3, [r6, #0]
 8007880:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800788a:	e03e      	b.n	800790a <__swsetup_r+0xba>
 800788c:	4b25      	ldr	r3, [pc, #148]	; (8007924 <__swsetup_r+0xd4>)
 800788e:	429c      	cmp	r4, r3
 8007890:	d101      	bne.n	8007896 <__swsetup_r+0x46>
 8007892:	68ac      	ldr	r4, [r5, #8]
 8007894:	e7eb      	b.n	800786e <__swsetup_r+0x1e>
 8007896:	4b24      	ldr	r3, [pc, #144]	; (8007928 <__swsetup_r+0xd8>)
 8007898:	429c      	cmp	r4, r3
 800789a:	bf08      	it	eq
 800789c:	68ec      	ldreq	r4, [r5, #12]
 800789e:	e7e6      	b.n	800786e <__swsetup_r+0x1e>
 80078a0:	0758      	lsls	r0, r3, #29
 80078a2:	d512      	bpl.n	80078ca <__swsetup_r+0x7a>
 80078a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a6:	b141      	cbz	r1, 80078ba <__swsetup_r+0x6a>
 80078a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078ac:	4299      	cmp	r1, r3
 80078ae:	d002      	beq.n	80078b6 <__swsetup_r+0x66>
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff fd0b 	bl	80072cc <_free_r>
 80078b6:	2300      	movs	r3, #0
 80078b8:	6363      	str	r3, [r4, #52]	; 0x34
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	2300      	movs	r3, #0
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f043 0308 	orr.w	r3, r3, #8
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	b94b      	cbnz	r3, 80078ea <__swsetup_r+0x9a>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e0:	d003      	beq.n	80078ea <__swsetup_r+0x9a>
 80078e2:	4621      	mov	r1, r4
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7fe ffb9 	bl	800685c <__smakebuf_r>
 80078ea:	89a0      	ldrh	r0, [r4, #12]
 80078ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f0:	f010 0301 	ands.w	r3, r0, #1
 80078f4:	d00a      	beq.n	800790c <__swsetup_r+0xbc>
 80078f6:	2300      	movs	r3, #0
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	6963      	ldr	r3, [r4, #20]
 80078fc:	425b      	negs	r3, r3
 80078fe:	61a3      	str	r3, [r4, #24]
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	b943      	cbnz	r3, 8007916 <__swsetup_r+0xc6>
 8007904:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007908:	d1ba      	bne.n	8007880 <__swsetup_r+0x30>
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	0781      	lsls	r1, r0, #30
 800790e:	bf58      	it	pl
 8007910:	6963      	ldrpl	r3, [r4, #20]
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	e7f4      	b.n	8007900 <__swsetup_r+0xb0>
 8007916:	2000      	movs	r0, #0
 8007918:	e7f7      	b.n	800790a <__swsetup_r+0xba>
 800791a:	bf00      	nop
 800791c:	20000020 	.word	0x20000020
 8007920:	080145c8 	.word	0x080145c8
 8007924:	080145e8 	.word	0x080145e8
 8007928:	080145a8 	.word	0x080145a8

0800792c <abort>:
 800792c:	b508      	push	{r3, lr}
 800792e:	2006      	movs	r0, #6
 8007930:	f000 f878 	bl	8007a24 <raise>
 8007934:	2001      	movs	r0, #1
 8007936:	f7fb faf8 	bl	8002f2a <_exit>

0800793a <memmove>:
 800793a:	4288      	cmp	r0, r1
 800793c:	b510      	push	{r4, lr}
 800793e:	eb01 0402 	add.w	r4, r1, r2
 8007942:	d902      	bls.n	800794a <memmove+0x10>
 8007944:	4284      	cmp	r4, r0
 8007946:	4623      	mov	r3, r4
 8007948:	d807      	bhi.n	800795a <memmove+0x20>
 800794a:	1e43      	subs	r3, r0, #1
 800794c:	42a1      	cmp	r1, r4
 800794e:	d008      	beq.n	8007962 <memmove+0x28>
 8007950:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007954:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007958:	e7f8      	b.n	800794c <memmove+0x12>
 800795a:	4402      	add	r2, r0
 800795c:	4601      	mov	r1, r0
 800795e:	428a      	cmp	r2, r1
 8007960:	d100      	bne.n	8007964 <memmove+0x2a>
 8007962:	bd10      	pop	{r4, pc}
 8007964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007968:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800796c:	e7f7      	b.n	800795e <memmove+0x24>
	...

08007970 <__malloc_lock>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__malloc_lock+0x8>)
 8007972:	f7fe bf4c 	b.w	800680e <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	20000ce4 	.word	0x20000ce4

0800797c <__malloc_unlock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_unlock+0x8>)
 800797e:	f7fe bf47 	b.w	8006810 <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	20000ce4 	.word	0x20000ce4

08007988 <_realloc_r>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	4607      	mov	r7, r0
 800798c:	4614      	mov	r4, r2
 800798e:	460e      	mov	r6, r1
 8007990:	b921      	cbnz	r1, 800799c <_realloc_r+0x14>
 8007992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007996:	4611      	mov	r1, r2
 8007998:	f7ff bce4 	b.w	8007364 <_malloc_r>
 800799c:	b922      	cbnz	r2, 80079a8 <_realloc_r+0x20>
 800799e:	f7ff fc95 	bl	80072cc <_free_r>
 80079a2:	4625      	mov	r5, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a8:	f000 f858 	bl	8007a5c <_malloc_usable_size_r>
 80079ac:	42a0      	cmp	r0, r4
 80079ae:	d20f      	bcs.n	80079d0 <_realloc_r+0x48>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4638      	mov	r0, r7
 80079b4:	f7ff fcd6 	bl	8007364 <_malloc_r>
 80079b8:	4605      	mov	r5, r0
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d0f2      	beq.n	80079a4 <_realloc_r+0x1c>
 80079be:	4631      	mov	r1, r6
 80079c0:	4622      	mov	r2, r4
 80079c2:	f7fe ffa5 	bl	8006910 <memcpy>
 80079c6:	4631      	mov	r1, r6
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff fc7f 	bl	80072cc <_free_r>
 80079ce:	e7e9      	b.n	80079a4 <_realloc_r+0x1c>
 80079d0:	4635      	mov	r5, r6
 80079d2:	e7e7      	b.n	80079a4 <_realloc_r+0x1c>

080079d4 <_raise_r>:
 80079d4:	291f      	cmp	r1, #31
 80079d6:	b538      	push	{r3, r4, r5, lr}
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	d904      	bls.n	80079e8 <_raise_r+0x14>
 80079de:	2316      	movs	r3, #22
 80079e0:	6003      	str	r3, [r0, #0]
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079ea:	b112      	cbz	r2, 80079f2 <_raise_r+0x1e>
 80079ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f0:	b94b      	cbnz	r3, 8007a06 <_raise_r+0x32>
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 f830 	bl	8007a58 <_getpid_r>
 80079f8:	462a      	mov	r2, r5
 80079fa:	4601      	mov	r1, r0
 80079fc:	4620      	mov	r0, r4
 80079fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a02:	f000 b817 	b.w	8007a34 <_kill_r>
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d00a      	beq.n	8007a20 <_raise_r+0x4c>
 8007a0a:	1c59      	adds	r1, r3, #1
 8007a0c:	d103      	bne.n	8007a16 <_raise_r+0x42>
 8007a0e:	2316      	movs	r3, #22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	2001      	movs	r0, #1
 8007a14:	e7e7      	b.n	80079e6 <_raise_r+0x12>
 8007a16:	2400      	movs	r4, #0
 8007a18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	4798      	blx	r3
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7e0      	b.n	80079e6 <_raise_r+0x12>

08007a24 <raise>:
 8007a24:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <raise+0xc>)
 8007a26:	4601      	mov	r1, r0
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	f7ff bfd3 	b.w	80079d4 <_raise_r>
 8007a2e:	bf00      	nop
 8007a30:	20000020 	.word	0x20000020

08007a34 <_kill_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d07      	ldr	r5, [pc, #28]	; (8007a54 <_kill_r+0x20>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f7fb fa6f 	bl	8002f24 <_kill>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d102      	bne.n	8007a50 <_kill_r+0x1c>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	b103      	cbz	r3, 8007a50 <_kill_r+0x1c>
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	bf00      	nop
 8007a54:	20000cf0 	.word	0x20000cf0

08007a58 <_getpid_r>:
 8007a58:	f7fb ba68 	b.w	8002f2c <_getpid>

08007a5c <_malloc_usable_size_r>:
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f18      	subs	r0, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfbc      	itt	lt
 8007a66:	580b      	ldrlt	r3, [r1, r0]
 8007a68:	18c0      	addlt	r0, r0, r3
 8007a6a:	4770      	bx	lr

08007a6c <iprintf>:
 8007a6c:	b40f      	push	{r0, r1, r2, r3}
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <iprintf+0x2c>)
 8007a70:	b513      	push	{r0, r1, r4, lr}
 8007a72:	681c      	ldr	r4, [r3, #0]
 8007a74:	b124      	cbz	r4, 8007a80 <iprintf+0x14>
 8007a76:	69a3      	ldr	r3, [r4, #24]
 8007a78:	b913      	cbnz	r3, 8007a80 <iprintf+0x14>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7fe faa4 	bl	8005fc8 <__sinit>
 8007a80:	ab05      	add	r3, sp, #20
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	68a1      	ldr	r1, [r4, #8]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f7ff fcef 	bl	800746c <_vfiprintf_r>
 8007a8e:	b002      	add	sp, #8
 8007a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a94:	b004      	add	sp, #16
 8007a96:	4770      	bx	lr
 8007a98:	20000020 	.word	0x20000020

08007a9c <putchar>:
 8007a9c:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <putchar+0x28>)
 8007a9e:	b513      	push	{r0, r1, r4, lr}
 8007aa0:	681c      	ldr	r4, [r3, #0]
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	b134      	cbz	r4, 8007ab4 <putchar+0x18>
 8007aa6:	69a3      	ldr	r3, [r4, #24]
 8007aa8:	b923      	cbnz	r3, 8007ab4 <putchar+0x18>
 8007aaa:	9001      	str	r0, [sp, #4]
 8007aac:	4620      	mov	r0, r4
 8007aae:	f7fe fa8b 	bl	8005fc8 <__sinit>
 8007ab2:	9901      	ldr	r1, [sp, #4]
 8007ab4:	68a2      	ldr	r2, [r4, #8]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	b002      	add	sp, #8
 8007aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abe:	f000 ba31 	b.w	8007f24 <_putc_r>
 8007ac2:	bf00      	nop
 8007ac4:	20000020 	.word	0x20000020

08007ac8 <_puts_r>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	460e      	mov	r6, r1
 8007acc:	4605      	mov	r5, r0
 8007ace:	b118      	cbz	r0, 8007ad8 <_puts_r+0x10>
 8007ad0:	6983      	ldr	r3, [r0, #24]
 8007ad2:	b90b      	cbnz	r3, 8007ad8 <_puts_r+0x10>
 8007ad4:	f7fe fa78 	bl	8005fc8 <__sinit>
 8007ad8:	69ab      	ldr	r3, [r5, #24]
 8007ada:	68ac      	ldr	r4, [r5, #8]
 8007adc:	b913      	cbnz	r3, 8007ae4 <_puts_r+0x1c>
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7fe fa72 	bl	8005fc8 <__sinit>
 8007ae4:	4b2c      	ldr	r3, [pc, #176]	; (8007b98 <_puts_r+0xd0>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d120      	bne.n	8007b2c <_puts_r+0x64>
 8007aea:	686c      	ldr	r4, [r5, #4]
 8007aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aee:	07db      	lsls	r3, r3, #31
 8007af0:	d405      	bmi.n	8007afe <_puts_r+0x36>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	0598      	lsls	r0, r3, #22
 8007af6:	d402      	bmi.n	8007afe <_puts_r+0x36>
 8007af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afa:	f7fe fe88 	bl	800680e <__retarget_lock_acquire_recursive>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	0719      	lsls	r1, r3, #28
 8007b02:	d51d      	bpl.n	8007b40 <_puts_r+0x78>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	b1db      	cbz	r3, 8007b40 <_puts_r+0x78>
 8007b08:	3e01      	subs	r6, #1
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b10:	3b01      	subs	r3, #1
 8007b12:	60a3      	str	r3, [r4, #8]
 8007b14:	bb39      	cbnz	r1, 8007b66 <_puts_r+0x9e>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da38      	bge.n	8007b8c <_puts_r+0xc4>
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	210a      	movs	r1, #10
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f7ff fe36 	bl	8007790 <__swbuf_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d011      	beq.n	8007b4c <_puts_r+0x84>
 8007b28:	250a      	movs	r5, #10
 8007b2a:	e011      	b.n	8007b50 <_puts_r+0x88>
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <_puts_r+0xd4>)
 8007b2e:	429c      	cmp	r4, r3
 8007b30:	d101      	bne.n	8007b36 <_puts_r+0x6e>
 8007b32:	68ac      	ldr	r4, [r5, #8]
 8007b34:	e7da      	b.n	8007aec <_puts_r+0x24>
 8007b36:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <_puts_r+0xd8>)
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	bf08      	it	eq
 8007b3c:	68ec      	ldreq	r4, [r5, #12]
 8007b3e:	e7d5      	b.n	8007aec <_puts_r+0x24>
 8007b40:	4621      	mov	r1, r4
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7ff fe84 	bl	8007850 <__swsetup_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d0dd      	beq.n	8007b08 <_puts_r+0x40>
 8007b4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b52:	07da      	lsls	r2, r3, #31
 8007b54:	d405      	bmi.n	8007b62 <_puts_r+0x9a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	059b      	lsls	r3, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_puts_r+0x9a>
 8007b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b5e:	f7fe fe57 	bl	8006810 <__retarget_lock_release_recursive>
 8007b62:	4628      	mov	r0, r5
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da04      	bge.n	8007b74 <_puts_r+0xac>
 8007b6a:	69a2      	ldr	r2, [r4, #24]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	dc06      	bgt.n	8007b7e <_puts_r+0xb6>
 8007b70:	290a      	cmp	r1, #10
 8007b72:	d004      	beq.n	8007b7e <_puts_r+0xb6>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	7019      	strb	r1, [r3, #0]
 8007b7c:	e7c5      	b.n	8007b0a <_puts_r+0x42>
 8007b7e:	4622      	mov	r2, r4
 8007b80:	4628      	mov	r0, r5
 8007b82:	f7ff fe05 	bl	8007790 <__swbuf_r>
 8007b86:	3001      	adds	r0, #1
 8007b88:	d1bf      	bne.n	8007b0a <_puts_r+0x42>
 8007b8a:	e7df      	b.n	8007b4c <_puts_r+0x84>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	250a      	movs	r5, #10
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	6022      	str	r2, [r4, #0]
 8007b94:	701d      	strb	r5, [r3, #0]
 8007b96:	e7db      	b.n	8007b50 <_puts_r+0x88>
 8007b98:	080145c8 	.word	0x080145c8
 8007b9c:	080145e8 	.word	0x080145e8
 8007ba0:	080145a8 	.word	0x080145a8

08007ba4 <puts>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <puts+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f7ff bf8d 	b.w	8007ac8 <_puts_r>
 8007bae:	bf00      	nop
 8007bb0:	20000020 	.word	0x20000020

08007bb4 <strcasecmp>:
 8007bb4:	b530      	push	{r4, r5, lr}
 8007bb6:	4d0b      	ldr	r5, [pc, #44]	; (8007be4 <strcasecmp+0x30>)
 8007bb8:	4604      	mov	r4, r0
 8007bba:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bbe:	5d5a      	ldrb	r2, [r3, r5]
 8007bc0:	f002 0203 	and.w	r2, r2, #3
 8007bc4:	2a01      	cmp	r2, #1
 8007bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bca:	5ca8      	ldrb	r0, [r5, r2]
 8007bcc:	f000 0003 	and.w	r0, r0, #3
 8007bd0:	bf08      	it	eq
 8007bd2:	3320      	addeq	r3, #32
 8007bd4:	2801      	cmp	r0, #1
 8007bd6:	bf08      	it	eq
 8007bd8:	3220      	addeq	r2, #32
 8007bda:	1a98      	subs	r0, r3, r2
 8007bdc:	d101      	bne.n	8007be2 <strcasecmp+0x2e>
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	d1eb      	bne.n	8007bba <strcasecmp+0x6>
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	080142ae 	.word	0x080142ae

08007be8 <strcpy>:
 8007be8:	4603      	mov	r3, r0
 8007bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bee:	f803 2b01 	strb.w	r2, [r3], #1
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	d1f9      	bne.n	8007bea <strcpy+0x2>
 8007bf6:	4770      	bx	lr

08007bf8 <_vsniprintf_r>:
 8007bf8:	b530      	push	{r4, r5, lr}
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	b09b      	sub	sp, #108	; 0x6c
 8007c00:	4605      	mov	r5, r0
 8007c02:	461a      	mov	r2, r3
 8007c04:	da05      	bge.n	8007c12 <_vsniprintf_r+0x1a>
 8007c06:	238b      	movs	r3, #139	; 0x8b
 8007c08:	6003      	str	r3, [r0, #0]
 8007c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c0e:	b01b      	add	sp, #108	; 0x6c
 8007c10:	bd30      	pop	{r4, r5, pc}
 8007c12:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c1a:	bf14      	ite	ne
 8007c1c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007c20:	4623      	moveq	r3, r4
 8007c22:	9302      	str	r3, [sp, #8]
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c2a:	9100      	str	r1, [sp, #0]
 8007c2c:	9104      	str	r1, [sp, #16]
 8007c2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007c32:	4669      	mov	r1, sp
 8007c34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c36:	f000 f875 	bl	8007d24 <_svfiprintf_r>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	bfbc      	itt	lt
 8007c3e:	238b      	movlt	r3, #139	; 0x8b
 8007c40:	602b      	strlt	r3, [r5, #0]
 8007c42:	2c00      	cmp	r4, #0
 8007c44:	d0e3      	beq.n	8007c0e <_vsniprintf_r+0x16>
 8007c46:	9b00      	ldr	r3, [sp, #0]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
 8007c4c:	e7df      	b.n	8007c0e <_vsniprintf_r+0x16>
	...

08007c50 <vsniprintf>:
 8007c50:	b507      	push	{r0, r1, r2, lr}
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	460a      	mov	r2, r1
 8007c58:	4601      	mov	r1, r0
 8007c5a:	4803      	ldr	r0, [pc, #12]	; (8007c68 <vsniprintf+0x18>)
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f7ff ffcb 	bl	8007bf8 <_vsniprintf_r>
 8007c62:	b003      	add	sp, #12
 8007c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c68:	20000020 	.word	0x20000020

08007c6c <__ssputs_r>:
 8007c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	688e      	ldr	r6, [r1, #8]
 8007c72:	429e      	cmp	r6, r3
 8007c74:	4682      	mov	sl, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4690      	mov	r8, r2
 8007c7a:	461f      	mov	r7, r3
 8007c7c:	d838      	bhi.n	8007cf0 <__ssputs_r+0x84>
 8007c7e:	898a      	ldrh	r2, [r1, #12]
 8007c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c84:	d032      	beq.n	8007cec <__ssputs_r+0x80>
 8007c86:	6825      	ldr	r5, [r4, #0]
 8007c88:	6909      	ldr	r1, [r1, #16]
 8007c8a:	eba5 0901 	sub.w	r9, r5, r1
 8007c8e:	6965      	ldr	r5, [r4, #20]
 8007c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c98:	3301      	adds	r3, #1
 8007c9a:	444b      	add	r3, r9
 8007c9c:	106d      	asrs	r5, r5, #1
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	bf38      	it	cc
 8007ca2:	461d      	movcc	r5, r3
 8007ca4:	0553      	lsls	r3, r2, #21
 8007ca6:	d531      	bpl.n	8007d0c <__ssputs_r+0xa0>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7ff fb5b 	bl	8007364 <_malloc_r>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	b950      	cbnz	r0, 8007cc8 <__ssputs_r+0x5c>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	f8ca 3000 	str.w	r3, [sl]
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc8:	6921      	ldr	r1, [r4, #16]
 8007cca:	464a      	mov	r2, r9
 8007ccc:	f7fe fe20 	bl	8006910 <memcpy>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	6126      	str	r6, [r4, #16]
 8007cde:	6165      	str	r5, [r4, #20]
 8007ce0:	444e      	add	r6, r9
 8007ce2:	eba5 0509 	sub.w	r5, r5, r9
 8007ce6:	6026      	str	r6, [r4, #0]
 8007ce8:	60a5      	str	r5, [r4, #8]
 8007cea:	463e      	mov	r6, r7
 8007cec:	42be      	cmp	r6, r7
 8007cee:	d900      	bls.n	8007cf2 <__ssputs_r+0x86>
 8007cf0:	463e      	mov	r6, r7
 8007cf2:	6820      	ldr	r0, [r4, #0]
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	f7ff fe1f 	bl	800793a <memmove>
 8007cfc:	68a3      	ldr	r3, [r4, #8]
 8007cfe:	1b9b      	subs	r3, r3, r6
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	4433      	add	r3, r6
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	e7db      	b.n	8007cc4 <__ssputs_r+0x58>
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	f7ff fe3b 	bl	8007988 <_realloc_r>
 8007d12:	4606      	mov	r6, r0
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1e1      	bne.n	8007cdc <__ssputs_r+0x70>
 8007d18:	6921      	ldr	r1, [r4, #16]
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	f7ff fad6 	bl	80072cc <_free_r>
 8007d20:	e7c7      	b.n	8007cb2 <__ssputs_r+0x46>
	...

08007d24 <_svfiprintf_r>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4698      	mov	r8, r3
 8007d2a:	898b      	ldrh	r3, [r1, #12]
 8007d2c:	061b      	lsls	r3, r3, #24
 8007d2e:	b09d      	sub	sp, #116	; 0x74
 8007d30:	4607      	mov	r7, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	4614      	mov	r4, r2
 8007d36:	d50e      	bpl.n	8007d56 <_svfiprintf_r+0x32>
 8007d38:	690b      	ldr	r3, [r1, #16]
 8007d3a:	b963      	cbnz	r3, 8007d56 <_svfiprintf_r+0x32>
 8007d3c:	2140      	movs	r1, #64	; 0x40
 8007d3e:	f7ff fb11 	bl	8007364 <_malloc_r>
 8007d42:	6028      	str	r0, [r5, #0]
 8007d44:	6128      	str	r0, [r5, #16]
 8007d46:	b920      	cbnz	r0, 8007d52 <_svfiprintf_r+0x2e>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d50:	e0d1      	b.n	8007ef6 <_svfiprintf_r+0x1d2>
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d64:	2330      	movs	r3, #48	; 0x30
 8007d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f10 <_svfiprintf_r+0x1ec>
 8007d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d6e:	f04f 0901 	mov.w	r9, #1
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x5c>
 8007d7c:	2a25      	cmp	r2, #37	; 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x50>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7a>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6d 	bl	8007c6c <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80aa 	beq.w	8007eec <_svfiprintf_r+0x1c8>
 8007d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 80a2 	beq.w	8007eec <_svfiprintf_r+0x1c8>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	4851      	ldr	r0, [pc, #324]	; (8007f10 <_svfiprintf_r+0x1ec>)
 8007dca:	f7f8 fa31 	bl	8000230 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xe6>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	; 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	; 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xf6>
 8007dee:	9a07      	ldr	r2, [sp, #28]
 8007df0:	4654      	mov	r4, sl
 8007df2:	2000      	movs	r0, #0
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	; 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94e      	bls.n	8007ea2 <_svfiprintf_r+0x17e>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x110>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x110>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	46a2      	mov	sl, r4
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0x9c>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	; 0x2e
 8007e38:	d10c      	bne.n	8007e54 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3e:	d135      	bne.n	8007eac <_svfiprintf_r+0x188>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	9203      	str	r2, [sp, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bfb8      	it	lt
 8007e4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e50:	3402      	adds	r4, #2
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f20 <_svfiprintf_r+0x1fc>
 8007e58:	7821      	ldrb	r1, [r4, #0]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f7f8 f9e7 	bl	8000230 <memchr>
 8007e62:	b140      	cbz	r0, 8007e76 <_svfiprintf_r+0x152>
 8007e64:	2340      	movs	r3, #64	; 0x40
 8007e66:	eba0 000a 	sub.w	r0, r0, sl
 8007e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	4303      	orrs	r3, r0
 8007e72:	3401      	adds	r4, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4826      	ldr	r0, [pc, #152]	; (8007f14 <_svfiprintf_r+0x1f0>)
 8007e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e80:	2206      	movs	r2, #6
 8007e82:	f7f8 f9d5 	bl	8000230 <memchr>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d038      	beq.n	8007efc <_svfiprintf_r+0x1d8>
 8007e8a:	4b23      	ldr	r3, [pc, #140]	; (8007f18 <_svfiprintf_r+0x1f4>)
 8007e8c:	bb1b      	cbnz	r3, 8007ed6 <_svfiprintf_r+0x1b2>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	3307      	adds	r3, #7
 8007e92:	f023 0307 	bic.w	r3, r3, #7
 8007e96:	3308      	adds	r3, #8
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	4433      	add	r3, r6
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	e767      	b.n	8007d72 <_svfiprintf_r+0x4e>
 8007ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e7a5      	b.n	8007df8 <_svfiprintf_r+0xd4>
 8007eac:	2300      	movs	r3, #0
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f04f 0c0a 	mov.w	ip, #10
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebe:	3a30      	subs	r2, #48	; 0x30
 8007ec0:	2a09      	cmp	r2, #9
 8007ec2:	d903      	bls.n	8007ecc <_svfiprintf_r+0x1a8>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0c5      	beq.n	8007e54 <_svfiprintf_r+0x130>
 8007ec8:	9105      	str	r1, [sp, #20]
 8007eca:	e7c3      	b.n	8007e54 <_svfiprintf_r+0x130>
 8007ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f0      	b.n	8007eb8 <_svfiprintf_r+0x194>
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	462a      	mov	r2, r5
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7fb fd29 	bl	8003938 <_printf_float>
 8007ee6:	1c42      	adds	r2, r0, #1
 8007ee8:	4606      	mov	r6, r0
 8007eea:	d1d6      	bne.n	8007e9a <_svfiprintf_r+0x176>
 8007eec:	89ab      	ldrh	r3, [r5, #12]
 8007eee:	065b      	lsls	r3, r3, #25
 8007ef0:	f53f af2c 	bmi.w	8007d4c <_svfiprintf_r+0x28>
 8007ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef6:	b01d      	add	sp, #116	; 0x74
 8007ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7fb ffba 	bl	8003e80 <_printf_i>
 8007f0c:	e7eb      	b.n	8007ee6 <_svfiprintf_r+0x1c2>
 8007f0e:	bf00      	nop
 8007f10:	0801481c 	.word	0x0801481c
 8007f14:	08014826 	.word	0x08014826
 8007f18:	08003939 	.word	0x08003939
 8007f1c:	08007c6d 	.word	0x08007c6d
 8007f20:	08014822 	.word	0x08014822

08007f24 <_putc_r>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	460d      	mov	r5, r1
 8007f28:	4614      	mov	r4, r2
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	b118      	cbz	r0, 8007f36 <_putc_r+0x12>
 8007f2e:	6983      	ldr	r3, [r0, #24]
 8007f30:	b90b      	cbnz	r3, 8007f36 <_putc_r+0x12>
 8007f32:	f7fe f849 	bl	8005fc8 <__sinit>
 8007f36:	4b1c      	ldr	r3, [pc, #112]	; (8007fa8 <_putc_r+0x84>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d124      	bne.n	8007f86 <_putc_r+0x62>
 8007f3c:	6874      	ldr	r4, [r6, #4]
 8007f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f40:	07d8      	lsls	r0, r3, #31
 8007f42:	d405      	bmi.n	8007f50 <_putc_r+0x2c>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	0599      	lsls	r1, r3, #22
 8007f48:	d402      	bmi.n	8007f50 <_putc_r+0x2c>
 8007f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f4c:	f7fe fc5f 	bl	800680e <__retarget_lock_acquire_recursive>
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	60a3      	str	r3, [r4, #8]
 8007f58:	da05      	bge.n	8007f66 <_putc_r+0x42>
 8007f5a:	69a2      	ldr	r2, [r4, #24]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	db1c      	blt.n	8007f9a <_putc_r+0x76>
 8007f60:	b2eb      	uxtb	r3, r5
 8007f62:	2b0a      	cmp	r3, #10
 8007f64:	d019      	beq.n	8007f9a <_putc_r+0x76>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	701d      	strb	r5, [r3, #0]
 8007f6e:	b2ed      	uxtb	r5, r5
 8007f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f72:	07da      	lsls	r2, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_putc_r+0x5e>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	059b      	lsls	r3, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_putc_r+0x5e>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7e:	f7fe fc47 	bl	8006810 <__retarget_lock_release_recursive>
 8007f82:	4628      	mov	r0, r5
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <_putc_r+0x88>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	d101      	bne.n	8007f90 <_putc_r+0x6c>
 8007f8c:	68b4      	ldr	r4, [r6, #8]
 8007f8e:	e7d6      	b.n	8007f3e <_putc_r+0x1a>
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <_putc_r+0x8c>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	bf08      	it	eq
 8007f96:	68f4      	ldreq	r4, [r6, #12]
 8007f98:	e7d1      	b.n	8007f3e <_putc_r+0x1a>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff fbf6 	bl	8007790 <__swbuf_r>
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	e7e3      	b.n	8007f70 <_putc_r+0x4c>
 8007fa8:	080145c8 	.word	0x080145c8
 8007fac:	080145e8 	.word	0x080145e8
 8007fb0:	080145a8 	.word	0x080145a8

08007fb4 <_init>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	bf00      	nop
 8007fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fba:	bc08      	pop	{r3}
 8007fbc:	469e      	mov	lr, r3
 8007fbe:	4770      	bx	lr

08007fc0 <_fini>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr
