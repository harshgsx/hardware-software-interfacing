
pwmLab8.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08006858 l    d  .rodata	00000000 .rodata
08013240 l    d  .ARM	00000000 .ARM
08013248 l    d  .init_array	00000000 .init_array
0801324c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200001f0 l    d  .bss	00000000 .bss
20000c10 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/cubemx_stm32f411/startup_stm32f411xe.o
080033b8 l       .text	00000000 LoopCopyDataInit
080033b2 l       .text	00000000 CopyDataInit
080033ca l       .text	00000000 LoopFillZerobss
080033c6 l       .text	00000000 FillZerobss
080033f4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08006840 l     O .text	00000000 __EH_FRAME_BEGIN__
080001a0 l     F .text	00000000 __do_global_dtors_aux
200001f0 l       .bss	00000001 completed.1
0801324c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001c4 l     F .text	00000000 frame_dummy
200001f4 l       .bss	00000018 object.0
08013248 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 
08000f9c l     F .text	0000004c TerminalRead
08000fe8 l     F .text	0000007c Uncompress
08001064 l     F .text	00000030 HAL_TIM_Base_MspInit
08001094 l     F .text	00000020 HAL_RCC_GetPCLK2Freq
080010b4 l     F .text	00000014 HAL_Delay
080010c8 l     F .text	00000190 HAL_GPIO_Init
08001258 l     F .text	000000c0 gpioInit
08001318 l     F .text	0000009c TIM_Base_SetConfig
080013b4 l     F .text	00000058 HAL_NVIC_SetPriority.constprop.0
0800140c l     F .text	000000c4 HAL_TIM_PWM_Start.constprop.0.isra.0
080014d0 l     F .text	000000b8 HAL_TIMEx_PWMN_Start.constprop.0.isra.0
08001588 l     F .text	00000080 HAL_TIM_PWM_Stop.constprop.0.isra.0
08001608 l     F .text	00000064 HAL_TIM_Base_Start_IT.constprop.0.isra.0
0800166c l     F .text	000000c0 Timer11_Init
0800172c l     F .text	00000050 HAL_InitTick.isra.0
0800177c l     F .text	000000c8 TerminalOutputBufferWrite.isra.0
08001844 l     F .text	00000044 CmdTasks
08001888 l     F .text	00000054 DecodeReadRegister
080018dc l     F .text	00000020 CmdVersion
080018fc l     F .text	00000050 DecodeWriteRegister.isra.0
0800194c l     F .text	0000002c CmdTest
08001978 l     F .text	000001f0 CmdPWMInit
08001b68 l     F .text	000000b8 DecodeRegister
08001c20 l     F .text	00000050 DecodePeripheral
08001c70 l     F .text	00000060 DecodePrintRegisters
08001cd0 l     F .text	00000058 DecodePrintPeripherals.constprop.0
08001d28 l     F .text	00000030 fetch_string_arg
08001d58 l     F .text	00000204 TaskInput
08001f5c l     F .text	0000003c fetch_uint32_arg
08001f98 l     F .text	00000058 CmdLed
08001ff0 l     F .text	000001e8 CmdPWM
080021d8 l     F .text	00000084 CmdRGB
0800225c l     F .text	00000026 CmdStopPWM
08002284 l     F .text	00000050 enableDisableStepper
080022d4 l     F .text	00000064 StepSpeedAction
08002338 l     F .text	000000e8 StepSpeedQAction
08002420 l     F .text	00000070 CmdR
08002490 l     F .text	0000001e CmdW
080024b0 l     F .text	000000f8 CmdDump
080025a8 l     F .text	00000074 CmdSend
0800261c l     F .text	00000060 CmdReceive
0800267c l     F .text	00000044 CmdTransparent
080026c0 l     F .text	00000284 CmdDecode
08002944 l     F .text	0000003c PolledPrintf
08002980 l     F .text	00000068 CmdStats
2000020c l     O .bss	00000004 AccumTicks
20000210 l     O .bss	00000004 LedState.0
20000214 l     O .bss	00000834 TerminalState
20000a48 l     O .bss	00000004 address.1
20000a4c l     O .bss	00000014 buf.0
20000a60 l     O .bss	00000004 cmdArgs
20000a64 l     O .bss	00000004 count.3
20000a68 l     O .bss	00000004 crReceived
20000a6c l     O .bss	00000004 gDirection
20000a70 l     O .bss	00000004 gIsStepperEnabled
20000a74 l     O .bss	00000004 heap_end.0
20000a78 l     O .bss	0000000c hiwdg
20000a84 l     O .bss	00000044 huart2
20000ac8 l     O .bss	00000050 input
20000b18 l     O .bss	00000050 input_b
20000b68 l     O .bss	00000004 saved.1
20000b6c l     O .bss	00000048 tim1
20000bb4 l     O .bss	00000048 tim11
20000bfc l     O .bss	00000004 uwTick
20000004 l     O .data	00000004 SystemCoreClock
20000008 l     O .data	00000004 buf.2
2000000c l     O .data	00000004 count.0
20000010 l     O .data	00000004 printPrompt.4
20000014 l     O .data	00000004 uwTickPrio
0800a640 l     O .rodata	00000070 ADC1_CR1_fields
0800a6b0 l     O .rodata	00000060 ADC1_CR2_fields
0800a710 l     O .rodata	00000008 ADC1_DR_fields
0800a718 l     O .rodata	00000008 ADC1_HTR_fields
0800a720 l     O .rodata	00000008 ADC1_JDR1_fields
0800a728 l     O .rodata	00000008 ADC1_JDR2_fields
0800a730 l     O .rodata	00000008 ADC1_JDR3_fields
0800a738 l     O .rodata	00000008 ADC1_JDR4_fields
0800a740 l     O .rodata	00000008 ADC1_JOFR1_fields
0800a748 l     O .rodata	00000008 ADC1_JOFR2_fields
0800a750 l     O .rodata	00000008 ADC1_JOFR3_fields
0800a758 l     O .rodata	00000008 ADC1_JOFR4_fields
0800a760 l     O .rodata	00000028 ADC1_JSQR_fields
0800a788 l     O .rodata	00000008 ADC1_LTR_fields
0800a790 l     O .rodata	00000008 ADC1_SMPR1_fields
0800a798 l     O .rodata	00000008 ADC1_SMPR2_fields
0800a7a0 l     O .rodata	00000028 ADC1_SQR1_fields
0800a7c8 l     O .rodata	00000030 ADC1_SQR2_fields
0800a7f8 l     O .rodata	00000030 ADC1_SQR3_fields
0800a828 l     O .rodata	00000030 ADC1_SR_fields
0800a858 l     O .rodata	00000140 ADC1_registers
0800a998 l     O .rodata	00000030 ADC_Common_CCR_fields
0800a9c8 l     O .rodata	00000090 ADC_Common_CSR_fields
0800aa58 l     O .rodata	00000020 ADC_Common_registers
0800aa78 l     O .rodata	00000010 AHBPrescTable
0800aa88 l     O .rodata	00000008 APBPrescTable
0800aa90 l     O .rodata	00000008 CRC_CR_fields
0800aa98 l     O .rodata	00000008 CRC_DR_fields
0800aaa0 l     O .rodata	00000008 CRC_IDR_fields
0800aaa8 l     O .rodata	00000030 CRC_registers
0800aad8 l     O .rodata	00000050 DBG_DBGMCU_APB1_FZ_fields
0800ab28 l     O .rodata	00000020 DBG_DBGMCU_APB2_FZ_fields
0800ab48 l     O .rodata	00000028 DBG_DBGMCU_CR_fields
0800ab70 l     O .rodata	00000010 DBG_DBGMCU_IDCODE_fields
0800ab80 l     O .rodata	00000040 DBG_registers
0800abc0 l     O .rodata	000000a0 DMA2_HIFCR_fields
0800ac60 l     O .rodata	000000a0 DMA2_HISR_fields
0800ad00 l     O .rodata	000000a0 DMA2_LIFCR_fields
0800ada0 l     O .rodata	000000a0 DMA2_LISR_fields
0800ae40 l     O .rodata	00000098 DMA2_S0CR_fields
0800aed8 l     O .rodata	00000020 DMA2_S0FCR_fields
0800aef8 l     O .rodata	00000008 DMA2_S0M0AR_fields
0800af00 l     O .rodata	00000008 DMA2_S0M1AR_fields
0800af08 l     O .rodata	00000008 DMA2_S0NDTR_fields
0800af10 l     O .rodata	00000008 DMA2_S0PAR_fields
0800af18 l     O .rodata	000000a0 DMA2_S1CR_fields
0800afb8 l     O .rodata	00000020 DMA2_S1FCR_fields
0800afd8 l     O .rodata	00000008 DMA2_S1M0AR_fields
0800afe0 l     O .rodata	00000008 DMA2_S1M1AR_fields
0800afe8 l     O .rodata	00000008 DMA2_S1NDTR_fields
0800aff0 l     O .rodata	00000008 DMA2_S1PAR_fields
0800aff8 l     O .rodata	000000a0 DMA2_S2CR_fields
0800b098 l     O .rodata	00000020 DMA2_S2FCR_fields
0800b0b8 l     O .rodata	00000008 DMA2_S2M0AR_fields
0800b0c0 l     O .rodata	00000008 DMA2_S2M1AR_fields
0800b0c8 l     O .rodata	00000008 DMA2_S2NDTR_fields
0800b0d0 l     O .rodata	00000008 DMA2_S2PAR_fields
0800b0d8 l     O .rodata	000000a0 DMA2_S3CR_fields
0800b178 l     O .rodata	00000020 DMA2_S3FCR_fields
0800b198 l     O .rodata	00000008 DMA2_S3M0AR_fields
0800b1a0 l     O .rodata	00000008 DMA2_S3M1AR_fields
0800b1a8 l     O .rodata	00000008 DMA2_S3NDTR_fields
0800b1b0 l     O .rodata	00000008 DMA2_S3PAR_fields
0800b1b8 l     O .rodata	000000a0 DMA2_S4CR_fields
0800b258 l     O .rodata	00000020 DMA2_S4FCR_fields
0800b278 l     O .rodata	00000008 DMA2_S4M0AR_fields
0800b280 l     O .rodata	00000008 DMA2_S4M1AR_fields
0800b288 l     O .rodata	00000008 DMA2_S4NDTR_fields
0800b290 l     O .rodata	00000008 DMA2_S4PAR_fields
0800b298 l     O .rodata	000000a0 DMA2_S5CR_fields
0800b338 l     O .rodata	00000020 DMA2_S5FCR_fields
0800b358 l     O .rodata	00000008 DMA2_S5M0AR_fields
0800b360 l     O .rodata	00000008 DMA2_S5M1AR_fields
0800b368 l     O .rodata	00000008 DMA2_S5NDTR_fields
0800b370 l     O .rodata	00000008 DMA2_S5PAR_fields
0800b378 l     O .rodata	000000a0 DMA2_S6CR_fields
0800b418 l     O .rodata	00000020 DMA2_S6FCR_fields
0800b438 l     O .rodata	00000008 DMA2_S6M0AR_fields
0800b440 l     O .rodata	00000008 DMA2_S6M1AR_fields
0800b448 l     O .rodata	00000008 DMA2_S6NDTR_fields
0800b450 l     O .rodata	00000008 DMA2_S6PAR_fields
0800b458 l     O .rodata	000000a0 DMA2_S7CR_fields
0800b4f8 l     O .rodata	00000020 DMA2_S7FCR_fields
0800b518 l     O .rodata	00000008 DMA2_S7M0AR_fields
0800b520 l     O .rodata	00000008 DMA2_S7M1AR_fields
0800b528 l     O .rodata	00000008 DMA2_S7NDTR_fields
0800b530 l     O .rodata	00000008 DMA2_S7PAR_fields
0800b538 l     O .rodata	00000340 DMA2_registers
0800b878 l     O .rodata	000000b8 EXTI_EMR_fields
0800b930 l     O .rodata	000000b8 EXTI_FTSR_fields
0800b9e8 l     O .rodata	000000b8 EXTI_IMR_fields
0800baa0 l     O .rodata	000000b8 EXTI_PR_fields
0800bb58 l     O .rodata	000000b8 EXTI_RTSR_fields
0800bc10 l     O .rodata	000000b8 EXTI_SWIER_fields
0800bcc8 l     O .rodata	00000060 EXTI_registers
0800bd28 l     O .rodata	00000030 FLASH_ACR_fields
0800bd58 l     O .rodata	00000048 FLASH_CR_fields
0800bda0 l     O .rodata	00000008 FLASH_KEYR_fields
0800bda8 l     O .rodata	00000040 FLASH_OPTCR_fields
0800bde8 l     O .rodata	00000008 FLASH_OPTKEYR_fields
0800bdf0 l     O .rodata	00000038 FLASH_SR_fields
0800be28 l     O .rodata	00000060 FLASH_registers
0800be88 l     O .rodata	00000008 FPU_CPACR_CPACR_fields
0800be90 l     O .rodata	00000010 FPU_CPACR_registers
0800bea0 l     O .rodata	00000008 FPU_FPCAR_fields
0800bea8 l     O .rodata	00000048 FPU_FPCCR_fields
0800bef0 l     O .rodata	00000070 FPU_FPSCR_fields
0800bf60 l     O .rodata	00000030 FPU_registers
0800bf90 l     O .rodata	00000040 GPIOA_AFRH_fields
0800bfd0 l     O .rodata	00000040 GPIOA_AFRL_fields
0800c010 l     O .rodata	00000100 GPIOA_BSRR_fields
0800c110 l     O .rodata	00000080 GPIOA_IDR_fields
0800c190 l     O .rodata	00000088 GPIOA_LCKR_fields
0800c218 l     O .rodata	00000080 GPIOA_MODER_fields
0800c298 l     O .rodata	00000080 GPIOA_ODR_fields
0800c318 l     O .rodata	00000080 GPIOA_OSPEEDR_fields
0800c398 l     O .rodata	00000080 GPIOA_OTYPER_fields
0800c418 l     O .rodata	00000080 GPIOA_PUPDR_fields
0800c498 l     O .rodata	000000a0 GPIOA_registers
0800c538 l     O .rodata	00000040 GPIOB_AFRH_fields
0800c578 l     O .rodata	00000040 GPIOB_AFRL_fields
0800c5b8 l     O .rodata	00000100 GPIOB_BSRR_fields
0800c6b8 l     O .rodata	00000080 GPIOB_IDR_fields
0800c738 l     O .rodata	00000088 GPIOB_LCKR_fields
0800c7c0 l     O .rodata	00000080 GPIOB_MODER_fields
0800c840 l     O .rodata	00000080 GPIOB_ODR_fields
0800c8c0 l     O .rodata	00000080 GPIOB_OSPEEDR_fields
0800c940 l     O .rodata	00000080 GPIOB_OTYPER_fields
0800c9c0 l     O .rodata	00000080 GPIOB_PUPDR_fields
0800ca40 l     O .rodata	000000a0 GPIOB_registers
0800cae0 l     O .rodata	00000040 GPIOH_AFRH_fields
0800cb20 l     O .rodata	00000040 GPIOH_AFRL_fields
0800cb60 l     O .rodata	00000100 GPIOH_BSRR_fields
0800cc60 l     O .rodata	00000080 GPIOH_IDR_fields
0800cce0 l     O .rodata	00000088 GPIOH_LCKR_fields
0800cd68 l     O .rodata	00000080 GPIOH_MODER_fields
0800cde8 l     O .rodata	00000080 GPIOH_ODR_fields
0800ce68 l     O .rodata	00000080 GPIOH_OSPEEDR_fields
0800cee8 l     O .rodata	00000080 GPIOH_OTYPER_fields
0800cf68 l     O .rodata	00000080 GPIOH_PUPDR_fields
0800cfe8 l     O .rodata	000000a0 GPIOH_registers
0800d088 l     O .rodata	00000018 I2C3_CCR_fields
0800d0a0 l     O .rodata	00000070 I2C3_CR1_fields
0800d110 l     O .rodata	00000030 I2C3_CR2_fields
0800d140 l     O .rodata	00000008 I2C3_DR_fields
0800d148 l     O .rodata	00000020 I2C3_OAR1_fields
0800d168 l     O .rodata	00000010 I2C3_OAR2_fields
0800d178 l     O .rodata	00000070 I2C3_SR1_fields
0800d1e8 l     O .rodata	00000040 I2C3_SR2_fields
0800d228 l     O .rodata	00000008 I2C3_TRISE_fields
0800d230 l     O .rodata	00000090 I2C3_registers
0800d2c0 l     O .rodata	00000070 I2S2ext_CR1_fields
0800d330 l     O .rodata	00000038 I2S2ext_CR2_fields
0800d368 l     O .rodata	00000008 I2S2ext_CRCPR_fields
0800d370 l     O .rodata	00000008 I2S2ext_DR_fields
0800d378 l     O .rodata	00000040 I2S2ext_I2SCFGR_fields
0800d3b8 l     O .rodata	00000018 I2S2ext_I2SPR_fields
0800d3d0 l     O .rodata	00000008 I2S2ext_RXCRCR_fields
0800d3d8 l     O .rodata	00000048 I2S2ext_SR_fields
0800d420 l     O .rodata	00000008 I2S2ext_TXCRCR_fields
0800d428 l     O .rodata	00000090 I2S2ext_registers
0800d4b8 l     O .rodata	00000008 IWDG_KR_fields
0800d4c0 l     O .rodata	00000008 IWDG_PR_fields
0800d4c8 l     O .rodata	00000008 IWDG_RLR_fields
0800d4d0 l     O .rodata	00000010 IWDG_SR_fields
0800d4e0 l     O .rodata	00000040 IWDG_registers
0800d520 l     O .rodata	00000194 InterruptNames
0800d6b4 l     O .rodata	00000018 MPU_MPU_CTRL_fields
0800d6cc l     O .rodata	00000048 MPU_MPU_RASR_fields
0800d714 l     O .rodata	00000018 MPU_MPU_RBAR_fields
0800d72c l     O .rodata	00000008 MPU_MPU_RNR_fields
0800d734 l     O .rodata	00000018 MPU_MPU_TYPER_fields
0800d74c l     O .rodata	00000050 MPU_registers
0800d79c l     O .rodata	00000008 NVIC_IABR0_fields
0800d7a4 l     O .rodata	00000008 NVIC_IABR1_fields
0800d7ac l     O .rodata	00000008 NVIC_IABR2_fields
0800d7b4 l     O .rodata	00000008 NVIC_ICER0_fields
0800d7bc l     O .rodata	00000008 NVIC_ICER1_fields
0800d7c4 l     O .rodata	00000008 NVIC_ICER2_fields
0800d7cc l     O .rodata	00000008 NVIC_ICPR0_fields
0800d7d4 l     O .rodata	00000008 NVIC_ICPR1_fields
0800d7dc l     O .rodata	00000008 NVIC_ICPR2_fields
0800d7e4 l     O .rodata	00000020 NVIC_IPR0_fields
0800d804 l     O .rodata	00000020 NVIC_IPR10_fields
0800d824 l     O .rodata	00000020 NVIC_IPR11_fields
0800d844 l     O .rodata	00000020 NVIC_IPR12_fields
0800d864 l     O .rodata	00000020 NVIC_IPR13_fields
0800d884 l     O .rodata	00000020 NVIC_IPR14_fields
0800d8a4 l     O .rodata	00000020 NVIC_IPR15_fields
0800d8c4 l     O .rodata	00000020 NVIC_IPR16_fields
0800d8e4 l     O .rodata	00000020 NVIC_IPR17_fields
0800d904 l     O .rodata	00000020 NVIC_IPR18_fields
0800d924 l     O .rodata	00000020 NVIC_IPR19_fields
0800d944 l     O .rodata	00000020 NVIC_IPR1_fields
0800d964 l     O .rodata	00000020 NVIC_IPR2_fields
0800d984 l     O .rodata	00000020 NVIC_IPR3_fields
0800d9a4 l     O .rodata	00000020 NVIC_IPR4_fields
0800d9c4 l     O .rodata	00000020 NVIC_IPR5_fields
0800d9e4 l     O .rodata	00000020 NVIC_IPR6_fields
0800da04 l     O .rodata	00000020 NVIC_IPR7_fields
0800da24 l     O .rodata	00000020 NVIC_IPR8_fields
0800da44 l     O .rodata	00000020 NVIC_IPR9_fields
0800da64 l     O .rodata	00000008 NVIC_ISER0_fields
0800da6c l     O .rodata	00000008 NVIC_ISER1_fields
0800da74 l     O .rodata	00000008 NVIC_ISER2_fields
0800da7c l     O .rodata	00000008 NVIC_ISPR0_fields
0800da84 l     O .rodata	00000008 NVIC_ISPR1_fields
0800da8c l     O .rodata	00000008 NVIC_ISPR2_fields
0800da94 l     O .rodata	00000008 NVIC_STIR_STIR_fields
0800da9c l     O .rodata	00000010 NVIC_STIR_registers
0800daac l     O .rodata	00000230 NVIC_registers
0800dcdc l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL1_fields
0800dd44 l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL2_fields
0800ddac l     O .rodata	00000068 OTG_FS_DEVICE_DIEPCTL3_fields
0800de14 l     O .rodata	00000008 OTG_FS_DEVICE_DIEPEMPMSK_fields
0800de1c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT0_fields
0800de4c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT1_fields
0800de7c l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT2_fields
0800deac l     O .rodata	00000030 OTG_FS_DEVICE_DIEPINT3_fields
0800dedc l     O .rodata	00000010 OTG_FS_DEVICE_DIEPTSIZ0_fields
0800deec l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ1_fields
0800df04 l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ2_fields
0800df1c l     O .rodata	00000018 OTG_FS_DEVICE_DIEPTSIZ3_fields
0800df34 l     O .rodata	00000050 OTG_FS_DEVICE_DOEPCTL0_fields
0800df84 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL1_fields
0800dfec l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL2_fields
0800e054 l     O .rodata	00000068 OTG_FS_DEVICE_DOEPCTL3_fields
0800e0bc l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT0_fields
0800e0e4 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT1_fields
0800e10c l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT2_fields
0800e134 l     O .rodata	00000028 OTG_FS_DEVICE_DOEPINT3_fields
0800e15c l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ0_fields
0800e174 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ1_fields
0800e18c l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ2_fields
0800e1a4 l     O .rodata	00000018 OTG_FS_DEVICE_DOEPTSIZ3_fields
0800e1bc l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS0_fields
0800e1c4 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS1_fields
0800e1cc l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS2_fields
0800e1d4 l     O .rodata	00000008 OTG_FS_DEVICE_DTXFSTS3_fields
0800e1dc l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSDIS_fields
0800e1e4 l     O .rodata	00000008 OTG_FS_DEVICE_DVBUSPULSE_fields
0800e1ec l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINTMSK_fields
0800e1fc l     O .rodata	00000010 OTG_FS_DEVICE_FS_DAINT_fields
0800e20c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DCFG_fields
0800e22c l     O .rodata	00000050 OTG_FS_DEVICE_FS_DCTL_fields
0800e27c l     O .rodata	00000050 OTG_FS_DEVICE_FS_DIEPCTL0_fields
0800e2cc l     O .rodata	00000030 OTG_FS_DEVICE_FS_DIEPMSK_fields
0800e2fc l     O .rodata	00000020 OTG_FS_DEVICE_FS_DOEPMSK_fields
0800e31c l     O .rodata	00000020 OTG_FS_DEVICE_FS_DSTS_fields
0800e33c l     O .rodata	00000260 OTG_FS_DEVICE_registers
0800e59c l     O .rodata	00000008 OTG_FS_GLOBAL_FS_CID_fields
0800e5a4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF1_fields
0800e5b4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF2_fields
0800e5c4 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_DIEPTXF3_fields
0800e5d4 l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GAHBCFG_fields
0800e5ec l     O .rodata	00000020 OTG_FS_GLOBAL_FS_GCCFG_fields
0800e60c l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTMSK_fields
0800e6d4 l     O .rodata	000000c8 OTG_FS_GLOBAL_FS_GINTSTS_fields
0800e79c l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_fields
0800e7ac l     O .rodata	00000010 OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_fields
0800e7bc l     O .rodata	00000018 OTG_FS_GLOBAL_FS_GNPTXSTS_fields
0800e7d4 l     O .rodata	00000050 OTG_FS_GLOBAL_FS_GOTGCTL_fields
0800e824 l     O .rodata	00000030 OTG_FS_GLOBAL_FS_GOTGINT_fields
0800e854 l     O .rodata	00000038 OTG_FS_GLOBAL_FS_GRSTCTL_fields
0800e88c l     O .rodata	00000008 OTG_FS_GLOBAL_FS_GRXFSIZ_fields
0800e894 l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Device_fields
0800e8bc l     O .rodata	00000028 OTG_FS_GLOBAL_FS_GRXSTSR_Host_fields
0800e8e4 l     O .rodata	00000040 OTG_FS_GLOBAL_FS_GUSBCFG_fields
0800e924 l     O .rodata	00000010 OTG_FS_GLOBAL_FS_HPTXFSIZ_fields
0800e934 l     O .rodata	00000130 OTG_FS_GLOBAL_registers
0800ea64 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR0_fields
0800eab4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR1_fields
0800eb04 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR2_fields
0800eb54 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR3_fields
0800eba4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR4_fields
0800ebf4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR5_fields
0800ec44 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR6_fields
0800ec94 l     O .rodata	00000050 OTG_FS_HOST_FS_HCCHAR7_fields
0800ece4 l     O .rodata	00000010 OTG_FS_HOST_FS_HCFG_fields
0800ecf4 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT0_fields
0800ed3c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT1_fields
0800ed84 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT2_fields
0800edcc l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT3_fields
0800ee14 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT4_fields
0800ee5c l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT5_fields
0800eea4 l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT6_fields
0800eeec l     O .rodata	00000048 OTG_FS_HOST_FS_HCINT7_fields
0800ef34 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK0_fields
0800ef84 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK1_fields
0800efd4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK2_fields
0800f024 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK3_fields
0800f074 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK4_fields
0800f0c4 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK5_fields
0800f114 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK6_fields
0800f164 l     O .rodata	00000050 OTG_FS_HOST_FS_HCINTMSK7_fields
0800f1b4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ0_fields
0800f1cc l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ1_fields
0800f1e4 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ2_fields
0800f1fc l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ3_fields
0800f214 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ4_fields
0800f22c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ5_fields
0800f244 l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ6_fields
0800f25c l     O .rodata	00000018 OTG_FS_HOST_FS_HCTSIZ7_fields
0800f274 l     O .rodata	00000010 OTG_FS_HOST_FS_HFNUM_fields
0800f284 l     O .rodata	00000068 OTG_FS_HOST_FS_HPRT_fields
0800f2ec l     O .rodata	00000018 OTG_FS_HOST_FS_HPTXSTS_fields
0800f304 l     O .rodata	00000008 OTG_FS_HOST_HAINTMSK_fields
0800f30c l     O .rodata	00000008 OTG_FS_HOST_HAINT_fields
0800f314 l     O .rodata	00000008 OTG_FS_HOST_HFIR_fields
0800f31c l     O .rodata	00000270 OTG_FS_HOST_registers
0800f58c l     O .rodata	00000018 OTG_FS_PWRCLK_FS_PCGCCTL_fields
0800f5a4 l     O .rodata	00000010 OTG_FS_PWRCLK_registers
0800f5b4 l     O .rodata	00000050 PWR_CR_fields
0800f604 l     O .rodata	00000038 PWR_CSR_fields
0800f63c l     O .rodata	00000020 PWR_registers
0800f65c l     O .rodata	00000380 Peripherals
08011cf4 l     O .rodata	00000150 TIM2_registers
08012194 l     O .rodata	00000140 TIM3_registers
0801262c l     O .rodata	00000150 TIM5_registers
0801057c l     O .rodata	00000270 RTC_registers
08012c54 l     O .rodata	00000030 WWDG_registers
08012b8c l     O .rodata	00000070 USART1_registers
0801183c l     O .rodata	00000160 TIM1_registers
08010e74 l     O .rodata	00000120 SDIO_registers
080110bc l     O .rodata	00000070 SYSCFG_registers
08012904 l     O .rodata	000000e0 TIM9_registers
080111fc l     O .rodata	000000b0 TIM10_registers
08011384 l     O .rodata	000000c0 TIM11_registers
0800ffcc l     O .rodata	00000140 RCC_registers
08010814 l     O .rodata	00000010 SCB_ACTRL_registers
08010fdc l     O .rodata	00000040 STK_registers
08010a74 l     O .rodata	000000f0 SCB_registers
0800f9dc l     O .rodata	00000048 RCC_AHB1ENR_fields
0800fa24 l     O .rodata	00000058 RCC_AHB1LPENR_fields
0800fa7c l     O .rodata	00000048 RCC_AHB1RSTR_fields
0800fac4 l     O .rodata	00000008 RCC_AHB2ENR_fields
0800facc l     O .rodata	00000008 RCC_AHB2LPENR_fields
0800fad4 l     O .rodata	00000008 RCC_AHB2RSTR_fields
0800fadc l     O .rodata	00000060 RCC_APB1ENR_fields
0800fb3c l     O .rodata	00000060 RCC_APB1LPENR_fields
0800fb9c l     O .rodata	00000060 RCC_APB1RSTR_fields
0800fbfc l     O .rodata	00000058 RCC_APB2ENR_fields
0800fc54 l     O .rodata	00000058 RCC_APB2LPENR_fields
0800fcac l     O .rodata	00000050 RCC_APB2RSTR_fields
0800fcfc l     O .rodata	00000038 RCC_BDCR_fields
0800fd34 l     O .rodata	00000068 RCC_CFGR_fields
0800fd9c l     O .rodata	000000a0 RCC_CIR_fields
0800fe3c l     O .rodata	00000060 RCC_CR_fields
0800fe9c l     O .rodata	00000050 RCC_CSR_fields
0800feec l     O .rodata	000000b0 RCC_PLLCFGR_fields
0800ff9c l     O .rodata	00000010 RCC_PLLI2SCFGR_fields
0800ffac l     O .rodata	00000020 RCC_SSCGR_fields
0801010c l     O .rodata	00000070 RTC_ALRMAR_fields
0801017c l     O .rodata	00000010 RTC_ALRMASSR_fields
0801018c l     O .rodata	00000070 RTC_ALRMBR_fields
080101fc l     O .rodata	00000010 RTC_ALRMBSSR_fields
0801020c l     O .rodata	00000008 RTC_BKP0R_fields
08010214 l     O .rodata	00000008 RTC_BKP10R_fields
0801021c l     O .rodata	00000008 RTC_BKP11R_fields
08010224 l     O .rodata	00000008 RTC_BKP12R_fields
0801022c l     O .rodata	00000008 RTC_BKP13R_fields
08010234 l     O .rodata	00000008 RTC_BKP14R_fields
0801023c l     O .rodata	00000008 RTC_BKP15R_fields
08010244 l     O .rodata	00000008 RTC_BKP16R_fields
0801024c l     O .rodata	00000008 RTC_BKP17R_fields
08010254 l     O .rodata	00000008 RTC_BKP18R_fields
0801025c l     O .rodata	00000008 RTC_BKP19R_fields
08010264 l     O .rodata	00000008 RTC_BKP1R_fields
0801026c l     O .rodata	00000008 RTC_BKP2R_fields
08010274 l     O .rodata	00000008 RTC_BKP3R_fields
0801027c l     O .rodata	00000008 RTC_BKP4R_fields
08010284 l     O .rodata	00000008 RTC_BKP5R_fields
0801028c l     O .rodata	00000008 RTC_BKP6R_fields
08010294 l     O .rodata	00000008 RTC_BKP7R_fields
0801029c l     O .rodata	00000008 RTC_BKP8R_fields
080102a4 l     O .rodata	00000008 RTC_BKP9R_fields
080102ac l     O .rodata	00000010 RTC_CALIBR_fields
080102bc l     O .rodata	00000020 RTC_CALR_fields
080102dc l     O .rodata	000000a8 RTC_CR_fields
08010384 l     O .rodata	00000038 RTC_DR_fields
080103bc l     O .rodata	00000080 RTC_ISR_fields
0801043c l     O .rodata	00000010 RTC_PRER_fields
0801044c l     O .rodata	00000010 RTC_SHIFTR_fields
0801045c l     O .rodata	00000008 RTC_SSR_fields
08010464 l     O .rodata	00000068 RTC_TAFCR_fields
080104cc l     O .rodata	00000038 RTC_TR_fields
08010504 l     O .rodata	00000028 RTC_TSDR_fields
0801052c l     O .rodata	00000008 RTC_TSSSR_fields
08010534 l     O .rodata	00000038 RTC_TSTR_fields
0801056c l     O .rodata	00000008 RTC_WPR_fields
08010574 l     O .rodata	00000008 RTC_WUTR_fields
080107ec l     O .rodata	00000028 SCB_ACTRL_ACTRL_fields
08010824 l     O .rodata	00000008 SCB_AFSR_fields
0801082c l     O .rodata	00000030 SCB_AIRCR_fields
0801085c l     O .rodata	00000008 SCB_BFAR_fields
08010864 l     O .rodata	00000030 SCB_CCR_fields
08010894 l     O .rodata	00000090 SCB_CFSR_UFSR_BFSR_MMFSR_fields
08010924 l     O .rodata	00000028 SCB_CPUID_fields
0801094c l     O .rodata	00000018 SCB_HFSR_fields
08010964 l     O .rodata	00000048 SCB_ICSR_fields
080109ac l     O .rodata	00000008 SCB_MMFAR_fields
080109b4 l     O .rodata	00000018 SCB_SCR_fields
080109cc l     O .rodata	00000070 SCB_SHCRS_fields
08010a3c l     O .rodata	00000018 SCB_SHPR1_fields
08010a54 l     O .rodata	00000008 SCB_SHPR2_fields
08010a5c l     O .rodata	00000010 SCB_SHPR3_fields
08010a6c l     O .rodata	00000008 SCB_VTOR_fields
08010b64 l     O .rodata	00000008 SDIO_ARG_fields
08010b6c l     O .rodata	00000038 SDIO_CLKCR_fields
08010ba4 l     O .rodata	00000048 SDIO_CMD_fields
08010bec l     O .rodata	00000008 SDIO_DCOUNT_fields
08010bf4 l     O .rodata	00000048 SDIO_DCTRL_fields
08010c3c l     O .rodata	00000008 SDIO_DLEN_fields
08010c44 l     O .rodata	00000008 SDIO_DTIMER_fields
08010c4c l     O .rodata	00000008 SDIO_FIFOCNT_fields
08010c54 l     O .rodata	00000008 SDIO_FIFO_fields
08010c5c l     O .rodata	00000068 SDIO_ICR_fields
08010cc4 l     O .rodata	000000c0 SDIO_MASK_fields
08010d84 l     O .rodata	00000008 SDIO_POWER_fields
08010d8c l     O .rodata	00000008 SDIO_RESP1_fields
08010d94 l     O .rodata	00000008 SDIO_RESP2_fields
08010d9c l     O .rodata	00000008 SDIO_RESP3_fields
08010da4 l     O .rodata	00000008 SDIO_RESP4_fields
08010dac l     O .rodata	00000008 SDIO_RESPCMD_fields
08010db4 l     O .rodata	000000c0 SDIO_STA_fields
08010f94 l     O .rodata	00000018 STK_CALIB_fields
08010fac l     O .rodata	00000020 STK_CTRL_fields
08010fcc l     O .rodata	00000008 STK_LOAD_fields
08010fd4 l     O .rodata	00000008 STK_VAL_fields
0801101c l     O .rodata	00000010 SYSCFG_CMPCR_fields
0801102c l     O .rodata	00000020 SYSCFG_EXTICR1_fields
0801104c l     O .rodata	00000020 SYSCFG_EXTICR2_fields
0801106c l     O .rodata	00000020 SYSCFG_EXTICR3_fields
0801108c l     O .rodata	00000020 SYSCFG_EXTICR4_fields
080110ac l     O .rodata	00000008 SYSCFG_MEMRM_fields
080110b4 l     O .rodata	00000008 SYSCFG_PMC_fields
0801112c l     O .rodata	00000008 TIM10_ARR_fields
08011134 l     O .rodata	00000018 TIM10_CCER_fields
0801114c l     O .rodata	00000018 TIM10_CCMR1_Input_fields
08011164 l     O .rodata	00000020 TIM10_CCMR1_Output_fields
08011184 l     O .rodata	00000008 TIM10_CCR1_fields
0801118c l     O .rodata	00000008 TIM10_CNT_fields
08011194 l     O .rodata	00000028 TIM10_CR1_fields
080111bc l     O .rodata	00000010 TIM10_DIER_fields
080111cc l     O .rodata	00000010 TIM10_EGR_fields
080111dc l     O .rodata	00000008 TIM10_PSC_fields
080111e4 l     O .rodata	00000018 TIM10_SR_fields
080112ac l     O .rodata	00000008 TIM11_ARR_fields
080112b4 l     O .rodata	00000018 TIM11_CCER_fields
080112cc l     O .rodata	00000018 TIM11_CCMR1_Input_fields
080112e4 l     O .rodata	00000020 TIM11_CCMR1_Output_fields
08011304 l     O .rodata	00000008 TIM11_CCR1_fields
0801130c l     O .rodata	00000008 TIM11_CNT_fields
08011314 l     O .rodata	00000028 TIM11_CR1_fields
0801133c l     O .rodata	00000010 TIM11_DIER_fields
0801134c l     O .rodata	00000010 TIM11_EGR_fields
0801135c l     O .rodata	00000008 TIM11_OR_fields
08011364 l     O .rodata	00000008 TIM11_PSC_fields
0801136c l     O .rodata	00000018 TIM11_SR_fields
08011444 l     O .rodata	00000008 TIM1_ARR_fields
0801144c l     O .rodata	00000040 TIM1_BDTR_fields
0801148c l     O .rodata	00000070 TIM1_CCER_fields
080114fc l     O .rodata	00000030 TIM1_CCMR1_Input_fields
0801152c l     O .rodata	00000050 TIM1_CCMR1_Output_fields
0801157c l     O .rodata	00000030 TIM1_CCMR2_Input_fields
080115ac l     O .rodata	00000050 TIM1_CCMR2_Output_fields
080115fc l     O .rodata	00000008 TIM1_CCR1_fields
08011604 l     O .rodata	00000008 TIM1_CCR2_fields
0801160c l     O .rodata	00000008 TIM1_CCR3_fields
08011614 l     O .rodata	00000008 TIM1_CCR4_fields
0801161c l     O .rodata	00000008 TIM1_CNT_fields
08011624 l     O .rodata	00000040 TIM1_CR1_fields
08011664 l     O .rodata	00000060 TIM1_CR2_fields
080116c4 l     O .rodata	00000010 TIM1_DCR_fields
080116d4 l     O .rodata	00000078 TIM1_DIER_fields
0801174c l     O .rodata	00000008 TIM1_DMAR_fields
08011754 l     O .rodata	00000040 TIM1_EGR_fields
08011794 l     O .rodata	00000008 TIM1_PSC_fields
0801179c l     O .rodata	00000008 TIM1_RCR_fields
080117a4 l     O .rodata	00000038 TIM1_SMCR_fields
080117dc l     O .rodata	00000060 TIM1_SR_fields
0801199c l     O .rodata	00000010 TIM2_ARR_fields
080119ac l     O .rodata	00000060 TIM2_CCER_fields
08011a0c l     O .rodata	00000030 TIM2_CCMR1_Input_fields
08011a3c l     O .rodata	00000050 TIM2_CCMR1_Output_fields
08011a8c l     O .rodata	00000030 TIM2_CCMR2_Input_fields
08011abc l     O .rodata	00000050 TIM2_CCMR2_Output_fields
08011b0c l     O .rodata	00000010 TIM2_CCR1_fields
08011b1c l     O .rodata	00000010 TIM2_CCR2_fields
08011b2c l     O .rodata	00000010 TIM2_CCR3_fields
08011b3c l     O .rodata	00000010 TIM2_CCR4_fields
08011b4c l     O .rodata	00000010 TIM2_CNT_fields
08011b5c l     O .rodata	00000040 TIM2_CR1_fields
08011b9c l     O .rodata	00000018 TIM2_CR2_fields
08011bb4 l     O .rodata	00000010 TIM2_DCR_fields
08011bc4 l     O .rodata	00000060 TIM2_DIER_fields
08011c24 l     O .rodata	00000008 TIM2_DMAR_fields
08011c2c l     O .rodata	00000030 TIM2_EGR_fields
08011c5c l     O .rodata	00000008 TIM2_OR_fields
08011c64 l     O .rodata	00000008 TIM2_PSC_fields
08011c6c l     O .rodata	00000038 TIM2_SMCR_fields
08011ca4 l     O .rodata	00000050 TIM2_SR_fields
08011e44 l     O .rodata	00000010 TIM3_ARR_fields
08011e54 l     O .rodata	00000060 TIM3_CCER_fields
08011eb4 l     O .rodata	00000030 TIM3_CCMR1_Input_fields
08011ee4 l     O .rodata	00000050 TIM3_CCMR1_Output_fields
08011f34 l     O .rodata	00000030 TIM3_CCMR2_Input_fields
08011f64 l     O .rodata	00000050 TIM3_CCMR2_Output_fields
08011fb4 l     O .rodata	00000010 TIM3_CCR1_fields
08011fc4 l     O .rodata	00000010 TIM3_CCR2_fields
08011fd4 l     O .rodata	00000010 TIM3_CCR3_fields
08011fe4 l     O .rodata	00000010 TIM3_CCR4_fields
08011ff4 l     O .rodata	00000010 TIM3_CNT_fields
08012004 l     O .rodata	00000040 TIM3_CR1_fields
08012044 l     O .rodata	00000018 TIM3_CR2_fields
0801205c l     O .rodata	00000010 TIM3_DCR_fields
0801206c l     O .rodata	00000060 TIM3_DIER_fields
080120cc l     O .rodata	00000008 TIM3_DMAR_fields
080120d4 l     O .rodata	00000030 TIM3_EGR_fields
08012104 l     O .rodata	00000008 TIM3_PSC_fields
0801210c l     O .rodata	00000038 TIM3_SMCR_fields
08012144 l     O .rodata	00000050 TIM3_SR_fields
080122d4 l     O .rodata	00000010 TIM5_ARR_fields
080122e4 l     O .rodata	00000060 TIM5_CCER_fields
08012344 l     O .rodata	00000030 TIM5_CCMR1_Input_fields
08012374 l     O .rodata	00000050 TIM5_CCMR1_Output_fields
080123c4 l     O .rodata	00000030 TIM5_CCMR2_Input_fields
080123f4 l     O .rodata	00000050 TIM5_CCMR2_Output_fields
08012444 l     O .rodata	00000010 TIM5_CCR1_fields
08012454 l     O .rodata	00000010 TIM5_CCR2_fields
08012464 l     O .rodata	00000010 TIM5_CCR3_fields
08012474 l     O .rodata	00000010 TIM5_CCR4_fields
08012484 l     O .rodata	00000010 TIM5_CNT_fields
08012494 l     O .rodata	00000040 TIM5_CR1_fields
080124d4 l     O .rodata	00000018 TIM5_CR2_fields
080124ec l     O .rodata	00000010 TIM5_DCR_fields
080124fc l     O .rodata	00000060 TIM5_DIER_fields
0801255c l     O .rodata	00000008 TIM5_DMAR_fields
08012564 l     O .rodata	00000030 TIM5_EGR_fields
08012594 l     O .rodata	00000008 TIM5_OR_fields
0801259c l     O .rodata	00000008 TIM5_PSC_fields
080125a4 l     O .rodata	00000038 TIM5_SMCR_fields
080125dc l     O .rodata	00000050 TIM5_SR_fields
0801277c l     O .rodata	00000008 TIM9_ARR_fields
08012784 l     O .rodata	00000030 TIM9_CCER_fields
080127b4 l     O .rodata	00000030 TIM9_CCMR1_Input_fields
080127e4 l     O .rodata	00000040 TIM9_CCMR1_Output_fields
08012824 l     O .rodata	00000008 TIM9_CCR1_fields
0801282c l     O .rodata	00000008 TIM9_CCR2_fields
08012834 l     O .rodata	00000008 TIM9_CNT_fields
0801283c l     O .rodata	00000030 TIM9_CR1_fields
0801286c l     O .rodata	00000008 TIM9_CR2_fields
08012874 l     O .rodata	00000020 TIM9_DIER_fields
08012894 l     O .rodata	00000020 TIM9_EGR_fields
080128b4 l     O .rodata	00000008 TIM9_PSC_fields
080128bc l     O .rodata	00000018 TIM9_SMCR_fields
080128d4 l     O .rodata	00000030 TIM9_SR_fields
080129e4 l     O .rodata	00000010 TerminalInfo
080129f4 l     O .rodata	00000010 USART1_BRR_fields
08012a04 l     O .rodata	00000078 USART1_CR1_fields
08012a7c l     O .rodata	00000048 USART1_CR2_fields
08012ac4 l     O .rodata	00000060 USART1_CR3_fields
08012b24 l     O .rodata	00000008 USART1_DR_fields
08012b2c l     O .rodata	00000010 USART1_GTPR_fields
08012b3c l     O .rodata	00000050 USART1_SR_fields
08012bfc l     O .rodata	00000019 VersionBuildDateString
08012c15 l     O .rodata	00000006 VersionBuildUser
08012c1c l     O .rodata	00000020 WWDG_CFR_fields
08012c3c l     O .rodata	00000010 WWDG_CR_fields
08012c4c l     O .rodata	00000008 WWDG_SR_fields
08012c84 l     O .rodata	00000006 __FUNCTION__.0.lto_priv.0
08012c8a l     O .rodata	00000013 __FUNCTION__.0.lto_priv.1
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08003f78 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 dtoa.c
080040ac l     F .text	00000116 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004f28 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08013118 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08005ad4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
2000001c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00005a4b l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00005ca4 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00005e23 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00006aec l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
000078b1 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00009b52 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
0000a7a9 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
0000a972 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
0000af67 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
0000b1ff l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
0000c276 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
0000c62f l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
0000c920 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
0000cbec l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
0000d160 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
0000dcf2 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
0000dd9e l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
0000eba1 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
0000f0a8 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
0000f8f3 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00010066 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00010b93 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00012187 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00012859 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00012a08 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00014c8a l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00015e01 l       .debug_info	00000000 
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0801324c l       .init_array	00000000 __init_array_end
08013248 l       .init_array	00000000 __preinit_array_end
08013248 l       .init_array	00000000 __init_array_start
08013248 l       .init_array	00000000 __preinit_array_start
080033f4  w    F .text	00000006 RTC_Alarm_IRQHandler
080060dc g     F .text	00000010 _malloc_usable_size_r
08003460 g     F .text	000000c4 __cvt
080033f4  w    F .text	00000006 EXTI2_IRQHandler
0800611c g     F .text	0000002c putchar
08000b7c g     F .text	0000002c .hidden __aeabi_dcmpun
08002b52 g     F .text	00000004 _isatty_r
08000b40 g     F .text	00000012 .hidden __aeabi_dcmple
08006268 g     F .text	00000010 strcpy
0801318c g     O .rodata	0000000c CmdPWMInitE
08002bac g     F .text	00000004 _getpid
08006148 g     F .text	000000dc _puts_r
08000a7c g     F .text	0000007a .hidden __cmpdf2
08002b56 g     F .text	00000004 _lseek_r
0800336c g     F .text	00000002 DebugMon_Handler
08006634 g     F .text	00000074 sqrt
08013150 g     O .rodata	0000000c CmdTestE
080033f4  w    F .text	00000006 SPI4_IRQHandler
08000a7c g     F .text	0000007a .hidden __eqdf2
080005ec g     F .text	0000005a .hidden __floatdidf
00010066  w      .debug_info	00000000 .hidden stm32f4xx_hal_cortex.c.76057a02
080060b4 g     F .text	00000024 _kill_r
080060ec g     F .text	00000030 printf
080033f4  w    F .text	00000006 TIM1_CC_IRQHandler
08005de2 g     F .text	00000024 __sseek
08004fd8 g     F .text	00000070 __sinit
080033f4  w    F .text	00000006 DMA2_Stream5_IRQHandler
08005e10 g     F .text	000000a4 __swbuf_r
08003362 g     F .text	00000002 HardFault_Handler
08004f7c g     F .text	0000002c __sfmoreglue
080033f4  w    F .text	00000006 DMA1_Stream5_IRQHandler
08005ffc g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08003370 g     F .text	00000020 SysTick_Handler
08013174 g     O .rodata	0000000c CmdLedE
080033f4  w    F .text	00000006 PVD_IRQHandler
080033f4  w    F .text	00000006 SDIO_IRQHandler
08005fba g     F .text	00000034 memmove
080033f4  w    F .text	00000006 TAMP_STAMP_IRQHandler
08013250 g       *ABS*	00000000 _sidata
0800336e g     F .text	00000002 PendSV_Handler
08003360 g     F .text	00000002 NMI_Handler
08005260 g     F .text	00000080 _Balloc
08013248 g       .ARM	00000000 __exidx_end
08003f28 g     F .text	00000050 __strtok_r
080033f4  w    F .text	00000006 EXTI3_IRQHandler
08000a6c g     F .text	0000008a .hidden __gtdf2
08013240 g       .rodata	00000000 _parsetable_end
080033fc g     F .text	0000000c __errno
08013228 g     O .rodata	0000000c CmdWE
0000f0a8  w      .debug_info	00000000 .hidden stm32f4xx_hal_rcc.c.0b717c3a
080033f4  w    F .text	00000006 TIM1_UP_TIM10_IRQHandler
08002b48 g     F .text	0000000a _fstat_r
20000c0c g     O .bss	00000004 errno
08006858 g       .text	00000000 _etext
200001f0 g       .bss	00000000 _sbss
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmple
080033f4  w    F .text	00000006 I2C3_ER_IRQHandler
00015e01  w      .debug_info	00000000 .hidden version.c.c66271cc
08005244 g     F .text	0000001c memcpy
08000af8 g     F .text	00000020 .hidden __aeabi_cdrcmple
08003d34 g     F .text	0000018c setvbuf
080131c8 g     O .rodata	0000000c enableDisableStepperE
08004f70 g     F .text	0000000c _cleanup_r
080063a4 g     F .text	00000200 _svfprintf_r
08000574 g     F .text	00000022 .hidden __floatsidf
08000a74 g     F .text	00000082 .hidden __ltdf2
080033f4  w    F .text	00000006 EXTI0_IRQHandler
080033f4  w    F .text	00000006 I2C2_EV_IRQHandler
08000c98 g     F .text	00000000 .hidden __aeabi_uldivmod
08006224 g     F .text	00000010 puts
080033f4  w    F .text	00000006 DMA1_Stream2_IRQHandler
080033f4  w    F .text	00000006 FPU_IRQHandler
080001f4 g     F .text	00000012 my_Tick
080029e8 g     F .text	00000014 USR_LED_Toggle
08005210 g     F .text	00000010 malloc
08013150 g       .rodata	00000000 _tasktable_end
08006054 g     F .text	00000050 _raise_r
08004070 g     F .text	0000003c __assert_func
08013050 g     O .rodata	000000c8 __mprec_tens
0000dd9e  w      .debug_info	00000000 .hidden stm32f4xx_hal_msp.c.38dbe26a
08003368 g     F .text	00000002 UsageFault_Handler
080062d0 g     F .text	0000001c vsnprintf
0000a7a9  w      .debug_info	00000000 .hidden monitor.c.fde8519c
080033f4  w    F .text	00000006 DMA2_Stream2_IRQHandler
080060d8 g     F .text	00000004 _getpid_r
200001f0 g       .bss	00000000 __bss_start__
0800405c g     F .text	00000014 strtoul
08000554 g     F .text	0000001e .hidden __aeabi_ui2d
08005138 g     F .text	00000008 _localeconv_r
00012187  w      .debug_info	00000000 .hidden stm32f4xx_hal_gpio.c.50644346
08005450 g     F .text	0000002c __i2b
20000000 g       .data	00000000 _sdata
080033f4  w    F .text	00000006 SPI1_IRQHandler
080131e0 g     O .rodata	0000000c StepSpeedQActionE
08000cc8 g     F .text	000002d0 .hidden __udivmoddi4
080002d0 g     F .text	00000000 .hidden __aeabi_drsub
08002b14 g     F .text	00000030 _sbrk_r
08002b5a g     F .text	0000000a _read_r
080033f4  w    F .text	00000006 TIM1_BRK_TIM9_IRQHandler
00014c8a  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim_ex.c.b865eb5f
08000b2c g     F .text	00000012 .hidden __aeabi_dcmplt
08013198 g     O .rodata	0000000c CmdStopPWME
08000598 g     F .text	00000042 .hidden __extendsfdf2
0800089c g     F .text	000001d0 .hidden __aeabi_ddiv
080002dc g     F .text	00000276 .hidden __adddf3
08013240 g       .ARM	00000000 __exidx_start
0000d160  w      .debug_info	00000000 .hidden main.c.1a7d7fb7
08000648 g     F .text	00000254 .hidden __aeabi_dmul
080033f4  w    F .text	00000006 DMA2_Stream3_IRQHandler
0801321c g     O .rodata	0000000c CmdVersionE
200001e8 g     O .data	00000001 __fdlib_version
20000c02 g     O .bss	00000001 __lock___sinit_recursive_mutex
08012da0 g     O .rodata	00000004 _global_impure_ptr
08006008 g     F .text	0000004c _realloc_r
08003408 g     F .text	00000048 __libc_init_array
08013028 g     O .rodata	00000028 __mprec_bigtens
0000a972  w      .debug_info	00000000 .hidden parser.c.b3df29a8
08005fac g     F .text	0000000e abort
08000554 g     F .text	0000001e .hidden __floatunsidf
08005764 g     F .text	00000038 __mcmp
200001ec g     O .data	00000004 TaskInputTaskState
0000c276  w      .debug_info	00000000 .hidden wdog.c.2ed661f3
080033f4  w    F .text	00000006 USART6_IRQHandler
08006840 g     F .text	00000000 _init
08013150 g       .rodata	00000000 _parsetable_start
08013138 g       .rodata	00000000 _tasktable_start
080131a4 g     O .rodata	0000000c CmdRE
08000bf8 g     F .text	0000009e .hidden __aeabi_d2f
20000c10 g       .bss	00000000 _ebss
00009b52  w      .debug_info	00000000 .hidden syscall.c.22a9b707
080033a4  w    F .text	00000038 Reset_Handler
080062d0 g     F .text	0000001c vsniprintf
080053b0 g     F .text	00000040 __hi0bits
08000ba8 g     F .text	0000004e .hidden __fixdfsi
000078b1  w      .debug_info	00000000 .hidden STM32F411.c.9cc80342
20000c00 g     O .bss	00000001 __lock___malloc_recursive_mutex
080033f4  w    F .text	00000006 DMA2_Stream0_IRQHandler
080065a4 g     F .text	00000090 _putc_r
080050d4 g     F .text	00000024 fprintf
080033f4  w    F .text	00000006 TIM4_IRQHandler
080002dc g     F .text	00000276 .hidden __aeabi_dadd
08000a74 g     F .text	00000082 .hidden __ledf2
00005e23  w      .debug_info	00000000 .hidden pwm_example.c.a0c1b534
080055d0 g     F .text	000000b4 __pow5mult
080005dc g     F .text	0000006a .hidden __aeabi_ul2d
0000b1ff  w      .debug_info	00000000 .hidden terminal.c.02020bb3
080001e0 g     F .text	00000014 mytest
08012f44 g     O .rodata	00000020 __sf_fake_stderr
20000c10 g       ._user_heap_stack	00000000 end
080033f4  w    F .text	00000006 I2C1_EV_IRQHandler
08005144 g     F .text	00000002 __retarget_lock_release_recursive
080033f4  w    F .text	00000006 DMA1_Stream6_IRQHandler
200001ec g       .data	00000000 _taskstate_start
080062ec g     F .text	000000b6 __ssputs_r
08000b68 g     F .text	00000012 .hidden __aeabi_dcmpgt
080033f4  w    F .text	00000006 DMA1_Stream1_IRQHandler
08005b02 g     F .text	00000024 __sfputs_r
08004fa8 g     F .text	0000000c __sfp_lock_acquire
08000230 g     F .text	00000000 memchr
080035a0  w    F .text	0000046c _printf_float
20000c10 g       .bss	00000000 __bss_end__
08005988 g     F .text	00000098 _free_r
080033f4  w    F .text	00000006 TIM3_IRQHandler
080033f4  w    F .text	00000006 RCC_IRQHandler
08000b54 g     F .text	00000012 .hidden __aeabi_dcmpge
00000200 g       *ABS*	00000000 _Min_Heap_Size
080002d8 g     F .text	0000027a .hidden __aeabi_dsub
080033f4 g       .text	00000006 Default_Handler
080005dc g     F .text	0000006a .hidden __floatundidf
0000cbec  w      .debug_info	00000000 .hidden decoder.c.8351535a
08005684 g     F .text	000000e0 __lshift
080033f4  w    F .text	00000006 EXTI15_10_IRQHandler
080033f4  w    F .text	00000006 ADC_IRQHandler
0800547c g     F .text	00000154 __multiply
080058b0 g     F .text	000000b8 __d2b
08006234 g     F .text	00000034 strcasecmp
080033f4  w    F .text	00000006 DMA1_Stream7_IRQHandler
0800020c g     F .text	00000004 my_Init
080033f4  w    F .text	00000006 SPI5_IRQHandler
080131b0 g     O .rodata	0000000c CmdReceiveE
08002b44 g     F .text	00000004 _close_r
08000574 g     F .text	00000022 .hidden __aeabi_i2d
080033f4  w    F .text	00000006 TIM5_IRQHandler
08003ec0 g     F .text	00000068 strtok
08013138 g     O .rodata	00000018 TaskInputTask
080033f4  w    F .text	00000006 DMA2_Stream7_IRQHandler
080033f4  w    F .text	00000006 I2C3_EV_IRQHandler
08005ed0 g     F .text	000000dc __swsetup_r
08000f98  w    F .text	00000002 .hidden __aeabi_ldiv0
080033f4  w    F .text	00000006 EXTI9_5_IRQHandler
0800089c g     F .text	000001d0 .hidden __divdf3
08005048 g     F .text	0000008c __sfp
080033f4  w    F .text	00000006 RTC_WKUP_IRQHandler
0000f8f3  w      .debug_info	00000000 .hidden stm32f4xx_hal.c.7deff239
08004fcc g     F .text	0000000c __sinit_lock_release
08006278 g     F .text	00000056 _vsnprintf_r
08000648 g     F .text	00000254 .hidden __muldf3
08005d88 g     F .text	00000022 __sread
00005ca4  w      .debug_info	00000000 .hidden mytest.c.1dc4f770
08005ff0 g     F .text	0000000c __malloc_lock
08004eb0 g     F .text	00000078 _fflush_r
08005968 g     F .text	0000001e _calloc_r
080033f4  w    F .text	00000006 SPI2_IRQHandler
08012f64 g     O .rodata	00000020 __sf_fake_stdin
08013180 g     O .rodata	0000000c CmdPWME
08005142 g     F .text	00000002 __retarget_lock_acquire_recursive
08003450 g     F .text	00000010 memset
08003364 g     F .text	00000002 MemManage_Handler
08002cf0 g     F .text	00000670 main
080033f4  w    F .text	00000006 DMA1_Stream0_IRQHandler
08005140 g     F .text	00000002 __retarget_lock_init_recursive
0000eba1  w      .debug_info	00000000 .hidden system_stm32f4xx.c.bab8416a
0800336a g     F .text	00000002 SVC_Handler
08005e06 g     F .text	00000008 __sclose
08000bf8 g     F .text	0000009e .hidden __truncdfsf2
080041c8 g     F .text	00000bdc _dtoa_r
08005a20 g     F .text	000000b4 _malloc_r
080131bc g     O .rodata	0000000c CmdRGBE
08005eb4 g     F .text	0000001a __ascii_wctomb
080005ec g     F .text	0000005a .hidden __aeabi_l2d
080033f4  w    F .text	00000006 EXTI4_IRQHandler
08003390 g     F .text	00000014 SystemInit
08000a7c g     F .text	0000007a .hidden __nedf2
0800684c g     F .text	00000000 _fini
080060ec g     F .text	00000030 iprintf
200001f0 g       .data	00000000 _taskstate_end
00012a08  w      .debug_info	00000000 .hidden stm32f4xx_hal_tim.c.77979c92
08003524 g     F .text	0000007c __exponent
08002b64 g     F .text	00000040 _write_r
0000dcf2  w      .debug_info	00000000 .hidden stm32f4xx_it.c.d20c6550
08003a0c g     F .text	000000da _printf_common
00010b93  w      .debug_info	00000000 .hidden stm32f4xx_hal_uart.c.5bf028e9
20000018 g     O .data	00000004 _impure_ptr
08004da4 g     F .text	0000010c __sflush_r
080063a4 g     F .text	00000200 _svfiprintf_r
080033f4  w    F .text	00000006 WWDG_IRQHandler
08002c98 g     F .text	00000058 Default_IRQHandler
08005220 g     F .text	00000024 __ascii_mbtowc
08013210 g     O .rodata	0000000c CmdTransparentE
080033f4  w    F .text	00000006 TIM2_IRQHandler
00005a4b  w      .debug_info	00000000 .hidden my_main.c.c786742c
08000208 g     F .text	00000004 my_Loop
0000c62f  w      .debug_info	00000000 .hidden tasking.c.9c17233e
08013168 g     O .rodata	0000000c CmdDecodeE
08006278 g     F .text	00000056 _vsniprintf_r
20000000 g       .data	00000000 myTickCount
080033f4  w    F .text	00000006 OTG_FS_WKUP_IRQHandler
080029fc g     F .text	00000118 TIM1_TRG_COM_TIM11_IRQHandler
080066a8 g     F .text	00000198 __ieee754_sqrt
08005146 g     F .text	0000004a __swhatbuf_r
20020000 g       *ABS*	00000000 _estack
00012859  w      .debug_info	00000000 .hidden stm32f4xx_hal_iwdg.c.5bf8eb69
00006aec  w      .debug_info	00000000 .hidden stepper_example.c.925b217d
080033f4  w    F .text	00000006 EXTI1_IRQHandler
08000b18 g     F .text	00000012 .hidden __aeabi_dcmpeq
200001f0 g       .data	00000000 _edata
0000c920  w      .debug_info	00000000 .hidden default.c.94a4f7dd
080131ec g     O .rodata	0000000c StepSpeedActionE
08002bb0 g     F .text	000000e8 USART2_IRQHandler
08005daa g     F .text	00000038 __swrite
080050d4 g     F .text	00000024 fiprintf
08005b28 g     F .text	00000260 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080050f8 g     F .text	0000003e _fwalk_reent
0800579c g     F .text	00000114 __mdiff
08000ba8 g     F .text	0000004e .hidden __aeabi_d2iz
08002ba4 g     F .text	00000006 _kill
080033f4  w    F .text	00000006 I2C2_ER_IRQHandler
08004fb4 g     F .text	0000000c __sfp_lock_release
08012f84 g     O .rodata	00000020 __sf_fake_stdout
0801315c g     O .rodata	0000000c CmdDumpE
080033f4  w    F .text	00000006 DMA2_Stream1_IRQHandler
08012c9d g     O .rodata	00000101 _ctype_
08000f98  w    F .text	00000002 .hidden __aeabi_idiv0
08000b7c g     F .text	0000002c .hidden __unorddf2
08013204 g     O .rodata	0000000c CmdStatsE
080033f4  w    F .text	00000006 FLASH_IRQHandler
08002baa g     F .text	00000002 _exit
080131f8 g     O .rodata	0000000c CmdTasksE
080033f4  w    F .text	00000006 DMA2_Stream4_IRQHandler
08003366 g     F .text	00000002 BusFault_Handler
080033f4  w    F .text	00000006 USART1_IRQHandler
08005190 g     F .text	00000080 __smakebuf_r
08000214 g     F .text	00000010 strlen
080033f4  w    F .text	00000006 OTG_FS_IRQHandler
08003ae8 g     F .text	0000024c _printf_i
080033f4  w    F .text	00000006 SPI3_IRQHandler
08000b08 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000a6c g     F .text	0000008a .hidden __gedf2
080033f4  w    F .text	00000006 DMA1_Stream4_IRQHandler
20000c08 g     O .bss	00000004 __malloc_sbrk_start
080033f4  w    F .text	00000006 I2C1_ER_IRQHandler
080131d4 g     O .rodata	0000000c CmdSendE
08000598 g     F .text	00000042 .hidden __aeabi_f2d
20000c04 g     O .bss	00000004 __malloc_free_list
080002d8 g     F .text	0000027a .hidden __subdf3
08005b28 g     F .text	00000260 _vfprintf_r
0000af67  w      .debug_info	00000000 .hidden dump.c.b789c9e5
080053f0 g     F .text	0000005e __lo0bits
080033f4  w    F .text	00000006 DMA2_Stream6_IRQHandler
2000007c g     O .data	0000016c __global_locale
080033f4  w    F .text	00000006 DMA1_Stream3_IRQHandler
20000c01 g     O .bss	00000001 __lock___sfp_recursive_mutex
080060a4 g     F .text	00000010 raise
08004fc0 g     F .text	0000000c __sinit_lock_acquire
08005324 g     F .text	0000008c __multadd
080052e0 g     F .text	00000044 _Bfree



Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006840 	.word	0x08006840

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08006840 	.word	0x08006840

080001e0 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e0:	b500      	push	{lr}
    push {r1}
 80001e2:	b402      	push	{r1}
    push {r0-r7}
 80001e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    bl   USR_LED_Toggle           @@ call BSP function
 80001e6:	f002 fbff 	bl	80029e8 <USR_LED_Toggle>
    pop  {r0-r7}
 80001ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001ec:	4908      	ldr	r1, [pc, #32]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001ee:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f0:	bc02      	pop	{r1}
    pop  {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001f4:	b500      	push	{lr}
    push {r0-r1}
 80001f6:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <my_Init+0x4>)
    ldr  r0, [r1]
 80001fa:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 80001fc:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000200:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000202:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000204:	bd00      	pop	{pc}
 8000206:	bf00      	nop

08000208 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000208:	b500      	push	{lr}
    pop  {pc}
 800020a:	bd00      	pop	{pc}

0800020c <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 800020c:	b500      	push	{lr}
    pop  {pc}
 800020e:	bd00      	pop	{pc}
    ldr  r1, =myTickCount
 8000210:	20000000 	.word	0x20000000

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <TerminalRead>:
}
/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(PortIndex_e index, uint8_t *ptr, uint32_t len)
{
 8000f9c:	b530      	push	{r4, r5, lr}
 8000f9e:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000fa2:	4c10      	ldr	r4, [pc, #64]	; (8000fe4 <TerminalRead+0x48>)
 8000fa4:	f640 0534 	movw	r5, #2100	; 0x834
  count = 0;
 8000fa8:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 8000faa:	fb05 4303 	mla	r3, r5, r3, r4
 8000fae:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	b10c      	cbz	r4, 8000fba <TerminalRead+0x1e>
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d101      	bne.n	8000fbe <TerminalRead+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fba:	b662      	cpsie	i
#endif
  
  return 0;
#endif

}
 8000fbc:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8000fbe:	f8b3 4402 	ldrh.w	r4, [r3, #1026]	; 0x402
 8000fc2:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000fc4:	5d1d      	ldrb	r5, [r3, r4]
 8000fc6:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000fc8:	3401      	adds	r4, #1
 8000fca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8000fce:	f8a3 4402 	strh.w	r4, [r3, #1026]	; 0x402
    TerminalState[index].inCount--;
 8000fd2:	f8b3 4404 	ldrh.w	r4, [r3, #1028]	; 0x404
 8000fd6:	3c01      	subs	r4, #1
 8000fd8:	b2a4      	uxth	r4, r4
 8000fda:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
    count++;
 8000fde:	3001      	adds	r0, #1
 8000fe0:	e7e5      	b.n	8000fae <TerminalRead+0x12>
 8000fe2:	bf00      	nop
 8000fe4:	20000214 	.word	0x20000214

08000fe8 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8000fe8:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <Uncompress+0x74>)
{
 8000fec:	b08a      	sub	sp, #40	; 0x28
 8000fee:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8000ff0:	466c      	mov	r4, sp
 8000ff2:	f102 0620 	add.w	r6, r2, #32
 8000ff6:	6810      	ldr	r0, [r2, #0]
 8000ff8:	6851      	ldr	r1, [r2, #4]
 8000ffa:	4625      	mov	r5, r4
 8000ffc:	c503      	stmia	r5!, {r0, r1}
 8000ffe:	3208      	adds	r2, #8
 8001000:	42b2      	cmp	r2, r6
 8001002:	462c      	mov	r4, r5
 8001004:	d1f7      	bne.n	8000ff6 <Uncompress+0xe>
 8001006:	6810      	ldr	r0, [r2, #0]
 8001008:	6028      	str	r0, [r5, #0]
 800100a:	8892      	ldrh	r2, [r2, #4]
 800100c:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 800100e:	4618      	mov	r0, r3
 8001010:	4d13      	ldr	r5, [pc, #76]	; (8001060 <Uncompress+0x78>)
 8001012:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 8001016:	2100      	movs	r1, #0
 8001018:	ba5b      	rev16	r3, r3
 800101a:	b29b      	uxth	r3, r3
  i = 0;
 800101c:	460c      	mov	r4, r1
 800101e:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8001020:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 8001024:	d103      	bne.n	800102e <Uncompress+0x46>
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <Uncompress+0x78>)
  buf[i]='\0';
 8001028:	5532      	strb	r2, [r6, r4]
}
 800102a:	b00a      	add	sp, #40	; 0x28
 800102c:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 800102e:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8001030:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 8001034:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001038:	f3c2 4205 	ubfx	r2, r2, #16, #6
 800103c:	4462      	add	r2, ip
    buf[i++] = c;
 800103e:	3401      	adds	r4, #1
 8001040:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 8001044:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8001048:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 800104a:	2a07      	cmp	r2, #7
      bits -= 8;
 800104c:	bf81      	itttt	hi
 800104e:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++) & 0xff) << bits; 
 8001050:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 8001054:	4091      	lslhi	r1, r2
 8001056:	430b      	orrhi	r3, r1
 8001058:	4611      	mov	r1, r2
 800105a:	e7e1      	b.n	8001020 <Uncompress+0x38>
 800105c:	08006c98 	.word	0x08006c98
 8001060:	20000a4c 	.word	0x20000a4c

08001064 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_TIM_Base_MspInit+0x28>)
 8001068:	429a      	cmp	r2, r3
{
 800106a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM11)
 800106c:	d10b      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_TIM_Base_MspInit+0x2c>)
 8001074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001076:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001086:	b002      	add	sp, #8
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40014800 	.word	0x40014800
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800109e:	5cd3      	ldrb	r3, [r2, r3]
 80010a0:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010a2:	6810      	ldr	r0, [r2, #0]
}
 80010a4:	40d8      	lsrs	r0, r3
 80010a6:	4770      	bx	lr
 80010a8:	40023800 	.word	0x40023800
 80010ac:	0800aa88 	.word	0x0800aa88
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <HAL_Delay+0x10>)
 80010b6:	6811      	ldr	r1, [r2, #0]
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 80010b8:	3001      	adds	r0, #1
  return uwTick;
 80010ba:	6813      	ldr	r3, [r2, #0]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010bc:	1a5b      	subs	r3, r3, r1
 80010be:	4283      	cmp	r3, r0
 80010c0:	d3fb      	bcc.n	80010ba <HAL_Delay+0x6>
  {
  }
}
 80010c2:	4770      	bx	lr
 80010c4:	20000bfc 	.word	0x20000bfc

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001254 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4a5e      	ldr	r2, [pc, #376]	; (800124c <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80010d6:	2401      	movs	r4, #1
 80010d8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80010de:	43ac      	bics	r4, r5
 80010e0:	f040 80a5 	bne.w	800122e <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e4:	684d      	ldr	r5, [r1, #4]
 80010e6:	f005 0403 	and.w	r4, r5, #3
 80010ea:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ee:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fc:	d834      	bhi.n	8001168 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80010fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001104:	68cf      	ldr	r7, [r1, #12]
 8001106:	fa07 f708 	lsl.w	r7, r7, r8
 800110a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800110e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001110:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001112:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800111a:	409f      	lsls	r7, r3
 800111c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001120:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001122:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001124:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	688f      	ldr	r7, [r1, #8]
 800112a:	fa07 f708 	lsl.w	r7, r7, r8
 800112e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001134:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	d119      	bne.n	800116c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001138:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800113c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001140:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001144:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001148:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800114c:	f04f 0e0f 	mov.w	lr, #15
 8001150:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001154:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	690f      	ldr	r7, [r1, #16]
 800115a:	fa07 f70b 	lsl.w	r7, r7, fp
 800115e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001162:	f8ca 7020 	str.w	r7, [sl, #32]
 8001166:	e001      	b.n	800116c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	2c03      	cmp	r4, #3
 800116a:	d1da      	bne.n	8001122 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800116c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001174:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001176:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800117a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	d057      	beq.n	800122e <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	f04f 0a00 	mov.w	sl, #0
 8001182:	f8cd a004 	str.w	sl, [sp, #4]
 8001186:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	4c31      	ldr	r4, [pc, #196]	; (8001250 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001190:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001194:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001198:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800119c:	9601      	str	r6, [sp, #4]
 800119e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	f023 0603 	bic.w	r6, r3, #3
 80011a4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80011a8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011b0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011b8:	270f      	movs	r7, #15
 80011ba:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c4:	d03a      	beq.n	800123c <HAL_GPIO_Init+0x174>
 80011c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011ca:	42a0      	cmp	r0, r4
 80011cc:	d038      	beq.n	8001240 <HAL_GPIO_Init+0x178>
 80011ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011d2:	42a0      	cmp	r0, r4
 80011d4:	d036      	beq.n	8001244 <HAL_GPIO_Init+0x17c>
 80011d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011da:	42a0      	cmp	r0, r4
 80011dc:	d034      	beq.n	8001248 <HAL_GPIO_Init+0x180>
 80011de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011e2:	42a0      	cmp	r0, r4
 80011e4:	bf0c      	ite	eq
 80011e6:	2404      	moveq	r4, #4
 80011e8:	2407      	movne	r4, #7
 80011ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80011ee:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80011f2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f8:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80011fa:	bf54      	ite	pl
 80011fc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011fe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001202:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001204:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001208:	bf54      	ite	pl
 800120a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800120c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001210:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001214:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001216:	bf54      	ite	pl
 8001218:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800121a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800121e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001222:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001224:	bf54      	ite	pl
 8001226:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001228:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800122c:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	3301      	adds	r3, #1
 8001230:	2b10      	cmp	r3, #16
 8001232:	f47f af4f 	bne.w	80010d4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001236:	b003      	add	sp, #12
 8001238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123c:	4654      	mov	r4, sl
 800123e:	e7d4      	b.n	80011ea <HAL_GPIO_Init+0x122>
 8001240:	2401      	movs	r4, #1
 8001242:	e7d2      	b.n	80011ea <HAL_GPIO_Init+0x122>
 8001244:	2402      	movs	r4, #2
 8001246:	e7d0      	b.n	80011ea <HAL_GPIO_Init+0x122>
 8001248:	2403      	movs	r4, #3
 800124a:	e7ce      	b.n	80011ea <HAL_GPIO_Init+0x122>
 800124c:	40013c00 	.word	0x40013c00
 8001250:	40020000 	.word	0x40020000
 8001254:	40023800 	.word	0x40023800

08001258 <gpioInit>:
HAL_TIM_Base_Start_IT(&tim11);
	
}


void gpioInit(){
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	2400      	movs	r4, #0
void gpioInit(){
 800125c:	b08b      	sub	sp, #44	; 0x2c
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <gpioInit+0xb0>)
 8001264:	9401      	str	r4, [sp, #4]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	4d28      	ldr	r5, [pc, #160]	; (800130c <gpioInit+0xb4>)
 800126c:	4e28      	ldr	r6, [pc, #160]	; (8001310 <gpioInit+0xb8>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126e:	4829      	ldr	r0, [pc, #164]	; (8001314 <gpioInit+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	f042 0204 	orr.w	r2, r2, #4
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
 8001276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001278:	f002 0204 	and.w	r2, r2, #4
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001280:	9402      	str	r4, [sp, #8]
 8001282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
 800128a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001290:	9202      	str	r2, [sp, #8]
 8001292:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	9403      	str	r4, [sp, #12]
 8001296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
 800129e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a0:	f002 0201 	and.w	r2, r2, #1
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	9404      	str	r4, [sp, #16]
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	f042 0202 	orr.w	r2, r2, #2
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	9304      	str	r3, [sp, #16]
 80012ba:	9b04      	ldr	r3, [sp, #16]
 80012bc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80012c0:	61ab      	str	r3, [r5, #24]
 80012c2:	f04f 6382 	mov.w	r3, #68157440	; 0x4100000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ca:	61b3      	str	r3, [r6, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012cc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d2:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2701      	movs	r7, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f7ff fef6 	bl	80010c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f7ff feee 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80012ec:	f44f 6382 	mov.w	r3, #1040	; 0x410
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f7ff fee5 	bl	80010c8 <HAL_GPIO_Init>
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	2310      	movs	r3, #16
 8001300:	61b3      	str	r3, [r6, #24]
 8001302:	61ab      	str	r3, [r5, #24]
//Telling motor to rotate CW or CCW
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);

//Checking if we need to switch on the Motor.
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  
}
 8001304:	b00b      	add	sp, #44	; 0x2c
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800

08001318 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001318:	4a24      	ldr	r2, [pc, #144]	; (80013ac <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 800131a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800131c:	4290      	cmp	r0, r2
 800131e:	d00e      	beq.n	800133e <TIM_Base_SetConfig+0x26>
 8001320:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001324:	d00b      	beq.n	800133e <TIM_Base_SetConfig+0x26>
 8001326:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800132a:	4290      	cmp	r0, r2
 800132c:	d007      	beq.n	800133e <TIM_Base_SetConfig+0x26>
 800132e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001332:	4290      	cmp	r0, r2
 8001334:	d003      	beq.n	800133e <TIM_Base_SetConfig+0x26>
 8001336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800133a:	4290      	cmp	r0, r2
 800133c:	d115      	bne.n	800136a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800133e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001344:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001346:	4a19      	ldr	r2, [pc, #100]	; (80013ac <TIM_Base_SetConfig+0x94>)
 8001348:	4290      	cmp	r0, r2
 800134a:	d019      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 800134c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001350:	d016      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 8001352:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001356:	4290      	cmp	r0, r2
 8001358:	d012      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 800135a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800135e:	4290      	cmp	r0, r2
 8001360:	d00e      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 8001362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001366:	4290      	cmp	r0, r2
 8001368:	d00a      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <TIM_Base_SetConfig+0x98>)
 800136c:	4290      	cmp	r0, r2
 800136e:	d007      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 8001370:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001374:	4290      	cmp	r0, r2
 8001376:	d003      	beq.n	8001380 <TIM_Base_SetConfig+0x68>
 8001378:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800137c:	4290      	cmp	r0, r2
 800137e:	d103      	bne.n	8001388 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001380:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001386:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001388:	694a      	ldr	r2, [r1, #20]
 800138a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800138e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001390:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001392:	688b      	ldr	r3, [r1, #8]
 8001394:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001396:	680b      	ldr	r3, [r1, #0]
 8001398:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <TIM_Base_SetConfig+0x94>)
 800139c:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800139e:	bf04      	itt	eq
 80013a0:	690b      	ldreq	r3, [r1, #16]
 80013a2:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013a4:	2301      	movs	r3, #1
 80013a6:	6143      	str	r3, [r0, #20]
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40014000 	.word	0x40014000

080013b4 <HAL_NVIC_SetPriority.constprop.0>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_NVIC_SetPriority.constprop.0+0x54>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  * @param  SubPriority the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 80013bc:	b510      	push	{r4, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013be:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	2c04      	cmp	r4, #4
 80013c6:	bf28      	it	cs
 80013c8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	2a06      	cmp	r2, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d0:	fa02 f204 	lsl.w	r2, r2, r4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d4:	bf8c      	ite	hi
 80013d6:	3b03      	subhi	r3, #3
 80013d8:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013da:	ea21 0102 	bic.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80013de:	1c42      	adds	r2, r0, #1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	bf18      	it	ne
 80013e2:	f100 4060 	addne.w	r0, r0, #3758096384	; 0xe0000000
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	bf08      	it	eq
 80013ec:	4a06      	ldreq	r2, [pc, #24]	; (8001408 <HAL_NVIC_SetPriority.constprop.0+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80013f2:	bf18      	it	ne
 80013f4:	f500 4061 	addne.w	r0, r0, #57600	; 0xe100
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	bf14      	ite	ne
 80013fc:	f880 3300 	strbne.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	f882 3023 	strbeq.w	r3, [r2, #35]	; 0x23
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001404:	bd10      	pop	{r4, pc}
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800140c:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_TIM_PWM_Start.constprop.0.isra.0+0xb8>)
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800140e:	b920      	cbnz	r0, 800141a <HAL_TIM_PWM_Start.constprop.0.isra.0+0xe>
 8001410:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001414:	2a01      	cmp	r2, #1
 8001416:	d013      	beq.n	8001440 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x34>
 8001418:	4770      	bx	lr
 800141a:	2804      	cmp	r0, #4
 800141c:	d104      	bne.n	8001428 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x1c>
 800141e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001422:	2a01      	cmp	r2, #1
 8001424:	d029      	beq.n	800147a <HAL_TIM_PWM_Start.constprop.0.isra.0+0x6e>
 8001426:	4770      	bx	lr
 8001428:	2808      	cmp	r0, #8
 800142a:	d104      	bne.n	8001436 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x2a>
 800142c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001430:	2a01      	cmp	r2, #1
 8001432:	d028      	beq.n	8001486 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x7a>
 8001434:	4770      	bx	lr
 8001436:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800143a:	2a01      	cmp	r2, #1
 800143c:	d01b      	beq.n	8001476 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x6a>
 800143e:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001440:	2202      	movs	r2, #2
 8001442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001446:	681b      	ldr	r3, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f000 	lsl.w	r0, r2, r0

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800144e:	6a1a      	ldr	r2, [r3, #32]
 8001450:	ea22 0200 	bic.w	r2, r2, r0
 8001454:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4310      	orrs	r0, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_TIM_PWM_Start.constprop.0.isra.0+0xbc>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800145c:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800145e:	4293      	cmp	r3, r2
 8001460:	d119      	bne.n	8001496 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x8a>
    __HAL_TIM_MOE_ENABLE(htim);
 8001462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001470:	2a06      	cmp	r2, #6
 8001472:	d122      	bne.n	80014ba <HAL_TIM_PWM_Start.constprop.0.isra.0+0xae>
}
 8001474:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001476:	2804      	cmp	r0, #4
 8001478:	d103      	bne.n	8001482 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x76>
 800147a:	2202      	movs	r2, #2
 800147c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001480:	e7e1      	b.n	8001446 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x3a>
 8001482:	2808      	cmp	r0, #8
 8001484:	d103      	bne.n	800148e <HAL_TIM_PWM_Start.constprop.0.isra.0+0x82>
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800148c:	e7db      	b.n	8001446 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x3a>
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001494:	e7d7      	b.n	8001446 <HAL_TIM_PWM_Start.constprop.0.isra.0+0x3a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149a:	d0e6      	beq.n	800146a <HAL_TIM_PWM_Start.constprop.0.isra.0+0x5e>
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_TIM_PWM_Start.constprop.0.isra.0+0xc0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d0e3      	beq.n	800146a <HAL_TIM_PWM_Start.constprop.0.isra.0+0x5e>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d0df      	beq.n	800146a <HAL_TIM_PWM_Start.constprop.0.isra.0+0x5e>
 80014aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d0db      	beq.n	800146a <HAL_TIM_PWM_Start.constprop.0.isra.0+0x5e>
 80014b2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d0d7      	beq.n	800146a <HAL_TIM_PWM_Start.constprop.0.isra.0+0x5e>
    __HAL_TIM_ENABLE(htim);
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	4770      	bx	lr
 80014c4:	20000b6c 	.word	0x20000b6c
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40000400 	.word	0x40000400

080014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0xb0>)

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014d2:	b920      	cbnz	r0, 80014de <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0xe>
 80014d4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d013      	beq.n	8001504 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x34>
 80014dc:	4770      	bx	lr
 80014de:	2804      	cmp	r0, #4
 80014e0:	d104      	bne.n	80014ec <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x1c>
 80014e2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80014e6:	2a01      	cmp	r2, #1
 80014e8:	d03e      	beq.n	8001568 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x98>
 80014ea:	4770      	bx	lr
 80014ec:	2808      	cmp	r0, #8
 80014ee:	d104      	bne.n	80014fa <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x2a>
 80014f0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d03b      	beq.n	8001570 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0xa0>
 80014f8:	4770      	bx	lr
 80014fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80014fe:	2a01      	cmp	r2, #1
 8001500:	d03a      	beq.n	8001578 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0xa8>
 8001502:	4770      	bx	lr
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001504:	2202      	movs	r2, #2
 8001506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800150a:	681b      	ldr	r3, [r3, #0]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800150c:	2204      	movs	r2, #4
 800150e:	fa02 f000 	lsl.w	r0, r2, r0

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001512:	6a1a      	ldr	r2, [r3, #32]
 8001514:	ea22 0200 	bic.w	r2, r2, r0
 8001518:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	4310      	orrs	r0, r2
 800151e:	6218      	str	r0, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8001520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001528:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0xb4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d012      	beq.n	8001554 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x84>
 800152e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001532:	d00f      	beq.n	8001554 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x84>
 8001534:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001538:	4293      	cmp	r3, r2
 800153a:	d00b      	beq.n	8001554 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x84>
 800153c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x84>
 8001544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001548:	4293      	cmp	r3, r2
 800154a:	d003      	beq.n	8001554 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x84>
 800154c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001550:	4293      	cmp	r3, r2
 8001552:	d104      	bne.n	800155e <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800155a:	2a06      	cmp	r2, #6
 800155c:	d003      	beq.n	8001566 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x96>
    __HAL_TIM_ENABLE(htim);
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	4770      	bx	lr
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001568:	2202      	movs	r2, #2
 800156a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800156e:	e7cc      	b.n	800150a <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x3a>
 8001570:	2202      	movs	r2, #2
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001576:	e7c8      	b.n	800150a <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x3a>
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800157e:	e7c4      	b.n	800150a <HAL_TIMEx_PWMN_Start.constprop.0.isra.0+0x3a>
 8001580:	20000b6c 	.word	0x20000b6c
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x78>)
 800158a:	6813      	ldr	r3, [r2, #0]
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 800158c:	b510      	push	{r4, lr}
  TIMx->CCER &= ~tmp;
 800158e:	6a19      	ldr	r1, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001590:	2401      	movs	r4, #1
 8001592:	4084      	lsls	r4, r0
  TIMx->CCER &= ~tmp;
 8001594:	ea21 0104 	bic.w	r1, r1, r4
 8001598:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800159a:	6a19      	ldr	r1, [r3, #32]
 800159c:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800159e:	4919      	ldr	r1, [pc, #100]	; (8001604 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x7c>)
 80015a0:	428b      	cmp	r3, r1
 80015a2:	d10d      	bne.n	80015c0 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 80015a4:	6a1c      	ldr	r4, [r3, #32]
 80015a6:	f241 1111 	movw	r1, #4369	; 0x1111
 80015aa:	420c      	tst	r4, r1
 80015ac:	d108      	bne.n	80015c0 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x38>
 80015ae:	6a1c      	ldr	r4, [r3, #32]
 80015b0:	f240 4144 	movw	r1, #1092	; 0x444
 80015b4:	420c      	tst	r4, r1
 80015b6:	bf02      	ittt	eq
 80015b8:	6c59      	ldreq	r1, [r3, #68]	; 0x44
 80015ba:	f421 4100 	biceq.w	r1, r1, #32768	; 0x8000
 80015be:	6459      	streq	r1, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80015c0:	6a1c      	ldr	r4, [r3, #32]
 80015c2:	f241 1111 	movw	r1, #4369	; 0x1111
 80015c6:	420c      	tst	r4, r1
 80015c8:	d108      	bne.n	80015dc <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x54>
 80015ca:	6a1c      	ldr	r4, [r3, #32]
 80015cc:	f240 4144 	movw	r1, #1092	; 0x444
 80015d0:	420c      	tst	r4, r1
 80015d2:	bf02      	ittt	eq
 80015d4:	6819      	ldreq	r1, [r3, #0]
 80015d6:	f021 0101 	biceq.w	r1, r1, #1
 80015da:	6019      	streq	r1, [r3, #0]
 80015dc:	2301      	movs	r3, #1
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80015de:	b910      	cbnz	r0, 80015e6 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x5e>
 80015e0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
}
 80015e4:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80015e6:	2804      	cmp	r0, #4
 80015e8:	d102      	bne.n	80015f0 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x68>
 80015ea:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
 80015ee:	e7f9      	b.n	80015e4 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x5c>
 80015f0:	2808      	cmp	r0, #8
 80015f2:	bf0c      	ite	eq
 80015f4:	f882 3040 	strbeq.w	r3, [r2, #64]	; 0x40
 80015f8:	f882 3041 	strbne.w	r3, [r2, #65]	; 0x41
  return HAL_OK;
 80015fc:	e7f2      	b.n	80015e4 <HAL_TIM_PWM_Stop.constprop.0.isra.0+0x5c>
 80015fe:	bf00      	nop
 8001600:	20000b6c 	.word	0x20000b6c
 8001604:	40010000 	.word	0x40010000

08001608 <HAL_TIM_Base_Start_IT.constprop.0.isra.0>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x5c>)
 800160a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800160e:	2a01      	cmp	r2, #1
 8001610:	d126      	bne.n	8001660 <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	f042 0201 	orr.w	r2, r2, #1
 8001620:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x60>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d012      	beq.n	800164e <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x46>
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d00f      	beq.n	800164e <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x46>
 800162e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001632:	4293      	cmp	r3, r2
 8001634:	d00b      	beq.n	800164e <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x46>
 8001636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x46>
 800163e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001642:	4293      	cmp	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x46>
 8001646:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800164a:	4293      	cmp	r3, r2
 800164c:	d104      	bne.n	8001658 <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001654:	2a06      	cmp	r2, #6
 8001656:	d003      	beq.n	8001660 <HAL_TIM_Base_Start_IT.constprop.0.isra.0+0x58>
    __HAL_TIM_ENABLE(htim);
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000bb4 	.word	0x20000bb4
 8001668:	40010000 	.word	0x40010000

0800166c <Timer11_Init>:
void Timer11_Init(int pulseDuration){
 800166c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM11_CLK_ENABLE();
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <Timer11_Init+0xa8>)
	tim11.Instance = TIM11;
 8001670:	4c29      	ldr	r4, [pc, #164]	; (8001718 <Timer11_Init+0xac>)
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001672:	2500      	movs	r5, #0
 8001674:	9501      	str	r5, [sp, #4]
 8001676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001678:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9b01      	ldr	r3, [sp, #4]
	tim11.Instance = TIM11;
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <Timer11_Init+0xb0>)
 800168a:	6023      	str	r3, [r4, #0]
void Timer11_Init(int pulseDuration){
 800168c:	4601      	mov	r1, r0
	tim11.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;			// this will cause the timer to create ms (set to 1000000 - 1 for us)
 800168e:	f7ff fd01 	bl	8001094 <HAL_RCC_GetPCLK2Freq>
	tim11.Init.Period = pulseDuration/2;											// in this example the number here will be the number of ms for on/off
 8001692:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
	tim11.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;			// this will cause the timer to create ms (set to 1000000 - 1 for us)
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <Timer11_Init+0xb4>)
 8001698:	fbb0 f0f3 	udiv	r0, r0, r3
  if (htim->State == HAL_TIM_STATE_RESET)
 800169c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80016a0:	3801      	subs	r0, #1
	tim11.Init.Period = pulseDuration/2;											// in this example the number here will be the number of ms for on/off
 80016a2:	1049      	asrs	r1, r1, #1
	tim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	e9c4 0501 	strd	r0, r5, [r4, #4]
	tim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	e9c4 1503 	strd	r1, r5, [r4, #12]
	tim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;		// this parameter will cause the timer to reset when timed out
 80016ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80016b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016b4:	b923      	cbnz	r3, 80016c0 <Timer11_Init+0x54>
    HAL_TIM_Base_MspInit(htim);
 80016b6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80016b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016bc:	f7ff fcd2 	bl	8001064 <HAL_TIM_Base_MspInit>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c0:	6820      	ldr	r0, [r4, #0]
 80016c2:	4918      	ldr	r1, [pc, #96]	; (8001724 <Timer11_Init+0xb8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80016c4:	2302      	movs	r3, #2
 80016c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ca:	f7ff fe25 	bl	8001318 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ce:	2301      	movs	r3, #1
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 10, 0U);				// note the timer 11 IRQ on this board is shared with Timer 1
 80016d0:	210a      	movs	r1, #10
 80016d2:	201a      	movs	r0, #26
 80016d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80016dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80016e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80016f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80016f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80016fc:	f7ff fe5a 	bl	80013b4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <Timer11_Init+0xbc>)
 8001702:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	b003      	add	sp, #12
 800170a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
HAL_TIM_Base_Start_IT(&tim11);
 800170e:	f7ff bf7b 	b.w	8001608 <HAL_TIM_Base_Start_IT.constprop.0.isra.0>
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	20000bb4 	.word	0x20000bb4
 800171c:	40014800 	.word	0x40014800
 8001720:	000f4240 	.word	0x000f4240
 8001724:	20000bb8 	.word	0x20000bb8
 8001728:	e000e100 	.word	0xe000e100

0800172c <HAL_InitTick.isra.0>:
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_InitTick.isra.0+0x44>)
 800172e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	3b01      	subs	r3, #1
 800173a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 800173e:	b510      	push	{r4, lr}
 8001740:	4604      	mov	r4, r0
 8001742:	d214      	bcs.n	800176e <HAL_InitTick.isra.0+0x42>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001744:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_InitTick.isra.0+0x48>)
 800174e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001752:	2300      	movs	r3, #0
 8001754:	6193      	str	r3, [r2, #24]
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	280f      	cmp	r0, #15
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001758:	f04f 0307 	mov.w	r3, #7
 800175c:	6113      	str	r3, [r2, #16]
 800175e:	d806      	bhi.n	800176e <HAL_InitTick.isra.0+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	4601      	mov	r1, r0
 8001762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001766:	f7ff fe25 	bl	80013b4 <HAL_NVIC_SetPriority.constprop.0>
    uwTickPrio = TickPriority;
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_InitTick.isra.0+0x4c>)
 800176c:	601c      	str	r4, [r3, #0]
}
 800176e:	bd10      	pop	{r4, pc}
 8001770:	20000004 	.word	0x20000004
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	20000014 	.word	0x20000014

0800177c <TerminalOutputBufferWrite.isra.0>:
  uint32_t head, sent;


  /* Check that our block will ever fit, if not, reduce it to a length
     that will */
  if(len >= TERMINALBUFFERSIZE) {
 800177c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
uint32_t TerminalOutputBufferWrite(PortIndex_e index,
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	4c2e      	ldr	r4, [pc, #184]	; (800183c <TerminalOutputBufferWrite.isra.0+0xc0>)
  if(len >= TERMINALBUFFERSIZE) {
 8001784:	d30a      	bcc.n	800179c <TerminalOutputBufferWrite.isra.0+0x20>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8001786:	f640 0334 	movw	r3, #2100	; 0x834
 800178a:	fb03 4300 	mla	r3, r3, r0, r4
 800178e:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8001792:	3201      	adds	r2, #1
 8001794:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    len = TERMINALBUFFERSIZE/2;
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 800179c:	f640 0334 	movw	r3, #2100	; 0x834
 80017a0:	fb03 4300 	mla	r3, r3, r0, r4
 80017a4:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80017a8:	fa12 f585 	uxtah	r5, r2, r5
 80017ac:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017b0:	d220      	bcs.n	80017f4 <TerminalOutputBufferWrite.isra.0+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 80017b2:	b672      	cpsid	i
  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  sent = 0;
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80017b4:	f640 0334 	movw	r3, #2100	; 0x834
  sent = 0;
 80017b8:	2600      	movs	r6, #0
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80017ba:	fb03 4300 	mla	r3, r3, r0, r4
  while((len != 0) 
 80017be:	42b2      	cmp	r2, r6
 80017c0:	d005      	beq.n	80017ce <TerminalOutputBufferWrite.isra.0+0x52>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80017c2:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 80017c6:	b2ad      	uxth	r5, r5
 80017c8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017cc:	d320      	bcc.n	8001810 <TerminalOutputBufferWrite.isra.0+0x94>
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
    len--;
    sent++;
  }
  TerminalState[index].stats.written += sent;  /* gather statistics */
 80017ce:	f640 0334 	movw	r3, #2100	; 0x834
 80017d2:	fb03 4400 	mla	r4, r3, r0, r4
 80017d6:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
 80017da:	4433      	add	r3, r6
 80017dc:	f8c4 3818 	str.w	r3, [r4, #2072]	; 0x818

  /* Enable the transmit interrupt, our ISR will fire, and start
   * sending characters. */
  uart=TerminalInfo[index].instance;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <TerminalOutputBufferWrite.isra.0+0xc4>)
 80017e2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80017e6:	6882      	ldr	r2, [r0, #8]
  uart->CR1 |= USART_CR1_TXEIE;
 80017e8:	68d3      	ldr	r3, [r2, #12]
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80017f0:	b662      	cpsie	i
#endif

  /* Critical section end */
  __enable_irq();
  return sent;
}
 80017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TerminalState[index].stats.writeBlocked++;
 80017f4:	f8d3 5814 	ldr.w	r5, [r3, #2068]	; 0x814
 80017f8:	3501      	adds	r5, #1
 80017fa:	f8c3 5814 	str.w	r5, [r3, #2068]	; 0x814
    while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80017fe:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
 8001802:	fa12 f585 	uxtah	r5, r2, r5
 8001806:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800180a:	d3d2      	bcc.n	80017b2 <TerminalOutputBufferWrite.isra.0+0x36>
      asm volatile ("nop");
 800180c:	bf00      	nop
 800180e:	e7f6      	b.n	80017fe <TerminalOutputBufferWrite.isra.0+0x82>
    head = TerminalState[index].outHead;
 8001810:	f8b3 5806 	ldrh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outBuffer[head] = *p++;
 8001814:	f811 c006 	ldrb.w	ip, [r1, r6]
 8001818:	fa13 f785 	uxtah	r7, r3, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 800181c:	3501      	adds	r5, #1
 800181e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8001822:	f8a3 5806 	strh.w	r5, [r3, #2054]	; 0x806
    TerminalState[index].outCount++;
 8001826:	f8b3 580a 	ldrh.w	r5, [r3, #2058]	; 0x80a
    TerminalState[index].outBuffer[head] = *p++;
 800182a:	f887 c406 	strb.w	ip, [r7, #1030]	; 0x406
    TerminalState[index].outCount++;
 800182e:	3501      	adds	r5, #1
 8001830:	b2ad      	uxth	r5, r5
 8001832:	f8a3 580a 	strh.w	r5, [r3, #2058]	; 0x80a
    sent++;
 8001836:	3601      	adds	r6, #1
 8001838:	e7c1      	b.n	80017be <TerminalOutputBufferWrite.isra.0+0x42>
 800183a:	bf00      	nop
 800183c:	20000214 	.word	0x20000214
 8001840:	080129e4 	.word	0x080129e4

08001844 <CmdTasks>:
    s++;
  }
}

ParserReturnVal_t CmdTasks(int mode)
{
 8001844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001846:	4604      	mov	r4, r0
 8001848:	b938      	cbnz	r0, 800185a <CmdTasks+0x16>

  const TaskingTable_t *p;
  uint32_t i;

  printf("Currently defined tasks:\n");
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <CmdTasks+0x34>)
  p = _tasktable_start;
 800184c:	4d0b      	ldr	r5, [pc, #44]	; (800187c <CmdTasks+0x38>)
  i = 0;
  while(p != _tasktable_end) {
 800184e:	4e0c      	ldr	r6, [pc, #48]	; (8001880 <CmdTasks+0x3c>)
    printf("%2ld: %20s (%lu) -- %s\n",
 8001850:	4f0c      	ldr	r7, [pc, #48]	; (8001884 <CmdTasks+0x40>)
  printf("Currently defined tasks:\n");
 8001852:	f004 fce7 	bl	8006224 <puts>
  while(p != _tasktable_end) {
 8001856:	42b5      	cmp	r5, r6
 8001858:	d102      	bne.n	8001860 <CmdTasks+0x1c>
	   i, p->name, p->interval, p->desc);
    p++;
    i++;
  }
  return CmdReturnOk;
}
 800185a:	2000      	movs	r0, #0
 800185c:	b003      	add	sp, #12
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printf("%2ld: %20s (%lu) -- %s\n",
 8001860:	696b      	ldr	r3, [r5, #20]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4621      	mov	r1, r4
 8001866:	692b      	ldr	r3, [r5, #16]
 8001868:	f855 2b18 	ldr.w	r2, [r5], #24
 800186c:	4638      	mov	r0, r7
 800186e:	f004 fc3d 	bl	80060ec <iprintf>
    i++;
 8001872:	3401      	adds	r4, #1
 8001874:	e7ef      	b.n	8001856 <CmdTasks+0x12>
 8001876:	bf00      	nop
 8001878:	08006cbe 	.word	0x08006cbe
 800187c:	08013138 	.word	0x08013138
 8001880:	08013150 	.word	0x08013150
 8001884:	08006cd7 	.word	0x08006cd7

08001888 <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8001888:	b538      	push	{r3, r4, r5, lr}
 800188a:	4604      	mov	r4, r0
  uint32_t address, val;

  if(p == NULL) return 0;
  if(r == NULL) return 0;
 800188c:	b1f9      	cbz	r1, 80018ce <DecodeReadRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800188e:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001890:	888a      	ldrh	r2, [r1, #4]
 8001892:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8001894:	2d10      	cmp	r5, #16
 8001896:	d005      	beq.n	80018a4 <DecodeReadRegister+0x1c>
 8001898:	2d20      	cmp	r5, #32
 800189a:	d005      	beq.n	80018a8 <DecodeReadRegister+0x20>
 800189c:	2d08      	cmp	r5, #8
 800189e:	d105      	bne.n	80018ac <DecodeReadRegister+0x24>
  case 8:
    val = *(uint8_t *)address;
 80018a0:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 80018a2:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 80018a4:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 80018a6:	e7fc      	b.n	80018a2 <DecodeReadRegister+0x1a>
    val = *(uint32_t *)address;
 80018a8:	58d0      	ldr	r0, [r2, r3]
    break;
 80018aa:	e7fa      	b.n	80018a2 <DecodeReadRegister+0x1a>
    printf("Invalid size 0x%x for register %s",
 80018ac:	6808      	ldr	r0, [r1, #0]
 80018ae:	f7ff fb9b 	bl	8000fe8 <Uncompress>
 80018b2:	4629      	mov	r1, r5
 80018b4:	4602      	mov	r2, r0
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <DecodeReadRegister+0x4c>)
 80018b8:	f004 fc18 	bl	80060ec <iprintf>
    printf(" in periphral %s!\n",
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	f7ff fb93 	bl	8000fe8 <Uncompress>
 80018c2:	4601      	mov	r1, r0
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <DecodeReadRegister+0x50>)
 80018c6:	f004 fc11 	bl	80060ec <iprintf>
    return 0;
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7e9      	b.n	80018a2 <DecodeReadRegister+0x1a>
  if(r == NULL) return 0;
 80018ce:	4608      	mov	r0, r1
 80018d0:	e7e7      	b.n	80018a2 <DecodeReadRegister+0x1a>
 80018d2:	bf00      	nop
 80018d4:	08006cef 	.word	0x08006cef
 80018d8:	08006d11 	.word	0x08006d11

080018dc <CmdVersion>:
{
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
}

ParserReturnVal_t CmdVersion(int mode)
{
 80018dc:	b508      	push	{r3, lr}
   if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80018de:	b920      	cbnz	r0, 80018ea <CmdVersion+0xe>
   printf("Built:%s\nBy:%s\n",VersionBuildDateString,VersionBuildUser);
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <CmdVersion+0x14>)
 80018e2:	4904      	ldr	r1, [pc, #16]	; (80018f4 <CmdVersion+0x18>)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <CmdVersion+0x1c>)
 80018e6:	f004 fc01 	bl	80060ec <iprintf>

   VersionPrint();
   return CmdReturnOk;
}
 80018ea:	2000      	movs	r0, #0
 80018ec:	bd08      	pop	{r3, pc}
 80018ee:	bf00      	nop
 80018f0:	08012c15 	.word	0x08012c15
 80018f4:	08012bfc 	.word	0x08012bfc
 80018f8:	08006d24 	.word	0x08006d24

080018fc <DecodeWriteRegister.isra.0>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4604      	mov	r4, r0
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
  if(r == NULL) return 1;
 8001900:	b149      	cbz	r1, 8001916 <DecodeWriteRegister.isra.0+0x1a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8001902:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8001904:	8888      	ldrh	r0, [r1, #4]
 8001906:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 8001908:	2d10      	cmp	r5, #16
 800190a:	d005      	beq.n	8001918 <DecodeWriteRegister.isra.0+0x1c>
 800190c:	2d20      	cmp	r5, #32
 800190e:	d005      	beq.n	800191c <DecodeWriteRegister.isra.0+0x20>
 8001910:	2d08      	cmp	r5, #8
 8001912:	d105      	bne.n	8001920 <DecodeWriteRegister.isra.0+0x24>
  case 8:
    *(uint8_t *)address = val;
 8001914:	54c2      	strb	r2, [r0, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 8001916:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8001918:	52c2      	strh	r2, [r0, r3]
    break;  
 800191a:	e7fc      	b.n	8001916 <DecodeWriteRegister.isra.0+0x1a>
    *(uint32_t *)address = val;
 800191c:	50c2      	str	r2, [r0, r3]
    break;
 800191e:	e7fa      	b.n	8001916 <DecodeWriteRegister.isra.0+0x1a>
    printf("Invalid size 0x%x for register %s",
 8001920:	6808      	ldr	r0, [r1, #0]
 8001922:	f7ff fb61 	bl	8000fe8 <Uncompress>
 8001926:	4629      	mov	r1, r5
 8001928:	4602      	mov	r2, r0
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <DecodeWriteRegister.isra.0+0x48>)
 800192c:	f004 fbde 	bl	80060ec <iprintf>
    printf(" in periphral %s!\n",
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f7ff fb59 	bl	8000fe8 <Uncompress>
}
 8001936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf(" in periphral %s!\n",
 800193a:	4601      	mov	r1, r0
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DecodeWriteRegister.isra.0+0x4c>)
 800193e:	f004 bbd5 	b.w	80060ec <iprintf>
 8001942:	bf00      	nop
 8001944:	08006cef 	.word	0x08006cef
 8001948:	08006d11 	.word	0x08006d11

0800194c <CmdTest>:
int mytest( int x );

ParserReturnVal_t CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 800194c:	2801      	cmp	r0, #1
{
 800194e:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 8001950:	d004      	beq.n	800195c <CmdTest+0x10>
  if(action==CMD_LONG_HELP) {
 8001952:	2802      	cmp	r0, #2
 8001954:	d104      	bne.n	8001960 <CmdTest+0x14>
    printf("testasm\n\n"
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <CmdTest+0x24>)
 8001958:	f004 fc64 	bl	8006224 <puts>
    return CmdReturnOk;
  }
  printf("ret val = %d\n", mytest( 77  ) );

  return CmdReturnOk;
}
 800195c:	2000      	movs	r0, #0
 800195e:	bd08      	pop	{r3, pc}
  printf("ret val = %d\n", mytest( 77  ) );
 8001960:	204d      	movs	r0, #77	; 0x4d
 8001962:	f7fe fc3d 	bl	80001e0 <mytest>
 8001966:	4601      	mov	r1, r0
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <CmdTest+0x28>)
 800196a:	f004 fbbf 	bl	80060ec <iprintf>
  return CmdReturnOk;
 800196e:	e7f5      	b.n	800195c <CmdTest+0x10>
 8001970:	08006d34 	.word	0x08006d34
 8001974:	08006d6d 	.word	0x08006d6d

08001978 <CmdPWMInit>:
uint32_t delayVal; 

void setRGB (uint8_t red, uint8_t green, uint8_t blue);

ParserReturnVal_t CmdPWMInit(int action)
{
 8001978:	b530      	push	{r4, r5, lr}

    if (action == CMD_SHORT_HELP)
 800197a:	2801      	cmp	r0, #1
{
 800197c:	b089      	sub	sp, #36	; 0x24
    if (action == CMD_SHORT_HELP)
 800197e:	d004      	beq.n	800198a <CmdPWMInit+0x12>
        return CmdReturnOk;
    if (action == CMD_LONG_HELP)
 8001980:	2802      	cmp	r0, #2
 8001982:	d105      	bne.n	8001990 <CmdPWMInit+0x18>
    {
        printf("timinit\n\n"
 8001984:	4871      	ldr	r0, [pc, #452]	; (8001b4c <CmdPWMInit+0x1d4>)
 8001986:	f004 fc4d 	bl	8006224 <puts>
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
GPIO_InitStruct.Alternate = 1;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    return CmdReturnOk;
}
 800198a:	2000      	movs	r0, #0
 800198c:	b009      	add	sp, #36	; 0x24
 800198e:	bd30      	pop	{r4, r5, pc}
__HAL_RCC_TIM1_CLK_ENABLE();
 8001990:	2100      	movs	r1, #0
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <CmdPWMInit+0x1d8>)
 8001994:	9102      	str	r1, [sp, #8]
 8001996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
tim1.Instance = TIM1;
 8001998:	4c6e      	ldr	r4, [pc, #440]	; (8001b54 <CmdPWMInit+0x1dc>)
__HAL_RCC_TIM1_CLK_ENABLE();
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	9b02      	ldr	r3, [sp, #8]
tim1.Instance = TIM1;
 80019aa:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <CmdPWMInit+0x1e0>)
 80019ac:	6023      	str	r3, [r4, #0]
tim1.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;
 80019ae:	f7ff fb71 	bl	8001094 <HAL_RCC_GetPCLK2Freq>
 80019b2:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <CmdPWMInit+0x1e4>)
 80019b4:	fbb0 f0f3 	udiv	r0, r0, r3
tim1.Init.Period = 1000;
 80019b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
tim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019bc:	e9c4 3103 	strd	r3, r1, [r4, #12]
  if (htim->State == HAL_TIM_STATE_RESET)
 80019c0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
tim1.Init.RepetitionCounter = 0;
 80019c4:	6161      	str	r1, [r4, #20]
tim1.Init.Prescaler = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;
 80019c6:	3801      	subs	r0, #1
tim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	e9c4 0101 	strd	r0, r1, [r4, #4]
 80019cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019d0:	b923      	cbnz	r3, 80019dc <CmdPWMInit+0x64>
    HAL_TIM_Base_MspInit(htim);
 80019d2:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80019d4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019d8:	f7ff fb44 	bl	8001064 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019de:	4960      	ldr	r1, [pc, #384]	; (8001b60 <CmdPWMInit+0x1e8>)
 80019e0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80019e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e6:	f7ff fc97 	bl	8001318 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80019f4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80019f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80019fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001a14:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d07c      	beq.n	8001b16 <CmdPWMInit+0x19e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a1c:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a1e:	4d4e      	ldr	r5, [pc, #312]	; (8001b58 <CmdPWMInit+0x1e0>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001a28:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001a2a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a2c:	6999      	ldr	r1, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a2e:	42ab      	cmp	r3, r5
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a30:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a34:	bf04      	itt	eq
 8001a36:	f022 020e 	biceq.w	r2, r2, #14
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a3a:	f420 7040 	biceq.w	r0, r0, #768	; 0x300
  tmpccmrx |= OC_Config->OCMode;
 8001a3e:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  TIMx->CR2 = tmpcr2;
 8001a42:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a44:	bf18      	it	ne
 8001a46:	f022 0202 	bicne.w	r2, r2, #2
  TIMx->CCMR1 = tmpccmrx;
 8001a4a:	6199      	str	r1, [r3, #24]
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a4c:	bf08      	it	eq
 8001a4e:	f042 0208 	orreq.w	r2, r2, #8
  TIMx->CCR1 = OC_Config->Pulse;
 8001a52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a56:	6359      	str	r1, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001a58:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a5a:	699a      	ldr	r2, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a5c:	4d3e      	ldr	r5, [pc, #248]	; (8001b58 <CmdPWMInit+0x1e0>)
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a5e:	f042 0208 	orr.w	r2, r2, #8
 8001a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a70:	6a1a      	ldr	r2, [r3, #32]
 8001a72:	f022 0210 	bic.w	r2, r2, #16
 8001a76:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001a78:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001a7a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a7c:	6999      	ldr	r1, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a7e:	42ab      	cmp	r3, r5
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a80:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a84:	bf04      	itt	eq
 8001a86:	f022 02e0 	biceq.w	r2, r2, #224	; 0xe0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a8a:	f420 6040 	biceq.w	r0, r0, #3072	; 0xc00
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a8e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
  TIMx->CR2 = tmpcr2;
 8001a92:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 8001a94:	bf18      	it	ne
 8001a96:	f022 0220 	bicne.w	r2, r2, #32
  TIMx->CCMR1 = tmpccmrx;
 8001a9a:	6199      	str	r1, [r3, #24]
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a9c:	bf08      	it	eq
 8001a9e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  TIMx->CCR2 = OC_Config->Pulse;
 8001aa2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001aa6:	6399      	str	r1, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001aa8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aaa:	699a      	ldr	r2, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001aac:	4d2a      	ldr	r5, [pc, #168]	; (8001b58 <CmdPWMInit+0x1e0>)
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001aca:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001acc:	69d9      	ldr	r1, [r3, #28]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ace:	42ab      	cmp	r3, r5
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ad0:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ad4:	bf08      	it	eq
 8001ad6:	f422 6260 	biceq.w	r2, r2, #3584	; 0xe00
 8001ada:	f041 0160 	orr.w	r1, r1, #96	; 0x60
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ade:	bf08      	it	eq
 8001ae0:	f420 5040 	biceq.w	r0, r0, #12288	; 0x3000
  TIMx->CR2 = tmpcr2;
 8001ae4:	6058      	str	r0, [r3, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8001ae6:	bf18      	it	ne
 8001ae8:	f422 7200 	bicne.w	r2, r2, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 8001aec:	61d9      	str	r1, [r3, #28]
    tmpccer &= ~TIM_CCER_CC3NE;
 8001aee:	bf08      	it	eq
 8001af0:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
  TIMx->CCR3 = OC_Config->Pulse;
 8001af4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001af8:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001afa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	f042 0208 	orr.w	r2, r2, #8
 8001b02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8001b10:	2300      	movs	r3, #0
 8001b12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	2300      	movs	r3, #0
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	9301      	str	r3, [sp, #4]
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	9305      	str	r3, [sp, #20]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <CmdPWMInit+0x1d8>)
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	4811      	ldr	r0, [pc, #68]	; (8001b64 <CmdPWMInit+0x1ec>)
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	9b01      	ldr	r3, [sp, #4]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b36:	2302      	movs	r3, #2
 8001b38:	e9cd 2303 	strd	r2, r3, [sp, #12]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3c:	9306      	str	r3, [sp, #24]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	a903      	add	r1, sp, #12
GPIO_InitStruct.Alternate = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	9307      	str	r3, [sp, #28]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f7ff fac0 	bl	80010c8 <HAL_GPIO_Init>
    return CmdReturnOk;
 8001b48:	e71f      	b.n	800198a <CmdPWMInit+0x12>
 8001b4a:	bf00      	nop
 8001b4c:	08006d7b 	.word	0x08006d7b
 8001b50:	40023800 	.word	0x40023800
 8001b54:	20000b6c 	.word	0x20000b6c
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	000f4240 	.word	0x000f4240
 8001b60:	20000b70 	.word	0x20000b70
 8001b64:	40020000 	.word	0x40020000

08001b68 <DecodeRegister>:
}

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8001b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	b086      	sub	sp, #24
 8001b70:	4616      	mov	r6, r2
 8001b72:	461f      	mov	r7, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8001b74:	4605      	mov	r5, r0
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d046      	beq.n	8001c08 <DecodeRegister+0xa0>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	f7ff fa34 	bl	8000fe8 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8001b80:	88aa      	ldrh	r2, [r5, #4]
 8001b82:	4422      	add	r2, r4
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	79ab      	ldrb	r3, [r5, #6]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4633      	mov	r3, r6
 8001b8e:	4820      	ldr	r0, [pc, #128]	; (8001c10 <DecodeRegister+0xa8>)
 8001b90:	4632      	mov	r2, r6
 8001b92:	f004 faab 	bl	80060ec <iprintf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8001b96:	68ac      	ldr	r4, [r5, #8]
 8001b98:	b3a4      	cbz	r4, 8001c04 <DecodeRegister+0x9c>
 8001b9a:	b3af      	cbz	r7, 8001c08 <DecodeRegister+0xa0>
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001b9c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001c14 <DecodeRegister+0xac>
 8001ba0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001c18 <DecodeRegister+0xb0>
 8001ba4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8001c1c <DecodeRegister+0xb4>
 8001ba8:	3408      	adds	r4, #8
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8001baa:	2700      	movs	r7, #0
 8001bac:	89ab      	ldrh	r3, [r5, #12]
 8001bae:	429f      	cmp	r7, r3
 8001bb0:	d305      	bcc.n	8001bbe <DecodeRegister+0x56>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8001bb2:	200a      	movs	r0, #10
  }

}
 8001bb4:	b006      	add	sp, #24
 8001bb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printf("\n");
 8001bba:	f004 baaf 	b.w	800611c <putchar>
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001bbe:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001bc2:	f854 0c08 	ldr.w	r0, [r4, #-8]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	fa26 f202 	lsr.w	r2, r6, r2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001bd8:	f7ff fa06 	bl	8000fe8 <Uncompress>
	 (unsigned int)(f->width),
 8001bdc:	f814 2c03 	ldrb.w	r2, [r4, #-3]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8001be0:	f814 cc04 	ldrb.w	ip, [r4, #-4]
 8001be4:	9b05      	ldr	r3, [sp, #20]
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	4601      	mov	r1, r0
 8001bea:	2a01      	cmp	r2, #1
 8001bec:	bf8c      	ite	hi
 8001bee:	4640      	movhi	r0, r8
 8001bf0:	4648      	movls	r0, r9
 8001bf2:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4650      	mov	r0, sl
 8001bfa:	f004 fa77 	bl	80060ec <iprintf>
    for(i=0; i<r->numFields; i++) {
 8001bfe:	3701      	adds	r7, #1
 8001c00:	3408      	adds	r4, #8
 8001c02:	e7d3      	b.n	8001bac <DecodeRegister+0x44>
  if(decodeFields) {
 8001c04:	2f00      	cmp	r7, #0
 8001c06:	d1d4      	bne.n	8001bb2 <DecodeRegister+0x4a>
}
 8001c08:	b006      	add	sp, #24
 8001c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c0e:	bf00      	nop
 8001c10:	08006dda 	.word	0x08006dda
 8001c14:	08006dce 	.word	0x08006dce
 8001c18:	08006dd4 	.word	0x08006dd4
 8001c1c:	08006e15 	.word	0x08006e15

08001c20 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8001c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c24:	4604      	mov	r4, r0
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001c26:	6800      	ldr	r0, [r0, #0]
{
 8001c28:	460e      	mov	r6, r1
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8001c2a:	f7ff f9dd 	bl	8000fe8 <Uncompress>
 8001c2e:	6862      	ldr	r2, [r4, #4]
 8001c30:	4601      	mov	r1, r0
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <DecodePeripheral+0x4c>)
 8001c34:	f004 fa5a 	bl	80060ec <iprintf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8001c38:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001c3c:	f1b8 0f00 	cmp.w	r8, #0
 8001c40:	d112      	bne.n	8001c68 <DecodePeripheral+0x48>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 8001c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 8001c46:	4639      	mov	r1, r7
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fe1d 	bl	8001888 <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 8001c4e:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 8001c50:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 8001c52:	4633      	mov	r3, r6
 8001c54:	4638      	mov	r0, r7
 8001c56:	f7ff ff87 	bl	8001b68 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8001c5a:	3501      	adds	r5, #1
 8001c5c:	89a3      	ldrh	r3, [r4, #12]
 8001c5e:	429d      	cmp	r5, r3
 8001c60:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8001c64:	d3ef      	bcc.n	8001c46 <DecodePeripheral+0x26>
 8001c66:	e7ec      	b.n	8001c42 <DecodePeripheral+0x22>
 8001c68:	2500      	movs	r5, #0
 8001c6a:	e7f7      	b.n	8001c5c <DecodePeripheral+0x3c>
 8001c6c:	08006e3e 	.word	0x08006e3e

08001c70 <DecodePrintRegisters>:
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c74:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8001c76:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8001c78:	460e      	mov	r6, r1
  printf("\t");
 8001c7a:	f004 fa4f 	bl	800611c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8001c7e:	4f11      	ldr	r7, [pc, #68]	; (8001cc4 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8001c80:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8001cc8 <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8001c84:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001ccc <DecodePrintRegisters+0x5c>
 8001c88:	3510      	adds	r5, #16
  col = 8;
 8001c8a:	2408      	movs	r4, #8
  while(count--) {
 8001c8c:	3e01      	subs	r6, #1
 8001c8e:	d201      	bcs.n	8001c94 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8001c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8001c94:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8001c98:	f7ff f9a6 	bl	8000fe8 <Uncompress>
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	f004 fa24 	bl	80060ec <iprintf>
 8001ca4:	4420      	add	r0, r4
 8001ca6:	b2c4      	uxtb	r4, r0
    if(count) {
 8001ca8:	b156      	cbz	r6, 8001cc0 <DecodePrintRegisters+0x50>
      col += printf(", ");
 8001caa:	4640      	mov	r0, r8
 8001cac:	f004 fa1e 	bl	80060ec <iprintf>
 8001cb0:	4420      	add	r0, r4
 8001cb2:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8001cb4:	2c46      	cmp	r4, #70	; 0x46
 8001cb6:	d903      	bls.n	8001cc0 <DecodePrintRegisters+0x50>
	printf("\n\t");
 8001cb8:	4648      	mov	r0, r9
 8001cba:	f004 fa17 	bl	80060ec <iprintf>
	col = 8;
 8001cbe:	2408      	movs	r4, #8
    r++;
 8001cc0:	3510      	adds	r5, #16
 8001cc2:	e7e3      	b.n	8001c8c <DecodePrintRegisters+0x1c>
 8001cc4:	08006d0e 	.word	0x08006d0e
 8001cc8:	08006dd7 	.word	0x08006dd7
 8001ccc:	08006e66 	.word	0x08006e66

08001cd0 <DecodePrintPeripherals.constprop.0>:
void DecodePrintPeripherals(const Peripheral_t *p)
 8001cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  printf("\t");
 8001cd4:	2009      	movs	r0, #9
 8001cd6:	f004 fa21 	bl	800611c <putchar>
  for(; p->name != NULL; p++) {
 8001cda:	4d0f      	ldr	r5, [pc, #60]	; (8001d18 <DecodePrintPeripherals.constprop.0+0x48>)
    col += printf("%s",Uncompress(p->name));
 8001cdc:	4e0f      	ldr	r6, [pc, #60]	; (8001d1c <DecodePrintPeripherals.constprop.0+0x4c>)
      col += printf(", ");
 8001cde:	4f10      	ldr	r7, [pc, #64]	; (8001d20 <DecodePrintPeripherals.constprop.0+0x50>)
	printf("\n\t");
 8001ce0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001d24 <DecodePrintPeripherals.constprop.0+0x54>
  col = 8;
 8001ce4:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8001ce6:	6828      	ldr	r0, [r5, #0]
 8001ce8:	b908      	cbnz	r0, 8001cee <DecodePrintPeripherals.constprop.0+0x1e>
}
 8001cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8001cee:	f7ff f97b 	bl	8000fe8 <Uncompress>
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f004 f9f9 	bl	80060ec <iprintf>
    if((p+1)->name != NULL) {
 8001cfa:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8001cfc:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8001cfe:	b14b      	cbz	r3, 8001d14 <DecodePrintPeripherals.constprop.0+0x44>
      col += printf(", ");
 8001d00:	4638      	mov	r0, r7
 8001d02:	f004 f9f3 	bl	80060ec <iprintf>
 8001d06:	4404      	add	r4, r0
      if(col > 70) {
 8001d08:	2c46      	cmp	r4, #70	; 0x46
 8001d0a:	d903      	bls.n	8001d14 <DecodePrintPeripherals.constprop.0+0x44>
	printf("\n\t");
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	f004 f9ed 	bl	80060ec <iprintf>
	col = 8;
 8001d12:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8001d14:	3510      	adds	r5, #16
 8001d16:	e7e6      	b.n	8001ce6 <DecodePrintPeripherals.constprop.0+0x16>
 8001d18:	0800f65c 	.word	0x0800f65c
 8001d1c:	08006d0e 	.word	0x08006d0e
 8001d20:	08006dd7 	.word	0x08006dd7
 8001d24:	08006e66 	.word	0x08006e66

08001d28 <fetch_string_arg>:
}


/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8001d28:	b538      	push	{r3, r4, r5, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8001d2a:	4909      	ldr	r1, [pc, #36]	; (8001d50 <fetch_string_arg+0x28>)
{
 8001d2c:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f002 f8c6 	bl	8003ec0 <strtok>
  if(p == NULL) {
 8001d34:	4604      	mov	r4, r0
 8001d36:	b140      	cbz	r0, 8001d4a <fetch_string_arg+0x22>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 8001d38:	6028      	str	r0, [r5, #0]

  /* Update the pointer to the rest of the command, strtok adds a
   * trailing NUL after the token, so the rest of the buffer starts at
   * p plus ththe length of the string, plus one more. */
  cmdArgs = p + strlen(p) + 1;
 8001d3a:	f7fe fa6b 	bl	8000214 <strlen>
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <fetch_string_arg+0x2c>)
 8001d40:	3001      	adds	r0, #1
 8001d42:	4404      	add	r4, r0
 8001d44:	601c      	str	r4, [r3, #0]
  return 0;
 8001d46:	2000      	movs	r0, #0
}
 8001d48:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4e:	e7fb      	b.n	8001d48 <fetch_string_arg+0x20>
 8001d50:	08006e69 	.word	0x08006e69
 8001d54:	20000a60 	.word	0x20000a60

08001d58 <TaskInput>:
{
 8001d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(printPrompt) {
 8001d5c:	4d6b      	ldr	r5, [pc, #428]	; (8001f0c <TaskInput+0x1b4>)
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	b123      	cbz	r3, 8001d6c <TaskInput+0x14>
    printf("ARMON>");
 8001d62:	486b      	ldr	r0, [pc, #428]	; (8001f10 <TaskInput+0x1b8>)
 8001d64:	f004 f9c2 	bl	80060ec <iprintf>
    printPrompt = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	602b      	str	r3, [r5, #0]
  rc = TerminalRead(INDEX_CONSOLE,(uint8_t*)&c,1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f10d 010f 	add.w	r1, sp, #15
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff f912 	bl	8000f9c <TerminalRead>
  if(rc) goto ProcessCharacter;
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d054      	beq.n	8001e26 <TaskInput+0xce>
  if(((c == 010) || (c == 0x7f)) && count) {
 8001d7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d001      	beq.n	8001d88 <TaskInput+0x30>
 8001d84:	2b7f      	cmp	r3, #127	; 0x7f
 8001d86:	d115      	bne.n	8001db4 <TaskInput+0x5c>
 8001d88:	4c62      	ldr	r4, [pc, #392]	; (8001f14 <TaskInput+0x1bc>)
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	b192      	cbz	r2, 8001db4 <TaskInput+0x5c>
    printf("\010 \010"); /* Obliterate character */
 8001d8e:	4862      	ldr	r0, [pc, #392]	; (8001f18 <TaskInput+0x1c0>)
 8001d90:	f004 f9ac 	bl	80060ec <iprintf>
    buf--;     /* Then remove it from the buffer */
 8001d94:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <TaskInput+0x1c4>)
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6023      	str	r3, [r4, #0]
  if (c == '\r') {
 8001da2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001da6:	f1a3 020d 	sub.w	r2, r3, #13
 8001daa:	4253      	negs	r3, r2
 8001dac:	4153      	adcs	r3, r2
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <TaskInput+0x1c8>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e038      	b.n	8001e26 <TaskInput+0xce>
  } else if(c == '!') { /* '!' repeats the last command */
 8001db4:	2b21      	cmp	r3, #33	; 0x21
 8001db6:	d12a      	bne.n	8001e0e <TaskInput+0xb6>
    if(saved) {  /* But only if we have something saved */
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <TaskInput+0x1cc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <TaskInput+0x4a>
      strcpy(input,input_b);  /* Restore the command */
 8001dc0:	4c59      	ldr	r4, [pc, #356]	; (8001f28 <TaskInput+0x1d0>)
 8001dc2:	495a      	ldr	r1, [pc, #360]	; (8001f2c <TaskInput+0x1d4>)
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f004 fa4f 	bl	8006268 <strcpy>
      printf("%s",input);
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4858      	ldr	r0, [pc, #352]	; (8001f30 <TaskInput+0x1d8>)
 8001dce:	f004 f98d 	bl	80060ec <iprintf>
      count = strlen(input);
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7fe fa1e 	bl	8000214 <strlen>
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <TaskInput+0x1bc>)
 8001dda:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8001ddc:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <TaskInput+0x1c4>)
 8001dde:	4404      	add	r4, r0
 8001de0:	601c      	str	r4, [r3, #0]
    printf("\n");
 8001de2:	200a      	movs	r0, #10
 8001de4:	f004 f99a 	bl	800611c <putchar>
ParserReturnVal_t parse(char *buf, int len, const parse_table *table)
 8001de8:	494f      	ldr	r1, [pc, #316]	; (8001f28 <TaskInput+0x1d0>)
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001dea:	4c52      	ldr	r4, [pc, #328]	; (8001f34 <TaskInput+0x1dc>)
  i = len;
 8001dec:	2350      	movs	r3, #80	; 0x50
 8001dee:	460e      	mov	r6, r1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001df0:	3b01      	subs	r3, #1
 8001df2:	1c5f      	adds	r7, r3, #1
 8001df4:	780a      	ldrb	r2, [r1, #0]
 8001df6:	4608      	mov	r0, r1
 8001df8:	f101 0101 	add.w	r1, r1, #1
 8001dfc:	d036      	beq.n	8001e6c <TaskInput+0x114>
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d060      	beq.n	8001ec4 <TaskInput+0x16c>
 8001e02:	5d12      	ldrb	r2, [r2, r4]
 8001e04:	0717      	lsls	r7, r2, #28
 8001e06:	d4f3      	bmi.n	8001df0 <TaskInput+0x98>
  if((i==0) || (*buf==0)) {
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d130      	bne.n	8001e6e <TaskInput+0x116>
 8001e0c:	e05a      	b.n	8001ec4 <TaskInput+0x16c>
  } else if(isprint((unsigned int)c)) {
 8001e0e:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <TaskInput+0x1dc>)
 8001e10:	5c9a      	ldrb	r2, [r3, r2]
 8001e12:	f012 0f97 	tst.w	r2, #151	; 0x97
 8001e16:	d015      	beq.n	8001e44 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8001e18:	493e      	ldr	r1, [pc, #248]	; (8001f14 <TaskInput+0x1bc>)
 8001e1a:	680a      	ldr	r2, [r1, #0]
 8001e1c:	2a4f      	cmp	r2, #79	; 0x4f
 8001e1e:	d905      	bls.n	8001e2c <TaskInput+0xd4>
      printf("\x07"); /* Beep */
 8001e20:	2007      	movs	r0, #7
 8001e22:	f004 f97b 	bl	800611c <putchar>
}
 8001e26:	b004      	add	sp, #16
 8001e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *buf++ = c;
 8001e2c:	4c3b      	ldr	r4, [pc, #236]	; (8001f1c <TaskInput+0x1c4>)
 8001e2e:	6820      	ldr	r0, [r4, #0]
 8001e30:	7003      	strb	r3, [r0, #0]
 8001e32:	1c45      	adds	r5, r0, #1
      count++;
 8001e34:	3201      	adds	r2, #1
      printf("%c",c);
 8001e36:	f89d 000f 	ldrb.w	r0, [sp, #15]
      *buf++ = c;
 8001e3a:	6025      	str	r5, [r4, #0]
      count++;
 8001e3c:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8001e3e:	f004 f96d 	bl	800611c <putchar>
 8001e42:	e7ae      	b.n	8001da2 <TaskInput+0x4a>
  } else if(c == '\r' || (c == '\n' && crReceived == 0)) {
 8001e44:	2b0d      	cmp	r3, #13
 8001e46:	d005      	beq.n	8001e54 <TaskInput+0xfc>
 8001e48:	2b0a      	cmp	r3, #10
 8001e4a:	d1aa      	bne.n	8001da2 <TaskInput+0x4a>
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <TaskInput+0x1c8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1a6      	bne.n	8001da2 <TaskInput+0x4a>
    *buf = '\0';
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <TaskInput+0x1c4>)
    strcpy(input_b,input);
 8001e56:	4934      	ldr	r1, [pc, #208]	; (8001f28 <TaskInput+0x1d0>)
    *buf = '\0';
 8001e58:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8001e5a:	4834      	ldr	r0, [pc, #208]	; (8001f2c <TaskInput+0x1d4>)
    *buf = '\0';
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8001e60:	f004 fa02 	bl	8006268 <strcpy>
    saved = 1;
 8001e64:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <TaskInput+0x1cc>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e7ba      	b.n	8001de2 <TaskInput+0x8a>
  if((i==0) || (*buf==0)) {
 8001e6c:	b352      	cbz	r2, 8001ec4 <TaskInput+0x16c>
  p = strtok(buf,SEPS);
 8001e6e:	4932      	ldr	r1, [pc, #200]	; (8001f38 <TaskInput+0x1e0>)
 8001e70:	f002 f826 	bl	8003ec0 <strtok>
  if(p==NULL) {
 8001e74:	4604      	mov	r4, r0
 8001e76:	b920      	cbnz	r0, 8001e82 <TaskInput+0x12a>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8001e78:	4930      	ldr	r1, [pc, #192]	; (8001f3c <TaskInput+0x1e4>)
 8001e7a:	4831      	ldr	r0, [pc, #196]	; (8001f40 <TaskInput+0x1e8>)
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001e7c:	f004 f936 	bl	80060ec <iprintf>
  return CmdReturnNotFound;
 8001e80:	e020      	b.n	8001ec4 <TaskInput+0x16c>
  if(strcasecmp(p,"help") == 0) {
 8001e82:	4930      	ldr	r1, [pc, #192]	; (8001f44 <TaskInput+0x1ec>)
 8001e84:	f004 f9d6 	bl	8006234 <strcasecmp>
 8001e88:	bb58      	cbnz	r0, 8001ee2 <TaskInput+0x18a>
    p = strtok(NULL,SEPS);
 8001e8a:	492b      	ldr	r1, [pc, #172]	; (8001f38 <TaskInput+0x1e0>)
 8001e8c:	f002 f818 	bl	8003ec0 <strtok>
    if(p == NULL) {
 8001e90:	4604      	mov	r4, r0
 8001e92:	b318      	cbz	r0, 8001edc <TaskInput+0x184>
      arg = CMD_LONG_HELP;
 8001e94:	f04f 0802 	mov.w	r8, #2
  cmdArgs = p + strlen(p) + 1;
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7fe f9bb 	bl	8000214 <strlen>
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <TaskInput+0x1f0>)
  for(t=table; t->cmdname!=NULL; t++) {
 8001ea0:	4f2a      	ldr	r7, [pc, #168]	; (8001f4c <TaskInput+0x1f4>)
  cmdArgs = p + strlen(p) + 1;
 8001ea2:	3001      	adds	r0, #1
 8001ea4:	4420      	add	r0, r4
 8001ea6:	6018      	str	r0, [r3, #0]
  for(t=table; t->cmdname!=NULL; t++) {
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	b9e9      	cbnz	r1, 8001ee8 <TaskInput+0x190>
  printf("Command '%s' not found. Type 'help' for online help\n",p);
 8001eac:	4828      	ldr	r0, [pc, #160]	; (8001f50 <TaskInput+0x1f8>)
 8001eae:	4621      	mov	r1, r4
 8001eb0:	e7e4      	b.n	8001e7c <TaskInput+0x124>
	if(t->help != NULL) {
 8001eb2:	68a2      	ldr	r2, [r4, #8]
 8001eb4:	b172      	cbz	r2, 8001ed4 <TaskInput+0x17c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001eb6:	4638      	mov	r0, r7
 8001eb8:	f004 f918 	bl	80060ec <iprintf>
      for(t=table; t->cmdname!=NULL; t++) {
 8001ebc:	340c      	adds	r4, #12
 8001ebe:	6821      	ldr	r1, [r4, #0]
 8001ec0:	2900      	cmp	r1, #0
 8001ec2:	d1f6      	bne.n	8001eb2 <TaskInput+0x15a>
    printPrompt = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	602b      	str	r3, [r5, #0]
    buf = input;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <TaskInput+0x1c4>)
 8001eca:	601e      	str	r6, [r3, #0]
    count = 0;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <TaskInput+0x1bc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e766      	b.n	8001da2 <TaskInput+0x4a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8001ed4:	6863      	ldr	r3, [r4, #4]
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	4798      	blx	r3
 8001eda:	e7ef      	b.n	8001ebc <TaskInput+0x164>
      for(t=table; t->cmdname!=NULL; t++) {
 8001edc:	4c1b      	ldr	r4, [pc, #108]	; (8001f4c <TaskInput+0x1f4>)
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001ede:	4f1d      	ldr	r7, [pc, #116]	; (8001f54 <TaskInput+0x1fc>)
 8001ee0:	e7ed      	b.n	8001ebe <TaskInput+0x166>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8001ee2:	f04f 0800 	mov.w	r8, #0
 8001ee6:	e7d7      	b.n	8001e98 <TaskInput+0x140>
    if(strcasecmp(p,t->cmdname) == 0) {
 8001ee8:	4620      	mov	r0, r4
 8001eea:	9101      	str	r1, [sp, #4]
 8001eec:	f004 f9a2 	bl	8006234 <strcasecmp>
 8001ef0:	9901      	ldr	r1, [sp, #4]
 8001ef2:	b948      	cbnz	r0, 8001f08 <TaskInput+0x1b0>
      if(arg == CMD_LONG_HELP) {	
 8001ef4:	f1b8 0f00 	cmp.w	r8, #0
 8001ef8:	d002      	beq.n	8001f00 <TaskInput+0x1a8>
	printf("%s:\n",t->cmdname);
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <TaskInput+0x200>)
 8001efc:	f004 f8f6 	bl	80060ec <iprintf>
      return t->func(arg);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4640      	mov	r0, r8
 8001f04:	4798      	blx	r3
 8001f06:	e7dd      	b.n	8001ec4 <TaskInput+0x16c>
  for(t=table; t->cmdname!=NULL; t++) {
 8001f08:	370c      	adds	r7, #12
 8001f0a:	e7cd      	b.n	8001ea8 <TaskInput+0x150>
 8001f0c:	20000010 	.word	0x20000010
 8001f10:	08006e70 	.word	0x08006e70
 8001f14:	20000a64 	.word	0x20000a64
 8001f18:	08006e77 	.word	0x08006e77
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000a68 	.word	0x20000a68
 8001f24:	20000b68 	.word	0x20000b68
 8001f28:	20000ac8 	.word	0x20000ac8
 8001f2c:	20000b18 	.word	0x20000b18
 8001f30:	08006d0e 	.word	0x08006d0e
 8001f34:	08012c9e 	.word	0x08012c9e
 8001f38:	08006e69 	.word	0x08006e69
 8001f3c:	08012c84 	.word	0x08012c84
 8001f40:	08006e7b 	.word	0x08006e7b
 8001f44:	08006eab 	.word	0x08006eab
 8001f48:	20000a60 	.word	0x20000a60
 8001f4c:	08013150 	.word	0x08013150
 8001f50:	08006ec1 	.word	0x08006ec1
 8001f54:	08006eb0 	.word	0x08006eb0
 8001f58:	08006ebc 	.word	0x08006ebc

08001f5c <fetch_uint32_arg>:
{
 8001f5c:	b538      	push	{r3, r4, r5, lr}
  p = strtok(NULL,SEPS);
 8001f5e:	490c      	ldr	r1, [pc, #48]	; (8001f90 <fetch_uint32_arg+0x34>)
{
 8001f60:	4605      	mov	r5, r0
  p = strtok(NULL,SEPS);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f001 ffac 	bl	8003ec0 <strtok>
  if(p == NULL) {
 8001f68:	4604      	mov	r4, r0
 8001f6a:	b168      	cbz	r0, 8001f88 <fetch_uint32_arg+0x2c>
  *dest = (uint32_t)strtoul(p,NULL,0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4611      	mov	r1, r2
 8001f70:	f002 f874 	bl	800405c <strtoul>
 8001f74:	6028      	str	r0, [r5, #0]
  cmdArgs = p + strlen(p) + 1;
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7fe f94c 	bl	8000214 <strlen>
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <fetch_uint32_arg+0x38>)
 8001f7e:	3001      	adds	r0, #1
 8001f80:	4404      	add	r4, r0
 8001f82:	601c      	str	r4, [r3, #0]
  return 0;
 8001f84:	2000      	movs	r0, #0
}
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8c:	e7fb      	b.n	8001f86 <fetch_uint32_arg+0x2a>
 8001f8e:	bf00      	nop
 8001f90:	08006e69 	.word	0x08006e69
 8001f94:	20000a60 	.word	0x20000a60

08001f98 <CmdLed>:

  WDTFeed();
}

ParserReturnVal_t CmdLed(int mode)
{
 8001f98:	b513      	push	{r0, r1, r4, lr}
  uint32_t val,rc;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001f9a:	b9d8      	cbnz	r0, 8001fd4 <CmdLed+0x3c>

  rc = fetch_uint32_arg(&val);
 8001f9c:	a801      	add	r0, sp, #4
 8001f9e:	f7ff ffdd 	bl	8001f5c <fetch_uint32_arg>
  if(rc) {
 8001fa2:	b128      	cbz	r0, 8001fb0 <CmdLed+0x18>
    printf("Please supply 1 | 0 to turn on or off the LED\n");
 8001fa4:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <CmdLed+0x48>)
 8001fa6:	f004 f93d 	bl	8006224 <puts>
    return CmdReturnBadParameter1;
 8001faa:	2004      	movs	r0, #4
  printf("Inside LD3 Port\n");
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,val);
#endif
  
  return CmdReturnOk;
}
 8001fac:	b002      	add	sp, #8
 8001fae:	bd10      	pop	{r4, pc}
  printf("Inside val function : %ld \n", val);
 8001fb0:	9901      	ldr	r1, [sp, #4]
 8001fb2:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <CmdLed+0x4c>)
 8001fb4:	f004 f89a 	bl	80060ec <iprintf>
  val = val ? 1 : 0;
 8001fb8:	9b01      	ldr	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <CmdLed+0x50>)
  val = val ? 1 : 0;
 8001fbc:	3b00      	subs	r3, #0
 8001fbe:	bf18      	it	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
  printf("Inside LD2 Port\n");
 8001fc4:	f004 f92e 	bl	8006224 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,val);
 8001fc8:	f89d 0004 	ldrb.w	r0, [sp, #4]
  if(PinState != GPIO_PIN_RESET)
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <CmdLed+0x54>)
 8001fce:	b118      	cbz	r0, 8001fd8 <CmdLed+0x40>
    GPIOx->BSRR = GPIO_Pin;
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	619a      	str	r2, [r3, #24]
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	e7e9      	b.n	8001fac <CmdLed+0x14>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fdc:	619a      	str	r2, [r3, #24]
 8001fde:	e7e5      	b.n	8001fac <CmdLed+0x14>
 8001fe0:	08006ef6 	.word	0x08006ef6
 8001fe4:	08006f24 	.word	0x08006f24
 8001fe8:	08006f40 	.word	0x08006f40
 8001fec:	40020000 	.word	0x40020000

08001ff0 <CmdPWM>:

ADD_CMD("pwmi", CmdPWMInit, "pwm init")


ParserReturnVal_t CmdPWM(int mode)
{
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t waveType, rcWaveType;
  uint32_t brightness, rcBrightness;
  uint32_t repeateCount, rcRepeateCount;

  if((mode != CMD_INTERACTIVE)) return CmdReturnOk;
 8001ff4:	4604      	mov	r4, r0
{
 8001ff6:	b087      	sub	sp, #28
  if((mode != CMD_INTERACTIVE)) return CmdReturnOk;
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d152      	bne.n	80020a2 <CmdPWM+0xb2>

  rcWaveType = fetch_uint32_arg(&waveType);
 8001ffc:	a801      	add	r0, sp, #4
 8001ffe:	f7ff ffad 	bl	8001f5c <fetch_uint32_arg>
  if(rcWaveType) {
 8002002:	b120      	cbz	r0, 800200e <CmdPWM+0x1e>
    printf("Please provide wave type either 0 or 1. Default is circular wave : %ld\n",waveType);
 8002004:	9901      	ldr	r1, [sp, #4]
 8002006:	486e      	ldr	r0, [pc, #440]	; (80021c0 <CmdPWM+0x1d0>)
 8002008:	f004 f870 	bl	80060ec <iprintf>
    waveType = 0;
 800200c:	9401      	str	r4, [sp, #4]
  }

  rcBrightness = fetch_uint32_arg(&brightness);
 800200e:	a802      	add	r0, sp, #8
 8002010:	f7ff ffa4 	bl	8001f5c <fetch_uint32_arg>
  if(rcBrightness) {
 8002014:	b130      	cbz	r0, 8002024 <CmdPWM+0x34>
    printf("Please provide brighness between 1 & 500. Default is 500: %ld\n", brightness);
 8002016:	9902      	ldr	r1, [sp, #8]
 8002018:	486a      	ldr	r0, [pc, #424]	; (80021c4 <CmdPWM+0x1d4>)
 800201a:	f004 f867 	bl	80060ec <iprintf>
    brightness = 500;
 800201e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002022:	9302      	str	r3, [sp, #8]

  }

  rcRepeateCount = fetch_uint32_arg(&repeateCount);
 8002024:	a803      	add	r0, sp, #12
 8002026:	f7ff ff99 	bl	8001f5c <fetch_uint32_arg>
  if(rcRepeateCount) {
 800202a:	b128      	cbz	r0, 8002038 <CmdPWM+0x48>
    printf("Please repeate count should greater than 0. Default is 25: %ld\n",repeateCount);   
 800202c:	9903      	ldr	r1, [sp, #12]
 800202e:	4866      	ldr	r0, [pc, #408]	; (80021c8 <CmdPWM+0x1d8>)
 8002030:	f004 f85c 	bl	80060ec <iprintf>
    repeateCount = 25;
 8002034:	2319      	movs	r3, #25
 8002036:	9303      	str	r3, [sp, #12]
  }


  HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_1);
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff f9e7 	bl	800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_1);
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fa46 	bl	80014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>
  HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_2);
 8002044:	2004      	movs	r0, #4
 8002046:	f7ff f9e1 	bl	800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_2);
 800204a:	2004      	movs	r0, #4
 800204c:	f7ff fa40 	bl	80014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>
  HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_3);
 8002050:	2008      	movs	r0, #8
 8002052:	f7ff f9db 	bl	800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_3);

  tim1.Instance->CCR1 = 0;
 8002056:	4d5d      	ldr	r5, [pc, #372]	; (80021cc <CmdPWM+0x1dc>)
    if(waveType == 1)
    {
       pwm_value = 255.0 * (1.0 - abs((int)(2.0*(ii/brightnessInFloat) - 1.0)));
    } else if(waveType == 0)
    {
      pwm_value = 255.0 * sqrt(1.0 - pow(abs((int)(2.0*(ii/brightnessInFloat)) - 1.0),2.0));
 8002058:	4f5d      	ldr	r7, [pc, #372]	; (80021d0 <CmdPWM+0x1e0>)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800205a:	f8df a178 	ldr.w	sl, [pc, #376]	; 80021d4 <CmdPWM+0x1e4>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_3);
 800205e:	2008      	movs	r0, #8
 8002060:	f7ff fa36 	bl	80014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>
volatile float brightnessInFloat = brightness * 1.0f;
 8002064:	eddd 7a02 	vldr	s15, [sp, #8]
  tim1.Instance->CCR1 = 0;
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	2400      	movs	r4, #0
volatile float brightnessInFloat = brightness * 1.0f;
 800206c:	eef8 7a67 	vcvt.f32.u32	s15, s15
      pwm_value = 255.0 * sqrt(1.0 - pow(abs((int)(2.0*(ii/brightnessInFloat)) - 1.0),2.0));
 8002070:	f20f 1944 	addw	r9, pc, #324	; 0x144
 8002074:	e9d9 8900 	ldrd	r8, r9, [r9]
  tim1.Instance->CCR1 = 0;
 8002078:	635c      	str	r4, [r3, #52]	; 0x34
  tim1.Instance->CCR2 = 0;
 800207a:	639c      	str	r4, [r3, #56]	; 0x38
  tim1.Instance->CCR3 = 0;
 800207c:	63dc      	str	r4, [r3, #60]	; 0x3c
volatile float pwm_value = 0.0f;
 800207e:	2300      	movs	r3, #0
 8002080:	9304      	str	r3, [sp, #16]
      pwm_value = 255.0 * sqrt(1.0 - pow(abs((int)(2.0*(ii/brightnessInFloat)) - 1.0),2.0));
 8002082:	2600      	movs	r6, #0
volatile float brightnessInFloat = brightness * 1.0f;
 8002084:	edcd 7a05 	vstr	s15, [sp, #20]
for(int j = 0; j < repeateCount; j++)
 8002088:	9b03      	ldr	r3, [sp, #12]
 800208a:	42a3      	cmp	r3, r4
 800208c:	f200 808f 	bhi.w	80021ae <CmdPWM+0x1be>
    WDTFeed();
  }
  HAL_Delay(10);
}
  
	HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_1);
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff fa79 	bl	8001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>
  HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_2);
 8002096:	2004      	movs	r0, #4
 8002098:	f7ff fa76 	bl	8001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>
  HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_3);
 800209c:	2008      	movs	r0, #8
 800209e:	f7ff fa73 	bl	8001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>
  
  return CmdReturnOk;
}
 80020a2:	2000      	movs	r0, #0
 80020a4:	b007      	add	sp, #28
 80020a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(waveType == 1)
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d14c      	bne.n	800214a <CmdPWM+0x15a>
       pwm_value = 255.0 * (1.0 - abs((int)(2.0*(ii/brightnessInFloat) - 1.0)));
 80020b0:	ee07 ba10 	vmov	s14, fp
 80020b4:	eddd 7a05 	vldr	s15, [sp, #20]
 80020b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020bc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80020c0:	ee17 0a90 	vmov	r0, s15
 80020c4:	f7fe fa68 	bl	8000598 <__aeabi_f2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	f7fe f906 	bl	80002dc <__adddf3>
 80020d0:	4632      	mov	r2, r6
 80020d2:	463b      	mov	r3, r7
 80020d4:	f7fe f900 	bl	80002d8 <__aeabi_dsub>
 80020d8:	f7fe fd66 	bl	8000ba8 <__aeabi_d2iz>
 80020dc:	2800      	cmp	r0, #0
 80020de:	bfb8      	it	lt
 80020e0:	4240      	neglt	r0, r0
 80020e2:	f7fe fa47 	bl	8000574 <__aeabi_i2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4630      	mov	r0, r6
 80020ec:	4639      	mov	r1, r7
 80020ee:	f7fe f8f3 	bl	80002d8 <__aeabi_dsub>
      pwm_value = 255.0 * sqrt(1.0 - pow(abs((int)(2.0*(ii/brightnessInFloat)) - 1.0),2.0));
 80020f2:	4642      	mov	r2, r8
 80020f4:	464b      	mov	r3, r9
 80020f6:	f7fe faa7 	bl	8000648 <__aeabi_dmul>
 80020fa:	f7fe fd7d 	bl	8000bf8 <__aeabi_d2f>
 80020fe:	9004      	str	r0, [sp, #16]
    tim1.Instance->CCR1 = (int)pwm_value;
 8002100:	eddd 7a04 	vldr	s15, [sp, #16]
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    HAL_Delay(1);
 800210a:	2001      	movs	r0, #1
    tim1.Instance->CCR1 = (int)pwm_value;
 800210c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    tim1.Instance->CCR2 = (int)pwm_value;
 8002110:	eddd 7a04 	vldr	s15, [sp, #16]
 8002114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  for(int ii = 0; ii < brightness; ii++)
 8002118:	f10b 0b01 	add.w	fp, fp, #1
    tim1.Instance->CCR2 = (int)pwm_value;
 800211c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    tim1.Instance->CCR3 = (int)pwm_value;
 8002120:	eddd 7a04 	vldr	s15, [sp, #16]
 8002124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002128:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    HAL_Delay(1);
 800212c:	f7fe ffc2 	bl	80010b4 <HAL_Delay>
 8002130:	f8da 3000 	ldr.w	r3, [sl]
 8002134:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002138:	601a      	str	r2, [r3, #0]
  for(int ii = 0; ii < brightness; ii++)
 800213a:	9b02      	ldr	r3, [sp, #8]
 800213c:	459b      	cmp	fp, r3
 800213e:	d3b4      	bcc.n	80020aa <CmdPWM+0xba>
  HAL_Delay(10);
 8002140:	200a      	movs	r0, #10
 8002142:	f7fe ffb7 	bl	80010b4 <HAL_Delay>
for(int j = 0; j < repeateCount; j++)
 8002146:	3401      	adds	r4, #1
 8002148:	e79e      	b.n	8002088 <CmdPWM+0x98>
    } else if(waveType == 0)
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1d8      	bne.n	8002100 <CmdPWM+0x110>
      pwm_value = 255.0 * sqrt(1.0 - pow(abs((int)(2.0*(ii/brightnessInFloat)) - 1.0),2.0));
 800214e:	ee07 ba10 	vmov	s14, fp
 8002152:	eddd 7a05 	vldr	s15, [sp, #20]
 8002156:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800215a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800215e:	ee17 0a90 	vmov	r0, s15
 8002162:	f7fe fa19 	bl	8000598 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	f7fe f8b7 	bl	80002dc <__adddf3>
 800216e:	f7fe fd1b 	bl	8000ba8 <__aeabi_d2iz>
 8002172:	f7fe f9ff 	bl	8000574 <__aeabi_i2d>
 8002176:	4632      	mov	r2, r6
 8002178:	463b      	mov	r3, r7
 800217a:	f7fe f8ad 	bl	80002d8 <__aeabi_dsub>
 800217e:	f7fe fd13 	bl	8000ba8 <__aeabi_d2iz>
 8002182:	2800      	cmp	r0, #0
 8002184:	bfb8      	it	lt
 8002186:	4240      	neglt	r0, r0
 8002188:	f7fe f9f4 	bl	8000574 <__aeabi_i2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	f7fe fa5a 	bl	8000648 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4630      	mov	r0, r6
 800219a:	4639      	mov	r1, r7
 800219c:	f7fe f89c 	bl	80002d8 <__aeabi_dsub>
 80021a0:	ec41 0b10 	vmov	d0, r0, r1
 80021a4:	f004 fa46 	bl	8006634 <sqrt>
 80021a8:	ec51 0b10 	vmov	r0, r1, d0
 80021ac:	e7a1      	b.n	80020f2 <CmdPWM+0x102>
  for(int ii = 0; ii < brightness; ii++)
 80021ae:	f04f 0b00 	mov.w	fp, #0
 80021b2:	e7c2      	b.n	800213a <CmdPWM+0x14a>
 80021b4:	f3af 8000 	nop.w
 80021b8:	00000000 	.word	0x00000000
 80021bc:	406fe000 	.word	0x406fe000
 80021c0:	08006f50 	.word	0x08006f50
 80021c4:	08006f98 	.word	0x08006f98
 80021c8:	08006fd7 	.word	0x08006fd7
 80021cc:	20000b6c 	.word	0x20000b6c
 80021d0:	3ff00000 	.word	0x3ff00000
 80021d4:	20000a78 	.word	0x20000a78

080021d8 <CmdRGB>:
ADD_CMD("pwm",CmdPWM,"pwm <wave-type> <brightness> <repeat> 0|1 0 = tringular wave, 1 = circular wave")


ParserReturnVal_t CmdRGB(int mode)
{
 80021d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t red_channel, green_channel, blue_channel, rc_red, rc_green, rc_blue;
  
 

  rc_red = fetch_uint32_arg(&red_channel);
 80021da:	a803      	add	r0, sp, #12
 80021dc:	f7ff febe 	bl	8001f5c <fetch_uint32_arg>
  if(rc_red) {
 80021e0:	b128      	cbz	r0, 80021ee <CmdRGB+0x16>
    printf("Please specify red cahnnel value\n");
 80021e2:	481a      	ldr	r0, [pc, #104]	; (800224c <CmdRGB+0x74>)
    return CmdReturnBadParameter1;
  }

  rc_green = fetch_uint32_arg(&green_channel);
  if(rc_green) {
    printf("Please specify green cahnnel value\n");
 80021e4:	f004 f81e 	bl	8006224 <puts>
    return CmdReturnBadParameter1;
 80021e8:	2004      	movs	r0, #4

  setRGB (red_channel,green_channel,blue_channel);  


  return CmdReturnOk;
}
 80021ea:	b004      	add	sp, #16
 80021ec:	bd10      	pop	{r4, pc}
  rc_green = fetch_uint32_arg(&green_channel);
 80021ee:	a802      	add	r0, sp, #8
 80021f0:	f7ff feb4 	bl	8001f5c <fetch_uint32_arg>
  if(rc_green) {
 80021f4:	b108      	cbz	r0, 80021fa <CmdRGB+0x22>
    printf("Please specify green cahnnel value\n");
 80021f6:	4816      	ldr	r0, [pc, #88]	; (8002250 <CmdRGB+0x78>)
 80021f8:	e7f4      	b.n	80021e4 <CmdRGB+0xc>
  rc_blue = fetch_uint32_arg(&blue_channel);  
 80021fa:	a801      	add	r0, sp, #4
 80021fc:	f7ff feae 	bl	8001f5c <fetch_uint32_arg>
  if(rc_blue) {
 8002200:	4604      	mov	r4, r0
 8002202:	b108      	cbz	r0, 8002208 <CmdRGB+0x30>
    printf("Please specify blue cahnnel value\n");
 8002204:	4813      	ldr	r0, [pc, #76]	; (8002254 <CmdRGB+0x7c>)
 8002206:	e7ed      	b.n	80021e4 <CmdRGB+0xc>
  HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_1);
 8002208:	f7ff f900 	bl	800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_1);
 800220c:	4620      	mov	r0, r4
 800220e:	f7ff f95f 	bl	80014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>
  HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_2);
 8002212:	2004      	movs	r0, #4
 8002214:	f7ff f8fa 	bl	800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_2);
 8002218:	2004      	movs	r0, #4
 800221a:	f7ff f959 	bl	80014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>
  HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_3);
 800221e:	2008      	movs	r0, #8
 8002220:	f7ff f8f4 	bl	800140c <HAL_TIM_PWM_Start.constprop.0.isra.0>
  HAL_TIMEx_PWMN_Start(&tim1, TIM_CHANNEL_3);
 8002224:	2008      	movs	r0, #8
 8002226:	f7ff f953 	bl	80014d0 <HAL_TIMEx_PWMN_Start.constprop.0.isra.0>
ADD_CMD("pwmstop", CmdStopPWM,"                         To Stop timer")


void setRGB (uint8_t red, uint8_t green, uint8_t blue)
{
  tim1.Instance->CCR1 = red;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <CmdRGB+0x80>)
 800222c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
  tim1.Instance->CCR2 = green;
 8002234:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
  tim1.Instance->CCR3 = blue;
 800223a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_Delay(10);
 8002240:	200a      	movs	r0, #10
 8002242:	f7fe ff37 	bl	80010b4 <HAL_Delay>
  return CmdReturnOk;
 8002246:	4620      	mov	r0, r4
}
 8002248:	e7cf      	b.n	80021ea <CmdRGB+0x12>
 800224a:	bf00      	nop
 800224c:	08007017 	.word	0x08007017
 8002250:	08007038 	.word	0x08007038
 8002254:	0800705b 	.word	0x0800705b
 8002258:	20000b6c 	.word	0x20000b6c

0800225c <CmdStopPWM>:
{
 800225c:	b513      	push	{r0, r1, r4, lr}
	if (mode != CMD_INTERACTIVE) return CmdReturnOk;
 800225e:	4604      	mov	r4, r0
 8002260:	b960      	cbnz	r0, 800227c <CmdStopPWM+0x20>
	rc = fetch_uint32_arg(&val); 
 8002262:	a801      	add	r0, sp, #4
 8002264:	f7ff fe7a 	bl	8001f5c <fetch_uint32_arg>
	if (rc) 
 8002268:	b110      	cbz	r0, 8002270 <CmdStopPWM+0x14>
	HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_1);
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff f98c 	bl	8001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>
  HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_2);
 8002270:	2004      	movs	r0, #4
 8002272:	f7ff f989 	bl	8001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>
  HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_3);
 8002276:	2008      	movs	r0, #8
 8002278:	f7ff f986 	bl	8001588 <HAL_TIM_PWM_Stop.constprop.0.isra.0>
}
 800227c:	2000      	movs	r0, #0
 800227e:	b002      	add	sp, #8
 8002280:	bd10      	pop	{r4, pc}
	...

08002284 <enableDisableStepper>:

ParserReturnVal_t  enableDisableStepper(int mode)
{
 8002284:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002286:	b110      	cbz	r0, 800228e <enableDisableStepper+0xa>
 8002288:	2000      	movs	r0, #0
    gIsStepperEnabled = 0; 
    printf("stepper motor disabled.\n");
  }

  return CmdReturnOk;
}
 800228a:	b003      	add	sp, #12
 800228c:	bd30      	pop	{r4, r5, pc}
  rc=fetch_uint32_arg(&stepperStatus);
 800228e:	a801      	add	r0, sp, #4
 8002290:	f7ff fe64 	bl	8001f5c <fetch_uint32_arg>
  if(rc)
 8002294:	b120      	cbz	r0, 80022a0 <enableDisableStepper+0x1c>
    printf("Please enable or disable stepper controller.\n");
 8002296:	480b      	ldr	r0, [pc, #44]	; (80022c4 <enableDisableStepper+0x40>)
 8002298:	f003 ffc4 	bl	8006224 <puts>
    return CmdReturnBadParameter1;
 800229c:	2004      	movs	r0, #4
 800229e:	e7f4      	b.n	800228a <enableDisableStepper+0x6>
  if(stepperStatus == 1)
 80022a0:	9c01      	ldr	r4, [sp, #4]
 80022a2:	2c01      	cmp	r4, #1
 80022a4:	d105      	bne.n	80022b2 <enableDisableStepper+0x2e>
    gIsStepperEnabled = 1; 
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <enableDisableStepper+0x44>)
    printf("stepper motor enabled.\n");
 80022a8:	4808      	ldr	r0, [pc, #32]	; (80022cc <enableDisableStepper+0x48>)
    gIsStepperEnabled = 1; 
 80022aa:	601c      	str	r4, [r3, #0]
    printf("stepper motor enabled.\n");
 80022ac:	f003 ffba 	bl	8006224 <puts>
 80022b0:	e7ea      	b.n	8002288 <enableDisableStepper+0x4>
  } else if (stepperStatus == 0)
 80022b2:	2c00      	cmp	r4, #0
 80022b4:	d1e8      	bne.n	8002288 <enableDisableStepper+0x4>
    gIsStepperEnabled = 0; 
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <enableDisableStepper+0x44>)
    printf("stepper motor disabled.\n");
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <enableDisableStepper+0x4c>)
    gIsStepperEnabled = 0; 
 80022ba:	601c      	str	r4, [r3, #0]
    printf("stepper motor disabled.\n");
 80022bc:	f003 ffb2 	bl	8006224 <puts>
  return CmdReturnOk;
 80022c0:	4620      	mov	r0, r4
 80022c2:	e7e2      	b.n	800228a <enableDisableStepper+0x6>
 80022c4:	0800707d 	.word	0x0800707d
 80022c8:	20000a70 	.word	0x20000a70
 80022cc:	080070aa 	.word	0x080070aa
 80022d0:	080070c1 	.word	0x080070c1

080022d4 <StepSpeedAction>:
ADD_CMD("se",enableDisableStepper,"         enable or disable stepper.\n");

ParserReturnVal_t StepSpeedAction(int mode)
{
 80022d4:	b513      	push	{r0, r1, r4, lr}
	uint32_t dir, rcDir, delay,rcDelay;
	  
	if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80022d6:	b9c0      	cbnz	r0, 800230a <StepSpeedAction+0x36>

    rcDir = fetch_uint32_arg(&dir);
 80022d8:	4668      	mov	r0, sp
 80022da:	f7ff fe3f 	bl	8001f5c <fetch_uint32_arg>
 80022de:	4604      	mov	r4, r0

    rcDelay = fetch_uint32_arg(&delay);
 80022e0:	a801      	add	r0, sp, #4
 80022e2:	f7ff fe3b 	bl	8001f5c <fetch_uint32_arg>

    if(rcDelay || rcDir) {
 80022e6:	4304      	orrs	r4, r0
 80022e8:	d005      	beq.n	80022f6 <StepSpeedAction+0x22>
    printf("Please specify the direction and delay.\n");
 80022ea:	480e      	ldr	r0, [pc, #56]	; (8002324 <StepSpeedAction+0x50>)
 80022ec:	f003 ff9a 	bl	8006224 <puts>
     return CmdReturnBadParameter1;
 80022f0:	2004      	movs	r0, #4
    HAL_TIM_Base_Start_IT(&tim11);

    }

	return CmdReturnOk;
}
 80022f2:	b002      	add	sp, #8
 80022f4:	bd10      	pop	{r4, pc}
    gDirection = dir;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <StepSpeedAction+0x54>)
 80022f8:	9a00      	ldr	r2, [sp, #0]
 80022fa:	601a      	str	r2, [r3, #0]
    if(gIsStepperEnabled != 1)
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <StepSpeedAction+0x58>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d004      	beq.n	800230e <StepSpeedAction+0x3a>
        printf("Please enable stepper motor.");
 8002304:	480a      	ldr	r0, [pc, #40]	; (8002330 <StepSpeedAction+0x5c>)
 8002306:	f003 fef1 	bl	80060ec <iprintf>
	if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800230a:	2000      	movs	r0, #0
 800230c:	e7f1      	b.n	80022f2 <StepSpeedAction+0x1e>
    printf("Inside motor init\n");
 800230e:	4809      	ldr	r0, [pc, #36]	; (8002334 <StepSpeedAction+0x60>)
 8002310:	f003 ff88 	bl	8006224 <puts>
    gpioInit();
 8002314:	f7fe ffa0 	bl	8001258 <gpioInit>
    Timer11_Init(delay);
 8002318:	9801      	ldr	r0, [sp, #4]
 800231a:	f7ff f9a7 	bl	800166c <Timer11_Init>
    HAL_TIM_Base_Start_IT(&tim11);
 800231e:	f7ff f973 	bl	8001608 <HAL_TIM_Base_Start_IT.constprop.0.isra.0>
	return CmdReturnOk;
 8002322:	e7f2      	b.n	800230a <StepSpeedAction+0x36>
 8002324:	080070d9 	.word	0x080070d9
 8002328:	20000a6c 	.word	0x20000a6c
 800232c:	20000a70 	.word	0x20000a70
 8002330:	08007101 	.word	0x08007101
 8002334:	0800711e 	.word	0x0800711e

08002338 <StepSpeedQAction>:

ADD_CMD("ss",StepSpeedAction,"<dir> <delay>    Make stepper step at a speed set by the delay value.\n");


ParserReturnVal_t StepSpeedQAction(int mode)
{
 8002338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t rcDelay1;
    uint32_t rcDelay2;
    uint32_t rcDelay3;
    uint32_t stepSeq = 0;
	  
	if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800233c:	bb28      	cbnz	r0, 800238a <StepSpeedQAction+0x52>

    rcDir = fetch_uint32_arg(&dir);
 800233e:	4668      	mov	r0, sp
 8002340:	f7ff fe0c 	bl	8001f5c <fetch_uint32_arg>
 8002344:	4605      	mov	r5, r0
    rcDelay1 = fetch_uint32_arg(&delay1);
 8002346:	a801      	add	r0, sp, #4
 8002348:	f7ff fe08 	bl	8001f5c <fetch_uint32_arg>
 800234c:	4607      	mov	r7, r0
    rcDelay2 = fetch_uint32_arg(&delay2);
 800234e:	a802      	add	r0, sp, #8
 8002350:	f7ff fe04 	bl	8001f5c <fetch_uint32_arg>
 8002354:	4606      	mov	r6, r0
    rcDelay3 = fetch_uint32_arg(&delay3);
 8002356:	a803      	add	r0, sp, #12
 8002358:	f7ff fe00 	bl	8001f5c <fetch_uint32_arg>

    if(rcDelay1 || rcDelay2 || rcDelay3 || rcDir ) {
 800235c:	433d      	orrs	r5, r7
 800235e:	ea45 0306 	orr.w	r3, r5, r6
 8002362:	ea53 0400 	orrs.w	r4, r3, r0
 8002366:	d006      	beq.n	8002376 <StepSpeedQAction+0x3e>
    printf("Please specify the direction and delay.\n");
 8002368:	4826      	ldr	r0, [pc, #152]	; (8002404 <StepSpeedQAction+0xcc>)
 800236a:	f003 ff5b 	bl	8006224 <puts>
     return CmdReturnBadParameter1;
 800236e:	2004      	movs	r0, #4
        }
    }
    }

	return CmdReturnOk;
}
 8002370:	b004      	add	sp, #16
 8002372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    gDirection = dir;
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <StepSpeedQAction+0xd0>)
 8002378:	9a00      	ldr	r2, [sp, #0]
 800237a:	601a      	str	r2, [r3, #0]
    if(gIsStepperEnabled != 1)
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <StepSpeedQAction+0xd4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d004      	beq.n	800238e <StepSpeedQAction+0x56>
        printf("Please enable stepper motor.");
 8002384:	4822      	ldr	r0, [pc, #136]	; (8002410 <StepSpeedQAction+0xd8>)
 8002386:	f003 feb1 	bl	80060ec <iprintf>
	if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800238a:	2000      	movs	r0, #0
 800238c:	e7f0      	b.n	8002370 <StepSpeedQAction+0x38>
            printf("Stopping.\n");
 800238e:	4f21      	ldr	r7, [pc, #132]	; (8002414 <StepSpeedQAction+0xdc>)
            printf("Starting with delay 2 %ld..\n", delay2);
 8002390:	4e21      	ldr	r6, [pc, #132]	; (8002418 <StepSpeedQAction+0xe0>)
            printf("Starting with delay 1 %ld..\n", delay1);
 8002392:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800241c <StepSpeedQAction+0xe4>
    uint32_t stepSeq = 0;
 8002396:	4625      	mov	r5, r4
        if(stepSeq == 0 && i == 0) 
 8002398:	b9ad      	cbnz	r5, 80023c6 <StepSpeedQAction+0x8e>
 800239a:	b94c      	cbnz	r4, 80023b0 <StepSpeedQAction+0x78>
            printf("Starting with delay 1 %ld..\n", delay1);
 800239c:	9901      	ldr	r1, [sp, #4]
 800239e:	4640      	mov	r0, r8
 80023a0:	f003 fea4 	bl	80060ec <iprintf>
            gpioInit();
 80023a4:	f7fe ff58 	bl	8001258 <gpioInit>
            Timer11_Init(delay1);
 80023a8:	9801      	ldr	r0, [sp, #4]
            Timer11_Init(delay2);
 80023aa:	f7ff f95f 	bl	800166c <Timer11_Init>
 80023ae:	e005      	b.n	80023bc <StepSpeedQAction+0x84>
        } else if(stepSeq == 0 && i == 2048 - 1){
 80023b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023b4:	429c      	cmp	r4, r3
 80023b6:	d101      	bne.n	80023bc <StepSpeedQAction+0x84>
            i = 0;
 80023b8:	462c      	mov	r4, r5
            stepSeq = 1;
 80023ba:	2501      	movs	r5, #1
    for(int i = 0; i < 2048; i++)
 80023bc:	3401      	adds	r4, #1
 80023be:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80023c2:	d1e9      	bne.n	8002398 <StepSpeedQAction+0x60>
 80023c4:	e7e1      	b.n	800238a <StepSpeedQAction+0x52>
        } else if(stepSeq == 1 && i == 0) 
 80023c6:	2d01      	cmp	r5, #1
 80023c8:	d10f      	bne.n	80023ea <StepSpeedQAction+0xb2>
 80023ca:	b93c      	cbnz	r4, 80023dc <StepSpeedQAction+0xa4>
            printf("Starting with delay 2 %ld..\n", delay2);
 80023cc:	9902      	ldr	r1, [sp, #8]
 80023ce:	4630      	mov	r0, r6
 80023d0:	f003 fe8c 	bl	80060ec <iprintf>
            gpioInit();
 80023d4:	f7fe ff40 	bl	8001258 <gpioInit>
            Timer11_Init(delay2);
 80023d8:	9802      	ldr	r0, [sp, #8]
 80023da:	e7e6      	b.n	80023aa <StepSpeedQAction+0x72>
        } else if(stepSeq == 1 && i == 2048 - 1){
 80023dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023e0:	429c      	cmp	r4, r3
 80023e2:	d1eb      	bne.n	80023bc <StepSpeedQAction+0x84>
            i = 0;
 80023e4:	2400      	movs	r4, #0
            stepSeq = 2;
 80023e6:	2502      	movs	r5, #2
 80023e8:	e7e8      	b.n	80023bc <StepSpeedQAction+0x84>
        } else if(stepSeq == 2 && i == 0) 
 80023ea:	2d02      	cmp	r5, #2
 80023ec:	d1e6      	bne.n	80023bc <StepSpeedQAction+0x84>
 80023ee:	2c00      	cmp	r4, #0
 80023f0:	d0ec      	beq.n	80023cc <StepSpeedQAction+0x94>
        } else if(stepSeq == 2 && i == 2048 - 1){
 80023f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023f6:	429c      	cmp	r4, r3
 80023f8:	d1e0      	bne.n	80023bc <StepSpeedQAction+0x84>
            printf("Stopping.\n");
 80023fa:	4638      	mov	r0, r7
 80023fc:	f003 ff12 	bl	8006224 <puts>
 8002400:	e7dc      	b.n	80023bc <StepSpeedQAction+0x84>
 8002402:	bf00      	nop
 8002404:	080070d9 	.word	0x080070d9
 8002408:	20000a6c 	.word	0x20000a6c
 800240c:	20000a70 	.word	0x20000a70
 8002410:	08007101 	.word	0x08007101
 8002414:	0800716a 	.word	0x0800716a
 8002418:	0800714d 	.word	0x0800714d
 800241c:	08007130 	.word	0x08007130

08002420 <CmdR>:
#include "common.h"



ParserReturnVal_t CmdR(int mode)
{
 8002420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t addr, data,i;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002424:	4604      	mov	r4, r0
 8002426:	b9f0      	cbnz	r0, 8002466 <CmdR+0x46>

  fetch_uint32_arg(&addr);
 8002428:	a801      	add	r0, sp, #4
 800242a:	f7ff fd97 	bl	8001f5c <fetch_uint32_arg>

  data = *((uint32_t *)addr);
 800242e:	9901      	ldr	r1, [sp, #4]
  
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8002430:	4812      	ldr	r0, [pc, #72]	; (800247c <CmdR+0x5c>)
  data = *((uint32_t *)addr);
 8002432:	680d      	ldr	r5, [r1, #0]
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
	 "            1098 7654 3210 9876 5432 1098 7654 3210\n"
	 "            ==== ==== ==== ==== ==== ==== ==== ====\n"
	 "           ");
  for(i=0; i<32; i++) {
    printf("%s%c",
 8002434:	4e12      	ldr	r6, [pc, #72]	; (8002480 <CmdR+0x60>)
 8002436:	4f13      	ldr	r7, [pc, #76]	; (8002484 <CmdR+0x64>)
  printf("0x%08lX: 0x%08lX\n",addr, data);
 8002438:	462a      	mov	r2, r5
 800243a:	f003 fe57 	bl	80060ec <iprintf>
  printf("            3322 2222 2222 1111 1111 1100 0000 0000\n"
 800243e:	4812      	ldr	r0, [pc, #72]	; (8002488 <CmdR+0x68>)
 8002440:	f003 fe54 	bl	80060ec <iprintf>
    printf("%s%c",
 8002444:	4911      	ldr	r1, [pc, #68]	; (800248c <CmdR+0x6c>)
 8002446:	4688      	mov	r8, r1
 8002448:	2d00      	cmp	r5, #0
 800244a:	bfb4      	ite	lt
 800244c:	2231      	movlt	r2, #49	; 0x31
 800244e:	2230      	movge	r2, #48	; 0x30
 8002450:	4630      	mov	r0, r6
  for(i=0; i<32; i++) {
 8002452:	3401      	adds	r4, #1
    printf("%s%c",
 8002454:	f003 fe4a 	bl	80060ec <iprintf>
  for(i=0; i<32; i++) {
 8002458:	2c20      	cmp	r4, #32
	   i % 4 ? "" : " ",
	   data & 0x80000000 ? '1' : '0');
    data <<= 1;
 800245a:	ea4f 0545 	mov.w	r5, r5, lsl #1
  for(i=0; i<32; i++) {
 800245e:	d106      	bne.n	800246e <CmdR+0x4e>
  }
  printf("\n");
 8002460:	200a      	movs	r0, #10
 8002462:	f003 fe5b 	bl	800611c <putchar>
  return CmdReturnOk;
}
 8002466:	2000      	movs	r0, #0
 8002468:	b002      	add	sp, #8
 800246a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("%s%c",
 800246e:	f014 0f03 	tst.w	r4, #3
 8002472:	bf14      	ite	ne
 8002474:	4639      	movne	r1, r7
 8002476:	4641      	moveq	r1, r8
 8002478:	e7e6      	b.n	8002448 <CmdR+0x28>
 800247a:	bf00      	nop
 800247c:	08007174 	.word	0x08007174
 8002480:	0800722e 	.word	0x0800722e
 8002484:	08009606 	.word	0x08009606
 8002488:	08007186 	.word	0x08007186
 800248c:	080095aa 	.word	0x080095aa

08002490 <CmdW>:


ParserReturnVal_t CmdW(int mode)
{
 8002490:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002492:	b940      	cbnz	r0, 80024a6 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8002494:	4668      	mov	r0, sp
 8002496:	f7ff fd61 	bl	8001f5c <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800249a:	a801      	add	r0, sp, #4
 800249c:	f7ff fd5e 	bl	8001f5c <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80024a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80024a4:	601a      	str	r2, [r3, #0]
  return CmdReturnOk;
}
 80024a6:	2000      	movs	r0, #0
 80024a8:	b003      	add	sp, #12
 80024aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080024b0 <CmdDump>:
    printf("\n");
  }
}

ParserReturnVal_t CmdDump(int action)
{
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80024b4:	2801      	cmp	r0, #1
{
 80024b6:	b08b      	sub	sp, #44	; 0x2c
  if(action==CMD_SHORT_HELP) return CmdReturnOk;
 80024b8:	d00b      	beq.n	80024d2 <CmdDump+0x22>
  if(action==CMD_LONG_HELP) {
 80024ba:	2802      	cmp	r0, #2
 80024bc:	4f31      	ldr	r7, [pc, #196]	; (8002584 <CmdDump+0xd4>)
 80024be:	4e32      	ldr	r6, [pc, #200]	; (8002588 <CmdDump+0xd8>)
 80024c0:	d10b      	bne.n	80024da <CmdDump+0x2a>
    printf("dump {<address> {<count>}}\n\n"
 80024c2:	4832      	ldr	r0, [pc, #200]	; (800258c <CmdDump+0xdc>)
 80024c4:	f003 feae 	bl	8006224 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	6831      	ldr	r1, [r6, #0]
 80024cc:	4830      	ldr	r0, [pc, #192]	; (8002590 <CmdDump+0xe0>)
 80024ce:	f003 fe0d 	bl	80060ec <iprintf>

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
  return CmdReturnOk;
}
 80024d2:	2000      	movs	r0, #0
 80024d4:	b00b      	add	sp, #44	; 0x2c
 80024d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = fetch_uint32_arg(&address);
 80024da:	4630      	mov	r0, r6
 80024dc:	f7ff fd3e 	bl	8001f5c <fetch_uint32_arg>
  if(rc == 0) {
 80024e0:	b910      	cbnz	r0, 80024e8 <CmdDump+0x38>
    fetch_uint32_arg(&count);
 80024e2:	4638      	mov	r0, r7
 80024e4:	f7ff fd3a 	bl	8001f5c <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 80024e8:	683c      	ldr	r4, [r7, #0]
  if(count == 0) return;
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d043      	beq.n	8002576 <CmdDump+0xc6>
  DumpBuffer((uint8_t *)address, count, address);
 80024ee:	6833      	ldr	r3, [r6, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 80024f0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80025a0 <CmdDump+0xf0>
  DumpBuffer((uint8_t *)address, count, address);
 80024f4:	9301      	str	r3, [sp, #4]
  bufp = buf;
 80024f6:	f10d 0914 	add.w	r9, sp, #20
  for(i=0; i<count; i++) {
 80024fa:	2500      	movs	r5, #0
 80024fc:	46c8      	mov	r8, r9
 80024fe:	9b01      	ldr	r3, [sp, #4]
 8002500:	1959      	adds	r1, r3, r5
    if((i% BYTES_PER_LINE) == 0) {
 8002502:	f015 030f 	ands.w	r3, r5, #15
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	d13a      	bne.n	8002580 <CmdDump+0xd0>
      printf("%08x: ",(unsigned int)address);
 800250a:	4822      	ldr	r0, [pc, #136]	; (8002594 <CmdDump+0xe4>)
 800250c:	9103      	str	r1, [sp, #12]
 800250e:	f003 fded 	bl	80060ec <iprintf>
      bufp = buf;
 8002512:	9903      	ldr	r1, [sp, #12]
 8002514:	46c3      	mov	fp, r8
    c = *p++;
 8002516:	7808      	ldrb	r0, [r1, #0]
    if(isprint(c)) {
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <CmdDump+0xe8>)
 800251a:	f810 c003 	ldrb.w	ip, [r0, r3]
      *bufp++ = c; /* Stick in the character */
 800251e:	46d9      	mov	r9, fp
      *bufp++ = '.';
 8002520:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8002524:	4601      	mov	r1, r0
      *bufp++ = '.';
 8002526:	bf08      	it	eq
 8002528:	202e      	moveq	r0, #46	; 0x2e
 800252a:	f809 0b01 	strb.w	r0, [r9], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 800252e:	4650      	mov	r0, sl
 8002530:	f003 fddc 	bl	80060ec <iprintf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8002534:	9b02      	ldr	r3, [sp, #8]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	d106      	bne.n	8002548 <CmdDump+0x98>
      *bufp = '\0';  /* NULL terminate buffer */
 800253a:	2100      	movs	r1, #0
 800253c:	f88b 1001 	strb.w	r1, [fp, #1]
      printf("  |%s|\n",buf);
 8002540:	4816      	ldr	r0, [pc, #88]	; (800259c <CmdDump+0xec>)
 8002542:	4641      	mov	r1, r8
 8002544:	f003 fdd2 	bl	80060ec <iprintf>
  for(i=0; i<count; i++) {
 8002548:	3501      	adds	r5, #1
 800254a:	42ac      	cmp	r4, r5
 800254c:	d1d7      	bne.n	80024fe <CmdDump+0x4e>
  *bufp='\0';
 800254e:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 8002550:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 8002554:	f88b 5001 	strb.w	r5, [fp, #1]
  if(count % BYTES_PER_LINE) {
 8002558:	d00d      	beq.n	8002576 <CmdDump+0xc6>
      printf("   ");
 800255a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80025a4 <CmdDump+0xf4>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800255e:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 8002562:	4648      	mov	r0, r9
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8002564:	3501      	adds	r5, #1
      printf("   ");
 8002566:	f003 fdc1 	bl	80060ec <iprintf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800256a:	42a5      	cmp	r5, r4
 800256c:	d3f9      	bcc.n	8002562 <CmdDump+0xb2>
    printf("  |%s|\n",buf);
 800256e:	480b      	ldr	r0, [pc, #44]	; (800259c <CmdDump+0xec>)
 8002570:	4641      	mov	r1, r8
 8002572:	f003 fdbb 	bl	80060ec <iprintf>
  address = address+count;
 8002576:	6833      	ldr	r3, [r6, #0]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	6033      	str	r3, [r6, #0]
  return CmdReturnOk;
 800257e:	e7a8      	b.n	80024d2 <CmdDump+0x22>
 8002580:	46cb      	mov	fp, r9
 8002582:	e7c8      	b.n	8002516 <CmdDump+0x66>
 8002584:	2000000c 	.word	0x2000000c
 8002588:	20000a48 	.word	0x20000a48
 800258c:	08007233 	.word	0x08007233
 8002590:	080073cb 	.word	0x080073cb
 8002594:	080073fd 	.word	0x080073fd
 8002598:	08012c9e 	.word	0x08012c9e
 800259c:	0800740a 	.word	0x0800740a
 80025a0:	08007404 	.word	0x08007404
 80025a4:	0800722a 	.word	0x0800722a

080025a8 <CmdSend>:

ADD_CMD("termstat", CmdStats, "                Dump terminal statistics");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdSend(int mode)
{
 80025a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t index,rc,len;
  char *s;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80025aa:	4604      	mov	r4, r0
 80025ac:	bb50      	cbnz	r0, 8002604 <CmdSend+0x5c>

  index = 0;
 80025ae:	9003      	str	r0, [sp, #12]
  rc = fetch_uint32_arg(&index);
 80025b0:	a803      	add	r0, sp, #12
 80025b2:	f7ff fcd3 	bl	8001f5c <fetch_uint32_arg>
  if(rc) {
 80025b6:	4602      	mov	r2, r0
 80025b8:	b130      	cbz	r0, 80025c8 <CmdSend+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 80025ba:	4813      	ldr	r0, [pc, #76]	; (8002608 <CmdSend+0x60>)
 80025bc:	4621      	mov	r1, r4
 80025be:	f003 fd95 	bl	80060ec <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 80025c2:	2004      	movs	r0, #4
  }
  TerminalOutputBufferWrite(index,s,len);
  /* Append a CR/LF just in case */
  TerminalOutputBufferWrite(index,"\r\n",2);
  return CmdReturnOk;
}
 80025c4:	b004      	add	sp, #16
 80025c6:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 80025c8:	9c03      	ldr	r4, [sp, #12]
 80025ca:	b124      	cbz	r4, 80025d6 <CmdSend+0x2e>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80025cc:	4621      	mov	r1, r4
 80025ce:	480f      	ldr	r0, [pc, #60]	; (800260c <CmdSend+0x64>)
 80025d0:	f003 fd8c 	bl	80060ec <iprintf>
 80025d4:	e7f5      	b.n	80025c2 <CmdSend+0x1a>

/* Fetch the rest of the command */
int fetch_cmd_args(char **dest)
{
  *dest = cmdArgs;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <CmdSend+0x68>)
 80025d8:	6819      	ldr	r1, [r3, #0]
  len = strlen(s);
 80025da:	9101      	str	r1, [sp, #4]
 80025dc:	4608      	mov	r0, r1
 80025de:	f7fd fe19 	bl	8000214 <strlen>
  if(len==0) {
 80025e2:	9901      	ldr	r1, [sp, #4]
 80025e4:	4602      	mov	r2, r0
 80025e6:	b920      	cbnz	r0, 80025f2 <CmdSend+0x4a>
    printf("You need to specify what you want to send\n");
 80025e8:	480a      	ldr	r0, [pc, #40]	; (8002614 <CmdSend+0x6c>)
 80025ea:	f003 fe1b 	bl	8006224 <puts>
    return CmdReturnBadParameter2;
 80025ee:	2005      	movs	r0, #5
 80025f0:	e7e8      	b.n	80025c4 <CmdSend+0x1c>
  TerminalOutputBufferWrite(index,s,len);
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7ff f8c2 	bl	800177c <TerminalOutputBufferWrite.isra.0>
  TerminalOutputBufferWrite(index,"\r\n",2);
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <CmdSend+0x70>)
 80025fa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80025fe:	2202      	movs	r2, #2
 8002600:	f7ff f8bc 	bl	800177c <TerminalOutputBufferWrite.isra.0>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002604:	2000      	movs	r0, #0
 8002606:	e7dd      	b.n	80025c4 <CmdSend+0x1c>
 8002608:	08007412 	.word	0x08007412
 800260c:	08007440 	.word	0x08007440
 8002610:	20000a60 	.word	0x20000a60
 8002614:	08007476 	.word	0x08007476
 8002618:	08007a04 	.word	0x08007a04

0800261c <CmdReceive>:

ADD_CMD("send", CmdSend, "<index> <str>   Send arbitrary string to terminal");

/* Command to send something arbitrary to a terminal */
ParserReturnVal_t CmdReceive(int mode)
{
 800261c:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800261e:	4604      	mov	r4, r0
 8002620:	bb18      	cbnz	r0, 800266a <CmdReceive+0x4e>

  index = 0;
 8002622:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002624:	a801      	add	r0, sp, #4
 8002626:	f7ff fc99 	bl	8001f5c <fetch_uint32_arg>
  if(rc) {
 800262a:	4602      	mov	r2, r0
 800262c:	b130      	cbz	r0, 800263c <CmdReceive+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 800262e:	4810      	ldr	r0, [pc, #64]	; (8002670 <CmdReceive+0x54>)
 8002630:	4621      	mov	r1, r4
 8002632:	f003 fd5b 	bl	80060ec <iprintf>
  }

  if(index >= INDEX_MAX) {
    printf("Terminal index of %lu is larger than max index of %d\n",
	   index,INDEX_MAX-1);
    return CmdReturnBadParameter1;
 8002636:	2004      	movs	r0, #4

  while(TerminalRead(index, (uint8_t *)&c, 1)) {
    printf("%c",c);
  }
  return CmdReturnOk;
}
 8002638:	b002      	add	sp, #8
 800263a:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 800263c:	9901      	ldr	r1, [sp, #4]
 800263e:	b119      	cbz	r1, 8002648 <CmdReceive+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <CmdReceive+0x58>)
 8002642:	f003 fd53 	bl	80060ec <iprintf>
 8002646:	e7f6      	b.n	8002636 <CmdReceive+0x1a>
  printf("Reading from terminal %lu\n",index);
 8002648:	480b      	ldr	r0, [pc, #44]	; (8002678 <CmdReceive+0x5c>)
 800264a:	f003 fd4f 	bl	80060ec <iprintf>
  while(TerminalRead(index, (uint8_t *)&c, 1)) {
 800264e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f10d 0103 	add.w	r1, sp, #3
 8002658:	f7fe fca0 	bl	8000f9c <TerminalRead>
 800265c:	2800      	cmp	r0, #0
 800265e:	d0eb      	beq.n	8002638 <CmdReceive+0x1c>
    printf("%c",c);
 8002660:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002664:	f003 fd5a 	bl	800611c <putchar>
 8002668:	e7f1      	b.n	800264e <CmdReceive+0x32>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800266a:	2000      	movs	r0, #0
 800266c:	e7e4      	b.n	8002638 <CmdReceive+0x1c>
 800266e:	bf00      	nop
 8002670:	08007412 	.word	0x08007412
 8002674:	08007440 	.word	0x08007440
 8002678:	080074a0 	.word	0x080074a0

0800267c <CmdTransparent>:

ADD_CMD("receive", CmdReceive, "<index>         Dump whatever is in the Rx buffer");

/* Make a transparent terminal to the desired port */
ParserReturnVal_t CmdTransparent(int mode)
{
 800267c:	b513      	push	{r0, r1, r4, lr}
  uint32_t index,rc;
  char c,o;
  
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 800267e:	4604      	mov	r4, r0
 8002680:	b9b0      	cbnz	r0, 80026b0 <CmdTransparent+0x34>

  index = 0;
 8002682:	9001      	str	r0, [sp, #4]
  rc = fetch_uint32_arg(&index);
 8002684:	a801      	add	r0, sp, #4
 8002686:	f7ff fc69 	bl	8001f5c <fetch_uint32_arg>
  if(rc) {
 800268a:	4602      	mov	r2, r0
 800268c:	b130      	cbz	r0, 800269c <CmdTransparent+0x20>
    printf("Must specify terminal index between 0 and %d\n",
 800268e:	4809      	ldr	r0, [pc, #36]	; (80026b4 <CmdTransparent+0x38>)
 8002690:	4621      	mov	r1, r4
 8002692:	f003 fd2b 	bl	80060ec <iprintf>
    return CmdReturnBadParameter1;
  }

  if(index == INDEX_CONSOLE) {
    printf("Terminal index cannot be the console\n");
    return CmdReturnBadParameter1;
 8002696:	2004      	movs	r0, #4
      TerminalOutputBufferWrite(index,&o,1);
    }
    WDTFeed();
  }
    return CmdReturnOk;
}
 8002698:	b002      	add	sp, #8
 800269a:	bd10      	pop	{r4, pc}
  if(index >= INDEX_MAX) {
 800269c:	9901      	ldr	r1, [sp, #4]
 800269e:	b119      	cbz	r1, 80026a8 <CmdTransparent+0x2c>
    printf("Terminal index of %lu is larger than max index of %d\n",
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <CmdTransparent+0x3c>)
 80026a2:	f003 fd23 	bl	80060ec <iprintf>
    return CmdReturnBadParameter1;
 80026a6:	e7f6      	b.n	8002696 <CmdTransparent+0x1a>
    printf("Terminal index cannot be the console\n");
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <CmdTransparent+0x40>)
 80026aa:	f003 fdbb 	bl	8006224 <puts>
 80026ae:	e7f2      	b.n	8002696 <CmdTransparent+0x1a>
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 80026b0:	2000      	movs	r0, #0
 80026b2:	e7f1      	b.n	8002698 <CmdTransparent+0x1c>
 80026b4:	08007412 	.word	0x08007412
 80026b8:	08007440 	.word	0x08007440
 80026bc:	080074bb 	.word	0x080074bb

080026c0 <CmdDecode>:

ParserReturnVal_t CmdDecode(int mode)
{
 80026c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 80026c4:	2802      	cmp	r0, #2
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 80026c6:	a803      	add	r0, sp, #12
  if(mode == CMD_LONG_HELP) {
 80026c8:	d132      	bne.n	8002730 <CmdDecode+0x70>
    rc = fetch_string_arg(&n);
 80026ca:	f7ff fb2d 	bl	8001d28 <fetch_string_arg>
    if(rc) {
 80026ce:	b160      	cbz	r0, 80026ea <CmdDecode+0x2a>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 80026d0:	488b      	ldr	r0, [pc, #556]	; (8002900 <CmdDecode+0x240>)
 80026d2:	f003 fda7 	bl	8006224 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 80026d6:	f7ff fafb 	bl	8001cd0 <DecodePrintPeripherals.constprop.0>
      printf("\n\n"
 80026da:	488a      	ldr	r0, [pc, #552]	; (8002904 <CmdDecode+0x244>)
 80026dc:	f003 fda2 	bl	8006224 <puts>
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
    }
    
    return CmdReturnOk;
 80026e0:	2400      	movs	r4, #0
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return CmdReturnOk;
}
 80026e2:	4620      	mov	r0, r4
 80026e4:	b004      	add	sp, #16
 80026e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = Peripherals;
 80026ea:	4d87      	ldr	r5, [pc, #540]	; (8002908 <CmdDecode+0x248>)
 80026ec:	e008      	b.n	8002700 <CmdDecode+0x40>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 80026ee:	9c03      	ldr	r4, [sp, #12]
 80026f0:	f7fe fc7a 	bl	8000fe8 <Uncompress>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4620      	mov	r0, r4
 80026f8:	f003 fd9c 	bl	8006234 <strcasecmp>
 80026fc:	b118      	cbz	r0, 8002706 <CmdDecode+0x46>
	p++;
 80026fe:	3510      	adds	r5, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002700:	6828      	ldr	r0, [r5, #0]
 8002702:	2800      	cmp	r0, #0
 8002704:	d1f3      	bne.n	80026ee <CmdDecode+0x2e>
      if(p->name == NULL) {
 8002706:	682c      	ldr	r4, [r5, #0]
 8002708:	b934      	cbnz	r4, 8002718 <CmdDecode+0x58>
	printf("%s is not a valid peripheral name\n"
 800270a:	9903      	ldr	r1, [sp, #12]
 800270c:	487f      	ldr	r0, [pc, #508]	; (800290c <CmdDecode+0x24c>)
 800270e:	f003 fced 	bl	80060ec <iprintf>
	DecodePrintPeripherals(Peripherals);
 8002712:	f7ff fadd 	bl	8001cd0 <DecodePrintPeripherals.constprop.0>
	return CmdReturnOk;
 8002716:	e7e4      	b.n	80026e2 <CmdDecode+0x22>
      printf("Valid registers for peripheral %s:\n"
 8002718:	4620      	mov	r0, r4
 800271a:	f7fe fc65 	bl	8000fe8 <Uncompress>
 800271e:	4601      	mov	r1, r0
 8002720:	487b      	ldr	r0, [pc, #492]	; (8002910 <CmdDecode+0x250>)
 8002722:	f003 fce3 	bl	80060ec <iprintf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8002726:	89a9      	ldrh	r1, [r5, #12]
 8002728:	68a8      	ldr	r0, [r5, #8]
 800272a:	f7ff faa1 	bl	8001c70 <DecodePrintRegisters>
    printf("\n\n");
 800272e:	e007      	b.n	8002740 <CmdDecode+0x80>
  rc = fetch_string_arg(&pname);
 8002730:	f7ff fafa 	bl	8001d28 <fetch_string_arg>
  if(rc) {
 8002734:	b178      	cbz	r0, 8002756 <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 8002736:	4877      	ldr	r0, [pc, #476]	; (8002914 <CmdDecode+0x254>)
 8002738:	f003 fd74 	bl	8006224 <puts>
    DecodePrintPeripherals(Peripherals);
 800273c:	f7ff fac8 	bl	8001cd0 <DecodePrintPeripherals.constprop.0>
    printf("\n\n");
 8002740:	4875      	ldr	r0, [pc, #468]	; (8002918 <CmdDecode+0x258>)
 8002742:	e7cb      	b.n	80026dc <CmdDecode+0x1c>
    p++;
 8002744:	3510      	adds	r5, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8002746:	6828      	ldr	r0, [r5, #0]
 8002748:	9c03      	ldr	r4, [sp, #12]
 800274a:	b930      	cbnz	r0, 800275a <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 800274c:	9903      	ldr	r1, [sp, #12]
 800274e:	4873      	ldr	r0, [pc, #460]	; (800291c <CmdDecode+0x25c>)
 8002750:	f003 fccc 	bl	80060ec <iprintf>
    DecodePrintPeripherals(Peripherals);
 8002754:	e7f2      	b.n	800273c <CmdDecode+0x7c>
  p = Peripherals;
 8002756:	4d6c      	ldr	r5, [pc, #432]	; (8002908 <CmdDecode+0x248>)
 8002758:	e7f5      	b.n	8002746 <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 800275a:	f7fe fc45 	bl	8000fe8 <Uncompress>
 800275e:	4601      	mov	r1, r0
 8002760:	4620      	mov	r0, r4
 8002762:	f003 fd67 	bl	8006234 <strcasecmp>
 8002766:	4604      	mov	r4, r0
 8002768:	2800      	cmp	r0, #0
 800276a:	d1eb      	bne.n	8002744 <CmdDecode+0x84>
  if(p->name == NULL) {
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ec      	beq.n	800274c <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8002772:	a802      	add	r0, sp, #8
 8002774:	f7ff fad8 	bl	8001d28 <fetch_string_arg>
  if(rc) {
 8002778:	b120      	cbz	r0, 8002784 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f7ff fa4f 	bl	8001c20 <DecodePeripheral>
    return CmdReturnOk;
 8002782:	e7ae      	b.n	80026e2 <CmdDecode+0x22>
  r = p->registers;
 8002784:	68ae      	ldr	r6, [r5, #8]
  i = p->numRegisters;
 8002786:	89af      	ldrh	r7, [r5, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8002788:	9c02      	ldr	r4, [sp, #8]
 800278a:	2f00      	cmp	r7, #0
 800278c:	f000 80a8 	beq.w	80028e0 <CmdDecode+0x220>
 8002790:	6830      	ldr	r0, [r6, #0]
 8002792:	f7fe fc29 	bl	8000fe8 <Uncompress>
 8002796:	4601      	mov	r1, r0
 8002798:	4620      	mov	r0, r4
 800279a:	f003 fd4b 	bl	8006234 <strcasecmp>
 800279e:	3f01      	subs	r7, #1
 80027a0:	4604      	mov	r4, r0
 80027a2:	b958      	cbnz	r0, 80027bc <CmdDecode+0xfc>
  rc = fetch_string_arg(&fname);
 80027a4:	a801      	add	r0, sp, #4
 80027a6:	f7ff fabf 	bl	8001d28 <fetch_string_arg>
  if(rc == 0) {
 80027aa:	b170      	cbz	r0, 80027ca <CmdDecode+0x10a>
  val = DecodeReadRegister(p,r);
 80027ac:	4631      	mov	r1, r6
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7ff f86a 	bl	8001888 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 80027b4:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 80027b6:	4602      	mov	r2, r0
 80027b8:	9000      	str	r0, [sp, #0]
  DecodeRegister(r,p->base, val,1);
 80027ba:	e017      	b.n	80027ec <CmdDecode+0x12c>
    r++;
 80027bc:	3610      	adds	r6, #16
 80027be:	e7e3      	b.n	8002788 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 80027c0:	2101      	movs	r1, #1
 80027c2:	4628      	mov	r0, r5
 80027c4:	f7ff fa2c 	bl	8001c20 <DecodePeripheral>
      return CmdReturnOk;
 80027c8:	e78a      	b.n	80026e0 <CmdDecode+0x20>
    if(strcasecmp(fname,"val") == 0) {
 80027ca:	4955      	ldr	r1, [pc, #340]	; (8002920 <CmdDecode+0x260>)
 80027cc:	9801      	ldr	r0, [sp, #4]
 80027ce:	f003 fd31 	bl	8006234 <strcasecmp>
 80027d2:	b980      	cbnz	r0, 80027f6 <CmdDecode+0x136>
      rc = fetch_uint32_arg(&val);
 80027d4:	4668      	mov	r0, sp
 80027d6:	f7ff fbc1 	bl	8001f5c <fetch_uint32_arg>
      if(rc) {
 80027da:	4604      	mov	r4, r0
 80027dc:	b120      	cbz	r0, 80027e8 <CmdDecode+0x128>
	printf("Missing value to use in decode\n");
 80027de:	4851      	ldr	r0, [pc, #324]	; (8002924 <CmdDecode+0x264>)
 80027e0:	f003 fd20 	bl	8006224 <puts>
	return CmdReturnBadParameter4;
 80027e4:	2407      	movs	r4, #7
 80027e6:	e77c      	b.n	80026e2 <CmdDecode+0x22>
      DecodeRegister(r,p->base,val,1);
 80027e8:	9a00      	ldr	r2, [sp, #0]
 80027ea:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 80027ec:	6869      	ldr	r1, [r5, #4]
 80027ee:	4630      	mov	r0, r6
 80027f0:	f7ff f9ba 	bl	8001b68 <DecodeRegister>
  return CmdReturnOk;
 80027f4:	e775      	b.n	80026e2 <CmdDecode+0x22>
    f = r->fields;
 80027f6:	68b7      	ldr	r7, [r6, #8]
    while((f != NULL)
 80027f8:	b15f      	cbz	r7, 8002812 <CmdDecode+0x152>
	  && (f->name != NULL)
 80027fa:	6838      	ldr	r0, [r7, #0]
 80027fc:	b148      	cbz	r0, 8002812 <CmdDecode+0x152>
	  && strcasecmp(fname,Uncompress(f->name))) {
 80027fe:	9c01      	ldr	r4, [sp, #4]
 8002800:	f7fe fbf2 	bl	8000fe8 <Uncompress>
 8002804:	4601      	mov	r1, r0
 8002806:	4620      	mov	r0, r4
 8002808:	f003 fd14 	bl	8006234 <strcasecmp>
 800280c:	b998      	cbnz	r0, 8002836 <CmdDecode+0x176>
    if((f != NULL) && f->name != NULL) {
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b99b      	cbnz	r3, 800283a <CmdDecode+0x17a>
    errno = 0;
 8002812:	f000 fdf3 	bl	80033fc <__errno>
 8002816:	2700      	movs	r7, #0
 8002818:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 800281a:	463a      	mov	r2, r7
 800281c:	4639      	mov	r1, r7
 800281e:	9801      	ldr	r0, [sp, #4]
 8002820:	f001 fc1c 	bl	800405c <strtoul>
 8002824:	9000      	str	r0, [sp, #0]
    if(errno != 0) {
 8002826:	f000 fde9 	bl	80033fc <__errno>
 800282a:	6804      	ldr	r4, [r0, #0]
 800282c:	2c00      	cmp	r4, #0
 800282e:	d042      	beq.n	80028b6 <CmdDecode+0x1f6>
      printf("Invalid number '%s' entered.\n",
 8002830:	9901      	ldr	r1, [sp, #4]
 8002832:	483d      	ldr	r0, [pc, #244]	; (8002928 <CmdDecode+0x268>)
 8002834:	e00b      	b.n	800284e <CmdDecode+0x18e>
      f++;
 8002836:	3708      	adds	r7, #8
 8002838:	e7de      	b.n	80027f8 <CmdDecode+0x138>
      rc = fetch_uint32_arg(&val);
 800283a:	4668      	mov	r0, sp
 800283c:	f7ff fb8e 	bl	8001f5c <fetch_uint32_arg>
      if(rc) {
 8002840:	4604      	mov	r4, r0
 8002842:	b138      	cbz	r0, 8002854 <CmdDecode+0x194>
	printf("Missing Value to program into register %s\n",
 8002844:	6830      	ldr	r0, [r6, #0]
 8002846:	f7fe fbcf 	bl	8000fe8 <Uncompress>
 800284a:	4601      	mov	r1, r0
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <CmdDecode+0x26c>)
      printf("Invalid number '%s' entered.\n",
 800284e:	f003 fc4d 	bl	80060ec <iprintf>
      return CmdReturnOk;
 8002852:	e745      	b.n	80026e0 <CmdDecode+0x20>
      t = DecodeReadRegister(p,r);
 8002854:	4631      	mov	r1, r6
 8002856:	4628      	mov	r0, r5
 8002858:	f7ff f816 	bl	8001888 <DecodeReadRegister>
      m = (1<<f->width)-1;
 800285c:	797a      	ldrb	r2, [r7, #5]
      oval = (t >> f->offset) & m; /* Save old value */
 800285e:	7939      	ldrb	r1, [r7, #4]
      m = (1<<f->width)-1;
 8002860:	2301      	movs	r3, #1
 8002862:	4093      	lsls	r3, r2
 8002864:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8002866:	fa03 f201 	lsl.w	r2, r3, r1
      oval = (t >> f->offset) & m; /* Save old value */
 800286a:	fa20 f801 	lsr.w	r8, r0, r1
      t &= ~(m << f->offset);
 800286e:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8002872:	9800      	ldr	r0, [sp, #0]
      oval = (t >> f->offset) & m; /* Save old value */
 8002874:	ea08 0803 	and.w	r8, r8, r3
      t |= (val & m) << f->offset;
 8002878:	4003      	ands	r3, r0
 800287a:	408b      	lsls	r3, r1
      DecodeWriteRegister(p,r,t);
 800287c:	431a      	orrs	r2, r3
 800287e:	4631      	mov	r1, r6
 8002880:	4628      	mov	r0, r5
 8002882:	f7ff f83b 	bl	80018fc <DecodeWriteRegister.isra.0>
      printf("%s.",
 8002886:	6828      	ldr	r0, [r5, #0]
 8002888:	f7fe fbae 	bl	8000fe8 <Uncompress>
 800288c:	4601      	mov	r1, r0
 800288e:	4828      	ldr	r0, [pc, #160]	; (8002930 <CmdDecode+0x270>)
 8002890:	f003 fc2c 	bl	80060ec <iprintf>
      printf("%s.",
 8002894:	6830      	ldr	r0, [r6, #0]
 8002896:	f7fe fba7 	bl	8000fe8 <Uncompress>
 800289a:	4601      	mov	r1, r0
 800289c:	4824      	ldr	r0, [pc, #144]	; (8002930 <CmdDecode+0x270>)
 800289e:	f003 fc25 	bl	80060ec <iprintf>
      printf("%s (%d) -> (%d)\n",
 80028a2:	6838      	ldr	r0, [r7, #0]
 80028a4:	f7fe fba0 	bl	8000fe8 <Uncompress>
 80028a8:	9b00      	ldr	r3, [sp, #0]
 80028aa:	4601      	mov	r1, r0
 80028ac:	4642      	mov	r2, r8
 80028ae:	4821      	ldr	r0, [pc, #132]	; (8002934 <CmdDecode+0x274>)
 80028b0:	f003 fc1c 	bl	80060ec <iprintf>
      return CmdReturnOk;
 80028b4:	e715      	b.n	80026e2 <CmdDecode+0x22>
    DecodeWriteRegister(p,r,val);
 80028b6:	9a00      	ldr	r2, [sp, #0]
 80028b8:	4631      	mov	r1, r6
 80028ba:	4628      	mov	r0, r5
 80028bc:	f7ff f81e 	bl	80018fc <DecodeWriteRegister.isra.0>
    printf("%s.",
 80028c0:	6828      	ldr	r0, [r5, #0]
 80028c2:	f7fe fb91 	bl	8000fe8 <Uncompress>
 80028c6:	4601      	mov	r1, r0
 80028c8:	4819      	ldr	r0, [pc, #100]	; (8002930 <CmdDecode+0x270>)
 80028ca:	f003 fc0f 	bl	80060ec <iprintf>
    printf("%s = 0x%08x\n",
 80028ce:	6830      	ldr	r0, [r6, #0]
 80028d0:	f7fe fb8a 	bl	8000fe8 <Uncompress>
 80028d4:	9a00      	ldr	r2, [sp, #0]
 80028d6:	4601      	mov	r1, r0
 80028d8:	4817      	ldr	r0, [pc, #92]	; (8002938 <CmdDecode+0x278>)
 80028da:	f003 fc07 	bl	80060ec <iprintf>
    return CmdReturnOk;
 80028de:	e700      	b.n	80026e2 <CmdDecode+0x22>
    if(strcasecmp(rname,"full") == 0) {
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <CmdDecode+0x27c>)
 80028e2:	4620      	mov	r0, r4
 80028e4:	f003 fca6 	bl	8006234 <strcasecmp>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	f43f af69 	beq.w	80027c0 <CmdDecode+0x100>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 80028ee:	6828      	ldr	r0, [r5, #0]
 80028f0:	f7fe fb7a 	bl	8000fe8 <Uncompress>
 80028f4:	4621      	mov	r1, r4
 80028f6:	4602      	mov	r2, r0
 80028f8:	4811      	ldr	r0, [pc, #68]	; (8002940 <CmdDecode+0x280>)
 80028fa:	f003 fbf7 	bl	80060ec <iprintf>
 80028fe:	e712      	b.n	8002726 <CmdDecode+0x66>
 8002900:	080074e0 	.word	0x080074e0
 8002904:	080076f3 	.word	0x080076f3
 8002908:	0800f65c 	.word	0x0800f65c
 800290c:	08007748 	.word	0x08007748
 8002910:	08007783 	.word	0x08007783
 8002914:	080077a8 	.word	0x080077a8
 8002918:	08007811 	.word	0x08007811
 800291c:	080077d7 	.word	0x080077d7
 8002920:	08007850 	.word	0x08007850
 8002924:	08007854 	.word	0x08007854
 8002928:	080078b3 	.word	0x080078b3
 800292c:	08007873 	.word	0x08007873
 8002930:	0800789e 	.word	0x0800789e
 8002934:	080078a2 	.word	0x080078a2
 8002938:	080078d1 	.word	0x080078d1
 800293c:	080078de 	.word	0x080078de
 8002940:	08007813 	.word	0x08007813

08002944 <PolledPrintf>:
{
 8002944:	b40f      	push	{r0, r1, r2, r3}
 8002946:	b500      	push	{lr}
 8002948:	b097      	sub	sp, #92	; 0x5c
 800294a:	ab18      	add	r3, sp, #96	; 0x60
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 800294c:	2150      	movs	r1, #80	; 0x50
{
 800294e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap,fmt);
 8002952:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf,sizeof(buf),fmt, ap);
 8002954:	a802      	add	r0, sp, #8
 8002956:	f003 fcbb 	bl	80062d0 <vsniprintf>
    while(!(uart->SR & USART_SR_TXE)) {
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <PolledPrintf+0x38>)
  while(len) {
 800295c:	ab02      	add	r3, sp, #8
 800295e:	b928      	cbnz	r0, 800296c <PolledPrintf+0x28>
}
 8002960:	b017      	add	sp, #92	; 0x5c
 8002962:	f85d eb04 	ldr.w	lr, [sp], #4
 8002966:	b004      	add	sp, #16
 8002968:	4770      	bx	lr
      asm volatile ("nop");
 800296a:	bf00      	nop
    while(!(uart->SR & USART_SR_TXE)) {
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	0609      	lsls	r1, r1, #24
 8002970:	d5fb      	bpl.n	800296a <PolledPrintf+0x26>
    uart->DR = *p;
 8002972:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002976:	6051      	str	r1, [r2, #4]
    len--;
 8002978:	3801      	subs	r0, #1
 800297a:	e7f0      	b.n	800295e <PolledPrintf+0x1a>
 800297c:	40004400 	.word	0x40004400

08002980 <CmdStats>:
{
 8002980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002984:	4601      	mov	r1, r0
{
 8002986:	b08d      	sub	sp, #52	; 0x34
  if(mode != CMD_INTERACTIVE) return CmdReturnOk;
 8002988:	bb10      	cbnz	r0, 80029d0 <CmdStats+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 800298a:	b672      	cpsid	i
    s[i] = TerminalState[i].stats;
 800298c:	4812      	ldr	r0, [pc, #72]	; (80029d8 <CmdStats+0x58>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800298e:	910a      	str	r1, [sp, #40]	; 0x28
    s[i] = TerminalState[i].stats;
 8002990:	f8d0 3830 	ldr.w	r3, [r0, #2096]	; 0x830
 8002994:	930b      	str	r3, [sp, #44]	; 0x2c
 8002996:	f500 6401 	add.w	r4, r0, #2064	; 0x810
 800299a:	f500 6802 	add.w	r8, r0, #2080	; 0x820
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f500 6001 	add.w	r0, r0, #2064	; 0x810
    s[i] = TerminalState[i].stats;
 80029a4:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 80029a6:	e898 0f00 	ldmia.w	r8, {r8, r9, sl, fp}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80029aa:	f000 fd51 	bl	8003450 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 80029ae:	b662      	cpsie	i
    printf("Terminal #%lu, %s: %s\n"
 80029b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <CmdStats+0x5c>)
 80029b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80029b6:	480a      	ldr	r0, [pc, #40]	; (80029e0 <CmdStats+0x60>)
 80029b8:	9400      	str	r4, [sp, #0]
 80029ba:	e9cd b307 	strd	fp, r3, [sp, #28]
 80029be:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 80029c2:	e9cd 7803 	strd	r7, r8, [sp, #12]
 80029c6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <CmdStats+0x64>)
 80029cc:	f003 fb8e 	bl	80060ec <iprintf>
}
 80029d0:	2000      	movs	r0, #0
 80029d2:	b00d      	add	sp, #52	; 0x34
 80029d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d8:	20000214 	.word	0x20000214
 80029dc:	080078eb 	.word	0x080078eb
 80029e0:	080078f3 	.word	0x080078f3
 80029e4:	080078e3 	.word	0x080078e3

080029e8 <USR_LED_Toggle>:
// simple function that toggles the USR LED the STM Nucleo64 board
void USR_LED_Toggle( void )
{
  static uint32_t LedState = 0;		// keep track of the led state in a private variable

  LedState = LedState ? 0 : 1;		// toggle the led state value
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <USR_LED_Toggle+0x10>)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	6013      	str	r3, [r2, #0]
#elif defined(LD3_Pin)
  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,LedState);
#endif

  return;
}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000210 	.word	0x20000210

080029fc <TIM1_TRG_COM_TIM11_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029fc:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <TIM1_TRG_COM_TIM11_IRQHandler+0x104>)
 80029fe:	6813      	ldr	r3, [r2, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	0789      	lsls	r1, r1, #30
 8002a04:	d508      	bpl.n	8002a18 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a06:	68d9      	ldr	r1, [r3, #12]
 8002a08:	0788      	lsls	r0, r1, #30
 8002a0a:	d505      	bpl.n	8002a18 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	f06f 0102 	mvn.w	r1, #2
 8002a10:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a12:	6999      	ldr	r1, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a14:	2100      	movs	r1, #0
 8002a16:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a18:	6919      	ldr	r1, [r3, #16]
 8002a1a:	0749      	lsls	r1, r1, #29
 8002a1c:	d508      	bpl.n	8002a30 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	68d9      	ldr	r1, [r3, #12]
 8002a20:	0748      	lsls	r0, r1, #29
 8002a22:	d505      	bpl.n	8002a30 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a24:	f06f 0104 	mvn.w	r1, #4
 8002a28:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2a:	6999      	ldr	r1, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a30:	6919      	ldr	r1, [r3, #16]
 8002a32:	0709      	lsls	r1, r1, #28
 8002a34:	d508      	bpl.n	8002a48 <TIM1_TRG_COM_TIM11_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a36:	68d9      	ldr	r1, [r3, #12]
 8002a38:	0708      	lsls	r0, r1, #28
 8002a3a:	d505      	bpl.n	8002a48 <TIM1_TRG_COM_TIM11_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a3c:	f06f 0108 	mvn.w	r1, #8
 8002a40:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a42:	69d9      	ldr	r1, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a44:	2100      	movs	r1, #0
 8002a46:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	06c9      	lsls	r1, r1, #27
 8002a4c:	d508      	bpl.n	8002a60 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	06c8      	lsls	r0, r1, #27
 8002a52:	d505      	bpl.n	8002a60 <TIM1_TRG_COM_TIM11_IRQHandler+0x64>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a54:	f06f 0110 	mvn.w	r1, #16
 8002a58:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5a:	69d9      	ldr	r1, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	7711      	strb	r1, [r2, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	07d1      	lsls	r1, r2, #31
 8002a64:	d52c      	bpl.n	8002ac0 <TIM1_TRG_COM_TIM11_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	07d2      	lsls	r2, r2, #31
 8002a6a:	d529      	bpl.n	8002ac0 <TIM1_TRG_COM_TIM11_IRQHandler+0xc4>

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a6c:	4825      	ldr	r0, [pc, #148]	; (8002b04 <TIM1_TRG_COM_TIM11_IRQHandler+0x108>)
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a6e:	f06f 0201 	mvn.w	r2, #1
 8002a72:	611a      	str	r2, [r3, #16]
 8002a74:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a76:	0411      	lsls	r1, r2, #16
 8002a78:	43d2      	mvns	r2, r2
 8002a7a:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 8002a7e:	f002 0220 	and.w	r2, r2, #32
 8002a82:	430a      	orrs	r2, r1
 8002a84:	6182      	str	r2, [r0, #24]
{
	if( htim == &tim11 ){								// check if this was meant for us
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
        
        //Telling motor to rotate CW or CCW
        if(gDirection < 0)
 8002a86:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <TIM1_TRG_COM_TIM11_IRQHandler+0x10c>)
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	2a00      	cmp	r2, #0
 8002a8c:	da04      	bge.n	8002a98 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <TIM1_TRG_COM_TIM11_IRQHandler+0x110>)
 8002a90:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    GPIOx->BSRR = GPIO_Pin;
 8002a94:	6191      	str	r1, [r2, #24]
}
 8002a96:	e003      	b.n	8002aa0 <TIM1_TRG_COM_TIM11_IRQHandler+0xa4>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
        } 
        else if(gDirection == 0)
 8002a98:	d12e      	bne.n	8002af8 <TIM1_TRG_COM_TIM11_IRQHandler+0xfc>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a9e:	6182      	str	r2, [r0, #24]
        else if(gDirection > 0)
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
        }
        
        if(gIsStepperEnabled == 1)
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <TIM1_TRG_COM_TIM11_IRQHandler+0x114>)
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	2a01      	cmp	r2, #1
 8002aa6:	d10b      	bne.n	8002ac0 <TIM1_TRG_COM_TIM11_IRQHandler+0xc4>
    GPIOx->BSRR = GPIO_Pin;
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	6182      	str	r2, [r0, #24]
  odr = GPIOx->ODR;
 8002aac:	4817      	ldr	r0, [pc, #92]	; (8002b0c <TIM1_TRG_COM_TIM11_IRQHandler+0x110>)
 8002aae:	6942      	ldr	r2, [r0, #20]
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab0:	0411      	lsls	r1, r2, #16
 8002ab2:	43d2      	mvns	r2, r2
 8002ab4:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8002ab8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002abc:	430a      	orrs	r2, r1
 8002abe:	6182      	str	r2, [r0, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	0610      	lsls	r0, r2, #24
 8002ac4:	d505      	bpl.n	8002ad2 <TIM1_TRG_COM_TIM11_IRQHandler+0xd6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	0611      	lsls	r1, r2, #24
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aca:	bf44      	itt	mi
 8002acc:	f06f 0280 	mvnmi.w	r2, #128	; 0x80
 8002ad0:	611a      	strmi	r2, [r3, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	0652      	lsls	r2, r2, #25
 8002ad6:	d505      	bpl.n	8002ae4 <TIM1_TRG_COM_TIM11_IRQHandler+0xe8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	0650      	lsls	r0, r2, #25
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002adc:	bf44      	itt	mi
 8002ade:	f06f 0240 	mvnmi.w	r2, #64	; 0x40
 8002ae2:	611a      	strmi	r2, [r3, #16]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	0691      	lsls	r1, r2, #26
 8002ae8:	d505      	bpl.n	8002af6 <TIM1_TRG_COM_TIM11_IRQHandler+0xfa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	0692      	lsls	r2, r2, #26
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aee:	bf44      	itt	mi
 8002af0:	f06f 0220 	mvnmi.w	r2, #32
 8002af4:	611a      	strmi	r2, [r3, #16]
}
 8002af6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <TIM1_TRG_COM_TIM11_IRQHandler+0x110>)
 8002afa:	2110      	movs	r1, #16
 8002afc:	e7ca      	b.n	8002a94 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>
 8002afe:	bf00      	nop
 8002b00:	20000bb4 	.word	0x20000bb4
 8002b04:	40020000 	.word	0x40020000
 8002b08:	20000a6c 	.word	0x20000a6c
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	20000a70 	.word	0x20000a70

08002b14 <_sbrk_r>:
#include "common.h"

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8002b14:	b508      	push	{r3, lr}
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;
  
  if (heap_end == 0)
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <_sbrk_r+0x28>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	b90a      	cbnz	r2, 8002b20 <_sbrk_r+0xc>
    heap_end = &end;
 8002b1c:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <_sbrk_r+0x2c>)
 8002b1e:	601a      	str	r2, [r3, #0]
  
  prev_heap_end = heap_end;
 8002b20:	6818      	ldr	r0, [r3, #0]
  if (heap_end + incr > stack_ptr)
 8002b22:	466a      	mov	r2, sp
 8002b24:	4401      	add	r1, r0
 8002b26:	4291      	cmp	r1, r2
 8002b28:	d906      	bls.n	8002b38 <_sbrk_r+0x24>
    {
      //_Error_Handler(__FILE__, __LINE__);
      //              write(1, "Heap and stack collision\n", 25);
      //              abort();
      errno = ENOMEM;
 8002b2a:	f000 fc67 	bl	80033fc <__errno>
 8002b2e:	230c      	movs	r3, #12
 8002b30:	6003      	str	r3, [r0, #0]
 8002b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  
  heap_end += incr;
  
  return (caddr_t) prev_heap_end;
}
 8002b36:	bd08      	pop	{r3, pc}
  heap_end += incr;
 8002b38:	6019      	str	r1, [r3, #0]
  return (caddr_t) prev_heap_end;
 8002b3a:	e7fc      	b.n	8002b36 <_sbrk_r+0x22>
 8002b3c:	20000a74 	.word	0x20000a74
 8002b40:	20000c10 	.word	0x20000c10

08002b44 <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
  return 0;
}
 8002b44:	2000      	movs	r0, #0
 8002b46:	4770      	bx	lr

08002b48 <_fstat_r>:
{

  /* Pretend everything is a character special file, so that we don't
   * allocate buffers. 
   */
   st->st_mode = S_IFCHR;
 8002b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4c:	6053      	str	r3, [r2, #4]
   return 0;
}
 8002b4e:	2000      	movs	r0, #0
 8002b50:	4770      	bx	lr

08002b52 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file) __attribute__((used));

int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002b52:	2001      	movs	r0, #1
 8002b54:	4770      	bx	lr

08002b56 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int fd, off_t offset, int whence)
{
  return 0;
}
 8002b56:	2000      	movs	r0, #0
 8002b58:	4770      	bx	lr

08002b5a <_read_r>:
ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len )
{
 8002b5a:	4611      	mov	r1, r2
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f7fe ba1c 	b.w	8000f9c <TerminalRead>

08002b64 <_write_r>:
  return count;
}
ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
{
 8002b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  count = len;
  p = ptr;
  while(count != 0) {
    if(*p == '\n') {
      /* XXX handle buffer overflow */
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002b68:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002ba0 <_write_r+0x3c>
{
 8002b6c:	461d      	mov	r5, r3
 8002b6e:	4614      	mov	r4, r2
 8002b70:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8002b72:	42bc      	cmp	r4, r7
 8002b74:	4626      	mov	r6, r4
 8002b76:	d102      	bne.n	8002b7e <_write_r+0x1a>
      Error_Handler();
    }
#endif

  return len;
}
 8002b78:	4628      	mov	r0, r5
 8002b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*p == '\n') {
 8002b7e:	7833      	ldrb	r3, [r6, #0]
 8002b80:	2b0a      	cmp	r3, #10
 8002b82:	f104 0401 	add.w	r4, r4, #1
 8002b86:	d104      	bne.n	8002b92 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_CONSOLE,"\r",1);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe fdf5 	bl	800177c <TerminalOutputBufferWrite.isra.0>
    TerminalOutputBufferWrite(INDEX_CONSOLE,p,1);
 8002b92:	2201      	movs	r2, #1
 8002b94:	4631      	mov	r1, r6
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe fdf0 	bl	800177c <TerminalOutputBufferWrite.isra.0>
    count--;
 8002b9c:	e7e9      	b.n	8002b72 <_write_r+0xe>
 8002b9e:	bf00      	nop
 8002ba0:	08008019 	.word	0x08008019

08002ba4 <_kill>:
}

int _kill(pid_t pid, int sig)
{
  return -1;
}
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba8:	4770      	bx	lr

08002baa <_exit>:

void _exit(int status)
{
  while(1) {}
 8002baa:	e7fe      	b.n	8002baa <_exit>

08002bac <_getpid>:
}

pid_t _getpid(void)
{
  return 0;
}
 8002bac:	2000      	movs	r0, #0
 8002bae:	4770      	bx	lr

08002bb0 <USART2_IRQHandler>:
  isr = uart->SR;
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <USART2_IRQHandler+0xe0>)
 8002bb2:	6819      	ldr	r1, [r3, #0]
  if(isr & USART_SR_RXNE) { 
 8002bb4:	0688      	lsls	r0, r1, #26
#endif
#ifdef STM32G474xx
TERMINAL(CONSOLE, USART3, USART3,"Console")
#endif
#ifdef STM32F411xE
TERMINAL(CONSOLE, USART2, USART2,"Console")
 8002bb6:	b510      	push	{r4, lr}
 8002bb8:	d50d      	bpl.n	8002bd6 <USART2_IRQHandler+0x26>
    c = uart->DR;
 8002bba:	6858      	ldr	r0, [r3, #4]
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <USART2_IRQHandler+0xe4>)
 8002bbe:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	3201      	adds	r2, #1
 8002bc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002bca:	d339      	bcc.n	8002c40 <USART2_IRQHandler+0x90>
    TerminalState[index].stats.receiveTooBig++;
 8002bcc:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8002bd0:	3201      	adds	r2, #1
 8002bd2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  if(isr & USART_SR_TXE) {
 8002bd6:	060a      	lsls	r2, r1, #24
 8002bd8:	d50a      	bpl.n	8002bf0 <USART2_IRQHandler+0x40>
    if(TerminalState[index].outCount == 0) {
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <USART2_IRQHandler+0xe4>)
 8002bdc:	482c      	ldr	r0, [pc, #176]	; (8002c90 <USART2_IRQHandler+0xe0>)
 8002bde:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8002be2:	b292      	uxth	r2, r2
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d140      	bne.n	8002c6a <USART2_IRQHandler+0xba>
      uart->CR1 &= ~(USART_CR1_TXEIE);
 8002be8:	68c3      	ldr	r3, [r0, #12]
 8002bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bee:	60c3      	str	r3, [r0, #12]
  if(isr & USART_SR_TC) {
 8002bf0:	064b      	lsls	r3, r1, #25
    uart->CR1 &= ~(USART_CR1_TCIE);
 8002bf2:	bf41      	itttt	mi
 8002bf4:	4a26      	ldrmi	r2, [pc, #152]	; (8002c90 <USART2_IRQHandler+0xe0>)
 8002bf6:	68d3      	ldrmi	r3, [r2, #12]
 8002bf8:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8002bfc:	60d3      	strmi	r3, [r2, #12]
  if(isr & USART_SR_PE) {
 8002bfe:	07cc      	lsls	r4, r1, #31
    TerminalState[index].stats.parityError++;
 8002c00:	bf41      	itttt	mi
 8002c02:	4a24      	ldrmi	r2, [pc, #144]	; (8002c94 <USART2_IRQHandler+0xe4>)
 8002c04:	f8d2 3830 	ldrmi.w	r3, [r2, #2096]	; 0x830
 8002c08:	3301      	addmi	r3, #1
 8002c0a:	f8c2 3830 	strmi.w	r3, [r2, #2096]	; 0x830
  if(isr & USART_SR_FE) {
 8002c0e:	0788      	lsls	r0, r1, #30
    TerminalState[index].stats.framingError++;
 8002c10:	bf41      	itttt	mi
 8002c12:	4a20      	ldrmi	r2, [pc, #128]	; (8002c94 <USART2_IRQHandler+0xe4>)
 8002c14:	f8d2 382c 	ldrmi.w	r3, [r2, #2092]	; 0x82c
 8002c18:	3301      	addmi	r3, #1
 8002c1a:	f8c2 382c 	strmi.w	r3, [r2, #2092]	; 0x82c
  if(isr & USART_SR_NE) {
 8002c1e:	074a      	lsls	r2, r1, #29
    TerminalState[index].stats.noiseError++;
 8002c20:	bf41      	itttt	mi
 8002c22:	4a1c      	ldrmi	r2, [pc, #112]	; (8002c94 <USART2_IRQHandler+0xe4>)
 8002c24:	f8d2 3828 	ldrmi.w	r3, [r2, #2088]	; 0x828
 8002c28:	3301      	addmi	r3, #1
 8002c2a:	f8c2 3828 	strmi.w	r3, [r2, #2088]	; 0x828
  if(isr & USART_SR_ORE) {
 8002c2e:	070b      	lsls	r3, r1, #28
    TerminalState[index].stats.overrunError++;
 8002c30:	bf41      	itttt	mi
 8002c32:	4a18      	ldrmi	r2, [pc, #96]	; (8002c94 <USART2_IRQHandler+0xe4>)
 8002c34:	f8d2 3824 	ldrmi.w	r3, [r2, #2084]	; 0x824
 8002c38:	3301      	addmi	r3, #1
 8002c3a:	f8c2 3824 	strmi.w	r3, [r2, #2084]	; 0x824
 8002c3e:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8002c40:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
 8002c44:	3201      	adds	r2, #1
 8002c46:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
    head = TerminalState[index].inHead;
 8002c4a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002c4e:	b292      	uxth	r2, r2
    c = uart->DR;
 8002c50:	5498      	strb	r0, [r3, r2]
    TerminalState[index].inHead = TERMINALINCR(head);
 8002c52:	3201      	adds	r2, #1
 8002c54:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c58:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    TerminalState[index].inCount++;
 8002c5c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002c60:	3201      	adds	r2, #1
 8002c62:	b292      	uxth	r2, r2
 8002c64:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002c68:	e7b5      	b.n	8002bd6 <USART2_IRQHandler+0x26>
      tail = TerminalState[index].outTail;
 8002c6a:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
      c = TerminalState[index].outBuffer[tail];
 8002c6e:	fa13 f482 	uxtah	r4, r3, r2
      tail = TERMINALINCR(tail);
 8002c72:	3201      	adds	r2, #1
      uart->DR = c;
 8002c74:	f894 4406 	ldrb.w	r4, [r4, #1030]	; 0x406
 8002c78:	6044      	str	r4, [r0, #4]
      TerminalState[index].outCount--;
 8002c7a:	f8b3 080a 	ldrh.w	r0, [r3, #2058]	; 0x80a
 8002c7e:	3801      	subs	r0, #1
 8002c80:	b280      	uxth	r0, r0
      TerminalState[index].outTail = tail;
 8002c82:	f3c2 0209 	ubfx	r2, r2, #0, #10
      TerminalState[index].outCount--;
 8002c86:	f8a3 080a 	strh.w	r0, [r3, #2058]	; 0x80a
      TerminalState[index].outTail = tail;
 8002c8a:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8002c8e:	e7af      	b.n	8002bf0 <USART2_IRQHandler+0x40>
 8002c90:	40004400 	.word	0x40004400
 8002c94:	20000214 	.word	0x20000214

08002c98 <Default_IRQHandler>:
extern char *InterruptNames[];

/* Provide some diagnostics in the event that an unexpected interrupt
 * occurs */
void Default_IRQHandler(void)
{
 8002c98:	b508      	push	{r3, lr}
  uint32_t irq, irqIndex;
  uint32_t icsr;

  icsr = SCB->ICSR;
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <Default_IRQHandler+0x38>)
  irqIndex = (icsr & 0x3f);
  irq  = irqIndex-16;
  
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002c9c:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <Default_IRQHandler+0x3c>)
  icsr = SCB->ICSR;
 8002c9e:	685c      	ldr	r4, [r3, #4]
  PolledPrintf("%s() entered, this has probably occurred because an \r\n",
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <Default_IRQHandler+0x40>)
 8002ca2:	f7ff fe4f 	bl	8002944 <PolledPrintf>
  irqIndex = (icsr & 0x3f);
 8002ca6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	       __FUNCTION__);
  PolledPrintf("interrupt without a handler was triggered.  The interrupt\r\n");
 8002caa:	480c      	ldr	r0, [pc, #48]	; (8002cdc <Default_IRQHandler+0x44>)
 8002cac:	f7ff fe4a 	bl	8002944 <PolledPrintf>
  PolledPrintf("that has occurred has an index of %ld.\r\n", irq);
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <Default_IRQHandler+0x48>)
 8002cb2:	f1a4 0110 	sub.w	r1, r4, #16
 8002cb6:	f7ff fe45 	bl	8002944 <PolledPrintf>
  PolledPrintf("This is the %s interrupt\r\n",InterruptNames[irqIndex]);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <Default_IRQHandler+0x4c>)
 8002cbc:	480a      	ldr	r0, [pc, #40]	; (8002ce8 <Default_IRQHandler+0x50>)
 8002cbe:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002cc2:	f7ff fe3f 	bl	8002944 <PolledPrintf>
  PolledPrintf("The watchdog will now reset the system.\r\n");
 8002cc6:	4809      	ldr	r0, [pc, #36]	; (8002cec <Default_IRQHandler+0x54>)
 8002cc8:	f7ff fe3c 	bl	8002944 <PolledPrintf>

  /* Eventually the watchdog will reset us */
  while(1) {}
 8002ccc:	e7fe      	b.n	8002ccc <Default_IRQHandler+0x34>
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00
 8002cd4:	08012c8a 	.word	0x08012c8a
 8002cd8:	080079d0 	.word	0x080079d0
 8002cdc:	08007a07 	.word	0x08007a07
 8002ce0:	08007a43 	.word	0x08007a43
 8002ce4:	0800d520 	.word	0x0800d520
 8002ce8:	08007a6c 	.word	0x08007a6c
 8002cec:	08007a87 	.word	0x08007a87

08002cf0 <main>:
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf0:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <main+0x1a8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf2:	4c6a      	ldr	r4, [pc, #424]	; (8002e9c <main+0x1ac>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4e6a      	ldr	r6, [pc, #424]	; (8002ea0 <main+0x1b0>)
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cfc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002d00:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	68e2      	ldr	r2, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002d14:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <main+0x1b4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 8002d1a:	402a      	ands	r2, r5
  reg_value  =  (reg_value                                   |
 8002d1c:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8002d1e:	60e3      	str	r3, [r4, #12]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d20:	2000      	movs	r0, #0
 8002d22:	b093      	sub	sp, #76	; 0x4c
 8002d24:	f7fe fd02 	bl	800172c <HAL_InitTick.isra.0>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <main+0x1b8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	920a      	str	r2, [sp, #40]	; 0x28
 8002d2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d30:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002d34:	6459      	str	r1, [r3, #68]	; 0x44
 8002d36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d38:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002d3c:	910a      	str	r1, [sp, #40]	; 0x28
 8002d3e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	9209      	str	r2, [sp, #36]	; 0x24
 8002d42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d44:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d48:	6419      	str	r1, [r3, #64]	; 0x40
 8002d4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d4c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002d50:	9109      	str	r1, [sp, #36]	; 0x24
 8002d52:	9909      	ldr	r1, [sp, #36]	; 0x24
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	68e0      	ldr	r0, [r4, #12]
  reg_value  =  (reg_value                                   |
 8002d56:	4955      	ldr	r1, [pc, #340]	; (8002eac <main+0x1bc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d58:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 8002d5a:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 8002d5c:	60e1      	str	r1, [r4, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	9208      	str	r2, [sp, #32]
 8002d60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d62:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d66:	6419      	str	r1, [r3, #64]	; 0x40
 8002d68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d6a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002d6e:	9108      	str	r1, [sp, #32]
 8002d70:	9908      	ldr	r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d72:	9207      	str	r2, [sp, #28]
 8002d74:	4a4e      	ldr	r2, [pc, #312]	; (8002eb0 <main+0x1c0>)
 8002d76:	6811      	ldr	r1, [r2, #0]
 8002d78:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002d7c:	6011      	str	r1, [r2, #0]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002d84:	9207      	str	r2, [sp, #28]
 8002d86:	9a07      	ldr	r2, [sp, #28]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	f002 020c 	and.w	r2, r2, #12
 8002d8e:	2a04      	cmp	r2, #4
 8002d90:	d007      	beq.n	8002da2 <main+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d98:	2a08      	cmp	r2, #8
 8002d9a:	d13c      	bne.n	8002e16 <main+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	0254      	lsls	r4, r2, #9
 8002da0:	d539      	bpl.n	8002e16 <main+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <main+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <main+0x1c4>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
  return uwTick;
 8002dae:	6831      	ldr	r1, [r6, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <main+0x1b8>)
 8002db2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002db4:	0792      	lsls	r2, r2, #30
 8002db6:	d541      	bpl.n	8002e3c <main+0x14c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	f002 020c 	and.w	r2, r2, #12
 8002dbe:	2a08      	cmp	r2, #8
 8002dc0:	d04b      	beq.n	8002e5a <main+0x16a>
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <main+0x1c4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60
 8002dc8:	6831      	ldr	r1, [r6, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4a37      	ldr	r2, [pc, #220]	; (8002ea8 <main+0x1b8>)
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	019f      	lsls	r7, r3, #6
 8002dd0:	d439      	bmi.n	8002e46 <main+0x156>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd2:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <main+0x1c8>)
 8002dd4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <main+0x1c4>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	661a      	str	r2, [r3, #96]	; 0x60
 8002ddc:	6831      	ldr	r1, [r6, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <main+0x1b8>)
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	019d      	lsls	r5, r3, #6
 8002de4:	d534      	bpl.n	8002e50 <main+0x160>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <main+0x1a8>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f002 0207 	and.w	r2, r2, #7
 8002dee:	2a02      	cmp	r2, #2
 8002df0:	d949      	bls.n	8002e86 <main+0x196>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df2:	492d      	ldr	r1, [pc, #180]	; (8002ea8 <main+0x1b8>)
 8002df4:	688b      	ldr	r3, [r1, #8]
 8002df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfa:	608b      	str	r3, [r1, #8]
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dfc:	688b      	ldr	r3, [r1, #8]
 8002dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e02:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	688b      	ldr	r3, [r1, #8]
 8002e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0a:	608b      	str	r3, [r1, #8]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	680b      	ldr	r3, [r1, #0]
 8002e0e:	0198      	lsls	r0, r3, #6
 8002e10:	d454      	bmi.n	8002ebc <main+0x1cc>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e12:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <main+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	6831      	ldr	r1, [r6, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <main+0x1b8>)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	0398      	lsls	r0, r3, #14
 8002e2e:	d4ba      	bmi.n	8002da6 <main+0xb6>
 8002e30:	6833      	ldr	r3, [r6, #0]
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e32:	1a5b      	subs	r3, r3, r1
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d9f8      	bls.n	8002e2a <main+0x13a>
 8002e38:	b672      	cpsid	i
 8002e3a:	e7fe      	b.n	8002e3a <main+0x14a>
 8002e3c:	6832      	ldr	r2, [r6, #0]
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3e:	1a52      	subs	r2, r2, r1
 8002e40:	2a02      	cmp	r2, #2
 8002e42:	d9b6      	bls.n	8002db2 <main+0xc2>
 8002e44:	e7f8      	b.n	8002e38 <main+0x148>
 8002e46:	6833      	ldr	r3, [r6, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	1a5b      	subs	r3, r3, r1
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d9be      	bls.n	8002dcc <main+0xdc>
 8002e4e:	e7f3      	b.n	8002e38 <main+0x148>
 8002e50:	6833      	ldr	r3, [r6, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e52:	1a5b      	subs	r3, r3, r1
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d9c3      	bls.n	8002de0 <main+0xf0>
 8002e58:	e7ee      	b.n	8002e38 <main+0x148>
        pll_config = RCC->PLLCFGR;
 8002e5a:	685b      	ldr	r3, [r3, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5c:	025c      	lsls	r4, r3, #9
 8002e5e:	d5eb      	bpl.n	8002e38 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e64:	2a04      	cmp	r2, #4
 8002e66:	d1e7      	bne.n	8002e38 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e68:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002e6c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6e:	f5b2 5fc8 	cmp.w	r2, #6400	; 0x1900
 8002e72:	d1e1      	bne.n	8002e38 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e74:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002e78:	d1de      	bne.n	8002e38 <main+0x148>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e7a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e82:	d1d9      	bne.n	8002e38 <main+0x148>
 8002e84:	e7af      	b.n	8002de6 <main+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	2203      	movs	r2, #3
 8002e88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d1be      	bne.n	8002e12 <main+0x122>
 8002e94:	e7ad      	b.n	8002df2 <main+0x102>
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00
 8002e9c:	e000ed00 	.word	0xe000ed00
 8002ea0:	20000bfc 	.word	0x20000bfc
 8002ea4:	05fa0300 	.word	0x05fa0300
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	05fa0700 	.word	0x05fa0700
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	42470000 	.word	0x42470000
 8002eb8:	04401904 	.word	0x04401904
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebc:	688b      	ldr	r3, [r1, #8]
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	608b      	str	r3, [r1, #8]
 8002ec8:	6832      	ldr	r2, [r6, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f241 3088 	movw	r0, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	688b      	ldr	r3, [r1, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	f040 81ba 	bne.w	800324e <main+0x55e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eda:	4bb1      	ldr	r3, [pc, #708]	; (80031a0 <main+0x4b0>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	0752      	lsls	r2, r2, #29
 8002ee0:	f100 81bb 	bmi.w	800325a <main+0x56a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	688b      	ldr	r3, [r1, #8]
 8002ee6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eee:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef0:	688b      	ldr	r3, [r1, #8]
 8002ef2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ef6:	608b      	str	r3, [r1, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef8:	688b      	ldr	r3, [r1, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	f000 81cf 	beq.w	80032a2 <main+0x5b2>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	f000 81b1 	beq.w	800326c <main+0x57c>
      sysclockfreq = HSI_VALUE;
 8002f0a:	48a6      	ldr	r0, [pc, #664]	; (80031a4 <main+0x4b4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0c:	4da6      	ldr	r5, [pc, #664]	; (80031a8 <main+0x4b8>)
 8002f0e:	4aa7      	ldr	r2, [pc, #668]	; (80031ac <main+0x4bc>)
 8002f10:	68ab      	ldr	r3, [r5, #8]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f12:	4ca7      	ldr	r4, [pc, #668]	; (80031b0 <main+0x4c0>)
  huart2.Init.BaudRate = 115200;
 8002f14:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80031d8 <main+0x4e8>
 8002f18:	f3c3 1303 	ubfx	r3, r3, #4, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	2700      	movs	r7, #0
 8002f1e:	f812 8003 	ldrb.w	r8, [r2, r3]
 8002f22:	4ba4      	ldr	r3, [pc, #656]	; (80031b4 <main+0x4c4>)
 8002f24:	fa20 f808 	lsr.w	r8, r0, r8
 8002f28:	f8c3 8000 	str.w	r8, [r3]
  HAL_InitTick (uwTickPrio);
 8002f2c:	4ba2      	ldr	r3, [pc, #648]	; (80031b8 <main+0x4c8>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f7fe fbfc 	bl	800172c <HAL_InitTick.isra.0>
 8002f34:	e9cd 770f 	strd	r7, r7, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f38:	9706      	str	r7, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3a:	9711      	str	r7, [sp, #68]	; 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f3e:	489f      	ldr	r0, [pc, #636]	; (80031bc <main+0x4cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	632b      	str	r3, [r5, #48]	; 0x30
 8002f46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	9306      	str	r3, [sp, #24]
 8002f4e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f50:	9705      	str	r7, [sp, #20]
 8002f52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	632b      	str	r3, [r5, #48]	; 0x30
 8002f5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	9305      	str	r3, [sp, #20]
 8002f62:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f64:	9704      	str	r7, [sp, #16]
 8002f66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	632b      	str	r3, [r5, #48]	; 0x30
 8002f6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	9304      	str	r3, [sp, #16]
 8002f76:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	9703      	str	r7, [sp, #12]
 8002f7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	632b      	str	r3, [r5, #48]	; 0x30
 8002f82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	9303      	str	r3, [sp, #12]
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f90:	61a3      	str	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f92:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8002f96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f9c:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	f7fe f892 	bl	80010c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f04f 0e20 	mov.w	lr, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002faa:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 8002fac:	4c84      	ldr	r4, [pc, #528]	; (80031c0 <main+0x4d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fae:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	e9cd 770f 	strd	r7, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	f7fe f887 	bl	80010c8 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002fba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fbe:	e9c4 9300 	strd	r9, r3, [r4]
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fc6:	6127      	str	r7, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fca:	e9c4 7702 	strd	r7, r7, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	e9c4 2705 	strd	r2, r7, [r4, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd2:	61e7      	str	r7, [r4, #28]
 8002fd4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8002fd8:	bb33      	cbnz	r3, 8003028 <main+0x338>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fda:	970c      	str	r7, [sp, #48]	; 0x30
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fdc:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fe2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe8:	642b      	str	r3, [r5, #64]	; 0x40
 8002fea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8002ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	970b      	str	r7, [sp, #44]	; 0x2c
 8002ff6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	632b      	str	r3, [r5, #48]	; 0x30
 8002ffe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003000:	920d      	str	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	930b      	str	r3, [sp, #44]	; 0x2c
 8003008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300e:	2503      	movs	r5, #3
 8003010:	2307      	movs	r3, #7
 8003012:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f7fe f857 	bl	80010c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800301a:	4639      	mov	r1, r7
 800301c:	2026      	movs	r0, #38	; 0x26
 800301e:	f7fe f9c9 	bl	80013b4 <HAL_NVIC_SetPriority.constprop.0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <main+0x4d4>)
 8003024:	2240      	movs	r2, #64	; 0x40
 8003026:	605a      	str	r2, [r3, #4]
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	2324      	movs	r3, #36	; 0x24
 800302a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	68e1      	ldr	r1, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003038:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303a:	691a      	ldr	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800303c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003046:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003048:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800304a:	4302      	orrs	r2, r0
 800304c:	6960      	ldr	r0, [r4, #20]
 800304e:	4302      	orrs	r2, r0
 8003050:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003052:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003056:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	69a1      	ldr	r1, [r4, #24]
 8003064:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003068:	430a      	orrs	r2, r1
 800306a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800306c:	4a56      	ldr	r2, [pc, #344]	; (80031c8 <main+0x4d8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <main+0x38c>
 8003072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003076:	4293      	cmp	r3, r2
 8003078:	f040 8115 	bne.w	80032a6 <main+0x5b6>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7fe f80a 	bl	8001094 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003080:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003082:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003088:	e9d4 5700 	ldrd	r5, r7, [r4]
 800308c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003090:	f040 8112 	bne.w	80032b8 <main+0x5c8>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003094:	19fa      	adds	r2, r7, r7
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	415b      	adcs	r3, r3
 800309c:	f7fd fdfc 	bl	8000c98 <__aeabi_uldivmod>
 80030a0:	2164      	movs	r1, #100	; 0x64
 80030a2:	fbb0 f7f1 	udiv	r7, r0, r1
 80030a6:	fb01 0317 	mls	r3, r1, r7, r0
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	3332      	adds	r3, #50	; 0x32
 80030ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	eb02 1207 	add.w	r2, r2, r7, lsl #4
 80030bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c0:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c2:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c4:	692b      	ldr	r3, [r5, #16]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80030c6:	4a41      	ldr	r2, [pc, #260]	; (80031cc <main+0x4dc>)
  hiwdg.Instance = IWDG;
 80030c8:	4f41      	ldr	r7, [pc, #260]	; (80031d0 <main+0x4e0>)
 80030ca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030ce:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d0:	696b      	ldr	r3, [r5, #20]
 80030d2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80030d6:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80030d8:	68eb      	ldr	r3, [r5, #12]
 80030da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030de:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	6423      	str	r3, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030e4:	2320      	movs	r3, #32
 80030e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80030ea:	2104      	movs	r1, #4
  huart->RxState = HAL_UART_STATE_READY;
 80030ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  __HAL_IWDG_START(hiwdg);
 80030f0:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  hiwdg.Init.Reload = 4095;
 80030f4:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80030f8:	e9c7 2100 	strd	r2, r1, [r7]
  hiwdg.Init.Reload = 4095;
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	6010      	str	r0, [r2, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003100:	f245 5055 	movw	r0, #21845	; 0x5555
 8003104:	6010      	str	r0, [r2, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003106:	6051      	str	r1, [r2, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003108:	6093      	str	r3, [r2, #8]
 800310a:	6831      	ldr	r1, [r6, #0]
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800310c:	68d3      	ldr	r3, [r2, #12]
 800310e:	f013 0303 	ands.w	r3, r3, #3
 8003112:	f040 80e1 	bne.w	80032d8 <main+0x5e8>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003116:	4c2f      	ldr	r4, [pc, #188]	; (80031d4 <main+0x4e4>)
 8003118:	6820      	ldr	r0, [r4, #0]
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800311a:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 800311e:	6011      	str	r1, [r2, #0]
 8003120:	6840      	ldr	r0, [r0, #4]
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	2202      	movs	r2, #2
 8003128:	f000 fe04 	bl	8003d34 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	9b01      	ldr	r3, [sp, #4]
 8003130:	6880      	ldr	r0, [r0, #8]
 8003132:	4619      	mov	r1, r3
 8003134:	2202      	movs	r2, #2
 8003136:	f000 fdfd 	bl	8003d34 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800313a:	6820      	ldr	r0, [r4, #0]
 800313c:	9b01      	ldr	r3, [sp, #4]
 800313e:	68c0      	ldr	r0, [r0, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	4619      	mov	r1, r3
 8003144:	f000 fdf6 	bl	8003d34 <setvbuf>
    uart->CR1 |= USART_CR1_RXNEIE | USART_CR1_PEIE;
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <main+0x4e8>)
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003150:	60da      	str	r2, [r3, #12]
    uart->CR3 |= USART_CR3_EIE;
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	615a      	str	r2, [r3, #20]
void WDTCheckReset(void)
{
  uint32_t csr;

  /* Read the RCC Control Staus Register */
  csr = RCC->CSR;
 800315a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800315e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  if(csr & 0xfe000000) {
 8003160:	f014 4f7e 	tst.w	r4, #4261412864	; 0xfe000000
 8003164:	d050      	beq.n	8003208 <main+0x518>
    /* There is at least one reset source */
    printf("\nProcessor reset detected from the following source(s):\n");
 8003166:	481d      	ldr	r0, [pc, #116]	; (80031dc <main+0x4ec>)
 8003168:	f003 f85c 	bl	8006224 <puts>
	printf("\t" msg "\n");				\
      }							\
    } while(0)
    
#ifdef RCC_CSR_LPWRRSTF
    CHECK_FLAG(RCC_CSR_LPWRRSTF, "Low Power");
 800316c:	2c00      	cmp	r4, #0
 800316e:	da02      	bge.n	8003176 <main+0x486>
 8003170:	481b      	ldr	r0, [pc, #108]	; (80031e0 <main+0x4f0>)
 8003172:	f003 f857 	bl	8006224 <puts>
#endif
#ifdef RCC_CSR_WWDGRSTF
    CHECK_FLAG(RCC_CSR_WWDGRSTF, "Windowed Watchdog");
 8003176:	0066      	lsls	r6, r4, #1
 8003178:	d502      	bpl.n	8003180 <main+0x490>
 800317a:	481a      	ldr	r0, [pc, #104]	; (80031e4 <main+0x4f4>)
 800317c:	f003 f852 	bl	8006224 <puts>
#endif
#ifdef RCC_CSR_IWDGRSTF
    CHECK_FLAG(RCC_CSR_IWDGRSTF, "Independent Windowed Watchdog");
 8003180:	00a5      	lsls	r5, r4, #2
 8003182:	d502      	bpl.n	800318a <main+0x49a>
 8003184:	4818      	ldr	r0, [pc, #96]	; (80031e8 <main+0x4f8>)
 8003186:	f003 f84d 	bl	8006224 <puts>
#endif
#ifdef RCC_CSR_SFTRSTF
    CHECK_FLAG(RCC_CSR_SFTRSTF,  "Software");
 800318a:	00e0      	lsls	r0, r4, #3
 800318c:	d502      	bpl.n	8003194 <main+0x4a4>
 800318e:	4817      	ldr	r0, [pc, #92]	; (80031ec <main+0x4fc>)
 8003190:	f003 f848 	bl	8006224 <puts>
#endif
#ifdef RCC_CSR_BORRSTF
    CHECK_FLAG(RCC_CSR_BORRSTF,  "Brownout");
 8003194:	01a1      	lsls	r1, r4, #6
 8003196:	d52d      	bpl.n	80031f4 <main+0x504>
 8003198:	4815      	ldr	r0, [pc, #84]	; (80031f0 <main+0x500>)
 800319a:	f003 f843 	bl	8006224 <puts>
 800319e:	e029      	b.n	80031f4 <main+0x504>
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	40023800 	.word	0x40023800
 80031ac:	0800aa78 	.word	0x0800aa78
 80031b0:	40020000 	.word	0x40020000
 80031b4:	20000004 	.word	0x20000004
 80031b8:	20000014 	.word	0x20000014
 80031bc:	40020800 	.word	0x40020800
 80031c0:	20000a84 	.word	0x20000a84
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40003000 	.word	0x40003000
 80031d0:	20000a78 	.word	0x20000a78
 80031d4:	20000018 	.word	0x20000018
 80031d8:	40004400 	.word	0x40004400
 80031dc:	08007ab1 	.word	0x08007ab1
 80031e0:	08007ae9 	.word	0x08007ae9
 80031e4:	08007af4 	.word	0x08007af4
 80031e8:	08007b07 	.word	0x08007b07
 80031ec:	08007b26 	.word	0x08007b26
 80031f0:	08007b30 	.word	0x08007b30
#endif
#ifdef RCC_CSR_PINRSTF
    CHECK_FLAG(RCC_CSR_PINRSTF,  "NRST Pin");
 80031f4:	0162      	lsls	r2, r4, #5
 80031f6:	d502      	bpl.n	80031fe <main+0x50e>
 80031f8:	484f      	ldr	r0, [pc, #316]	; (8003338 <main+0x648>)
 80031fa:	f003 f813 	bl	8006224 <puts>
#endif
#ifdef RCC_CSR_OBLRSTF
    CHECK_FLAG(RCC_CSR_OBLRSTF,  "Option Byte Loader");
#endif
#ifdef RCC_CSR_PORRSTF
    CHECK_FLAG(RCC_CSR_PORRSTF,  "Power On");
 80031fe:	0123      	lsls	r3, r4, #4
 8003200:	d502      	bpl.n	8003208 <main+0x518>
 8003202:	484e      	ldr	r0, [pc, #312]	; (800333c <main+0x64c>)
 8003204:	f003 f80e 	bl	8006224 <puts>
#endif
#undef CHECK_FLAG
  }

  /* Clear all reset source indications */
  RCC->CSR = RCC_CSR_RMVF;
 8003208:	4b4d      	ldr	r3, [pc, #308]	; (8003340 <main+0x650>)
 800320a:	4d4e      	ldr	r5, [pc, #312]	; (8003344 <main+0x654>)
  p = _tasktable_start;
 800320c:	4c4e      	ldr	r4, [pc, #312]	; (8003348 <main+0x658>)
  while(p != _tasktable_end) {
 800320e:	4e4f      	ldr	r6, [pc, #316]	; (800334c <main+0x65c>)
 8003210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003214:	675a      	str	r2, [r3, #116]	; 0x74
    s->interval = 0;    /* Expire all task intervals */
 8003216:	f04f 0800 	mov.w	r8, #0
  while(p != _tasktable_end) {
 800321a:	42b4      	cmp	r4, r6
 800321c:	d167      	bne.n	80032ee <main+0x5fe>
  my_Init();
 800321e:	f7fc fff5 	bl	800020c <my_Init>
  ticks = AccumTicks;
 8003222:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800335c <main+0x66c>
  AccumTicks = 0;
 8003226:	f04f 0a00 	mov.w	sl, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800322a:	f64a 29aa 	movw	r9, #43690	; 0xaaaa
 800322e:	b672      	cpsid	i
  ticks = AccumTicks;
 8003230:	f8d8 b000 	ldr.w	fp, [r8]
  AccumTicks = 0;
 8003234:	f8c8 a000 	str.w	sl, [r8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003238:	b662      	cpsie	i
  s = _taskstate_start;
 800323a:	4d42      	ldr	r5, [pc, #264]	; (8003344 <main+0x654>)
  p = _tasktable_start;
 800323c:	4c42      	ldr	r4, [pc, #264]	; (8003348 <main+0x658>)
  while(p != _tasktable_end) {
 800323e:	42b4      	cmp	r4, r6
 8003240:	d15d      	bne.n	80032fe <main+0x60e>
  my_Loop();
 8003242:	f7fc ffe1 	bl	8000208 <my_Loop>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f8c3 9000 	str.w	r9, [r3]

  /* Return function status */
  return HAL_OK;
 800324c:	e7ef      	b.n	800322e <main+0x53e>
 800324e:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	4283      	cmp	r3, r0
 8003254:	f67f ae3b 	bls.w	8002ece <main+0x1de>
 8003258:	e5db      	b.n	8002e12 <main+0x122>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	2203      	movs	r2, #3
 800325c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4293      	cmp	r3, r2
 8003266:	f47f add4 	bne.w	8002e12 <main+0x122>
 800326a:	e63b      	b.n	8002ee4 <main+0x1f4>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003270:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003272:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003276:	bf14      	ite	ne
 8003278:	4835      	ldrne	r0, [pc, #212]	; (8003350 <main+0x660>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4836      	ldreq	r0, [pc, #216]	; (8003354 <main+0x664>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003280:	bf18      	it	ne
 8003282:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003288:	fba1 0100 	umull	r0, r1, r1, r0
 800328c:	f7fd fd04 	bl	8000c98 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <main+0x650>)
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8003298:	3101      	adds	r1, #1
 800329a:	0049      	lsls	r1, r1, #1
      sysclockfreq = pllvco/pllp;
 800329c:	fbb0 f0f1 	udiv	r0, r0, r1
  return sysclockfreq;
 80032a0:	e634      	b.n	8002f0c <main+0x21c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a2:	482b      	ldr	r0, [pc, #172]	; (8003350 <main+0x660>)
 80032a4:	e632      	b.n	8002f0c <main+0x21c>
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <main+0x650>)
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <main+0x668>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80032b0:	5cd0      	ldrb	r0, [r2, r3]
 80032b2:	fa28 f000 	lsr.w	r0, r8, r0
 80032b6:	e6e3      	b.n	8003080 <main+0x390>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b8:	00ba      	lsls	r2, r7, #2
 80032ba:	0fbb      	lsrs	r3, r7, #30
 80032bc:	f7fd fcec 	bl	8000c98 <__aeabi_uldivmod>
 80032c0:	2264      	movs	r2, #100	; 0x64
 80032c2:	fbb0 f1f2 	udiv	r1, r0, r2
 80032c6:	fb02 0311 	mls	r3, r2, r1, r0
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	3332      	adds	r3, #50	; 0x32
 80032ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80032d6:	e6f4      	b.n	80030c2 <main+0x3d2>
 80032d8:	6833      	ldr	r3, [r6, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80032da:	1a5b      	subs	r3, r3, r1
 80032dc:	2b31      	cmp	r3, #49	; 0x31
 80032de:	f67f af15 	bls.w	800310c <main+0x41c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80032e2:	68d3      	ldr	r3, [r2, #12]
 80032e4:	079b      	lsls	r3, r3, #30
 80032e6:	f43f af11 	beq.w	800310c <main+0x41c>
  __ASM volatile ("cpsid i" : : : "memory");
 80032ea:	b672      	cpsid	i
  while (1)
 80032ec:	e7fe      	b.n	80032ec <main+0x5fc>
    if(p->initFunc != NULL) {
 80032ee:	68a3      	ldr	r3, [r4, #8]
    s->interval = 0;    /* Expire all task intervals */
 80032f0:	f845 8b04 	str.w	r8, [r5], #4
    if(p->initFunc != NULL) {
 80032f4:	b10b      	cbz	r3, 80032fa <main+0x60a>
      p->initFunc(p->data);
 80032f6:	68e0      	ldr	r0, [r4, #12]
 80032f8:	4798      	blx	r3
    p++;
 80032fa:	3418      	adds	r4, #24
    s++;
 80032fc:	e78d      	b.n	800321a <main+0x52a>
    if(p->func != NULL) {
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	b11b      	cbz	r3, 800330a <main+0x61a>
      if(p->interval == 0) {
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	b9b2      	cbnz	r2, 8003334 <main+0x644>
	p->func(p->data);
 8003306:	68e0      	ldr	r0, [r4, #12]
 8003308:	4798      	blx	r3
    p++;
 800330a:	3418      	adds	r4, #24
    s++;
 800330c:	3504      	adds	r5, #4
 800330e:	e796      	b.n	800323e <main+0x54e>
	  if(s->interval) {
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	b953      	cbnz	r3, 800332a <main+0x63a>
	    p->func(p->data);
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	68e0      	ldr	r0, [r4, #12]
 8003318:	9201      	str	r2, [sp, #4]
 800331a:	4798      	blx	r3
	    s->interval = p->interval; /* Reset timer */
 800331c:	6923      	ldr	r3, [r4, #16]
 800331e:	9a01      	ldr	r2, [sp, #4]
 8003320:	602b      	str	r3, [r5, #0]
 8003322:	3a01      	subs	r2, #1
	while(i--) { /* This could be better... if ticks > interval... */
 8003324:	2a00      	cmp	r2, #0
 8003326:	d1f3      	bne.n	8003310 <main+0x620>
 8003328:	e7ef      	b.n	800330a <main+0x61a>
	    s->interval--;
 800332a:	3b01      	subs	r3, #1
 800332c:	602b      	str	r3, [r5, #0]
	  if(s->interval == 0) {
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f7      	bne.n	8003322 <main+0x632>
 8003332:	e7ef      	b.n	8003314 <main+0x624>
 8003334:	465a      	mov	r2, fp
 8003336:	e7f5      	b.n	8003324 <main+0x634>
 8003338:	08007b3a 	.word	0x08007b3a
 800333c:	08007b44 	.word	0x08007b44
 8003340:	40023800 	.word	0x40023800
 8003344:	200001ec 	.word	0x200001ec
 8003348:	08013138 	.word	0x08013138
 800334c:	08013150 	.word	0x08013150
 8003350:	007a1200 	.word	0x007a1200
 8003354:	00f42400 	.word	0x00f42400
 8003358:	0800aa88 	.word	0x0800aa88
 800335c:	2000020c 	.word	0x2000020c

08003360 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <NMI_Handler>

08003362 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003362:	e7fe      	b.n	8003362 <HardFault_Handler>

08003364 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler>

08003366 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <BusFault_Handler>

08003368 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003368:	e7fe      	b.n	8003368 <UsageFault_Handler>

0800336a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800336a:	4770      	bx	lr

0800336c <DebugMon_Handler>:
 800336c:	4770      	bx	lr

0800336e <PendSV_Handler>:
 800336e:	4770      	bx	lr

08003370 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8003370:	4a05      	ldr	r2, [pc, #20]	; (8003388 <SysTick_Handler+0x18>)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003372:	b508      	push	{r3, lr}
 8003374:	6813      	ldr	r3, [r2, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  my_Tick();
 800337a:	f7fc ff3b 	bl	80001f4 <my_Tick>
  AccumTicks++;
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <SysTick_Handler+0x1c>)
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	6013      	str	r3, [r2, #0]
  TaskingTickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8003386:	bd08      	pop	{r3, pc}
 8003388:	20000bfc 	.word	0x20000bfc
 800338c:	2000020c 	.word	0x2000020c

08003390 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003390:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <SystemInit+0x10>)
 8003392:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800339a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033a8:	480d      	ldr	r0, [pc, #52]	; (80033e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033aa:	490e      	ldr	r1, [pc, #56]	; (80033e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033be:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c0:	4c0b      	ldr	r4, [pc, #44]	; (80033f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ce:	f7ff ffdf 	bl	8003390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d2:	f000 f819 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033d6:	f7ff fc8b 	bl	8002cf0 <main>
  bx  lr    
 80033da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80033e8:	08013250 	.word	0x08013250
  ldr r2, =_sbss
 80033ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80033f0:	20000c10 	.word	0x20000c10

080033f4 <ADC_IRQHandler>:
    .global Default_IRQHandler

    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  bl Default_IRQHandler
 80033f4:	f7ff fc50 	bl	8002c98 <Default_IRQHandler>
  b  Infinite_Loop
 80033f8:	e7fc      	b.n	80033f4 <ADC_IRQHandler>
	...

080033fc <__errno>:
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <__errno+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000018 	.word	0x20000018

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f003 fa10 	bl	8006840 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08013248 	.word	0x08013248
 8003444:	08013248 	.word	0x08013248
 8003448:	08013248 	.word	0x08013248
 800344c:	0801324c 	.word	0x0801324c

08003450 <memset>:
 8003450:	4402      	add	r2, r0
 8003452:	4603      	mov	r3, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	f803 1b01 	strb.w	r1, [r3], #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <__cvt>:
 8003460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	ec55 4b10 	vmov	r4, r5, d0
 8003468:	2d00      	cmp	r5, #0
 800346a:	460e      	mov	r6, r1
 800346c:	4619      	mov	r1, r3
 800346e:	462b      	mov	r3, r5
 8003470:	bfbb      	ittet	lt
 8003472:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003476:	461d      	movlt	r5, r3
 8003478:	2300      	movge	r3, #0
 800347a:	232d      	movlt	r3, #45	; 0x2d
 800347c:	700b      	strb	r3, [r1, #0]
 800347e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003480:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003484:	4691      	mov	r9, r2
 8003486:	f023 0820 	bic.w	r8, r3, #32
 800348a:	bfbc      	itt	lt
 800348c:	4622      	movlt	r2, r4
 800348e:	4614      	movlt	r4, r2
 8003490:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003494:	d005      	beq.n	80034a2 <__cvt+0x42>
 8003496:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800349a:	d100      	bne.n	800349e <__cvt+0x3e>
 800349c:	3601      	adds	r6, #1
 800349e:	2102      	movs	r1, #2
 80034a0:	e000      	b.n	80034a4 <__cvt+0x44>
 80034a2:	2103      	movs	r1, #3
 80034a4:	ab03      	add	r3, sp, #12
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	ab02      	add	r3, sp, #8
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	ec45 4b10 	vmov	d0, r4, r5
 80034b0:	4653      	mov	r3, sl
 80034b2:	4632      	mov	r2, r6
 80034b4:	f000 fe88 	bl	80041c8 <_dtoa_r>
 80034b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034bc:	4607      	mov	r7, r0
 80034be:	d102      	bne.n	80034c6 <__cvt+0x66>
 80034c0:	f019 0f01 	tst.w	r9, #1
 80034c4:	d022      	beq.n	800350c <__cvt+0xac>
 80034c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034ca:	eb07 0906 	add.w	r9, r7, r6
 80034ce:	d110      	bne.n	80034f2 <__cvt+0x92>
 80034d0:	783b      	ldrb	r3, [r7, #0]
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d10a      	bne.n	80034ec <__cvt+0x8c>
 80034d6:	2200      	movs	r2, #0
 80034d8:	2300      	movs	r3, #0
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fd fb1b 	bl	8000b18 <__aeabi_dcmpeq>
 80034e2:	b918      	cbnz	r0, 80034ec <__cvt+0x8c>
 80034e4:	f1c6 0601 	rsb	r6, r6, #1
 80034e8:	f8ca 6000 	str.w	r6, [sl]
 80034ec:	f8da 3000 	ldr.w	r3, [sl]
 80034f0:	4499      	add	r9, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	2300      	movs	r3, #0
 80034f6:	4620      	mov	r0, r4
 80034f8:	4629      	mov	r1, r5
 80034fa:	f7fd fb0d 	bl	8000b18 <__aeabi_dcmpeq>
 80034fe:	b108      	cbz	r0, 8003504 <__cvt+0xa4>
 8003500:	f8cd 900c 	str.w	r9, [sp, #12]
 8003504:	2230      	movs	r2, #48	; 0x30
 8003506:	9b03      	ldr	r3, [sp, #12]
 8003508:	454b      	cmp	r3, r9
 800350a:	d307      	bcc.n	800351c <__cvt+0xbc>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003510:	1bdb      	subs	r3, r3, r7
 8003512:	4638      	mov	r0, r7
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	b004      	add	sp, #16
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	1c59      	adds	r1, r3, #1
 800351e:	9103      	str	r1, [sp, #12]
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e7f0      	b.n	8003506 <__cvt+0xa6>

08003524 <__exponent>:
 8003524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003526:	4603      	mov	r3, r0
 8003528:	2900      	cmp	r1, #0
 800352a:	bfb8      	it	lt
 800352c:	4249      	neglt	r1, r1
 800352e:	f803 2b02 	strb.w	r2, [r3], #2
 8003532:	bfb4      	ite	lt
 8003534:	222d      	movlt	r2, #45	; 0x2d
 8003536:	222b      	movge	r2, #43	; 0x2b
 8003538:	2909      	cmp	r1, #9
 800353a:	7042      	strb	r2, [r0, #1]
 800353c:	dd2a      	ble.n	8003594 <__exponent+0x70>
 800353e:	f10d 0407 	add.w	r4, sp, #7
 8003542:	46a4      	mov	ip, r4
 8003544:	270a      	movs	r7, #10
 8003546:	46a6      	mov	lr, r4
 8003548:	460a      	mov	r2, r1
 800354a:	fb91 f6f7 	sdiv	r6, r1, r7
 800354e:	fb07 1516 	mls	r5, r7, r6, r1
 8003552:	3530      	adds	r5, #48	; 0x30
 8003554:	2a63      	cmp	r2, #99	; 0x63
 8003556:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800355a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800355e:	4631      	mov	r1, r6
 8003560:	dcf1      	bgt.n	8003546 <__exponent+0x22>
 8003562:	3130      	adds	r1, #48	; 0x30
 8003564:	f1ae 0502 	sub.w	r5, lr, #2
 8003568:	f804 1c01 	strb.w	r1, [r4, #-1]
 800356c:	1c44      	adds	r4, r0, #1
 800356e:	4629      	mov	r1, r5
 8003570:	4561      	cmp	r1, ip
 8003572:	d30a      	bcc.n	800358a <__exponent+0x66>
 8003574:	f10d 0209 	add.w	r2, sp, #9
 8003578:	eba2 020e 	sub.w	r2, r2, lr
 800357c:	4565      	cmp	r5, ip
 800357e:	bf88      	it	hi
 8003580:	2200      	movhi	r2, #0
 8003582:	4413      	add	r3, r2
 8003584:	1a18      	subs	r0, r3, r0
 8003586:	b003      	add	sp, #12
 8003588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800358e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003592:	e7ed      	b.n	8003570 <__exponent+0x4c>
 8003594:	2330      	movs	r3, #48	; 0x30
 8003596:	3130      	adds	r1, #48	; 0x30
 8003598:	7083      	strb	r3, [r0, #2]
 800359a:	70c1      	strb	r1, [r0, #3]
 800359c:	1d03      	adds	r3, r0, #4
 800359e:	e7f1      	b.n	8003584 <__exponent+0x60>

080035a0 <_printf_float>:
 80035a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	ed2d 8b02 	vpush	{d8}
 80035a8:	b08d      	sub	sp, #52	; 0x34
 80035aa:	460c      	mov	r4, r1
 80035ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80035b0:	4616      	mov	r6, r2
 80035b2:	461f      	mov	r7, r3
 80035b4:	4605      	mov	r5, r0
 80035b6:	f001 fdbf 	bl	8005138 <_localeconv_r>
 80035ba:	f8d0 a000 	ldr.w	sl, [r0]
 80035be:	4650      	mov	r0, sl
 80035c0:	f7fc fe28 	bl	8000214 <strlen>
 80035c4:	2300      	movs	r3, #0
 80035c6:	930a      	str	r3, [sp, #40]	; 0x28
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	9305      	str	r3, [sp, #20]
 80035cc:	f8d8 3000 	ldr.w	r3, [r8]
 80035d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80035d4:	3307      	adds	r3, #7
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	f103 0208 	add.w	r2, r3, #8
 80035de:	f8c8 2000 	str.w	r2, [r8]
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80035ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80035f2:	9307      	str	r3, [sp, #28]
 80035f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80035f8:	ee08 0a10 	vmov	s16, r0
 80035fc:	4b9f      	ldr	r3, [pc, #636]	; (800387c <_printf_float+0x2dc>)
 80035fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003606:	f7fd fab9 	bl	8000b7c <__aeabi_dcmpun>
 800360a:	bb88      	cbnz	r0, 8003670 <_printf_float+0xd0>
 800360c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003610:	4b9a      	ldr	r3, [pc, #616]	; (800387c <_printf_float+0x2dc>)
 8003612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003616:	f7fd fa93 	bl	8000b40 <__aeabi_dcmple>
 800361a:	bb48      	cbnz	r0, 8003670 <_printf_float+0xd0>
 800361c:	2200      	movs	r2, #0
 800361e:	2300      	movs	r3, #0
 8003620:	4640      	mov	r0, r8
 8003622:	4649      	mov	r1, r9
 8003624:	f7fd fa82 	bl	8000b2c <__aeabi_dcmplt>
 8003628:	b110      	cbz	r0, 8003630 <_printf_float+0x90>
 800362a:	232d      	movs	r3, #45	; 0x2d
 800362c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003630:	4b93      	ldr	r3, [pc, #588]	; (8003880 <_printf_float+0x2e0>)
 8003632:	4894      	ldr	r0, [pc, #592]	; (8003884 <_printf_float+0x2e4>)
 8003634:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003638:	bf94      	ite	ls
 800363a:	4698      	movls	r8, r3
 800363c:	4680      	movhi	r8, r0
 800363e:	2303      	movs	r3, #3
 8003640:	6123      	str	r3, [r4, #16]
 8003642:	9b05      	ldr	r3, [sp, #20]
 8003644:	f023 0204 	bic.w	r2, r3, #4
 8003648:	6022      	str	r2, [r4, #0]
 800364a:	f04f 0900 	mov.w	r9, #0
 800364e:	9700      	str	r7, [sp, #0]
 8003650:	4633      	mov	r3, r6
 8003652:	aa0b      	add	r2, sp, #44	; 0x2c
 8003654:	4621      	mov	r1, r4
 8003656:	4628      	mov	r0, r5
 8003658:	f000 f9d8 	bl	8003a0c <_printf_common>
 800365c:	3001      	adds	r0, #1
 800365e:	f040 8090 	bne.w	8003782 <_printf_float+0x1e2>
 8003662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003666:	b00d      	add	sp, #52	; 0x34
 8003668:	ecbd 8b02 	vpop	{d8}
 800366c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	4640      	mov	r0, r8
 8003676:	4649      	mov	r1, r9
 8003678:	f7fd fa80 	bl	8000b7c <__aeabi_dcmpun>
 800367c:	b140      	cbz	r0, 8003690 <_printf_float+0xf0>
 800367e:	464b      	mov	r3, r9
 8003680:	2b00      	cmp	r3, #0
 8003682:	bfbc      	itt	lt
 8003684:	232d      	movlt	r3, #45	; 0x2d
 8003686:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800368a:	487f      	ldr	r0, [pc, #508]	; (8003888 <_printf_float+0x2e8>)
 800368c:	4b7f      	ldr	r3, [pc, #508]	; (800388c <_printf_float+0x2ec>)
 800368e:	e7d1      	b.n	8003634 <_printf_float+0x94>
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003696:	9206      	str	r2, [sp, #24]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	d13f      	bne.n	800371c <_printf_float+0x17c>
 800369c:	2306      	movs	r3, #6
 800369e:	6063      	str	r3, [r4, #4]
 80036a0:	9b05      	ldr	r3, [sp, #20]
 80036a2:	6861      	ldr	r1, [r4, #4]
 80036a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036a8:	2300      	movs	r3, #0
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	ab0a      	add	r3, sp, #40	; 0x28
 80036ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80036b2:	ab09      	add	r3, sp, #36	; 0x24
 80036b4:	ec49 8b10 	vmov	d0, r8, r9
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6022      	str	r2, [r4, #0]
 80036bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80036c0:	4628      	mov	r0, r5
 80036c2:	f7ff fecd 	bl	8003460 <__cvt>
 80036c6:	9b06      	ldr	r3, [sp, #24]
 80036c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036ca:	2b47      	cmp	r3, #71	; 0x47
 80036cc:	4680      	mov	r8, r0
 80036ce:	d108      	bne.n	80036e2 <_printf_float+0x142>
 80036d0:	1cc8      	adds	r0, r1, #3
 80036d2:	db02      	blt.n	80036da <_printf_float+0x13a>
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	4299      	cmp	r1, r3
 80036d8:	dd41      	ble.n	800375e <_printf_float+0x1be>
 80036da:	f1ab 0b02 	sub.w	fp, fp, #2
 80036de:	fa5f fb8b 	uxtb.w	fp, fp
 80036e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80036e6:	d820      	bhi.n	800372a <_printf_float+0x18a>
 80036e8:	3901      	subs	r1, #1
 80036ea:	465a      	mov	r2, fp
 80036ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80036f0:	9109      	str	r1, [sp, #36]	; 0x24
 80036f2:	f7ff ff17 	bl	8003524 <__exponent>
 80036f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036f8:	1813      	adds	r3, r2, r0
 80036fa:	2a01      	cmp	r2, #1
 80036fc:	4681      	mov	r9, r0
 80036fe:	6123      	str	r3, [r4, #16]
 8003700:	dc02      	bgt.n	8003708 <_printf_float+0x168>
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	07d2      	lsls	r2, r2, #31
 8003706:	d501      	bpl.n	800370c <_printf_float+0x16c>
 8003708:	3301      	adds	r3, #1
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003710:	2b00      	cmp	r3, #0
 8003712:	d09c      	beq.n	800364e <_printf_float+0xae>
 8003714:	232d      	movs	r3, #45	; 0x2d
 8003716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800371a:	e798      	b.n	800364e <_printf_float+0xae>
 800371c:	9a06      	ldr	r2, [sp, #24]
 800371e:	2a47      	cmp	r2, #71	; 0x47
 8003720:	d1be      	bne.n	80036a0 <_printf_float+0x100>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1bc      	bne.n	80036a0 <_printf_float+0x100>
 8003726:	2301      	movs	r3, #1
 8003728:	e7b9      	b.n	800369e <_printf_float+0xfe>
 800372a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800372e:	d118      	bne.n	8003762 <_printf_float+0x1c2>
 8003730:	2900      	cmp	r1, #0
 8003732:	6863      	ldr	r3, [r4, #4]
 8003734:	dd0b      	ble.n	800374e <_printf_float+0x1ae>
 8003736:	6121      	str	r1, [r4, #16]
 8003738:	b913      	cbnz	r3, 8003740 <_printf_float+0x1a0>
 800373a:	6822      	ldr	r2, [r4, #0]
 800373c:	07d0      	lsls	r0, r2, #31
 800373e:	d502      	bpl.n	8003746 <_printf_float+0x1a6>
 8003740:	3301      	adds	r3, #1
 8003742:	440b      	add	r3, r1
 8003744:	6123      	str	r3, [r4, #16]
 8003746:	65a1      	str	r1, [r4, #88]	; 0x58
 8003748:	f04f 0900 	mov.w	r9, #0
 800374c:	e7de      	b.n	800370c <_printf_float+0x16c>
 800374e:	b913      	cbnz	r3, 8003756 <_printf_float+0x1b6>
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	07d2      	lsls	r2, r2, #31
 8003754:	d501      	bpl.n	800375a <_printf_float+0x1ba>
 8003756:	3302      	adds	r3, #2
 8003758:	e7f4      	b.n	8003744 <_printf_float+0x1a4>
 800375a:	2301      	movs	r3, #1
 800375c:	e7f2      	b.n	8003744 <_printf_float+0x1a4>
 800375e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003764:	4299      	cmp	r1, r3
 8003766:	db05      	blt.n	8003774 <_printf_float+0x1d4>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	6121      	str	r1, [r4, #16]
 800376c:	07d8      	lsls	r0, r3, #31
 800376e:	d5ea      	bpl.n	8003746 <_printf_float+0x1a6>
 8003770:	1c4b      	adds	r3, r1, #1
 8003772:	e7e7      	b.n	8003744 <_printf_float+0x1a4>
 8003774:	2900      	cmp	r1, #0
 8003776:	bfd4      	ite	le
 8003778:	f1c1 0202 	rsble	r2, r1, #2
 800377c:	2201      	movgt	r2, #1
 800377e:	4413      	add	r3, r2
 8003780:	e7e0      	b.n	8003744 <_printf_float+0x1a4>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	055a      	lsls	r2, r3, #21
 8003786:	d407      	bmi.n	8003798 <_printf_float+0x1f8>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	4642      	mov	r2, r8
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	47b8      	blx	r7
 8003792:	3001      	adds	r0, #1
 8003794:	d12c      	bne.n	80037f0 <_printf_float+0x250>
 8003796:	e764      	b.n	8003662 <_printf_float+0xc2>
 8003798:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800379c:	f240 80e0 	bls.w	8003960 <_printf_float+0x3c0>
 80037a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	f7fd f9b6 	bl	8000b18 <__aeabi_dcmpeq>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d034      	beq.n	800381a <_printf_float+0x27a>
 80037b0:	4a37      	ldr	r2, [pc, #220]	; (8003890 <_printf_float+0x2f0>)
 80037b2:	2301      	movs	r3, #1
 80037b4:	4631      	mov	r1, r6
 80037b6:	4628      	mov	r0, r5
 80037b8:	47b8      	blx	r7
 80037ba:	3001      	adds	r0, #1
 80037bc:	f43f af51 	beq.w	8003662 <_printf_float+0xc2>
 80037c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037c4:	429a      	cmp	r2, r3
 80037c6:	db02      	blt.n	80037ce <_printf_float+0x22e>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	07d8      	lsls	r0, r3, #31
 80037cc:	d510      	bpl.n	80037f0 <_printf_float+0x250>
 80037ce:	ee18 3a10 	vmov	r3, s16
 80037d2:	4652      	mov	r2, sl
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	f43f af41 	beq.w	8003662 <_printf_float+0xc2>
 80037e0:	f04f 0800 	mov.w	r8, #0
 80037e4:	f104 091a 	add.w	r9, r4, #26
 80037e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4543      	cmp	r3, r8
 80037ee:	dc09      	bgt.n	8003804 <_printf_float+0x264>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	079b      	lsls	r3, r3, #30
 80037f4:	f100 8105 	bmi.w	8003a02 <_printf_float+0x462>
 80037f8:	68e0      	ldr	r0, [r4, #12]
 80037fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037fc:	4298      	cmp	r0, r3
 80037fe:	bfb8      	it	lt
 8003800:	4618      	movlt	r0, r3
 8003802:	e730      	b.n	8003666 <_printf_float+0xc6>
 8003804:	2301      	movs	r3, #1
 8003806:	464a      	mov	r2, r9
 8003808:	4631      	mov	r1, r6
 800380a:	4628      	mov	r0, r5
 800380c:	47b8      	blx	r7
 800380e:	3001      	adds	r0, #1
 8003810:	f43f af27 	beq.w	8003662 <_printf_float+0xc2>
 8003814:	f108 0801 	add.w	r8, r8, #1
 8003818:	e7e6      	b.n	80037e8 <_printf_float+0x248>
 800381a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	dc39      	bgt.n	8003894 <_printf_float+0x2f4>
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <_printf_float+0x2f0>)
 8003822:	2301      	movs	r3, #1
 8003824:	4631      	mov	r1, r6
 8003826:	4628      	mov	r0, r5
 8003828:	47b8      	blx	r7
 800382a:	3001      	adds	r0, #1
 800382c:	f43f af19 	beq.w	8003662 <_printf_float+0xc2>
 8003830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003834:	4313      	orrs	r3, r2
 8003836:	d102      	bne.n	800383e <_printf_float+0x29e>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	07d9      	lsls	r1, r3, #31
 800383c:	d5d8      	bpl.n	80037f0 <_printf_float+0x250>
 800383e:	ee18 3a10 	vmov	r3, s16
 8003842:	4652      	mov	r2, sl
 8003844:	4631      	mov	r1, r6
 8003846:	4628      	mov	r0, r5
 8003848:	47b8      	blx	r7
 800384a:	3001      	adds	r0, #1
 800384c:	f43f af09 	beq.w	8003662 <_printf_float+0xc2>
 8003850:	f04f 0900 	mov.w	r9, #0
 8003854:	f104 0a1a 	add.w	sl, r4, #26
 8003858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385a:	425b      	negs	r3, r3
 800385c:	454b      	cmp	r3, r9
 800385e:	dc01      	bgt.n	8003864 <_printf_float+0x2c4>
 8003860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003862:	e792      	b.n	800378a <_printf_float+0x1ea>
 8003864:	2301      	movs	r3, #1
 8003866:	4652      	mov	r2, sl
 8003868:	4631      	mov	r1, r6
 800386a:	4628      	mov	r0, r5
 800386c:	47b8      	blx	r7
 800386e:	3001      	adds	r0, #1
 8003870:	f43f aef7 	beq.w	8003662 <_printf_float+0xc2>
 8003874:	f109 0901 	add.w	r9, r9, #1
 8003878:	e7ee      	b.n	8003858 <_printf_float+0x2b8>
 800387a:	bf00      	nop
 800387c:	7fefffff 	.word	0x7fefffff
 8003880:	08012da4 	.word	0x08012da4
 8003884:	08012da8 	.word	0x08012da8
 8003888:	08012db0 	.word	0x08012db0
 800388c:	08012dac 	.word	0x08012dac
 8003890:	08008d9d 	.word	0x08008d9d
 8003894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003896:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003898:	429a      	cmp	r2, r3
 800389a:	bfa8      	it	ge
 800389c:	461a      	movge	r2, r3
 800389e:	2a00      	cmp	r2, #0
 80038a0:	4691      	mov	r9, r2
 80038a2:	dc37      	bgt.n	8003914 <_printf_float+0x374>
 80038a4:	f04f 0b00 	mov.w	fp, #0
 80038a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038ac:	f104 021a 	add.w	r2, r4, #26
 80038b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038b2:	9305      	str	r3, [sp, #20]
 80038b4:	eba3 0309 	sub.w	r3, r3, r9
 80038b8:	455b      	cmp	r3, fp
 80038ba:	dc33      	bgt.n	8003924 <_printf_float+0x384>
 80038bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038c0:	429a      	cmp	r2, r3
 80038c2:	db3b      	blt.n	800393c <_printf_float+0x39c>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	07da      	lsls	r2, r3, #31
 80038c8:	d438      	bmi.n	800393c <_printf_float+0x39c>
 80038ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038cc:	9a05      	ldr	r2, [sp, #20]
 80038ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038d0:	1a9a      	subs	r2, r3, r2
 80038d2:	eba3 0901 	sub.w	r9, r3, r1
 80038d6:	4591      	cmp	r9, r2
 80038d8:	bfa8      	it	ge
 80038da:	4691      	movge	r9, r2
 80038dc:	f1b9 0f00 	cmp.w	r9, #0
 80038e0:	dc35      	bgt.n	800394e <_printf_float+0x3ae>
 80038e2:	f04f 0800 	mov.w	r8, #0
 80038e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038ea:	f104 0a1a 	add.w	sl, r4, #26
 80038ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	eba3 0309 	sub.w	r3, r3, r9
 80038f8:	4543      	cmp	r3, r8
 80038fa:	f77f af79 	ble.w	80037f0 <_printf_float+0x250>
 80038fe:	2301      	movs	r3, #1
 8003900:	4652      	mov	r2, sl
 8003902:	4631      	mov	r1, r6
 8003904:	4628      	mov	r0, r5
 8003906:	47b8      	blx	r7
 8003908:	3001      	adds	r0, #1
 800390a:	f43f aeaa 	beq.w	8003662 <_printf_float+0xc2>
 800390e:	f108 0801 	add.w	r8, r8, #1
 8003912:	e7ec      	b.n	80038ee <_printf_float+0x34e>
 8003914:	4613      	mov	r3, r2
 8003916:	4631      	mov	r1, r6
 8003918:	4642      	mov	r2, r8
 800391a:	4628      	mov	r0, r5
 800391c:	47b8      	blx	r7
 800391e:	3001      	adds	r0, #1
 8003920:	d1c0      	bne.n	80038a4 <_printf_float+0x304>
 8003922:	e69e      	b.n	8003662 <_printf_float+0xc2>
 8003924:	2301      	movs	r3, #1
 8003926:	4631      	mov	r1, r6
 8003928:	4628      	mov	r0, r5
 800392a:	9205      	str	r2, [sp, #20]
 800392c:	47b8      	blx	r7
 800392e:	3001      	adds	r0, #1
 8003930:	f43f ae97 	beq.w	8003662 <_printf_float+0xc2>
 8003934:	9a05      	ldr	r2, [sp, #20]
 8003936:	f10b 0b01 	add.w	fp, fp, #1
 800393a:	e7b9      	b.n	80038b0 <_printf_float+0x310>
 800393c:	ee18 3a10 	vmov	r3, s16
 8003940:	4652      	mov	r2, sl
 8003942:	4631      	mov	r1, r6
 8003944:	4628      	mov	r0, r5
 8003946:	47b8      	blx	r7
 8003948:	3001      	adds	r0, #1
 800394a:	d1be      	bne.n	80038ca <_printf_float+0x32a>
 800394c:	e689      	b.n	8003662 <_printf_float+0xc2>
 800394e:	9a05      	ldr	r2, [sp, #20]
 8003950:	464b      	mov	r3, r9
 8003952:	4442      	add	r2, r8
 8003954:	4631      	mov	r1, r6
 8003956:	4628      	mov	r0, r5
 8003958:	47b8      	blx	r7
 800395a:	3001      	adds	r0, #1
 800395c:	d1c1      	bne.n	80038e2 <_printf_float+0x342>
 800395e:	e680      	b.n	8003662 <_printf_float+0xc2>
 8003960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003962:	2a01      	cmp	r2, #1
 8003964:	dc01      	bgt.n	800396a <_printf_float+0x3ca>
 8003966:	07db      	lsls	r3, r3, #31
 8003968:	d538      	bpl.n	80039dc <_printf_float+0x43c>
 800396a:	2301      	movs	r3, #1
 800396c:	4642      	mov	r2, r8
 800396e:	4631      	mov	r1, r6
 8003970:	4628      	mov	r0, r5
 8003972:	47b8      	blx	r7
 8003974:	3001      	adds	r0, #1
 8003976:	f43f ae74 	beq.w	8003662 <_printf_float+0xc2>
 800397a:	ee18 3a10 	vmov	r3, s16
 800397e:	4652      	mov	r2, sl
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	f43f ae6b 	beq.w	8003662 <_printf_float+0xc2>
 800398c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003990:	2200      	movs	r2, #0
 8003992:	2300      	movs	r3, #0
 8003994:	f7fd f8c0 	bl	8000b18 <__aeabi_dcmpeq>
 8003998:	b9d8      	cbnz	r0, 80039d2 <_printf_float+0x432>
 800399a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800399c:	f108 0201 	add.w	r2, r8, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	4631      	mov	r1, r6
 80039a4:	4628      	mov	r0, r5
 80039a6:	47b8      	blx	r7
 80039a8:	3001      	adds	r0, #1
 80039aa:	d10e      	bne.n	80039ca <_printf_float+0x42a>
 80039ac:	e659      	b.n	8003662 <_printf_float+0xc2>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4652      	mov	r2, sl
 80039b2:	4631      	mov	r1, r6
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b8      	blx	r7
 80039b8:	3001      	adds	r0, #1
 80039ba:	f43f ae52 	beq.w	8003662 <_printf_float+0xc2>
 80039be:	f108 0801 	add.w	r8, r8, #1
 80039c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4543      	cmp	r3, r8
 80039c8:	dcf1      	bgt.n	80039ae <_printf_float+0x40e>
 80039ca:	464b      	mov	r3, r9
 80039cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039d0:	e6dc      	b.n	800378c <_printf_float+0x1ec>
 80039d2:	f04f 0800 	mov.w	r8, #0
 80039d6:	f104 0a1a 	add.w	sl, r4, #26
 80039da:	e7f2      	b.n	80039c2 <_printf_float+0x422>
 80039dc:	2301      	movs	r3, #1
 80039de:	4642      	mov	r2, r8
 80039e0:	e7df      	b.n	80039a2 <_printf_float+0x402>
 80039e2:	2301      	movs	r3, #1
 80039e4:	464a      	mov	r2, r9
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	f43f ae38 	beq.w	8003662 <_printf_float+0xc2>
 80039f2:	f108 0801 	add.w	r8, r8, #1
 80039f6:	68e3      	ldr	r3, [r4, #12]
 80039f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039fa:	1a5b      	subs	r3, r3, r1
 80039fc:	4543      	cmp	r3, r8
 80039fe:	dcf0      	bgt.n	80039e2 <_printf_float+0x442>
 8003a00:	e6fa      	b.n	80037f8 <_printf_float+0x258>
 8003a02:	f04f 0800 	mov.w	r8, #0
 8003a06:	f104 0919 	add.w	r9, r4, #25
 8003a0a:	e7f4      	b.n	80039f6 <_printf_float+0x456>

08003a0c <_printf_common>:
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	4616      	mov	r6, r2
 8003a12:	4699      	mov	r9, r3
 8003a14:	688a      	ldr	r2, [r1, #8]
 8003a16:	690b      	ldr	r3, [r1, #16]
 8003a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bfb8      	it	lt
 8003a20:	4613      	movlt	r3, r2
 8003a22:	6033      	str	r3, [r6, #0]
 8003a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a28:	4607      	mov	r7, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	b10a      	cbz	r2, 8003a32 <_printf_common+0x26>
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	0699      	lsls	r1, r3, #26
 8003a36:	bf42      	ittt	mi
 8003a38:	6833      	ldrmi	r3, [r6, #0]
 8003a3a:	3302      	addmi	r3, #2
 8003a3c:	6033      	strmi	r3, [r6, #0]
 8003a3e:	6825      	ldr	r5, [r4, #0]
 8003a40:	f015 0506 	ands.w	r5, r5, #6
 8003a44:	d106      	bne.n	8003a54 <_printf_common+0x48>
 8003a46:	f104 0a19 	add.w	sl, r4, #25
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	6832      	ldr	r2, [r6, #0]
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dc26      	bgt.n	8003aa2 <_printf_common+0x96>
 8003a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a58:	1e13      	subs	r3, r2, #0
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d42b      	bmi.n	8003abc <_printf_common+0xb0>
 8003a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a68:	4649      	mov	r1, r9
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	47c0      	blx	r8
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d01e      	beq.n	8003ab0 <_printf_common+0xa4>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	68e5      	ldr	r5, [r4, #12]
 8003a76:	6832      	ldr	r2, [r6, #0]
 8003a78:	f003 0306 	and.w	r3, r3, #6
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	bf08      	it	eq
 8003a80:	1aad      	subeq	r5, r5, r2
 8003a82:	68a3      	ldr	r3, [r4, #8]
 8003a84:	6922      	ldr	r2, [r4, #16]
 8003a86:	bf0c      	ite	eq
 8003a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a8c:	2500      	movne	r5, #0
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bfc4      	itt	gt
 8003a92:	1a9b      	subgt	r3, r3, r2
 8003a94:	18ed      	addgt	r5, r5, r3
 8003a96:	2600      	movs	r6, #0
 8003a98:	341a      	adds	r4, #26
 8003a9a:	42b5      	cmp	r5, r6
 8003a9c:	d11a      	bne.n	8003ad4 <_printf_common+0xc8>
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e008      	b.n	8003ab4 <_printf_common+0xa8>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	4652      	mov	r2, sl
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	47c0      	blx	r8
 8003aac:	3001      	adds	r0, #1
 8003aae:	d103      	bne.n	8003ab8 <_printf_common+0xac>
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab8:	3501      	adds	r5, #1
 8003aba:	e7c6      	b.n	8003a4a <_printf_common+0x3e>
 8003abc:	18e1      	adds	r1, r4, r3
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	2030      	movs	r0, #48	; 0x30
 8003ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ac6:	4422      	add	r2, r4
 8003ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	e7c7      	b.n	8003a64 <_printf_common+0x58>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4638      	mov	r0, r7
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d0e6      	beq.n	8003ab0 <_printf_common+0xa4>
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7d9      	b.n	8003a9a <_printf_common+0x8e>
	...

08003ae8 <_printf_i>:
 8003ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	7e0f      	ldrb	r7, [r1, #24]
 8003aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003af0:	2f78      	cmp	r7, #120	; 0x78
 8003af2:	4691      	mov	r9, r2
 8003af4:	4680      	mov	r8, r0
 8003af6:	460c      	mov	r4, r1
 8003af8:	469a      	mov	sl, r3
 8003afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003afe:	d807      	bhi.n	8003b10 <_printf_i+0x28>
 8003b00:	2f62      	cmp	r7, #98	; 0x62
 8003b02:	d80a      	bhi.n	8003b1a <_printf_i+0x32>
 8003b04:	2f00      	cmp	r7, #0
 8003b06:	f000 80d8 	beq.w	8003cba <_printf_i+0x1d2>
 8003b0a:	2f58      	cmp	r7, #88	; 0x58
 8003b0c:	f000 80a3 	beq.w	8003c56 <_printf_i+0x16e>
 8003b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b18:	e03a      	b.n	8003b90 <_printf_i+0xa8>
 8003b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b1e:	2b15      	cmp	r3, #21
 8003b20:	d8f6      	bhi.n	8003b10 <_printf_i+0x28>
 8003b22:	a101      	add	r1, pc, #4	; (adr r1, 8003b28 <_printf_i+0x40>)
 8003b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b28:	08003b81 	.word	0x08003b81
 8003b2c:	08003b95 	.word	0x08003b95
 8003b30:	08003b11 	.word	0x08003b11
 8003b34:	08003b11 	.word	0x08003b11
 8003b38:	08003b11 	.word	0x08003b11
 8003b3c:	08003b11 	.word	0x08003b11
 8003b40:	08003b95 	.word	0x08003b95
 8003b44:	08003b11 	.word	0x08003b11
 8003b48:	08003b11 	.word	0x08003b11
 8003b4c:	08003b11 	.word	0x08003b11
 8003b50:	08003b11 	.word	0x08003b11
 8003b54:	08003ca1 	.word	0x08003ca1
 8003b58:	08003bc5 	.word	0x08003bc5
 8003b5c:	08003c83 	.word	0x08003c83
 8003b60:	08003b11 	.word	0x08003b11
 8003b64:	08003b11 	.word	0x08003b11
 8003b68:	08003cc3 	.word	0x08003cc3
 8003b6c:	08003b11 	.word	0x08003b11
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003b11 	.word	0x08003b11
 8003b78:	08003b11 	.word	0x08003b11
 8003b7c:	08003c8b 	.word	0x08003c8b
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	1d1a      	adds	r2, r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	602a      	str	r2, [r5, #0]
 8003b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0a3      	b.n	8003cdc <_printf_i+0x1f4>
 8003b94:	6820      	ldr	r0, [r4, #0]
 8003b96:	6829      	ldr	r1, [r5, #0]
 8003b98:	0606      	lsls	r6, r0, #24
 8003b9a:	f101 0304 	add.w	r3, r1, #4
 8003b9e:	d50a      	bpl.n	8003bb6 <_printf_i+0xce>
 8003ba0:	680e      	ldr	r6, [r1, #0]
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	2e00      	cmp	r6, #0
 8003ba6:	da03      	bge.n	8003bb0 <_printf_i+0xc8>
 8003ba8:	232d      	movs	r3, #45	; 0x2d
 8003baa:	4276      	negs	r6, r6
 8003bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb0:	485e      	ldr	r0, [pc, #376]	; (8003d2c <_printf_i+0x244>)
 8003bb2:	230a      	movs	r3, #10
 8003bb4:	e019      	b.n	8003bea <_printf_i+0x102>
 8003bb6:	680e      	ldr	r6, [r1, #0]
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bbe:	bf18      	it	ne
 8003bc0:	b236      	sxthne	r6, r6
 8003bc2:	e7ef      	b.n	8003ba4 <_printf_i+0xbc>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	1d19      	adds	r1, r3, #4
 8003bca:	6029      	str	r1, [r5, #0]
 8003bcc:	0601      	lsls	r1, r0, #24
 8003bce:	d501      	bpl.n	8003bd4 <_printf_i+0xec>
 8003bd0:	681e      	ldr	r6, [r3, #0]
 8003bd2:	e002      	b.n	8003bda <_printf_i+0xf2>
 8003bd4:	0646      	lsls	r6, r0, #25
 8003bd6:	d5fb      	bpl.n	8003bd0 <_printf_i+0xe8>
 8003bd8:	881e      	ldrh	r6, [r3, #0]
 8003bda:	4854      	ldr	r0, [pc, #336]	; (8003d2c <_printf_i+0x244>)
 8003bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8003bde:	bf0c      	ite	eq
 8003be0:	2308      	moveq	r3, #8
 8003be2:	230a      	movne	r3, #10
 8003be4:	2100      	movs	r1, #0
 8003be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bea:	6865      	ldr	r5, [r4, #4]
 8003bec:	60a5      	str	r5, [r4, #8]
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	bfa2      	ittt	ge
 8003bf2:	6821      	ldrge	r1, [r4, #0]
 8003bf4:	f021 0104 	bicge.w	r1, r1, #4
 8003bf8:	6021      	strge	r1, [r4, #0]
 8003bfa:	b90e      	cbnz	r6, 8003c00 <_printf_i+0x118>
 8003bfc:	2d00      	cmp	r5, #0
 8003bfe:	d04d      	beq.n	8003c9c <_printf_i+0x1b4>
 8003c00:	4615      	mov	r5, r2
 8003c02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c06:	fb03 6711 	mls	r7, r3, r1, r6
 8003c0a:	5dc7      	ldrb	r7, [r0, r7]
 8003c0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c10:	4637      	mov	r7, r6
 8003c12:	42bb      	cmp	r3, r7
 8003c14:	460e      	mov	r6, r1
 8003c16:	d9f4      	bls.n	8003c02 <_printf_i+0x11a>
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10b      	bne.n	8003c34 <_printf_i+0x14c>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	07de      	lsls	r6, r3, #31
 8003c20:	d508      	bpl.n	8003c34 <_printf_i+0x14c>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	6861      	ldr	r1, [r4, #4]
 8003c26:	4299      	cmp	r1, r3
 8003c28:	bfde      	ittt	le
 8003c2a:	2330      	movle	r3, #48	; 0x30
 8003c2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c34:	1b52      	subs	r2, r2, r5
 8003c36:	6122      	str	r2, [r4, #16]
 8003c38:	f8cd a000 	str.w	sl, [sp]
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	aa03      	add	r2, sp, #12
 8003c40:	4621      	mov	r1, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7ff fee2 	bl	8003a0c <_printf_common>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d14c      	bne.n	8003ce6 <_printf_i+0x1fe>
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c50:	b004      	add	sp, #16
 8003c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c56:	4835      	ldr	r0, [pc, #212]	; (8003d2c <_printf_i+0x244>)
 8003c58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c5c:	6829      	ldr	r1, [r5, #0]
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c64:	6029      	str	r1, [r5, #0]
 8003c66:	061d      	lsls	r5, r3, #24
 8003c68:	d514      	bpl.n	8003c94 <_printf_i+0x1ac>
 8003c6a:	07df      	lsls	r7, r3, #31
 8003c6c:	bf44      	itt	mi
 8003c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c72:	6023      	strmi	r3, [r4, #0]
 8003c74:	b91e      	cbnz	r6, 8003c7e <_printf_i+0x196>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	f023 0320 	bic.w	r3, r3, #32
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	2310      	movs	r3, #16
 8003c80:	e7b0      	b.n	8003be4 <_printf_i+0xfc>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	f043 0320 	orr.w	r3, r3, #32
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	2378      	movs	r3, #120	; 0x78
 8003c8c:	4828      	ldr	r0, [pc, #160]	; (8003d30 <_printf_i+0x248>)
 8003c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c92:	e7e3      	b.n	8003c5c <_printf_i+0x174>
 8003c94:	0659      	lsls	r1, r3, #25
 8003c96:	bf48      	it	mi
 8003c98:	b2b6      	uxthmi	r6, r6
 8003c9a:	e7e6      	b.n	8003c6a <_printf_i+0x182>
 8003c9c:	4615      	mov	r5, r2
 8003c9e:	e7bb      	b.n	8003c18 <_printf_i+0x130>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	6826      	ldr	r6, [r4, #0]
 8003ca4:	6961      	ldr	r1, [r4, #20]
 8003ca6:	1d18      	adds	r0, r3, #4
 8003ca8:	6028      	str	r0, [r5, #0]
 8003caa:	0635      	lsls	r5, r6, #24
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	d501      	bpl.n	8003cb4 <_printf_i+0x1cc>
 8003cb0:	6019      	str	r1, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <_printf_i+0x1d2>
 8003cb4:	0670      	lsls	r0, r6, #25
 8003cb6:	d5fb      	bpl.n	8003cb0 <_printf_i+0x1c8>
 8003cb8:	8019      	strh	r1, [r3, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	4615      	mov	r5, r2
 8003cc0:	e7ba      	b.n	8003c38 <_printf_i+0x150>
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	602a      	str	r2, [r5, #0]
 8003cc8:	681d      	ldr	r5, [r3, #0]
 8003cca:	6862      	ldr	r2, [r4, #4]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f7fc faae 	bl	8000230 <memchr>
 8003cd4:	b108      	cbz	r0, 8003cda <_printf_i+0x1f2>
 8003cd6:	1b40      	subs	r0, r0, r5
 8003cd8:	6060      	str	r0, [r4, #4]
 8003cda:	6863      	ldr	r3, [r4, #4]
 8003cdc:	6123      	str	r3, [r4, #16]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce4:	e7a8      	b.n	8003c38 <_printf_i+0x150>
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	462a      	mov	r2, r5
 8003cea:	4649      	mov	r1, r9
 8003cec:	4640      	mov	r0, r8
 8003cee:	47d0      	blx	sl
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d0ab      	beq.n	8003c4c <_printf_i+0x164>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	079b      	lsls	r3, r3, #30
 8003cf8:	d413      	bmi.n	8003d22 <_printf_i+0x23a>
 8003cfa:	68e0      	ldr	r0, [r4, #12]
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	4298      	cmp	r0, r3
 8003d00:	bfb8      	it	lt
 8003d02:	4618      	movlt	r0, r3
 8003d04:	e7a4      	b.n	8003c50 <_printf_i+0x168>
 8003d06:	2301      	movs	r3, #1
 8003d08:	4632      	mov	r2, r6
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	47d0      	blx	sl
 8003d10:	3001      	adds	r0, #1
 8003d12:	d09b      	beq.n	8003c4c <_printf_i+0x164>
 8003d14:	3501      	adds	r5, #1
 8003d16:	68e3      	ldr	r3, [r4, #12]
 8003d18:	9903      	ldr	r1, [sp, #12]
 8003d1a:	1a5b      	subs	r3, r3, r1
 8003d1c:	42ab      	cmp	r3, r5
 8003d1e:	dcf2      	bgt.n	8003d06 <_printf_i+0x21e>
 8003d20:	e7eb      	b.n	8003cfa <_printf_i+0x212>
 8003d22:	2500      	movs	r5, #0
 8003d24:	f104 0619 	add.w	r6, r4, #25
 8003d28:	e7f5      	b.n	8003d16 <_printf_i+0x22e>
 8003d2a:	bf00      	nop
 8003d2c:	08012db4 	.word	0x08012db4
 8003d30:	08012dc5 	.word	0x08012dc5

08003d34 <setvbuf>:
 8003d34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d38:	461d      	mov	r5, r3
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <setvbuf+0x17c>)
 8003d3c:	681f      	ldr	r7, [r3, #0]
 8003d3e:	4604      	mov	r4, r0
 8003d40:	460e      	mov	r6, r1
 8003d42:	4690      	mov	r8, r2
 8003d44:	b127      	cbz	r7, 8003d50 <setvbuf+0x1c>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	b913      	cbnz	r3, 8003d50 <setvbuf+0x1c>
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	f001 f944 	bl	8004fd8 <__sinit>
 8003d50:	4b58      	ldr	r3, [pc, #352]	; (8003eb4 <setvbuf+0x180>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d167      	bne.n	8003e26 <setvbuf+0xf2>
 8003d56:	687c      	ldr	r4, [r7, #4]
 8003d58:	f1b8 0f02 	cmp.w	r8, #2
 8003d5c:	d006      	beq.n	8003d6c <setvbuf+0x38>
 8003d5e:	f1b8 0f01 	cmp.w	r8, #1
 8003d62:	f200 809f 	bhi.w	8003ea4 <setvbuf+0x170>
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	f2c0 809c 	blt.w	8003ea4 <setvbuf+0x170>
 8003d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6e:	07db      	lsls	r3, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <setvbuf+0x4a>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	0598      	lsls	r0, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <setvbuf+0x4a>
 8003d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7a:	f001 f9e2 	bl	8005142 <__retarget_lock_acquire_recursive>
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4638      	mov	r0, r7
 8003d82:	f001 f895 	bl	8004eb0 <_fflush_r>
 8003d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d88:	b141      	cbz	r1, 8003d9c <setvbuf+0x68>
 8003d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d8e:	4299      	cmp	r1, r3
 8003d90:	d002      	beq.n	8003d98 <setvbuf+0x64>
 8003d92:	4638      	mov	r0, r7
 8003d94:	f001 fdf8 	bl	8005988 <_free_r>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61a3      	str	r3, [r4, #24]
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	0619      	lsls	r1, r3, #24
 8003da6:	d503      	bpl.n	8003db0 <setvbuf+0x7c>
 8003da8:	6921      	ldr	r1, [r4, #16]
 8003daa:	4638      	mov	r0, r7
 8003dac:	f001 fdec 	bl	8005988 <_free_r>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	f1b8 0f02 	cmp.w	r8, #2
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	d06c      	beq.n	8003e9c <setvbuf+0x168>
 8003dc2:	ab01      	add	r3, sp, #4
 8003dc4:	466a      	mov	r2, sp
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4638      	mov	r0, r7
 8003dca:	f001 f9bc 	bl	8005146 <__swhatbuf_r>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	4318      	orrs	r0, r3
 8003dd2:	81a0      	strh	r0, [r4, #12]
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	d130      	bne.n	8003e3a <setvbuf+0x106>
 8003dd8:	9d00      	ldr	r5, [sp, #0]
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f001 fa18 	bl	8005210 <malloc>
 8003de0:	4606      	mov	r6, r0
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d155      	bne.n	8003e92 <setvbuf+0x15e>
 8003de6:	f8dd 9000 	ldr.w	r9, [sp]
 8003dea:	45a9      	cmp	r9, r5
 8003dec:	d14a      	bne.n	8003e84 <setvbuf+0x150>
 8003dee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003df2:	2200      	movs	r2, #0
 8003df4:	60a2      	str	r2, [r4, #8]
 8003df6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003dfa:	6022      	str	r2, [r4, #0]
 8003dfc:	6122      	str	r2, [r4, #16]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e04:	6162      	str	r2, [r4, #20]
 8003e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e08:	f043 0302 	orr.w	r3, r3, #2
 8003e0c:	07d2      	lsls	r2, r2, #31
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	d405      	bmi.n	8003e1e <setvbuf+0xea>
 8003e12:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e16:	d102      	bne.n	8003e1e <setvbuf+0xea>
 8003e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1a:	f001 f993 	bl	8005144 <__retarget_lock_release_recursive>
 8003e1e:	4628      	mov	r0, r5
 8003e20:	b003      	add	sp, #12
 8003e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <setvbuf+0x184>)
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	d101      	bne.n	8003e30 <setvbuf+0xfc>
 8003e2c:	68bc      	ldr	r4, [r7, #8]
 8003e2e:	e793      	b.n	8003d58 <setvbuf+0x24>
 8003e30:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <setvbuf+0x188>)
 8003e32:	429c      	cmp	r4, r3
 8003e34:	bf08      	it	eq
 8003e36:	68fc      	ldreq	r4, [r7, #12]
 8003e38:	e78e      	b.n	8003d58 <setvbuf+0x24>
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d0cd      	beq.n	8003dda <setvbuf+0xa6>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	b913      	cbnz	r3, 8003e48 <setvbuf+0x114>
 8003e42:	4638      	mov	r0, r7
 8003e44:	f001 f8c8 	bl	8004fd8 <__sinit>
 8003e48:	f1b8 0f01 	cmp.w	r8, #1
 8003e4c:	bf08      	it	eq
 8003e4e:	89a3      	ldrheq	r3, [r4, #12]
 8003e50:	6026      	str	r6, [r4, #0]
 8003e52:	bf04      	itt	eq
 8003e54:	f043 0301 	orreq.w	r3, r3, #1
 8003e58:	81a3      	strheq	r3, [r4, #12]
 8003e5a:	89a2      	ldrh	r2, [r4, #12]
 8003e5c:	f012 0308 	ands.w	r3, r2, #8
 8003e60:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e64:	d01c      	beq.n	8003ea0 <setvbuf+0x16c>
 8003e66:	07d3      	lsls	r3, r2, #31
 8003e68:	bf41      	itttt	mi
 8003e6a:	2300      	movmi	r3, #0
 8003e6c:	426d      	negmi	r5, r5
 8003e6e:	60a3      	strmi	r3, [r4, #8]
 8003e70:	61a5      	strmi	r5, [r4, #24]
 8003e72:	bf58      	it	pl
 8003e74:	60a5      	strpl	r5, [r4, #8]
 8003e76:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e78:	f015 0501 	ands.w	r5, r5, #1
 8003e7c:	d115      	bne.n	8003eaa <setvbuf+0x176>
 8003e7e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e82:	e7c8      	b.n	8003e16 <setvbuf+0xe2>
 8003e84:	4648      	mov	r0, r9
 8003e86:	f001 f9c3 	bl	8005210 <malloc>
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d0ae      	beq.n	8003dee <setvbuf+0xba>
 8003e90:	464d      	mov	r5, r9
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	e7d0      	b.n	8003e3e <setvbuf+0x10a>
 8003e9c:	2500      	movs	r5, #0
 8003e9e:	e7a8      	b.n	8003df2 <setvbuf+0xbe>
 8003ea0:	60a3      	str	r3, [r4, #8]
 8003ea2:	e7e8      	b.n	8003e76 <setvbuf+0x142>
 8003ea4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ea8:	e7b9      	b.n	8003e1e <setvbuf+0xea>
 8003eaa:	2500      	movs	r5, #0
 8003eac:	e7b7      	b.n	8003e1e <setvbuf+0xea>
 8003eae:	bf00      	nop
 8003eb0:	20000018 	.word	0x20000018
 8003eb4:	08012f64 	.word	0x08012f64
 8003eb8:	08012f84 	.word	0x08012f84
 8003ebc:	08012f44 	.word	0x08012f44

08003ec0 <strtok>:
 8003ec0:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <strtok+0x5c>)
 8003ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ec4:	681e      	ldr	r6, [r3, #0]
 8003ec6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003ec8:	4605      	mov	r5, r0
 8003eca:	b9fc      	cbnz	r4, 8003f0c <strtok+0x4c>
 8003ecc:	2050      	movs	r0, #80	; 0x50
 8003ece:	9101      	str	r1, [sp, #4]
 8003ed0:	f001 f99e 	bl	8005210 <malloc>
 8003ed4:	9901      	ldr	r1, [sp, #4]
 8003ed6:	65b0      	str	r0, [r6, #88]	; 0x58
 8003ed8:	4602      	mov	r2, r0
 8003eda:	b920      	cbnz	r0, 8003ee6 <strtok+0x26>
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <strtok+0x60>)
 8003ede:	4811      	ldr	r0, [pc, #68]	; (8003f24 <strtok+0x64>)
 8003ee0:	2157      	movs	r1, #87	; 0x57
 8003ee2:	f000 f8c5 	bl	8004070 <__assert_func>
 8003ee6:	e9c0 4400 	strd	r4, r4, [r0]
 8003eea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003eee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ef2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ef6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003efa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003efe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003f02:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003f06:	6184      	str	r4, [r0, #24]
 8003f08:	7704      	strb	r4, [r0, #28]
 8003f0a:	6244      	str	r4, [r0, #36]	; 0x24
 8003f0c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4628      	mov	r0, r5
 8003f12:	b002      	add	sp, #8
 8003f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f18:	f000 b806 	b.w	8003f28 <__strtok_r>
 8003f1c:	20000018 	.word	0x20000018
 8003f20:	08012dd6 	.word	0x08012dd6
 8003f24:	08012ded 	.word	0x08012ded

08003f28 <__strtok_r>:
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b908      	cbnz	r0, 8003f30 <__strtok_r+0x8>
 8003f2c:	6810      	ldr	r0, [r2, #0]
 8003f2e:	b188      	cbz	r0, 8003f54 <__strtok_r+0x2c>
 8003f30:	4604      	mov	r4, r0
 8003f32:	4620      	mov	r0, r4
 8003f34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f38:	460f      	mov	r7, r1
 8003f3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f3e:	b91e      	cbnz	r6, 8003f48 <__strtok_r+0x20>
 8003f40:	b965      	cbnz	r5, 8003f5c <__strtok_r+0x34>
 8003f42:	6015      	str	r5, [r2, #0]
 8003f44:	4628      	mov	r0, r5
 8003f46:	e005      	b.n	8003f54 <__strtok_r+0x2c>
 8003f48:	42b5      	cmp	r5, r6
 8003f4a:	d1f6      	bne.n	8003f3a <__strtok_r+0x12>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <__strtok_r+0xa>
 8003f50:	6014      	str	r4, [r2, #0]
 8003f52:	7003      	strb	r3, [r0, #0]
 8003f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f56:	461c      	mov	r4, r3
 8003f58:	e00c      	b.n	8003f74 <__strtok_r+0x4c>
 8003f5a:	b915      	cbnz	r5, 8003f62 <__strtok_r+0x3a>
 8003f5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f60:	460e      	mov	r6, r1
 8003f62:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f66:	42ab      	cmp	r3, r5
 8003f68:	d1f7      	bne.n	8003f5a <__strtok_r+0x32>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f3      	beq.n	8003f56 <__strtok_r+0x2e>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f74:	6014      	str	r4, [r2, #0]
 8003f76:	e7ed      	b.n	8003f54 <__strtok_r+0x2c>

08003f78 <_strtoul_l.constprop.0>:
 8003f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f7c:	4f36      	ldr	r7, [pc, #216]	; (8004058 <_strtoul_l.constprop.0+0xe0>)
 8003f7e:	4686      	mov	lr, r0
 8003f80:	460d      	mov	r5, r1
 8003f82:	4628      	mov	r0, r5
 8003f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f88:	5de6      	ldrb	r6, [r4, r7]
 8003f8a:	f016 0608 	ands.w	r6, r6, #8
 8003f8e:	d1f8      	bne.n	8003f82 <_strtoul_l.constprop.0+0xa>
 8003f90:	2c2d      	cmp	r4, #45	; 0x2d
 8003f92:	d12f      	bne.n	8003ff4 <_strtoul_l.constprop.0+0x7c>
 8003f94:	782c      	ldrb	r4, [r5, #0]
 8003f96:	2601      	movs	r6, #1
 8003f98:	1c85      	adds	r5, r0, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d057      	beq.n	800404e <_strtoul_l.constprop.0+0xd6>
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d109      	bne.n	8003fb6 <_strtoul_l.constprop.0+0x3e>
 8003fa2:	2c30      	cmp	r4, #48	; 0x30
 8003fa4:	d107      	bne.n	8003fb6 <_strtoul_l.constprop.0+0x3e>
 8003fa6:	7828      	ldrb	r0, [r5, #0]
 8003fa8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003fac:	2858      	cmp	r0, #88	; 0x58
 8003fae:	d149      	bne.n	8004044 <_strtoul_l.constprop.0+0xcc>
 8003fb0:	786c      	ldrb	r4, [r5, #1]
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	3502      	adds	r5, #2
 8003fb6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003fba:	2700      	movs	r7, #0
 8003fbc:	fbb8 f8f3 	udiv	r8, r8, r3
 8003fc0:	fb03 f908 	mul.w	r9, r3, r8
 8003fc4:	ea6f 0909 	mvn.w	r9, r9
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003fce:	f1bc 0f09 	cmp.w	ip, #9
 8003fd2:	d814      	bhi.n	8003ffe <_strtoul_l.constprop.0+0x86>
 8003fd4:	4664      	mov	r4, ip
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	dd22      	ble.n	8004020 <_strtoul_l.constprop.0+0xa8>
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	db1d      	blt.n	800401a <_strtoul_l.constprop.0+0xa2>
 8003fde:	4580      	cmp	r8, r0
 8003fe0:	d31b      	bcc.n	800401a <_strtoul_l.constprop.0+0xa2>
 8003fe2:	d101      	bne.n	8003fe8 <_strtoul_l.constprop.0+0x70>
 8003fe4:	45a1      	cmp	r9, r4
 8003fe6:	db18      	blt.n	800401a <_strtoul_l.constprop.0+0xa2>
 8003fe8:	fb00 4003 	mla	r0, r0, r3, r4
 8003fec:	2701      	movs	r7, #1
 8003fee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ff2:	e7ea      	b.n	8003fca <_strtoul_l.constprop.0+0x52>
 8003ff4:	2c2b      	cmp	r4, #43	; 0x2b
 8003ff6:	bf04      	itt	eq
 8003ff8:	782c      	ldrbeq	r4, [r5, #0]
 8003ffa:	1c85      	addeq	r5, r0, #2
 8003ffc:	e7cd      	b.n	8003f9a <_strtoul_l.constprop.0+0x22>
 8003ffe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004002:	f1bc 0f19 	cmp.w	ip, #25
 8004006:	d801      	bhi.n	800400c <_strtoul_l.constprop.0+0x94>
 8004008:	3c37      	subs	r4, #55	; 0x37
 800400a:	e7e4      	b.n	8003fd6 <_strtoul_l.constprop.0+0x5e>
 800400c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004010:	f1bc 0f19 	cmp.w	ip, #25
 8004014:	d804      	bhi.n	8004020 <_strtoul_l.constprop.0+0xa8>
 8004016:	3c57      	subs	r4, #87	; 0x57
 8004018:	e7dd      	b.n	8003fd6 <_strtoul_l.constprop.0+0x5e>
 800401a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800401e:	e7e6      	b.n	8003fee <_strtoul_l.constprop.0+0x76>
 8004020:	2f00      	cmp	r7, #0
 8004022:	da07      	bge.n	8004034 <_strtoul_l.constprop.0+0xbc>
 8004024:	2322      	movs	r3, #34	; 0x22
 8004026:	f8ce 3000 	str.w	r3, [lr]
 800402a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402e:	b932      	cbnz	r2, 800403e <_strtoul_l.constprop.0+0xc6>
 8004030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004034:	b106      	cbz	r6, 8004038 <_strtoul_l.constprop.0+0xc0>
 8004036:	4240      	negs	r0, r0
 8004038:	2a00      	cmp	r2, #0
 800403a:	d0f9      	beq.n	8004030 <_strtoul_l.constprop.0+0xb8>
 800403c:	b107      	cbz	r7, 8004040 <_strtoul_l.constprop.0+0xc8>
 800403e:	1e69      	subs	r1, r5, #1
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	e7f5      	b.n	8004030 <_strtoul_l.constprop.0+0xb8>
 8004044:	2430      	movs	r4, #48	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1b5      	bne.n	8003fb6 <_strtoul_l.constprop.0+0x3e>
 800404a:	2308      	movs	r3, #8
 800404c:	e7b3      	b.n	8003fb6 <_strtoul_l.constprop.0+0x3e>
 800404e:	2c30      	cmp	r4, #48	; 0x30
 8004050:	d0a9      	beq.n	8003fa6 <_strtoul_l.constprop.0+0x2e>
 8004052:	230a      	movs	r3, #10
 8004054:	e7af      	b.n	8003fb6 <_strtoul_l.constprop.0+0x3e>
 8004056:	bf00      	nop
 8004058:	08012c9e 	.word	0x08012c9e

0800405c <strtoul>:
 800405c:	4613      	mov	r3, r2
 800405e:	460a      	mov	r2, r1
 8004060:	4601      	mov	r1, r0
 8004062:	4802      	ldr	r0, [pc, #8]	; (800406c <strtoul+0x10>)
 8004064:	6800      	ldr	r0, [r0, #0]
 8004066:	f7ff bf87 	b.w	8003f78 <_strtoul_l.constprop.0>
 800406a:	bf00      	nop
 800406c:	20000018 	.word	0x20000018

08004070 <__assert_func>:
 8004070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004072:	4614      	mov	r4, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <__assert_func+0x2c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4605      	mov	r5, r0
 800407c:	68d8      	ldr	r0, [r3, #12]
 800407e:	b14c      	cbz	r4, 8004094 <__assert_func+0x24>
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <__assert_func+0x30>)
 8004082:	9100      	str	r1, [sp, #0]
 8004084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004088:	4906      	ldr	r1, [pc, #24]	; (80040a4 <__assert_func+0x34>)
 800408a:	462b      	mov	r3, r5
 800408c:	f001 f822 	bl	80050d4 <fiprintf>
 8004090:	f001 ff8c 	bl	8005fac <abort>
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__assert_func+0x38>)
 8004096:	461c      	mov	r4, r3
 8004098:	e7f3      	b.n	8004082 <__assert_func+0x12>
 800409a:	bf00      	nop
 800409c:	20000018 	.word	0x20000018
 80040a0:	08012e6c 	.word	0x08012e6c
 80040a4:	08012e79 	.word	0x08012e79
 80040a8:	08009606 	.word	0x08009606

080040ac <quorem>:
 80040ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	6903      	ldr	r3, [r0, #16]
 80040b2:	690c      	ldr	r4, [r1, #16]
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	4607      	mov	r7, r0
 80040b8:	f2c0 8081 	blt.w	80041be <quorem+0x112>
 80040bc:	3c01      	subs	r4, #1
 80040be:	f101 0814 	add.w	r8, r1, #20
 80040c2:	f100 0514 	add.w	r5, r0, #20
 80040c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040d4:	3301      	adds	r3, #1
 80040d6:	429a      	cmp	r2, r3
 80040d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80040e4:	d331      	bcc.n	800414a <quorem+0x9e>
 80040e6:	f04f 0e00 	mov.w	lr, #0
 80040ea:	4640      	mov	r0, r8
 80040ec:	46ac      	mov	ip, r5
 80040ee:	46f2      	mov	sl, lr
 80040f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80040f4:	b293      	uxth	r3, r2
 80040f6:	fb06 e303 	mla	r3, r6, r3, lr
 80040fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040fe:	b29b      	uxth	r3, r3
 8004100:	ebaa 0303 	sub.w	r3, sl, r3
 8004104:	0c12      	lsrs	r2, r2, #16
 8004106:	f8dc a000 	ldr.w	sl, [ip]
 800410a:	fb06 e202 	mla	r2, r6, r2, lr
 800410e:	fa13 f38a 	uxtah	r3, r3, sl
 8004112:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004116:	fa1f fa82 	uxth.w	sl, r2
 800411a:	f8dc 2000 	ldr.w	r2, [ip]
 800411e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004122:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800412c:	4581      	cmp	r9, r0
 800412e:	f84c 3b04 	str.w	r3, [ip], #4
 8004132:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004136:	d2db      	bcs.n	80040f0 <quorem+0x44>
 8004138:	f855 300b 	ldr.w	r3, [r5, fp]
 800413c:	b92b      	cbnz	r3, 800414a <quorem+0x9e>
 800413e:	9b01      	ldr	r3, [sp, #4]
 8004140:	3b04      	subs	r3, #4
 8004142:	429d      	cmp	r5, r3
 8004144:	461a      	mov	r2, r3
 8004146:	d32e      	bcc.n	80041a6 <quorem+0xfa>
 8004148:	613c      	str	r4, [r7, #16]
 800414a:	4638      	mov	r0, r7
 800414c:	f001 fb0a 	bl	8005764 <__mcmp>
 8004150:	2800      	cmp	r0, #0
 8004152:	db24      	blt.n	800419e <quorem+0xf2>
 8004154:	3601      	adds	r6, #1
 8004156:	4628      	mov	r0, r5
 8004158:	f04f 0c00 	mov.w	ip, #0
 800415c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004160:	f8d0 e000 	ldr.w	lr, [r0]
 8004164:	b293      	uxth	r3, r2
 8004166:	ebac 0303 	sub.w	r3, ip, r3
 800416a:	0c12      	lsrs	r2, r2, #16
 800416c:	fa13 f38e 	uxtah	r3, r3, lr
 8004170:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004178:	b29b      	uxth	r3, r3
 800417a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800417e:	45c1      	cmp	r9, r8
 8004180:	f840 3b04 	str.w	r3, [r0], #4
 8004184:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004188:	d2e8      	bcs.n	800415c <quorem+0xb0>
 800418a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800418e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004192:	b922      	cbnz	r2, 800419e <quorem+0xf2>
 8004194:	3b04      	subs	r3, #4
 8004196:	429d      	cmp	r5, r3
 8004198:	461a      	mov	r2, r3
 800419a:	d30a      	bcc.n	80041b2 <quorem+0x106>
 800419c:	613c      	str	r4, [r7, #16]
 800419e:	4630      	mov	r0, r6
 80041a0:	b003      	add	sp, #12
 80041a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	3b04      	subs	r3, #4
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	d1cc      	bne.n	8004148 <quorem+0x9c>
 80041ae:	3c01      	subs	r4, #1
 80041b0:	e7c7      	b.n	8004142 <quorem+0x96>
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	2a00      	cmp	r2, #0
 80041b8:	d1f0      	bne.n	800419c <quorem+0xf0>
 80041ba:	3c01      	subs	r4, #1
 80041bc:	e7eb      	b.n	8004196 <quorem+0xea>
 80041be:	2000      	movs	r0, #0
 80041c0:	e7ee      	b.n	80041a0 <quorem+0xf4>
 80041c2:	0000      	movs	r0, r0
 80041c4:	0000      	movs	r0, r0
	...

080041c8 <_dtoa_r>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	ed2d 8b04 	vpush	{d8-d9}
 80041d0:	ec57 6b10 	vmov	r6, r7, d0
 80041d4:	b093      	sub	sp, #76	; 0x4c
 80041d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80041dc:	9106      	str	r1, [sp, #24]
 80041de:	ee10 aa10 	vmov	sl, s0
 80041e2:	4604      	mov	r4, r0
 80041e4:	9209      	str	r2, [sp, #36]	; 0x24
 80041e6:	930c      	str	r3, [sp, #48]	; 0x30
 80041e8:	46bb      	mov	fp, r7
 80041ea:	b975      	cbnz	r5, 800420a <_dtoa_r+0x42>
 80041ec:	2010      	movs	r0, #16
 80041ee:	f001 f80f 	bl	8005210 <malloc>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6260      	str	r0, [r4, #36]	; 0x24
 80041f6:	b920      	cbnz	r0, 8004202 <_dtoa_r+0x3a>
 80041f8:	4ba7      	ldr	r3, [pc, #668]	; (8004498 <_dtoa_r+0x2d0>)
 80041fa:	21ea      	movs	r1, #234	; 0xea
 80041fc:	48a7      	ldr	r0, [pc, #668]	; (800449c <_dtoa_r+0x2d4>)
 80041fe:	f7ff ff37 	bl	8004070 <__assert_func>
 8004202:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004206:	6005      	str	r5, [r0, #0]
 8004208:	60c5      	str	r5, [r0, #12]
 800420a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	b151      	cbz	r1, 8004226 <_dtoa_r+0x5e>
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	604a      	str	r2, [r1, #4]
 8004214:	2301      	movs	r3, #1
 8004216:	4093      	lsls	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
 800421a:	4620      	mov	r0, r4
 800421c:	f001 f860 	bl	80052e0 <_Bfree>
 8004220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	1e3b      	subs	r3, r7, #0
 8004228:	bfaa      	itet	ge
 800422a:	2300      	movge	r3, #0
 800422c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004230:	f8c8 3000 	strge.w	r3, [r8]
 8004234:	4b9a      	ldr	r3, [pc, #616]	; (80044a0 <_dtoa_r+0x2d8>)
 8004236:	bfbc      	itt	lt
 8004238:	2201      	movlt	r2, #1
 800423a:	f8c8 2000 	strlt.w	r2, [r8]
 800423e:	ea33 030b 	bics.w	r3, r3, fp
 8004242:	d11b      	bne.n	800427c <_dtoa_r+0xb4>
 8004244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004246:	f242 730f 	movw	r3, #9999	; 0x270f
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004250:	4333      	orrs	r3, r6
 8004252:	f000 8592 	beq.w	8004d7a <_dtoa_r+0xbb2>
 8004256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004258:	b963      	cbnz	r3, 8004274 <_dtoa_r+0xac>
 800425a:	4b92      	ldr	r3, [pc, #584]	; (80044a4 <_dtoa_r+0x2dc>)
 800425c:	e022      	b.n	80042a4 <_dtoa_r+0xdc>
 800425e:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <_dtoa_r+0x2e0>)
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	3308      	adds	r3, #8
 8004264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	9801      	ldr	r0, [sp, #4]
 800426a:	b013      	add	sp, #76	; 0x4c
 800426c:	ecbd 8b04 	vpop	{d8-d9}
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	4b8b      	ldr	r3, [pc, #556]	; (80044a4 <_dtoa_r+0x2dc>)
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	3303      	adds	r3, #3
 800427a:	e7f3      	b.n	8004264 <_dtoa_r+0x9c>
 800427c:	2200      	movs	r2, #0
 800427e:	2300      	movs	r3, #0
 8004280:	4650      	mov	r0, sl
 8004282:	4659      	mov	r1, fp
 8004284:	f7fc fc48 	bl	8000b18 <__aeabi_dcmpeq>
 8004288:	ec4b ab19 	vmov	d9, sl, fp
 800428c:	4680      	mov	r8, r0
 800428e:	b158      	cbz	r0, 80042a8 <_dtoa_r+0xe0>
 8004290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004292:	2301      	movs	r3, #1
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 856b 	beq.w	8004d74 <_dtoa_r+0xbac>
 800429e:	4883      	ldr	r0, [pc, #524]	; (80044ac <_dtoa_r+0x2e4>)
 80042a0:	6018      	str	r0, [r3, #0]
 80042a2:	1e43      	subs	r3, r0, #1
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	e7df      	b.n	8004268 <_dtoa_r+0xa0>
 80042a8:	ec4b ab10 	vmov	d0, sl, fp
 80042ac:	aa10      	add	r2, sp, #64	; 0x40
 80042ae:	a911      	add	r1, sp, #68	; 0x44
 80042b0:	4620      	mov	r0, r4
 80042b2:	f001 fafd 	bl	80058b0 <__d2b>
 80042b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80042ba:	ee08 0a10 	vmov	s16, r0
 80042be:	2d00      	cmp	r5, #0
 80042c0:	f000 8084 	beq.w	80043cc <_dtoa_r+0x204>
 80042c4:	ee19 3a90 	vmov	r3, s19
 80042c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80042d0:	4656      	mov	r6, sl
 80042d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80042d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80042de:	4b74      	ldr	r3, [pc, #464]	; (80044b0 <_dtoa_r+0x2e8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	4630      	mov	r0, r6
 80042e4:	4639      	mov	r1, r7
 80042e6:	f7fb fff7 	bl	80002d8 <__aeabi_dsub>
 80042ea:	a365      	add	r3, pc, #404	; (adr r3, 8004480 <_dtoa_r+0x2b8>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fc f9aa 	bl	8000648 <__aeabi_dmul>
 80042f4:	a364      	add	r3, pc, #400	; (adr r3, 8004488 <_dtoa_r+0x2c0>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f7fb ffef 	bl	80002dc <__adddf3>
 80042fe:	4606      	mov	r6, r0
 8004300:	4628      	mov	r0, r5
 8004302:	460f      	mov	r7, r1
 8004304:	f7fc f936 	bl	8000574 <__aeabi_i2d>
 8004308:	a361      	add	r3, pc, #388	; (adr r3, 8004490 <_dtoa_r+0x2c8>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f7fc f99b 	bl	8000648 <__aeabi_dmul>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4630      	mov	r0, r6
 8004318:	4639      	mov	r1, r7
 800431a:	f7fb ffdf 	bl	80002dc <__adddf3>
 800431e:	4606      	mov	r6, r0
 8004320:	460f      	mov	r7, r1
 8004322:	f7fc fc41 	bl	8000ba8 <__aeabi_d2iz>
 8004326:	2200      	movs	r2, #0
 8004328:	9000      	str	r0, [sp, #0]
 800432a:	2300      	movs	r3, #0
 800432c:	4630      	mov	r0, r6
 800432e:	4639      	mov	r1, r7
 8004330:	f7fc fbfc 	bl	8000b2c <__aeabi_dcmplt>
 8004334:	b150      	cbz	r0, 800434c <_dtoa_r+0x184>
 8004336:	9800      	ldr	r0, [sp, #0]
 8004338:	f7fc f91c 	bl	8000574 <__aeabi_i2d>
 800433c:	4632      	mov	r2, r6
 800433e:	463b      	mov	r3, r7
 8004340:	f7fc fbea 	bl	8000b18 <__aeabi_dcmpeq>
 8004344:	b910      	cbnz	r0, 800434c <_dtoa_r+0x184>
 8004346:	9b00      	ldr	r3, [sp, #0]
 8004348:	3b01      	subs	r3, #1
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	9b00      	ldr	r3, [sp, #0]
 800434e:	2b16      	cmp	r3, #22
 8004350:	d85a      	bhi.n	8004408 <_dtoa_r+0x240>
 8004352:	9a00      	ldr	r2, [sp, #0]
 8004354:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <_dtoa_r+0x2ec>)
 8004356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	ec51 0b19 	vmov	r0, r1, d9
 8004362:	f7fc fbe3 	bl	8000b2c <__aeabi_dcmplt>
 8004366:	2800      	cmp	r0, #0
 8004368:	d050      	beq.n	800440c <_dtoa_r+0x244>
 800436a:	9b00      	ldr	r3, [sp, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2300      	movs	r3, #0
 8004372:	930b      	str	r3, [sp, #44]	; 0x2c
 8004374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004376:	1b5d      	subs	r5, r3, r5
 8004378:	1e6b      	subs	r3, r5, #1
 800437a:	9305      	str	r3, [sp, #20]
 800437c:	bf45      	ittet	mi
 800437e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004382:	9304      	strmi	r3, [sp, #16]
 8004384:	2300      	movpl	r3, #0
 8004386:	2300      	movmi	r3, #0
 8004388:	bf4c      	ite	mi
 800438a:	9305      	strmi	r3, [sp, #20]
 800438c:	9304      	strpl	r3, [sp, #16]
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db3d      	blt.n	8004410 <_dtoa_r+0x248>
 8004394:	9b05      	ldr	r3, [sp, #20]
 8004396:	9a00      	ldr	r2, [sp, #0]
 8004398:	920a      	str	r2, [sp, #40]	; 0x28
 800439a:	4413      	add	r3, r2
 800439c:	9305      	str	r3, [sp, #20]
 800439e:	2300      	movs	r3, #0
 80043a0:	9307      	str	r3, [sp, #28]
 80043a2:	9b06      	ldr	r3, [sp, #24]
 80043a4:	2b09      	cmp	r3, #9
 80043a6:	f200 8089 	bhi.w	80044bc <_dtoa_r+0x2f4>
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	bfc4      	itt	gt
 80043ae:	3b04      	subgt	r3, #4
 80043b0:	9306      	strgt	r3, [sp, #24]
 80043b2:	9b06      	ldr	r3, [sp, #24]
 80043b4:	f1a3 0302 	sub.w	r3, r3, #2
 80043b8:	bfcc      	ite	gt
 80043ba:	2500      	movgt	r5, #0
 80043bc:	2501      	movle	r5, #1
 80043be:	2b03      	cmp	r3, #3
 80043c0:	f200 8087 	bhi.w	80044d2 <_dtoa_r+0x30a>
 80043c4:	e8df f003 	tbb	[pc, r3]
 80043c8:	59383a2d 	.word	0x59383a2d
 80043cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80043d0:	441d      	add	r5, r3
 80043d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	bfc1      	itttt	gt
 80043da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80043e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80043e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80043ea:	bfda      	itte	le
 80043ec:	f1c3 0320 	rsble	r3, r3, #32
 80043f0:	fa06 f003 	lslle.w	r0, r6, r3
 80043f4:	4318      	orrgt	r0, r3
 80043f6:	f7fc f8ad 	bl	8000554 <__aeabi_ui2d>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4606      	mov	r6, r0
 80043fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004402:	3d01      	subs	r5, #1
 8004404:	930e      	str	r3, [sp, #56]	; 0x38
 8004406:	e76a      	b.n	80042de <_dtoa_r+0x116>
 8004408:	2301      	movs	r3, #1
 800440a:	e7b2      	b.n	8004372 <_dtoa_r+0x1aa>
 800440c:	900b      	str	r0, [sp, #44]	; 0x2c
 800440e:	e7b1      	b.n	8004374 <_dtoa_r+0x1ac>
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	9a00      	ldr	r2, [sp, #0]
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	9304      	str	r3, [sp, #16]
 8004418:	4253      	negs	r3, r2
 800441a:	9307      	str	r3, [sp, #28]
 800441c:	2300      	movs	r3, #0
 800441e:	930a      	str	r3, [sp, #40]	; 0x28
 8004420:	e7bf      	b.n	80043a2 <_dtoa_r+0x1da>
 8004422:	2300      	movs	r3, #0
 8004424:	9308      	str	r3, [sp, #32]
 8004426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	dc55      	bgt.n	80044d8 <_dtoa_r+0x310>
 800442c:	2301      	movs	r3, #1
 800442e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004432:	461a      	mov	r2, r3
 8004434:	9209      	str	r2, [sp, #36]	; 0x24
 8004436:	e00c      	b.n	8004452 <_dtoa_r+0x28a>
 8004438:	2301      	movs	r3, #1
 800443a:	e7f3      	b.n	8004424 <_dtoa_r+0x25c>
 800443c:	2300      	movs	r3, #0
 800443e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004440:	9308      	str	r3, [sp, #32]
 8004442:	9b00      	ldr	r3, [sp, #0]
 8004444:	4413      	add	r3, r2
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	3301      	adds	r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	9303      	str	r3, [sp, #12]
 800444e:	bfb8      	it	lt
 8004450:	2301      	movlt	r3, #1
 8004452:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004454:	2200      	movs	r2, #0
 8004456:	6042      	str	r2, [r0, #4]
 8004458:	2204      	movs	r2, #4
 800445a:	f102 0614 	add.w	r6, r2, #20
 800445e:	429e      	cmp	r6, r3
 8004460:	6841      	ldr	r1, [r0, #4]
 8004462:	d93d      	bls.n	80044e0 <_dtoa_r+0x318>
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fefb 	bl	8005260 <_Balloc>
 800446a:	9001      	str	r0, [sp, #4]
 800446c:	2800      	cmp	r0, #0
 800446e:	d13b      	bne.n	80044e8 <_dtoa_r+0x320>
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <_dtoa_r+0x2f0>)
 8004472:	4602      	mov	r2, r0
 8004474:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004478:	e6c0      	b.n	80041fc <_dtoa_r+0x34>
 800447a:	2301      	movs	r3, #1
 800447c:	e7df      	b.n	800443e <_dtoa_r+0x276>
 800447e:	bf00      	nop
 8004480:	636f4361 	.word	0x636f4361
 8004484:	3fd287a7 	.word	0x3fd287a7
 8004488:	8b60c8b3 	.word	0x8b60c8b3
 800448c:	3fc68a28 	.word	0x3fc68a28
 8004490:	509f79fb 	.word	0x509f79fb
 8004494:	3fd34413 	.word	0x3fd34413
 8004498:	08012dd6 	.word	0x08012dd6
 800449c:	08012eb5 	.word	0x08012eb5
 80044a0:	7ff00000 	.word	0x7ff00000
 80044a4:	08012eb1 	.word	0x08012eb1
 80044a8:	08012ea8 	.word	0x08012ea8
 80044ac:	08008d9e 	.word	0x08008d9e
 80044b0:	3ff80000 	.word	0x3ff80000
 80044b4:	08013050 	.word	0x08013050
 80044b8:	08012f32 	.word	0x08012f32
 80044bc:	2501      	movs	r5, #1
 80044be:	2300      	movs	r3, #0
 80044c0:	9306      	str	r3, [sp, #24]
 80044c2:	9508      	str	r5, [sp, #32]
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2312      	movs	r3, #18
 80044d0:	e7b0      	b.n	8004434 <_dtoa_r+0x26c>
 80044d2:	2301      	movs	r3, #1
 80044d4:	9308      	str	r3, [sp, #32]
 80044d6:	e7f5      	b.n	80044c4 <_dtoa_r+0x2fc>
 80044d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044de:	e7b8      	b.n	8004452 <_dtoa_r+0x28a>
 80044e0:	3101      	adds	r1, #1
 80044e2:	6041      	str	r1, [r0, #4]
 80044e4:	0052      	lsls	r2, r2, #1
 80044e6:	e7b8      	b.n	800445a <_dtoa_r+0x292>
 80044e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ea:	9a01      	ldr	r2, [sp, #4]
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	2b0e      	cmp	r3, #14
 80044f2:	f200 809d 	bhi.w	8004630 <_dtoa_r+0x468>
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	f000 809a 	beq.w	8004630 <_dtoa_r+0x468>
 80044fc:	9b00      	ldr	r3, [sp, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dd32      	ble.n	8004568 <_dtoa_r+0x3a0>
 8004502:	4ab7      	ldr	r2, [pc, #732]	; (80047e0 <_dtoa_r+0x618>)
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800450c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004510:	9b00      	ldr	r3, [sp, #0]
 8004512:	05d8      	lsls	r0, r3, #23
 8004514:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004518:	d516      	bpl.n	8004548 <_dtoa_r+0x380>
 800451a:	4bb2      	ldr	r3, [pc, #712]	; (80047e4 <_dtoa_r+0x61c>)
 800451c:	ec51 0b19 	vmov	r0, r1, d9
 8004520:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004524:	f7fc f9ba 	bl	800089c <__aeabi_ddiv>
 8004528:	f007 070f 	and.w	r7, r7, #15
 800452c:	4682      	mov	sl, r0
 800452e:	468b      	mov	fp, r1
 8004530:	2503      	movs	r5, #3
 8004532:	4eac      	ldr	r6, [pc, #688]	; (80047e4 <_dtoa_r+0x61c>)
 8004534:	b957      	cbnz	r7, 800454c <_dtoa_r+0x384>
 8004536:	4642      	mov	r2, r8
 8004538:	464b      	mov	r3, r9
 800453a:	4650      	mov	r0, sl
 800453c:	4659      	mov	r1, fp
 800453e:	f7fc f9ad 	bl	800089c <__aeabi_ddiv>
 8004542:	4682      	mov	sl, r0
 8004544:	468b      	mov	fp, r1
 8004546:	e028      	b.n	800459a <_dtoa_r+0x3d2>
 8004548:	2502      	movs	r5, #2
 800454a:	e7f2      	b.n	8004532 <_dtoa_r+0x36a>
 800454c:	07f9      	lsls	r1, r7, #31
 800454e:	d508      	bpl.n	8004562 <_dtoa_r+0x39a>
 8004550:	4640      	mov	r0, r8
 8004552:	4649      	mov	r1, r9
 8004554:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004558:	f7fc f876 	bl	8000648 <__aeabi_dmul>
 800455c:	3501      	adds	r5, #1
 800455e:	4680      	mov	r8, r0
 8004560:	4689      	mov	r9, r1
 8004562:	107f      	asrs	r7, r7, #1
 8004564:	3608      	adds	r6, #8
 8004566:	e7e5      	b.n	8004534 <_dtoa_r+0x36c>
 8004568:	f000 809b 	beq.w	80046a2 <_dtoa_r+0x4da>
 800456c:	9b00      	ldr	r3, [sp, #0]
 800456e:	4f9d      	ldr	r7, [pc, #628]	; (80047e4 <_dtoa_r+0x61c>)
 8004570:	425e      	negs	r6, r3
 8004572:	4b9b      	ldr	r3, [pc, #620]	; (80047e0 <_dtoa_r+0x618>)
 8004574:	f006 020f 	and.w	r2, r6, #15
 8004578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	ec51 0b19 	vmov	r0, r1, d9
 8004584:	f7fc f860 	bl	8000648 <__aeabi_dmul>
 8004588:	1136      	asrs	r6, r6, #4
 800458a:	4682      	mov	sl, r0
 800458c:	468b      	mov	fp, r1
 800458e:	2300      	movs	r3, #0
 8004590:	2502      	movs	r5, #2
 8004592:	2e00      	cmp	r6, #0
 8004594:	d17a      	bne.n	800468c <_dtoa_r+0x4c4>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d3      	bne.n	8004542 <_dtoa_r+0x37a>
 800459a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8082 	beq.w	80046a6 <_dtoa_r+0x4de>
 80045a2:	4b91      	ldr	r3, [pc, #580]	; (80047e8 <_dtoa_r+0x620>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	4650      	mov	r0, sl
 80045a8:	4659      	mov	r1, fp
 80045aa:	f7fc fabf 	bl	8000b2c <__aeabi_dcmplt>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d079      	beq.n	80046a6 <_dtoa_r+0x4de>
 80045b2:	9b03      	ldr	r3, [sp, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d076      	beq.n	80046a6 <_dtoa_r+0x4de>
 80045b8:	9b02      	ldr	r3, [sp, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	dd36      	ble.n	800462c <_dtoa_r+0x464>
 80045be:	9b00      	ldr	r3, [sp, #0]
 80045c0:	4650      	mov	r0, sl
 80045c2:	4659      	mov	r1, fp
 80045c4:	1e5f      	subs	r7, r3, #1
 80045c6:	2200      	movs	r2, #0
 80045c8:	4b88      	ldr	r3, [pc, #544]	; (80047ec <_dtoa_r+0x624>)
 80045ca:	f7fc f83d 	bl	8000648 <__aeabi_dmul>
 80045ce:	9e02      	ldr	r6, [sp, #8]
 80045d0:	4682      	mov	sl, r0
 80045d2:	468b      	mov	fp, r1
 80045d4:	3501      	adds	r5, #1
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7fb ffcc 	bl	8000574 <__aeabi_i2d>
 80045dc:	4652      	mov	r2, sl
 80045de:	465b      	mov	r3, fp
 80045e0:	f7fc f832 	bl	8000648 <__aeabi_dmul>
 80045e4:	4b82      	ldr	r3, [pc, #520]	; (80047f0 <_dtoa_r+0x628>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	f7fb fe78 	bl	80002dc <__adddf3>
 80045ec:	46d0      	mov	r8, sl
 80045ee:	46d9      	mov	r9, fp
 80045f0:	4682      	mov	sl, r0
 80045f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80045f6:	2e00      	cmp	r6, #0
 80045f8:	d158      	bne.n	80046ac <_dtoa_r+0x4e4>
 80045fa:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <_dtoa_r+0x62c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	4640      	mov	r0, r8
 8004600:	4649      	mov	r1, r9
 8004602:	f7fb fe69 	bl	80002d8 <__aeabi_dsub>
 8004606:	4652      	mov	r2, sl
 8004608:	465b      	mov	r3, fp
 800460a:	4680      	mov	r8, r0
 800460c:	4689      	mov	r9, r1
 800460e:	f7fc faab 	bl	8000b68 <__aeabi_dcmpgt>
 8004612:	2800      	cmp	r0, #0
 8004614:	f040 8295 	bne.w	8004b42 <_dtoa_r+0x97a>
 8004618:	4652      	mov	r2, sl
 800461a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800461e:	4640      	mov	r0, r8
 8004620:	4649      	mov	r1, r9
 8004622:	f7fc fa83 	bl	8000b2c <__aeabi_dcmplt>
 8004626:	2800      	cmp	r0, #0
 8004628:	f040 8289 	bne.w	8004b3e <_dtoa_r+0x976>
 800462c:	ec5b ab19 	vmov	sl, fp, d9
 8004630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004632:	2b00      	cmp	r3, #0
 8004634:	f2c0 8148 	blt.w	80048c8 <_dtoa_r+0x700>
 8004638:	9a00      	ldr	r2, [sp, #0]
 800463a:	2a0e      	cmp	r2, #14
 800463c:	f300 8144 	bgt.w	80048c8 <_dtoa_r+0x700>
 8004640:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <_dtoa_r+0x618>)
 8004642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004646:	e9d3 8900 	ldrd	r8, r9, [r3]
 800464a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	f280 80d5 	bge.w	80047fc <_dtoa_r+0x634>
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f300 80d1 	bgt.w	80047fc <_dtoa_r+0x634>
 800465a:	f040 826f 	bne.w	8004b3c <_dtoa_r+0x974>
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <_dtoa_r+0x62c>)
 8004660:	2200      	movs	r2, #0
 8004662:	4640      	mov	r0, r8
 8004664:	4649      	mov	r1, r9
 8004666:	f7fb ffef 	bl	8000648 <__aeabi_dmul>
 800466a:	4652      	mov	r2, sl
 800466c:	465b      	mov	r3, fp
 800466e:	f7fc fa71 	bl	8000b54 <__aeabi_dcmpge>
 8004672:	9e03      	ldr	r6, [sp, #12]
 8004674:	4637      	mov	r7, r6
 8004676:	2800      	cmp	r0, #0
 8004678:	f040 8245 	bne.w	8004b06 <_dtoa_r+0x93e>
 800467c:	9d01      	ldr	r5, [sp, #4]
 800467e:	2331      	movs	r3, #49	; 0x31
 8004680:	f805 3b01 	strb.w	r3, [r5], #1
 8004684:	9b00      	ldr	r3, [sp, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	e240      	b.n	8004b0e <_dtoa_r+0x946>
 800468c:	07f2      	lsls	r2, r6, #31
 800468e:	d505      	bpl.n	800469c <_dtoa_r+0x4d4>
 8004690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004694:	f7fb ffd8 	bl	8000648 <__aeabi_dmul>
 8004698:	3501      	adds	r5, #1
 800469a:	2301      	movs	r3, #1
 800469c:	1076      	asrs	r6, r6, #1
 800469e:	3708      	adds	r7, #8
 80046a0:	e777      	b.n	8004592 <_dtoa_r+0x3ca>
 80046a2:	2502      	movs	r5, #2
 80046a4:	e779      	b.n	800459a <_dtoa_r+0x3d2>
 80046a6:	9f00      	ldr	r7, [sp, #0]
 80046a8:	9e03      	ldr	r6, [sp, #12]
 80046aa:	e794      	b.n	80045d6 <_dtoa_r+0x40e>
 80046ac:	9901      	ldr	r1, [sp, #4]
 80046ae:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <_dtoa_r+0x618>)
 80046b0:	4431      	add	r1, r6
 80046b2:	910d      	str	r1, [sp, #52]	; 0x34
 80046b4:	9908      	ldr	r1, [sp, #32]
 80046b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046be:	2900      	cmp	r1, #0
 80046c0:	d043      	beq.n	800474a <_dtoa_r+0x582>
 80046c2:	494d      	ldr	r1, [pc, #308]	; (80047f8 <_dtoa_r+0x630>)
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fc f8e9 	bl	800089c <__aeabi_ddiv>
 80046ca:	4652      	mov	r2, sl
 80046cc:	465b      	mov	r3, fp
 80046ce:	f7fb fe03 	bl	80002d8 <__aeabi_dsub>
 80046d2:	9d01      	ldr	r5, [sp, #4]
 80046d4:	4682      	mov	sl, r0
 80046d6:	468b      	mov	fp, r1
 80046d8:	4649      	mov	r1, r9
 80046da:	4640      	mov	r0, r8
 80046dc:	f7fc fa64 	bl	8000ba8 <__aeabi_d2iz>
 80046e0:	4606      	mov	r6, r0
 80046e2:	f7fb ff47 	bl	8000574 <__aeabi_i2d>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fb fdf3 	bl	80002d8 <__aeabi_dsub>
 80046f2:	3630      	adds	r6, #48	; 0x30
 80046f4:	f805 6b01 	strb.w	r6, [r5], #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	465b      	mov	r3, fp
 80046fc:	4680      	mov	r8, r0
 80046fe:	4689      	mov	r9, r1
 8004700:	f7fc fa14 	bl	8000b2c <__aeabi_dcmplt>
 8004704:	2800      	cmp	r0, #0
 8004706:	d163      	bne.n	80047d0 <_dtoa_r+0x608>
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	4936      	ldr	r1, [pc, #216]	; (80047e8 <_dtoa_r+0x620>)
 800470e:	2000      	movs	r0, #0
 8004710:	f7fb fde2 	bl	80002d8 <__aeabi_dsub>
 8004714:	4652      	mov	r2, sl
 8004716:	465b      	mov	r3, fp
 8004718:	f7fc fa08 	bl	8000b2c <__aeabi_dcmplt>
 800471c:	2800      	cmp	r0, #0
 800471e:	f040 80b5 	bne.w	800488c <_dtoa_r+0x6c4>
 8004722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004724:	429d      	cmp	r5, r3
 8004726:	d081      	beq.n	800462c <_dtoa_r+0x464>
 8004728:	4b30      	ldr	r3, [pc, #192]	; (80047ec <_dtoa_r+0x624>)
 800472a:	2200      	movs	r2, #0
 800472c:	4650      	mov	r0, sl
 800472e:	4659      	mov	r1, fp
 8004730:	f7fb ff8a 	bl	8000648 <__aeabi_dmul>
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <_dtoa_r+0x624>)
 8004736:	4682      	mov	sl, r0
 8004738:	468b      	mov	fp, r1
 800473a:	4640      	mov	r0, r8
 800473c:	4649      	mov	r1, r9
 800473e:	2200      	movs	r2, #0
 8004740:	f7fb ff82 	bl	8000648 <__aeabi_dmul>
 8004744:	4680      	mov	r8, r0
 8004746:	4689      	mov	r9, r1
 8004748:	e7c6      	b.n	80046d8 <_dtoa_r+0x510>
 800474a:	4650      	mov	r0, sl
 800474c:	4659      	mov	r1, fp
 800474e:	f7fb ff7b 	bl	8000648 <__aeabi_dmul>
 8004752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004754:	9d01      	ldr	r5, [sp, #4]
 8004756:	930f      	str	r3, [sp, #60]	; 0x3c
 8004758:	4682      	mov	sl, r0
 800475a:	468b      	mov	fp, r1
 800475c:	4649      	mov	r1, r9
 800475e:	4640      	mov	r0, r8
 8004760:	f7fc fa22 	bl	8000ba8 <__aeabi_d2iz>
 8004764:	4606      	mov	r6, r0
 8004766:	f7fb ff05 	bl	8000574 <__aeabi_i2d>
 800476a:	3630      	adds	r6, #48	; 0x30
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fb fdb0 	bl	80002d8 <__aeabi_dsub>
 8004778:	f805 6b01 	strb.w	r6, [r5], #1
 800477c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800477e:	429d      	cmp	r5, r3
 8004780:	4680      	mov	r8, r0
 8004782:	4689      	mov	r9, r1
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	d124      	bne.n	80047d4 <_dtoa_r+0x60c>
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <_dtoa_r+0x630>)
 800478c:	4650      	mov	r0, sl
 800478e:	4659      	mov	r1, fp
 8004790:	f7fb fda4 	bl	80002dc <__adddf3>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4640      	mov	r0, r8
 800479a:	4649      	mov	r1, r9
 800479c:	f7fc f9e4 	bl	8000b68 <__aeabi_dcmpgt>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d173      	bne.n	800488c <_dtoa_r+0x6c4>
 80047a4:	4652      	mov	r2, sl
 80047a6:	465b      	mov	r3, fp
 80047a8:	4913      	ldr	r1, [pc, #76]	; (80047f8 <_dtoa_r+0x630>)
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7fb fd94 	bl	80002d8 <__aeabi_dsub>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4640      	mov	r0, r8
 80047b6:	4649      	mov	r1, r9
 80047b8:	f7fc f9b8 	bl	8000b2c <__aeabi_dcmplt>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f43f af35 	beq.w	800462c <_dtoa_r+0x464>
 80047c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80047c4:	1e6b      	subs	r3, r5, #1
 80047c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80047c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d0f8      	beq.n	80047c2 <_dtoa_r+0x5fa>
 80047d0:	9700      	str	r7, [sp, #0]
 80047d2:	e049      	b.n	8004868 <_dtoa_r+0x6a0>
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <_dtoa_r+0x624>)
 80047d6:	f7fb ff37 	bl	8000648 <__aeabi_dmul>
 80047da:	4680      	mov	r8, r0
 80047dc:	4689      	mov	r9, r1
 80047de:	e7bd      	b.n	800475c <_dtoa_r+0x594>
 80047e0:	08013050 	.word	0x08013050
 80047e4:	08013028 	.word	0x08013028
 80047e8:	3ff00000 	.word	0x3ff00000
 80047ec:	40240000 	.word	0x40240000
 80047f0:	401c0000 	.word	0x401c0000
 80047f4:	40140000 	.word	0x40140000
 80047f8:	3fe00000 	.word	0x3fe00000
 80047fc:	9d01      	ldr	r5, [sp, #4]
 80047fe:	4656      	mov	r6, sl
 8004800:	465f      	mov	r7, fp
 8004802:	4642      	mov	r2, r8
 8004804:	464b      	mov	r3, r9
 8004806:	4630      	mov	r0, r6
 8004808:	4639      	mov	r1, r7
 800480a:	f7fc f847 	bl	800089c <__aeabi_ddiv>
 800480e:	f7fc f9cb 	bl	8000ba8 <__aeabi_d2iz>
 8004812:	4682      	mov	sl, r0
 8004814:	f7fb feae 	bl	8000574 <__aeabi_i2d>
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	f7fb ff14 	bl	8000648 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4630      	mov	r0, r6
 8004826:	4639      	mov	r1, r7
 8004828:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800482c:	f7fb fd54 	bl	80002d8 <__aeabi_dsub>
 8004830:	f805 6b01 	strb.w	r6, [r5], #1
 8004834:	9e01      	ldr	r6, [sp, #4]
 8004836:	9f03      	ldr	r7, [sp, #12]
 8004838:	1bae      	subs	r6, r5, r6
 800483a:	42b7      	cmp	r7, r6
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	d135      	bne.n	80048ae <_dtoa_r+0x6e6>
 8004842:	f7fb fd4b 	bl	80002dc <__adddf3>
 8004846:	4642      	mov	r2, r8
 8004848:	464b      	mov	r3, r9
 800484a:	4606      	mov	r6, r0
 800484c:	460f      	mov	r7, r1
 800484e:	f7fc f98b 	bl	8000b68 <__aeabi_dcmpgt>
 8004852:	b9d0      	cbnz	r0, 800488a <_dtoa_r+0x6c2>
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fc f95c 	bl	8000b18 <__aeabi_dcmpeq>
 8004860:	b110      	cbz	r0, 8004868 <_dtoa_r+0x6a0>
 8004862:	f01a 0f01 	tst.w	sl, #1
 8004866:	d110      	bne.n	800488a <_dtoa_r+0x6c2>
 8004868:	4620      	mov	r0, r4
 800486a:	ee18 1a10 	vmov	r1, s16
 800486e:	f000 fd37 	bl	80052e0 <_Bfree>
 8004872:	2300      	movs	r3, #0
 8004874:	9800      	ldr	r0, [sp, #0]
 8004876:	702b      	strb	r3, [r5, #0]
 8004878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800487a:	3001      	adds	r0, #1
 800487c:	6018      	str	r0, [r3, #0]
 800487e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004880:	2b00      	cmp	r3, #0
 8004882:	f43f acf1 	beq.w	8004268 <_dtoa_r+0xa0>
 8004886:	601d      	str	r5, [r3, #0]
 8004888:	e4ee      	b.n	8004268 <_dtoa_r+0xa0>
 800488a:	9f00      	ldr	r7, [sp, #0]
 800488c:	462b      	mov	r3, r5
 800488e:	461d      	mov	r5, r3
 8004890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004894:	2a39      	cmp	r2, #57	; 0x39
 8004896:	d106      	bne.n	80048a6 <_dtoa_r+0x6de>
 8004898:	9a01      	ldr	r2, [sp, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d1f7      	bne.n	800488e <_dtoa_r+0x6c6>
 800489e:	9901      	ldr	r1, [sp, #4]
 80048a0:	2230      	movs	r2, #48	; 0x30
 80048a2:	3701      	adds	r7, #1
 80048a4:	700a      	strb	r2, [r1, #0]
 80048a6:	781a      	ldrb	r2, [r3, #0]
 80048a8:	3201      	adds	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e790      	b.n	80047d0 <_dtoa_r+0x608>
 80048ae:	4ba6      	ldr	r3, [pc, #664]	; (8004b48 <_dtoa_r+0x980>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	f7fb fec9 	bl	8000648 <__aeabi_dmul>
 80048b6:	2200      	movs	r2, #0
 80048b8:	2300      	movs	r3, #0
 80048ba:	4606      	mov	r6, r0
 80048bc:	460f      	mov	r7, r1
 80048be:	f7fc f92b 	bl	8000b18 <__aeabi_dcmpeq>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d09d      	beq.n	8004802 <_dtoa_r+0x63a>
 80048c6:	e7cf      	b.n	8004868 <_dtoa_r+0x6a0>
 80048c8:	9a08      	ldr	r2, [sp, #32]
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	f000 80d7 	beq.w	8004a7e <_dtoa_r+0x8b6>
 80048d0:	9a06      	ldr	r2, [sp, #24]
 80048d2:	2a01      	cmp	r2, #1
 80048d4:	f300 80ba 	bgt.w	8004a4c <_dtoa_r+0x884>
 80048d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048da:	2a00      	cmp	r2, #0
 80048dc:	f000 80b2 	beq.w	8004a44 <_dtoa_r+0x87c>
 80048e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048e4:	9e07      	ldr	r6, [sp, #28]
 80048e6:	9d04      	ldr	r5, [sp, #16]
 80048e8:	9a04      	ldr	r2, [sp, #16]
 80048ea:	441a      	add	r2, r3
 80048ec:	9204      	str	r2, [sp, #16]
 80048ee:	9a05      	ldr	r2, [sp, #20]
 80048f0:	2101      	movs	r1, #1
 80048f2:	441a      	add	r2, r3
 80048f4:	4620      	mov	r0, r4
 80048f6:	9205      	str	r2, [sp, #20]
 80048f8:	f000 fdaa 	bl	8005450 <__i2b>
 80048fc:	4607      	mov	r7, r0
 80048fe:	2d00      	cmp	r5, #0
 8004900:	dd0c      	ble.n	800491c <_dtoa_r+0x754>
 8004902:	9b05      	ldr	r3, [sp, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dd09      	ble.n	800491c <_dtoa_r+0x754>
 8004908:	42ab      	cmp	r3, r5
 800490a:	9a04      	ldr	r2, [sp, #16]
 800490c:	bfa8      	it	ge
 800490e:	462b      	movge	r3, r5
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	9204      	str	r2, [sp, #16]
 8004914:	9a05      	ldr	r2, [sp, #20]
 8004916:	1aed      	subs	r5, r5, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	b31b      	cbz	r3, 8004968 <_dtoa_r+0x7a0>
 8004920:	9b08      	ldr	r3, [sp, #32]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80af 	beq.w	8004a86 <_dtoa_r+0x8be>
 8004928:	2e00      	cmp	r6, #0
 800492a:	dd13      	ble.n	8004954 <_dtoa_r+0x78c>
 800492c:	4639      	mov	r1, r7
 800492e:	4632      	mov	r2, r6
 8004930:	4620      	mov	r0, r4
 8004932:	f000 fe4d 	bl	80055d0 <__pow5mult>
 8004936:	ee18 2a10 	vmov	r2, s16
 800493a:	4601      	mov	r1, r0
 800493c:	4607      	mov	r7, r0
 800493e:	4620      	mov	r0, r4
 8004940:	f000 fd9c 	bl	800547c <__multiply>
 8004944:	ee18 1a10 	vmov	r1, s16
 8004948:	4680      	mov	r8, r0
 800494a:	4620      	mov	r0, r4
 800494c:	f000 fcc8 	bl	80052e0 <_Bfree>
 8004950:	ee08 8a10 	vmov	s16, r8
 8004954:	9b07      	ldr	r3, [sp, #28]
 8004956:	1b9a      	subs	r2, r3, r6
 8004958:	d006      	beq.n	8004968 <_dtoa_r+0x7a0>
 800495a:	ee18 1a10 	vmov	r1, s16
 800495e:	4620      	mov	r0, r4
 8004960:	f000 fe36 	bl	80055d0 <__pow5mult>
 8004964:	ee08 0a10 	vmov	s16, r0
 8004968:	2101      	movs	r1, #1
 800496a:	4620      	mov	r0, r4
 800496c:	f000 fd70 	bl	8005450 <__i2b>
 8004970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	4606      	mov	r6, r0
 8004976:	f340 8088 	ble.w	8004a8a <_dtoa_r+0x8c2>
 800497a:	461a      	mov	r2, r3
 800497c:	4601      	mov	r1, r0
 800497e:	4620      	mov	r0, r4
 8004980:	f000 fe26 	bl	80055d0 <__pow5mult>
 8004984:	9b06      	ldr	r3, [sp, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	4606      	mov	r6, r0
 800498a:	f340 8081 	ble.w	8004a90 <_dtoa_r+0x8c8>
 800498e:	f04f 0800 	mov.w	r8, #0
 8004992:	6933      	ldr	r3, [r6, #16]
 8004994:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004998:	6918      	ldr	r0, [r3, #16]
 800499a:	f000 fd09 	bl	80053b0 <__hi0bits>
 800499e:	f1c0 0020 	rsb	r0, r0, #32
 80049a2:	9b05      	ldr	r3, [sp, #20]
 80049a4:	4418      	add	r0, r3
 80049a6:	f010 001f 	ands.w	r0, r0, #31
 80049aa:	f000 8092 	beq.w	8004ad2 <_dtoa_r+0x90a>
 80049ae:	f1c0 0320 	rsb	r3, r0, #32
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	f340 808a 	ble.w	8004acc <_dtoa_r+0x904>
 80049b8:	f1c0 001c 	rsb	r0, r0, #28
 80049bc:	9b04      	ldr	r3, [sp, #16]
 80049be:	4403      	add	r3, r0
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	9b05      	ldr	r3, [sp, #20]
 80049c4:	4403      	add	r3, r0
 80049c6:	4405      	add	r5, r0
 80049c8:	9305      	str	r3, [sp, #20]
 80049ca:	9b04      	ldr	r3, [sp, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dd07      	ble.n	80049e0 <_dtoa_r+0x818>
 80049d0:	ee18 1a10 	vmov	r1, s16
 80049d4:	461a      	mov	r2, r3
 80049d6:	4620      	mov	r0, r4
 80049d8:	f000 fe54 	bl	8005684 <__lshift>
 80049dc:	ee08 0a10 	vmov	s16, r0
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dd05      	ble.n	80049f2 <_dtoa_r+0x82a>
 80049e6:	4631      	mov	r1, r6
 80049e8:	461a      	mov	r2, r3
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 fe4a 	bl	8005684 <__lshift>
 80049f0:	4606      	mov	r6, r0
 80049f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d06e      	beq.n	8004ad6 <_dtoa_r+0x90e>
 80049f8:	ee18 0a10 	vmov	r0, s16
 80049fc:	4631      	mov	r1, r6
 80049fe:	f000 feb1 	bl	8005764 <__mcmp>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	da67      	bge.n	8004ad6 <_dtoa_r+0x90e>
 8004a06:	9b00      	ldr	r3, [sp, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	ee18 1a10 	vmov	r1, s16
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	220a      	movs	r2, #10
 8004a12:	2300      	movs	r3, #0
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 fc85 	bl	8005324 <__multadd>
 8004a1a:	9b08      	ldr	r3, [sp, #32]
 8004a1c:	ee08 0a10 	vmov	s16, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 81b1 	beq.w	8004d88 <_dtoa_r+0xbc0>
 8004a26:	2300      	movs	r3, #0
 8004a28:	4639      	mov	r1, r7
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fc79 	bl	8005324 <__multadd>
 8004a32:	9b02      	ldr	r3, [sp, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	4607      	mov	r7, r0
 8004a38:	f300 808e 	bgt.w	8004b58 <_dtoa_r+0x990>
 8004a3c:	9b06      	ldr	r3, [sp, #24]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	dc51      	bgt.n	8004ae6 <_dtoa_r+0x91e>
 8004a42:	e089      	b.n	8004b58 <_dtoa_r+0x990>
 8004a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a4a:	e74b      	b.n	80048e4 <_dtoa_r+0x71c>
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	1e5e      	subs	r6, r3, #1
 8004a50:	9b07      	ldr	r3, [sp, #28]
 8004a52:	42b3      	cmp	r3, r6
 8004a54:	bfbf      	itttt	lt
 8004a56:	9b07      	ldrlt	r3, [sp, #28]
 8004a58:	9607      	strlt	r6, [sp, #28]
 8004a5a:	1af2      	sublt	r2, r6, r3
 8004a5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a5e:	bfb6      	itet	lt
 8004a60:	189b      	addlt	r3, r3, r2
 8004a62:	1b9e      	subge	r6, r3, r6
 8004a64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004a66:	9b03      	ldr	r3, [sp, #12]
 8004a68:	bfb8      	it	lt
 8004a6a:	2600      	movlt	r6, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bfb7      	itett	lt
 8004a70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004a74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004a78:	1a9d      	sublt	r5, r3, r2
 8004a7a:	2300      	movlt	r3, #0
 8004a7c:	e734      	b.n	80048e8 <_dtoa_r+0x720>
 8004a7e:	9e07      	ldr	r6, [sp, #28]
 8004a80:	9d04      	ldr	r5, [sp, #16]
 8004a82:	9f08      	ldr	r7, [sp, #32]
 8004a84:	e73b      	b.n	80048fe <_dtoa_r+0x736>
 8004a86:	9a07      	ldr	r2, [sp, #28]
 8004a88:	e767      	b.n	800495a <_dtoa_r+0x792>
 8004a8a:	9b06      	ldr	r3, [sp, #24]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	dc18      	bgt.n	8004ac2 <_dtoa_r+0x8fa>
 8004a90:	f1ba 0f00 	cmp.w	sl, #0
 8004a94:	d115      	bne.n	8004ac2 <_dtoa_r+0x8fa>
 8004a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a9a:	b993      	cbnz	r3, 8004ac2 <_dtoa_r+0x8fa>
 8004a9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004aa0:	0d1b      	lsrs	r3, r3, #20
 8004aa2:	051b      	lsls	r3, r3, #20
 8004aa4:	b183      	cbz	r3, 8004ac8 <_dtoa_r+0x900>
 8004aa6:	9b04      	ldr	r3, [sp, #16]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	9b05      	ldr	r3, [sp, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	9305      	str	r3, [sp, #20]
 8004ab2:	f04f 0801 	mov.w	r8, #1
 8004ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f af6a 	bne.w	8004992 <_dtoa_r+0x7ca>
 8004abe:	2001      	movs	r0, #1
 8004ac0:	e76f      	b.n	80049a2 <_dtoa_r+0x7da>
 8004ac2:	f04f 0800 	mov.w	r8, #0
 8004ac6:	e7f6      	b.n	8004ab6 <_dtoa_r+0x8ee>
 8004ac8:	4698      	mov	r8, r3
 8004aca:	e7f4      	b.n	8004ab6 <_dtoa_r+0x8ee>
 8004acc:	f43f af7d 	beq.w	80049ca <_dtoa_r+0x802>
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	301c      	adds	r0, #28
 8004ad4:	e772      	b.n	80049bc <_dtoa_r+0x7f4>
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	dc37      	bgt.n	8004b4c <_dtoa_r+0x984>
 8004adc:	9b06      	ldr	r3, [sp, #24]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	dd34      	ble.n	8004b4c <_dtoa_r+0x984>
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	9b02      	ldr	r3, [sp, #8]
 8004ae8:	b96b      	cbnz	r3, 8004b06 <_dtoa_r+0x93e>
 8004aea:	4631      	mov	r1, r6
 8004aec:	2205      	movs	r2, #5
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 fc18 	bl	8005324 <__multadd>
 8004af4:	4601      	mov	r1, r0
 8004af6:	4606      	mov	r6, r0
 8004af8:	ee18 0a10 	vmov	r0, s16
 8004afc:	f000 fe32 	bl	8005764 <__mcmp>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f73f adbb 	bgt.w	800467c <_dtoa_r+0x4b4>
 8004b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b08:	9d01      	ldr	r5, [sp, #4]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	f04f 0800 	mov.w	r8, #0
 8004b12:	4631      	mov	r1, r6
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 fbe3 	bl	80052e0 <_Bfree>
 8004b1a:	2f00      	cmp	r7, #0
 8004b1c:	f43f aea4 	beq.w	8004868 <_dtoa_r+0x6a0>
 8004b20:	f1b8 0f00 	cmp.w	r8, #0
 8004b24:	d005      	beq.n	8004b32 <_dtoa_r+0x96a>
 8004b26:	45b8      	cmp	r8, r7
 8004b28:	d003      	beq.n	8004b32 <_dtoa_r+0x96a>
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 fbd7 	bl	80052e0 <_Bfree>
 8004b32:	4639      	mov	r1, r7
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fbd3 	bl	80052e0 <_Bfree>
 8004b3a:	e695      	b.n	8004868 <_dtoa_r+0x6a0>
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	4637      	mov	r7, r6
 8004b40:	e7e1      	b.n	8004b06 <_dtoa_r+0x93e>
 8004b42:	9700      	str	r7, [sp, #0]
 8004b44:	4637      	mov	r7, r6
 8004b46:	e599      	b.n	800467c <_dtoa_r+0x4b4>
 8004b48:	40240000 	.word	0x40240000
 8004b4c:	9b08      	ldr	r3, [sp, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80ca 	beq.w	8004ce8 <_dtoa_r+0xb20>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	9302      	str	r3, [sp, #8]
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	dd05      	ble.n	8004b68 <_dtoa_r+0x9a0>
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	462a      	mov	r2, r5
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fd8f 	bl	8005684 <__lshift>
 8004b66:	4607      	mov	r7, r0
 8004b68:	f1b8 0f00 	cmp.w	r8, #0
 8004b6c:	d05b      	beq.n	8004c26 <_dtoa_r+0xa5e>
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fb75 	bl	8005260 <_Balloc>
 8004b76:	4605      	mov	r5, r0
 8004b78:	b928      	cbnz	r0, 8004b86 <_dtoa_r+0x9be>
 8004b7a:	4b87      	ldr	r3, [pc, #540]	; (8004d98 <_dtoa_r+0xbd0>)
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b82:	f7ff bb3b 	b.w	80041fc <_dtoa_r+0x34>
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	3202      	adds	r2, #2
 8004b8a:	0092      	lsls	r2, r2, #2
 8004b8c:	f107 010c 	add.w	r1, r7, #12
 8004b90:	300c      	adds	r0, #12
 8004b92:	f000 fb57 	bl	8005244 <memcpy>
 8004b96:	2201      	movs	r2, #1
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fd72 	bl	8005684 <__lshift>
 8004ba0:	9b01      	ldr	r3, [sp, #4]
 8004ba2:	f103 0901 	add.w	r9, r3, #1
 8004ba6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004baa:	4413      	add	r3, r2
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	f00a 0301 	and.w	r3, sl, #1
 8004bb2:	46b8      	mov	r8, r7
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	4631      	mov	r1, r6
 8004bba:	ee18 0a10 	vmov	r0, s16
 8004bbe:	f7ff fa75 	bl	80040ac <quorem>
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	9002      	str	r0, [sp, #8]
 8004bc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004bca:	ee18 0a10 	vmov	r0, s16
 8004bce:	f000 fdc9 	bl	8005764 <__mcmp>
 8004bd2:	463a      	mov	r2, r7
 8004bd4:	9003      	str	r0, [sp, #12]
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 fddf 	bl	800579c <__mdiff>
 8004bde:	68c2      	ldr	r2, [r0, #12]
 8004be0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004be4:	4605      	mov	r5, r0
 8004be6:	bb02      	cbnz	r2, 8004c2a <_dtoa_r+0xa62>
 8004be8:	4601      	mov	r1, r0
 8004bea:	ee18 0a10 	vmov	r0, s16
 8004bee:	f000 fdb9 	bl	8005764 <__mcmp>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	9207      	str	r2, [sp, #28]
 8004bfa:	f000 fb71 	bl	80052e0 <_Bfree>
 8004bfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004c02:	ea43 0102 	orr.w	r1, r3, r2
 8004c06:	9b04      	ldr	r3, [sp, #16]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	464d      	mov	r5, r9
 8004c0c:	d10f      	bne.n	8004c2e <_dtoa_r+0xa66>
 8004c0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c12:	d02a      	beq.n	8004c6a <_dtoa_r+0xaa2>
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dd02      	ble.n	8004c20 <_dtoa_r+0xa58>
 8004c1a:	9b02      	ldr	r3, [sp, #8]
 8004c1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004c20:	f88b a000 	strb.w	sl, [fp]
 8004c24:	e775      	b.n	8004b12 <_dtoa_r+0x94a>
 8004c26:	4638      	mov	r0, r7
 8004c28:	e7ba      	b.n	8004ba0 <_dtoa_r+0x9d8>
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	e7e2      	b.n	8004bf4 <_dtoa_r+0xa2c>
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	db04      	blt.n	8004c3e <_dtoa_r+0xa76>
 8004c34:	9906      	ldr	r1, [sp, #24]
 8004c36:	430b      	orrs	r3, r1
 8004c38:	9904      	ldr	r1, [sp, #16]
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	d122      	bne.n	8004c84 <_dtoa_r+0xabc>
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	ddee      	ble.n	8004c20 <_dtoa_r+0xa58>
 8004c42:	ee18 1a10 	vmov	r1, s16
 8004c46:	2201      	movs	r2, #1
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fd1b 	bl	8005684 <__lshift>
 8004c4e:	4631      	mov	r1, r6
 8004c50:	ee08 0a10 	vmov	s16, r0
 8004c54:	f000 fd86 	bl	8005764 <__mcmp>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	dc03      	bgt.n	8004c64 <_dtoa_r+0xa9c>
 8004c5c:	d1e0      	bne.n	8004c20 <_dtoa_r+0xa58>
 8004c5e:	f01a 0f01 	tst.w	sl, #1
 8004c62:	d0dd      	beq.n	8004c20 <_dtoa_r+0xa58>
 8004c64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c68:	d1d7      	bne.n	8004c1a <_dtoa_r+0xa52>
 8004c6a:	2339      	movs	r3, #57	; 0x39
 8004c6c:	f88b 3000 	strb.w	r3, [fp]
 8004c70:	462b      	mov	r3, r5
 8004c72:	461d      	mov	r5, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c7a:	2a39      	cmp	r2, #57	; 0x39
 8004c7c:	d071      	beq.n	8004d62 <_dtoa_r+0xb9a>
 8004c7e:	3201      	adds	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e746      	b.n	8004b12 <_dtoa_r+0x94a>
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	dd07      	ble.n	8004c98 <_dtoa_r+0xad0>
 8004c88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c8c:	d0ed      	beq.n	8004c6a <_dtoa_r+0xaa2>
 8004c8e:	f10a 0301 	add.w	r3, sl, #1
 8004c92:	f88b 3000 	strb.w	r3, [fp]
 8004c96:	e73c      	b.n	8004b12 <_dtoa_r+0x94a>
 8004c98:	9b05      	ldr	r3, [sp, #20]
 8004c9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004c9e:	4599      	cmp	r9, r3
 8004ca0:	d047      	beq.n	8004d32 <_dtoa_r+0xb6a>
 8004ca2:	ee18 1a10 	vmov	r1, s16
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	220a      	movs	r2, #10
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fb3a 	bl	8005324 <__multadd>
 8004cb0:	45b8      	cmp	r8, r7
 8004cb2:	ee08 0a10 	vmov	s16, r0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	f04f 020a 	mov.w	r2, #10
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	d106      	bne.n	8004cd2 <_dtoa_r+0xb0a>
 8004cc4:	f000 fb2e 	bl	8005324 <__multadd>
 8004cc8:	4680      	mov	r8, r0
 8004cca:	4607      	mov	r7, r0
 8004ccc:	f109 0901 	add.w	r9, r9, #1
 8004cd0:	e772      	b.n	8004bb8 <_dtoa_r+0x9f0>
 8004cd2:	f000 fb27 	bl	8005324 <__multadd>
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	4680      	mov	r8, r0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	220a      	movs	r2, #10
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 fb20 	bl	8005324 <__multadd>
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	e7f1      	b.n	8004ccc <_dtoa_r+0xb04>
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	9302      	str	r3, [sp, #8]
 8004cec:	9d01      	ldr	r5, [sp, #4]
 8004cee:	ee18 0a10 	vmov	r0, s16
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	f7ff f9da 	bl	80040ac <quorem>
 8004cf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	f805 ab01 	strb.w	sl, [r5], #1
 8004d02:	1aea      	subs	r2, r5, r3
 8004d04:	9b02      	ldr	r3, [sp, #8]
 8004d06:	4293      	cmp	r3, r2
 8004d08:	dd09      	ble.n	8004d1e <_dtoa_r+0xb56>
 8004d0a:	ee18 1a10 	vmov	r1, s16
 8004d0e:	2300      	movs	r3, #0
 8004d10:	220a      	movs	r2, #10
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 fb06 	bl	8005324 <__multadd>
 8004d18:	ee08 0a10 	vmov	s16, r0
 8004d1c:	e7e7      	b.n	8004cee <_dtoa_r+0xb26>
 8004d1e:	9b02      	ldr	r3, [sp, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bfc8      	it	gt
 8004d24:	461d      	movgt	r5, r3
 8004d26:	9b01      	ldr	r3, [sp, #4]
 8004d28:	bfd8      	it	le
 8004d2a:	2501      	movle	r5, #1
 8004d2c:	441d      	add	r5, r3
 8004d2e:	f04f 0800 	mov.w	r8, #0
 8004d32:	ee18 1a10 	vmov	r1, s16
 8004d36:	2201      	movs	r2, #1
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fca3 	bl	8005684 <__lshift>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	ee08 0a10 	vmov	s16, r0
 8004d44:	f000 fd0e 	bl	8005764 <__mcmp>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dc91      	bgt.n	8004c70 <_dtoa_r+0xaa8>
 8004d4c:	d102      	bne.n	8004d54 <_dtoa_r+0xb8c>
 8004d4e:	f01a 0f01 	tst.w	sl, #1
 8004d52:	d18d      	bne.n	8004c70 <_dtoa_r+0xaa8>
 8004d54:	462b      	mov	r3, r5
 8004d56:	461d      	mov	r5, r3
 8004d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d5c:	2a30      	cmp	r2, #48	; 0x30
 8004d5e:	d0fa      	beq.n	8004d56 <_dtoa_r+0xb8e>
 8004d60:	e6d7      	b.n	8004b12 <_dtoa_r+0x94a>
 8004d62:	9a01      	ldr	r2, [sp, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d184      	bne.n	8004c72 <_dtoa_r+0xaaa>
 8004d68:	9b00      	ldr	r3, [sp, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2331      	movs	r3, #49	; 0x31
 8004d70:	7013      	strb	r3, [r2, #0]
 8004d72:	e6ce      	b.n	8004b12 <_dtoa_r+0x94a>
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <_dtoa_r+0xbd4>)
 8004d76:	f7ff ba95 	b.w	80042a4 <_dtoa_r+0xdc>
 8004d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f aa6e 	bne.w	800425e <_dtoa_r+0x96>
 8004d82:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <_dtoa_r+0xbd8>)
 8004d84:	f7ff ba8e 	b.w	80042a4 <_dtoa_r+0xdc>
 8004d88:	9b02      	ldr	r3, [sp, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	dcae      	bgt.n	8004cec <_dtoa_r+0xb24>
 8004d8e:	9b06      	ldr	r3, [sp, #24]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	f73f aea8 	bgt.w	8004ae6 <_dtoa_r+0x91e>
 8004d96:	e7a9      	b.n	8004cec <_dtoa_r+0xb24>
 8004d98:	08012f32 	.word	0x08012f32
 8004d9c:	08008d9d 	.word	0x08008d9d
 8004da0:	08012ea8 	.word	0x08012ea8

08004da4 <__sflush_r>:
 8004da4:	898a      	ldrh	r2, [r1, #12]
 8004da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	0710      	lsls	r0, r2, #28
 8004dae:	460c      	mov	r4, r1
 8004db0:	d458      	bmi.n	8004e64 <__sflush_r+0xc0>
 8004db2:	684b      	ldr	r3, [r1, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dc05      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dc02      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d0f9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dd0:	682f      	ldr	r7, [r5, #0]
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	d032      	beq.n	8004e3c <__sflush_r+0x98>
 8004dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	075a      	lsls	r2, r3, #29
 8004ddc:	d505      	bpl.n	8004dea <__sflush_r+0x46>
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	1ac0      	subs	r0, r0, r3
 8004de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de4:	b10b      	cbz	r3, 8004dea <__sflush_r+0x46>
 8004de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de8:	1ac0      	subs	r0, r0, r3
 8004dea:	2300      	movs	r3, #0
 8004dec:	4602      	mov	r2, r0
 8004dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df0:	6a21      	ldr	r1, [r4, #32]
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b0      	blx	r6
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	d106      	bne.n	8004e0a <__sflush_r+0x66>
 8004dfc:	6829      	ldr	r1, [r5, #0]
 8004dfe:	291d      	cmp	r1, #29
 8004e00:	d82c      	bhi.n	8004e5c <__sflush_r+0xb8>
 8004e02:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <__sflush_r+0x108>)
 8004e04:	40ca      	lsrs	r2, r1
 8004e06:	07d6      	lsls	r6, r2, #31
 8004e08:	d528      	bpl.n	8004e5c <__sflush_r+0xb8>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6062      	str	r2, [r4, #4]
 8004e0e:	04d9      	lsls	r1, r3, #19
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	d504      	bpl.n	8004e20 <__sflush_r+0x7c>
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	d101      	bne.n	8004e1e <__sflush_r+0x7a>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b903      	cbnz	r3, 8004e20 <__sflush_r+0x7c>
 8004e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e22:	602f      	str	r7, [r5, #0]
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d0ca      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	d002      	beq.n	8004e36 <__sflush_r+0x92>
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 fda9 	bl	8005988 <_free_r>
 8004e36:	2000      	movs	r0, #0
 8004e38:	6360      	str	r0, [r4, #52]	; 0x34
 8004e3a:	e7c1      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	1c41      	adds	r1, r0, #1
 8004e46:	d1c7      	bne.n	8004dd8 <__sflush_r+0x34>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0c4      	beq.n	8004dd8 <__sflush_r+0x34>
 8004e4e:	2b1d      	cmp	r3, #29
 8004e50:	d001      	beq.n	8004e56 <__sflush_r+0xb2>
 8004e52:	2b16      	cmp	r3, #22
 8004e54:	d101      	bne.n	8004e5a <__sflush_r+0xb6>
 8004e56:	602f      	str	r7, [r5, #0]
 8004e58:	e7b1      	b.n	8004dbe <__sflush_r+0x1a>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	e7ad      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e64:	690f      	ldr	r7, [r1, #16]
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	d0a9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e6a:	0793      	lsls	r3, r2, #30
 8004e6c:	680e      	ldr	r6, [r1, #0]
 8004e6e:	bf08      	it	eq
 8004e70:	694b      	ldreq	r3, [r1, #20]
 8004e72:	600f      	str	r7, [r1, #0]
 8004e74:	bf18      	it	ne
 8004e76:	2300      	movne	r3, #0
 8004e78:	eba6 0807 	sub.w	r8, r6, r7
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	f1b8 0f00 	cmp.w	r8, #0
 8004e82:	dd9c      	ble.n	8004dbe <__sflush_r+0x1a>
 8004e84:	6a21      	ldr	r1, [r4, #32]
 8004e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e88:	4643      	mov	r3, r8
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b0      	blx	r6
 8004e90:	2800      	cmp	r0, #0
 8004e92:	dc06      	bgt.n	8004ea2 <__sflush_r+0xfe>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea0:	e78e      	b.n	8004dc0 <__sflush_r+0x1c>
 8004ea2:	4407      	add	r7, r0
 8004ea4:	eba8 0800 	sub.w	r8, r8, r0
 8004ea8:	e7e9      	b.n	8004e7e <__sflush_r+0xda>
 8004eaa:	bf00      	nop
 8004eac:	20400001 	.word	0x20400001

08004eb0 <_fflush_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b913      	cbnz	r3, 8004ec0 <_fflush_r+0x10>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	b118      	cbz	r0, 8004eca <_fflush_r+0x1a>
 8004ec2:	6983      	ldr	r3, [r0, #24]
 8004ec4:	b90b      	cbnz	r3, 8004eca <_fflush_r+0x1a>
 8004ec6:	f000 f887 	bl	8004fd8 <__sinit>
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <_fflush_r+0x6c>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	d11b      	bne.n	8004f08 <_fflush_r+0x58>
 8004ed0:	686c      	ldr	r4, [r5, #4]
 8004ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ef      	beq.n	8004eba <_fflush_r+0xa>
 8004eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004edc:	07d0      	lsls	r0, r2, #31
 8004ede:	d404      	bmi.n	8004eea <_fflush_r+0x3a>
 8004ee0:	0599      	lsls	r1, r3, #22
 8004ee2:	d402      	bmi.n	8004eea <_fflush_r+0x3a>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee6:	f000 f92c 	bl	8005142 <__retarget_lock_acquire_recursive>
 8004eea:	4628      	mov	r0, r5
 8004eec:	4621      	mov	r1, r4
 8004eee:	f7ff ff59 	bl	8004da4 <__sflush_r>
 8004ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ef4:	07da      	lsls	r2, r3, #31
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	d4e0      	bmi.n	8004ebc <_fflush_r+0xc>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	059b      	lsls	r3, r3, #22
 8004efe:	d4dd      	bmi.n	8004ebc <_fflush_r+0xc>
 8004f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f02:	f000 f91f 	bl	8005144 <__retarget_lock_release_recursive>
 8004f06:	e7d9      	b.n	8004ebc <_fflush_r+0xc>
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <_fflush_r+0x70>)
 8004f0a:	429c      	cmp	r4, r3
 8004f0c:	d101      	bne.n	8004f12 <_fflush_r+0x62>
 8004f0e:	68ac      	ldr	r4, [r5, #8]
 8004f10:	e7df      	b.n	8004ed2 <_fflush_r+0x22>
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <_fflush_r+0x74>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	bf08      	it	eq
 8004f18:	68ec      	ldreq	r4, [r5, #12]
 8004f1a:	e7da      	b.n	8004ed2 <_fflush_r+0x22>
 8004f1c:	08012f64 	.word	0x08012f64
 8004f20:	08012f84 	.word	0x08012f84
 8004f24:	08012f44 	.word	0x08012f44

08004f28 <std>:
 8004f28:	2300      	movs	r3, #0
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f36:	6083      	str	r3, [r0, #8]
 8004f38:	8181      	strh	r1, [r0, #12]
 8004f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f3c:	81c2      	strh	r2, [r0, #14]
 8004f3e:	6183      	str	r3, [r0, #24]
 8004f40:	4619      	mov	r1, r3
 8004f42:	2208      	movs	r2, #8
 8004f44:	305c      	adds	r0, #92	; 0x5c
 8004f46:	f7fe fa83 	bl	8003450 <memset>
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <std+0x38>)
 8004f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <std+0x3c>)
 8004f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <std+0x40>)
 8004f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <std+0x44>)
 8004f58:	6224      	str	r4, [r4, #32]
 8004f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	08005d89 	.word	0x08005d89
 8004f64:	08005dab 	.word	0x08005dab
 8004f68:	08005de3 	.word	0x08005de3
 8004f6c:	08005e07 	.word	0x08005e07

08004f70 <_cleanup_r>:
 8004f70:	4901      	ldr	r1, [pc, #4]	; (8004f78 <_cleanup_r+0x8>)
 8004f72:	f000 b8c1 	b.w	80050f8 <_fwalk_reent>
 8004f76:	bf00      	nop
 8004f78:	08004eb1 	.word	0x08004eb1

08004f7c <__sfmoreglue>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	2268      	movs	r2, #104	; 0x68
 8004f80:	1e4d      	subs	r5, r1, #1
 8004f82:	4355      	muls	r5, r2
 8004f84:	460e      	mov	r6, r1
 8004f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f8a:	f000 fd49 	bl	8005a20 <_malloc_r>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	b140      	cbz	r0, 8004fa4 <__sfmoreglue+0x28>
 8004f92:	2100      	movs	r1, #0
 8004f94:	e9c0 1600 	strd	r1, r6, [r0]
 8004f98:	300c      	adds	r0, #12
 8004f9a:	60a0      	str	r0, [r4, #8]
 8004f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fa0:	f7fe fa56 	bl	8003450 <memset>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}

08004fa8 <__sfp_lock_acquire>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sfp_lock_acquire+0x8>)
 8004faa:	f000 b8ca 	b.w	8005142 <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000c01 	.word	0x20000c01

08004fb4 <__sfp_lock_release>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__sfp_lock_release+0x8>)
 8004fb6:	f000 b8c5 	b.w	8005144 <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000c01 	.word	0x20000c01

08004fc0 <__sinit_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sinit_lock_acquire+0x8>)
 8004fc2:	f000 b8be 	b.w	8005142 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000c02 	.word	0x20000c02

08004fcc <__sinit_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sinit_lock_release+0x8>)
 8004fce:	f000 b8b9 	b.w	8005144 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000c02 	.word	0x20000c02

08004fd8 <__sinit>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff fff0 	bl	8004fc0 <__sinit_lock_acquire>
 8004fe0:	69a3      	ldr	r3, [r4, #24]
 8004fe2:	b11b      	cbz	r3, 8004fec <__sinit+0x14>
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	f7ff bff0 	b.w	8004fcc <__sinit_lock_release>
 8004fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <__sinit+0x68>)
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <__sinit+0x6c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	bf04      	itt	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	61a3      	streq	r3, [r4, #24]
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f820 	bl	8005048 <__sfp>
 8005008:	6060      	str	r0, [r4, #4]
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f81c 	bl	8005048 <__sfp>
 8005010:	60a0      	str	r0, [r4, #8]
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f818 	bl	8005048 <__sfp>
 8005018:	2200      	movs	r2, #0
 800501a:	60e0      	str	r0, [r4, #12]
 800501c:	2104      	movs	r1, #4
 800501e:	6860      	ldr	r0, [r4, #4]
 8005020:	f7ff ff82 	bl	8004f28 <std>
 8005024:	68a0      	ldr	r0, [r4, #8]
 8005026:	2201      	movs	r2, #1
 8005028:	2109      	movs	r1, #9
 800502a:	f7ff ff7d 	bl	8004f28 <std>
 800502e:	68e0      	ldr	r0, [r4, #12]
 8005030:	2202      	movs	r2, #2
 8005032:	2112      	movs	r1, #18
 8005034:	f7ff ff78 	bl	8004f28 <std>
 8005038:	2301      	movs	r3, #1
 800503a:	61a3      	str	r3, [r4, #24]
 800503c:	e7d2      	b.n	8004fe4 <__sinit+0xc>
 800503e:	bf00      	nop
 8005040:	08012da0 	.word	0x08012da0
 8005044:	08004f71 	.word	0x08004f71

08005048 <__sfp>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	4607      	mov	r7, r0
 800504c:	f7ff ffac 	bl	8004fa8 <__sfp_lock_acquire>
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <__sfp+0x84>)
 8005052:	681e      	ldr	r6, [r3, #0]
 8005054:	69b3      	ldr	r3, [r6, #24]
 8005056:	b913      	cbnz	r3, 800505e <__sfp+0x16>
 8005058:	4630      	mov	r0, r6
 800505a:	f7ff ffbd 	bl	8004fd8 <__sinit>
 800505e:	3648      	adds	r6, #72	; 0x48
 8005060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005064:	3b01      	subs	r3, #1
 8005066:	d503      	bpl.n	8005070 <__sfp+0x28>
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	b30b      	cbz	r3, 80050b0 <__sfp+0x68>
 800506c:	6836      	ldr	r6, [r6, #0]
 800506e:	e7f7      	b.n	8005060 <__sfp+0x18>
 8005070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005074:	b9d5      	cbnz	r5, 80050ac <__sfp+0x64>
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <__sfp+0x88>)
 8005078:	60e3      	str	r3, [r4, #12]
 800507a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800507e:	6665      	str	r5, [r4, #100]	; 0x64
 8005080:	f000 f85e 	bl	8005140 <__retarget_lock_init_recursive>
 8005084:	f7ff ff96 	bl	8004fb4 <__sfp_lock_release>
 8005088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800508c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005090:	6025      	str	r5, [r4, #0]
 8005092:	61a5      	str	r5, [r4, #24]
 8005094:	2208      	movs	r2, #8
 8005096:	4629      	mov	r1, r5
 8005098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800509c:	f7fe f9d8 	bl	8003450 <memset>
 80050a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050a8:	4620      	mov	r0, r4
 80050aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ac:	3468      	adds	r4, #104	; 0x68
 80050ae:	e7d9      	b.n	8005064 <__sfp+0x1c>
 80050b0:	2104      	movs	r1, #4
 80050b2:	4638      	mov	r0, r7
 80050b4:	f7ff ff62 	bl	8004f7c <__sfmoreglue>
 80050b8:	4604      	mov	r4, r0
 80050ba:	6030      	str	r0, [r6, #0]
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1d5      	bne.n	800506c <__sfp+0x24>
 80050c0:	f7ff ff78 	bl	8004fb4 <__sfp_lock_release>
 80050c4:	230c      	movs	r3, #12
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	e7ee      	b.n	80050a8 <__sfp+0x60>
 80050ca:	bf00      	nop
 80050cc:	08012da0 	.word	0x08012da0
 80050d0:	ffff0001 	.word	0xffff0001

080050d4 <fiprintf>:
 80050d4:	b40e      	push	{r1, r2, r3}
 80050d6:	b503      	push	{r0, r1, lr}
 80050d8:	4601      	mov	r1, r0
 80050da:	ab03      	add	r3, sp, #12
 80050dc:	4805      	ldr	r0, [pc, #20]	; (80050f4 <fiprintf+0x20>)
 80050de:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e2:	6800      	ldr	r0, [r0, #0]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	f000 fd1f 	bl	8005b28 <_vfiprintf_r>
 80050ea:	b002      	add	sp, #8
 80050ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80050f0:	b003      	add	sp, #12
 80050f2:	4770      	bx	lr
 80050f4:	20000018 	.word	0x20000018

080050f8 <_fwalk_reent>:
 80050f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050fc:	4606      	mov	r6, r0
 80050fe:	4688      	mov	r8, r1
 8005100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005104:	2700      	movs	r7, #0
 8005106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800510a:	f1b9 0901 	subs.w	r9, r9, #1
 800510e:	d505      	bpl.n	800511c <_fwalk_reent+0x24>
 8005110:	6824      	ldr	r4, [r4, #0]
 8005112:	2c00      	cmp	r4, #0
 8005114:	d1f7      	bne.n	8005106 <_fwalk_reent+0xe>
 8005116:	4638      	mov	r0, r7
 8005118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511c:	89ab      	ldrh	r3, [r5, #12]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d907      	bls.n	8005132 <_fwalk_reent+0x3a>
 8005122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005126:	3301      	adds	r3, #1
 8005128:	d003      	beq.n	8005132 <_fwalk_reent+0x3a>
 800512a:	4629      	mov	r1, r5
 800512c:	4630      	mov	r0, r6
 800512e:	47c0      	blx	r8
 8005130:	4307      	orrs	r7, r0
 8005132:	3568      	adds	r5, #104	; 0x68
 8005134:	e7e9      	b.n	800510a <_fwalk_reent+0x12>
	...

08005138 <_localeconv_r>:
 8005138:	4800      	ldr	r0, [pc, #0]	; (800513c <_localeconv_r+0x4>)
 800513a:	4770      	bx	lr
 800513c:	2000016c 	.word	0x2000016c

08005140 <__retarget_lock_init_recursive>:
 8005140:	4770      	bx	lr

08005142 <__retarget_lock_acquire_recursive>:
 8005142:	4770      	bx	lr

08005144 <__retarget_lock_release_recursive>:
 8005144:	4770      	bx	lr

08005146 <__swhatbuf_r>:
 8005146:	b570      	push	{r4, r5, r6, lr}
 8005148:	460e      	mov	r6, r1
 800514a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514e:	2900      	cmp	r1, #0
 8005150:	b096      	sub	sp, #88	; 0x58
 8005152:	4614      	mov	r4, r2
 8005154:	461d      	mov	r5, r3
 8005156:	da08      	bge.n	800516a <__swhatbuf_r+0x24>
 8005158:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	602a      	str	r2, [r5, #0]
 8005160:	061a      	lsls	r2, r3, #24
 8005162:	d410      	bmi.n	8005186 <__swhatbuf_r+0x40>
 8005164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005168:	e00e      	b.n	8005188 <__swhatbuf_r+0x42>
 800516a:	466a      	mov	r2, sp
 800516c:	f7fd fcec 	bl	8002b48 <_fstat_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	dbf1      	blt.n	8005158 <__swhatbuf_r+0x12>
 8005174:	9a01      	ldr	r2, [sp, #4]
 8005176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800517a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800517e:	425a      	negs	r2, r3
 8005180:	415a      	adcs	r2, r3
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	e7ee      	b.n	8005164 <__swhatbuf_r+0x1e>
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	2000      	movs	r0, #0
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	b016      	add	sp, #88	; 0x58
 800518e:	bd70      	pop	{r4, r5, r6, pc}

08005190 <__smakebuf_r>:
 8005190:	898b      	ldrh	r3, [r1, #12]
 8005192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005194:	079d      	lsls	r5, r3, #30
 8005196:	4606      	mov	r6, r0
 8005198:	460c      	mov	r4, r1
 800519a:	d507      	bpl.n	80051ac <__smakebuf_r+0x1c>
 800519c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	2301      	movs	r3, #1
 80051a6:	6163      	str	r3, [r4, #20]
 80051a8:	b002      	add	sp, #8
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	ab01      	add	r3, sp, #4
 80051ae:	466a      	mov	r2, sp
 80051b0:	f7ff ffc9 	bl	8005146 <__swhatbuf_r>
 80051b4:	9900      	ldr	r1, [sp, #0]
 80051b6:	4605      	mov	r5, r0
 80051b8:	4630      	mov	r0, r6
 80051ba:	f000 fc31 	bl	8005a20 <_malloc_r>
 80051be:	b948      	cbnz	r0, 80051d4 <__smakebuf_r+0x44>
 80051c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c4:	059a      	lsls	r2, r3, #22
 80051c6:	d4ef      	bmi.n	80051a8 <__smakebuf_r+0x18>
 80051c8:	f023 0303 	bic.w	r3, r3, #3
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	e7e3      	b.n	800519c <__smakebuf_r+0xc>
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <__smakebuf_r+0x7c>)
 80051d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	6020      	str	r0, [r4, #0]
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	9b00      	ldr	r3, [sp, #0]
 80051e4:	6163      	str	r3, [r4, #20]
 80051e6:	9b01      	ldr	r3, [sp, #4]
 80051e8:	6120      	str	r0, [r4, #16]
 80051ea:	b15b      	cbz	r3, 8005204 <__smakebuf_r+0x74>
 80051ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7fd fcae 	bl	8002b52 <_isatty_r>
 80051f6:	b128      	cbz	r0, 8005204 <__smakebuf_r+0x74>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	89a0      	ldrh	r0, [r4, #12]
 8005206:	4305      	orrs	r5, r0
 8005208:	81a5      	strh	r5, [r4, #12]
 800520a:	e7cd      	b.n	80051a8 <__smakebuf_r+0x18>
 800520c:	08004f71 	.word	0x08004f71

08005210 <malloc>:
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <malloc+0xc>)
 8005212:	4601      	mov	r1, r0
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f000 bc03 	b.w	8005a20 <_malloc_r>
 800521a:	bf00      	nop
 800521c:	20000018 	.word	0x20000018

08005220 <__ascii_mbtowc>:
 8005220:	b082      	sub	sp, #8
 8005222:	b901      	cbnz	r1, 8005226 <__ascii_mbtowc+0x6>
 8005224:	a901      	add	r1, sp, #4
 8005226:	b142      	cbz	r2, 800523a <__ascii_mbtowc+0x1a>
 8005228:	b14b      	cbz	r3, 800523e <__ascii_mbtowc+0x1e>
 800522a:	7813      	ldrb	r3, [r2, #0]
 800522c:	600b      	str	r3, [r1, #0]
 800522e:	7812      	ldrb	r2, [r2, #0]
 8005230:	1e10      	subs	r0, r2, #0
 8005232:	bf18      	it	ne
 8005234:	2001      	movne	r0, #1
 8005236:	b002      	add	sp, #8
 8005238:	4770      	bx	lr
 800523a:	4610      	mov	r0, r2
 800523c:	e7fb      	b.n	8005236 <__ascii_mbtowc+0x16>
 800523e:	f06f 0001 	mvn.w	r0, #1
 8005242:	e7f8      	b.n	8005236 <__ascii_mbtowc+0x16>

08005244 <memcpy>:
 8005244:	440a      	add	r2, r1
 8005246:	4291      	cmp	r1, r2
 8005248:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800524c:	d100      	bne.n	8005250 <memcpy+0xc>
 800524e:	4770      	bx	lr
 8005250:	b510      	push	{r4, lr}
 8005252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525a:	4291      	cmp	r1, r2
 800525c:	d1f9      	bne.n	8005252 <memcpy+0xe>
 800525e:	bd10      	pop	{r4, pc}

08005260 <_Balloc>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005264:	4604      	mov	r4, r0
 8005266:	460d      	mov	r5, r1
 8005268:	b976      	cbnz	r6, 8005288 <_Balloc+0x28>
 800526a:	2010      	movs	r0, #16
 800526c:	f7ff ffd0 	bl	8005210 <malloc>
 8005270:	4602      	mov	r2, r0
 8005272:	6260      	str	r0, [r4, #36]	; 0x24
 8005274:	b920      	cbnz	r0, 8005280 <_Balloc+0x20>
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <_Balloc+0x78>)
 8005278:	4818      	ldr	r0, [pc, #96]	; (80052dc <_Balloc+0x7c>)
 800527a:	2166      	movs	r1, #102	; 0x66
 800527c:	f7fe fef8 	bl	8004070 <__assert_func>
 8005280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005284:	6006      	str	r6, [r0, #0]
 8005286:	60c6      	str	r6, [r0, #12]
 8005288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800528a:	68f3      	ldr	r3, [r6, #12]
 800528c:	b183      	cbz	r3, 80052b0 <_Balloc+0x50>
 800528e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005296:	b9b8      	cbnz	r0, 80052c8 <_Balloc+0x68>
 8005298:	2101      	movs	r1, #1
 800529a:	fa01 f605 	lsl.w	r6, r1, r5
 800529e:	1d72      	adds	r2, r6, #5
 80052a0:	0092      	lsls	r2, r2, #2
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 fb60 	bl	8005968 <_calloc_r>
 80052a8:	b160      	cbz	r0, 80052c4 <_Balloc+0x64>
 80052aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052ae:	e00e      	b.n	80052ce <_Balloc+0x6e>
 80052b0:	2221      	movs	r2, #33	; 0x21
 80052b2:	2104      	movs	r1, #4
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 fb57 	bl	8005968 <_calloc_r>
 80052ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052bc:	60f0      	str	r0, [r6, #12]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e4      	bne.n	800528e <_Balloc+0x2e>
 80052c4:	2000      	movs	r0, #0
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	6802      	ldr	r2, [r0, #0]
 80052ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052ce:	2300      	movs	r3, #0
 80052d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052d4:	e7f7      	b.n	80052c6 <_Balloc+0x66>
 80052d6:	bf00      	nop
 80052d8:	08012dd6 	.word	0x08012dd6
 80052dc:	08012faa 	.word	0x08012faa

080052e0 <_Bfree>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80052e4:	4605      	mov	r5, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	b976      	cbnz	r6, 8005308 <_Bfree+0x28>
 80052ea:	2010      	movs	r0, #16
 80052ec:	f7ff ff90 	bl	8005210 <malloc>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6268      	str	r0, [r5, #36]	; 0x24
 80052f4:	b920      	cbnz	r0, 8005300 <_Bfree+0x20>
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <_Bfree+0x3c>)
 80052f8:	4809      	ldr	r0, [pc, #36]	; (8005320 <_Bfree+0x40>)
 80052fa:	218a      	movs	r1, #138	; 0x8a
 80052fc:	f7fe feb8 	bl	8004070 <__assert_func>
 8005300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005304:	6006      	str	r6, [r0, #0]
 8005306:	60c6      	str	r6, [r0, #12]
 8005308:	b13c      	cbz	r4, 800531a <_Bfree+0x3a>
 800530a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800530c:	6862      	ldr	r2, [r4, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005314:	6021      	str	r1, [r4, #0]
 8005316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	08012dd6 	.word	0x08012dd6
 8005320:	08012faa 	.word	0x08012faa

08005324 <__multadd>:
 8005324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005328:	690d      	ldr	r5, [r1, #16]
 800532a:	4607      	mov	r7, r0
 800532c:	460c      	mov	r4, r1
 800532e:	461e      	mov	r6, r3
 8005330:	f101 0c14 	add.w	ip, r1, #20
 8005334:	2000      	movs	r0, #0
 8005336:	f8dc 3000 	ldr.w	r3, [ip]
 800533a:	b299      	uxth	r1, r3
 800533c:	fb02 6101 	mla	r1, r2, r1, r6
 8005340:	0c1e      	lsrs	r6, r3, #16
 8005342:	0c0b      	lsrs	r3, r1, #16
 8005344:	fb02 3306 	mla	r3, r2, r6, r3
 8005348:	b289      	uxth	r1, r1
 800534a:	3001      	adds	r0, #1
 800534c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005350:	4285      	cmp	r5, r0
 8005352:	f84c 1b04 	str.w	r1, [ip], #4
 8005356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800535a:	dcec      	bgt.n	8005336 <__multadd+0x12>
 800535c:	b30e      	cbz	r6, 80053a2 <__multadd+0x7e>
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	42ab      	cmp	r3, r5
 8005362:	dc19      	bgt.n	8005398 <__multadd+0x74>
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	4638      	mov	r0, r7
 8005368:	3101      	adds	r1, #1
 800536a:	f7ff ff79 	bl	8005260 <_Balloc>
 800536e:	4680      	mov	r8, r0
 8005370:	b928      	cbnz	r0, 800537e <__multadd+0x5a>
 8005372:	4602      	mov	r2, r0
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <__multadd+0x84>)
 8005376:	480d      	ldr	r0, [pc, #52]	; (80053ac <__multadd+0x88>)
 8005378:	21b5      	movs	r1, #181	; 0xb5
 800537a:	f7fe fe79 	bl	8004070 <__assert_func>
 800537e:	6922      	ldr	r2, [r4, #16]
 8005380:	3202      	adds	r2, #2
 8005382:	f104 010c 	add.w	r1, r4, #12
 8005386:	0092      	lsls	r2, r2, #2
 8005388:	300c      	adds	r0, #12
 800538a:	f7ff ff5b 	bl	8005244 <memcpy>
 800538e:	4621      	mov	r1, r4
 8005390:	4638      	mov	r0, r7
 8005392:	f7ff ffa5 	bl	80052e0 <_Bfree>
 8005396:	4644      	mov	r4, r8
 8005398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800539c:	3501      	adds	r5, #1
 800539e:	615e      	str	r6, [r3, #20]
 80053a0:	6125      	str	r5, [r4, #16]
 80053a2:	4620      	mov	r0, r4
 80053a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a8:	08012f32 	.word	0x08012f32
 80053ac:	08012faa 	.word	0x08012faa

080053b0 <__hi0bits>:
 80053b0:	0c03      	lsrs	r3, r0, #16
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	b9d3      	cbnz	r3, 80053ec <__hi0bits+0x3c>
 80053b6:	0400      	lsls	r0, r0, #16
 80053b8:	2310      	movs	r3, #16
 80053ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80053be:	bf04      	itt	eq
 80053c0:	0200      	lsleq	r0, r0, #8
 80053c2:	3308      	addeq	r3, #8
 80053c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80053c8:	bf04      	itt	eq
 80053ca:	0100      	lsleq	r0, r0, #4
 80053cc:	3304      	addeq	r3, #4
 80053ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80053d2:	bf04      	itt	eq
 80053d4:	0080      	lsleq	r0, r0, #2
 80053d6:	3302      	addeq	r3, #2
 80053d8:	2800      	cmp	r0, #0
 80053da:	db05      	blt.n	80053e8 <__hi0bits+0x38>
 80053dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80053e0:	f103 0301 	add.w	r3, r3, #1
 80053e4:	bf08      	it	eq
 80053e6:	2320      	moveq	r3, #32
 80053e8:	4618      	mov	r0, r3
 80053ea:	4770      	bx	lr
 80053ec:	2300      	movs	r3, #0
 80053ee:	e7e4      	b.n	80053ba <__hi0bits+0xa>

080053f0 <__lo0bits>:
 80053f0:	6803      	ldr	r3, [r0, #0]
 80053f2:	f013 0207 	ands.w	r2, r3, #7
 80053f6:	4601      	mov	r1, r0
 80053f8:	d00b      	beq.n	8005412 <__lo0bits+0x22>
 80053fa:	07da      	lsls	r2, r3, #31
 80053fc:	d423      	bmi.n	8005446 <__lo0bits+0x56>
 80053fe:	0798      	lsls	r0, r3, #30
 8005400:	bf49      	itett	mi
 8005402:	085b      	lsrmi	r3, r3, #1
 8005404:	089b      	lsrpl	r3, r3, #2
 8005406:	2001      	movmi	r0, #1
 8005408:	600b      	strmi	r3, [r1, #0]
 800540a:	bf5c      	itt	pl
 800540c:	600b      	strpl	r3, [r1, #0]
 800540e:	2002      	movpl	r0, #2
 8005410:	4770      	bx	lr
 8005412:	b298      	uxth	r0, r3
 8005414:	b9a8      	cbnz	r0, 8005442 <__lo0bits+0x52>
 8005416:	0c1b      	lsrs	r3, r3, #16
 8005418:	2010      	movs	r0, #16
 800541a:	b2da      	uxtb	r2, r3
 800541c:	b90a      	cbnz	r2, 8005422 <__lo0bits+0x32>
 800541e:	3008      	adds	r0, #8
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	071a      	lsls	r2, r3, #28
 8005424:	bf04      	itt	eq
 8005426:	091b      	lsreq	r3, r3, #4
 8005428:	3004      	addeq	r0, #4
 800542a:	079a      	lsls	r2, r3, #30
 800542c:	bf04      	itt	eq
 800542e:	089b      	lsreq	r3, r3, #2
 8005430:	3002      	addeq	r0, #2
 8005432:	07da      	lsls	r2, r3, #31
 8005434:	d403      	bmi.n	800543e <__lo0bits+0x4e>
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	f100 0001 	add.w	r0, r0, #1
 800543c:	d005      	beq.n	800544a <__lo0bits+0x5a>
 800543e:	600b      	str	r3, [r1, #0]
 8005440:	4770      	bx	lr
 8005442:	4610      	mov	r0, r2
 8005444:	e7e9      	b.n	800541a <__lo0bits+0x2a>
 8005446:	2000      	movs	r0, #0
 8005448:	4770      	bx	lr
 800544a:	2020      	movs	r0, #32
 800544c:	4770      	bx	lr
	...

08005450 <__i2b>:
 8005450:	b510      	push	{r4, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	2101      	movs	r1, #1
 8005456:	f7ff ff03 	bl	8005260 <_Balloc>
 800545a:	4602      	mov	r2, r0
 800545c:	b928      	cbnz	r0, 800546a <__i2b+0x1a>
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <__i2b+0x24>)
 8005460:	4805      	ldr	r0, [pc, #20]	; (8005478 <__i2b+0x28>)
 8005462:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005466:	f7fe fe03 	bl	8004070 <__assert_func>
 800546a:	2301      	movs	r3, #1
 800546c:	6144      	str	r4, [r0, #20]
 800546e:	6103      	str	r3, [r0, #16]
 8005470:	bd10      	pop	{r4, pc}
 8005472:	bf00      	nop
 8005474:	08012f32 	.word	0x08012f32
 8005478:	08012faa 	.word	0x08012faa

0800547c <__multiply>:
 800547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	4691      	mov	r9, r2
 8005482:	690a      	ldr	r2, [r1, #16]
 8005484:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005488:	429a      	cmp	r2, r3
 800548a:	bfb8      	it	lt
 800548c:	460b      	movlt	r3, r1
 800548e:	460c      	mov	r4, r1
 8005490:	bfbc      	itt	lt
 8005492:	464c      	movlt	r4, r9
 8005494:	4699      	movlt	r9, r3
 8005496:	6927      	ldr	r7, [r4, #16]
 8005498:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800549c:	68a3      	ldr	r3, [r4, #8]
 800549e:	6861      	ldr	r1, [r4, #4]
 80054a0:	eb07 060a 	add.w	r6, r7, sl
 80054a4:	42b3      	cmp	r3, r6
 80054a6:	b085      	sub	sp, #20
 80054a8:	bfb8      	it	lt
 80054aa:	3101      	addlt	r1, #1
 80054ac:	f7ff fed8 	bl	8005260 <_Balloc>
 80054b0:	b930      	cbnz	r0, 80054c0 <__multiply+0x44>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b44      	ldr	r3, [pc, #272]	; (80055c8 <__multiply+0x14c>)
 80054b6:	4845      	ldr	r0, [pc, #276]	; (80055cc <__multiply+0x150>)
 80054b8:	f240 115d 	movw	r1, #349	; 0x15d
 80054bc:	f7fe fdd8 	bl	8004070 <__assert_func>
 80054c0:	f100 0514 	add.w	r5, r0, #20
 80054c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054c8:	462b      	mov	r3, r5
 80054ca:	2200      	movs	r2, #0
 80054cc:	4543      	cmp	r3, r8
 80054ce:	d321      	bcc.n	8005514 <__multiply+0x98>
 80054d0:	f104 0314 	add.w	r3, r4, #20
 80054d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80054d8:	f109 0314 	add.w	r3, r9, #20
 80054dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054e0:	9202      	str	r2, [sp, #8]
 80054e2:	1b3a      	subs	r2, r7, r4
 80054e4:	3a15      	subs	r2, #21
 80054e6:	f022 0203 	bic.w	r2, r2, #3
 80054ea:	3204      	adds	r2, #4
 80054ec:	f104 0115 	add.w	r1, r4, #21
 80054f0:	428f      	cmp	r7, r1
 80054f2:	bf38      	it	cc
 80054f4:	2204      	movcc	r2, #4
 80054f6:	9201      	str	r2, [sp, #4]
 80054f8:	9a02      	ldr	r2, [sp, #8]
 80054fa:	9303      	str	r3, [sp, #12]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d80c      	bhi.n	800551a <__multiply+0x9e>
 8005500:	2e00      	cmp	r6, #0
 8005502:	dd03      	ble.n	800550c <__multiply+0x90>
 8005504:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05a      	beq.n	80055c2 <__multiply+0x146>
 800550c:	6106      	str	r6, [r0, #16]
 800550e:	b005      	add	sp, #20
 8005510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005514:	f843 2b04 	str.w	r2, [r3], #4
 8005518:	e7d8      	b.n	80054cc <__multiply+0x50>
 800551a:	f8b3 a000 	ldrh.w	sl, [r3]
 800551e:	f1ba 0f00 	cmp.w	sl, #0
 8005522:	d024      	beq.n	800556e <__multiply+0xf2>
 8005524:	f104 0e14 	add.w	lr, r4, #20
 8005528:	46a9      	mov	r9, r5
 800552a:	f04f 0c00 	mov.w	ip, #0
 800552e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005532:	f8d9 1000 	ldr.w	r1, [r9]
 8005536:	fa1f fb82 	uxth.w	fp, r2
 800553a:	b289      	uxth	r1, r1
 800553c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005540:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005544:	f8d9 2000 	ldr.w	r2, [r9]
 8005548:	4461      	add	r1, ip
 800554a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800554e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005552:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005556:	b289      	uxth	r1, r1
 8005558:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800555c:	4577      	cmp	r7, lr
 800555e:	f849 1b04 	str.w	r1, [r9], #4
 8005562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005566:	d8e2      	bhi.n	800552e <__multiply+0xb2>
 8005568:	9a01      	ldr	r2, [sp, #4]
 800556a:	f845 c002 	str.w	ip, [r5, r2]
 800556e:	9a03      	ldr	r2, [sp, #12]
 8005570:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005574:	3304      	adds	r3, #4
 8005576:	f1b9 0f00 	cmp.w	r9, #0
 800557a:	d020      	beq.n	80055be <__multiply+0x142>
 800557c:	6829      	ldr	r1, [r5, #0]
 800557e:	f104 0c14 	add.w	ip, r4, #20
 8005582:	46ae      	mov	lr, r5
 8005584:	f04f 0a00 	mov.w	sl, #0
 8005588:	f8bc b000 	ldrh.w	fp, [ip]
 800558c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005590:	fb09 220b 	mla	r2, r9, fp, r2
 8005594:	4492      	add	sl, r2
 8005596:	b289      	uxth	r1, r1
 8005598:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800559c:	f84e 1b04 	str.w	r1, [lr], #4
 80055a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80055a4:	f8be 1000 	ldrh.w	r1, [lr]
 80055a8:	0c12      	lsrs	r2, r2, #16
 80055aa:	fb09 1102 	mla	r1, r9, r2, r1
 80055ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80055b2:	4567      	cmp	r7, ip
 80055b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055b8:	d8e6      	bhi.n	8005588 <__multiply+0x10c>
 80055ba:	9a01      	ldr	r2, [sp, #4]
 80055bc:	50a9      	str	r1, [r5, r2]
 80055be:	3504      	adds	r5, #4
 80055c0:	e79a      	b.n	80054f8 <__multiply+0x7c>
 80055c2:	3e01      	subs	r6, #1
 80055c4:	e79c      	b.n	8005500 <__multiply+0x84>
 80055c6:	bf00      	nop
 80055c8:	08012f32 	.word	0x08012f32
 80055cc:	08012faa 	.word	0x08012faa

080055d0 <__pow5mult>:
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d4:	4615      	mov	r5, r2
 80055d6:	f012 0203 	ands.w	r2, r2, #3
 80055da:	4606      	mov	r6, r0
 80055dc:	460f      	mov	r7, r1
 80055de:	d007      	beq.n	80055f0 <__pow5mult+0x20>
 80055e0:	4c25      	ldr	r4, [pc, #148]	; (8005678 <__pow5mult+0xa8>)
 80055e2:	3a01      	subs	r2, #1
 80055e4:	2300      	movs	r3, #0
 80055e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055ea:	f7ff fe9b 	bl	8005324 <__multadd>
 80055ee:	4607      	mov	r7, r0
 80055f0:	10ad      	asrs	r5, r5, #2
 80055f2:	d03d      	beq.n	8005670 <__pow5mult+0xa0>
 80055f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80055f6:	b97c      	cbnz	r4, 8005618 <__pow5mult+0x48>
 80055f8:	2010      	movs	r0, #16
 80055fa:	f7ff fe09 	bl	8005210 <malloc>
 80055fe:	4602      	mov	r2, r0
 8005600:	6270      	str	r0, [r6, #36]	; 0x24
 8005602:	b928      	cbnz	r0, 8005610 <__pow5mult+0x40>
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <__pow5mult+0xac>)
 8005606:	481e      	ldr	r0, [pc, #120]	; (8005680 <__pow5mult+0xb0>)
 8005608:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800560c:	f7fe fd30 	bl	8004070 <__assert_func>
 8005610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005614:	6004      	str	r4, [r0, #0]
 8005616:	60c4      	str	r4, [r0, #12]
 8005618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800561c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005620:	b94c      	cbnz	r4, 8005636 <__pow5mult+0x66>
 8005622:	f240 2171 	movw	r1, #625	; 0x271
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ff12 	bl	8005450 <__i2b>
 800562c:	2300      	movs	r3, #0
 800562e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005632:	4604      	mov	r4, r0
 8005634:	6003      	str	r3, [r0, #0]
 8005636:	f04f 0900 	mov.w	r9, #0
 800563a:	07eb      	lsls	r3, r5, #31
 800563c:	d50a      	bpl.n	8005654 <__pow5mult+0x84>
 800563e:	4639      	mov	r1, r7
 8005640:	4622      	mov	r2, r4
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff ff1a 	bl	800547c <__multiply>
 8005648:	4639      	mov	r1, r7
 800564a:	4680      	mov	r8, r0
 800564c:	4630      	mov	r0, r6
 800564e:	f7ff fe47 	bl	80052e0 <_Bfree>
 8005652:	4647      	mov	r7, r8
 8005654:	106d      	asrs	r5, r5, #1
 8005656:	d00b      	beq.n	8005670 <__pow5mult+0xa0>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	b938      	cbnz	r0, 800566c <__pow5mult+0x9c>
 800565c:	4622      	mov	r2, r4
 800565e:	4621      	mov	r1, r4
 8005660:	4630      	mov	r0, r6
 8005662:	f7ff ff0b 	bl	800547c <__multiply>
 8005666:	6020      	str	r0, [r4, #0]
 8005668:	f8c0 9000 	str.w	r9, [r0]
 800566c:	4604      	mov	r4, r0
 800566e:	e7e4      	b.n	800563a <__pow5mult+0x6a>
 8005670:	4638      	mov	r0, r7
 8005672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005676:	bf00      	nop
 8005678:	08013118 	.word	0x08013118
 800567c:	08012dd6 	.word	0x08012dd6
 8005680:	08012faa 	.word	0x08012faa

08005684 <__lshift>:
 8005684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	460c      	mov	r4, r1
 800568a:	6849      	ldr	r1, [r1, #4]
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005692:	68a3      	ldr	r3, [r4, #8]
 8005694:	4607      	mov	r7, r0
 8005696:	4691      	mov	r9, r2
 8005698:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800569c:	f108 0601 	add.w	r6, r8, #1
 80056a0:	42b3      	cmp	r3, r6
 80056a2:	db0b      	blt.n	80056bc <__lshift+0x38>
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff fddb 	bl	8005260 <_Balloc>
 80056aa:	4605      	mov	r5, r0
 80056ac:	b948      	cbnz	r0, 80056c2 <__lshift+0x3e>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b2a      	ldr	r3, [pc, #168]	; (800575c <__lshift+0xd8>)
 80056b2:	482b      	ldr	r0, [pc, #172]	; (8005760 <__lshift+0xdc>)
 80056b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80056b8:	f7fe fcda 	bl	8004070 <__assert_func>
 80056bc:	3101      	adds	r1, #1
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	e7ee      	b.n	80056a0 <__lshift+0x1c>
 80056c2:	2300      	movs	r3, #0
 80056c4:	f100 0114 	add.w	r1, r0, #20
 80056c8:	f100 0210 	add.w	r2, r0, #16
 80056cc:	4618      	mov	r0, r3
 80056ce:	4553      	cmp	r3, sl
 80056d0:	db37      	blt.n	8005742 <__lshift+0xbe>
 80056d2:	6920      	ldr	r0, [r4, #16]
 80056d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056d8:	f104 0314 	add.w	r3, r4, #20
 80056dc:	f019 091f 	ands.w	r9, r9, #31
 80056e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80056e8:	d02f      	beq.n	800574a <__lshift+0xc6>
 80056ea:	f1c9 0e20 	rsb	lr, r9, #32
 80056ee:	468a      	mov	sl, r1
 80056f0:	f04f 0c00 	mov.w	ip, #0
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	fa02 f209 	lsl.w	r2, r2, r9
 80056fa:	ea42 020c 	orr.w	r2, r2, ip
 80056fe:	f84a 2b04 	str.w	r2, [sl], #4
 8005702:	f853 2b04 	ldr.w	r2, [r3], #4
 8005706:	4298      	cmp	r0, r3
 8005708:	fa22 fc0e 	lsr.w	ip, r2, lr
 800570c:	d8f2      	bhi.n	80056f4 <__lshift+0x70>
 800570e:	1b03      	subs	r3, r0, r4
 8005710:	3b15      	subs	r3, #21
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	3304      	adds	r3, #4
 8005718:	f104 0215 	add.w	r2, r4, #21
 800571c:	4290      	cmp	r0, r2
 800571e:	bf38      	it	cc
 8005720:	2304      	movcc	r3, #4
 8005722:	f841 c003 	str.w	ip, [r1, r3]
 8005726:	f1bc 0f00 	cmp.w	ip, #0
 800572a:	d001      	beq.n	8005730 <__lshift+0xac>
 800572c:	f108 0602 	add.w	r6, r8, #2
 8005730:	3e01      	subs	r6, #1
 8005732:	4638      	mov	r0, r7
 8005734:	612e      	str	r6, [r5, #16]
 8005736:	4621      	mov	r1, r4
 8005738:	f7ff fdd2 	bl	80052e0 <_Bfree>
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005742:	f842 0f04 	str.w	r0, [r2, #4]!
 8005746:	3301      	adds	r3, #1
 8005748:	e7c1      	b.n	80056ce <__lshift+0x4a>
 800574a:	3904      	subs	r1, #4
 800574c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005750:	f841 2f04 	str.w	r2, [r1, #4]!
 8005754:	4298      	cmp	r0, r3
 8005756:	d8f9      	bhi.n	800574c <__lshift+0xc8>
 8005758:	e7ea      	b.n	8005730 <__lshift+0xac>
 800575a:	bf00      	nop
 800575c:	08012f32 	.word	0x08012f32
 8005760:	08012faa 	.word	0x08012faa

08005764 <__mcmp>:
 8005764:	b530      	push	{r4, r5, lr}
 8005766:	6902      	ldr	r2, [r0, #16]
 8005768:	690c      	ldr	r4, [r1, #16]
 800576a:	1b12      	subs	r2, r2, r4
 800576c:	d10e      	bne.n	800578c <__mcmp+0x28>
 800576e:	f100 0314 	add.w	r3, r0, #20
 8005772:	3114      	adds	r1, #20
 8005774:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005778:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800577c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005780:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005784:	42a5      	cmp	r5, r4
 8005786:	d003      	beq.n	8005790 <__mcmp+0x2c>
 8005788:	d305      	bcc.n	8005796 <__mcmp+0x32>
 800578a:	2201      	movs	r2, #1
 800578c:	4610      	mov	r0, r2
 800578e:	bd30      	pop	{r4, r5, pc}
 8005790:	4283      	cmp	r3, r0
 8005792:	d3f3      	bcc.n	800577c <__mcmp+0x18>
 8005794:	e7fa      	b.n	800578c <__mcmp+0x28>
 8005796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800579a:	e7f7      	b.n	800578c <__mcmp+0x28>

0800579c <__mdiff>:
 800579c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	460c      	mov	r4, r1
 80057a2:	4606      	mov	r6, r0
 80057a4:	4611      	mov	r1, r2
 80057a6:	4620      	mov	r0, r4
 80057a8:	4690      	mov	r8, r2
 80057aa:	f7ff ffdb 	bl	8005764 <__mcmp>
 80057ae:	1e05      	subs	r5, r0, #0
 80057b0:	d110      	bne.n	80057d4 <__mdiff+0x38>
 80057b2:	4629      	mov	r1, r5
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff fd53 	bl	8005260 <_Balloc>
 80057ba:	b930      	cbnz	r0, 80057ca <__mdiff+0x2e>
 80057bc:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <__mdiff+0x10c>)
 80057be:	4602      	mov	r2, r0
 80057c0:	f240 2132 	movw	r1, #562	; 0x232
 80057c4:	4839      	ldr	r0, [pc, #228]	; (80058ac <__mdiff+0x110>)
 80057c6:	f7fe fc53 	bl	8004070 <__assert_func>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d4:	bfa4      	itt	ge
 80057d6:	4643      	movge	r3, r8
 80057d8:	46a0      	movge	r8, r4
 80057da:	4630      	mov	r0, r6
 80057dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80057e0:	bfa6      	itte	ge
 80057e2:	461c      	movge	r4, r3
 80057e4:	2500      	movge	r5, #0
 80057e6:	2501      	movlt	r5, #1
 80057e8:	f7ff fd3a 	bl	8005260 <_Balloc>
 80057ec:	b920      	cbnz	r0, 80057f8 <__mdiff+0x5c>
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <__mdiff+0x10c>)
 80057f0:	4602      	mov	r2, r0
 80057f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80057f6:	e7e5      	b.n	80057c4 <__mdiff+0x28>
 80057f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80057fc:	6926      	ldr	r6, [r4, #16]
 80057fe:	60c5      	str	r5, [r0, #12]
 8005800:	f104 0914 	add.w	r9, r4, #20
 8005804:	f108 0514 	add.w	r5, r8, #20
 8005808:	f100 0e14 	add.w	lr, r0, #20
 800580c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005810:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005814:	f108 0210 	add.w	r2, r8, #16
 8005818:	46f2      	mov	sl, lr
 800581a:	2100      	movs	r1, #0
 800581c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005820:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005824:	fa1f f883 	uxth.w	r8, r3
 8005828:	fa11 f18b 	uxtah	r1, r1, fp
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	eba1 0808 	sub.w	r8, r1, r8
 8005832:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005836:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800583a:	fa1f f888 	uxth.w	r8, r8
 800583e:	1419      	asrs	r1, r3, #16
 8005840:	454e      	cmp	r6, r9
 8005842:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005846:	f84a 3b04 	str.w	r3, [sl], #4
 800584a:	d8e7      	bhi.n	800581c <__mdiff+0x80>
 800584c:	1b33      	subs	r3, r6, r4
 800584e:	3b15      	subs	r3, #21
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	3304      	adds	r3, #4
 8005856:	3415      	adds	r4, #21
 8005858:	42a6      	cmp	r6, r4
 800585a:	bf38      	it	cc
 800585c:	2304      	movcc	r3, #4
 800585e:	441d      	add	r5, r3
 8005860:	4473      	add	r3, lr
 8005862:	469e      	mov	lr, r3
 8005864:	462e      	mov	r6, r5
 8005866:	4566      	cmp	r6, ip
 8005868:	d30e      	bcc.n	8005888 <__mdiff+0xec>
 800586a:	f10c 0203 	add.w	r2, ip, #3
 800586e:	1b52      	subs	r2, r2, r5
 8005870:	f022 0203 	bic.w	r2, r2, #3
 8005874:	3d03      	subs	r5, #3
 8005876:	45ac      	cmp	ip, r5
 8005878:	bf38      	it	cc
 800587a:	2200      	movcc	r2, #0
 800587c:	441a      	add	r2, r3
 800587e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005882:	b17b      	cbz	r3, 80058a4 <__mdiff+0x108>
 8005884:	6107      	str	r7, [r0, #16]
 8005886:	e7a3      	b.n	80057d0 <__mdiff+0x34>
 8005888:	f856 8b04 	ldr.w	r8, [r6], #4
 800588c:	fa11 f288 	uxtah	r2, r1, r8
 8005890:	1414      	asrs	r4, r2, #16
 8005892:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005896:	b292      	uxth	r2, r2
 8005898:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800589c:	f84e 2b04 	str.w	r2, [lr], #4
 80058a0:	1421      	asrs	r1, r4, #16
 80058a2:	e7e0      	b.n	8005866 <__mdiff+0xca>
 80058a4:	3f01      	subs	r7, #1
 80058a6:	e7ea      	b.n	800587e <__mdiff+0xe2>
 80058a8:	08012f32 	.word	0x08012f32
 80058ac:	08012faa 	.word	0x08012faa

080058b0 <__d2b>:
 80058b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	4689      	mov	r9, r1
 80058b6:	2101      	movs	r1, #1
 80058b8:	ec57 6b10 	vmov	r6, r7, d0
 80058bc:	4690      	mov	r8, r2
 80058be:	f7ff fccf 	bl	8005260 <_Balloc>
 80058c2:	4604      	mov	r4, r0
 80058c4:	b930      	cbnz	r0, 80058d4 <__d2b+0x24>
 80058c6:	4602      	mov	r2, r0
 80058c8:	4b25      	ldr	r3, [pc, #148]	; (8005960 <__d2b+0xb0>)
 80058ca:	4826      	ldr	r0, [pc, #152]	; (8005964 <__d2b+0xb4>)
 80058cc:	f240 310a 	movw	r1, #778	; 0x30a
 80058d0:	f7fe fbce 	bl	8004070 <__assert_func>
 80058d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80058d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058dc:	bb35      	cbnz	r5, 800592c <__d2b+0x7c>
 80058de:	2e00      	cmp	r6, #0
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	d028      	beq.n	8005936 <__d2b+0x86>
 80058e4:	4668      	mov	r0, sp
 80058e6:	9600      	str	r6, [sp, #0]
 80058e8:	f7ff fd82 	bl	80053f0 <__lo0bits>
 80058ec:	9900      	ldr	r1, [sp, #0]
 80058ee:	b300      	cbz	r0, 8005932 <__d2b+0x82>
 80058f0:	9a01      	ldr	r2, [sp, #4]
 80058f2:	f1c0 0320 	rsb	r3, r0, #32
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	430b      	orrs	r3, r1
 80058fc:	40c2      	lsrs	r2, r0
 80058fe:	6163      	str	r3, [r4, #20]
 8005900:	9201      	str	r2, [sp, #4]
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	61a3      	str	r3, [r4, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf14      	ite	ne
 800590a:	2202      	movne	r2, #2
 800590c:	2201      	moveq	r2, #1
 800590e:	6122      	str	r2, [r4, #16]
 8005910:	b1d5      	cbz	r5, 8005948 <__d2b+0x98>
 8005912:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005916:	4405      	add	r5, r0
 8005918:	f8c9 5000 	str.w	r5, [r9]
 800591c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005920:	f8c8 0000 	str.w	r0, [r8]
 8005924:	4620      	mov	r0, r4
 8005926:	b003      	add	sp, #12
 8005928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800592c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005930:	e7d5      	b.n	80058de <__d2b+0x2e>
 8005932:	6161      	str	r1, [r4, #20]
 8005934:	e7e5      	b.n	8005902 <__d2b+0x52>
 8005936:	a801      	add	r0, sp, #4
 8005938:	f7ff fd5a 	bl	80053f0 <__lo0bits>
 800593c:	9b01      	ldr	r3, [sp, #4]
 800593e:	6163      	str	r3, [r4, #20]
 8005940:	2201      	movs	r2, #1
 8005942:	6122      	str	r2, [r4, #16]
 8005944:	3020      	adds	r0, #32
 8005946:	e7e3      	b.n	8005910 <__d2b+0x60>
 8005948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800594c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005950:	f8c9 0000 	str.w	r0, [r9]
 8005954:	6918      	ldr	r0, [r3, #16]
 8005956:	f7ff fd2b 	bl	80053b0 <__hi0bits>
 800595a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800595e:	e7df      	b.n	8005920 <__d2b+0x70>
 8005960:	08012f32 	.word	0x08012f32
 8005964:	08012faa 	.word	0x08012faa

08005968 <_calloc_r>:
 8005968:	b513      	push	{r0, r1, r4, lr}
 800596a:	434a      	muls	r2, r1
 800596c:	4611      	mov	r1, r2
 800596e:	9201      	str	r2, [sp, #4]
 8005970:	f000 f856 	bl	8005a20 <_malloc_r>
 8005974:	4604      	mov	r4, r0
 8005976:	b118      	cbz	r0, 8005980 <_calloc_r+0x18>
 8005978:	9a01      	ldr	r2, [sp, #4]
 800597a:	2100      	movs	r1, #0
 800597c:	f7fd fd68 	bl	8003450 <memset>
 8005980:	4620      	mov	r0, r4
 8005982:	b002      	add	sp, #8
 8005984:	bd10      	pop	{r4, pc}
	...

08005988 <_free_r>:
 8005988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800598a:	2900      	cmp	r1, #0
 800598c:	d044      	beq.n	8005a18 <_free_r+0x90>
 800598e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005992:	9001      	str	r0, [sp, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f1a1 0404 	sub.w	r4, r1, #4
 800599a:	bfb8      	it	lt
 800599c:	18e4      	addlt	r4, r4, r3
 800599e:	f000 fb27 	bl	8005ff0 <__malloc_lock>
 80059a2:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <_free_r+0x94>)
 80059a4:	9801      	ldr	r0, [sp, #4]
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	b933      	cbnz	r3, 80059b8 <_free_r+0x30>
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	6014      	str	r4, [r2, #0]
 80059ae:	b003      	add	sp, #12
 80059b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b4:	f000 bb22 	b.w	8005ffc <__malloc_unlock>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d908      	bls.n	80059ce <_free_r+0x46>
 80059bc:	6825      	ldr	r5, [r4, #0]
 80059be:	1961      	adds	r1, r4, r5
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bf01      	itttt	eq
 80059c4:	6819      	ldreq	r1, [r3, #0]
 80059c6:	685b      	ldreq	r3, [r3, #4]
 80059c8:	1949      	addeq	r1, r1, r5
 80059ca:	6021      	streq	r1, [r4, #0]
 80059cc:	e7ed      	b.n	80059aa <_free_r+0x22>
 80059ce:	461a      	mov	r2, r3
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	b10b      	cbz	r3, 80059d8 <_free_r+0x50>
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d9fa      	bls.n	80059ce <_free_r+0x46>
 80059d8:	6811      	ldr	r1, [r2, #0]
 80059da:	1855      	adds	r5, r2, r1
 80059dc:	42a5      	cmp	r5, r4
 80059de:	d10b      	bne.n	80059f8 <_free_r+0x70>
 80059e0:	6824      	ldr	r4, [r4, #0]
 80059e2:	4421      	add	r1, r4
 80059e4:	1854      	adds	r4, r2, r1
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	d1e0      	bne.n	80059ae <_free_r+0x26>
 80059ec:	681c      	ldr	r4, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	4421      	add	r1, r4
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	e7da      	b.n	80059ae <_free_r+0x26>
 80059f8:	d902      	bls.n	8005a00 <_free_r+0x78>
 80059fa:	230c      	movs	r3, #12
 80059fc:	6003      	str	r3, [r0, #0]
 80059fe:	e7d6      	b.n	80059ae <_free_r+0x26>
 8005a00:	6825      	ldr	r5, [r4, #0]
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	428b      	cmp	r3, r1
 8005a06:	bf04      	itt	eq
 8005a08:	6819      	ldreq	r1, [r3, #0]
 8005a0a:	685b      	ldreq	r3, [r3, #4]
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	bf04      	itt	eq
 8005a10:	1949      	addeq	r1, r1, r5
 8005a12:	6021      	streq	r1, [r4, #0]
 8005a14:	6054      	str	r4, [r2, #4]
 8005a16:	e7ca      	b.n	80059ae <_free_r+0x26>
 8005a18:	b003      	add	sp, #12
 8005a1a:	bd30      	pop	{r4, r5, pc}
 8005a1c:	20000c04 	.word	0x20000c04

08005a20 <_malloc_r>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	1ccd      	adds	r5, r1, #3
 8005a24:	f025 0503 	bic.w	r5, r5, #3
 8005a28:	3508      	adds	r5, #8
 8005a2a:	2d0c      	cmp	r5, #12
 8005a2c:	bf38      	it	cc
 8005a2e:	250c      	movcc	r5, #12
 8005a30:	2d00      	cmp	r5, #0
 8005a32:	4606      	mov	r6, r0
 8005a34:	db01      	blt.n	8005a3a <_malloc_r+0x1a>
 8005a36:	42a9      	cmp	r1, r5
 8005a38:	d903      	bls.n	8005a42 <_malloc_r+0x22>
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	6033      	str	r3, [r6, #0]
 8005a3e:	2000      	movs	r0, #0
 8005a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a42:	f000 fad5 	bl	8005ff0 <__malloc_lock>
 8005a46:	4921      	ldr	r1, [pc, #132]	; (8005acc <_malloc_r+0xac>)
 8005a48:	680a      	ldr	r2, [r1, #0]
 8005a4a:	4614      	mov	r4, r2
 8005a4c:	b99c      	cbnz	r4, 8005a76 <_malloc_r+0x56>
 8005a4e:	4f20      	ldr	r7, [pc, #128]	; (8005ad0 <_malloc_r+0xb0>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	b923      	cbnz	r3, 8005a5e <_malloc_r+0x3e>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4630      	mov	r0, r6
 8005a58:	f7fd f85c 	bl	8002b14 <_sbrk_r>
 8005a5c:	6038      	str	r0, [r7, #0]
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7fd f857 	bl	8002b14 <_sbrk_r>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	d123      	bne.n	8005ab2 <_malloc_r+0x92>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f000 fac4 	bl	8005ffc <__malloc_unlock>
 8005a74:	e7e3      	b.n	8005a3e <_malloc_r+0x1e>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	1b5b      	subs	r3, r3, r5
 8005a7a:	d417      	bmi.n	8005aac <_malloc_r+0x8c>
 8005a7c:	2b0b      	cmp	r3, #11
 8005a7e:	d903      	bls.n	8005a88 <_malloc_r+0x68>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	441c      	add	r4, r3
 8005a84:	6025      	str	r5, [r4, #0]
 8005a86:	e004      	b.n	8005a92 <_malloc_r+0x72>
 8005a88:	6863      	ldr	r3, [r4, #4]
 8005a8a:	42a2      	cmp	r2, r4
 8005a8c:	bf0c      	ite	eq
 8005a8e:	600b      	streq	r3, [r1, #0]
 8005a90:	6053      	strne	r3, [r2, #4]
 8005a92:	4630      	mov	r0, r6
 8005a94:	f000 fab2 	bl	8005ffc <__malloc_unlock>
 8005a98:	f104 000b 	add.w	r0, r4, #11
 8005a9c:	1d23      	adds	r3, r4, #4
 8005a9e:	f020 0007 	bic.w	r0, r0, #7
 8005aa2:	1ac2      	subs	r2, r0, r3
 8005aa4:	d0cc      	beq.n	8005a40 <_malloc_r+0x20>
 8005aa6:	1a1b      	subs	r3, r3, r0
 8005aa8:	50a3      	str	r3, [r4, r2]
 8005aaa:	e7c9      	b.n	8005a40 <_malloc_r+0x20>
 8005aac:	4622      	mov	r2, r4
 8005aae:	6864      	ldr	r4, [r4, #4]
 8005ab0:	e7cc      	b.n	8005a4c <_malloc_r+0x2c>
 8005ab2:	1cc4      	adds	r4, r0, #3
 8005ab4:	f024 0403 	bic.w	r4, r4, #3
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	d0e3      	beq.n	8005a84 <_malloc_r+0x64>
 8005abc:	1a21      	subs	r1, r4, r0
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7fd f828 	bl	8002b14 <_sbrk_r>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d1dd      	bne.n	8005a84 <_malloc_r+0x64>
 8005ac8:	e7cf      	b.n	8005a6a <_malloc_r+0x4a>
 8005aca:	bf00      	nop
 8005acc:	20000c04 	.word	0x20000c04
 8005ad0:	20000c08 	.word	0x20000c08

08005ad4 <__sfputc_r>:
 8005ad4:	6893      	ldr	r3, [r2, #8]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	b410      	push	{r4}
 8005adc:	6093      	str	r3, [r2, #8]
 8005ade:	da08      	bge.n	8005af2 <__sfputc_r+0x1e>
 8005ae0:	6994      	ldr	r4, [r2, #24]
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	db01      	blt.n	8005aea <__sfputc_r+0x16>
 8005ae6:	290a      	cmp	r1, #10
 8005ae8:	d103      	bne.n	8005af2 <__sfputc_r+0x1e>
 8005aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aee:	f000 b98f 	b.w	8005e10 <__swbuf_r>
 8005af2:	6813      	ldr	r3, [r2, #0]
 8005af4:	1c58      	adds	r0, r3, #1
 8005af6:	6010      	str	r0, [r2, #0]
 8005af8:	7019      	strb	r1, [r3, #0]
 8005afa:	4608      	mov	r0, r1
 8005afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <__sfputs_r>:
 8005b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	18d5      	adds	r5, r2, r3
 8005b0c:	42ac      	cmp	r4, r5
 8005b0e:	d101      	bne.n	8005b14 <__sfputs_r+0x12>
 8005b10:	2000      	movs	r0, #0
 8005b12:	e007      	b.n	8005b24 <__sfputs_r+0x22>
 8005b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b18:	463a      	mov	r2, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7ff ffda 	bl	8005ad4 <__sfputc_r>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d1f3      	bne.n	8005b0c <__sfputs_r+0xa>
 8005b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b28 <_vfiprintf_r>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	b09d      	sub	sp, #116	; 0x74
 8005b30:	4614      	mov	r4, r2
 8005b32:	4698      	mov	r8, r3
 8005b34:	4606      	mov	r6, r0
 8005b36:	b118      	cbz	r0, 8005b40 <_vfiprintf_r+0x18>
 8005b38:	6983      	ldr	r3, [r0, #24]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <_vfiprintf_r+0x18>
 8005b3c:	f7ff fa4c 	bl	8004fd8 <__sinit>
 8005b40:	4b89      	ldr	r3, [pc, #548]	; (8005d68 <_vfiprintf_r+0x240>)
 8005b42:	429d      	cmp	r5, r3
 8005b44:	d11b      	bne.n	8005b7e <_vfiprintf_r+0x56>
 8005b46:	6875      	ldr	r5, [r6, #4]
 8005b48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4a:	07d9      	lsls	r1, r3, #31
 8005b4c:	d405      	bmi.n	8005b5a <_vfiprintf_r+0x32>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	059a      	lsls	r2, r3, #22
 8005b52:	d402      	bmi.n	8005b5a <_vfiprintf_r+0x32>
 8005b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b56:	f7ff faf4 	bl	8005142 <__retarget_lock_acquire_recursive>
 8005b5a:	89ab      	ldrh	r3, [r5, #12]
 8005b5c:	071b      	lsls	r3, r3, #28
 8005b5e:	d501      	bpl.n	8005b64 <_vfiprintf_r+0x3c>
 8005b60:	692b      	ldr	r3, [r5, #16]
 8005b62:	b9eb      	cbnz	r3, 8005ba0 <_vfiprintf_r+0x78>
 8005b64:	4629      	mov	r1, r5
 8005b66:	4630      	mov	r0, r6
 8005b68:	f000 f9b2 	bl	8005ed0 <__swsetup_r>
 8005b6c:	b1c0      	cbz	r0, 8005ba0 <_vfiprintf_r+0x78>
 8005b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b70:	07dc      	lsls	r4, r3, #31
 8005b72:	d50e      	bpl.n	8005b92 <_vfiprintf_r+0x6a>
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b78:	b01d      	add	sp, #116	; 0x74
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <_vfiprintf_r+0x244>)
 8005b80:	429d      	cmp	r5, r3
 8005b82:	d101      	bne.n	8005b88 <_vfiprintf_r+0x60>
 8005b84:	68b5      	ldr	r5, [r6, #8]
 8005b86:	e7df      	b.n	8005b48 <_vfiprintf_r+0x20>
 8005b88:	4b79      	ldr	r3, [pc, #484]	; (8005d70 <_vfiprintf_r+0x248>)
 8005b8a:	429d      	cmp	r5, r3
 8005b8c:	bf08      	it	eq
 8005b8e:	68f5      	ldreq	r5, [r6, #12]
 8005b90:	e7da      	b.n	8005b48 <_vfiprintf_r+0x20>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	0598      	lsls	r0, r3, #22
 8005b96:	d4ed      	bmi.n	8005b74 <_vfiprintf_r+0x4c>
 8005b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b9a:	f7ff fad3 	bl	8005144 <__retarget_lock_release_recursive>
 8005b9e:	e7e9      	b.n	8005b74 <_vfiprintf_r+0x4c>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bae:	2330      	movs	r3, #48	; 0x30
 8005bb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d74 <_vfiprintf_r+0x24c>
 8005bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb8:	f04f 0901 	mov.w	r9, #1
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	469a      	mov	sl, r3
 8005bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc4:	b10a      	cbz	r2, 8005bca <_vfiprintf_r+0xa2>
 8005bc6:	2a25      	cmp	r2, #37	; 0x25
 8005bc8:	d1f9      	bne.n	8005bbe <_vfiprintf_r+0x96>
 8005bca:	ebba 0b04 	subs.w	fp, sl, r4
 8005bce:	d00b      	beq.n	8005be8 <_vfiprintf_r+0xc0>
 8005bd0:	465b      	mov	r3, fp
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7ff ff93 	bl	8005b02 <__sfputs_r>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f000 80aa 	beq.w	8005d36 <_vfiprintf_r+0x20e>
 8005be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be4:	445a      	add	r2, fp
 8005be6:	9209      	str	r2, [sp, #36]	; 0x24
 8005be8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80a2 	beq.w	8005d36 <_vfiprintf_r+0x20e>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bfc:	f10a 0a01 	add.w	sl, sl, #1
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c08:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0a:	4654      	mov	r4, sl
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c12:	4858      	ldr	r0, [pc, #352]	; (8005d74 <_vfiprintf_r+0x24c>)
 8005c14:	f7fa fb0c 	bl	8000230 <memchr>
 8005c18:	9a04      	ldr	r2, [sp, #16]
 8005c1a:	b9d8      	cbnz	r0, 8005c54 <_vfiprintf_r+0x12c>
 8005c1c:	06d1      	lsls	r1, r2, #27
 8005c1e:	bf44      	itt	mi
 8005c20:	2320      	movmi	r3, #32
 8005c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c26:	0713      	lsls	r3, r2, #28
 8005c28:	bf44      	itt	mi
 8005c2a:	232b      	movmi	r3, #43	; 0x2b
 8005c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c30:	f89a 3000 	ldrb.w	r3, [sl]
 8005c34:	2b2a      	cmp	r3, #42	; 0x2a
 8005c36:	d015      	beq.n	8005c64 <_vfiprintf_r+0x13c>
 8005c38:	9a07      	ldr	r2, [sp, #28]
 8005c3a:	4654      	mov	r4, sl
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	f04f 0c0a 	mov.w	ip, #10
 8005c42:	4621      	mov	r1, r4
 8005c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c48:	3b30      	subs	r3, #48	; 0x30
 8005c4a:	2b09      	cmp	r3, #9
 8005c4c:	d94e      	bls.n	8005cec <_vfiprintf_r+0x1c4>
 8005c4e:	b1b0      	cbz	r0, 8005c7e <_vfiprintf_r+0x156>
 8005c50:	9207      	str	r2, [sp, #28]
 8005c52:	e014      	b.n	8005c7e <_vfiprintf_r+0x156>
 8005c54:	eba0 0308 	sub.w	r3, r0, r8
 8005c58:	fa09 f303 	lsl.w	r3, r9, r3
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	46a2      	mov	sl, r4
 8005c62:	e7d2      	b.n	8005c0a <_vfiprintf_r+0xe2>
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	1d19      	adds	r1, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	9103      	str	r1, [sp, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfbb      	ittet	lt
 8005c70:	425b      	neglt	r3, r3
 8005c72:	f042 0202 	orrlt.w	r2, r2, #2
 8005c76:	9307      	strge	r3, [sp, #28]
 8005c78:	9307      	strlt	r3, [sp, #28]
 8005c7a:	bfb8      	it	lt
 8005c7c:	9204      	strlt	r2, [sp, #16]
 8005c7e:	7823      	ldrb	r3, [r4, #0]
 8005c80:	2b2e      	cmp	r3, #46	; 0x2e
 8005c82:	d10c      	bne.n	8005c9e <_vfiprintf_r+0x176>
 8005c84:	7863      	ldrb	r3, [r4, #1]
 8005c86:	2b2a      	cmp	r3, #42	; 0x2a
 8005c88:	d135      	bne.n	8005cf6 <_vfiprintf_r+0x1ce>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	1d1a      	adds	r2, r3, #4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	9203      	str	r2, [sp, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bfb8      	it	lt
 8005c96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c9a:	3402      	adds	r4, #2
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d84 <_vfiprintf_r+0x25c>
 8005ca2:	7821      	ldrb	r1, [r4, #0]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	f7fa fac2 	bl	8000230 <memchr>
 8005cac:	b140      	cbz	r0, 8005cc0 <_vfiprintf_r+0x198>
 8005cae:	2340      	movs	r3, #64	; 0x40
 8005cb0:	eba0 000a 	sub.w	r0, r0, sl
 8005cb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	4303      	orrs	r3, r0
 8005cbc:	3401      	adds	r4, #1
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc4:	482c      	ldr	r0, [pc, #176]	; (8005d78 <_vfiprintf_r+0x250>)
 8005cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cca:	2206      	movs	r2, #6
 8005ccc:	f7fa fab0 	bl	8000230 <memchr>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d03f      	beq.n	8005d54 <_vfiprintf_r+0x22c>
 8005cd4:	4b29      	ldr	r3, [pc, #164]	; (8005d7c <_vfiprintf_r+0x254>)
 8005cd6:	bb1b      	cbnz	r3, 8005d20 <_vfiprintf_r+0x1f8>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce6:	443b      	add	r3, r7
 8005ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cea:	e767      	b.n	8005bbc <_vfiprintf_r+0x94>
 8005cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7a5      	b.n	8005c42 <_vfiprintf_r+0x11a>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	3401      	adds	r4, #1
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 0c0a 	mov.w	ip, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d08:	3a30      	subs	r2, #48	; 0x30
 8005d0a:	2a09      	cmp	r2, #9
 8005d0c:	d903      	bls.n	8005d16 <_vfiprintf_r+0x1ee>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0c5      	beq.n	8005c9e <_vfiprintf_r+0x176>
 8005d12:	9105      	str	r1, [sp, #20]
 8005d14:	e7c3      	b.n	8005c9e <_vfiprintf_r+0x176>
 8005d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e7f0      	b.n	8005d02 <_vfiprintf_r+0x1da>
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	462a      	mov	r2, r5
 8005d26:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <_vfiprintf_r+0x258>)
 8005d28:	a904      	add	r1, sp, #16
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7fd fc38 	bl	80035a0 <_printf_float>
 8005d30:	4607      	mov	r7, r0
 8005d32:	1c78      	adds	r0, r7, #1
 8005d34:	d1d6      	bne.n	8005ce4 <_vfiprintf_r+0x1bc>
 8005d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d38:	07d9      	lsls	r1, r3, #31
 8005d3a:	d405      	bmi.n	8005d48 <_vfiprintf_r+0x220>
 8005d3c:	89ab      	ldrh	r3, [r5, #12]
 8005d3e:	059a      	lsls	r2, r3, #22
 8005d40:	d402      	bmi.n	8005d48 <_vfiprintf_r+0x220>
 8005d42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d44:	f7ff f9fe 	bl	8005144 <__retarget_lock_release_recursive>
 8005d48:	89ab      	ldrh	r3, [r5, #12]
 8005d4a:	065b      	lsls	r3, r3, #25
 8005d4c:	f53f af12 	bmi.w	8005b74 <_vfiprintf_r+0x4c>
 8005d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d52:	e711      	b.n	8005b78 <_vfiprintf_r+0x50>
 8005d54:	ab03      	add	r3, sp, #12
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <_vfiprintf_r+0x258>)
 8005d5c:	a904      	add	r1, sp, #16
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f7fd fec2 	bl	8003ae8 <_printf_i>
 8005d64:	e7e4      	b.n	8005d30 <_vfiprintf_r+0x208>
 8005d66:	bf00      	nop
 8005d68:	08012f64 	.word	0x08012f64
 8005d6c:	08012f84 	.word	0x08012f84
 8005d70:	08012f44 	.word	0x08012f44
 8005d74:	08013124 	.word	0x08013124
 8005d78:	0801312e 	.word	0x0801312e
 8005d7c:	080035a1 	.word	0x080035a1
 8005d80:	08005b03 	.word	0x08005b03
 8005d84:	0801312a 	.word	0x0801312a

08005d88 <__sread>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d90:	f7fc fee3 	bl	8002b5a <_read_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	bfab      	itete	ge
 8005d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d9c:	181b      	addge	r3, r3, r0
 8005d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005da2:	bfac      	ite	ge
 8005da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005da6:	81a3      	strhlt	r3, [r4, #12]
 8005da8:	bd10      	pop	{r4, pc}

08005daa <__swrite>:
 8005daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dae:	461f      	mov	r7, r3
 8005db0:	898b      	ldrh	r3, [r1, #12]
 8005db2:	05db      	lsls	r3, r3, #23
 8005db4:	4605      	mov	r5, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	4616      	mov	r6, r2
 8005dba:	d505      	bpl.n	8005dc8 <__swrite+0x1e>
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f7fc fec7 	bl	8002b56 <_lseek_r>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	4628      	mov	r0, r5
 8005dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	f7fc bec1 	b.w	8002b64 <_write_r>

08005de2 <__sseek>:
 8005de2:	b510      	push	{r4, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dea:	f7fc feb4 	bl	8002b56 <_lseek_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	bf15      	itete	ne
 8005df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dfe:	81a3      	strheq	r3, [r4, #12]
 8005e00:	bf18      	it	ne
 8005e02:	81a3      	strhne	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__sclose>:
 8005e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0a:	f7fc be9b 	b.w	8002b44 <_close_r>
	...

08005e10 <__swbuf_r>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	460e      	mov	r6, r1
 8005e14:	4614      	mov	r4, r2
 8005e16:	4605      	mov	r5, r0
 8005e18:	b118      	cbz	r0, 8005e22 <__swbuf_r+0x12>
 8005e1a:	6983      	ldr	r3, [r0, #24]
 8005e1c:	b90b      	cbnz	r3, 8005e22 <__swbuf_r+0x12>
 8005e1e:	f7ff f8db 	bl	8004fd8 <__sinit>
 8005e22:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <__swbuf_r+0x98>)
 8005e24:	429c      	cmp	r4, r3
 8005e26:	d12b      	bne.n	8005e80 <__swbuf_r+0x70>
 8005e28:	686c      	ldr	r4, [r5, #4]
 8005e2a:	69a3      	ldr	r3, [r4, #24]
 8005e2c:	60a3      	str	r3, [r4, #8]
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	071a      	lsls	r2, r3, #28
 8005e32:	d52f      	bpl.n	8005e94 <__swbuf_r+0x84>
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	b36b      	cbz	r3, 8005e94 <__swbuf_r+0x84>
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	1ac0      	subs	r0, r0, r3
 8005e3e:	6963      	ldr	r3, [r4, #20]
 8005e40:	b2f6      	uxtb	r6, r6
 8005e42:	4283      	cmp	r3, r0
 8005e44:	4637      	mov	r7, r6
 8005e46:	dc04      	bgt.n	8005e52 <__swbuf_r+0x42>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7ff f830 	bl	8004eb0 <_fflush_r>
 8005e50:	bb30      	cbnz	r0, 8005ea0 <__swbuf_r+0x90>
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	60a3      	str	r3, [r4, #8]
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	6022      	str	r2, [r4, #0]
 8005e5e:	701e      	strb	r6, [r3, #0]
 8005e60:	6963      	ldr	r3, [r4, #20]
 8005e62:	3001      	adds	r0, #1
 8005e64:	4283      	cmp	r3, r0
 8005e66:	d004      	beq.n	8005e72 <__swbuf_r+0x62>
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	07db      	lsls	r3, r3, #31
 8005e6c:	d506      	bpl.n	8005e7c <__swbuf_r+0x6c>
 8005e6e:	2e0a      	cmp	r6, #10
 8005e70:	d104      	bne.n	8005e7c <__swbuf_r+0x6c>
 8005e72:	4621      	mov	r1, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f7ff f81b 	bl	8004eb0 <_fflush_r>
 8005e7a:	b988      	cbnz	r0, 8005ea0 <__swbuf_r+0x90>
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <__swbuf_r+0x9c>)
 8005e82:	429c      	cmp	r4, r3
 8005e84:	d101      	bne.n	8005e8a <__swbuf_r+0x7a>
 8005e86:	68ac      	ldr	r4, [r5, #8]
 8005e88:	e7cf      	b.n	8005e2a <__swbuf_r+0x1a>
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <__swbuf_r+0xa0>)
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	bf08      	it	eq
 8005e90:	68ec      	ldreq	r4, [r5, #12]
 8005e92:	e7ca      	b.n	8005e2a <__swbuf_r+0x1a>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f81a 	bl	8005ed0 <__swsetup_r>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d0cb      	beq.n	8005e38 <__swbuf_r+0x28>
 8005ea0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ea4:	e7ea      	b.n	8005e7c <__swbuf_r+0x6c>
 8005ea6:	bf00      	nop
 8005ea8:	08012f64 	.word	0x08012f64
 8005eac:	08012f84 	.word	0x08012f84
 8005eb0:	08012f44 	.word	0x08012f44

08005eb4 <__ascii_wctomb>:
 8005eb4:	b149      	cbz	r1, 8005eca <__ascii_wctomb+0x16>
 8005eb6:	2aff      	cmp	r2, #255	; 0xff
 8005eb8:	bf85      	ittet	hi
 8005eba:	238a      	movhi	r3, #138	; 0x8a
 8005ebc:	6003      	strhi	r3, [r0, #0]
 8005ebe:	700a      	strbls	r2, [r1, #0]
 8005ec0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ec4:	bf98      	it	ls
 8005ec6:	2001      	movls	r0, #1
 8005ec8:	4770      	bx	lr
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4770      	bx	lr
	...

08005ed0 <__swsetup_r>:
 8005ed0:	4b32      	ldr	r3, [pc, #200]	; (8005f9c <__swsetup_r+0xcc>)
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	681d      	ldr	r5, [r3, #0]
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460c      	mov	r4, r1
 8005eda:	b125      	cbz	r5, 8005ee6 <__swsetup_r+0x16>
 8005edc:	69ab      	ldr	r3, [r5, #24]
 8005ede:	b913      	cbnz	r3, 8005ee6 <__swsetup_r+0x16>
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f7ff f879 	bl	8004fd8 <__sinit>
 8005ee6:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <__swsetup_r+0xd0>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	d10f      	bne.n	8005f0c <__swsetup_r+0x3c>
 8005eec:	686c      	ldr	r4, [r5, #4]
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ef4:	0719      	lsls	r1, r3, #28
 8005ef6:	d42c      	bmi.n	8005f52 <__swsetup_r+0x82>
 8005ef8:	06dd      	lsls	r5, r3, #27
 8005efa:	d411      	bmi.n	8005f20 <__swsetup_r+0x50>
 8005efc:	2309      	movs	r3, #9
 8005efe:	6033      	str	r3, [r6, #0]
 8005f00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0a:	e03e      	b.n	8005f8a <__swsetup_r+0xba>
 8005f0c:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <__swsetup_r+0xd4>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d101      	bne.n	8005f16 <__swsetup_r+0x46>
 8005f12:	68ac      	ldr	r4, [r5, #8]
 8005f14:	e7eb      	b.n	8005eee <__swsetup_r+0x1e>
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <__swsetup_r+0xd8>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	bf08      	it	eq
 8005f1c:	68ec      	ldreq	r4, [r5, #12]
 8005f1e:	e7e6      	b.n	8005eee <__swsetup_r+0x1e>
 8005f20:	0758      	lsls	r0, r3, #29
 8005f22:	d512      	bpl.n	8005f4a <__swsetup_r+0x7a>
 8005f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f26:	b141      	cbz	r1, 8005f3a <__swsetup_r+0x6a>
 8005f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d002      	beq.n	8005f36 <__swsetup_r+0x66>
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff fd29 	bl	8005988 <_free_r>
 8005f36:	2300      	movs	r3, #0
 8005f38:	6363      	str	r3, [r4, #52]	; 0x34
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	2300      	movs	r3, #0
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	f043 0308 	orr.w	r3, r3, #8
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	b94b      	cbnz	r3, 8005f6a <__swsetup_r+0x9a>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f60:	d003      	beq.n	8005f6a <__swsetup_r+0x9a>
 8005f62:	4621      	mov	r1, r4
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff f913 	bl	8005190 <__smakebuf_r>
 8005f6a:	89a0      	ldrh	r0, [r4, #12]
 8005f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f70:	f010 0301 	ands.w	r3, r0, #1
 8005f74:	d00a      	beq.n	8005f8c <__swsetup_r+0xbc>
 8005f76:	2300      	movs	r3, #0
 8005f78:	60a3      	str	r3, [r4, #8]
 8005f7a:	6963      	ldr	r3, [r4, #20]
 8005f7c:	425b      	negs	r3, r3
 8005f7e:	61a3      	str	r3, [r4, #24]
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	b943      	cbnz	r3, 8005f96 <__swsetup_r+0xc6>
 8005f84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f88:	d1ba      	bne.n	8005f00 <__swsetup_r+0x30>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	0781      	lsls	r1, r0, #30
 8005f8e:	bf58      	it	pl
 8005f90:	6963      	ldrpl	r3, [r4, #20]
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	e7f4      	b.n	8005f80 <__swsetup_r+0xb0>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e7f7      	b.n	8005f8a <__swsetup_r+0xba>
 8005f9a:	bf00      	nop
 8005f9c:	20000018 	.word	0x20000018
 8005fa0:	08012f64 	.word	0x08012f64
 8005fa4:	08012f84 	.word	0x08012f84
 8005fa8:	08012f44 	.word	0x08012f44

08005fac <abort>:
 8005fac:	b508      	push	{r3, lr}
 8005fae:	2006      	movs	r0, #6
 8005fb0:	f000 f878 	bl	80060a4 <raise>
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f7fc fdf8 	bl	8002baa <_exit>

08005fba <memmove>:
 8005fba:	4288      	cmp	r0, r1
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	eb01 0402 	add.w	r4, r1, r2
 8005fc2:	d902      	bls.n	8005fca <memmove+0x10>
 8005fc4:	4284      	cmp	r4, r0
 8005fc6:	4623      	mov	r3, r4
 8005fc8:	d807      	bhi.n	8005fda <memmove+0x20>
 8005fca:	1e43      	subs	r3, r0, #1
 8005fcc:	42a1      	cmp	r1, r4
 8005fce:	d008      	beq.n	8005fe2 <memmove+0x28>
 8005fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd8:	e7f8      	b.n	8005fcc <memmove+0x12>
 8005fda:	4402      	add	r2, r0
 8005fdc:	4601      	mov	r1, r0
 8005fde:	428a      	cmp	r2, r1
 8005fe0:	d100      	bne.n	8005fe4 <memmove+0x2a>
 8005fe2:	bd10      	pop	{r4, pc}
 8005fe4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fec:	e7f7      	b.n	8005fde <memmove+0x24>
	...

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f7ff b8a6 	b.w	8005142 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20000c00 	.word	0x20000c00

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f7ff b8a1 	b.w	8005144 <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	20000c00 	.word	0x20000c00

08006008 <_realloc_r>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	4607      	mov	r7, r0
 800600c:	4614      	mov	r4, r2
 800600e:	460e      	mov	r6, r1
 8006010:	b921      	cbnz	r1, 800601c <_realloc_r+0x14>
 8006012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006016:	4611      	mov	r1, r2
 8006018:	f7ff bd02 	b.w	8005a20 <_malloc_r>
 800601c:	b922      	cbnz	r2, 8006028 <_realloc_r+0x20>
 800601e:	f7ff fcb3 	bl	8005988 <_free_r>
 8006022:	4625      	mov	r5, r4
 8006024:	4628      	mov	r0, r5
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006028:	f000 f858 	bl	80060dc <_malloc_usable_size_r>
 800602c:	42a0      	cmp	r0, r4
 800602e:	d20f      	bcs.n	8006050 <_realloc_r+0x48>
 8006030:	4621      	mov	r1, r4
 8006032:	4638      	mov	r0, r7
 8006034:	f7ff fcf4 	bl	8005a20 <_malloc_r>
 8006038:	4605      	mov	r5, r0
 800603a:	2800      	cmp	r0, #0
 800603c:	d0f2      	beq.n	8006024 <_realloc_r+0x1c>
 800603e:	4631      	mov	r1, r6
 8006040:	4622      	mov	r2, r4
 8006042:	f7ff f8ff 	bl	8005244 <memcpy>
 8006046:	4631      	mov	r1, r6
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff fc9d 	bl	8005988 <_free_r>
 800604e:	e7e9      	b.n	8006024 <_realloc_r+0x1c>
 8006050:	4635      	mov	r5, r6
 8006052:	e7e7      	b.n	8006024 <_realloc_r+0x1c>

08006054 <_raise_r>:
 8006054:	291f      	cmp	r1, #31
 8006056:	b538      	push	{r3, r4, r5, lr}
 8006058:	4604      	mov	r4, r0
 800605a:	460d      	mov	r5, r1
 800605c:	d904      	bls.n	8006068 <_raise_r+0x14>
 800605e:	2316      	movs	r3, #22
 8006060:	6003      	str	r3, [r0, #0]
 8006062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800606a:	b112      	cbz	r2, 8006072 <_raise_r+0x1e>
 800606c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006070:	b94b      	cbnz	r3, 8006086 <_raise_r+0x32>
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f830 	bl	80060d8 <_getpid_r>
 8006078:	462a      	mov	r2, r5
 800607a:	4601      	mov	r1, r0
 800607c:	4620      	mov	r0, r4
 800607e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006082:	f000 b817 	b.w	80060b4 <_kill_r>
 8006086:	2b01      	cmp	r3, #1
 8006088:	d00a      	beq.n	80060a0 <_raise_r+0x4c>
 800608a:	1c59      	adds	r1, r3, #1
 800608c:	d103      	bne.n	8006096 <_raise_r+0x42>
 800608e:	2316      	movs	r3, #22
 8006090:	6003      	str	r3, [r0, #0]
 8006092:	2001      	movs	r0, #1
 8006094:	e7e7      	b.n	8006066 <_raise_r+0x12>
 8006096:	2400      	movs	r4, #0
 8006098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800609c:	4628      	mov	r0, r5
 800609e:	4798      	blx	r3
 80060a0:	2000      	movs	r0, #0
 80060a2:	e7e0      	b.n	8006066 <_raise_r+0x12>

080060a4 <raise>:
 80060a4:	4b02      	ldr	r3, [pc, #8]	; (80060b0 <raise+0xc>)
 80060a6:	4601      	mov	r1, r0
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	f7ff bfd3 	b.w	8006054 <_raise_r>
 80060ae:	bf00      	nop
 80060b0:	20000018 	.word	0x20000018

080060b4 <_kill_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d07      	ldr	r5, [pc, #28]	; (80060d4 <_kill_r+0x20>)
 80060b8:	2300      	movs	r3, #0
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	602b      	str	r3, [r5, #0]
 80060c2:	f7fc fd6f 	bl	8002ba4 <_kill>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	d102      	bne.n	80060d0 <_kill_r+0x1c>
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	b103      	cbz	r3, 80060d0 <_kill_r+0x1c>
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	bf00      	nop
 80060d4:	20000c0c 	.word	0x20000c0c

080060d8 <_getpid_r>:
 80060d8:	f7fc bd68 	b.w	8002bac <_getpid>

080060dc <_malloc_usable_size_r>:
 80060dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e0:	1f18      	subs	r0, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfbc      	itt	lt
 80060e6:	580b      	ldrlt	r3, [r1, r0]
 80060e8:	18c0      	addlt	r0, r0, r3
 80060ea:	4770      	bx	lr

080060ec <iprintf>:
 80060ec:	b40f      	push	{r0, r1, r2, r3}
 80060ee:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <iprintf+0x2c>)
 80060f0:	b513      	push	{r0, r1, r4, lr}
 80060f2:	681c      	ldr	r4, [r3, #0]
 80060f4:	b124      	cbz	r4, 8006100 <iprintf+0x14>
 80060f6:	69a3      	ldr	r3, [r4, #24]
 80060f8:	b913      	cbnz	r3, 8006100 <iprintf+0x14>
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7fe ff6c 	bl	8004fd8 <__sinit>
 8006100:	ab05      	add	r3, sp, #20
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	68a1      	ldr	r1, [r4, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff fd0d 	bl	8005b28 <_vfiprintf_r>
 800610e:	b002      	add	sp, #8
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006114:	b004      	add	sp, #16
 8006116:	4770      	bx	lr
 8006118:	20000018 	.word	0x20000018

0800611c <putchar>:
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <putchar+0x28>)
 800611e:	b513      	push	{r0, r1, r4, lr}
 8006120:	681c      	ldr	r4, [r3, #0]
 8006122:	4601      	mov	r1, r0
 8006124:	b134      	cbz	r4, 8006134 <putchar+0x18>
 8006126:	69a3      	ldr	r3, [r4, #24]
 8006128:	b923      	cbnz	r3, 8006134 <putchar+0x18>
 800612a:	9001      	str	r0, [sp, #4]
 800612c:	4620      	mov	r0, r4
 800612e:	f7fe ff53 	bl	8004fd8 <__sinit>
 8006132:	9901      	ldr	r1, [sp, #4]
 8006134:	68a2      	ldr	r2, [r4, #8]
 8006136:	4620      	mov	r0, r4
 8006138:	b002      	add	sp, #8
 800613a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800613e:	f000 ba31 	b.w	80065a4 <_putc_r>
 8006142:	bf00      	nop
 8006144:	20000018 	.word	0x20000018

08006148 <_puts_r>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	4605      	mov	r5, r0
 800614e:	b118      	cbz	r0, 8006158 <_puts_r+0x10>
 8006150:	6983      	ldr	r3, [r0, #24]
 8006152:	b90b      	cbnz	r3, 8006158 <_puts_r+0x10>
 8006154:	f7fe ff40 	bl	8004fd8 <__sinit>
 8006158:	69ab      	ldr	r3, [r5, #24]
 800615a:	68ac      	ldr	r4, [r5, #8]
 800615c:	b913      	cbnz	r3, 8006164 <_puts_r+0x1c>
 800615e:	4628      	mov	r0, r5
 8006160:	f7fe ff3a 	bl	8004fd8 <__sinit>
 8006164:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <_puts_r+0xd0>)
 8006166:	429c      	cmp	r4, r3
 8006168:	d120      	bne.n	80061ac <_puts_r+0x64>
 800616a:	686c      	ldr	r4, [r5, #4]
 800616c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616e:	07db      	lsls	r3, r3, #31
 8006170:	d405      	bmi.n	800617e <_puts_r+0x36>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	0598      	lsls	r0, r3, #22
 8006176:	d402      	bmi.n	800617e <_puts_r+0x36>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f7fe ffe2 	bl	8005142 <__retarget_lock_acquire_recursive>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	0719      	lsls	r1, r3, #28
 8006182:	d51d      	bpl.n	80061c0 <_puts_r+0x78>
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	b1db      	cbz	r3, 80061c0 <_puts_r+0x78>
 8006188:	3e01      	subs	r6, #1
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006190:	3b01      	subs	r3, #1
 8006192:	60a3      	str	r3, [r4, #8]
 8006194:	bb39      	cbnz	r1, 80061e6 <_puts_r+0x9e>
 8006196:	2b00      	cmp	r3, #0
 8006198:	da38      	bge.n	800620c <_puts_r+0xc4>
 800619a:	4622      	mov	r2, r4
 800619c:	210a      	movs	r1, #10
 800619e:	4628      	mov	r0, r5
 80061a0:	f7ff fe36 	bl	8005e10 <__swbuf_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d011      	beq.n	80061cc <_puts_r+0x84>
 80061a8:	250a      	movs	r5, #10
 80061aa:	e011      	b.n	80061d0 <_puts_r+0x88>
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <_puts_r+0xd4>)
 80061ae:	429c      	cmp	r4, r3
 80061b0:	d101      	bne.n	80061b6 <_puts_r+0x6e>
 80061b2:	68ac      	ldr	r4, [r5, #8]
 80061b4:	e7da      	b.n	800616c <_puts_r+0x24>
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <_puts_r+0xd8>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	bf08      	it	eq
 80061bc:	68ec      	ldreq	r4, [r5, #12]
 80061be:	e7d5      	b.n	800616c <_puts_r+0x24>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4628      	mov	r0, r5
 80061c4:	f7ff fe84 	bl	8005ed0 <__swsetup_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d0dd      	beq.n	8006188 <_puts_r+0x40>
 80061cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80061d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d2:	07da      	lsls	r2, r3, #31
 80061d4:	d405      	bmi.n	80061e2 <_puts_r+0x9a>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	059b      	lsls	r3, r3, #22
 80061da:	d402      	bmi.n	80061e2 <_puts_r+0x9a>
 80061dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061de:	f7fe ffb1 	bl	8005144 <__retarget_lock_release_recursive>
 80061e2:	4628      	mov	r0, r5
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da04      	bge.n	80061f4 <_puts_r+0xac>
 80061ea:	69a2      	ldr	r2, [r4, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	dc06      	bgt.n	80061fe <_puts_r+0xb6>
 80061f0:	290a      	cmp	r1, #10
 80061f2:	d004      	beq.n	80061fe <_puts_r+0xb6>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	7019      	strb	r1, [r3, #0]
 80061fc:	e7c5      	b.n	800618a <_puts_r+0x42>
 80061fe:	4622      	mov	r2, r4
 8006200:	4628      	mov	r0, r5
 8006202:	f7ff fe05 	bl	8005e10 <__swbuf_r>
 8006206:	3001      	adds	r0, #1
 8006208:	d1bf      	bne.n	800618a <_puts_r+0x42>
 800620a:	e7df      	b.n	80061cc <_puts_r+0x84>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	250a      	movs	r5, #10
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	701d      	strb	r5, [r3, #0]
 8006216:	e7db      	b.n	80061d0 <_puts_r+0x88>
 8006218:	08012f64 	.word	0x08012f64
 800621c:	08012f84 	.word	0x08012f84
 8006220:	08012f44 	.word	0x08012f44

08006224 <puts>:
 8006224:	4b02      	ldr	r3, [pc, #8]	; (8006230 <puts+0xc>)
 8006226:	4601      	mov	r1, r0
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f7ff bf8d 	b.w	8006148 <_puts_r>
 800622e:	bf00      	nop
 8006230:	20000018 	.word	0x20000018

08006234 <strcasecmp>:
 8006234:	b530      	push	{r4, r5, lr}
 8006236:	4d0b      	ldr	r5, [pc, #44]	; (8006264 <strcasecmp+0x30>)
 8006238:	4604      	mov	r4, r0
 800623a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800623e:	5d5a      	ldrb	r2, [r3, r5]
 8006240:	f002 0203 	and.w	r2, r2, #3
 8006244:	2a01      	cmp	r2, #1
 8006246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800624a:	5ca8      	ldrb	r0, [r5, r2]
 800624c:	f000 0003 	and.w	r0, r0, #3
 8006250:	bf08      	it	eq
 8006252:	3320      	addeq	r3, #32
 8006254:	2801      	cmp	r0, #1
 8006256:	bf08      	it	eq
 8006258:	3220      	addeq	r2, #32
 800625a:	1a98      	subs	r0, r3, r2
 800625c:	d101      	bne.n	8006262 <strcasecmp+0x2e>
 800625e:	2a00      	cmp	r2, #0
 8006260:	d1eb      	bne.n	800623a <strcasecmp+0x6>
 8006262:	bd30      	pop	{r4, r5, pc}
 8006264:	08012c9e 	.word	0x08012c9e

08006268 <strcpy>:
 8006268:	4603      	mov	r3, r0
 800626a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626e:	f803 2b01 	strb.w	r2, [r3], #1
 8006272:	2a00      	cmp	r2, #0
 8006274:	d1f9      	bne.n	800626a <strcpy+0x2>
 8006276:	4770      	bx	lr

08006278 <_vsniprintf_r>:
 8006278:	b530      	push	{r4, r5, lr}
 800627a:	4614      	mov	r4, r2
 800627c:	2c00      	cmp	r4, #0
 800627e:	b09b      	sub	sp, #108	; 0x6c
 8006280:	4605      	mov	r5, r0
 8006282:	461a      	mov	r2, r3
 8006284:	da05      	bge.n	8006292 <_vsniprintf_r+0x1a>
 8006286:	238b      	movs	r3, #139	; 0x8b
 8006288:	6003      	str	r3, [r0, #0]
 800628a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800628e:	b01b      	add	sp, #108	; 0x6c
 8006290:	bd30      	pop	{r4, r5, pc}
 8006292:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006296:	f8ad 300c 	strh.w	r3, [sp, #12]
 800629a:	bf14      	ite	ne
 800629c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80062a0:	4623      	moveq	r3, r4
 80062a2:	9302      	str	r3, [sp, #8]
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062aa:	9100      	str	r1, [sp, #0]
 80062ac:	9104      	str	r1, [sp, #16]
 80062ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80062b2:	4669      	mov	r1, sp
 80062b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062b6:	f000 f875 	bl	80063a4 <_svfiprintf_r>
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	bfbc      	itt	lt
 80062be:	238b      	movlt	r3, #139	; 0x8b
 80062c0:	602b      	strlt	r3, [r5, #0]
 80062c2:	2c00      	cmp	r4, #0
 80062c4:	d0e3      	beq.n	800628e <_vsniprintf_r+0x16>
 80062c6:	9b00      	ldr	r3, [sp, #0]
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e7df      	b.n	800628e <_vsniprintf_r+0x16>
	...

080062d0 <vsniprintf>:
 80062d0:	b507      	push	{r0, r1, r2, lr}
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	460a      	mov	r2, r1
 80062d8:	4601      	mov	r1, r0
 80062da:	4803      	ldr	r0, [pc, #12]	; (80062e8 <vsniprintf+0x18>)
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f7ff ffcb 	bl	8006278 <_vsniprintf_r>
 80062e2:	b003      	add	sp, #12
 80062e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80062e8:	20000018 	.word	0x20000018

080062ec <__ssputs_r>:
 80062ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f0:	688e      	ldr	r6, [r1, #8]
 80062f2:	429e      	cmp	r6, r3
 80062f4:	4682      	mov	sl, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	4690      	mov	r8, r2
 80062fa:	461f      	mov	r7, r3
 80062fc:	d838      	bhi.n	8006370 <__ssputs_r+0x84>
 80062fe:	898a      	ldrh	r2, [r1, #12]
 8006300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006304:	d032      	beq.n	800636c <__ssputs_r+0x80>
 8006306:	6825      	ldr	r5, [r4, #0]
 8006308:	6909      	ldr	r1, [r1, #16]
 800630a:	eba5 0901 	sub.w	r9, r5, r1
 800630e:	6965      	ldr	r5, [r4, #20]
 8006310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006318:	3301      	adds	r3, #1
 800631a:	444b      	add	r3, r9
 800631c:	106d      	asrs	r5, r5, #1
 800631e:	429d      	cmp	r5, r3
 8006320:	bf38      	it	cc
 8006322:	461d      	movcc	r5, r3
 8006324:	0553      	lsls	r3, r2, #21
 8006326:	d531      	bpl.n	800638c <__ssputs_r+0xa0>
 8006328:	4629      	mov	r1, r5
 800632a:	f7ff fb79 	bl	8005a20 <_malloc_r>
 800632e:	4606      	mov	r6, r0
 8006330:	b950      	cbnz	r0, 8006348 <__ssputs_r+0x5c>
 8006332:	230c      	movs	r3, #12
 8006334:	f8ca 3000 	str.w	r3, [sl]
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	6921      	ldr	r1, [r4, #16]
 800634a:	464a      	mov	r2, r9
 800634c:	f7fe ff7a 	bl	8005244 <memcpy>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	6126      	str	r6, [r4, #16]
 800635e:	6165      	str	r5, [r4, #20]
 8006360:	444e      	add	r6, r9
 8006362:	eba5 0509 	sub.w	r5, r5, r9
 8006366:	6026      	str	r6, [r4, #0]
 8006368:	60a5      	str	r5, [r4, #8]
 800636a:	463e      	mov	r6, r7
 800636c:	42be      	cmp	r6, r7
 800636e:	d900      	bls.n	8006372 <__ssputs_r+0x86>
 8006370:	463e      	mov	r6, r7
 8006372:	6820      	ldr	r0, [r4, #0]
 8006374:	4632      	mov	r2, r6
 8006376:	4641      	mov	r1, r8
 8006378:	f7ff fe1f 	bl	8005fba <memmove>
 800637c:	68a3      	ldr	r3, [r4, #8]
 800637e:	1b9b      	subs	r3, r3, r6
 8006380:	60a3      	str	r3, [r4, #8]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	4433      	add	r3, r6
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	2000      	movs	r0, #0
 800638a:	e7db      	b.n	8006344 <__ssputs_r+0x58>
 800638c:	462a      	mov	r2, r5
 800638e:	f7ff fe3b 	bl	8006008 <_realloc_r>
 8006392:	4606      	mov	r6, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d1e1      	bne.n	800635c <__ssputs_r+0x70>
 8006398:	6921      	ldr	r1, [r4, #16]
 800639a:	4650      	mov	r0, sl
 800639c:	f7ff faf4 	bl	8005988 <_free_r>
 80063a0:	e7c7      	b.n	8006332 <__ssputs_r+0x46>
	...

080063a4 <_svfiprintf_r>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	4698      	mov	r8, r3
 80063aa:	898b      	ldrh	r3, [r1, #12]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	b09d      	sub	sp, #116	; 0x74
 80063b0:	4607      	mov	r7, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	4614      	mov	r4, r2
 80063b6:	d50e      	bpl.n	80063d6 <_svfiprintf_r+0x32>
 80063b8:	690b      	ldr	r3, [r1, #16]
 80063ba:	b963      	cbnz	r3, 80063d6 <_svfiprintf_r+0x32>
 80063bc:	2140      	movs	r1, #64	; 0x40
 80063be:	f7ff fb2f 	bl	8005a20 <_malloc_r>
 80063c2:	6028      	str	r0, [r5, #0]
 80063c4:	6128      	str	r0, [r5, #16]
 80063c6:	b920      	cbnz	r0, 80063d2 <_svfiprintf_r+0x2e>
 80063c8:	230c      	movs	r3, #12
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063d0:	e0d1      	b.n	8006576 <_svfiprintf_r+0x1d2>
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	616b      	str	r3, [r5, #20]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9309      	str	r3, [sp, #36]	; 0x24
 80063da:	2320      	movs	r3, #32
 80063dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80063e4:	2330      	movs	r3, #48	; 0x30
 80063e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006590 <_svfiprintf_r+0x1ec>
 80063ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ee:	f04f 0901 	mov.w	r9, #1
 80063f2:	4623      	mov	r3, r4
 80063f4:	469a      	mov	sl, r3
 80063f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063fa:	b10a      	cbz	r2, 8006400 <_svfiprintf_r+0x5c>
 80063fc:	2a25      	cmp	r2, #37	; 0x25
 80063fe:	d1f9      	bne.n	80063f4 <_svfiprintf_r+0x50>
 8006400:	ebba 0b04 	subs.w	fp, sl, r4
 8006404:	d00b      	beq.n	800641e <_svfiprintf_r+0x7a>
 8006406:	465b      	mov	r3, fp
 8006408:	4622      	mov	r2, r4
 800640a:	4629      	mov	r1, r5
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff ff6d 	bl	80062ec <__ssputs_r>
 8006412:	3001      	adds	r0, #1
 8006414:	f000 80aa 	beq.w	800656c <_svfiprintf_r+0x1c8>
 8006418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800641a:	445a      	add	r2, fp
 800641c:	9209      	str	r2, [sp, #36]	; 0x24
 800641e:	f89a 3000 	ldrb.w	r3, [sl]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80a2 	beq.w	800656c <_svfiprintf_r+0x1c8>
 8006428:	2300      	movs	r3, #0
 800642a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006432:	f10a 0a01 	add.w	sl, sl, #1
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	9307      	str	r3, [sp, #28]
 800643a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800643e:	931a      	str	r3, [sp, #104]	; 0x68
 8006440:	4654      	mov	r4, sl
 8006442:	2205      	movs	r2, #5
 8006444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006448:	4851      	ldr	r0, [pc, #324]	; (8006590 <_svfiprintf_r+0x1ec>)
 800644a:	f7f9 fef1 	bl	8000230 <memchr>
 800644e:	9a04      	ldr	r2, [sp, #16]
 8006450:	b9d8      	cbnz	r0, 800648a <_svfiprintf_r+0xe6>
 8006452:	06d0      	lsls	r0, r2, #27
 8006454:	bf44      	itt	mi
 8006456:	2320      	movmi	r3, #32
 8006458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800645c:	0711      	lsls	r1, r2, #28
 800645e:	bf44      	itt	mi
 8006460:	232b      	movmi	r3, #43	; 0x2b
 8006462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006466:	f89a 3000 	ldrb.w	r3, [sl]
 800646a:	2b2a      	cmp	r3, #42	; 0x2a
 800646c:	d015      	beq.n	800649a <_svfiprintf_r+0xf6>
 800646e:	9a07      	ldr	r2, [sp, #28]
 8006470:	4654      	mov	r4, sl
 8006472:	2000      	movs	r0, #0
 8006474:	f04f 0c0a 	mov.w	ip, #10
 8006478:	4621      	mov	r1, r4
 800647a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647e:	3b30      	subs	r3, #48	; 0x30
 8006480:	2b09      	cmp	r3, #9
 8006482:	d94e      	bls.n	8006522 <_svfiprintf_r+0x17e>
 8006484:	b1b0      	cbz	r0, 80064b4 <_svfiprintf_r+0x110>
 8006486:	9207      	str	r2, [sp, #28]
 8006488:	e014      	b.n	80064b4 <_svfiprintf_r+0x110>
 800648a:	eba0 0308 	sub.w	r3, r0, r8
 800648e:	fa09 f303 	lsl.w	r3, r9, r3
 8006492:	4313      	orrs	r3, r2
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	46a2      	mov	sl, r4
 8006498:	e7d2      	b.n	8006440 <_svfiprintf_r+0x9c>
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	1d19      	adds	r1, r3, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	9103      	str	r1, [sp, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfbb      	ittet	lt
 80064a6:	425b      	neglt	r3, r3
 80064a8:	f042 0202 	orrlt.w	r2, r2, #2
 80064ac:	9307      	strge	r3, [sp, #28]
 80064ae:	9307      	strlt	r3, [sp, #28]
 80064b0:	bfb8      	it	lt
 80064b2:	9204      	strlt	r2, [sp, #16]
 80064b4:	7823      	ldrb	r3, [r4, #0]
 80064b6:	2b2e      	cmp	r3, #46	; 0x2e
 80064b8:	d10c      	bne.n	80064d4 <_svfiprintf_r+0x130>
 80064ba:	7863      	ldrb	r3, [r4, #1]
 80064bc:	2b2a      	cmp	r3, #42	; 0x2a
 80064be:	d135      	bne.n	800652c <_svfiprintf_r+0x188>
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	9203      	str	r2, [sp, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bfb8      	it	lt
 80064cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064d0:	3402      	adds	r4, #2
 80064d2:	9305      	str	r3, [sp, #20]
 80064d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065a0 <_svfiprintf_r+0x1fc>
 80064d8:	7821      	ldrb	r1, [r4, #0]
 80064da:	2203      	movs	r2, #3
 80064dc:	4650      	mov	r0, sl
 80064de:	f7f9 fea7 	bl	8000230 <memchr>
 80064e2:	b140      	cbz	r0, 80064f6 <_svfiprintf_r+0x152>
 80064e4:	2340      	movs	r3, #64	; 0x40
 80064e6:	eba0 000a 	sub.w	r0, r0, sl
 80064ea:	fa03 f000 	lsl.w	r0, r3, r0
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	4303      	orrs	r3, r0
 80064f2:	3401      	adds	r4, #1
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fa:	4826      	ldr	r0, [pc, #152]	; (8006594 <_svfiprintf_r+0x1f0>)
 80064fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006500:	2206      	movs	r2, #6
 8006502:	f7f9 fe95 	bl	8000230 <memchr>
 8006506:	2800      	cmp	r0, #0
 8006508:	d038      	beq.n	800657c <_svfiprintf_r+0x1d8>
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <_svfiprintf_r+0x1f4>)
 800650c:	bb1b      	cbnz	r3, 8006556 <_svfiprintf_r+0x1b2>
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	3307      	adds	r3, #7
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	3308      	adds	r3, #8
 8006518:	9303      	str	r3, [sp, #12]
 800651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651c:	4433      	add	r3, r6
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	e767      	b.n	80063f2 <_svfiprintf_r+0x4e>
 8006522:	fb0c 3202 	mla	r2, ip, r2, r3
 8006526:	460c      	mov	r4, r1
 8006528:	2001      	movs	r0, #1
 800652a:	e7a5      	b.n	8006478 <_svfiprintf_r+0xd4>
 800652c:	2300      	movs	r3, #0
 800652e:	3401      	adds	r4, #1
 8006530:	9305      	str	r3, [sp, #20]
 8006532:	4619      	mov	r1, r3
 8006534:	f04f 0c0a 	mov.w	ip, #10
 8006538:	4620      	mov	r0, r4
 800653a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800653e:	3a30      	subs	r2, #48	; 0x30
 8006540:	2a09      	cmp	r2, #9
 8006542:	d903      	bls.n	800654c <_svfiprintf_r+0x1a8>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0c5      	beq.n	80064d4 <_svfiprintf_r+0x130>
 8006548:	9105      	str	r1, [sp, #20]
 800654a:	e7c3      	b.n	80064d4 <_svfiprintf_r+0x130>
 800654c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006550:	4604      	mov	r4, r0
 8006552:	2301      	movs	r3, #1
 8006554:	e7f0      	b.n	8006538 <_svfiprintf_r+0x194>
 8006556:	ab03      	add	r3, sp, #12
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	462a      	mov	r2, r5
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <_svfiprintf_r+0x1f8>)
 800655e:	a904      	add	r1, sp, #16
 8006560:	4638      	mov	r0, r7
 8006562:	f7fd f81d 	bl	80035a0 <_printf_float>
 8006566:	1c42      	adds	r2, r0, #1
 8006568:	4606      	mov	r6, r0
 800656a:	d1d6      	bne.n	800651a <_svfiprintf_r+0x176>
 800656c:	89ab      	ldrh	r3, [r5, #12]
 800656e:	065b      	lsls	r3, r3, #25
 8006570:	f53f af2c 	bmi.w	80063cc <_svfiprintf_r+0x28>
 8006574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006576:	b01d      	add	sp, #116	; 0x74
 8006578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657c:	ab03      	add	r3, sp, #12
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	462a      	mov	r2, r5
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <_svfiprintf_r+0x1f8>)
 8006584:	a904      	add	r1, sp, #16
 8006586:	4638      	mov	r0, r7
 8006588:	f7fd faae 	bl	8003ae8 <_printf_i>
 800658c:	e7eb      	b.n	8006566 <_svfiprintf_r+0x1c2>
 800658e:	bf00      	nop
 8006590:	08013124 	.word	0x08013124
 8006594:	0801312e 	.word	0x0801312e
 8006598:	080035a1 	.word	0x080035a1
 800659c:	080062ed 	.word	0x080062ed
 80065a0:	0801312a 	.word	0x0801312a

080065a4 <_putc_r>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	460d      	mov	r5, r1
 80065a8:	4614      	mov	r4, r2
 80065aa:	4606      	mov	r6, r0
 80065ac:	b118      	cbz	r0, 80065b6 <_putc_r+0x12>
 80065ae:	6983      	ldr	r3, [r0, #24]
 80065b0:	b90b      	cbnz	r3, 80065b6 <_putc_r+0x12>
 80065b2:	f7fe fd11 	bl	8004fd8 <__sinit>
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <_putc_r+0x84>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	d124      	bne.n	8006606 <_putc_r+0x62>
 80065bc:	6874      	ldr	r4, [r6, #4]
 80065be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c0:	07d8      	lsls	r0, r3, #31
 80065c2:	d405      	bmi.n	80065d0 <_putc_r+0x2c>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	0599      	lsls	r1, r3, #22
 80065c8:	d402      	bmi.n	80065d0 <_putc_r+0x2c>
 80065ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065cc:	f7fe fdb9 	bl	8005142 <__retarget_lock_acquire_recursive>
 80065d0:	68a3      	ldr	r3, [r4, #8]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	60a3      	str	r3, [r4, #8]
 80065d8:	da05      	bge.n	80065e6 <_putc_r+0x42>
 80065da:	69a2      	ldr	r2, [r4, #24]
 80065dc:	4293      	cmp	r3, r2
 80065de:	db1c      	blt.n	800661a <_putc_r+0x76>
 80065e0:	b2eb      	uxtb	r3, r5
 80065e2:	2b0a      	cmp	r3, #10
 80065e4:	d019      	beq.n	800661a <_putc_r+0x76>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	701d      	strb	r5, [r3, #0]
 80065ee:	b2ed      	uxtb	r5, r5
 80065f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065f2:	07da      	lsls	r2, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_putc_r+0x5e>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	059b      	lsls	r3, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_putc_r+0x5e>
 80065fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065fe:	f7fe fda1 	bl	8005144 <__retarget_lock_release_recursive>
 8006602:	4628      	mov	r0, r5
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <_putc_r+0x88>)
 8006608:	429c      	cmp	r4, r3
 800660a:	d101      	bne.n	8006610 <_putc_r+0x6c>
 800660c:	68b4      	ldr	r4, [r6, #8]
 800660e:	e7d6      	b.n	80065be <_putc_r+0x1a>
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <_putc_r+0x8c>)
 8006612:	429c      	cmp	r4, r3
 8006614:	bf08      	it	eq
 8006616:	68f4      	ldreq	r4, [r6, #12]
 8006618:	e7d1      	b.n	80065be <_putc_r+0x1a>
 800661a:	4629      	mov	r1, r5
 800661c:	4622      	mov	r2, r4
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff fbf6 	bl	8005e10 <__swbuf_r>
 8006624:	4605      	mov	r5, r0
 8006626:	e7e3      	b.n	80065f0 <_putc_r+0x4c>
 8006628:	08012f64 	.word	0x08012f64
 800662c:	08012f84 	.word	0x08012f84
 8006630:	08012f44 	.word	0x08012f44

08006634 <sqrt>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	ed2d 8b02 	vpush	{d8}
 800663a:	ec55 4b10 	vmov	r4, r5, d0
 800663e:	f000 f833 	bl	80066a8 <__ieee754_sqrt>
 8006642:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <sqrt+0x70>)
 8006644:	eeb0 8a40 	vmov.f32	s16, s0
 8006648:	eef0 8a60 	vmov.f32	s17, s1
 800664c:	f993 3000 	ldrsb.w	r3, [r3]
 8006650:	3301      	adds	r3, #1
 8006652:	d00d      	beq.n	8006670 <sqrt+0x3c>
 8006654:	4622      	mov	r2, r4
 8006656:	462b      	mov	r3, r5
 8006658:	4620      	mov	r0, r4
 800665a:	4629      	mov	r1, r5
 800665c:	f7fa fa8e 	bl	8000b7c <__aeabi_dcmpun>
 8006660:	b930      	cbnz	r0, 8006670 <sqrt+0x3c>
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa fa5f 	bl	8000b2c <__aeabi_dcmplt>
 800666e:	b930      	cbnz	r0, 800667e <sqrt+0x4a>
 8006670:	eeb0 0a48 	vmov.f32	s0, s16
 8006674:	eef0 0a68 	vmov.f32	s1, s17
 8006678:	ecbd 8b02 	vpop	{d8}
 800667c:	bd38      	pop	{r3, r4, r5, pc}
 800667e:	f7fc febd 	bl	80033fc <__errno>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	2121      	movs	r1, #33	; 0x21
 8006688:	6001      	str	r1, [r0, #0]
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	f7fa f905 	bl	800089c <__aeabi_ddiv>
 8006692:	ec41 0b18 	vmov	d8, r0, r1
 8006696:	eeb0 0a48 	vmov.f32	s0, s16
 800669a:	eef0 0a68 	vmov.f32	s1, s17
 800669e:	ecbd 8b02 	vpop	{d8}
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	200001e8 	.word	0x200001e8

080066a8 <__ieee754_sqrt>:
 80066a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ac:	4a63      	ldr	r2, [pc, #396]	; (800683c <__ieee754_sqrt+0x194>)
 80066ae:	ec55 4b10 	vmov	r4, r5, d0
 80066b2:	43aa      	bics	r2, r5
 80066b4:	f000 809f 	beq.w	80067f6 <__ieee754_sqrt+0x14e>
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	ee10 ca10 	vmov	ip, s0
 80066be:	462b      	mov	r3, r5
 80066c0:	dd54      	ble.n	800676c <__ieee754_sqrt+0xc4>
 80066c2:	1529      	asrs	r1, r5, #20
 80066c4:	d063      	beq.n	800678e <__ieee754_sqrt+0xe6>
 80066c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ca:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80066ce:	07c9      	lsls	r1, r1, #31
 80066d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d4:	d404      	bmi.n	80066e0 <__ieee754_sqrt+0x38>
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80066dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80066e0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80066e4:	2600      	movs	r6, #0
 80066e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80066ea:	107f      	asrs	r7, r7, #1
 80066ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80066f0:	f04f 0e16 	mov.w	lr, #22
 80066f4:	4634      	mov	r4, r6
 80066f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80066fa:	18a1      	adds	r1, r4, r2
 80066fc:	4299      	cmp	r1, r3
 80066fe:	dc02      	bgt.n	8006706 <__ieee754_sqrt+0x5e>
 8006700:	1a5b      	subs	r3, r3, r1
 8006702:	188c      	adds	r4, r1, r2
 8006704:	4416      	add	r6, r2
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	f1be 0e01 	subs.w	lr, lr, #1
 800670c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8006710:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006714:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006718:	d1ef      	bne.n	80066fa <__ieee754_sqrt+0x52>
 800671a:	4675      	mov	r5, lr
 800671c:	2020      	movs	r0, #32
 800671e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006722:	e00a      	b.n	800673a <__ieee754_sqrt+0x92>
 8006724:	d044      	beq.n	80067b0 <__ieee754_sqrt+0x108>
 8006726:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800672a:	3801      	subs	r0, #1
 800672c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006730:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006734:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006738:	d043      	beq.n	80067c2 <__ieee754_sqrt+0x11a>
 800673a:	42a3      	cmp	r3, r4
 800673c:	eb02 010e 	add.w	r1, r2, lr
 8006740:	ddf0      	ble.n	8006724 <__ieee754_sqrt+0x7c>
 8006742:	2900      	cmp	r1, #0
 8006744:	eb01 0e02 	add.w	lr, r1, r2
 8006748:	db0a      	blt.n	8006760 <__ieee754_sqrt+0xb8>
 800674a:	46a0      	mov	r8, r4
 800674c:	1b1b      	subs	r3, r3, r4
 800674e:	4561      	cmp	r1, ip
 8006750:	bf88      	it	hi
 8006752:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8006756:	ebac 0c01 	sub.w	ip, ip, r1
 800675a:	4415      	add	r5, r2
 800675c:	4644      	mov	r4, r8
 800675e:	e7e2      	b.n	8006726 <__ieee754_sqrt+0x7e>
 8006760:	f1be 0f00 	cmp.w	lr, #0
 8006764:	dbf1      	blt.n	800674a <__ieee754_sqrt+0xa2>
 8006766:	f104 0801 	add.w	r8, r4, #1
 800676a:	e7ef      	b.n	800674c <__ieee754_sqrt+0xa4>
 800676c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006770:	4322      	orrs	r2, r4
 8006772:	d038      	beq.n	80067e6 <__ieee754_sqrt+0x13e>
 8006774:	2d00      	cmp	r5, #0
 8006776:	d14e      	bne.n	8006816 <__ieee754_sqrt+0x16e>
 8006778:	4629      	mov	r1, r5
 800677a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 800677e:	3915      	subs	r1, #21
 8006780:	4613      	mov	r3, r2
 8006782:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 8006786:	2a00      	cmp	r2, #0
 8006788:	d0f7      	beq.n	800677a <__ieee754_sqrt+0xd2>
 800678a:	02d6      	lsls	r6, r2, #11
 800678c:	d450      	bmi.n	8006830 <__ieee754_sqrt+0x188>
 800678e:	2000      	movs	r0, #0
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	02dd      	lsls	r5, r3, #11
 8006794:	4604      	mov	r4, r0
 8006796:	f100 0001 	add.w	r0, r0, #1
 800679a:	d5f9      	bpl.n	8006790 <__ieee754_sqrt+0xe8>
 800679c:	461a      	mov	r2, r3
 800679e:	4663      	mov	r3, ip
 80067a0:	fa0c fc00 	lsl.w	ip, ip, r0
 80067a4:	f1c0 0020 	rsb	r0, r0, #32
 80067a8:	40c3      	lsrs	r3, r0
 80067aa:	1b09      	subs	r1, r1, r4
 80067ac:	4313      	orrs	r3, r2
 80067ae:	e78a      	b.n	80066c6 <__ieee754_sqrt+0x1e>
 80067b0:	4561      	cmp	r1, ip
 80067b2:	d8b8      	bhi.n	8006726 <__ieee754_sqrt+0x7e>
 80067b4:	2900      	cmp	r1, #0
 80067b6:	eb01 0e02 	add.w	lr, r1, r2
 80067ba:	dbd1      	blt.n	8006760 <__ieee754_sqrt+0xb8>
 80067bc:	4698      	mov	r8, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	e7c9      	b.n	8006756 <__ieee754_sqrt+0xae>
 80067c2:	ea53 030c 	orrs.w	r3, r3, ip
 80067c6:	d110      	bne.n	80067ea <__ieee754_sqrt+0x142>
 80067c8:	0868      	lsrs	r0, r5, #1
 80067ca:	1071      	asrs	r1, r6, #1
 80067cc:	07f3      	lsls	r3, r6, #31
 80067ce:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 80067d2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80067d6:	bf48      	it	mi
 80067d8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80067dc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 80067e0:	4602      	mov	r2, r0
 80067e2:	ec43 2b10 	vmov	d0, r2, r3
 80067e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ea:	1c6a      	adds	r2, r5, #1
 80067ec:	bf16      	itet	ne
 80067ee:	1c68      	addne	r0, r5, #1
 80067f0:	3601      	addeq	r6, #1
 80067f2:	0840      	lsrne	r0, r0, #1
 80067f4:	e7e9      	b.n	80067ca <__ieee754_sqrt+0x122>
 80067f6:	ee10 2a10 	vmov	r2, s0
 80067fa:	ee10 0a10 	vmov	r0, s0
 80067fe:	462b      	mov	r3, r5
 8006800:	4629      	mov	r1, r5
 8006802:	f7f9 ff21 	bl	8000648 <__aeabi_dmul>
 8006806:	4622      	mov	r2, r4
 8006808:	462b      	mov	r3, r5
 800680a:	f7f9 fd67 	bl	80002dc <__adddf3>
 800680e:	ec41 0b10 	vmov	d0, r0, r1
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	ee10 2a10 	vmov	r2, s0
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 fd5b 	bl	80002d8 <__aeabi_dsub>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	f7fa f839 	bl	800089c <__aeabi_ddiv>
 800682a:	ec41 0b10 	vmov	d0, r0, r1
 800682e:	e7da      	b.n	80067e6 <__ieee754_sqrt+0x13e>
 8006830:	4663      	mov	r3, ip
 8006832:	2020      	movs	r0, #32
 8006834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006838:	e7b6      	b.n	80067a8 <__ieee754_sqrt+0x100>
 800683a:	bf00      	nop
 800683c:	7ff00000 	.word	0x7ff00000

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr
